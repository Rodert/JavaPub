const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":1530,\"nextId\":1530,\"documentIds\":{\"0\":\"0\",\"1\":\"0#网站信息\",\"2\":\"0#我的网站\",\"3\":\"0#关于站长\",\"4\":\"0#保持联系\",\"5\":\"0#我朋友和我的公众号\",\"6\":\"0#搜索引擎收录直达\",\"7\":\"1\",\"8\":\"1#介绍\",\"9\":\"2\",\"10\":\"2@0\",\"11\":\"3\",\"12\":\"4\",\"13\":\"4@0\",\"14\":\"5\",\"15\":\"5@0\",\"16\":\"6\",\"17\":\"6@0\",\"18\":\"7\",\"19\":\"7@0\",\"20\":\"7@1\",\"21\":\"8\",\"22\":\"8@0\",\"23\":\"8@1\",\"24\":\"9\",\"25\":\"9#markdown-介绍\",\"26\":\"9#markdown-配置\",\"27\":\"9#markdown-扩展\",\"28\":\"9#vuepress-扩展\",\"29\":\"9#主题扩展\",\"30\":\"9#选项卡\",\"31\":\"9#脚注\",\"32\":\"9#导入文件\",\"33\":\"9#tex-语法\",\"34\":\"9#任务列表\",\"35\":\"9#图片增强\",\"36\":\"9#上下角标\",\"37\":\"9#组件\",\"38\":\"9@0\",\"39\":\"9@1\",\"40\":\"10\",\"41\":\"10#页面标题\",\"42\":\"10#页面信息\",\"43\":\"10#页面内容\",\"44\":\"10#组件\",\"45\":\"10@0\",\"46\":\"10@1\",\"47\":\"11\",\"48\":\"11#功能亮点\",\"49\":\"11#bar\",\"50\":\"11#foo\",\"51\":\"12\",\"52\":\"12@0\",\"53\":\"13\",\"54\":\"15\",\"55\":\"15@0\",\"56\":\"16\",\"57\":\"16@0\",\"58\":\"17\",\"59\":\"17#介绍\",\"60\":\"17#详情\",\"61\":\"18\",\"62\":\"18#二级\",\"63\":\"18#三级\",\"64\":\"19\",\"65\":\"19#介绍\",\"66\":\"19#详情\",\"67\":\"20\",\"68\":\"20#二级\",\"69\":\"20#三级\",\"70\":\"21\",\"71\":\"21@0\",\"72\":\"22\",\"73\":\"23\",\"74\":\"24\",\"75\":\"25\",\"76\":\"25@0\",\"77\":\"26\",\"78\":\"26@0\",\"79\":\"27\",\"80\":\"28\",\"81\":\"28@0\",\"82\":\"28@1\",\"83\":\"29\",\"84\":\"30\",\"85\":\"31\",\"86\":\"31#为什么使用单例模式\",\"87\":\"31#实现\",\"88\":\"31#预加载\",\"89\":\"31#懒加载\",\"90\":\"31#java\",\"91\":\"31#懒加载-线程安全\",\"92\":\"31#sychronized\",\"93\":\"31#sychronized-volatile\",\"94\":\"31@0\",\"95\":\"31@1\",\"96\":\"32\",\"97\":\"33\",\"98\":\"33#如何给自己的域名配置免费的https\",\"99\":\"33#_1-首先安装-snapd\",\"100\":\"33#_2-安装-certbot\",\"101\":\"33#_3-安装-certbot-命令\",\"102\":\"33#_4-获取证书\",\"103\":\"33#_5-自动续订证书\",\"104\":\"34\",\"105\":\"35\",\"106\":\"36\",\"107\":\"36#面试官-这些命令大学生都会\",\"108\":\"36#文件操作\",\"109\":\"37\",\"110\":\"37#awk\",\"111\":\"37#常用命令大全\",\"112\":\"38\",\"113\":\"39\",\"114\":\"39#问题1-可以把文章下载到本地吗-还想发到个人博客上去\",\"115\":\"39#问题2-我有个朋友是初学者-可以学吗-要怎么开始学\",\"116\":\"40\",\"117\":\"40#在准备面试\",\"118\":\"40#在学习\",\"119\":\"40@1\",\"120\":\"41\",\"121\":\"42\",\"122\":\"43\",\"123\":\"44\",\"124\":\"45\",\"125\":\"45#快速搭建-prometheus-grafana-保姆级教程\",\"126\":\"45#前言\",\"127\":\"45#prometheus-的四种类型\",\"128\":\"46\",\"129\":\"47\",\"130\":\"47#使用场景\",\"131\":\"47#搭建-etcd\",\"132\":\"47#与-etcd-交互\",\"133\":\"47#集群\",\"134\":\"47@0\",\"135\":\"47@1\",\"136\":\"48\",\"137\":\"48#rodert教你学ffmpeg实战这一篇就够了\",\"138\":\"48#前言\",\"139\":\"48#_1-简介\",\"140\":\"48#_2-安装\",\"141\":\"48#_2-1-windows安装\",\"142\":\"48#_2-2-linux安装\",\"143\":\"48#_3-命令行操使用\",\"144\":\"48#_3-1-简单说明\",\"145\":\"48#_3-2-视频剪切\",\"146\":\"48#_3-2-1-掐头去尾\",\"147\":\"48#_3-2-2\",\"148\":\"48#_3-3-视频格式转换\",\"149\":\"48#_3-4-提取音频\",\"150\":\"48#_3-5-提取音频\",\"151\":\"48#_3-6-码率控制\",\"152\":\"48#_3-7-视频编码格式转换\",\"153\":\"48#_3-8-只提取视频es数据\",\"154\":\"48#_3-9-过滤器的使用\",\"155\":\"48#_3-9-1-将输入的1920x1080缩小到960x540输出\",\"156\":\"48#_3-9-2-视频添加logo\",\"157\":\"48#_3-9-3-去掉视频的logo\",\"158\":\"48#_3-10-抓取视频的一些帧-存为jpeg图片\",\"159\":\"48#_3-11-查询操作\",\"160\":\"48#_3-11-1-查询视频总帧数\",\"161\":\"48#_3-11-2-查询ffmpeg软件信息\",\"162\":\"48#_3-12-录制\",\"163\":\"48#_3-13-直播相关\",\"164\":\"49\",\"165\":\"50\",\"166\":\"50#rodert教你学zookeeper-实战这一篇就够了\",\"167\":\"50#前言\",\"168\":\"50#_1-什么是zookeeper\",\"169\":\"50#_1-2-zookeeper简介\",\"170\":\"50#_1-3-为什么要用zookeeper\",\"171\":\"50#_2-zookeeper介绍\",\"172\":\"50#_3-zookeeper整体架构\",\"173\":\"50#_4-快速入门-quick-start\",\"174\":\"50#_4-1-安装\",\"175\":\"50#_4-2-启动\",\"176\":\"50#_4-3-查询\",\"177\":\"50#_5-常用指令\",\"178\":\"50#_6-应用场景\",\"179\":\"50#场景一-配置文件\",\"180\":\"50#场景二-分布式锁\",\"181\":\"50#场景三-分布式队列\",\"182\":\"50#场景四-负载均衡\",\"183\":\"50#_7-选举机制\",\"184\":\"50#_8-三大功能\",\"185\":\"51\",\"186\":\"52\",\"187\":\"52@0\",\"188\":\"52@1\",\"189\":\"53\",\"190\":\"53#_1-使用早返回-early-return-尽可能早地返回-避免嵌套的if-else。\",\"191\":\"53#_2-使用三元运算符-在条件简单的情况下-可以使用三元运算符来简化代码。\",\"192\":\"53#_3-使用switch-case语句-如果你的条件是基于不同的情况或值-更好的选择是switch-case。\",\"193\":\"53#_4-使用策略模式-将每个条件分支封装成一个策略对象-然后根据条件选择使用哪个策略。\",\"194\":\"53#_5-使用查找表-对于固定数量的条件分支-可以使用查找表-例如字典或哈希表-来映射条件和对应的行为。\",\"195\":\"53#_6-使用函数或方法-将每个条件分支的逻辑封装到不同的函数或方法中-然后在if-else中调用这些函数。\",\"196\":\"53#_7-使用命令模式-将每个条件分支封装成一个命令对象-然后根据条件执行相应的命令。\",\"197\":\"53#_8-使用状态模式-如果逻辑分支与状态有关-可以使用状态模式来管理状态转换。\",\"198\":\"53#_9-重构条件表达式-检查是否可以将复杂的条件表达式分解为更简单的部分。\",\"199\":\"53#_10-使用断言-在某些情况下-使用断言来确保代码的预设条件被满足-避免复杂的条件判断。\",\"200\":\"53#_11-使用异常处理-在某些情况下-使用异常处理来简化错误条件的处理。\",\"201\":\"53@0\",\"202\":\"53@1\",\"203\":\"54\",\"204\":\"54#_1-接口名称清晰、明确\",\"205\":\"54#_2-接口路径规整\",\"206\":\"54#_3-请求方式规范\",\"207\":\"54#_4-接口详细说明\",\"208\":\"54#_5-编写接口请求示例\",\"209\":\"54#_6-引入接口版本管理\",\"210\":\"54#_7-维护接口文档版本更新\",\"211\":\"54#_8-明确请求头有哪些\",\"212\":\"54#_9-接口安全\",\"213\":\"54#_10-接口测试\",\"214\":\"54#_11-定义错误码\",\"215\":\"54@0\",\"216\":\"54@1\",\"217\":\"55\",\"218\":\"55#前言\",\"219\":\"55#选择合适的日志等级\",\"220\":\"55#要打印函数的入参、出参\",\"221\":\"55#打印日志对象要做判空处理-避免阻断流程\",\"222\":\"55#不要使用日志系统的-log4j、logback-要使用-slf4j\",\"223\":\"55#对低级别的日志输出-必须进行日志级别开关判断\",\"224\":\"55#不要用e-printstacktrace-打印日志\",\"225\":\"55#打印全部的异常信息-方便定位问题\",\"226\":\"55#不要打印重复日志\",\"227\":\"55#日志尽量使用英文\",\"228\":\"55#核心业务逻辑-在每个分支首行都打印日志\",\"229\":\"55#不要打印无意义的日志-不携带上下文、日志链路-id\",\"230\":\"55@0\",\"231\":\"55@1\",\"232\":\"56\",\"233\":\"57\",\"234\":\"57@0\",\"235\":\"57@1\",\"236\":\"58\",\"237\":\"59\",\"238\":\"59#白菜价的云服务器-整理的合集\",\"239\":\"59#_1-ubuntu\",\"240\":\"59#_2-centos\",\"241\":\"59#_3-debian\",\"242\":\"59#_4-fedora\",\"243\":\"59#_5-gentoo\",\"244\":\"59#_6-alpine-linux\",\"245\":\"59@0\",\"246\":\"60\",\"247\":\"61\",\"248\":\"62\",\"249\":\"62#编程指南的优势\",\"250\":\"62#付费加入\",\"251\":\"63\",\"252\":\"64\",\"253\":\"64@0\",\"254\":\"64@1\",\"255\":\"65\",\"256\":\"65#视频\",\"257\":\"65#我做过的项目\",\"258\":\"65@0\",\"259\":\"65@1\",\"260\":\"66\",\"261\":\"66#介绍\",\"262\":\"67\",\"263\":\"67#工作\",\"264\":\"67#副业\",\"265\":\"67#生活\",\"266\":\"67#总结\",\"267\":\"67#_2025\",\"268\":\"68\",\"269\":\"69\",\"270\":\"70\",\"271\":\"70#历史图片\",\"272\":\"70@0\",\"273\":\"70@1\",\"274\":\"71\",\"275\":\"71@0\",\"276\":\"71@1\",\"277\":\"72\",\"278\":\"72@0\",\"279\":\"72@1\",\"280\":\"73\",\"281\":\"73@0\",\"282\":\"73@1\",\"283\":\"74\",\"284\":\"74@0\",\"285\":\"74@1\",\"286\":\"75\",\"287\":\"75@0\",\"288\":\"75@1\",\"289\":\"76\",\"290\":\"76#认识-ollama\",\"291\":\"76#搭建\",\"292\":\"76#linux-为例\",\"293\":\"76#测试\",\"294\":\"76#调用llama3试用\",\"295\":\"76#前言\",\"296\":\"76#搭建-1\",\"297\":\"76#附录\",\"298\":\"76@0\",\"299\":\"76@1\",\"300\":\"77\",\"301\":\"77@0\",\"302\":\"77@1\",\"303\":\"78\",\"304\":\"78#问题的由来\",\"305\":\"78#数学的力量\",\"306\":\"78#验证结果\",\"307\":\"78#数学之美\",\"308\":\"78#最后\",\"309\":\"78@0\",\"310\":\"78@1\",\"311\":\"79\",\"312\":\"79@0\",\"313\":\"79@1\",\"314\":\"80\",\"315\":\"80#写在前面\",\"316\":\"80#_1、b树\",\"317\":\"80#_2、b-树\",\"318\":\"80#b树\",\"319\":\"80#b树深入\",\"320\":\"80#b-树的查找\",\"321\":\"80#b-树\",\"322\":\"80#b-树概述\",\"323\":\"80#b-树和b-树的区别\",\"324\":\"80#拓展-mysql为什么使用b-tree-b-tree-存储知识\",\"325\":\"80#存储数据最小单元\",\"326\":\"80#主存存取原理\",\"327\":\"80#磁盘存取原理\",\"328\":\"80#总结\",\"329\":\"80@0\",\"330\":\"81\",\"331\":\"81#数据结构和算法的基本概念\",\"332\":\"81#数据、数据元素、数据逻辑结构、数据存储结构、数据类型、抽象数据类型等\",\"333\":\"81#算法、算法设计的要求、算法效率的度量、算法存储空间的需求等\",\"334\":\"81#线性数据结构\",\"335\":\"81#栈、队列和线性表的定义和基本概念\",\"336\":\"81#栈、队列和线性表的实现-包括顺序和链式存储结构\",\"337\":\"81#线性表\",\"338\":\"81#顺序存储实现-例如arraylist\",\"339\":\"81#链式存储实现-linkedlist-双向链表\",\"340\":\"81#队列\",\"341\":\"81#顺序队列\",\"342\":\"81#链式队列\",\"343\":\"81#栈的实现\",\"344\":\"81#顺序栈\",\"345\":\"81#链式栈\",\"346\":\"81#栈、队列和线性表的应用\",\"347\":\"81#基础排序\",\"348\":\"81#排序的概念和分类\",\"349\":\"81#直接插入排序、希尔排序和基数排序\",\"350\":\"81#哈希表\",\"351\":\"81#哈希表的构造\",\"352\":\"81#哈希表的实现\",\"353\":\"81#递归\",\"354\":\"81#递归函数的执行过程\",\"355\":\"81#折半查找、归并排序和快速排序\",\"356\":\"81#广义表的定义、存储与实现\",\"357\":\"81#二叉树\",\"358\":\"81#二叉树的定义及其主要特征\",\"359\":\"81#二叉树的实现-包括顺序和链式存储\",\"360\":\"81#二叉树的遍历\",\"361\":\"81#堆和堆排序\",\"362\":\"81#二叉排序树\",\"363\":\"81#二叉平衡树\",\"364\":\"81#树和森林\",\"365\":\"81#树的定义以及树的存储结构-包括双亲、双亲孩子和孩子兄弟表示法\",\"366\":\"81#树和森林与二叉树的转换\",\"367\":\"81#数和森林的遍历\",\"368\":\"81#并查集\",\"369\":\"81#b-树及其基本操作-b-树的基本概念\",\"370\":\"81#图\",\"371\":\"81#图的定义和基本概念\",\"372\":\"81#图的实现-包括数组-邻接矩阵-和领接表表示法\",\"373\":\"81#图的遍历\",\"374\":\"81#图的典型应用\",\"375\":\"81#最小生成树\",\"376\":\"81#最短路径\",\"377\":\"81#拓扑排序\",\"378\":\"81#关键路径\",\"379\":\"81@0\",\"380\":\"81@1\",\"381\":\"82\",\"382\":\"82#javapub说\",\"383\":\"82#关于布隆过滤器\",\"384\":\"82#_1-1-基础介绍\",\"385\":\"82#_1-1-1-百度百科\",\"386\":\"82#_1-1-2-原理介绍\",\"387\":\"82#_1-1-3-布隆过滤器的属性\",\"388\":\"82#_1-2-数学推导\",\"389\":\"82#_1-3-哈希\",\"390\":\"82#_2-1-java版\",\"391\":\"82#_3-1-进阶一-参数定义\",\"392\":\"82#_3-1-1-介绍\",\"393\":\"82#_3-1-2-java实现\",\"394\":\"82#_3-2-进阶二-redis版\",\"395\":\"82#_3-2-1-介绍\",\"396\":\"82#_3-2-2-java代码\",\"397\":\"82@0\",\"398\":\"82@1\",\"399\":\"83\",\"400\":\"83#前言\",\"401\":\"83#_1-桶排序-bucket-sort\",\"402\":\"83#_2-原理\",\"403\":\"83#_2-1-关键\",\"404\":\"83#_2-2-算法过程\",\"405\":\"83#_3-代码\",\"406\":\"83#_4-扩展阅读\",\"407\":\"83@0\",\"408\":\"83@1\",\"409\":\"84\",\"410\":\"84#_1-1-计数排序-counting-sort\",\"411\":\"84#_2-1-步骤\",\"412\":\"84#_2-2-实例题目\",\"413\":\"84#_3-1-代码\",\"414\":\"84#_4-1-局限性\",\"415\":\"84@0\",\"416\":\"84@1\",\"417\":\"85\",\"418\":\"85@0\",\"419\":\"85@1\",\"420\":\"86\",\"421\":\"86#前言\",\"422\":\"86#_1-基数排序\",\"423\":\"86#_1-1-对比\",\"424\":\"86#_1-2-基数排序\",\"425\":\"86#_1-3-特点\",\"426\":\"86#_2-原理\",\"427\":\"86#_2-1-实现原理\",\"428\":\"86#_2-2-步骤\",\"429\":\"86#_3-代码\",\"430\":\"86#_3-1-java-版\",\"431\":\"86@0\",\"432\":\"86@1\",\"433\":\"87\",\"434\":\"87#前言\",\"435\":\"87#id生成器\",\"436\":\"87#数据库自增\",\"437\":\"87#分布式id生成器\",\"438\":\"87#方案一-uuid\",\"439\":\"87#方案二-snowflake-雪花算法\",\"440\":\"87#算法介绍\",\"441\":\"87#源码\",\"442\":\"87@0\",\"443\":\"87@1\",\"444\":\"88\",\"445\":\"88@0\",\"446\":\"88@1\",\"447\":\"89\",\"448\":\"89@0\",\"449\":\"89@1\",\"450\":\"90\",\"451\":\"90#自我介绍\",\"452\":\"90#elasticsearch-springboot-介绍\",\"453\":\"90#elasticsearch\",\"454\":\"90#springboot\",\"455\":\"90#环境介绍\",\"456\":\"90#服务器环境\",\"457\":\"90#linux安装jdk\",\"458\":\"90#linux安装es-方法和要点\",\"459\":\"90#es集群、初步配置和使用\",\"460\":\"90#启动\",\"461\":\"90#安装使用可视化工具插件head-cerebro\",\"462\":\"90@0\",\"463\":\"90@1\",\"464\":\"91\",\"465\":\"91#ik分词器插件安装\",\"466\":\"91#拼音分词器插件安装\",\"467\":\"91#更多扩展词库\",\"468\":\"91#elasticsearch核心概念-相关术语解析\",\"469\":\"91#cluster\",\"470\":\"91#node\",\"471\":\"91#index\",\"472\":\"91#type\",\"473\":\"91#document\",\"474\":\"91#shard\",\"475\":\"91#replica\",\"476\":\"91#理解倒排索引\",\"477\":\"91#倒排索引相关术语\",\"478\":\"91#简单倒排索引实例\",\"479\":\"91@0\",\"480\":\"91@1\",\"481\":\"92\",\"482\":\"92#什么是-mapping\",\"483\":\"92#maping设置\",\"484\":\"92#dynamic-动态mapping\",\"485\":\"92#index\",\"486\":\"92#index-options\",\"487\":\"92#null-value\",\"488\":\"92#all\",\"489\":\"92#copy-to\",\"490\":\"92#分词器analyzer和arch-analyzer\",\"491\":\"92#构建mapping方式\",\"492\":\"92#类型自动识别\",\"493\":\"92#映射参数\",\"494\":\"92#字段数据类型\",\"495\":\"92#核心类型\",\"496\":\"92#字符串类型\",\"497\":\"92#数字类型\",\"498\":\"92#日期类型\",\"499\":\"92#布尔类型\",\"500\":\"92#二进制类型\",\"501\":\"92#范围类型\",\"502\":\"92#复杂类型\",\"503\":\"92#对象类型\",\"504\":\"92#嵌套类型\",\"505\":\"92#地理类型\",\"506\":\"92#经纬度类型\",\"507\":\"92#地理区域类型\",\"508\":\"92#特殊类型\",\"509\":\"92#ip-类型\",\"510\":\"92#join类型\",\"511\":\"92@0\",\"512\":\"92@1\",\"513\":\"93\",\"514\":\"93#集群\",\"515\":\"93#检查集群状态\",\"516\":\"93#检查节点状态\",\"517\":\"93#查询全部索引\",\"518\":\"93#索引\",\"519\":\"93#创建索引\",\"520\":\"93#删除索引\",\"521\":\"93#查询索引\",\"522\":\"93#数据操作\",\"523\":\"93#插入数据\",\"524\":\"93#单条插入\",\"525\":\"93#批量插入\",\"526\":\"93#删除\",\"527\":\"93#更新\",\"528\":\"93#搜索\",\"529\":\"93@0\",\"530\":\"93@1\",\"531\":\"94\",\"532\":\"94@0\",\"533\":\"94@1\",\"534\":\"95\",\"535\":\"95#前言\",\"536\":\"95#空投到底是什么\",\"537\":\"95#空投什么\",\"538\":\"95#空投合约代码\",\"539\":\"95#空投步骤\",\"540\":\"95#代码解析\",\"541\":\"95#代码详解\",\"542\":\"95@0\",\"543\":\"95@1\",\"544\":\"96\",\"545\":\"96@0\",\"546\":\"96@1\",\"547\":\"97\",\"548\":\"97#点击-start-发文字、外链\",\"549\":\"97#点击-start-出现外链、链接键盘、按钮\",\"550\":\"97#通过键盘交互-做一些操作。买卖-钱包-我的\",\"551\":\"97#其他、挂-单\",\"552\":\"97@0\",\"553\":\"97@1\",\"554\":\"98\",\"555\":\"99\",\"556\":\"99#前言\",\"557\":\"99#_1-索引是什么\",\"558\":\"99#_2-mysql索引有哪些类型\",\"559\":\"99#_3-主键索引和唯一索引有什么区别\",\"560\":\"99#_4-什么是聚簇索引和非聚簇索引-它们在innodb存储引擎中是如何工作的\",\"561\":\"99#_5-复合索引和单列索引有何区别\",\"562\":\"99#_6-hash-索引和-b-树索引区别是什么-如何选择\",\"563\":\"99#_7-索引是否越多越好-为什么\",\"564\":\"99#_8-索引什么时候会失效\",\"565\":\"99#_9-哪些情况下适合建立索引\",\"566\":\"99#_10-为什么要用-b-树-而不用二叉树\",\"567\":\"99#_11-什么是回表-如何减少回表\",\"568\":\"99#_12-能否解释什么是位图索引-以及它在mysql中的使用场景\",\"569\":\"99#_13-如何查看mysql表中已有的索引\",\"570\":\"99#_14-如何在mysql中创建全文索引-并说明全文索引的使用场景\",\"571\":\"99#_15-当表中的数据量非常大时-如何有效地维护和管理索引-以确保查询性能\",\"572\":\"99#_16-假设你有一个包含大量数据的表-并且经常需要根据某个字段进行排序。你应如何优化这个字段的索引以提高排序操作的性能\",\"573\":\"99#_17-如何优化索引\",\"574\":\"99#_18-请谈谈你对-mysql-索引碎片化的理解-并说明如何检测和修复索引碎片化。\",\"575\":\"99@0\",\"576\":\"99@1\",\"577\":\"100\",\"578\":\"100#分表分库解决思路\",\"579\":\"100#垂直分表\",\"580\":\"100#垂直分库\",\"581\":\"100#水平分库\",\"582\":\"100#水平分表\",\"583\":\"100#总结\",\"584\":\"100#后记\",\"585\":\"100#序言\",\"586\":\"100#适合阅读人群\",\"587\":\"100#阅读建议\",\"588\":\"101\",\"589\":\"101#_1-应尽量避免在-where-子句中对字段进行-null-值判断-否则将导致引擎放弃使用索引而进行全表扫描-如\",\"590\":\"101#_2-应尽量避免在-where-子句中使用-或-操作符-否则将引擎放弃使用索引而进行全表扫描。\",\"591\":\"101#_3-应尽量避免在-where-子句中使用-or-来连接条件-否则将导致引擎放弃使用索引而进行全表扫描-如\",\"592\":\"101#_4-in-和-not-in-也要慎用-否则会导致全表扫描-如\",\"593\":\"101#_5-下面的查询也将导致全表扫描\",\"594\":\"101#_6-应尽量避免在-where-子句中对字段进行表达式操作-这将导致引擎放弃使用索引而进行全表扫描。如\",\"595\":\"101#_7-应尽量避免在where子句中对字段进行函数操作-这将导致引擎放弃使用索引而进行全表扫描。如\",\"596\":\"101#_8-不要在-where-子句中的-左边进行函数、算术运算或其他表达式运算-否则系统将可能无法正确使用索引。\",\"597\":\"101#_9-在使用索引字段作为条件时-如果该索引是复合索引-那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引-否则该索引将不会被使用-并且应尽可能的让字段顺序与索引顺序相一致。\",\"598\":\"101#_10-很多时候用-exists-代替-in-是一个好的选择\",\"599\":\"101#_11-并不是所有索引对查询都有效-sql-是根据表中数据来进行查询优化的-当索引列有大量数据重复时-sql-查询可能不会去利用索引。\",\"600\":\"101#_12-索引并不是越多越好-索引固然可以提高相应的-select-的效率-但同时也降低了-insert-及-update-的效率\",\"601\":\"101#_13-尽量使用数字型字段-若只含数值信息的字段尽量不要设计为字符型-这会降低查询和连接的性能-并会增加存储开销。\",\"602\":\"101#_14-尽可能的使用-varchar-代替-char-因为首先变长字段存储空间小-可以节省存储空间-其次对于查询来说-在一个相对较小的字段内搜索效率显然要高些。\",\"603\":\"101#_15-任何地方都不要使用-select-from-t-用具体的字段列表代替-不要返回用不到的任何字段。\",\"604\":\"101#_16-避免频繁创建和删除临时表-以减少系统表资源的消耗。\",\"605\":\"101#_17-在新建临时表时-如果一次性插入数据量很大-那么可以使用-select-into-代替-create-table-避免造成大量-log-以提高速度-如果数据量不大-为了缓和系统表的资源-应先create-table-然后insert。\",\"606\":\"101#_18-如果使用到了临时表-在存储过程的最后务必将所有的临时表显式删除-先-truncate-table-然后-drop-table-这样可以避免系统表的较长时间锁定。\",\"607\":\"101#_19-尽量避免使用游标-因为游标的效率较差-如果游标操作的数据超过1万行-那么就应该考虑改写。\",\"608\":\"101#_20-使用基于游标的方法或临时表方法之前-应先寻找基于集的解决方案来解决问题-基于集的方法通常更有效。\",\"609\":\"101#_21-与临时表一样-游标并不是不可使用。对小型数据集使用-fast-forward-游标通常要优于其他逐行处理方法-尤其是在必须引用几个表才能获得所需的数据时。\",\"610\":\"101#_22-尽量避免大事务操作-提高系统并发能力。\",\"611\":\"101#_23-尽量避免向客户端返回大数据量-若数据量过大-应该考虑相应需求是否合理。\",\"612\":\"101@0\",\"613\":\"101@1\",\"614\":\"102\",\"615\":\"102#前言\",\"616\":\"102#_1-为什么要在数据库中加锁\",\"617\":\"102#_2-innodb-中有哪些锁\",\"618\":\"102#_2-1-共享锁-排它锁\",\"619\":\"102#_2-2-行锁-临键锁\",\"620\":\"102#_2-3-意向锁\",\"621\":\"102#_2-4-间隙锁-插入意向锁\",\"622\":\"102#_2-5-自增锁\",\"623\":\"102#_2-6-外键锁\",\"624\":\"102#_2-7-表锁-页锁\",\"625\":\"102#_3-什么是死锁\",\"626\":\"102#_4-行锁、表锁、页面锁有什么区别\",\"627\":\"102#行锁-row-locks\",\"628\":\"102#表锁-table-locks\",\"629\":\"102#页锁-page-locks\",\"630\":\"102#总结\",\"631\":\"102#_5-乐观锁和悲观锁有什么区别-它们什么场景会用\",\"632\":\"102#乐观锁\",\"633\":\"102#悲观锁\",\"634\":\"102#_6-select-for-update-加了行锁还是表锁\",\"635\":\"102#_7-如何通过-sql-手动给-mysql-的某个表加锁\",\"636\":\"102#_8-高并发场景下-如何修改同一条数据\",\"637\":\"102#_9-mysql-中的锁升级是什么\",\"638\":\"102#_10-mysql-rr-的隔离级别下加锁规则\",\"639\":\"102#_11-如何使用分布式锁\",\"640\":\"102#_11-1-基于唯一索引实现\",\"641\":\"102#_11-2-基于排他锁-select-for-update-实现\",\"642\":\"102#_11-3-基于乐观锁\",\"643\":\"102#_12-如何检测死锁\",\"644\":\"102#_13-你遇到过死锁吗-你怎么处理的\",\"645\":\"102@0\",\"646\":\"102@1\",\"647\":\"103\",\"648\":\"104\",\"649\":\"104#rodert单排学习redis入门【黑铁】\",\"650\":\"104#前言\",\"651\":\"104#_1-nosql-not-only-sql\",\"652\":\"104#_2-redis入门\",\"653\":\"104#_3-redis特性\",\"654\":\"104#_3-1-性能\",\"655\":\"104#_3-2-特性\",\"656\":\"104#_3-3-优势\",\"657\":\"104#_4-redis使用场景\",\"658\":\"104#_5-安装\",\"659\":\"104#_5-1-单机安装\",\"660\":\"104#_5-1-1-windows下\",\"661\":\"104#_5-1-2-linux下\",\"662\":\"104#_6-五类数据结构\",\"663\":\"104#_6-0-说明\",\"664\":\"104#_6-1-介绍\",\"665\":\"104#_6-2-redis-keys\",\"666\":\"104#_6-2-字符串-strings\",\"667\":\"104#_6-3-列表-lists\",\"668\":\"104#_6-4-哈希-hash\",\"669\":\"104#_6-5-集合-set\",\"670\":\"104#_6-6-有序集合-sorted-set\",\"671\":\"104#_7-redis常用\",\"672\":\"104@0\",\"673\":\"104@1\",\"674\":\"105\",\"675\":\"105#rodert单排学习redis进阶【青铜】\",\"676\":\"105#前言\",\"677\":\"105#_1-再谈redis\",\"678\":\"105#_2-为什么要用redis\",\"679\":\"105#_3-为什么要使用缓存\",\"680\":\"105#_4-redis数据结构\",\"681\":\"105#_4-1-sds简单动态字符串\",\"682\":\"105#_4-1-1-sds简单动态字符串\",\"683\":\"105#_4-1-2-sds简单动态字符串好处\",\"684\":\"105#_4-2-redis-链表和链表节点\",\"685\":\"105#_4-2-2-redis-链表重点\",\"686\":\"105#_4-3-redis-字典\",\"687\":\"105#_4-3-1-哈希表\",\"688\":\"105#_4-3-2-redis-rehash-重新散列\",\"689\":\"105#_4-3-3-重点\",\"690\":\"105#_4-4-跳跃表\",\"691\":\"105#_4-4-1-跳跃表\",\"692\":\"105#_4-4-2-重点\",\"693\":\"105#_4-5-整数集合\",\"694\":\"105#_4-6-压缩列表\",\"695\":\"105#_4-6-1-前言\",\"696\":\"105#_4-6-2-redis-压缩列表\",\"697\":\"105#_4-7-redis的对象\",\"698\":\"105#_4-7-1-redis的对象\",\"699\":\"105#_4-7-2-重点\",\"700\":\"105@0\",\"701\":\"105@1\",\"702\":\"106\",\"703\":\"106#rodert单排学习redis进阶【白银一】\",\"704\":\"106#前言\",\"705\":\"106#_1-redis-客户端\",\"706\":\"106#_1-1-redis-desktop-manager\",\"707\":\"106#_2-redis-连接池\",\"708\":\"106#_2-2-0-连接池\",\"709\":\"106#_2-1-redis-连接池\",\"710\":\"106#_2-1-1-前言引入\",\"711\":\"106#_2-1-2-redis-连接池\",\"712\":\"106@0\",\"713\":\"106@1\",\"714\":\"107\",\"715\":\"107#redis基本类型使用场景都懂了\",\"716\":\"107#string\",\"717\":\"107#hash\",\"718\":\"107#list\",\"719\":\"107#set\",\"720\":\"107#sortedset\",\"721\":\"107#bitmap\",\"722\":\"107#hyperloglog\",\"723\":\"107#geo\",\"724\":\"107@0\",\"725\":\"107@1\",\"726\":\"108\",\"727\":\"108#redis分布式锁要注意哪几点-离bug远一点\",\"728\":\"108@0\",\"729\":\"108@1\",\"730\":\"109\",\"731\":\"109#基于-centos7-的-redis-安装\",\"732\":\"109#前言\",\"733\":\"109#安装教程\",\"734\":\"109#_1-下载\",\"735\":\"109#_2-安装\",\"736\":\"109#_3-修改配置\",\"737\":\"109#_4-启动\",\"738\":\"109#_5-访问测试\",\"739\":\"109@0\",\"740\":\"109@1\",\"741\":\"110\",\"742\":\"110@0\",\"743\":\"110@1\",\"744\":\"111\",\"745\":\"111#前言\",\"746\":\"111#说明\",\"747\":\"111#代码讲解\",\"748\":\"111#切面注解日志\",\"749\":\"111#_1-新建接口\",\"750\":\"111#_2-引入依赖\",\"751\":\"111#_3-注解\",\"752\":\"111#_4-aop切点类\",\"753\":\"111#测试\",\"754\":\"111@0\",\"755\":\"112\",\"756\":\"112@0\",\"757\":\"113\",\"758\":\"113@0\",\"759\":\"113@1\",\"760\":\"114\",\"761\":\"114#rodert教你学maven-实战这一篇就够了\",\"762\":\"114#_2-1-maven的功能\",\"763\":\"114#_2-2-为什么使用maven\",\"764\":\"114#_3-1-安装\",\"765\":\"114#_3-2-配置\",\"766\":\"114#_5-1-命令行构建java项目\",\"767\":\"114#_5-2-使用命令行创建web项目\",\"768\":\"114#_5-3-构建maven项目命令的使用\",\"769\":\"114#_8-1-依赖范围\",\"770\":\"114#_8-2-传递性依赖\",\"771\":\"114#_8-3-可选依赖\",\"772\":\"114#_8-4-依赖冲突\",\"773\":\"114#_8-4-排除依赖\",\"774\":\"114#_9-1-maven生命周期\",\"775\":\"114#_9-2-clean生命周期\",\"776\":\"114#_9-3-default生命周期\",\"777\":\"114#_9-4-site生命周期\",\"778\":\"114#_11-1-maven继承\",\"779\":\"114#_11-2-聚合\",\"780\":\"114@0\",\"781\":\"114@1\",\"782\":\"115\",\"783\":\"115@0\",\"784\":\"115@1\",\"785\":\"116\",\"786\":\"116#_1-场景\",\"787\":\"116#_2-mybatis-xml\",\"788\":\"116#_2-1-打印sql\",\"789\":\"116#_2-2-数据库结构\",\"790\":\"116#_3-实例二\",\"791\":\"116#_4-重点\",\"792\":\"116@0\",\"793\":\"117\",\"794\":\"117#rodert教你学mybatis-实战这一篇就够了\",\"795\":\"117#前言\",\"796\":\"117#_1-什么是mybatis之jdbc攻城狮\",\"797\":\"117#_1-1-使用idea构建maven工程\",\"798\":\"117#_1-2-引入mysql依赖包\",\"799\":\"117#_1-3-准备数据\",\"800\":\"117#_1-4-jdbc代码回顾\",\"801\":\"117#_1-5-jdbc缺点分析\",\"802\":\"117#_4-mybatis介绍\",\"803\":\"117#_3-mybatis整体架构\",\"804\":\"117#_4-快速入门-quick-start\",\"805\":\"117#_4-1-引入依赖-pom-xml\",\"806\":\"117#_4-2-全局配置文件-mybatis-config-xml\",\"807\":\"117#_4-3-配置map-xml-mymapper-xml\",\"808\":\"117#_4-4-修改全局配置文件-mybatis-config-xml\",\"809\":\"117#_4-5-构建sqlsessionfactory-mybatistest-java\",\"810\":\"117#_4-6-打开sqlsession回话-并执行sql-mybatistest-xml\",\"811\":\"117#_4-7-目录结构\",\"812\":\"117#_5-分析\",\"813\":\"117#_5-1-日志\",\"814\":\"117#_5-2-mybatis使用步骤总结\",\"815\":\"117#_6-完整增删查改操作-curd\",\"816\":\"117#_6-1-创建userdao-java接口\",\"817\":\"117#_6-2-创建userdaoimpl-java\",\"818\":\"117#_6-3-编写userdao对应mapper-userdaomapper-xml\",\"819\":\"117#_6-4-添加userdao测试用例\",\"820\":\"117#_6-5-编写userdao的测试用例\",\"821\":\"117#_6-6-目录结构\",\"822\":\"117#_6-7-解决数据库字段名和实体类属性名不一致的问题\",\"823\":\"117#_7-动态代理mapper实现类\",\"824\":\"117#_7-1-思考上述crud中的问题\",\"825\":\"117#_7-2-使用动态代理改造crud\",\"826\":\"117#_7-3-完整的例子\",\"827\":\"117#_7-4-动态代理总结\",\"828\":\"117#_8-mybatis-config-xml详解\",\"829\":\"117#_8-1-properties属性读取外部资源\",\"830\":\"117#_8-2-settings设置\",\"831\":\"117#_8-3-typealiases-别名\",\"832\":\"117#_8-4-typehandlers-类处理器\",\"833\":\"117#_8-5-plugins-插件-拦截器\",\"834\":\"117#_8-6-environments-环境\",\"835\":\"117#_8-7-mappers\",\"836\":\"117#_9-mapper-xml文件详解\",\"837\":\"117#_9-1-crud标签\",\"838\":\"117#_9-1-1-select\",\"839\":\"117#_9-1-2-insert\",\"840\":\"117#_9-1-3-update\",\"841\":\"117#_9-1-4-delete\",\"842\":\"117#_9-2-和\",\"843\":\"117#_9-3-面试题-、-区别\",\"844\":\"117#_9-4-resultmap\",\"845\":\"117#_9-5-sql片段\",\"846\":\"117#_10-动态sql\",\"847\":\"117#_10-1-if\",\"848\":\"117#_10-2-choose-when-otherwise\",\"849\":\"117#_10-3-where-和set\",\"850\":\"117#_10-4-foreach\",\"851\":\"117#_11-缓存\",\"852\":\"117#_11-1-一级缓存\",\"853\":\"117#_11-2-二级缓存\",\"854\":\"117#_12-高级查询\",\"855\":\"117#_12-1-表关系说明\",\"856\":\"117#_12-2-一对一查询\",\"857\":\"117#_12-3-一对多查询\",\"858\":\"117#_12-4-多对多查询\",\"859\":\"117#_12-5-resultmap的继承\",\"860\":\"117#_12-6-高级查询的整理\",\"861\":\"117#_13-延迟加载\",\"862\":\"117#_14-如果sql语句中出现-的解决方案\",\"863\":\"117#_14-1-使用xml中的字符实体\",\"864\":\"117#_14-2-使用-cdata\",\"865\":\"117@0\",\"866\":\"117@1\",\"867\":\"118\",\"868\":\"118@0\",\"869\":\"118@1\",\"870\":\"119\",\"871\":\"119#开发环境\",\"872\":\"119#目录\",\"873\":\"119#环境搭建\",\"874\":\"119#新建项目\",\"875\":\"119#导入依赖\",\"876\":\"119#编码\",\"877\":\"119#配置文件\",\"878\":\"119#spring-dao-xml\",\"879\":\"119#jdbc-properties\",\"880\":\"119#mybatis-config-xml\",\"881\":\"119#spring-service-xml\",\"882\":\"119#spring-web-xml\",\"883\":\"119#web-xml\",\"884\":\"119#日志\",\"885\":\"119#配置说明\",\"886\":\"119#ssm实例-图书管理系统\",\"887\":\"119#sql\",\"888\":\"119#实体\",\"889\":\"119#dao接口\",\"890\":\"119#dao接口xml\",\"891\":\"119#dao接口测试\",\"892\":\"119#业务层-结果集封装\",\"893\":\"119#service-业务接口代码\",\"894\":\"119#web层\",\"895\":\"119#运行项目\",\"896\":\"119@0\",\"897\":\"120\",\"898\":\"121\",\"899\":\"121#三种快速创建springboot项目的方式\",\"900\":\"121#在线创建\",\"901\":\"121#intellij-idea-创建\",\"902\":\"121#maven-创建\",\"903\":\"121#基本项目结构\",\"904\":\"121@0\",\"905\":\"121@1\",\"906\":\"122\",\"907\":\"122#你了解pomxml吗\",\"908\":\"122@0\",\"909\":\"122@1\",\"910\":\"123\",\"911\":\"123#新建项目\",\"912\":\"123#创建接口\",\"913\":\"123#maven-打包-springboot-项目\",\"914\":\"123#文件准备\",\"915\":\"123#linux下docker安装\",\"916\":\"123#异常\",\"917\":\"123#打包构建docker镜像\",\"918\":\"123#运行\",\"919\":\"123#查看日志\",\"920\":\"123@0\",\"921\":\"123@1\",\"922\":\"124\",\"923\":\"124#视频教程\",\"924\":\"124#插件安装\",\"925\":\"124#导入依赖\",\"926\":\"124#新建数据库\",\"927\":\"124#修改配置\",\"928\":\"124#定义流程文件\",\"929\":\"124#测试\",\"930\":\"124#截图\",\"931\":\"124@0\",\"932\":\"124@1\",\"933\":\"125\",\"934\":\"125#springboot生成二维码的正确姿势-附视频-附源码\",\"935\":\"125#前言\",\"936\":\"125#初始化-springboot-项目\",\"937\":\"125#引入依赖\",\"938\":\"125#编码\",\"939\":\"125#编写工具类\",\"940\":\"125#生成二维码\",\"941\":\"125#资源共享\",\"942\":\"125@0\",\"943\":\"125@1\",\"944\":\"126\",\"945\":\"126#简介\",\"946\":\"126#prometheus\",\"947\":\"126#grafana\",\"948\":\"126#springboot工程初始化\",\"949\":\"126#环境安装\",\"950\":\"126#prometheus安装\",\"951\":\"126#grafana安装\",\"952\":\"126#整合\",\"953\":\"126@0\",\"954\":\"126@1\",\"955\":\"127\",\"956\":\"128\",\"957\":\"129\",\"958\":\"129#python-安装-cv2-已解决\",\"959\":\"129#_1-传统方式1\",\"960\":\"129#_2-第一阶段-终极办法01\",\"961\":\"129#_3-第二阶段-终极办法02\",\"962\":\"129#附加\",\"963\":\"129@0\",\"964\":\"129@1\",\"965\":\"130\",\"966\":\"131\",\"967\":\"131#参考资料\",\"968\":\"132\",\"969\":\"133\",\"970\":\"133#前言\",\"971\":\"133#快速搭建\",\"972\":\"133#安装工具\",\"973\":\"133#初始化\",\"974\":\"133#写文档\",\"975\":\"133#本地预览\",\"976\":\"133#部署-github\",\"977\":\"134\",\"978\":\"134#案例1\",\"979\":\"134#案例2-git-stash\",\"980\":\"134#案例3-git-cherry-pick\",\"981\":\"134#案例4-git-reset\",\"982\":\"134#案例5-git-fetch\",\"983\":\"135\",\"984\":\"135#_1-什么是-http\",\"985\":\"135@0\",\"986\":\"135@1\",\"987\":\"136\",\"988\":\"136#_1-什么是netty\",\"989\":\"136#为什么要用-netty-呢-说一下自己的看法。\",\"990\":\"136#netty-应用场景了解么\",\"991\":\"136#netty-核心组件有哪些-分别有什么作用\",\"992\":\"136#-1\",\"993\":\"136#-2\",\"994\":\"136@0\",\"995\":\"136@1\",\"996\":\"137\",\"997\":\"137@0\",\"998\":\"138\",\"999\":\"138#_1-什么是缓存\",\"1000\":\"138#_2-为什么要用缓存\",\"1001\":\"138#_3-请说说有哪些缓存算法-是否能手写一下-lru-代码的实现\",\"1002\":\"138#_4-常见的常见的缓存工具和框架有哪些\",\"1003\":\"138#_5-用了缓存之后-有哪些常见问题\",\"1004\":\"138#_6-如何处理缓存穿透的问题\",\"1005\":\"138#_7-如何处理缓存雪崩的问题\",\"1006\":\"138#_8-如何处理缓存击穿的问题\",\"1007\":\"138#_9-缓存和-db-的一致性如何保证\",\"1008\":\"138#_10-什么是缓存预热-如何实现缓存预热\",\"1009\":\"138#拓展-缓存数据的淘汰策略有哪些\",\"1010\":\"138#推荐阅读\",\"1011\":\"138@0\",\"1012\":\"138@1\",\"1013\":\"139\",\"1014\":\"139#_1-什么是-docker-容器\",\"1015\":\"139#_2-docker-和虚拟机有什么不同\",\"1016\":\"139#_3-什么是-dockerfile\",\"1017\":\"139#_4-使用docker-compose时如何保证容器a先于容器b运行\",\"1018\":\"139#_5-一个完整的docker由哪些部分组成\",\"1019\":\"139#_6-docker常用命令\",\"1020\":\"139#_7-描述-docker-容器的生命周期。\",\"1021\":\"139#_8-docker容器之间怎么隔离\",\"1022\":\"139@0\",\"1023\":\"139@1\",\"1024\":\"140\",\"1025\":\"140#_1-说说你们公司-es-的集群架构-索引数据大小-分片有多少-以及一些调优手段-。\",\"1026\":\"140#_2-elasticsearch-的倒排索引是什么\",\"1027\":\"140#_3-elasticsearch-是如何实现-master-选举的\",\"1028\":\"140#_4-描述一下-elasticsearch-索引文档的过程\",\"1029\":\"140#_5-详细描述一下-elasticsearch-搜索的过程\",\"1030\":\"140#_6-elasticsearch-在部署时-对-linux-的设置有哪些优化方法\",\"1031\":\"140#_7-elasticsearch-中的节点-比如共-20-个-其中的-10-个选了一个-master-另外-10-个选了另一个-master-怎么办\",\"1032\":\"140#_8-客户端在和集群连接时-如何选择特定的节点执行请求的\",\"1033\":\"140#_9-详细描述一下-elasticsearch-更新和删除文档的过程。\",\"1034\":\"140#_10-elasticsearch-对于大数据量-上亿量级-的聚合如何实现\",\"1035\":\"140#_11-在并发情况下-elasticsearch-如果保证读写一致\",\"1036\":\"140#_11-介绍一下你们的个性化搜索方案\",\"1037\":\"140#推荐阅读\",\"1038\":\"140@0\",\"1039\":\"140@1\",\"1040\":\"141\",\"1041\":\"141#_1-instanceof-关键字的作用\",\"1042\":\"141#_2-java自动装箱和拆箱\",\"1043\":\"141#_3-重载和重写区别\",\"1044\":\"141#_4-equals与-区别\",\"1045\":\"141#_5-谈谈nio和bio区别\",\"1046\":\"141#_6-string、stringbuffer、stringbuilder-的区别是什么\",\"1047\":\"141#_7-泛型是什么-有什么特点\",\"1048\":\"141#_8-final-有哪些用法\",\"1049\":\"141#_9-说一下java注解\",\"1050\":\"141#_10-java创建对象有几种方式\",\"1051\":\"141#推荐阅读\",\"1052\":\"141@0\",\"1053\":\"141@1\",\"1054\":\"142\",\"1055\":\"142#_1-start-方法和run-方法的区别\",\"1056\":\"142#_2-volatile关键字的作用\",\"1057\":\"142#_3-sleep方法和wait方法有什么区别\",\"1058\":\"142#_4-如何停止一个正在运行的线程\",\"1059\":\"142#_5-java如何实现多线程之间的通讯和协作-如何在两个线程间共享数据\",\"1060\":\"142#_6-什么是threadlocal\",\"1061\":\"142#_7-java-中-countdownlatch-和-cyclicbarrier-有什么不同\",\"1062\":\"142#_8-如何避免死锁\",\"1063\":\"142#_9-java-中-synchronized-和-reentrantlock-有什么不同\",\"1064\":\"142#_10-有三个线程-t1-t2-t3-怎么确保它们按顺序执行\",\"1065\":\"142#推荐阅读\",\"1066\":\"142@0\",\"1067\":\"142@1\",\"1068\":\"143\",\"1069\":\"143#_1-请说一下java容器集合的分类-各自的继承结构\",\"1070\":\"143#_2-collection-和-collections-有什么区别\",\"1071\":\"143#_3-list、set、map-之间的区别是什么\",\"1072\":\"143#_4-hashmap-和-hashtable-有什么区别\",\"1073\":\"143#_5-说一下-hashmap-的实现原理\",\"1074\":\"143#_6-谈谈-arraylist-和-linkedlist-的区别\",\"1075\":\"143#_7-谈谈arraylist和vector的区别\",\"1076\":\"143#_8-请谈一谈-java-集合中的-fail-fast-和-fail-safe-机制\",\"1077\":\"143#_9-hashmap是怎样确定key存放在数组的哪个位置的-jdk1-8\",\"1078\":\"143#_9-1-追问-为什么计算key的hash时要把hashcode的高16位与低16位进行异或-变式-为什么不直接用key的hashcode\",\"1079\":\"143#_10-为什么要把链表转为红黑树-阈值为什么是8\",\"1080\":\"143#拓展题-为什么-hashmap-数组的长度是2的幂次方\",\"1081\":\"143@0\",\"1082\":\"143@1\",\"1083\":\"144\",\"1084\":\"144#_1-jsp-有哪些内置对象-作用分别是什么\",\"1085\":\"144#_2-介绍一下-servlet-生命周期\",\"1086\":\"144#_3-servlet和jsp的区别和联系\",\"1087\":\"144#_4-jsp的执行过程\",\"1088\":\"144#_5-session和cookie的区别和联系-说明在自己项目中如何使用\",\"1089\":\"144#_6-转发和重定向的联系和区别\",\"1090\":\"144#_7-拦截器和过滤器的区别\",\"1091\":\"144#_8-三次握手和四次挥手\",\"1092\":\"144#_9-tcp和udp的区别\",\"1093\":\"144#_10-如何解决跨域问题\",\"1094\":\"144#_11-什么是-csrf-攻击-如何防御csrf-攻击\",\"1095\":\"144#_12-http1-0和http1-1和http2-0的区别\",\"1096\":\"144@0\",\"1097\":\"144@1\",\"1098\":\"145\",\"1099\":\"145#_1-说一说jvm的主要组成部分\",\"1100\":\"145#_2-说一下-jvm-的作用\",\"1101\":\"145#_3-说一下堆栈的区别\",\"1102\":\"145#_4-java内存泄漏\",\"1103\":\"145#_5-jvm-有哪些垃圾回收算法\",\"1104\":\"145#_6-说一下-jvm-有哪些垃圾回收器\",\"1105\":\"145#_7-说一下类加载的执行过程\",\"1106\":\"145#_8-什么是双亲委派模型-为什么要使用双亲委派模型\",\"1107\":\"145#_9-cms垃圾清理的过程\",\"1108\":\"145#_10-常用的-jvm-调优的参数都有哪些\",\"1109\":\"145#系列文章\",\"1110\":\"145@0\",\"1111\":\"145@1\",\"1112\":\"146\",\"1113\":\"146#术语0-kafka中的isr、ar又代表什么-isr的伸缩又指什么\",\"1114\":\"146#术语0-kafka中的hw、leo、lso、lw等分别代表什么\",\"1115\":\"146#_1-kafka-是什么-有什么作用\",\"1116\":\"146#_2-kafka-的架构是怎么样的\",\"1117\":\"146#_3-kafka-replicas是怎么管理的\",\"1118\":\"146#_4-如何确定当前能读到哪一条消息\",\"1119\":\"146#_5-发送消息的分区策略有哪些\",\"1120\":\"146#_6-kafka-的可靠性是怎么保证的\",\"1121\":\"146#_7-分区再分配是做什么的-解决了什么问题\",\"1122\":\"146#_8-kafka-partition-副本-leader-是怎么选举的\",\"1123\":\"146#_9-分区数越多越好吗-吞吐量就会越高吗\",\"1124\":\"146#_10-kafka-为什么这么快\",\"1125\":\"146#《最少必要面试题》\",\"1126\":\"146@0\",\"1127\":\"146@1\",\"1128\":\"147\",\"1129\":\"147#_1-什么是mybatis\",\"1130\":\"147#_2-mybatis的优点\",\"1131\":\"147#_3-和-的区别是什么\",\"1132\":\"147#_4-一个-xml-映射文件-都会写一个-dao-接口与之对应-这个-dao-接口的工作原理是什么\",\"1133\":\"147#_5-如何获取自动生成的-主-键值\",\"1134\":\"147#_6-mybatis-动态-sql-有什么用-有哪些动态-sql-执行原理\",\"1135\":\"147#_7-什么是mybatis的一级、二级缓存\",\"1136\":\"147#_8-mybatis的工作原理\",\"1137\":\"147#_9-什么是mybatis的接口绑定-有哪些实现方式\",\"1138\":\"147#_10-mybatis的分页原理\",\"1139\":\"147@0\",\"1140\":\"147@1\",\"1141\":\"148\",\"1142\":\"148#_1-mysql有哪几种log\",\"1143\":\"148#_2-mysql的复制原理以及流程\",\"1144\":\"148#_3-事物的4种隔离级别\",\"1145\":\"148#_4-相关概念\",\"1146\":\"148#_5-mysql数据库几个基本的索引类型\",\"1147\":\"148#_6-drop、delete与truncate的区\",\"1148\":\"148#_7-数据库的乐观锁和悲观锁是什么\",\"1149\":\"148#_8-sql优化方式\",\"1150\":\"148#_9-从锁的类别上分mysql都有哪些锁呢\",\"1151\":\"148#推荐阅读\",\"1152\":\"148@0\",\"1153\":\"148@1\",\"1154\":\"149\",\"1155\":\"149#_1-redis是什么\",\"1156\":\"149#_2-你在哪些场景使用redis\",\"1157\":\"149#_3-为什么redis是单线程的\",\"1158\":\"149#_4-redis持久化有几种方式\",\"1159\":\"149#_5-什么是缓存穿透-怎么解决\",\"1160\":\"149#_6-什么是缓存雪崩\",\"1161\":\"149#_7-redis使用上如何做内存优化\",\"1162\":\"149#_8-你们redis使用哪种部署方式\",\"1163\":\"149#_9-redis实现分布式锁要注意什么\",\"1164\":\"149#推荐阅读\",\"1165\":\"149@0\",\"1166\":\"149@1\",\"1167\":\"150\",\"1168\":\"150#_1-什么是-spring-框架-spring-框架有哪些主要模块\",\"1169\":\"150#_2-spring-ioc、aop举例说明\",\"1170\":\"150#_3-什么是控制反转-ioc-什么是依赖注入-di\",\"1171\":\"150#_4-描述一下-spring-bean-的生命周期\",\"1172\":\"150#_5-spring-bean-的作用域之间有什么区别\",\"1173\":\"150#_6-spring中都应用了哪些设计模式\",\"1174\":\"150#_7-spring-aop里面的几个名词的概念\",\"1175\":\"150#_8-beanfactory和applicationcontext有什么区别\",\"1176\":\"150#_9-spring如何解决循环依赖问题\",\"1177\":\"150#_10-spring事务的实现方式和实现原理\",\"1178\":\"150@0\",\"1179\":\"150@1\",\"1180\":\"151\",\"1181\":\"151#_1-为什么要用-spring-boot\",\"1182\":\"151#_2-spring-boot-有哪些优点\",\"1183\":\"151#_3-spring-boot-核心配置文件是什么\",\"1184\":\"151#_4-spring-boot的核心注解是什么-由那些注解组成\",\"1185\":\"151#_5-说一下springboot的自动装配原理\",\"1186\":\"151#_6-springboot、spring-mvc和spring有什么区别\",\"1187\":\"151#_7-springboot启动时都做了什么\",\"1188\":\"151#_8-springboot-中的监视器是什么\",\"1189\":\"151#_9-springboot-中的starter到底是什么\",\"1190\":\"151#_10-微服务中如何实现-session-共享\",\"1191\":\"151@0\",\"1192\":\"151@1\",\"1193\":\"152\",\"1194\":\"152#_1-什么是-zookeeper\",\"1195\":\"152#_2-zk-的节点类型\",\"1196\":\"152#_3-zookeeper-下-server-工作状态有哪些\",\"1197\":\"152#_4-zookeeper是cp还是ap\",\"1198\":\"152#_5-说几个-zookeeper-常用的命令。\",\"1199\":\"152#_6-介绍一下zab协议\",\"1200\":\"152#_7-zab-和-paxos-算法的联系与区别\",\"1201\":\"152#_8-zookeeper-的典型应用场景\",\"1202\":\"152#_9-chroot特性\",\"1203\":\"152#拓展\",\"1204\":\"152@0\",\"1205\":\"152@1\",\"1206\":\"153\",\"1207\":\"153#缓存\",\"1208\":\"153#_1-什么是缓存\",\"1209\":\"153#_2-为什么要用缓存\",\"1210\":\"153#_3-请说说有哪些缓存算法-是否能手写一下-lru-代码的实现\",\"1211\":\"153#_4-常见的常见的缓存工具和框架有哪些\",\"1212\":\"153#_5-用了缓存之后-有哪些常见问题\",\"1213\":\"153#_6-如何处理缓存穿透的问题\",\"1214\":\"153#_7-如何处理缓存雪崩的问题\",\"1215\":\"153#_8-如何处理缓存击穿的问题\",\"1216\":\"153#_9-缓存和-db-的一致性如何保证\",\"1217\":\"153#_10-什么是缓存预热-如何实现缓存预热\",\"1218\":\"153#拓展-缓存数据的淘汰策略有哪些\",\"1219\":\"153#docker\",\"1220\":\"153#_1-什么是-docker-容器\",\"1221\":\"153#_2-docker-和虚拟机有什么不同\",\"1222\":\"153#_3-什么是-dockerfile\",\"1223\":\"153#_4-使用docker-compose时如何保证容器a先于容器b运行\",\"1224\":\"153#_5-一个完整的docker由哪些部分组成\",\"1225\":\"153#_6-docker常用命令\",\"1226\":\"153#_7-描述-docker-容器的生命周期。\",\"1227\":\"153#_8-docker容器之间怎么隔离\",\"1228\":\"153#elasticsearch\",\"1229\":\"153#_1-说说你们公司-es-的集群架构-索引数据大小-分片有多少-以及一些调优手段-。\",\"1230\":\"153#_2-elasticsearch-的倒排索引是什么\",\"1231\":\"153#_3-elasticsearch-是如何实现-master-选举的\",\"1232\":\"153#_5-描述一下-elasticsearch-索引文档的过程\",\"1233\":\"153#_4-详细描述一下-elasticsearch-搜索的过程\",\"1234\":\"153#_5-elasticsearch-在部署时-对-linux-的设置有哪些优化方法\",\"1235\":\"153#_6-elasticsearch-中的节点-比如共-20-个-其中的-10-个选了一个-master-另外-10-个选了另一个-master-怎么办\",\"1236\":\"153#_7-客户端在和集群连接时-如何选择特定的节点执行请求的\",\"1237\":\"153#_8-详细描述一下-elasticsearch-更新和删除文档的过程。\",\"1238\":\"153#_9-elasticsearch-对于大数据量-上亿量级-的聚合如何实现\",\"1239\":\"153#_10-在并发情况下-elasticsearch-如果保证读写一致\",\"1240\":\"153#_11-介绍一下你们的个性化搜索方案\",\"1241\":\"153#java基础\",\"1242\":\"153#_1-instanceof-关键字的作用\",\"1243\":\"153#_2-java自动装箱和拆箱\",\"1244\":\"153#_3-重载和重写区别\",\"1245\":\"153#_4-equals与-区别\",\"1246\":\"153#_5-谈谈nio和bio区别\",\"1247\":\"153#_6-string、stringbuffer、stringbuilder-的区别是什么\",\"1248\":\"153#_7-泛型是什么-有什么特点\",\"1249\":\"153#_8-final-有哪些用法\",\"1250\":\"153#_9-说一下java注解\",\"1251\":\"153#_10-java创建对象有几种方式\",\"1252\":\"153#java并发\",\"1253\":\"153#_1-start-方法和run-方法的区别\",\"1254\":\"153#_2-volatile关键字的作用\",\"1255\":\"153#_3-sleep方法和wait方法有什么区别\",\"1256\":\"153#_4-如何停止一个正在运行的线程\",\"1257\":\"153#_5-java如何实现多线程之间的通讯和协作-如何在两个线程间共享数据\",\"1258\":\"153#_6-什么是threadlocal\",\"1259\":\"153#_7-java-中-countdownlatch-和-cyclicbarrier-有什么不同\",\"1260\":\"153#_8-如何避免死锁\",\"1261\":\"153#_9-java-中-synchronized-和-reentrantlock-有什么不同\",\"1262\":\"153#_10-有三个线程-t1-t2-t3-怎么确保它们按顺序执行\",\"1263\":\"153#java-容器\",\"1264\":\"153#_1-请说一下java容器集合的分类-各自的继承结构\",\"1265\":\"153#_2-collection-和-collections-有什么区别\",\"1266\":\"153#_3-list、set、map-之间的区别是什么\",\"1267\":\"153#_4-hashmap-和-hashtable-有什么区别\",\"1268\":\"153#_5-说一下-hashmap-的实现原理\",\"1269\":\"153#_6-谈谈-arraylist-和-linkedlist-的区别\",\"1270\":\"153#_7-谈谈arraylist和vector的区别\",\"1271\":\"153#_8-请谈一谈-java-集合中的-fail-fast-和-fail-safe-机制\",\"1272\":\"153#_9-hashmap是怎样确定key存放在数组的哪个位置的-jdk1-8\",\"1273\":\"153#_9-1-追问-为什么计算key的hash时要把hashcode的高16位与低16位进行异或-变式-为什么不直接用key的hashcode\",\"1274\":\"153#_10-为什么要把链表转为红黑树-阈值为什么是8\",\"1275\":\"153#拓展题-为什么-hashmap-数组的长度是2的幂次方\",\"1276\":\"153#javaee\",\"1277\":\"153#_1-jsp-有哪些内置对象-作用分别是什么\",\"1278\":\"153#_2-介绍一下-servlet-生命周期\",\"1279\":\"153#_3-servlet和jsp的区别和联系\",\"1280\":\"153#_4-jsp的执行过程\",\"1281\":\"153#_5-session和cookie的区别和联系-说明在自己项目中如何使用\",\"1282\":\"153#_6-转发和重定向的联系和区别\",\"1283\":\"153#_7-拦截器和过滤器的区别\",\"1284\":\"153#_8-三次握手和四次挥手\",\"1285\":\"153#_9-tcp和udp的区别\",\"1286\":\"153#_10-如何解决跨域问题\",\"1287\":\"153#_11-什么是-csrf-攻击-如何防御csrf-攻击\",\"1288\":\"153#_12-http1-0和http1-1和http2-0的区别\",\"1289\":\"153#jvm\",\"1290\":\"153#_1-说一说jvm的主要组成部分\",\"1291\":\"153#_2-说一下-jvm-的作用\",\"1292\":\"153#_3-说一下堆栈的区别\",\"1293\":\"153#_4-java内存泄漏\",\"1294\":\"153#_5-jvm-有哪些垃圾回收算法\",\"1295\":\"153#_6-说一下-jvm-有哪些垃圾回收器\",\"1296\":\"153#_7-说一下类加载的执行过程\",\"1297\":\"153#_8-什么是双亲委派模型-为什么要使用双亲委派模型\",\"1298\":\"153#_9-cms垃圾清理的过程\",\"1299\":\"153#_10-常用的-jvm-调优的参数都有哪些\",\"1300\":\"153#kafka\",\"1301\":\"153#术语0-kafka中的isr、ar又代表什么-isr的伸缩又指什么\",\"1302\":\"153#术语0-kafka中的hw、leo、lso、lw等分别代表什么\",\"1303\":\"153#_1-kafka-是什么-有什么作用\",\"1304\":\"153#_2-kafka-的架构是怎么样的\",\"1305\":\"153#_3-kafka-replicas是怎么管理的\",\"1306\":\"153#_4-如何确定当前能读到哪一条消息\",\"1307\":\"153#_5-发送消息的分区策略有哪些\",\"1308\":\"153#_6-kafka-的可靠性是怎么保证的\",\"1309\":\"153#_7-分区再分配是做什么的-解决了什么问题\",\"1310\":\"153#_8-kafka-partition-副本-leader-是怎么选举的\",\"1311\":\"153#_9-分区数越多越好吗-吞吐量就会越高吗\",\"1312\":\"153#_10-kafka-为什么这么快\",\"1313\":\"153#mybatis\",\"1314\":\"153#_1-什么是mybatis\",\"1315\":\"153#_2-mybatis的优点\",\"1316\":\"153#_3-和-的区别是什么\",\"1317\":\"153#_4-一个-xml-映射文件-都会写一个-dao-接口与之对应-这个-dao-接口的工作原理是什么\",\"1318\":\"153#_5-如何获取自动生成的-主-键值\",\"1319\":\"153#_6-mybatis-动态-sql-有什么用-有哪些动态-sql-执行原理\",\"1320\":\"153#_7-什么是mybatis的一级、二级缓存\",\"1321\":\"153#_8-mybatis的工作原理\",\"1322\":\"153#_9-什么是mybatis的接口绑定-有哪些实现方式\",\"1323\":\"153#_10-mybatis的分页原理\",\"1324\":\"153#mysql\",\"1325\":\"153#_1-mysql有哪几种log\",\"1326\":\"153#_2-mysql的复制原理以及流程\",\"1327\":\"153#_3-事物的4种隔离级别\",\"1328\":\"153#_4-相关概念\",\"1329\":\"153#_5-mysql数据库几个基本的索引类型\",\"1330\":\"153#_6-drop、delete与truncate的区\",\"1331\":\"153#_7-数据库的乐观锁和悲观锁是什么\",\"1332\":\"153#_8-sql优化方式\",\"1333\":\"153#_9-从锁的类别上分mysql都有哪些锁呢\",\"1334\":\"153#redis\",\"1335\":\"153#_1-redis是什么\",\"1336\":\"153#_2-你在哪些场景使用redis\",\"1337\":\"153#_3-为什么redis是单线程的\",\"1338\":\"153#_4-redis持久化有几种方式\",\"1339\":\"153#_5-什么是缓存穿透-怎么解决\",\"1340\":\"153#_6-什么是缓存雪崩\",\"1341\":\"153#_7-redis使用上如何做内存优化\",\"1342\":\"153#_8-你们redis使用哪种部署方式\",\"1343\":\"153#_9-redis实现分布式锁要注意什么\",\"1344\":\"153#spring\",\"1345\":\"153#_1-什么是-spring-框架-spring-框架有哪些主要模块\",\"1346\":\"153#_2-spring-ioc、aop举例说明\",\"1347\":\"153#_3-什么是控制反转-ioc-什么是依赖注入-di\",\"1348\":\"153#_4-描述一下-spring-bean-的生命周期\",\"1349\":\"153#_5-spring-bean-的作用域之间有什么区别\",\"1350\":\"153#_6-spring中都应用了哪些设计模式\",\"1351\":\"153#_7-spring-aop里面的几个名词的概念\",\"1352\":\"153#_8-beanfactory和applicationcontext有什么区别\",\"1353\":\"153#_9-spring如何解决循环依赖问题\",\"1354\":\"153#_10-spring事务的实现方式和实现原理\",\"1355\":\"153#springboot\",\"1356\":\"153#_1-为什么要用-spring-boot\",\"1357\":\"153#_2-spring-boot-有哪些优点\",\"1358\":\"153#_3-spring-boot-核心配置文件是什么\",\"1359\":\"153#_4-spring-boot的核心注解是什么-由那些注解组成\",\"1360\":\"153#_5-说一下springboot的自动装配原理\",\"1361\":\"153#_6-springboot、spring-mvc和spring有什么区别\",\"1362\":\"153#_7-springboot启动时都做了什么\",\"1363\":\"153#_8-springboot-中的监视器是什么\",\"1364\":\"153#_9-springboot-中的starter到底是什么\",\"1365\":\"153#_10-微服务中如何实现-session-共享\",\"1366\":\"153#zookeeper\",\"1367\":\"153#_1-什么是-zookeeper\",\"1368\":\"153#_2-zk-的节点类型\",\"1369\":\"153#_3-zookeeper-下-server-工作状态有哪些\",\"1370\":\"153#_4-zookeeper是cp还是ap\",\"1371\":\"153#_5-说几个-zookeeper-常用的命令。\",\"1372\":\"153#_6-介绍一下zab协议\",\"1373\":\"153#_7-zab-和-paxos-算法的联系与区别\",\"1374\":\"153#_8-zookeeper-的典型应用场景\",\"1375\":\"153#_9-chroot特性\",\"1376\":\"153#拓展\",\"1377\":\"153@0\",\"1378\":\"154\",\"1379\":\"154@0\",\"1380\":\"155\",\"1381\":\"155@0\",\"1382\":\"156\",\"1383\":\"156@0\",\"1384\":\"157\",\"1385\":\"157@0\",\"1386\":\"158\",\"1387\":\"158@0\",\"1388\":\"159\",\"1389\":\"159@0\",\"1390\":\"160\",\"1391\":\"160@0\",\"1392\":\"161\",\"1393\":\"161@0\",\"1394\":\"162\",\"1395\":\"162@0\",\"1396\":\"163\",\"1397\":\"163@0\",\"1398\":\"164\",\"1399\":\"164@0\",\"1400\":\"165\",\"1401\":\"165@0\",\"1402\":\"166\",\"1403\":\"166@0\",\"1404\":\"167\",\"1405\":\"167@0\",\"1406\":\"168\",\"1407\":\"168@0\",\"1408\":\"169\",\"1409\":\"169@0\",\"1410\":\"170\",\"1411\":\"170@0\",\"1412\":\"171\",\"1413\":\"171@0\",\"1414\":\"172\",\"1415\":\"172@0\",\"1416\":\"173\",\"1417\":\"173@0\",\"1418\":\"174\",\"1419\":\"174@0\",\"1420\":\"175\",\"1421\":\"175@0\",\"1422\":\"176\",\"1423\":\"176@0\",\"1424\":\"177\",\"1425\":\"177@0\",\"1426\":\"178\",\"1427\":\"178@0\",\"1428\":\"179\",\"1429\":\"179@0\",\"1430\":\"180\",\"1431\":\"180@0\",\"1432\":\"181\",\"1433\":\"181@0\",\"1434\":\"182\",\"1435\":\"182@0\",\"1436\":\"183\",\"1437\":\"183@0\",\"1438\":\"184\",\"1439\":\"184@0\",\"1440\":\"185\",\"1441\":\"185@0\",\"1442\":\"186\",\"1443\":\"186@0\",\"1444\":\"187\",\"1445\":\"187@0\",\"1446\":\"188\",\"1447\":\"188@0\",\"1448\":\"189\",\"1449\":\"189@0\",\"1450\":\"190\",\"1451\":\"190@0\",\"1452\":\"191\",\"1453\":\"191@0\",\"1454\":\"192\",\"1455\":\"192@0\",\"1456\":\"193\",\"1457\":\"193@0\",\"1458\":\"194\",\"1459\":\"194@0\",\"1460\":\"195\",\"1461\":\"195@0\",\"1462\":\"196\",\"1463\":\"196@0\",\"1464\":\"197\",\"1465\":\"197@0\",\"1466\":\"198\",\"1467\":\"198@0\",\"1468\":\"199\",\"1469\":\"199@0\",\"1470\":\"200\",\"1471\":\"200@0\",\"1472\":\"201\",\"1473\":\"201@0\",\"1474\":\"202\",\"1475\":\"202@0\",\"1476\":\"203\",\"1477\":\"203@0\",\"1478\":\"204\",\"1479\":\"204@0\",\"1480\":\"205\",\"1481\":\"205#参考底层指令\",\"1482\":\"205@0\",\"1483\":\"206\",\"1484\":\"207\",\"1485\":\"208\",\"1486\":\"208@0\",\"1487\":\"208@1\",\"1488\":\"209\",\"1489\":\"209#《新闻搜索elasticsearch》\",\"1490\":\"209@0\",\"1491\":\"209@1\",\"1492\":\"210\",\"1493\":\"211\",\"1494\":\"211#《用户中心》\",\"1495\":\"211@0\",\"1496\":\"211@1\",\"1497\":\"212\",\"1498\":\"212#《用户中心》\",\"1499\":\"212@0\",\"1500\":\"212@1\",\"1501\":\"213\",\"1502\":\"213#《用户中心》\",\"1503\":\"213@0\",\"1504\":\"213@1\",\"1505\":\"214\",\"1506\":\"214#《用户中心》\",\"1507\":\"214#环境\",\"1508\":\"214@0\",\"1509\":\"214@1\",\"1510\":\"215\",\"1511\":\"215#《用户中心》\",\"1512\":\"215#首先\",\"1513\":\"215#步骤\",\"1514\":\"215#_1-创建dockerfile\",\"1515\":\"215#_2-构建docker镜像\",\"1516\":\"215@0\",\"1517\":\"215@1\",\"1518\":\"216\",\"1519\":\"216#《用户中心》\",\"1520\":\"216#首先\",\"1521\":\"216#步骤\",\"1522\":\"216#_1-spring-boot-maven-插件\",\"1523\":\"216#_2-打包命令\",\"1524\":\"216#_3-可执行-jar\",\"1525\":\"216#_4-其他配置\",\"1526\":\"216@0\",\"1527\":\"216@1\",\"1528\":\"217\",\"1529\":\"218\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,20],\"2\":[1,1],\"3\":[1,17],\"4\":[1,7],\"5\":[1,7],\"6\":[1,23],\"7\":[1],\"8\":[1,12],\"9\":[1,3],\"10\":[null,null,1],\"11\":[1,3],\"12\":[1,11],\"13\":[null,null,1],\"14\":[1],\"15\":[null,null,1],\"16\":[1],\"17\":[null,null,1],\"18\":[1,18],\"19\":[null,null,1],\"20\":[null,null,1],\"21\":[1,20],\"22\":[null,null,1],\"23\":[null,null,1],\"24\":[2,10],\"25\":[2,8],\"26\":[2,12],\"27\":[2,11],\"28\":[2,10],\"29\":[1,10],\"30\":[1,1],\"31\":[1,2],\"32\":[1,1],\"33\":[2,25],\"34\":[1,5],\"35\":[1,2],\"36\":[1,3],\"37\":[1],\"38\":[null,null,1],\"39\":[null,null,1],\"40\":[1,3],\"41\":[1,19],\"42\":[1,20],\"43\":[1,12],\"44\":[1,13],\"45\":[null,null,1],\"46\":[null,null,2],\"47\":[1],\"48\":[1],\"49\":[1,2],\"50\":[1,2],\"51\":[1],\"52\":[null,null,2],\"53\":[1,36],\"54\":[1],\"55\":[null,null,1],\"56\":[3,59],\"57\":[null,null,1],\"58\":[2],\"59\":[1,4],\"60\":[1,2],\"61\":[1,2],\"62\":[1],\"63\":[1],\"64\":[2],\"65\":[1,4],\"66\":[1,2],\"67\":[1,2],\"68\":[1],\"69\":[1],\"70\":[1],\"71\":[null,null,3],\"72\":[1,65],\"73\":[1,3],\"74\":[1],\"75\":[1],\"76\":[null,null,1],\"77\":[1,1],\"78\":[null,null,1],\"79\":[1],\"80\":[1,10],\"81\":[null,null,2],\"82\":[null,null,2],\"83\":[1],\"84\":[1],\"85\":[2,21],\"86\":[1,20],\"87\":[1,11],\"88\":[1,22],\"89\":[1,27],\"90\":[1],\"91\":[1,17],\"92\":[1,26],\"93\":[3,33],\"94\":[null,null,1],\"95\":[null,null,1],\"96\":[1],\"97\":[1],\"98\":[1,43],\"99\":[3,9],\"100\":[3,9],\"101\":[4,12],\"102\":[2,11],\"103\":[2,19],\"104\":[1],\"105\":[1],\"106\":[1],\"107\":[2,81],\"108\":[1,37],\"109\":[1],\"110\":[1],\"111\":[1,171],\"112\":[1],\"113\":[1,2],\"114\":[4,12],\"115\":[5,26],\"116\":[1],\"117\":[1,23],\"118\":[1,14],\"119\":[null,null,1],\"120\":[1],\"121\":[2,36],\"122\":[1],\"123\":[2,593],\"124\":[1],\"125\":[3,5],\"126\":[1,61],\"127\":[2,6],\"128\":[1],\"129\":[1,58],\"130\":[1,3],\"131\":[2,17],\"132\":[3,12],\"133\":[1,22],\"134\":[null,null,2],\"135\":[null,null,2],\"136\":[1],\"137\":[1,2],\"138\":[1,10],\"139\":[2,36],\"140\":[2],\"141\":[3],\"142\":[2,47],\"143\":[2],\"144\":[3,40],\"145\":[3],\"146\":[4,18],\"147\":[3],\"148\":[2,11],\"149\":[3,16],\"150\":[3,9],\"151\":[3,71],\"152\":[3,27],\"153\":[3,25],\"154\":[3],\"155\":[4,17],\"156\":[4,19],\"157\":[3,33],\"158\":[4,57],\"159\":[3],\"160\":[4,44],\"161\":[4,32],\"162\":[3,85],\"163\":[3,34],\"164\":[1,9],\"165\":[2],\"166\":[2,2],\"167\":[1,20],\"168\":[2],\"169\":[3,94],\"170\":[3,64],\"171\":[2,27],\"172\":[2,1],\"173\":[5],\"174\":[3,85],\"175\":[3,31],\"176\":[3,68],\"177\":[2,2],\"178\":[2],\"179\":[2,9],\"180\":[2,7],\"181\":[2,6],\"182\":[2,13],\"183\":[2,136],\"184\":[2,3],\"185\":[1],\"186\":[1],\"187\":[null,null,1],\"188\":[null,null,1],\"189\":[2,9],\"190\":[8,26],\"191\":[5,20],\"192\":[7,26],\"193\":[5,26],\"194\":[7,32],\"195\":[6,35],\"196\":[5,31],\"197\":[5,36],\"198\":[4,26],\"199\":[6,32],\"200\":[5,31],\"201\":[null,null,1],\"202\":[null,null,1],\"203\":[1,21],\"204\":[3,10],\"205\":[2,34],\"206\":[2,36],\"207\":[2,12],\"208\":[2,11],\"209\":[2,24],\"210\":[2,21],\"211\":[2,36],\"212\":[2,8],\"213\":[2,7],\"214\":[2,18],\"215\":[null,null,2],\"216\":[null,null,2],\"217\":[2,2],\"218\":[1,16],\"219\":[1,26],\"220\":[2,38],\"221\":[2,24],\"222\":[5,22],\"223\":[2,46],\"224\":[3,28],\"225\":[2,17],\"226\":[1,26],\"227\":[1,8],\"228\":[2,28],\"229\":[5,35],\"230\":[null,null,2],\"231\":[null,null,2],\"232\":[1,2],\"233\":[1,8],\"234\":[null,null,1],\"235\":[null,null,1],\"236\":[1],\"237\":[2,9],\"238\":[2,65],\"239\":[2,24],\"240\":[2,18],\"241\":[2,14],\"242\":[2,17],\"243\":[2,19],\"244\":[3,22],\"245\":[null,null,6],\"246\":[1],\"247\":[1,22],\"248\":[1,3],\"249\":[1,27],\"250\":[1,33],\"251\":[1],\"252\":[1,5],\"253\":[null,null,2],\"254\":[null,null,2],\"255\":[1,14],\"256\":[1,2],\"257\":[1,6],\"258\":[null,null,2],\"259\":[null,null,1],\"260\":[1],\"261\":[1,17],\"262\":[1,10],\"263\":[1,151],\"264\":[1,81],\"265\":[1,13],\"266\":[1,7],\"267\":[1,6],\"268\":[1],\"269\":[1],\"270\":[1,38],\"271\":[1,5],\"272\":[null,null,1],\"273\":[null,null,1],\"274\":[1],\"275\":[null,null,2],\"276\":[null,null,2],\"277\":[1,18],\"278\":[null,null,2],\"279\":[null,null,3],\"280\":[2],\"281\":[null,null,3],\"282\":[null,null,3],\"283\":[2,11],\"284\":[null,null,2],\"285\":[null,null,3],\"286\":[1,8],\"287\":[null,null,2],\"288\":[null,null,2],\"289\":[1,11],\"290\":[2,9],\"291\":[1,6],\"292\":[2,15],\"293\":[1,11],\"294\":[1,21],\"295\":[1,2],\"296\":[1,81],\"297\":[1,24],\"298\":[null,null,2],\"299\":[null,null,4],\"300\":[1],\"301\":[null,null,1],\"302\":[null,null,1],\"303\":[7,16],\"304\":[1,10],\"305\":[1,18],\"306\":[1,104],\"307\":[1,9],\"308\":[1,11],\"309\":[null,null,1],\"310\":[null,null,2],\"311\":[1],\"312\":[null,null,1],\"313\":[null,null,1],\"314\":[1,2],\"315\":[1,12],\"316\":[2,44],\"317\":[2,24],\"318\":[1,12],\"319\":[1,165],\"320\":[2,60],\"321\":[2],\"322\":[1,24],\"323\":[2,116],\"324\":[5,25],\"325\":[1,27],\"326\":[1,35],\"327\":[1,87],\"328\":[1,13],\"329\":[null,null,2],\"330\":[1,5],\"331\":[1],\"332\":[6],\"333\":[4],\"334\":[1],\"335\":[2,46],\"336\":[3],\"337\":[1,77],\"338\":[3,106],\"339\":[4,122],\"340\":[1,21],\"341\":[1,131],\"342\":[1,102],\"343\":[1],\"344\":[1],\"345\":[1],\"346\":[2],\"347\":[1],\"348\":[1],\"349\":[2],\"350\":[1],\"351\":[1],\"352\":[1],\"353\":[1],\"354\":[1],\"355\":[2],\"356\":[2],\"357\":[1],\"358\":[1],\"359\":[2],\"360\":[1],\"361\":[1],\"362\":[1],\"363\":[1],\"364\":[1],\"365\":[3],\"366\":[1],\"367\":[1],\"368\":[1],\"369\":[3],\"370\":[1],\"371\":[1],\"372\":[4],\"373\":[1],\"374\":[1],\"375\":[1],\"376\":[1],\"377\":[1],\"378\":[1],\"379\":[null,null,1],\"380\":[null,null,1],\"381\":[3,20],\"382\":[1,28],\"383\":[1,21],\"384\":[2],\"385\":[2,10],\"386\":[3,38],\"387\":[3,14],\"388\":[3,4],\"389\":[3,15],\"390\":[3,88],\"391\":[5],\"392\":[3,85],\"393\":[4,25],\"394\":[5],\"395\":[4,30],\"396\":[3,16],\"397\":[null,null,1],\"398\":[null,null,2],\"399\":[1,3],\"400\":[1,29],\"401\":[5,62],\"402\":[2],\"403\":[3,19],\"404\":[2,25],\"405\":[2,109],\"406\":[2,79],\"407\":[null,null,2],\"408\":[null,null,2],\"409\":[1,19],\"410\":[5,32],\"411\":[3,16],\"412\":[2,62],\"413\":[3,43],\"414\":[3,19],\"415\":[null,null,2],\"416\":[null,null,2],\"417\":[1,194],\"418\":[null,null,2],\"419\":[null,null,2],\"420\":[1],\"421\":[1,7],\"422\":[2],\"423\":[2,12],\"424\":[3,31],\"425\":[3,11],\"426\":[2],\"427\":[3,25],\"428\":[2,58],\"429\":[2],\"430\":[4,98],\"431\":[null,null,2],\"432\":[null,null,2],\"433\":[2,4],\"434\":[1,8],\"435\":[1,18],\"436\":[1,33],\"437\":[1],\"438\":[2,41],\"439\":[4,7],\"440\":[1,128],\"441\":[1,245],\"442\":[null,null,2],\"443\":[null,null,1],\"444\":[1],\"445\":[null,null,2],\"446\":[null,null,2],\"447\":[5,68],\"448\":[null,null,2],\"449\":[null,null,2],\"450\":[5,20],\"451\":[1,2],\"452\":[3],\"453\":[1,47],\"454\":[1,30],\"455\":[1,8],\"456\":[1,24],\"457\":[1,5],\"458\":[2,17],\"459\":[2,67],\"460\":[2,9],\"461\":[2,31],\"462\":[null,null,2],\"463\":[null,null,2],\"464\":[5,53],\"465\":[1,38],\"466\":[1,36],\"467\":[1,12],\"468\":[2],\"469\":[1,7],\"470\":[1,7],\"471\":[1,9],\"472\":[1,26],\"473\":[1,21],\"474\":[1,10],\"475\":[1,30],\"476\":[1,1],\"477\":[1,32],\"478\":[1,58],\"479\":[null,null,2],\"480\":[null,null,2],\"481\":[5,25],\"482\":[3,39],\"483\":[1],\"484\":[3,48],\"485\":[1,24],\"486\":[2,27],\"487\":[2,41],\"488\":[2,14],\"489\":[2,87],\"490\":[2,21],\"491\":[1,24],\"492\":[1,54],\"493\":[1,154],\"494\":[1,10],\"495\":[1,9],\"496\":[1,39],\"497\":[1,23],\"498\":[1,19],\"499\":[1,12],\"500\":[1,11],\"501\":[1,10],\"502\":[1,5],\"503\":[1,26],\"504\":[1,46],\"505\":[1,3],\"506\":[1,9],\"507\":[1,13],\"508\":[1,10],\"509\":[2,15],\"510\":[1,59],\"511\":[null,null,2],\"512\":[null,null,2],\"513\":[5,28],\"514\":[1],\"515\":[1,8],\"516\":[1],\"517\":[1],\"518\":[1],\"519\":[1],\"520\":[1],\"521\":[1],\"522\":[1],\"523\":[1],\"524\":[1],\"525\":[1],\"526\":[1],\"527\":[1],\"528\":[1],\"529\":[null,null,2],\"530\":[null,null,2],\"531\":[1,1],\"532\":[null,null,3],\"533\":[null,null,3],\"534\":[1,12],\"535\":[1,1],\"536\":[1,17],\"537\":[2,9],\"538\":[1,7],\"539\":[1,13],\"540\":[1,55],\"541\":[1,93],\"542\":[null,null,4],\"543\":[null,null,4],\"544\":[1,1],\"545\":[null,null,2],\"546\":[null,null,2],\"547\":[1,3],\"548\":[4,5],\"549\":[5,9],\"550\":[3,6],\"551\":[3,14],\"552\":[null,null,2],\"553\":[null,null,2],\"554\":[1],\"555\":[2,5],\"556\":[1,13],\"557\":[2,9],\"558\":[2,65],\"559\":[2,11],\"560\":[4,16],\"561\":[3,31],\"562\":[7,78],\"563\":[4,23],\"564\":[3,94],\"565\":[3,58],\"566\":[6,61],\"567\":[4,54],\"568\":[4,41],\"569\":[3,44],\"570\":[4,45],\"571\":[5,31],\"572\":[5,18],\"573\":[2,36],\"574\":[6,77],\"575\":[null,null,1],\"576\":[null,null,2],\"577\":[1],\"578\":[1,51],\"579\":[1,43],\"580\":[1,31],\"581\":[1,24],\"582\":[1,13],\"583\":[1,50],\"584\":[1,9],\"585\":[1,4],\"586\":[1,5],\"587\":[1,30],\"588\":[2,47],\"589\":[9,90],\"590\":[7,34],\"591\":[9,21],\"592\":[8,16],\"593\":[3,15],\"594\":[7,10],\"595\":[5,15],\"596\":[9],\"597\":[7],\"598\":[7,14],\"599\":[7,13],\"600\":[10,12],\"601\":[6,3],\"602\":[10],\"603\":[8,3],\"604\":[4,15],\"605\":[17,13],\"606\":[10],\"607\":[6],\"608\":[5],\"609\":[9,7],\"610\":[4],\"611\":[5,14],\"612\":[null,null,1],\"613\":[null,null,2],\"614\":[2,3],\"615\":[1,16],\"616\":[2,22],\"617\":[3,2],\"618\":[4,55],\"619\":[3,36],\"620\":[3,16],\"621\":[4,66],\"622\":[3,44],\"623\":[3,16],\"624\":[4,62],\"625\":[2,34],\"626\":[4,4],\"627\":[4,17],\"628\":[4,20],\"629\":[4,20],\"630\":[1,21],\"631\":[3],\"632\":[1,37],\"633\":[1,32],\"634\":[5,30],\"635\":[6,20],\"636\":[3,45],\"637\":[3,43],\"638\":[4,81],\"639\":[2,2],\"640\":[3,47],\"641\":[4,20],\"642\":[3,27],\"643\":[2,17],\"644\":[3,41],\"645\":[null,null,1],\"646\":[null,null,2],\"647\":[1],\"648\":[3],\"649\":[3,10],\"650\":[1,36],\"651\":[6,10],\"652\":[2,101],\"653\":[2],\"654\":[3,33],\"655\":[3,22],\"656\":[2,26],\"657\":[2,103],\"658\":[2],\"659\":[3],\"660\":[3,61],\"661\":[4,20],\"662\":[2],\"663\":[3,6],\"664\":[3,57],\"665\":[4,48],\"666\":[5,98],\"667\":[5,126],\"668\":[5,89],\"669\":[5,88],\"670\":[5,119],\"671\":[2,16],\"672\":[null,null,1],\"673\":[null,null,2],\"674\":[3],\"675\":[3,3],\"676\":[1,41],\"677\":[2,35],\"678\":[2,31],\"679\":[3,9],\"680\":[2],\"681\":[3],\"682\":[3,74],\"683\":[4,35],\"684\":[4,45],\"685\":[4,25],\"686\":[4],\"687\":[4,114],\"688\":[7,53],\"689\":[3,24],\"690\":[2],\"691\":[3,59],\"692\":[3,32],\"693\":[3,43],\"694\":[3],\"695\":[4,28],\"696\":[5,32],\"697\":[3],\"698\":[4,79],\"699\":[4,35],\"700\":[null,null,1],\"701\":[null,null,2],\"702\":[3],\"703\":[3,9],\"704\":[1,14],\"705\":[3],\"706\":[4,24],\"707\":[3],\"708\":[3,26],\"709\":[4],\"710\":[3,19],\"711\":[4,169],\"712\":[null,null,1],\"713\":[null,null,2],\"714\":[1],\"715\":[1,27],\"716\":[1,17],\"717\":[1,32],\"718\":[1,41],\"719\":[1,40],\"720\":[1,33],\"721\":[1,88],\"722\":[1,71],\"723\":[1,49],\"724\":[null,null,1],\"725\":[null,null,1],\"726\":[1,8],\"727\":[2,67],\"728\":[null,null,3],\"729\":[null,null,4],\"730\":[1],\"731\":[5,10],\"732\":[1,4],\"733\":[1],\"734\":[2,7],\"735\":[2,12],\"736\":[2,12],\"737\":[2,6],\"738\":[2,13],\"739\":[null,null,1],\"740\":[null,null,1],\"741\":[1],\"742\":[null,null,1],\"743\":[null,null,1],\"744\":[3,13],\"745\":[1,4],\"746\":[1,7],\"747\":[1,1],\"748\":[1],\"749\":[2,7],\"750\":[2,13],\"751\":[2,62],\"752\":[2,161],\"753\":[1,22],\"754\":[null,null,4],\"755\":[1,227],\"756\":[null,null,2],\"757\":[1],\"758\":[null,null,2],\"759\":[null,null,2],\"760\":[2],\"761\":[2,73],\"762\":[3,16],\"763\":[2,13],\"764\":[3,44],\"765\":[3,57],\"766\":[3,41],\"767\":[3,36],\"768\":[3,96],\"769\":[3,49],\"770\":[3,13],\"771\":[3,41],\"772\":[3,62],\"773\":[3,42],\"774\":[3,33],\"775\":[3,29],\"776\":[3,47],\"777\":[3,25],\"778\":[3,113],\"779\":[3,22],\"780\":[null,null,2],\"781\":[null,null,2],\"782\":[1],\"783\":[null,null,2],\"784\":[null,null,2],\"785\":[3,9],\"786\":[2,17],\"787\":[3,69],\"788\":[3,26],\"789\":[2,49],\"790\":[2,67],\"791\":[2,15],\"792\":[null,null,2],\"793\":[2],\"794\":[2,2],\"795\":[1,20],\"796\":[2],\"797\":[2],\"798\":[3,13],\"799\":[3,54],\"800\":[3,82],\"801\":[3,5],\"802\":[2,10],\"803\":[2,1],\"804\":[5],\"805\":[6,12],\"806\":[7,73],\"807\":[6,52],\"808\":[6,71],\"809\":[6,19],\"810\":[7,101],\"811\":[3,1],\"812\":[2],\"813\":[3],\"814\":[3,21],\"815\":[4],\"816\":[4,30],\"817\":[4,41],\"818\":[6,106],\"819\":[3,18],\"820\":[3,84],\"821\":[2,1],\"822\":[3,69],\"823\":[2],\"824\":[3,20],\"825\":[3,56],\"826\":[3,239],\"827\":[3,9],\"828\":[4,5],\"829\":[3,73],\"830\":[3,11],\"831\":[5,38],\"832\":[5,11],\"833\":[5,83],\"834\":[5,15],\"835\":[3,77],\"836\":[3],\"837\":[3],\"838\":[3,15],\"839\":[4,19],\"840\":[4,9],\"841\":[4,11],\"842\":[4,100],\"843\":[5,30],\"844\":[3,4],\"845\":[3,77],\"846\":[2,5],\"847\":[3,53],\"848\":[5,71],\"849\":[4,106],\"850\":[3,78],\"851\":[2],\"852\":[3,128],\"853\":[3,138],\"854\":[2],\"855\":[3,39],\"856\":[3,107],\"857\":[3,100],\"858\":[3,147],\"859\":[3,1],\"860\":[3,39],\"861\":[2,1],\"862\":[4],\"863\":[3,66],\"864\":[3,38],\"865\":[null,null,2],\"866\":[null,null,2],\"867\":[1],\"868\":[null,null,2],\"869\":[null,null,2],\"870\":[1,21],\"871\":[1,9],\"872\":[1,8],\"873\":[1],\"874\":[1,10],\"875\":[1,188],\"876\":[1],\"877\":[1],\"878\":[3,128],\"879\":[2,19],\"880\":[3,48],\"881\":[3,74],\"882\":[3,105],\"883\":[2,84],\"884\":[1,60],\"885\":[1,5],\"886\":[2],\"887\":[1,104],\"888\":[1,58],\"889\":[1,74],\"890\":[1,112],\"891\":[1,110],\"892\":[2,133],\"893\":[2,206],\"894\":[1,154],\"895\":[1,99],\"896\":[null,null,3],\"897\":[1],\"898\":[1],\"899\":[1,10],\"900\":[1,46],\"901\":[3,37],\"902\":[2,41],\"903\":[1,2],\"904\":[null,null,2],\"905\":[null,null,2],\"906\":[2],\"907\":[1,222],\"908\":[null,null,2],\"909\":[null,null,2],\"910\":[4,3],\"911\":[1],\"912\":[1,52],\"913\":[4,27],\"914\":[1,5],\"915\":[1,66],\"916\":[1,3],\"917\":[1,19],\"918\":[1,12],\"919\":[1,25],\"920\":[null,null,4],\"921\":[null,null,4],\"922\":[4,2],\"923\":[1,8],\"924\":[1,4],\"925\":[1,31],\"926\":[1,3],\"927\":[1,61],\"928\":[1,186],\"929\":[1,24],\"930\":[1,8],\"931\":[null,null,3],\"932\":[null,null,3],\"933\":[4],\"934\":[4,24],\"935\":[1,12],\"936\":[3,4],\"937\":[1,17],\"938\":[1],\"939\":[1,81],\"940\":[1,3],\"941\":[1,13],\"942\":[null,null,2],\"943\":[null,null,3],\"944\":[4,10],\"945\":[1],\"946\":[1,32],\"947\":[1,18],\"948\":[1,69],\"949\":[1,6],\"950\":[1,93],\"951\":[1,18],\"952\":[1,25],\"953\":[null,null,3],\"954\":[null,null,3],\"955\":[1],\"956\":[1],\"957\":[1],\"958\":[4,9],\"959\":[2,24],\"960\":[3,9],\"961\":[3,31],\"962\":[1,14],\"963\":[null,null,1],\"964\":[null,null,2],\"965\":[1],\"966\":[1,8],\"967\":[1,14],\"968\":[1],\"969\":[2,40],\"970\":[1,5],\"971\":[1],\"972\":[1,10],\"973\":[1,11],\"974\":[1,22],\"975\":[1,17],\"976\":[2,70],\"977\":[1,4],\"978\":[1,21],\"979\":[4,124],\"980\":[5,111],\"981\":[4,52],\"982\":[4,39],\"983\":[3,20],\"984\":[4,44],\"985\":[null,null,1],\"986\":[null,null,2],\"987\":[3,44],\"988\":[3,14],\"989\":[5,42],\"990\":[3,50],\"991\":[4,43],\"992\":[1],\"993\":[1,15],\"994\":[null,null,1],\"995\":[null,null,2],\"996\":[2,4],\"997\":[null,null,2],\"998\":[1,22],\"999\":[3,34],\"1000\":[3,32],\"1001\":[6,85],\"1002\":[3,18],\"1003\":[4,14],\"1004\":[2,69],\"1005\":[2,77],\"1006\":[2,81],\"1007\":[5,85],\"1008\":[4,29],\"1009\":[3,20],\"1010\":[2,15],\"1011\":[null,null,1],\"1012\":[null,null,2],\"1013\":[3,20],\"1014\":[5,9],\"1015\":[4,5],\"1016\":[4,41],\"1017\":[4,36],\"1018\":[3,9],\"1019\":[2,35],\"1020\":[5,12],\"1021\":[3,56],\"1022\":[null,null,1],\"1023\":[null,null,2],\"1024\":[1,16],\"1025\":[8,78],\"1026\":[3,12],\"1027\":[5,38],\"1028\":[4,118],\"1029\":[5,151],\"1030\":[6,41],\"1031\":[14,18],\"1032\":[4,8],\"1033\":[5,30],\"1034\":[6,66],\"1035\":[5,44],\"1036\":[3,14],\"1037\":[2,16],\"1038\":[null,null,1],\"1039\":[null,null,2],\"1040\":[1,12],\"1041\":[3,56],\"1042\":[2,135],\"1043\":[2,63],\"1044\":[2,73],\"1045\":[2,111],\"1046\":[6,16],\"1047\":[3,42],\"1048\":[3,56],\"1049\":[2,230],\"1050\":[2,60],\"1051\":[2,16],\"1052\":[null,null,1],\"1053\":[null,null,2],\"1054\":[1,11],\"1055\":[4,14],\"1056\":[2,81],\"1057\":[2,107],\"1058\":[3,126],\"1059\":[4,30],\"1060\":[3,19],\"1061\":[8,132],\"1062\":[3,158],\"1063\":[8,43],\"1064\":[7,94],\"1065\":[2,16],\"1066\":[null,null,1],\"1067\":[null,null,2],\"1068\":[1,13],\"1069\":[3,24],\"1070\":[6,17],\"1071\":[6,7],\"1072\":[6,32],\"1073\":[5,33],\"1074\":[6,30],\"1075\":[2,18],\"1076\":[9,60],\"1077\":[4,10],\"1078\":[7,9],\"1079\":[4,36],\"1080\":[5,45],\"1081\":[null,null,1],\"1082\":[null,null,2],\"1083\":[3,22],\"1084\":[5,22],\"1085\":[4,71],\"1086\":[2,28],\"1087\":[2,24],\"1088\":[4,41],\"1089\":[3,15],\"1090\":[2,56],\"1091\":[2,14],\"1092\":[2,10],\"1093\":[3,38],\"1094\":[5,23],\"1095\":[5,36],\"1096\":[null,null,1],\"1097\":[null,null,2],\"1098\":[1,16],\"1099\":[2,55],\"1100\":[5,27],\"1101\":[3,43],\"1102\":[2,20],\"1103\":[4,24],\"1104\":[5],\"1105\":[3,16],\"1106\":[4,27],\"1107\":[2,45],\"1108\":[5,34],\"1109\":[1,16],\"1110\":[null,null,1],\"1111\":[null,null,2],\"1112\":[3,21],\"1113\":[4,27],\"1114\":[6,28],\"1115\":[5,33],\"1116\":[4,95],\"1117\":[4,29],\"1118\":[3,37],\"1119\":[3,41],\"1120\":[4,65],\"1121\":[4,38],\"1122\":[7,67],\"1123\":[4,93],\"1124\":[4,74],\"1125\":[2,16],\"1126\":[null,null,1],\"1127\":[null,null,2],\"1128\":[3,18],\"1129\":[2,16],\"1130\":[2,10],\"1131\":[4,36],\"1132\":[10,45],\"1133\":[5,76],\"1134\":[8,85],\"1135\":[4,49],\"1136\":[2,67],\"1137\":[4,25],\"1138\":[2,50],\"1139\":[null,null,1],\"1140\":[null,null,2],\"1141\":[1,21],\"1142\":[2,29],\"1143\":[2,19],\"1144\":[2,27],\"1145\":[2,43],\"1146\":[2,4],\"1147\":[3,27],\"1148\":[3,77],\"1149\":[2,47],\"1150\":[3,26],\"1151\":[2,17],\"1152\":[null,null,1],\"1153\":[null,null,2],\"1154\":[1,12],\"1155\":[3,21],\"1156\":[2,30],\"1157\":[3,8],\"1158\":[3,28],\"1159\":[4,19],\"1160\":[3,32],\"1161\":[3,43],\"1162\":[3,67],\"1163\":[3,23],\"1164\":[2,16],\"1165\":[null,null,1],\"1166\":[null,null,2],\"1167\":[1,17],\"1168\":[6,38],\"1169\":[4,173],\"1170\":[6,22],\"1171\":[6,59],\"1172\":[5,24],\"1173\":[2,135],\"1174\":[3,83],\"1175\":[3,58],\"1176\":[3,82],\"1177\":[3,119],\"1178\":[null,null,1],\"1179\":[null,null,2],\"1180\":[3,18],\"1181\":[5,11],\"1182\":[5,26],\"1183\":[5,24],\"1184\":[5,12],\"1185\":[2,33],\"1186\":[5,14],\"1187\":[3,16],\"1188\":[4,12],\"1189\":[4,55],\"1190\":[5,46],\"1191\":[null,null,1],\"1192\":[null,null,2],\"1193\":[3,18],\"1194\":[3,25],\"1195\":[3,39],\"1196\":[6,33],\"1197\":[3,20],\"1198\":[5,8],\"1199\":[3,23],\"1200\":[6,54],\"1201\":[3,82],\"1202\":[2,20],\"1203\":[1,29],\"1204\":[null,null,1],\"1205\":[null,null,2],\"1206\":[3,11],\"1207\":[1],\"1208\":[3,34],\"1209\":[3,32],\"1210\":[6,85],\"1211\":[3,18],\"1212\":[4,14],\"1213\":[2,69],\"1214\":[2,77],\"1215\":[2,81],\"1216\":[5,85],\"1217\":[4,29],\"1218\":[3,20],\"1219\":[1],\"1220\":[5,9],\"1221\":[4,5],\"1222\":[4,41],\"1223\":[4,36],\"1224\":[3,9],\"1225\":[2,35],\"1226\":[5,12],\"1227\":[3,39],\"1228\":[1],\"1229\":[8,78],\"1230\":[3,12],\"1231\":[5,38],\"1232\":[4,119],\"1233\":[5,153],\"1234\":[6,41],\"1235\":[14,18],\"1236\":[4,8],\"1237\":[5,30],\"1238\":[6,66],\"1239\":[5,44],\"1240\":[3,14],\"1241\":[1],\"1242\":[3,56],\"1243\":[2,135],\"1244\":[2,63],\"1245\":[2,73],\"1246\":[2,111],\"1247\":[6,16],\"1248\":[3,42],\"1249\":[3,56],\"1250\":[2,230],\"1251\":[2,56],\"1252\":[1],\"1253\":[4,14],\"1254\":[2,81],\"1255\":[2,107],\"1256\":[3,126],\"1257\":[4,30],\"1258\":[3,19],\"1259\":[8,132],\"1260\":[3,158],\"1261\":[8,43],\"1262\":[7,91],\"1263\":[2],\"1264\":[3,24],\"1265\":[6,17],\"1266\":[6,7],\"1267\":[6,32],\"1268\":[5,33],\"1269\":[6,30],\"1270\":[2,18],\"1271\":[9,60],\"1272\":[4,10],\"1273\":[7,9],\"1274\":[4,36],\"1275\":[5,28],\"1276\":[1],\"1277\":[5,22],\"1278\":[4,71],\"1279\":[2,28],\"1280\":[2,24],\"1281\":[4,41],\"1282\":[3,15],\"1283\":[2,56],\"1284\":[2,14],\"1285\":[2,10],\"1286\":[3,38],\"1287\":[5,23],\"1288\":[5,19],\"1289\":[1],\"1290\":[2,56],\"1291\":[5,27],\"1292\":[3,43],\"1293\":[2,20],\"1294\":[4,24],\"1295\":[5,1],\"1296\":[3,17],\"1297\":[4,27],\"1298\":[2,46],\"1299\":[5,31],\"1300\":[1,5],\"1301\":[4,27],\"1302\":[6,28],\"1303\":[5,33],\"1304\":[4,95],\"1305\":[4,29],\"1306\":[3,37],\"1307\":[3,41],\"1308\":[4,65],\"1309\":[4,38],\"1310\":[7,67],\"1311\":[4,93],\"1312\":[4,74],\"1313\":[1],\"1314\":[2,16],\"1315\":[2,10],\"1316\":[4,36],\"1317\":[10,45],\"1318\":[5,76],\"1319\":[8,85],\"1320\":[4,49],\"1321\":[2,67],\"1322\":[4,25],\"1323\":[2,33],\"1324\":[1,10],\"1325\":[2,29],\"1326\":[2,19],\"1327\":[2,27],\"1328\":[2,43],\"1329\":[2,4],\"1330\":[3,27],\"1331\":[3,77],\"1332\":[2,47],\"1333\":[3,26],\"1334\":[1],\"1335\":[3,21],\"1336\":[2,30],\"1337\":[3,8],\"1338\":[3,28],\"1339\":[4,19],\"1340\":[3,32],\"1341\":[3,44],\"1342\":[3,67],\"1343\":[3,23],\"1344\":[1],\"1345\":[6,38],\"1346\":[4,173],\"1347\":[6,22],\"1348\":[6,59],\"1349\":[5,24],\"1350\":[2,135],\"1351\":[3,83],\"1352\":[3,58],\"1353\":[3,82],\"1354\":[3,103],\"1355\":[1],\"1356\":[5,11],\"1357\":[5,26],\"1358\":[5,24],\"1359\":[5,12],\"1360\":[2,33],\"1361\":[5,14],\"1362\":[3,16],\"1363\":[4,12],\"1364\":[4,55],\"1365\":[5,29],\"1366\":[1],\"1367\":[3,25],\"1368\":[3,39],\"1369\":[6,33],\"1370\":[3,20],\"1371\":[5,8],\"1372\":[3,23],\"1373\":[6,54],\"1374\":[3,82],\"1375\":[2,20],\"1376\":[1,15],\"1377\":[null,null,2],\"1378\":[1,55],\"1379\":[null,null,2],\"1380\":[1,386],\"1381\":[null,null,2],\"1382\":[1,209],\"1383\":[null,null,2],\"1384\":[1,106],\"1385\":[null,null,2],\"1386\":[1,202],\"1387\":[null,null,2],\"1388\":[1,151],\"1389\":[null,null,2],\"1390\":[1,216],\"1391\":[null,null,2],\"1392\":[1,274],\"1393\":[null,null,2],\"1394\":[1,218],\"1395\":[null,null,2],\"1396\":[1,186],\"1397\":[null,null,2],\"1398\":[1,276],\"1399\":[null,null,2],\"1400\":[1,127],\"1401\":[null,null,2],\"1402\":[1,261],\"1403\":[null,null,2],\"1404\":[1,184],\"1405\":[null,null,2],\"1406\":[1,209],\"1407\":[null,null,2],\"1408\":[1,356],\"1409\":[null,null,2],\"1410\":[1,273],\"1411\":[null,null,2],\"1412\":[1,183],\"1413\":[null,null,2],\"1414\":[1,171],\"1415\":[null,null,2],\"1416\":[1,227],\"1417\":[null,null,2],\"1418\":[1,123],\"1419\":[null,null,2],\"1420\":[1,158],\"1421\":[null,null,2],\"1422\":[1,145],\"1423\":[null,null,2],\"1424\":[1,308],\"1425\":[null,null,2],\"1426\":[1,92],\"1427\":[null,null,2],\"1428\":[1,109],\"1429\":[null,null,2],\"1430\":[1,85],\"1431\":[null,null,2],\"1432\":[1,85],\"1433\":[null,null,2],\"1434\":[1,81],\"1435\":[null,null,2],\"1436\":[1,95],\"1437\":[null,null,2],\"1438\":[1,94],\"1439\":[null,null,2],\"1440\":[1,133],\"1441\":[null,null,2],\"1442\":[1,130],\"1443\":[null,null,2],\"1444\":[1,101],\"1445\":[null,null,2],\"1446\":[1,196],\"1447\":[null,null,2],\"1448\":[1,158],\"1449\":[null,null,2],\"1450\":[1,110],\"1451\":[null,null,2],\"1452\":[1,100],\"1453\":[null,null,2],\"1454\":[1,100],\"1455\":[null,null,2],\"1456\":[1,107],\"1457\":[null,null,2],\"1458\":[1,78],\"1459\":[null,null,2],\"1460\":[1,124],\"1461\":[null,null,2],\"1462\":[1,117],\"1463\":[null,null,2],\"1464\":[1,101],\"1465\":[null,null,2],\"1466\":[1,162],\"1467\":[null,null,2],\"1468\":[1,124],\"1469\":[null,null,2],\"1470\":[1,91],\"1471\":[null,null,2],\"1472\":[2],\"1473\":[null,null,2],\"1474\":[1,155],\"1475\":[null,null,2],\"1476\":[1,230],\"1477\":[null,null,2],\"1478\":[1,219],\"1479\":[null,null,2],\"1480\":[1,214],\"1481\":[2,233],\"1482\":[null,null,2],\"1483\":[2],\"1484\":[1],\"1485\":[3,6],\"1486\":[null,null,3],\"1487\":[null,null,3],\"1488\":[1],\"1489\":[2,4],\"1490\":[null,null,3],\"1491\":[null,null,3],\"1492\":[3,28],\"1493\":[1,1],\"1494\":[2,174],\"1495\":[null,null,3],\"1496\":[null,null,2],\"1497\":[1],\"1498\":[2,4],\"1499\":[null,null,3],\"1500\":[null,null,2],\"1501\":[1,4],\"1502\":[2,103],\"1503\":[null,null,3],\"1504\":[null,null,2],\"1505\":[2,5],\"1506\":[2,26],\"1507\":[1,184],\"1508\":[null,null,3],\"1509\":[null,null,5],\"1510\":[1],\"1511\":[2,12],\"1512\":[1,32],\"1513\":[1],\"1514\":[2,39],\"1515\":[2,28],\"1516\":[null,null,3],\"1517\":[null,null,4],\"1518\":[1],\"1519\":[2,8],\"1520\":[1,28],\"1521\":[1],\"1522\":[5,39],\"1523\":[2,16],\"1524\":[4,24],\"1525\":[2,50],\"1526\":[null,null,3],\"1527\":[null,null,4],\"1528\":[1,3],\"1529\":[1]},\"averageFieldLength\":[2.509101657286459,39.15537190707398,1.0138929765142646],\"storedFields\":{\"0\":{\"h\":\"项目主页\"},\"1\":{\"h\":\"网站信息\",\"t\":[\"JavaPub 官方网站，优质原创资源会在这里归档，计划运营到 2050 年，期待你的陪伴。目前所有内容都由站长个人维护、并在逐步完善中，如果你有兴趣欢迎参与进来。\",\"如果觉得有用，可以前往代码仓库点个免费的 start (求星星✨)。传送门： GitHub | Gitee\",\"实战项目\",\"常见问题\"]},\"2\":{\"h\":\"我的网站\",\"t\":[\"在线Markdown转微信格式网站\"]},\"3\":{\"h\":\"关于站长\",\"t\":[\"linktr | 个人站点 | 微信公众号 | 微博 | 语雀 | 知乎 | GitHub | 掘金 | CSDN | 腾讯云开发者社区 | 哔哩哔哩 | 阿里云栖社区 | 西瓜视频 | 微博\",\"作者信息\",\"作者照片\",\"联系站长\"]},\"4\":{\"h\":\"保持联系\",\"t\":[\"我总是对探索新技术和合作开展有趣的项目感到兴奋。如果您想联系或合作，请随时联系我：\",\"WeChat\",\"Send me email\"]},\"5\":{\"h\":\"我朋友和我的公众号\",\"t\":[\"所有的内容会公众号第一时间更新，其他平台也会同步。此外，通过公众号可以获得站长联系方式。\",\"JavaPub官方公众号\",\"Visitor Count\"]},\"6\":{\"h\":\"搜索引擎收录直达\",\"t\":[\"收录\",\"地址\",\"谷歌收录\",\"https://www.google.com.hk/search?q=javapub\",\"百度收录\",\"https://www.baidu.com/s?wd=javapub\",\"必应收录\",\"https://www4.bing.com/search?q=javapub\",\"360收录\",\"https://www.so.com/s?q=javapub\",\"搜狗收录\",\"https://www.sogou.com/web?query=javapub\"]},\"7\":{\"h\":\"档案主页\"},\"8\":{\"h\":\"介绍\",\"t\":[\"这是一个档案主页的案例。\",\"要使用此布局，你应该在页面 Frontmatter 中设置 home: true 和 portfolio: true。\",\"相关配置文档请见 档案主页。\"]},\"9\":{\"h\":\"Java\",\"t\":[\"《阿里巴巴开发手册（黄山版）》\"]},\"10\":{\"c\":[\"java\"]},\"11\":{\"h\":\"技术书籍\",\"t\":[\"知识是人类进步的阶梯，永远是。\"]},\"12\":{\"h\":\"成长\",\"t\":[\"《提问的智慧》\",\"《比特币：一个虚幻而真实的金融世界》\",\"《一个创业程序员的35岁人生人生总结》\",\"《华尔街之狼》\",\"《华商崛起》\",\"《天才源自刻意练习：通向成功的高效学习法》\",\"《被讨厌的勇气.pdf》\"]},\"13\":{\"c\":[\"成长\"]},\"14\":{\"h\":\"数据库\"},\"15\":{\"c\":[\"数据库\"]},\"16\":{\"h\":\"主要功能与配置演示\"},\"17\":{\"c\":[\"使用指南\"]},\"18\":{\"h\":\"布局与功能禁用\",\"t\":[\"你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。\",\"本页面就是一个示例，禁用了如下功能:\",\"导航栏\",\"侧边栏\",\"路径导航\",\"页面信息\",\"贡献者\",\"编辑此页链接\",\"更新时间\",\"上一篇/下一篇 链接\",\"评论\",\"页脚\",\"返回顶部按钮\"]},\"19\":{\"c\":[\"使用指南\"]},\"20\":{\"c\":[\"禁用\"]},\"21\":{\"h\":\"布局\",\"t\":[\"布局包括:\",\"导航栏\",\"侧边栏\",\"页脚\",\"同时每个页面包含:\",\"路径导航\",\"标题和页面信息\",\"TOC (文章标题列表)\",\"贡献者、更新时间等页面元信息\",\"评论\",\"主题也带有以下元素:\",\"夜间模式按钮\",\"返回顶部按钮\",\"打印按钮\",\"你可以在主题选项和页面的 frontmatter 中自定义它们。\"]},\"22\":{\"c\":[\"指南\"]},\"23\":{\"c\":[\"布局\"]},\"24\":{\"h\":\"Markdown 展示\",\"t\":[\"VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。\",\"你需要创建并编写 Markdown，以便 VuePress 可以根据文件结构将它们转换为不同的页面。\"]},\"25\":{\"h\":\"Markdown 介绍\",\"t\":[\"如果你是一个新手，还不会编写 Markdown，请先阅读 Markdown 介绍 和 Markdown 演示。\"]},\"26\":{\"h\":\"Markdown 配置\",\"t\":[\"VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。\",\"Frontmatter\",\"Frontmatter 是 VuePress 中很重要的一个概念，请阅读 Frontmatter 介绍 了解详情。\"]},\"27\":{\"h\":\"Markdown 扩展\",\"t\":[\"VuePress 会使用 markdown-it 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 语法扩展 。\"]},\"28\":{\"h\":\"VuePress 扩展\",\"t\":[\"为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。\",\"关于这些扩展，请阅读 VuePress 中的 Markdown 扩展。\"]},\"29\":{\"h\":\"主题扩展\",\"t\":[\"通过 vuepress-plugin-md-enhance，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。\"]},\"30\":{\"h\":\"选项卡\",\"t\":[\"查看详情\"]},\"31\":{\"h\":\"脚注\",\"t\":[\"此文字有脚注^first.\",\"查看详情\"]},\"32\":{\"h\":\"导入文件\",\"t\":[\"查看详情\"]},\"33\":{\"h\":\"TeX 语法\",\"t\":[\"$$ \\\\frac {\\\\partial^r} {\\\\partial \\\\omega^r} \\\\left(\\\\frac {y^{\\\\omega}} {\\\\omega}\\\\right) = \\\\left(\\\\frac {y^{\\\\omega}} {\\\\omega}\\\\right) \\\\left{(\\\\log y)^r + \\\\sum_{i=1}^r \\\\frac {(-1)^i r \\\\cdots (r-i+1) (\\\\log y)^{r-i}} {\\\\omega^i} \\\\right} $$\",\"查看详情\"]},\"34\":{\"h\":\"任务列表\",\"t\":[\" 计划 1\",\" 计划 2\",\"查看详情\"]},\"35\":{\"h\":\"图片增强\",\"t\":[\"支持为图片设置颜色模式和大小。\",\"查看详情\"]},\"36\":{\"h\":\"上下角标\",\"t\":[\"19th H2O\",\"查看详情\"]},\"37\":{\"h\":\"组件\"},\"38\":{\"c\":[\"使用指南\"]},\"39\":{\"c\":[\"Markdown\"]},\"40\":{\"h\":\"页面配置\",\"t\":[\"more 注释之前的内容被视为文章摘要。\"]},\"41\":{\"h\":\"页面标题\",\"t\":[\"The first H1 title in Markdown will be regarded as page title.\",\"Markdown 中的第一个 H1 标题会被视为页面标题。\",\"你可以在 Markdown 的 Frontmatter 中设置页面标题。\",\"--- title: 页面标题 ---\"]},\"42\":{\"h\":\"页面信息\",\"t\":[\"你可以在 Markdown 的 Frontmatter 中设置页面信息。\",\"作者设置为 Ms.Hope。\",\"写作日期为 2020 年 1 月 1 日\",\"分类为 “使用指南”\",\"标签为 “页面配置” 和 “使用指南”\"]},\"43\":{\"h\":\"页面内容\",\"t\":[\"你可以自由在这里书写你的 Markdown。\",\"图片引入\",\"你可以将图片和 Markdown 文件放置在一起使用相对路径进行引用。\",\"对于 .vuepress/public 文件夹的图片，请使用绝对链接 / 进行引用。\"]},\"44\":{\"h\":\"组件\",\"t\":[\"每个 Markdown 页面都会被转换为一个 Vue 组件，这意味着你可以在 Markdown 中使用 Vue 语法：\",\"{{ 1 + 1 }}\",\"{{ i }}\",\"你也可以创建并引入你自己的组件。\"]},\"45\":{\"c\":[\"使用指南\"]},\"46\":{\"c\":[\"页面配置\",\"使用指南\"]},\"47\":{\"h\":\"指南\"},\"48\":{\"h\":\"功能亮点\"},\"49\":{\"h\":\"Bar\",\"t\":[\"baz\",\"...\"]},\"50\":{\"h\":\"Foo\",\"t\":[\"ray\",\"...\"]},\"51\":{\"h\":\"杂记\"},\"52\":{\"c\":[\"杂记\",\"碎碎叨\"]},\"53\":{\"h\":\"编程指南\",\"t\":[\"🔔提示\",\"面试专题： 在准备面试的朋友可以优先阅读面试专栏 最少必要面试题\",\"知识星球： 星球内提供一对一交流/简历修改/实战项目直播教学等专属求职指南，毕竟合不合适也可以先体验 3 天。欢迎加入 JavaPub知识星球\",\"求个 Star：如果 JavaPub 的内容对你有所帮助，请点一个免费的 Star，这是对我最大的鼓励。传送门： GitHub | Gitee。\",\"转载说明： 所有文章非特别说明都为 JavaPub 原创，转载请在文章头部注明出处。抄袭不会长久，合作才有未来。还有这样做违FA，费时费力，不如加上三五好友加入 编程指南知识星球 分享高昂分成。\"]},\"54\":{\"h\":\"关于网站\"},\"55\":{\"c\":[\"网站信息\"]},\"56\":{\"h\":\"2025年，100本豆瓣高分必读书单！\",\"t\":[\"读书确实是推动人类社会进化的重要力量。它不仅传递知识，还培养思维能力、创造力和批判性思考，这些都是社会发展和科技进步的关键因素。教育能够使个体更好地适应社会，促进个人成长，同时也推动整个社会的进步。\",\"尤其是阅读经典书籍，是获取知识和智慧的宝贵途径。经典书籍往往包含了人类历史上最深刻、最普遍的思想和智慧，它们能够跨越时间和空间，对不同时代的读者产生影响。通过阅读，我们可以与历史上的伟人对话，学习他们的见解和经验，这对于个人的成长和对社会的贡献都是极其宝贵的。\",\"以下这份包含100本经典书籍的书单，是我花费一个月时间整理的：\",\"（一部分书籍目录）\",\"点击下方链接，获取100本经典书单：\",\"2025年，知乎最硬核书单\",\"我一直认为，在知识的海洋中，书籍是那艘引领我探索未知世界的航船。它们以低廉的价格，承载着无价的智慧，是通往卓越之路的钥匙。\",\"在追求专业精进的道路上，选择几本经典之作，反复咀嚼其深邃的思想，每一次的深入都能让我们的专业技能更加精湛。\",\"阅读不仅是知识的积累，更是灵魂的对话。它让我们与历史上的智者对话，与不同文化的思想碰撞，从而拓宽我们的视野，提升我们的认知。\",\"在这个信息爆炸的时代，能够静下心来，与一本好书为伴，是一种难得的奢侈。\",\"让我们一起通过经典书籍茁壮成长！\",\"书单我已经帮大家打包好了，点击下方链接直接获取：\",\"2025年，知乎最硬核书单\",\"书籍下载链接\",\"链接: https://pan.baidu.com/s/19A1w3CHlADTnSSLHTtEh8Q?pwd=gbu6 提取码: gbu6\"]},\"57\":{\"c\":[\"成长\"]},\"58\":{\"h\":\"Bar 功能\"},\"59\":{\"h\":\"介绍\",\"t\":[\"我们支持 bar 功能，...\"]},\"60\":{\"h\":\"详情\",\"t\":[\"baz\",\"...\"]},\"61\":{\"h\":\"Baz\",\"t\":[\"功能详情...\"]},\"62\":{\"h\":\"二级\"},\"63\":{\"h\":\"三级\"},\"64\":{\"h\":\"Foo 功能\"},\"65\":{\"h\":\"介绍\",\"t\":[\"我们支持 foo 功能，...\"]},\"66\":{\"h\":\"详情\",\"t\":[\"ray\",\"...\"]},\"67\":{\"h\":\"Ray\",\"t\":[\"功能详情...\"]},\"68\":{\"h\":\"二级\"},\"69\":{\"h\":\"三级\"},\"70\":{\"h\":\"游戏\"},\"71\":{\"c\":[\"杂记\",\"碎碎叨\",\"游戏\"]},\"72\":{\"h\":\"\",\"t\":[\"《黑神话·悟空》是用什么编程语言开发的？\",\"《黑神话·悟空》创始人简历\",\"最近火爆全球的国产 3A 大作《黑神话·悟空》，你玩了吗？没玩没关系，有人就是对游戏不感冒，我找了个宣发片，一起感受下3A大作的视觉冲击，而且还是我们从小听到大，那猴子🐒的故事。\",\"‌‌什么是 3A 大作‌： 高成本、高质量、高体量的单机游戏。\",\"-- 视频\",\"说说《黑神话·悟空》用了什么编程语言\",\"对于游戏来说，不论是网游、手游、还是单机游戏对流程度都要求很高，而每种技术都有他的瓶颈和天花板，所有技术选型就尤为重要。\",\"搞技术的都心里大概知道每个编程语言的性能和优劣势，就像应该没有人用 PHP 写游戏引擎，也没有人用 C 语言写一个业务极度复杂的管理系统。当然 PHP 是全世界最好的编程语言。\",\"根据游戏开发公司游戏科学官网的显示，《黑神话：悟空》游戏使用的是虚幻引擎（Unreal Engine）：\",\"也就是他们主要是C++（也用到C#和其他语言）\",\"img\",\"而这个引擎的底层源码主要使用的就是C++。\",\"img\",\"img\",\"虚幻引擎属于开源项目，大家自己学习或者开发一些免费的东西是可以直接用的。但如果要开发像《黑神话：悟空》这样的商业产品，那就得给钱了。按照他们的协议，当产品销售超过 100 万 $ 时，就要付 5% 的版税。\",\"不说了，我去学 C++ 了\"]},\"73\":{\"h\":\"人工智能\",\"t\":[\"AI 绘画、智能聊天\"]},\"74\":{\"h\":\"算法与数据结构\"},\"75\":{\"h\":\"大数据\"},\"76\":{\"c\":[\"大数据\"]},\"77\":{\"h\":\"区块链\",\"t\":[\"技术和业务角度看区块链\"]},\"78\":{\"c\":[\"区块链\"]},\"79\":{\"h\":\"Bug修复手册\"},\"80\":{\"h\":\"记一次redis线上问题\",\"t\":[\"原文： https://mp.weixin.qq.com/s/blf1a6cP-oJQ9FmnpU_ocw\"]},\"81\":{\"c\":[\"redis\",\"bugfix\"]},\"82\":{\"c\":[\"redis\",\"bugfix\"]},\"83\":{\"h\":\"数据库\"},\"84\":{\"h\":\"设计模式\"},\"85\":{\"h\":\"单例模式-生产环境用法\",\"t\":[\"大家好，我是JavaPub！\",\"最近各大互联网公司都传出裁员消息，各个自媒体更是跟风传着各种小道消息，好像寒冬马上要侵蚀整个IT行业。我认为作为提高生产力的技术，永远都会走在发展的最前沿。作为一个技术人，打铁还要自身硬。\",\"1. 当被问到你知道哪些设计模式？ 2. 你在代码使用了那些设计模式？ 3. 你是怎么怎么使用的？\",\"在这里插入图片描述\",\"单例模式是最常见的设计模式之一\",\"相信没有一个攻城狮不懂单例模式，本篇介绍如何在生产环境使用单例模式\",\"[toc]\"]},\"86\":{\"h\":\"为什么使用单例模式\",\"t\":[\"对于软件系统的某些类，它可能是全局使用，无需频繁创建销毁。例如创建、销毁代价比较大的数据库连接，会浪费大量资源。\",\"单例最有代表就是我们耳熟能详的 windows 任务管理器，无论我们创建多少次，总是打开一个窗口。1. 如果打开多个重复的窗口，那就是对资源的浪费，资源是宝贵的。2. 多个窗口还要保证一致性，否则谁也不知道谁对谁错。\",\" 所以，就有个单例模式的用武之地\"]},\"87\":{\"h\":\"实现\",\"t\":[\"定义：确保一个类只有一个实例，并提供一个全局访问点。 \",\"单例模式又可以分为预加载和懒加载。当然我们在生产环境中一般使用较多的是 线程安全+懒加载。下文会提及单例的演变过程，你可以直接看最后一个案例，快速掌握生产环境中实战要点。JavaPub为金九银十助力，淦\"]},\"88\":{\"h\":\"预加载\",\"t\":[\"package com.javapub.schema; /** * 预加载 单例模式 * JavaPub */ public class PreloadSingleton { public static PreloadSingleton instance = new PreloadSingleton(); // 其他的类无法实例化单例类的对象 private PreloadSingleton() { } public static PreloadSingleton getInstance() { return instance; } }\",\"上面这种写法可以保证线程安全。\",\"但是对象还没有使用时就被创建，很明显这种写法会造成资源浪费。\"]},\"89\":{\"h\":\"懒加载\",\"t\":[\"package com.javapub.schema; /** * 懒加载 单例模式 * JavaPub */ public class LazyLoadingSingleton { private static LazyLoadingSingleton instance = null; private LazyLoadingSingleton() { } public static LazyLoadingSingleton getInstance() { if (instance == null) { instance = new LazyLoadingSingleton(); } return instance; } }\",\"懒加载显然是不能保证线程安全的，在Java实例化对象会分为三步，JVM为了提高程序执行性能，会对没有依赖关系的代码进行重排序。\",\"初始化内存空间\",\"初始化对象\",\"设置instance实例指向刚分配的内存空间\"]},\"90\":{\"h\":\"Java\"},\"91\":{\"h\":\"懒加载+线程安全\",\"t\":[\"synchronized 关键字是我们处理线程安全的一个利器，加载 getInstace() 函数可以保证线程安全。但是，如果要经常的调用 getInstance() 方法，不管有没有初始化实例，都会唤醒和阻塞线程。为了避免线程的上下文切换消耗大量时间，如果对象已经实例化了，我们没有必要再使用 synchronized 加锁，直接返回对象。经过如上分析\"]},\"92\":{\"h\":\"Sychronized\",\"t\":[\"如上分析，我们把锁加在 if (instance == null) 里面，保证instance未实例化的时候才加锁\",\"package com.javapub.schema; /** * 单例模式 线程安全 * JavaPub */ public class SychronizedSingleton { private static SychronizedSingleton instance = null; private SychronizedSingleton() { } public static synchronized SychronizedSingleton getInstance() { if (instance == null) { synchronized (SychronizedSingleton.class) { if (instance == null) { instance = new SychronizedSingleton(); } } } return instance; } }\"]},\"93\":{\"h\":\"Sychronized + Volatile\",\"t\":[\"上面我们了解过，Java 在 new 一个对象是无法保证顺序性的。因此我们需要另一个关键字Volatile保证对象实例化过程中的顺序性。\",\"package com.javapub.schema; /** * 单例模式 线程安全 synchronized volatile * JavaPub */ public class Singleton { private static volatile Singleton instance = null; private Singleton() { } public static synchronized Singleton getInstance() { if (instance == null) { synchronized (Singleton.class) { if (instance == null) { instance = new Singleton(); } } } return instance; } }\",\"网络讲解设计模式的文章有很多，但是真正在生产环境中怎么用确一直不被大多数人掌握，所以最近想更新一个系列文章，专门针对设计模式在生产环境怎么用，让更多攻城狮在极客之路提供一点点思路。---\"]},\"94\":{\"c\":[\"单例模式\"]},\"95\":{\"c\":[\"单例模式\"]},\"96\":{\"h\":\"http\"},\"97\":{\"h\":\"如何给自己的域名配置免费的HTTPS\"},\"98\":{\"h\":\"如何给自己的域名配置免费的HTTPS\",\"t\":[\"今天有小伙伴给我发私信，你的 https 到期啦\",\"image-20250121160131161\",\"并且随手丢给我一个截图。\",\"还真到期了。\",\"javapub.net.cn 这个网站作为一个用爱发电的编程学习网站，用来存编程知识和面试题等，平时我都用业余时间来维护，并且还自费买了服务器和阿里云存储。\",\"之前都是白嫖阿里云的 SSL 证书，现在用光了。当然，最关键的是每三个月都要手动更新，这离了大谱，我不是成黑n了。\",\"image-20250121161421250\",\"有人说免费还这么多事，那你说对了，今天就给你教一种免费还自动续的方案。\",\"以 Ubuntu 为例\",\"在 Ubuntu 上免费申请 Let's Encrypt SSL 证书，你可以使用 Certbot 这个工具。它是由 EFF 提供的一个免费的，自动化的证书颁发客户端。\"]},\"99\":{\"h\":\"1. 首先安装 Snapd\",\"t\":[\"一般最新版本的 Ubuntu 事自带的，如果没有通过这个命令安装\",\"sudo apt update sudo apt install snapd\"]},\"100\":{\"h\":\"2. 安装 Certbot\",\"t\":[\"使用 Snap 安装 Certbot\",\"sudo snap install --classic certbot\"]},\"101\":{\"h\":\"3. 安装 Certbot 命令\",\"t\":[\"sudo ln -s /snap/bin/certbot /usr/bin/certbot\",\"相当于是个软连接，现在全局都是可以使用 Certbot 命令了。\"]},\"102\":{\"h\":\"4. 获取证书\",\"t\":[\"接下来就可以配置你的证书了\",\"Ngnix\",\"sudo certbot --nginx\",\"Apache\",\"sudo certbot --apache\",\"只获取证书（不自动配置Web服务器）\",\"sudo certbot certonly --standalone\"]},\"103\":{\"h\":\"5. 自动续订证书\",\"t\":[\"Let's Encrypt 颁发的证书有效期为 90 天，我们直接开启自动续订。\",\"sudo certbot renew --dry-run\",\"当证书到期前 30 天时，如果需要续订，Certbot 会自动处理。\"]},\"104\":{\"h\":\"Java\"},\"105\":{\"h\":\"Linux\"},\"106\":{\"h\":\"大学生都会的Linux命令\"},\"107\":{\"h\":\"面试官：这些命令大学生都会\",\"t\":[\"大家好，我是 JavaPub。\",\"最近有些同学在后台问我，面试总是会遇到被问 Linux 命令的问题，自己就面试个后端开发岗位，怎么这么难呢？\",\"image-20231216131924099\",\"其实 Linux 命令，对于一个后端开发来说，并不是很难，只是我们平时很少使用而已。\",\"但是，我们平时开发，用到的 Linux 命令，其实也就那么几个，比如：\",\"文件操作：ls、cd、pwd、mkdir、touch、cp、mv、rm\",\"文件查看：cat、more、less、head、tail\",\"文件压缩：tar、gzip、zip\",\"文件权限：chmod、chown\",\"文件搜索：find、grep\",\"网络操作：ping、ifconfig、netstat\",\"进程操作：ps、kill、top\",\"系统操作：date、df、du、free、top\",\"有没有发现上面的命令大多都是对文件的操作。linux 有句话叫做：一切皆文件 Everything is a file。\",\"image-20231216131826484\",\"...\",\"接下来给大家演示一些文件的操作。有的同学说，我没有 Linux 服务器，没关系，我之前给大家推荐了一个可以免费使用 Linux 的在线网站、跟着下面视频一学就会。当然，大家也可以在自己的电脑上安装虚拟机来操作。\",\"play-with-docker在线linux操作视频\"]},\"108\":{\"h\":\"文件操作\",\"t\":[\"ls\",\"ls 命令用于显示指定工作目录下之内容（列出当前目录下的文件和目录）。\",\"cd\",\"当要进入某个目录时。\",\"image-20231216124523478\",\"pwd\",\"pwd 命令用于显示工作目录。\",\"image-20231216124628242\",\"mkdir\",\"mkdir 命令用于创建目录。当你要给自己的项目分层，比如 Javapub-docs 放文档、javapub-img 放图片。\",\"image-20231216124857718\",\"touch\",\"touch 是用来创建文件的命令。\",\"image-20231216125205177\",\"cp\",\"cp 命令用于复制文件或目录。这个命令很有用，比如把我们上传到服务器的代码复制到需要运行的目录下。\",\"image-20231216130058600\",\"mv\",\"mv 命令用于移动文件或目录。\",\"image-20231216130625976\",\"rm\",\"rm 命令用于删除文件或目录。\",\"image-20231216125353767\",\"下期继续。。。\"]},\"109\":{\"h\":\"大学生都会的Linux命令V2\"},\"110\":{\"h\":\"awk\"},\"111\":{\"h\":\"常用命令大全\",\"t\":[\"工作中最常用shell指令\",\"ps aux | grep \\\"tomcat\\\" 查找运行的进程\",\"find / -name java* 全部查找（java*）文件\",\"cat -n name-file | grep \\\"java\\\" 查找文件（java）所在行\",\"cat -n name-file | tail -n +92 | head -n 20 查看文件92行前后20行\",\":set nu 显示行号\",\":n 跳转到指定行号\",\"7，tail -n 20 filename 显示后20行数据\",\"8,sudo -u bsafe bash 切换basfe帐户\",\"9，cat textJson_20190216.log | awk -F '\\\\t' '{print $NF}' > result.log 去除文件中字符\\\"\\\\t\\\" 方法二：#awk -F \\\"\\\\t\\\" '{print $2}' ./textJson_20190215.log >result.log\",\"10，cat file1 file2 | sort | uniq > fileAll 取出文件的并集（去重）\",\"11，远程复制拷贝 $scp local_file remote_username@remote_ip:remote_folder $scp local_file remote_username@remote_ip:remote_file $scp local_file remote_ip:remote_folder $scp local_file remote_ip:remote_file scp root@192.168.120.204:/opt/soft/nginx-0.5.38.tar.gz /opt/soft/\",\"12，字符串切割 awk '{FS=\\\":\\\"}{print $1\\\"\\\\t\\\" $3}' /etc/passwd，使用FS=””,指定分割符，第一行已经读完，用冒号分割已经来不及了，默认的用空格分割，后面的用冒号分割，在FS之前强制加个BEGIN *awk -F '\\\\t' '{print $3}'\",\"13，删除指定行 sed -i '1d' <file>\",\"14，删除包含特定字符的行 sed -e '/xxx/d' a1.txt > a2.txt\",\"15，文件授权（递归授权所有文件） chown -R testname <filename>\",\"16，压缩\",\"压缩方式：\",\"tar -zcvf archive_name.tar.gz filename\",\"解压缩方式：\",\"tar -zxvf archive_name.tar.gz\",\"压缩解压（zip）\",\"zip -r 123.zip 123.txt unzip 123.zip -d ./\",\"17，nohup\",\"nohup java -jar myProject.jar >> /usr/local/log/output.log 2>&1 &\",\"19，替换文件制定字符\",\"sed -i \\\"s/tf_ab/tf_qw/g\\\" result.txt\",\"20，git命令\",\" git status git add . git commit -m \\\"一些信息\\\" git push 仓库地址 ###分支 git checkout -b 分支名 #新建分支 git branch -a git checkout 分支名\",\"21，rsync -av ../log/textJson_$min\\\".log\\\" --port=9215 root@106.12.31.72::web_news_database\"]},\"112\":{\"h\":\"必看\"},\"113\":{\"h\":\"常见问题解答\",\"t\":[\"问最多的问题：\"]},\"114\":{\"h\":\"问题1: 可以把文章下载到本地吗，还想发到个人博客上去？\",\"t\":[\"答：可以的。\",\"不只可以下载，还提供了 GitHub 地址，点个下载连同项目一起打包你的本地，转载更没有限制，但是你要能注明出处（也就是你看到这篇文章的网站），那就是对我最大的支持。\"]},\"115\":{\"h\":\"问题2: 我有个朋友是初学者，可以学吗？要怎么开始学？\",\"t\":[\"答： 完全可以。\",\"你这个朋友我知道是谁了。\",\"首先如果你是计算机的学生，我建议你先将课程中的东西掌握，比如 编程基础、数据库、数据结构 等。然后再试着做一个项目，比如某管理系统等（参考 实战练手项目 ），对整体项目有一个了解，然后再开始针对性学习。比如试着解决某个业务场景，比如如何保证数据库和缓存的数据一致性；分布式场景中如何单例模型。\",\"如何是转行的人，我建议你跟着课程详细学习，现在市面上机构也很多。如果你担心费用太高、后面学不会怎么办等，可以联系我和我交流一下我的联系方式。\"]},\"116\":{\"h\":\"使用指南\"},\"117\":{\"h\":\"在准备面试\",\"t\":[\"对于面试的同学，我不建议慢工出细活，先通过个人实力和面试技巧拿到一个心仪的 offer，再在工作中茁壮成长。 《最少必要面试》 是一定要看的，其中都是精华中的精华，而且非常基础 (基础不牢，地动山摇)。\",\"其次，要根据薄弱点来学习，比如 数据库 ，不论你学什么语言，数据库都是非常重要的，还有 数据结构 、 基础 算法 等。\"]},\"118\":{\"h\":\"在学习\",\"t\":[\"在学习的同学，我建议学习一些实战项目，如果你会一些 Java ，可以更着做一些项目。全站工程师在哪儿都是稀缺的。\",\"重点关注 实战项目。如果平时时间充裕，也要多刷提到的 面试题 和 知识点。\"]},\"119\":{\"c\":[\"关于作者\"]},\"120\":{\"h\":\"网络\"},\"121\":{\"h\":\"网络面试题 TODO\",\"t\":[\"79.http 响应码 301 和 302 代表的是什么？有什么区别？\",\"80.forward 和 redirect 的区别？\",\"81.简述 tcp 和 udp的区别？\",\"82.tcp 为什么要三次握手，两次不行吗？为什么？\",\"83.说一下 tcp 粘包是怎么产生的？\",\"84.OSI 的七层模型都有哪些？\",\"85.get 和 post 请求有哪些区别？\",\"86.如何实现跨域？\",\"87.说一下 JSONP 实现原理？\"]},\"122\":{\"h\":\"运维Operations\"},\"123\":{\"h\":\"Nginx.Conf详解\",\"t\":[\"#user nobody nobody;#设置启动用户和用户组 worker_processes 1;#设置值和CPU核心数一致 #Specifies the value for maximum file descriptors that can be opened by this process. #指定进程可以打开的最大描述符：数目 #工作模式与连接数上限 #这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。 #现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。 #这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。 worker_rlimit_nofile 65535; #全局日志定义类型，[ debug | info | notice | warn | error | crit ] #error_log logs/error.log; #error_log logs/error.log notice;#日志位置和日志级别 #error_log logs/error.log info; #进程pid #pid logs/nginx.pid; events { #单个进程最大连接数（最大连接数=连接数*进程数） #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。 worker_connections 1024; #keepalive超时时间。 #keepalive_timeout 60; #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。 #分页大小可以用命令getconf PAGESIZE 取得。 #[root@web001 ~]# getconf PAGESIZE #4096 #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。 #client_header_buffer_size 4k; #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。 #open_file_cache max=65535 inactive=60s; #这个是指多长时间检查一次缓存的有效信息。 #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息. #open_file_cache_valid 80s; #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location 这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态. #open_file_cache_min_uses 1; #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件时记录cache错误. #open_file_cache_errors on; } #设定http服务器，利用它的反向代理功能提供负载均衡支持 http { #文件扩展名与文件类型映射表 include mime.types; #默认文件类型 default_type application/octet-stream; #默认编码 #charset utf-8; #服务器名字的hash表大小 #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小. #server_names_hash_bucket_size 128; #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。 #client_header_buffer_size 32k; #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。 #large_client_header_buffers 4 64k; #设定通过nginx上传文件的大小，（这个是较长使用的配置） client_max_body_size 8m; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。 #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。 #sendfile on; #开启目录列表访问，合适下载服务器，默认关闭。 #autoindex on; #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用(这俩个不太理解) tcp_nopush on; tcp_nodelay on; #日志格式设定（也可以放在 server 模块） #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址； #$remote_user：用来记录客户端用户名称； #$time_local： 用来记录访问时间与时区； #$request： 用来记录请求的url与http协议； #$status： 用来记录请求状态；成功是200， #$body_bytes_sent ：记录发送给客户端文件主体内容大小； #$http_referer：用来记录从那个页面链接访问过来的； #$http_user_agent：记录客户浏览器的相关信息； #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。 #log_format main '$remote_addr - $remote_user [$time_local] \\\"$request\\\" ' # '$status $body_bytes_sent \\\"$http_referer\\\" ' # '\\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\"'; #定义本虚拟主机的访问日志 #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #开启Gzip #gzip on; #gzip_http_version 1.0; #设置gzip压缩针对的HTTP协议版本 #gzip_min_length 1k #启用gzip压缩的最小文件，小于设置值的文件将不会压缩 #gzip_buffers 4 16k #设置压缩所需要的缓冲区大小 #gzip_comp_level 2 #gzip压缩比/压缩级别，压缩级别 1-9，级别越高压缩率越大，当然压缩时间也就越长（传输快但比较消耗cpu） #gzip_types #进行压缩的文件类型 #gzip_vary on #是否在http header中添加Vary: Accept-Encoding，建议开启 #开启限制IP连接数的时候需要使用 #limit_zone crawler $binary_remote_addr 10m; #（这块是比较重要一块，在大多数服务中要用到） #负载均衡配置 upstream javapub.rodert.com.github { #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weight参数表示权值，权值越高被分配到的几率越大。 server 192.168.80.121:80 weight=3; server 192.168.80.122:80 weight=2; server 192.168.80.123:80 weight=3; #nginx的upstream目前支持4种方式的分配 #1、轮询（默认） #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。 #weight #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。 #例如： #upstream bakend { # server 192.168.0.14 weight=10; # server 192.168.0.15 weight=10; #} #2、ip_hash #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。 #例如： #upstream bakend { # ip_hash; # server 192.168.0.14:88; # server 192.168.0.15:80; #} #3、fair（第三方） #按后端服务器的响应时间来分配请求，响应时间短的优先分配。 #upstream backend { # server server1; # server server2; # fair; #} #4、url_hash（第三方） #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。 #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法 #upstream backend { # server squid1:3128; # server squid2:3128; # hash $request_uri; # hash_method crc32; #} #tips: #upstream bakend{#定义负载均衡设备的Ip及设备状态}{ # ip_hash; # server 127.0.0.1:9090 down; # server 127.0.0.1:8080 weight=2; # server 127.0.0.1:6060; # server 127.0.0.1:7070 backup; #} #在需要使用负载均衡的server中增加 proxy_pass http://bakend/; #每个设备的状态设置为: #1.down表示单前的server暂时不参与负载 #2.weight为weight越大，负载的权重就越大。 #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误 #4.fail_timeout:max_fails次失败后，暂停的时间。 #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。 #nginx支持同时设置多组的负载均衡，用来给不同的server来使用。 #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug #client_body_temp_path设置记录文件的目录 可以设置最多3层目录 #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡 } #下面是server虚拟主机的配置 server { listen 80; #监听端口 server_name javapub.cn www.javapub.cn; #多个域名，空格分隔 index index.html index.htm index.php;#域名根路径下，默认访问地址 root /data/www/javapub; #charset koi8-r; #定义本虚拟主机的访问日志 #access_log logs/host.access.log main; #access_log /usr/local/nginx/logs/host.access.404.log log404; #localhost是根据用户请求的URL进行匹配， location / { root html; index index.html index.htm; } #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \\\\.php$ { # proxy_pass http://127.0.0.1; #} # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \\\\.php$ { # root html; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; # include fastcgi_params; #} # deny access to .htaccess files, if Apache's document root # concurs with nginx's one # #location ~ /\\\\.ht { # deny all; #} #图片缓存时间设置 #location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$ #{ # expires 10d; #} #JS和CSS缓存时间设置 #location ~ .*.(js|css)?$ #{ # expires 1h; #} #对 \\\"/\\\" 启用反向代理 location / { proxy_pass http://127.0.0.1:88; proxy_redirect off; proxy_set_header X-Real-IP $remote_addr; #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #以下是一些反向代理的配置，可选。 proxy_set_header Host $host; #允许客户端请求的最大单文件字节数 client_max_body_size 10m; #缓冲区代理缓冲用户端请求的最大字节数， #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。 #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误 client_body_buffer_size 128k; #表示使nginx阻止HTTP应答代码为400或者更高的应答。 proxy_intercept_errors on; #后端服务器连接的超时时间_发起握手等候响应超时时间 #nginx跟后端服务器连接超时时间(代理连接超时) proxy_connect_timeout 90; #后端服务器数据回传时间(代理发送超时) #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据 proxy_send_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时) #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间） proxy_read_timeout 90; #设置代理服务器（nginx）保存用户头信息的缓冲区大小 #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小 proxy_buffer_size 4k; #proxy_buffers缓冲区，网页平均在32k以下的设置 #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k proxy_buffers 4 32k; #高负荷下缓冲大小（proxy_buffers*2） proxy_busy_buffers_size 64k; #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长 #设定缓存文件夹大小，大于这个值，将从upstream服务器传 proxy_temp_file_write_size 64k; } #设定查看Nginx状态的地址 location /NginxStatus { stub_status on; access_log on; auth_basic \\\"NginxStatus\\\"; auth_basic_user_file confpasswd; #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。 } #本地动静分离反向代理配置 #所有jsp的页面均交由tomcat或resin处理 location ~ .(jsp|jspx|do)?$ { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:8080; } #所有静态文件由nginx直接读取不经过tomcat或resin location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt| pdf|xls|mp3|wma)$ { expires 15d; } location ~ .*.(js|css)?$ { expires 1h; } } # another virtual host using mix of IP-, name-, and port-based configuration # #server { # listen 8000; # listen somename:8080; # server_name somename alias another.alias; # location / { # root html; # index index.html index.htm; # } #} # HTTPS server # #server { # listen 443 ssl; # server_name localhost; # ssl_certificate cert.pem; # ssl_certificate_key cert.key; # ssl_session_cache shared:SSL:1m; # ssl_session_timeout 5m; # ssl_ciphers HIGH:!aNULL:!MD5; # ssl_prefer_server_ciphers on; # location / { # root html; # index index.html index.htm; # } #} }\"]},\"124\":{\"h\":\"快速搭建Prometheus+Grafana保姆级教程\"},\"125\":{\"h\":\"快速搭建 Prometheus+Grafana 保姆级教程\",\"t\":[\"[toc]\",\"演示环境在 MAC 下\"]},\"126\":{\"h\":\"前言\",\"t\":[\"确保电脑安装了 Homebrew。\",\"/bin/bash -c \\\"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\\\"\",\"安装 Prometheus\",\"brew install prometheus\",\"安装 Grafana\",\"brew install grafana\",\"启动 Prometheus 和 Grafana\",\"# 启动 Prometheus prometheus --config.file=/javapub/usr/local/etc/prometheus/prometheus.yml # 启动 Grafana brew services start grafana\",\"检测是否安装成功\",\"Grafana 控制台\",\"http://localhost:3000\",\"Prometheus 的 URL\",\"http://localhost:9090\",\"配置看板步骤：\",\"登录后，配置 Prometheus 作为数据源：\",\"点击左侧菜单的 \\\"Configuration\\\" 图标。\",\"选择 \\\"Data Sources\\\"。\",\"点击 \\\"Add data source\\\"。\",\"选择 Prometheus。\",\"配置 Prometheus 的 URL （通常是 http://localhost:9090）。\",\"完成后，你就可以在 Grafana 中创建仪表板，并使用 Prometheus 作为数据源来可视化监控数据了。\"]},\"127\":{\"h\":\"Prometheus 的四种类型\",\"t\":[\"https://zhuanlan.zhihu.com/p/592560633\"]},\"128\":{\"h\":\"其他\"},\"129\":{\"h\":\"go整合etcd\",\"t\":[\"案例源码仓库地址： https://github.com/Rodert/go-demo\",\"官方文档： https://etcd.io/\",\"视频教程： https://space.bilibili.com/404747369\",\"谈使用场景之前，看看他有哪些功能\",\"官方定义是这样的： etcd is a strongly consistent, distributed key-value store that provides a reliable way to store data that needs to be accessed by a distributed system or cluster of machines. It gracefully handles leader elections during network partitions and can tolerate machine failure, even in the leader node.\"]},\"130\":{\"h\":\"使用场景\",\"t\":[\"服务发现\",\"配置中心\",\"分布式锁\"]},\"131\":{\"h\":\"搭建 ETCD\",\"t\":[\"环境： mac\",\"# 安装 brew install etcd # 启动 brew services start etcd # 检查状态 brew services list | grep etcd # 停止 brew services stop etcd # 卸载 brew uninstall etcd\"]},\"132\":{\"h\":\"与 ETCD 交互\",\"t\":[\"# 检查工具是否安装 etcdctl version # 写入 etcdctl put mykey \\\"myvalue\\\" # 获取 etcdctl get mykey # 删除 etcdctl del mykey\"]},\"133\":{\"h\":\"集群\",\"t\":[\"# 查看集群状态 etcdctl cluster-health\",\"安装依赖\",\"go get go.etcd.io/etcd/client/v3\",\"编码\",\"https://github.com/Rodert/go-demo\",\"执行\",\"go run main.go\",\"执行结果：\"]},\"134\":{\"c\":[\"etcd\",\"go\"]},\"135\":{\"c\":[\"etcd\",\"go\"]},\"136\":{\"h\":\"rodert教你学FFmpeg实战这一篇就够了\"},\"137\":{\"h\":\"rodert教你学FFmpeg实战这一篇就够了\",\"t\":[\"[toc]\"]},\"138\":{\"h\":\"前言\",\"t\":[\"有人问rodert哥这篇文章干货有多干，问就是，硌牙。\",\"ffmpeg有多强大，我想你都知道了，现在很多市场上的剪辑软件都是基于它做的，只是加了一些包装。读完本篇，你会发现一切如此简单。\"]},\"139\":{\"h\":\"1. 简介\",\"t\":[\"官网地址：https://trac.ffmpeg.org/wiki\",\"FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。采用LGPL或GPL许可证。它提供了录制、转换以及流化音视频的完整解决方案。它包含了非常先进的音频/视频编解码库libavcodec，为了保证高可移植性和编解码质量，libavcodec里很多code都是从头开发的。\",\"FFmpeg在Linux平台下开发，但它同样也可以在其它操作系统环境中编译运行，包括Windows、Mac OS X等。这个项目最早由Fabrice Bellard发起，2004年至2015年间由Michael Niedermayer主要负责维护。许多FFmpeg的开发人员都来自MPlayer项目，而且当前FFmpeg也是放在MPlayer项目组的服务器上。项目的名称来自MPEG视频编码标准，前面的\\\"FF\\\"代表\\\"Fast Forward\\\"。\"]},\"140\":{\"h\":\"2. 安装\"},\"141\":{\"h\":\"2.1. windows安装\"},\"142\":{\"h\":\"2.2. linux安装\",\"t\":[\"下载\",\"wget http://ffmpeg.org/releases/ffmpeg-3.4.1.tar.bz2\",\"解压\",\"tar -jxvf ffmpeg-3.4.1.tar.bz2\",\"安装\",\"yum install yasm\",\"cd ffmpeg-3.4.1\",\"./configure --enable-shared --prefix=/usr/local/ffmpeg\",\"make && make install\",\"编译时间较长\",\"修改文件/etc/ld.so.conf 中增加/usr/local/ffmpeg/lib\",\"使其生效：ldconfig\",\"加入环境变量：vim /etc/profile\",\"export FFMPEG_HOME=/usr/local/ffmpeg\",\"export PATH=$FFMPEG_HOME/bin:$PATH\",\"配置生效： source /etc/profile\"]},\"143\":{\"h\":\"3. 命令行操使用\"},\"144\":{\"h\":\"3.1.简单说明\",\"t\":[\"在操作前，简单介绍一下常用指令\",\"ffmpeg的使用方式： ffmpeg [options] [[infile options] -i infile]... {[outfile options] outfile}... 常用参数说明： 主要参数： -i 设定输入流 -f 设定输出格式 -ss 开始时间 视频参数： -b 设定视频流量，默认为200Kbit/s -r 设定帧速率，默认为25 -s 设定画面的宽与高 -aspect 设定画面的比例 -vn 不处理视频 -vcodec 设定视频编解码器，未设定时则使用与输入流相同的编解码器 音频参数： -ar 设定采样率 -ac 设定声音的Channel数 -acodec 设定声音编解码器，未设定时则使用与输入流相同的编解码器 -an 不处理音频\"]},\"145\":{\"h\":\"3.2.视频剪切\"},\"146\":{\"h\":\"3.2.1.掐头去尾\",\"t\":[\"ffmpeg -ss 00:00:15 -t 00:00:06 -i input.mp4 -vcodec copy -acodec copy output.mp4\",\"剪辑原视频input.mp4，15s开始向后6s，保存到output.mp4\",\"-ss 表示开始切割时间，-t 表示要切多少\"]},\"147\":{\"h\":\"3.2.2.\"},\"148\":{\"h\":\"3.3.视频格式转换\",\"t\":[\"准确来说，是视频容器转换\",\"ffmpeg -i input.avi output.mp4\",\"avi文件转为mp4\",\"ffmpeg -i input.mp4 output.ts\",\"mp4文件转为ts\"]},\"149\":{\"h\":\"3.4.提取音频\",\"t\":[\"ffmpeg -i JavaPub讲坛.mp4 -acodec copy -vn output.aac\",\"提取JavaPub讲坛.mp4音频到output.acc，acc是一种常见默认视频，也可以转为其他格式。或者防止出现异常，直接使用下面方式\",\"ffmpeg -i JavaPub讲坛.mp4 -acodec aac -vn output.aac\"]},\"150\":{\"h\":\"3.5.提取音频\",\"t\":[\"ffmpeg -i input.mp4 -vcodec copy -an output.mp4\",\"纯视频\"]},\"151\":{\"h\":\"3.6.码率控制\",\"t\":[\"码率控制对于在线视频比较重要。因为在线视频需要考虑其能提供的带宽。现在这个直播使用很广泛的时代\",\"码率是什么：\",\"bitrate = file size / duration\",\"比如一个文件20.8M，时长1分钟，那么，码率就是： biterate = 20.8M bit/60s = 20.810241024*8 bit/60s= 2831Kbps 一般音频的码率只有固定几种，比如是128Kbps， 那么，video的就是 video biterate = 2831Kbps -128Kbps = 2703Kbps。\",\"控制码率主要还是为了缩小文件大小，尽量不影响分辨率\",\"ffmpg控制码率有3种选择，-minrate -b:v -maxrate\",\"-b:v 控制平均码率\",\"比如一个视频源的码率太高了，有10Mbps，文件太大，想把文件弄小一点，但是又不破坏分辨率。\",\"ffmpeg -i input.mp4 -b:v 2000k output.mp4\",\"ffmpeg官方wiki比较建议，设置b:v时，同时加上 -bufsize -bufsize 用于设置码率控制缓冲器的大小，设置的好处是，让整体的码率更趋近于希望的值，减少波动。（简单来说，比如1 2的平均值是1.5， 1.49 1.51 也是1.5, 当然是第二种比较好）\",\"ffmpeg -i input.mp4 -b:v 2000k -bufsize 2000k output.mp4\",\"-minrate -maxrate就简单了，在线视频有时候，希望码率波动，不要超过一个阈值，可以设置maxrate。\",\"ffmpeg -i input.mp4 -b:v 2000k -bufsize 2000k -maxrate 2500k output.mp4\"]},\"152\":{\"h\":\"3.7. 视频编码格式转换\",\"t\":[\"比如一个视频的编码是MPEG4，想用H264编码\",\"ffmpeg -i input.mp4 -vcodec h264 output.mp4\",\"相反也一样\",\"ffmpeg -i input.mp4 -vcodec mpeg4 output.mp4\",\"当然了，如果ffmpeg当时编译时，添加了外部的x265或者X264，那也可以用外部的编码器来编码。（不知道什么是X265，可以Google一下，简单的说，就是她不包含在ffmpeg的源码里，是独立的一个开源代码，用于编码HEVC，ffmpeg编码时可以调用它。当然了，ffmpeg自己也有编码器）\",\"ffmpeg -i input.mp4 -c:v libx265 output.mp4\",\"ffmpeg -i input.mp4 -c:v libx264 output.mp4\"]},\"153\":{\"h\":\"3.8. 只提取视频ES数据\",\"t\":[\"这个是不常用的，更多阅读下面链接\",\"ffmpeg –i input.mp4 –vcodec copy –an –f m4v output.h264\",\"更多：http://www.360doc.com/content/13/0829/15/13084517_310733557.shtml\"]},\"154\":{\"h\":\"3.9.过滤器的使用\"},\"155\":{\"h\":\"3.9.1. 将输入的1920x1080缩小到960x540输出\",\"t\":[\"fmpeg -i input.mp4 -vf scale=960:540 output.mp4`\",\"//ps: 如果540不写，写成-1，即scale=960:-1, 那也是可以的，ffmpeg会通知缩放滤镜在输出时保持原始的宽高比。\"]},\"156\":{\"h\":\"3.9.2.视频添加logo\",\"t\":[\"左上角\",\"ffmpeg -i input.mp4 -i logo.png -filter_complex overlay output.mp4\",\"右上角：\",\"ffmpeg -i input.mp4 -i logo.png -filter_complex overlay=W-w output.mp4\",\"左下角：\",\"ffmpeg -i input.mp4 -i logo.png -filter_complex overlay=0:H-h output.mp4\",\"右下角：\",\"ffmpeg -i input.mp4 -i logo.png -filter_complex overlay=W-w:H-h output.mp4\"]},\"157\":{\"h\":\"3.9.3.去掉视频的logo\",\"t\":[\"有时候，下载了某个网站的视频，但是有logo很烦，咋办？有办法，用ffmpeg的delogo过滤器。 语法：-vf delogo=x:y:w:h[:t[:show]] x:y 离左上角的坐标 w:h logo的宽和高 t: 矩形边缘的厚度默认值4 show：若设置为1有一个绿色的矩形，默认值0。\",\"ffmpeg -i input.mp4 -vf delogo=0:0:220:90:100:1 output.mp4\",\"处理后的视频样式是在过滤处加磨砂处理，并加绿色边框\"]},\"158\":{\"h\":\"3.10.抓取视频的一些帧，存为jpeg图片\",\"t\":[\"视频抽取一些帧作为图片时很常用的操作。\",\"情况一\",\"ffmpeg -i input.mp4 -r 1 -q:v 2 -f image2 pic-%03d.jpeg\",\"-r 表示每一秒几帧, -q:v表示存储jpeg的图像质量，一般2是高质量。\",\"假设60s，会保存60张图片。\",\"情况二\",\"ffmpeg -i input.mp4 -ss 00:00:20 -t 10 -r 1 -q:v 2 -f image2 pic-%03d.jpeg\",\"ffmpeg会从input.mp4的第20s时间开始，往下10s，即20~30s这10秒钟之间，每隔1s就抓一帧，总共会抓10帧。\",\"情况三\",\"ffmpeg -i input.mp4 -vf \\\"select=between(n,84,208)*not(mod(n,4))\\\" -vsync 0 image_%05d.jpg\",\"主体是一个select 的过滤语句：\",\"其中：between(n,*) 是指 从第几帧到第几帧之间进行提取...\",\"not(mode(n, K))是指每隔几帧输出一帧。\"]},\"159\":{\"h\":\"3.11.查询操作\"},\"160\":{\"h\":\"3.11.1.查询视频总帧数\",\"t\":[\"ffprobe -v error -count_frames -select_streams v:0 -show_entries stream=nb_read_frames -of default=nokey=1:noprint_wrappers=1 input.mp4\",\"说明：读取帧数需要文件解码，时长取决于文件大小\",\"-v error：这隐藏了“info”输出(版本信息等)，使解析更容易。 -count_frames：计算每个流的帧数，并在相应的流部分中报告。 -select_streams v:0 ：仅选择视频流。 -show_entries stream = nb_read_frames ：只显示读取的帧数。 -of default = nokey = 1：noprint_wrappers = 1 ：将输出格式(也称为“writer”)设置为默认值，不打印每个字段的键(nokey = 1)，不打印节头和页脚(noprint_wrappers = 1)。\"]},\"161\":{\"h\":\"3.11.2.查询FFmpeg软件信息\",\"t\":[\"version 显示版本 demuxers 显示可用的demuxers muxers 显示可用的muxers devices 显示可用的设备 codecs 显示所有编解码器 decoders 显示可用编解码器 encoders 显示所有编码器 bsfs 显示比特流filter formats 显示可用的格式 protocols 显示可用的协议 filters 显示可用的过滤器 pix_fmts 显示可用的像素格式 sample_fmts 显示可用的采样格式 layouts 显示channel名称 colors 显示识别的颜色名称\",\"ffmpeg -version\"]},\"162\":{\"h\":\"3.12.录制\",\"t\":[\"查询有哪些设备\",\"ffmpeg -f avfoundation -list_devices true -i \\\"\\\"\",\"录屏\",\"ffmpeg -f avfoundation -i 1 -r 30 out.yuv\",\"-f 指定使用 avfoundation 采集数据。 -i 指定从哪儿采集数据，它是一个文件索引号。在我的MAC上，1代表桌面（可以通过上面的命令查询设备索引号）。 -r 指定帧率。按ffmpeg官方文档说-r与-framerate作用相同，但实际测试时发现不同。-framerate 用于限制输入，而-r用于限制输出。 注意，桌面的输入对帧率没有要求，所以不用限制桌面的帧率。其实限制了也没用。\",\"录屏+声音\",\"ffmpeg -f avfoundation -i 1:0 -r 29.97 -c:v libx264 -crf 0 -c:a libfdk_aac -profile:a aac_he_v2 -b:a 32k out.flv\",\"-i 1:0 冒号前面的 “1” 代表的屏幕索引号。冒号后面的\\\"0\\\"代表的声音索相号。 -c:v 与参数 -vcodec 一样，表示视频编码器。c 是 codec 的缩写，v 是video的缩写。 -crf 是 x264 的参数。 0 表式无损压缩。 -c:a 与参数 -acodec 一样，表示音频编码器。 -profile 是 fdk_aac 的参数。 aac_he_v2 表式使用 AAC_HE v2 压缩数据。 -b:a 指定音频码率。 b 是 bitrate的缩写, a是 audio的缩与。\",\"录视频\",\"ffmpeg -framerate 30 -f avfoundation -i 0 out.mp4\",\"-framerate 限制视频的采集帧率。这个必须要根据提示要求进行设置，如果不设置就会报错。 -f 指定使用 avfoundation 采集数据。 -i 指定视频设备的索引号。\",\"录音\",\"ffmpeg -f avfoundation -i :0 out.wav\"]},\"163\":{\"h\":\"3.13.直播相关\",\"t\":[\"推流\",\"ffmpeg -re -i out.mp4 -c copy -f flv rtmp://server/live/streamName`\",\"拉流保存\",\"ffmpeg -i rtmp://server/live/streamName -c copy dump.flv`\",\"转流\",\"ffmpeg -i rtmp://server/live/originalStream -c:a copy -c:v copy -f flv rtmp://server/live/h264Stream`\",\"实时推流\",\"ffmpeg -framerate 15 -f avfoundation -i \\\"1\\\" -s 1280x720 -c:v libx264 -f flv rtmp://localhost:1935/live/room`\"]},\"164\":{\"h\":\"RocketMq快速入门教程\",\"t\":[\"原文： https://mp.weixin.qq.com/s/kmUlX-5CtWVn0Qli1iyWng\"]},\"165\":{\"h\":\"rodert教你学Zookeeper-实战这一篇就够了\"},\"166\":{\"h\":\"rodert教你学Zookeeper-实战这一篇就够了\",\"t\":[\"[toc]\"]},\"167\":{\"h\":\"前言\",\"t\":[\"声明：参考来源互联网，有任何争议可以留言。站在前人的肩上，我们才能看的更远。\",\"本教程纯手打，致力于最实用教程，不需要什么奖励，只希望多多转发支持。 欢迎来我公众号，希望可以结识你，你有什么想看的可以催更，微信搜索：[JavaPub]\",\"有任何问题都可以来谈谈，等你哦！\",\"公众号二维码\",\"如果你对zookeeper有一定了解，那么直接跳到你需要的知识点。\"]},\"168\":{\"h\":\"1. 什么是Zookeeper\"},\"169\":{\"h\":\"1.2.Zookeeper简介\",\"t\":[\"ZooKeeper: A Distributed Coordination Service for Distributed Applications ZooKeeper is a distributed, open-source coordination service for distributed applications. It exposes a simple set of primitives that distributed applications can build upon to implement higher level services for synchronization, configuration maintenance, and groups and naming. It is designed to be easy to program to, and uses a data model styled after the familiar directory tree structure of file systems. It runs in Java and has bindings for both Java and C. Coordination services are notoriously hard to get right. They are especially prone to errors such as race conditions and deadlock. The motivation behind ZooKeeper is to relieve distributed applications the responsibility of implementing coordination services from scratch. https://zookeeper.apache.org/doc/current/zookeeperOver.html\",\"上边是Zookeeper官网的描述，as everyone knows，ZooKeeper是分布式应用程序的分布式协调服务。\"]},\"170\":{\"h\":\"1.3.为什么要用Zookeeper\",\"t\":[\"学习一个东西，anyhow，知道为什么学它至关重要。\",\"看到一个比较靠谱的例子：\",\"一个团队里面，需要一个leader，leader是干嘛用的？管理什么的咱不说，就说如果外面的人，想问关于这个团队的一切事情，首先就会去找这个leader，因为他知道的最多，而且他的回答最靠谱。 比如产品经理小饼过来要人，作为leader，老吕发现小耀最近没有项目安排，于是把小耀安排给了小饼的项目； 过了一会，另一个产品小西也过来要人，老吕发现刚刚把小耀安排走了，已经没人，于是就跟小西说，人都被你们产品要走了，你们产品自己去协调去。 如果老吕这时候忘了小耀已经被安排走了，把小耀也分配给小西，那到时两个产品就要打架了。 这就是leader在团队里的【协调作用】。 同样的，在分布式系统中，也需要这样的协调者，来回答系统下各个节点的提问。\",\"Zookeeper能完美解决分布式协调服务这个问题\",\"但是这个例子属于单机模式，当我们扩展为三台服务器集群，小西过来问leader02要人，这时leader们信息还没有同步。\",\"这时就会涉及到Zookeeper的其他几点特性： 1、配置信息同步 2、分布式锁控制 3、消息的发布与订阅（典型的生产者消费者模型） 4、集群内节点状态的快速感知 当信息还没有同步完成时，不对外提供服务，阻塞住查询请求，等待信息同步完成，再给查询请求返回信息。\",\"这样的系统，就叫分布式协调系统。谁能把这个数据同步的时间压缩的更短，谁的请求响应就更快，谁就更出色，Zookeeper就是其中的佼佼者。\",\"它用起来像单机一样，能够提供数据强一致性，但是其实背后是多台机器构成的集群，不会有SPOF。\"]},\"171\":{\"h\":\"2. Zookeeper介绍\",\"t\":[\"百度百科\",\"ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。 ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。 ZooKeeper包含一个简单的原语集，提供Java和C的接口。 ZooKeeper代码版本中，提供了分布式独享锁、选举、队列的接口，代码在$zookeeper_home\\\\src\\\\recipes。其中分布锁和队列有Java和C两个版本，选举只有Java版本。\"]},\"172\":{\"h\":\"3. Zookeeper整体架构\",\"t\":[\"Zookeeper整体架构\"]},\"173\":{\"h\":\"4. 快速入门(quick start)\"},\"174\":{\"h\":\"4.1.安装\",\"t\":[\"Zookeeper是解压包，只需要安装、解压就可以启动使用\",\"wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz\",\"tar -zxf ./zookeeper-3.4.14.tar.gz\",\"在conf目录下，有默认启动配置文件【zoo_sample.cfg】，复制一份到同级目录下【zoo.cfg】。\",\"配置文件解读：\",\"# tickTime这个时间是作为zookeeper服务器之间或客户端与服务器之间维持心跳的时间间隔,也就是说每个tickTime时间就会发送一个心跳。（以毫秒为单位） tickTime = 2000 # dataDir ZooKeeper的状态存储位置，看名字就知是数据目录。在你的系统中检查这个目录是否存在，如果不存在手动创建，并且给予可写权限。 dataDir = /path/to/zookeeper/data # 这个端口就是客户端连接Zookeeper服务器的端口,Zookeeper会监听这个端口接受客户端的访问请求； clientPort = 2181 # initLimit这个配置项是用来配置zookeeper接受客户端（这里所说的客户端不是用户连接zookeeper服务器的客户端,而是zookeeper服务器集群中连接到leader的follower 服务器）初始化连接时最长能忍受多少个心跳时间间隔数。 # 当已经超过10个心跳的时间（也就是tickTime）长度后 zookeeper 服务器还没有收到客户端的返回信息,那么表明这个客户端连接失败。总的时间长度就是 5*2000=10秒。 initLimit = 5 # syncLimit这个配置项标识leader与follower之间发送消息,请求和应答时间长度,最长不能超过多少个tickTime的时间长度,总的时间长度就是2*2000=4秒 syncLimit = 2 # 日志存放的位置 dataLogDir=/path/to/zookeeper/log # 2888,3888 are election port # 2888端口是zookeeper服务之间的通讯的端口，3888是zookeeper与其他应用程序通讯的端口。 # server.A=B:C:D中的A是一个数字,表示这个是第几号服务器,B是这个服务器的IP地址，C第一个端口用来集群成员的信息交换,表示这个服务器与集群中的leader服务器交换信息的端口，D是在leader挂掉时专门用来进行选举leader所用的端口。 server.1=localhost:2888:3888\"]},\"175\":{\"h\":\"4.2.启动\",\"t\":[\"[root@iz2zehz5b1m03ahtrhebcaz bin]# ./zkServer.sh ZooKeeper JMX enabled by default Using config: /home/soft/zookeeper-3.4.8/bin/../conf/zoo.cfg Usage: ./zkServer.sh {start|start-foreground|stop|restart|status|upgrade|print-cmd}\",\"进入到bin目录下，\",\"启动\",\"./zkServer.sh start\",\"状态\",\"./zkServer.sh status\"]},\"176\":{\"h\":\"4.3.查询\",\"t\":[\"Zookeeper客户端连接指令\",\"进入zookeeper下bin目录\",\"[root@iz2zehz5b1m03ahtrhebcaz bin]# pwd /home/soft/zookeeper-3.4.8/bin [root@iz2zehz5b1m03ahtrhebcaz bin]# ll total 44 -rwxr-xr-x 1 elasticsearch elasticsearch 232 Feb 6 2016 README.txt -rwxr-xr-x 1 elasticsearch elasticsearch 1937 Feb 6 2016 zkCleanup.sh -rwxr-xr-x 1 elasticsearch elasticsearch 1056 Feb 6 2016 zkCli.cmd -rwxr-xr-x 1 elasticsearch elasticsearch 1534 Feb 6 2016 zkCli.sh -rwxr-xr-x 1 elasticsearch elasticsearch 1628 Feb 6 2016 zkEnv.cmd -rwxr-xr-x 1 elasticsearch elasticsearch 2696 Feb 6 2016 zkEnv.sh -rwxr-xr-x 1 elasticsearch elasticsearch 1089 Feb 6 2016 zkServer.cmd -rwxr-xr-x 1 elasticsearch elasticsearch 6773 Feb 6 2016 zkServer.sh -rw-r--r-- 1 root root 7850 May 4 13:26 zookeeper.out\",\"可以看到很多脚本文件，通过zkCli.sh连接客户端\",\"./zkCli.sh -server 127.0.0.1:2181\",\"通过ls /，查看已注册服务， 例如查询dubbo\",\"ls /dubbo\",\"可以看到dubbo服务地外提供的接口\",\"消费者、生产者\",\"ls /dubbo/com.ivan.service.provider.UserService/consumers\",\"ls /dubbo/com.ivan.service.provider.UserService/providers\"]},\"177\":{\"h\":\"5. 常用指令\",\"t\":[\"客户端连接后整体使用和linux很相似，上一章做了介绍\"]},\"178\":{\"h\":\"6. 应用场景\"},\"179\":{\"h\":\"场景一 配置文件\",\"t\":[\"我们在开发的时候，有时候需要获取一些公共的配置，比如数据库连接信息等，并且偶然可能需要更新配置。如果我们的服务器有N多台的话，那修改起来会特别的麻烦，并且还需要重新启动。这里Zookeeper就可以很方便的实现类似的功能。\"]},\"180\":{\"h\":\"场景二 分布式锁\",\"t\":[\"在我们日常的开发中，如果是单个进程中对共享资源的访问，我们只需要用synchronized或者lock就能实现互斥操作。但是对于跨进程、跨主机、跨网络的共享资源似乎就无能为力了。\"]},\"181\":{\"h\":\"场景三 分布式队列\",\"t\":[\"在日常使用中，特别是像生产者消费者模式中，经常会使用BlockingQueue来充当缓冲区的角色。但是在分布式系统中这种方式就不能使用BlockingQueue来实现了，但是Zookeeper可以实现。\"]},\"182\":{\"h\":\"场景四 负载均衡\",\"t\":[\"首先我们需要简单的理解分布式和集群，通俗点说：分布式就是将一个系统拆分到多个独立运行的应用中（有可能在同一台主机也有可能在不同的主机上），集群就是将单个独立的应用复制多分放在不同的主机上来减轻服务器的压力。而Zookeeper不仅仅可以作为分布式集群的服务注册调度中心（例如dubbo），也可以实现集群的负载均衡。\",\"Zookeeper是一个功能非常强大的应用，除了上面几种应用外，还有命名服务、分布式协调通知等也是常用的场景。\"]},\"183\":{\"h\":\"7. 选举机制\",\"t\":[\"选举机制，顾名思义就是投票选举。\",\"分布式集群开发的目的就是为了保证系统的稳定运行，如果有一个服务挂掉，不会对整个系统造成大的影响。\",\"Leader选举是保证分布式数据一致性的关键所在。当Zookeeper集群中的一台服务器出现以下两种情况之一时，需要进入Leader选举。\",\"服务器初始化启动。\",\"服务器运行期间无法和Leader保持连接。\",\"情况一\",\"1. 服务器启动时期的Leader选举 若进行Leader选举，则至少需要两台机器，这里选取3台机器组成的服务器集群为例。在集群初始化阶段，当有一台服务器Server1启动时，其单独无法进行和完成Leader选举，当第二台服务器Server2启动时，此时两台机器可以相互通信，每台机器都试图找到Leader，于是进入Leader选举过程。选举过程如下 (1) 每个Server发出一个投票。由于是初始情况，Server1和Server2都会将自己作为Leader服务器来进行投票，每次投票会包含所推举的服务器的myid和ZXID，使用(myid, ZXID)来表示，此时Server1的投票为(1, 0)，Server2的投票为(2, 0)，然后各自将这个投票发给集群中其他机器。 (2) 接受来自各个服务器的投票。集群的每个服务器收到投票后，首先判断该投票的有效性，如检查是否是本轮投票、是否来自LOOKING状态的服务器。 (3) 处理投票。针对每一个投票，服务器都需要将别人的投票和自己的投票进行PK，PK规则如下 · 优先检查ZXID。ZXID比较大的服务器优先作为Leader。 · 如果ZXID相同，那么就比较myid。myid较大的服务器作为Leader服务器。 对于Server1而言，它的投票是(1, 0)，接收Server2的投票为(2, 0)，首先会比较两者的ZXID，均为0，再比较myid，此时Server2的myid最大，于是更新自己的投票为(2, 0)，然后重新投票，对于Server2而言，其无须更新自己的投票，只是再次向集群中所有机器发出上一次投票信息即可。 (4) 统计投票。每次投票后，服务器都会统计投票信息，判断是否已经有过半机器接受到相同的投票信息，对于Server1、Server2而言，都统计出集群中已经有两台机器接受了(2, 0)的投票信息，此时便认为已经选出了Leader。 (5) 改变服务器状态。一旦确定了Leader，每个服务器就会更新自己的状态，如果是Follower，那么就变更为FOLLOWING，如果是Leader，就变更为LEADING。\",\"情况二\",\" 2. 服务器运行时期的Leader选举 在Zookeeper运行期间，Leader与非Leader服务器各司其职，即便当有非Leader服务器宕机或新加入，此时也不会影响Leader，但是一旦Leader服务器挂了，那么整个集群将暂停对外服务，进入新一轮Leader选举，其过程和启动时期的Leader选举过程基本一致。假设正在运行的有Server1、Server2、Server3三台服务器，当前Leader是Server2，若某一时刻Leader挂了，此时便开始Leader选举。选举过程如下 (1) 变更状态。Leader挂后，余下的非Observer服务器都会讲自己的服务器状态变更为LOOKING，然后开始进入Leader选举过程。 (2) 每个Server会发出一个投票。在运行期间，每个服务器上的ZXID可能不同，此时假定Server1的ZXID为123，Server3的ZXID为122；在第一轮投票中，Server1和Server3都会投自己，产生投票(1, 123)，(3, 122)，然后各自将投票发送给集群中所有机器。 (3) 接收来自各个服务器的投票。与启动时过程相同。 (4) 处理投票。与启动时过程相同，此时，Server1将会成为Leader。 (5) 统计投票。与启动时过程相同。 (6) 改变服务器的状态。与启动时过程相同。\",\"总结：\",\"在选举时每个节点都有一个(myid,ZXID)表示；\",\"对于初始化或leader宕机时，每个server发出一个投票给集群其他机器，所有请求挂起，开始选举（如实例一）；\",\"超过半数的投票，就会成为Leader；\",\"比较自己的选票和接收到的投票，优先比较ZXID，再比较myid。如果大于自己，更换自己的选票并告诉其他server；\",\"ZXID 是指当前服务器数据越新，其成为Leader可能性越大。\",\"myid 是指当前server编号\"]},\"184\":{\"h\":\"8. 三大功能\",\"t\":[\"为用户提供数据的注册和查询服务\",\"为用户提供数据节点的监听注册服务\",\"跟用户之间保持心跳通信以感知用户的状态\"]},\"185\":{\"h\":\"其他编程语言\"},\"186\":{\"h\":\"编程规范\"},\"187\":{\"c\":[\"编程规范\"]},\"188\":{\"c\":[\"编程规范\"]},\"189\":{\"h\":\"优化if-else的11种方案\",\"t\":[\"_63f4e0e5-ab7b-49e8-a491-246183324b86\",\"优雅永不过时！\",\"image-20240805201630837\"]},\"190\":{\"h\":\"1. 使用早返回（Early Return）：尽可能早地返回，避免嵌套的if-else。\",\"t\":[\"优化前：\",\"public class NoEarlyReturnExample { public boolean hasPositiveNumber(int[] numbers) { boolean foundPositive = false; for (int number : numbers) { if (number > 0) { foundPositive = true; // 没有早返回，而是继续循环 } } return foundPositive; // 循环结束后返回结果 } }\",\"优化后：\",\"public class EarlyReturnExample { public boolean hasPositiveNumber(int[] numbers) { for (int number : numbers) { if (number > 0) { return true; // 找到正数立即返回 } } return false; // 没有找到正数 } }\",\"减少了多次循环\"]},\"191\":{\"h\":\"2. 使用三元运算符：在条件简单的情况下，可以使用三元运算符来简化代码。\",\"t\":[\"优化前：\",\"public class NoTernaryOperatorExample { public String getGender(int number) { if (number > 0) { return \\\"girl\\\"; } else if (number < 0) { return \\\"boy\\\"; } else { return \\\"other\\\"; } } }\",\"优化后：\",\"public class TernaryOperatorExample { public String getGender(int number) { return (number > 0) ? \\\"girl\\\" : (number < 0) ? \\\"boy\\\" : \\\"other\\\"; } }\"]},\"192\":{\"h\":\"3. 使用switch-case语句：如果你的条件是基于不同的情况或值，更好的选择是switch-case。\",\"t\":[\"优化前：\",\"public class NoSwitchCaseExample { public void performAction(String action) { if (\\\"start\\\".equals(action)) { System.out.println(\\\"Starting...\\\"); } else if (\\\"stop\\\".equals(action)) { System.out.println(\\\"Stopping...\\\"); } else { System.out.println(\\\"Unknown action\\\"); } } }\",\"优化后：\",\"public class SwitchCaseExample { public void performAction(String action) { switch (action) { case \\\"start\\\": System.out.println(\\\"Starting...\\\"); break; case \\\"stop\\\": System.out.println(\\\"Stopping...\\\"); break; default: System.out.println(\\\"Unknown action\\\"); } } }\"]},\"193\":{\"h\":\"4. 使用策略模式：将每个条件分支封装成一个策略对象，然后根据条件选择使用哪个策略。\",\"t\":[\"优化前：\",\"public class NoStrategyExample { public void context() { // 没有使用策略模式，而是直接执行代码 System.out.println(\\\"Direct execution\\\"); // do something... } }\",\"优化后：\",\"public class StrategyExample { interface Strategy { void execute(); } public class ConcreteStrategyA implements Strategy { public void execute() { System.out.println(\\\"Strategy A executed\\\"); } } public void context(Strategy strategy) { strategy.execute(); } }\"]},\"194\":{\"h\":\"5. 使用查找表：对于固定数量的条件分支，可以使用查找表（例如字典或哈希表）来映射条件和对应的行为。\",\"t\":[\"优化前：\",\"public class NoLookupTableExample { public void performAction(String action) { // 没有使用查找表，而是使用if-else if (\\\"start\\\".equals(action)) { System.out.println(\\\"Starting...\\\"); } else if (\\\"stop\\\".equals(action)) { System.out.println(\\\"Stopping...\\\"); } else { System.out.println(\\\"No action found\\\"); } } }\",\"优化后：\",\"public class LookupTableExample { public void performAction(Map<String, Runnable> actions, String key) { actions.getOrDefault(key, () -> System.out.println(\\\"No action found\\\")).run(); } }\"]},\"195\":{\"h\":\"6. 使用函数或方法：将每个条件分支的逻辑封装到不同的函数或方法中，然后在if-else中调用这些函数。\",\"t\":[\"优化前：\",\"public class NoFunctionExample { public void handleUserType(String userType) { // 没有使用函数封装，而是直接在if-else中编写逻辑 if (\\\"admin\\\".equals(userType)) { System.out.println(\\\"Admin logic here\\\"); } else if (\\\"user\\\".equals(userType)) { System.out.println(\\\"User logic here\\\"); } else { System.out.println(\\\"Guest logic here\\\"); } } }\",\"优化后：\",\"public class FunctionExample { public void handleUserType(String userType) { if (\\\"admin\\\".equals(userType)) { handleAdmin(); } else if (\\\"user\\\".equals(userType)) { handleUser(); } else { handleGuest(); } } private void handleAdmin() { System.out.println(\\\"Handling admin\\\"); } private void handleUser() { System.out.println(\\\"Handling user\\\"); } private void handleGuest() { System.out.println(\\\"Handling guest\\\"); } }\",\"这个是大家比较常用的，通过不同的功能拆分成不同的函数。\"]},\"196\":{\"h\":\"7. 使用命令模式：将每个条件分支封装成一个命令对象，然后根据条件执行相应的命令。\",\"t\":[\"优化前：\",\"public class NoCommandExample { public void performAction(String action) { // 直接执行动作，没有使用命令模式 if (\\\"start\\\".equals(action)) { System.out.println(\\\"Starting...\\\"); } else if (\\\"stop\\\".equals(action)) { System.out.println(\\\"Stopping...\\\"); } } }\",\"优化后：\",\"public class CommandExample { interface Command { void execute(); } public class StartCommand implements Command { public void execute() { System.out.println(\\\"Starting...\\\"); } } public class StopCommand implements Command { public void execute() { System.out.println(\\\"Stopping...\\\"); } } public void executeCommand(Command command) { command.execute(); } }\"]},\"197\":{\"h\":\"8. 使用状态模式：如果逻辑分支与状态有关，可以使用状态模式来管理状态转换。\",\"t\":[\"优化前：\",\"public class NoStateExample { public void handleAction(String state) { // 没有使用状态模式，直接在代码中处理逻辑 if (\\\"start\\\".equals(state)) { System.out.println(\\\"Handling start\\\"); } else if (\\\"stop\\\".equals(state)) { System.out.println(\\\"Handling stop\\\"); } } }\",\"优化后：\",\"public class StateExample { interface State { void handle(); } public class StartState implements State { public void handle() { System.out.println(\\\"Handling start state\\\"); } } public class StopState implements State { public void handle() { System.out.println(\\\"Handling stop state\\\"); } } public class Context { private State state; public void setState(State state) { this.state = state; } public void request() { state.handle(); } } }\",\"状态转换类似于我们在做一个简单的工单流转，每一步都是确定且可复用的场景。\"]},\"198\":{\"h\":\"9. 重构条件表达式：检查是否可以将复杂的条件表达式分解为更简单的部分。\",\"t\":[\"优化前：\",\"public class UnrefactoredConditionExample { public boolean isWeekend(int day) { // 没有重构的条件表达式，切套多、不好阅读 if (day == 6 || (day == 7 && !isHoliday(day))) { return true; } return false; } private boolean isHoliday(int day) { // 法定的假日检查逻辑（法定节假日每年都在变） return false; } }\",\"优化后：\",\"public class RefactoredConditionExample { public boolean isWeekend(int day) { return day == 6 || day == 7; } }\",\"简洁了很多\"]},\"199\":{\"h\":\"10. 使用断言：在某些情况下，使用断言来确保代码的预设条件被满足，避免复杂的条件判断。\",\"t\":[\"优化前：\",\"public class NoAssertExample { public void process(int value) { if (value <= 0) { throw new IllegalArgumentException(\\\"Value must be positive\\\"); } // 处理逻辑 System.out.println(\\\"Processing value: \\\" + value); } }\",\"优化后：\",\"public class AssertExample { public void process(int value) { assert value > 0 : \\\"Value must be positive\\\"; // 处理逻辑 System.out.println(\\\"Processing value: \\\" + value); } }\",\"多数编程中，断言被用在自动化测试用例。不过预设条件判断用起来也非常丝滑。\"]},\"200\":{\"h\":\"11. 使用异常处理：在某些情况下，使用异常处理来简化错误条件的处理。\",\"t\":[\"优化前：\",\"public class NoExceptionHandlingExample { public int divide(int dividend, int divisor) { if (divisor == 0) { // 没有使用异常处理，而是直接返回错误代码 System.out.println(\\\"Cannot divide by zero\\\"); return -1; } return dividend / divisor; } }\",\"优化后：\",\"public class ExceptionHandlingExample { public int divide(int dividend, int divisor) { try { return dividend / divisor; } catch (ArithmeticException e) { System.out.println(\\\"Cannot divide by zero\\\"); return -1; } } }\",\"当遇到异常，尽可能在合适的地方捕获并处理，不要直接把所有异常都抛到最外层。\"]},\"201\":{\"c\":[\"编程规范\"]},\"202\":{\"c\":[\"编程规范\"]},\"203\":{\"h\":\"接口设计这11点要注意\",\"t\":[\"标题： 接口设计这11点要注意 ｜ 接口设计军规 | 干了3年程序员，老板让我这样写接口 | 11条军规，让你的接口设计无可挑剔\",\"cover\",\"作为后端工程师，多数情况都是给别人提供接口，写的好不好使你得重视起来。\",\"74076262d8f14d5390e1ba557e0296a0\",\"最近我手头一些活，需要和外部公司对接，我们需要提供一个接口文档，这样可以节省双方时间、也可以防止后续扯皮。这是就要考验我的接口是否规范化。\",\"接口设计规范JavaPub\"]},\"204\":{\"h\":\"1. 接口名称清晰、明确\",\"t\":[\"顾名思义，接口是做什么的，是否准确、清晰？让使用这一眼就能知道这个接口在做什么，力求言简意赅。比如：查询用户信息，简单明了。\",\"img\"]},\"205\":{\"h\":\"2. 接口路径规整\",\"t\":[\"接口地址，也就是接口的 URL 路径。当别人调用你的接口，就是通过 URL 配合请求时参数来调用。比如： /api/user/queryById 。一般来说，接口地址的命名也要可以大概看出接口的作用，比如前面这个接口，它是作用使用：通过用户id查询用户信息。\",\"除了接口路径，还需要指明接口的域名或IP。以 http 协议为例、端口是 8080，当我请求 javapub 的用户中心信息时：\",\"https://javapub.net.cn:8080/api/user/queryById\",\"4677eb13-b696-43be-b530-60766742a4e3\"]},\"206\":{\"h\":\"3. 请求方式规范\",\"t\":[\"请求方式常用的有如下几种：\",\"GET（SELECT）：从服务器取出资源，通常用于查询数据（一项或多项）。\",\"POST（CREATE）：在服务器新建一个资源，通常用在新增、修改、删除操作。\",\"PUT（UPDATE）：在服务器更新资源，通常用于更新数据（客户端提供改变后的完整资源）。\",\"PATCH（UPDATE）：在服务器更新资源，通常用于修改部分数据（客户端提供改变的属性）。\",\"DELETE（DELETE）：从服务器删除资源，通常用于删除数据。\",\"这么多请求方式，多数中小公司只用 GET 和 POST，可能还有些公司只用 POST。但是选择合适的请求方式可以提升开发效率、并且让我们的接口更容易复用。\",\"不管用哪种，一定要写清楚。\",\"eb21c081-f26c-4c8c-9197-4a35573e8b04\"]},\"207\":{\"h\":\"4. 接口详细说明\",\"t\":[\"如果是非常简单的接口，通过接口名就可以了解个大概。如果是一些非常复杂的接口，就一定要添加详细说明文档，包括功能描述、请求参数、请求相应参数等信息。\",\"力求言简意赅，通过入参、做了什么动作、返回哪些值。\",\"006r3PQBjw1fb5h84baewj306404lmx9\"]},\"208\":{\"h\":\"5. 编写接口请求示例\",\"t\":[\"接口文档需要提供接口示例，接口实例是为了帮助调用者理解接口的使用方法和调用流程，快速开始调试程序。一般是 CURL 格式的示例。\",\"curl javapub.net.cn\",\"img\"]},\"209\":{\"h\":\"6. 引入接口版本管理\",\"t\":[\"随着功能开发的日趋完善，可能对接口做出修改更新，例如添加、删除时变更参数，或者修改返回值的格式。这些新变更可能影响用户的 API 使用体验，造成现有客户端无法使用。\",\"https://javapub.net.cn:8080/api/user/v1/queryById https://javapub.net.cn:8080/api/user/v2/queryById\",\"56d7cbc6-0b2c-4a90-ac37-a8e65c040d47\"]},\"210\":{\"h\":\"7. 维护接口文档版本更新\",\"t\":[\"如果接口发生了变更，接口文档也要做出相应调整，维护文档。比如错误码更新、参数类型变更等，要明确记录。\",\"日期\",\"变更内容\",\"责任人\",\"2028-03-01\",\"创建接口文档，定义基本数据结构。\",\"JavaPub\",\"2028-05-10\",\"V2.0用户中心接口更新\",\"王哥\",\"b4fe3684d20e97fa311ca213c8dc7ea9\"]},\"211\":{\"h\":\"8. 明确请求头有哪些\",\"t\":[\"接口文档，要写清楚请求头信息，比如：有权限校验的接口请求，在请求头中 apiKey。还有一些参数是 JSON 的，要设置 application/json。\",\"Accept：指定客户端能够接收的内容类型，如：Accept: text/plain, text/html。\",\"Authorization：一般存放令牌信息，如：Authorization: Basic QzPhZGRpbjpvcGVuIHNlc2FtZQ==\",\"Cookie：存放 Cookie 信息。\",\"User-Agent：指定客户端信息，作为服务端处理时定制化。\",\"Accept-Encoding：指定客户端允许的数据压缩格式，如 gzip、deflate 等。\",\"image-20240521104426851\"]},\"212\":{\"h\":\"9. 接口安全\",\"t\":[\"有些接口参数涉及到隐私和敏感数据、需要参数加密做好脱敏处理和说明。此外，还要做好接口授权访问，防止出现拖库、击穿等P0问题。\",\"image-20240521104647299\"]},\"213\":{\"h\":\"10. 接口测试\",\"t\":[\"在编写接口文档时，编写测试案例也要给出测试数据，包括请求参数和返回结果。让调用者有一个预期，节省沟通成本。\",\"image-20240521105043027\"]},\"214\":{\"h\":\"11. 定义错误码\",\"t\":[\"接口文档，一定要错误码，错误码作为程序重要的参考，让下游知道什么时候做什么动作。比如：当查询不到用户信息时，可以提示它跳转到注册页面。\",\"错误码\",\"名称\",\"说明\",\"1001\",\"参数错误\",\"参数不合法\",\"1002\",\"数据库错误\",\"数据库请求出错\",\"image-20240521104901378\"]},\"215\":{\"c\":[\"编程规范\",\"接口\"]},\"216\":{\"c\":[\"编程规范\",\"接口\"]},\"217\":{\"h\":\"工作总结！日志打印的11条建议\",\"t\":[\"工作总结！日志打印的11条建议\"]},\"218\":{\"h\":\"前言\",\"t\":[\"大家好，我是 JavaPub。日志是我们定位问题的得力助手，也是我们团队间协作沟通（甩锅）、明确责任归属（撕B）的利器。没有日志的程序运行起来就如同脱缰的野🐎。打印日志非常重要。今天我们来聊聊日志打印的 N 个好建议～\",\"image-20240314165434764\"]},\"219\":{\"h\":\"选择合适的日志等级\",\"t\":[\"在开发中我们有常见的四种日志打印等级，debug、info、warn、error，要选择合适的等级打印，不要上来直接 info。\",\"image-20240314214602647\",\"error: 错误日志，指比较严重的问题，会对系统和有业务造成伤害。运维监控重点关注。\",\"warn: 警告日志，不会对系统运行造成大的影响，一般由开发人员关注。\",\"info: 关键日志，为了保留系统运行关键指标，比如函数的入参、出参，时间等信息。\",\"debug: 开发日志，在开发调试阶段，记录对象数据在关键处理步骤中的变化情况、快速定位。\"]},\"220\":{\"h\":\"要打印函数的入参、出参\",\"t\":[\"记录日志并不是要把所有信息都记录下来，那日志存储就要大到上天。我们只记录关键有效的日志，有效日志才是 battle 🆚 时杀手锏。\",\"image-20240314214637143\",\"哪些算是有效日志？比如函数的入口处，打印入参，还包括用户唯一标识 （uid）、链路标识 （traceId） 等。函数出口打印返回值及时间等。\",\" public String GetName(Request req, Integer id){ log.debug(\\\"method start param: {}\\\", req.UserID); String name = \\\"JavaPub\\\"; log.debug(\\\"method end result: {}\\\", name); return name; }\"]},\"221\":{\"h\":\"打印日志对象要做判空处理，避免阻断流程\",\"t\":[\"image-20240314214712731\",\"为了打印一行日志，程序写挂了。空指针异常在任何代码中都是最常见的异常之一。\",\"反例：当 book 对象是 NULL 的话，这行日志就会抛空指针异常。\",\"public void doSome(Book book){ log.info(\\\"do do and print log: {}\\\". book.getName()); // do something... ... }\"]},\"222\":{\"h\":\"不要使用日志系统的（Log4j、Logback），要使用 Slf4j\",\"t\":[\"image-20240314214745191\",\"Slf4j 是使用门面模式的日志框架，可以解耦具体的日志实现。可以在不修改代码的情况下，更换底层的日志框架。\",\"正例：\",\"import org.slf4j.Logger; import org.slf4j.LoggerFactory; private static final Logger logger = LoggerFactory.getLogger(JavaPub.class);\"]},\"223\":{\"h\":\"对低级别的日志输出，必须进行日志级别开关判断\",\"t\":[\"image-20240314214801114\",\"对于 trace、debug、info 这些比较低的日志级别，必须进行日志级别开关。\",\"正例：\",\"开关判断逻辑通常放在日志工具类中。\",\"public void doSomething(){ User user = new User(1, \\\"技术自媒体\\\", \\\"JavaPub\\\"); if (logger.isDebugEnabled()) { logger.debug(\\\"print debug log. 666 is {}\\\", user.getName()); } }\",\"反例：\",\"public void doSth(){ String name = \\\"JavaPub\\\"; logger.trace(\\\"print debug log\\\" + name); logger.debug(\\\"print debug log\\\" + name); logger.info(\\\"print info log\\\" + name); // 业务逻辑 ... }\",\"当日志级别是 warn 时，以上日志不会打印，但是会执行字符串拼接操作，如果打印值是对象的话，还会执行 toString() 方法，浪费了系统资源，因此建议加上日志开关判断。\"]},\"224\":{\"h\":\"不要用e.printStackTrace()打印日志\",\"t\":[\"反例：\",\"public void doSomething(){ try{ // 业务代码 ... } catch (Exception e){ e.printStackTrace(); } }\",\"e.printStackTrace() 打印出的日志包含堆栈信息，导致我们的日志信息不规整、增加定位问题的难度。如果使用 ELK 分析日志也会非常困难。\",\"e.printStackTrace() 语句产生的字符串记录的是堆栈信息，如果信息太长太多，字符串常量池所在的内存块没有空间了，即内存满了，系统请求也将被阻塞。\",\"正例：\",\"public void doSomething(){ try{ // 业务逻辑 ... } catch (Exception e){ log.error(\\\"程序异常 failed\\\", e); } }\"]},\"225\":{\"h\":\"打印全部的异常信息，方便定位问题\",\"t\":[\"image-20240314214823572\",\"反例：\",\"没有打印系统异常 e，无法定位出现了什么类型的异常。\",\"public void doSth(){ try{ // 业务逻辑 ... } catch (Exception e){ log.error(\\\"发生了一个异常\\\"); } }\"]},\"226\":{\"h\":\"不要打印重复日志\",\"t\":[\"image-20240314214836800\",\"在嵌套逻辑代码中打印重复日志，增加系统资源消耗占用。\",\"反例：\",\"public void doSomething(String s){ log.info(\\\"do something and print log: {}\\\", s); doSubSomething(s); } ​ private void doSubSomething(String s){ log.info(\\\"do sub something and print log: {}\\\", s); // 写点业务逻辑 ... }\",\"正例：\",\"应该直接删掉或者将为 debug 日志级别。\"]},\"227\":{\"h\":\"日志尽量使用英文\",\"t\":[\"反例：\",\"image-20240314155834611\",\"建议：尽量在打印时日志时输出英文，防止中文编码与终端不一致导致打印出现乱码，对排查故障造成感染。\"]},\"228\":{\"h\":\"核心业务逻辑，在每个分支首行都打印日志\",\"t\":[\"在编写核心业务逻辑代码时，遇到 if...else 或者 switch 这样的分支条件，在行首打印日志，通过日志可以快速排查定位异常。\",\"public void doSomething(){ if(user.isVip()){ log.info(\\\"该用户是 JavaPub 会员,Id:{},开始处理会员逻辑\\\",user,getUserId()); // dosomething 会员逻辑 }else{ log.info(\\\"该用户是非会员,Id:{},开始处理非会员逻辑\\\",user,getUserId()) // dosomething 非会员逻辑 } }\"]},\"229\":{\"h\":\"不要打印无意义的日志（不携带上下文、日志链路 id）\",\"t\":[\"image-20240314214848607\",\"反例：\",\"不携带任何业务信息的日志，对故障排查意义不大。\",\"public void doSomething(){ log.info(\\\"do something and print log. i am NB\\\"); // dosomething 业务逻辑 ... }\",\"正例：\",\"日志一定要携带业务信息相关内容，有利于快速定位问题原因\",\"public void doSomething(Request req, User user){ log.info(\\\"do something and print log, id={}, trace_id={}\\\", user.GetId, req.GetTraceId); // dosomething 业务逻辑 ... }\",\"如何打印日志呢？总的来说不要让你的程序在黑盒总运行，打印关键信息、保证在出现异常时通过日志快速定位到那里就可以啦。\"]},\"230\":{\"c\":[\"编程规范\",\"日志\"]},\"231\":{\"c\":[\"编程规范\",\"日志\"]},\"232\":{\"h\":\"面试专题合集\",\"t\":[\"面试必读专题。 实战项目组\"]},\"233\":{\"h\":\"项目实战\",\"t\":[\"实战项目组，从零到一写代码、从需求到部署上线。开始阅读。\",\"项目中用到的技术点和手记都免费公开，获取视频课程点击，点击了解星球🌍。\"]},\"234\":{\"c\":[\"项目实战\"]},\"235\":{\"c\":[\"项目实战\"]},\"236\":{\"h\":\"推荐\"},\"237\":{\"h\":\"白菜价的云服务器，整理的合集\",\"t\":[\"学习编程的同学免不了和 Linux 打交道，但受限于云服务器价格。\",\"今天，我这里整理了目前市面上性价比极高的云服务器购买链接，白菜的价格，需要的自行下单。\",\"4d18f71a2d55ce879085181a893fb7bf\"]},\"238\":{\"h\":\"白菜价的云服务器，整理的合集\",\"t\":[\"一台 ECS 云服务器，1 年 99 元\",\"每天大约是 0.27 元\",\"关键还续费同价\",\"还不限流量\",\"image-20241104113603085\",\"这里给大家盘点和总结了常见的云服务器，需要的可以看看，有不小的优惠力度。使用我的推广链接还有优惠。\",\"1、阿里云99元的2核2G3M云服务器，买完建议马上续费一次也是99元。\",\"https://www.aliyun.com/minisite/goods?userCode=wkdka1si\",\"2、百度云服务器，2核2G低至59元，有3年可选，带宽可以选。\",\"https://cloud.baidu.com/campaign/ambassador-product/index.html?ambassadorId=9a1b569b368440f6bd582fdaa3ec2702#knowledge-bcc\",\"3、京东云2核2G3M低至58元起，还有3年可选：\",\"https://3.cn/2-7uWUqd\",\"4、腾讯云优惠合集，轻量2核2G4M低至79元：\",\"https://curl.qcloud.com/qqVt9Tp3\",\"5、华为云服务器，2核4G2M低至99元\",\"以上都是国内知名的云服务商，使用起来也顺手一些。\",\"我建议大家选择 Linux 的 Ubuntu 操作系统，体验生产环境。\"]},\"239\":{\"h\":\"1. Ubuntu\",\"t\":[\"优点：\",\"用户友好： Ubuntu以其易用性而闻名，适合初学者和那些从其他操作系统转移来的用户。\",\"长期支持（LTS）版本： 提供长达五年的支持，确保了一个稳定且可靠的长期使用平台。\",\"广泛的文档和社区支持： 提供全面且用户友好的文档，以及Linux界中最大和最活跃的社区之一。\",\"广泛的硬件兼容性： 以其强大的硬件支持而闻名，兼容广泛的设备和系统。\",\"缺点：\",\"不太前沿： 优先考虑稳定性，特别是在LTS版本中，可能不会总是包含最新的软件版本和特性。\",\"系统资源使用： 默认GNOME桌面环境可能资源密集，不适合较旧或性能较差的硬件。\"]},\"240\":{\"h\":\"2. CentOS\",\"t\":[\"优点：\",\"现代化的软件栈： 包含最新的安全补丁和功能。\",\"模块化设计： 让软件包管理更加灵活高效。\",\"支持广泛的硬件架构： 适应不同应用场景。\",\"缺点：\",\"过时的软件包： 基于RHEL的稳定版本，通常没有最新版本的软件包。\",\"有限的桌面环境： 缺乏各种桌面环境和用户友好的应用程序，更适合服务器环境。\",\"官方存储库中的软件较少： 与其他发行版相比，官方存储库中没有广泛的软件可用性。\"]},\"241\":{\"h\":\"3. Debian\",\"t\":[\"优点：\",\"精简而稳定： Debian以其稳定性和社区支持而闻名，deb包高度集中，依赖性问题出现的很少。\",\"广泛的系统架构支持： 支持许多不同的系统架构。\",\"缺点：\",\"更新周期长： 软件库里很多软件显得老旧。\",\"缺乏专业技术支持： 作为一个完全自由的操作系统，没有官方的商业支持。\"]},\"242\":{\"h\":\"4. Fedora\",\"t\":[\"优点：\",\"前沿技术： 以整合开源软件的最新进展而闻名，提供最新特性和创新。\",\"强大的安全性： 启用SELinux默认情况下提供强大的安全特性和频繁的更新。\",\"开发者友好： 包含全面的开发工具和库，适合开发人员和技术爱好者。\",\"缺点：\",\"短支持周期： 每个版本仅支持约13个月，对寻求长期稳定性的用户可能不理想。\",\"潜在的稳定性问题： 由于专注于最新的软件，有时会遇到稳定性问题。\"]},\"243\":{\"h\":\"5. Gentoo\",\"t\":[\"优点：\",\"自定义性强： 允许用户自定义编译软件，以达到最佳性能和最小化系统资源消耗。\",\"源代码控制： 使用源代码管理系统，用户可以查看、修改和定制软件源代码。\",\"高度优化： 软件包是针对特定硬件和架构进行编译的，因此可以获得更高的性能和效率。\",\"缺点：\",\"安装和配置难度大： 相对于其他Linux发行版来说较为复杂，需要用户具备一定的Linux知识和技能。\",\"编译时间长： 软件包需要在本地编译安装，因此安装时间相对较长。\"]},\"244\":{\"h\":\"6. Alpine Linux\",\"t\":[\"优点：\",\"轻量级： 以其小巧的体积和低资源消耗而闻名，适合作为容器镜像的基础操作系统。\",\"安全性： 内核采用了非官方的grsecurity/PaX移植版本，所有用户空间的二进制文件被编译为位置独立可执行文件，增强系统的安全性。\",\"缺点：\",\"应用支持性： 使用musl libc，可能和其他Linux发行版使用的glibc实现会有些不同，可能影响某些应用的支持。\",\"以上是对几种常见Linux发行版的优缺点分析，每种发行版都有其独特的优势和局限性，选择时应根据个人或组织的具体需求和偏好来决定。\",\"如果你不知道怎么使用云服务器，来找王哥，手把手教。\"]},\"245\":{\"c\":[\"云服务器\",\"阿里云\",\"百度云\",\"腾讯云\",\"京东云\",\"华为云\"]},\"246\":{\"h\":\"知识星球\"},\"247\":{\"h\":\"资源获取说明\",\"t\":[\"JavaPub 分享了很多资源和源码等，大部分都免费开源到 Github。你可以访问 https://github.com/Rodert 进入 JavaPub 的 GitHub 主页。\",\"如何使用 GitHub:\",\"如何使用\",\"方案二，部分资源在百度网盘，加入群消息自行获取。备注【加群】，快速处理。点击加群\",\"群公告获取\"]},\"248\":{\"h\":\"星球介绍\",\"t\":[\"了解编程指南知识星球： 掌握编程 - 编程指南知识星球\"]},\"249\":{\"h\":\"编程指南的优势\",\"t\":[\"加入我们，你将获得以下特权：\",\"提问答疑，包括开发和面试中遇到的问题。\",\"简历优化，简历作为找工作的第一块敲门砖，写的好可以获得很大的加分。你可以直接发送到我的邮箱，我每天都会处理邮件：731444260@qq.com\",\"实战直播课，很多人没有做过企业级项目、不了解整个项目的开发流程，我们会出多个实战课带大家手把手做项目、也会有直播回看的哦。\",\"前沿技术分享，我一直在研究关注区块链和 AI 领域，会不定时分享一些我的看法。\",\"时常分享优质学习资源，终身学习我们一起行动。\",\"副业赚钱，聊聊我怎么用副业在赚钱。\"]},\"250\":{\"h\":\"付费加入\",\"t\":[\"星球初始定价格 59 元（🎈）。说实话，这个价格很低、甚至在网上买一个盗版项目源码的价格都要比这个高，还有一点也是为了可以筛选加入的小伙伴是真正要学习编程的同学。平均每天 0.16 元。（以后每新出一个项目加一次价格，越早入手越划算。）\",\"微信扫描下方二维码加入：\",\"加入 3 天不满意可以全额退款，感兴趣的同学可以先加入体验，毕竟知识学到都是自己的！\",\"如果不确定是否要加入，可以在公众号留言 公众号 - JavaPub ，备注：想要加入星球，然后说明自己的情况。\",\"星球链接 https://t.zsxq.com/14tMfIK7m\",\"星球优惠码先到先得\"]},\"251\":{\"h\":\"走进作者\"},\"252\":{\"h\":\"联系站长\",\"t\":[\"作者档案\",\"微信联系站长\",\"或者，搜索微信号： javapub\"]},\"253\":{\"c\":[\"站长\",\"关于我\"]},\"254\":{\"c\":[\"站长\",\"联系站长\"]},\"255\":{\"h\":\"作者信息\",\"t\":[\"作者档案\",\"联系站长\",\"站长是谁？\",\"大家都叫他王哥，生于 1996 年内蒙古边陲城市，他是一个普普通通的男生，毕业于 2019 年。全干开发工程师...，喜欢折腾。\",\"商务合作\"]},\"256\":{\"h\":\"视频\",\"t\":[\"西瓜视频\",\"哔哩哔哩\"]},\"257\":{\"h\":\"我做过的项目\",\"t\":[\"JavaPub官网\",\"旧版JavaPub官网\",\"JavaPub学习路线\",\"俩万通用后台管理系统\",\"...\",\"更多：点击了解\"]},\"258\":{\"c\":[\"站长\",\"关于我\"]},\"259\":{\"c\":[\"站长\"]},\"260\":{\"h\":\"档案主页\"},\"261\":{\"h\":\"介绍\",\"t\":[\"少年应有鸿鹄志，当骑骏马踏平川。\",\"作者生于 1996 年内蒙古边陲城市，毕业于 2019 年，双非本科。全栈工程师，包含 web、大数据、搜索、爬虫、区块链等领域。\"]},\"262\":{\"h\":\"一个程序员的2024\",\"t\":[\"时光荏苒，甲辰年龙年已经过去，当初觉得还远着的 2025 年已经临门一脚。\",\"今天聊聊我的 2024。工作、副业、生活\"]},\"263\":{\"h\":\"工作\",\"t\":[\"做了什么事？\",\"2024，工作没有变动，我还在企业中做软件工程师。\",\"这一整年断断续续做了几个的项目，也学了很多之前以为懂的东西，业务上有了很多理解。如果是老读者都知道我在做区块链领域的事（是合规的），当然了、如果你对这个业务场景有一定了解就会知道，它在当下最广泛的应用场景就是金融。有过金融投资的朋友都知道、这个领域玩法五花八门，像借D、质Z、合Y等等，这里不展开介绍了。如果你感兴趣，你知道怎么联系我的。\",\"接触了比较多区块链底层的东西，或者说区块链底层的数据结构，及行业内的一些群体、业务场景等。\",\"...\",\"常常会有朋友和亲人问能不能赚到？\",\"说实话，风险和收益成正相关这个底层逻辑在什么时候都不会变，还有努力系数。这个公式在金融领域只会被多倍的放大。如果炒过股票就一定会有更深的感受。有句经典话叫：学会更多的东西不一定能赚钱，但你一定知道你是怎么亏的。这句是自嘲，也是在说这里的不确定性。\",\"技术上\",\"成长不多，远没有刚工作那一俩年的劲头和成长速度。而且学的很多东西都是碎片化。\",\"作为一个技术人，以我的经验，半年左右一定要有体系的学一些新东西。用时在学只是权宜办法，从负责任的角度来说，这就是在给团队挖坑。\",\"而且，学习 AI 是突破职业瓶颈的最佳选择。学习有俩种，一种是学习 AI 基础技术、NPL、音视频识别等；还有就是应用层学习。如果之前不是做 AI 的，我更建议后者，\",\"现在各大公司都在做 AI，做底层架构。因为谁都知道，谁掌握的基座、谁就是王，像微软的 windows，全球都在用。我们作为一个普通个体，做应用层是很好的选择，做应用层就是将使用门栏降到最低，就像吃饭不用动手、张嘴就行。\",\"很多东西不用做太大，因为我自己做技术自媒体这么久，认识很多创业或者想创业或者做一些事情的朋友很多都有一个问题、包括之前的我，都想把一个东西做的很大，上来就想着要服务几万、几十万用户。目标要有，脚下的路才是最重要的。\",\"介绍一个例子，这人也是做软件行业的，20 年开始逐步转行做自媒体、包括教学等，他一年只服务 200 人，目前一年纯收入 100w+。这个是完全有帐可算，比如：100 个学员学编程，每人 5000， 5000 * 100，这是只是其中一个业务。说这个事我只是想说，服务号一小个群体，就足以获得可观的收入。\",\"当然了，这里边还有其他要解决事、和决策。但是，主要敢于出发，我相信就有收获。\",\"职业生涯规划\",\"不知不觉程序员这个头衔我已经多年，很有幸进入这个领域、加入这个群体。说说我对这个职业的看法。\",\"首选，它对于像我这样非常普通家庭的孩子来说，是一个很好的高薪职业，而且是相对稳定的、还有一点是对学历要求也不高。综合这几点，也算是一个能吃苦就能赚钱的工作。\",\"像网上所说，学好数学、学好英语，我认为这些是景上添花，让你更上一层的 buffer，不是必要项。这里不是说你别学数学英语，如果你想学编程，就勇敢去学，办法有很多、只要肯攀登。\",\"其次，在 AI 发展的今天，及机器人等前沿科技的发展，就拥有大量的机会。如果会一些计算机技术，你就有很大的优势领先于你身边的人。因为在技术发展早期是没有那么多低门槛的使用方式的，比如 AI 作图，在刚开始使用时，你起码要懂 Git 和 python 吧。\",\"职场\",\"今年是我在职场中学到生存指南最多的一年，也深入结识了几位不错的同事。职场这个话题等我消化消化，将我看到的故事分享出来，这里就不写了。\"]},\"264\":{\"h\":\"副业\",\"t\":[\"副业以前是一个小众的话题，做的人更是凤毛棱角。到今天，这已经是一个人人都要面对的话题。总结 2024 谈谈我做的事。\",\"短视频的机会\",\"#JavaPub 的老朋友都知道，我从 2022 年开始录制了第一个短视频，当时正在发生口罩事件、ChatGPT 也暂露头角，被非技术人所知道。\",\"JavaPub的视频\",\"我也乘着这波风口，视频有了不错播放量。就算在视频画质不高、场景杂乱、台词也一般的情况下。这个播放量对当时的我来说非常珍贵。在当时一个素人号，普通人的视频也才只有 50 个播放量。\",\"做一件事时，正反馈非常重要，是支持你做下去的重要一点，这也是人性的特点。总的来说，踩到了一点风口，从中收到了一点回报，对这个行业也有了自己的认识。\",\"如果你也打算做这件事，你可能会有这几个顾虑：\",\"不好意思露脸，万一被亲人、同事朋友看到\",\"讲错这么办，会不会被喷\",\"一个视频做了个 3 个小时，每天时间不够用\",\"用心做的视频，就 20 个播放量，要不要继续坚持\",\"搜 javapub，我们一起探讨、告诉你我是如何解决的\",\"...\",\"时间到了 2025，短视频的玩法也在变化，之前的蓝海，便宜的流量、大增量用户的时代已经接近尾声。赚流量的场景也不是白捡，如果你经常刷短视频，应该能看到现在大多的视频质量和之前完全不一样。\",\"多数人现在都将视频平台作为一个营销窗口，对外获取线索，来给自己的产业赋能。比如前东家，今年很火的周鸿祎 360 周总。\",\"再回到我们自己做短视频，竞争激烈不代表挣不到钱、哪怕是流量的钱。作为副业，我投入时间和自己知识就可以博取这个收益，性价比完全划得来，对我来说值博率很高。\",\"在这个充满变数的时代，也充满更多的机会。\"]},\"265\":{\"h\":\"生活\",\"t\":[\"婚姻\",\"加了我个人微信的朋友都知道，我在 2023 年底结婚了，前几天刚过了新婚一周年。娶了我在学生时代的女朋友，我们俩非常了解彼此。这一点对于我非常重要。\",\"如果你已经结婚，维护好夫妻关系是最重要的、不是之一。\"]},\"266\":{\"h\":\"总结\",\"t\":[\"今年共发了 66 个视频，文章 152 篇。\"]},\"267\":{\"h\":\"2025\",\"t\":[\"🚩Flag\",\"带 100 个学员学习编程\",\"蝴蝶号到金标\",\"三套优质实战课程\"]},\"268\":{\"h\":\"我的人生\"},\"269\":{\"h\":\"网站更新记录\"},\"270\":{\"h\":\"网站更新时间线\",\"t\":[\"更新时间轴\",\"下面是站长的唠叨。\",\"JavaPub 最早诞生于 2019 年。我当时即将大学毕业，在一家大型安全公司实习。那时几个同学一块在那里实习，基本每天大家都晚上 10 点以后回家（因为公司十点以后走，第二天可以晚半小时来，还提供免费的面包和桶面😄）。那个阶段是毕业后成长非常快的，工作一年起码顶俩年。也就是在这个时间诞生了 JavaPub 。\",\"当时用了好几个夜晚来做起名、设计 logo ，感觉一个小宇宙即将爆发。但是，努力是反人性的，更新了一段时间，新鲜感过去后，停滞了很久很久。\",\"其实在这之前， 2017 年，我就尝试过搞自媒体，当时叫 【木须先生】 。这个账号的定位是写软文，也就是一些正能量的综合性文章，像社会、生活类的。当然也流产了。\"]},\"271\":{\"h\":\"历史图片\",\"t\":[\"保存历史图片，万一以后成为百万博主，也能拿出去吹。\",\"历史网站截图： \"]},\"272\":{\"c\":[\"网站\"]},\"273\":{\"c\":[\"网站\"]},\"274\":{\"h\":\"langchain\"},\"275\":{\"c\":[\"langchain\",\"ai\"]},\"276\":{\"c\":[\"langchain\",\"ai\"]},\"277\":{\"h\":\"LangChain\",\"t\":[\"TODO\",\"参考：\",\"https://python.langchain.com/v0.2/docs/introduction/\",\"https://blog.csdn.net/qq_35812205/article/details/131709720\"]},\"278\":{\"c\":[\"langchain\",\"ai\"]},\"279\":{\"c\":[\"langchain\",\"ai\",\"chatgpt\"]},\"280\":{\"h\":\"lm_studio\"},\"281\":{\"c\":[\"lm_studio\",\"ai\"]},\"282\":{\"c\":[\"lm_studio\",\"ai\"]},\"283\":{\"h\":\"LM Studio\",\"t\":[\"TODO\",\"参考：\",\"https://www.huwangyun.cn/blog/ollama-vs-lm-studio\"]},\"284\":{\"c\":[\"LMStudio\",\"ai\"]},\"285\":{\"c\":[\"LMStudio\",\"ai\",\"chatgpt\"]},\"286\":{\"h\":\"ollama\",\"t\":[\"ollama 使用\",\"参考：\",\"支持模型列表： https://ollama.com/library\",\"ollama官网： https://ollama.com\"]},\"287\":{\"c\":[\"ollama\",\"ai\"]},\"288\":{\"c\":[\"ollama\",\"ai\"]},\"289\":{\"h\":\"ollama本地调用大模型\",\"t\":[\"大语言模型，ollama轻松打造本地LLM应用 普通人如何快速搭建本地大语言模型\",\"视频 | 官网 | GitHub\",\"建议环境&配置 大于 4c8g\"]},\"290\":{\"h\":\"认识 ollama\",\"t\":[\"Ollama 是一个开源大语言模型工具，帮助用户快速在本地搭建运行大模型。支持一系列著名的模型。如Llama2、Mistral、Gemma，极大的简化了安装和配置的细节。\"]},\"291\":{\"h\":\"搭建\",\"t\":[\"根据不同操作系统，选择对应的安装包进行安装： https://ollama.com/download\"]},\"292\":{\"h\":\"Linux 为例\",\"t\":[\"一键安装\",\"curl -fsSL https://ollama.com/install.sh | sh\",\"加载 llama3 模型\",\"ollama run llama3\",\"查询模型安装是否成功\",\"ollama list\"]},\"293\":{\"h\":\"测试\",\"t\":[\"ollama 默认启动的端口是：11434\",\"curl http://127.0.0.1:11434/ # Ollama is running\"]},\"294\":{\"h\":\"调用llama3试用\",\"t\":[\"测试响应\",\"curl http://localhost:11434/api/generate -d '{ \\\"model\\\": \\\"llama3\\\", \\\"prompt\\\":\\\"你知道 JavaPub 吗？\\\" }'\",\"与模型对话\",\"curl http://localhost:11434/api/chat -d '{ \\\"model\\\": \\\"llama3\\\", \\\"messages\\\": [ { \\\"role\\\": \\\"user\\\", \\\"content\\\": \\\"你知道 JavaPub 吗？\\\" } ] }'\"]},\"295\":{\"h\":\"前言\",\"t\":[\"首先安装 docker\"]},\"296\":{\"h\":\"搭建\",\"t\":[\"推荐使用: https://github.com/open-webui/open-webui\",\"ollama 我已经单独安装，现在只需要安装 webui。\",\"docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main\",\"默认端口是 3000，http://127.0.0.1:3000\",\"image-\",\"第一次进来没有账户，点击 Create 创建，第一个新创建的账户拥有管理员权限。\",\"接下来登陆进来，就可以使用了。\",\"image\",\"[x] 搭建 llama3 模型，并调用成功 [ ] 整合 go 语言，实现 api 调用 - 接口调用成功了，http 请求先不展示了 [ ] 流式回复\",\"以 llama3 为例： https://ollama.com/library/llama3\",\"参考：\",\"https://zhuanlan.zhihu.com/p/694843237\",\"https://blog.csdn.net/tirestay/article/details/139744309\",\"https://blog.csdn.net/qq_40999403/article/details/139320266\",\"视频参考： https://www.bilibili.com/video/av1903594994/?vd_source=f2a0231e07e27f42fa11f05024479cb8\"]},\"297\":{\"h\":\"附录\",\"t\":[\"支持模型列表： https://ollama.com/library\",\"中文参考文档： https://ollama.fan/reference/api/#generate-a-completion-request-streaming\",\"webui: https://github.com/open-webui/open-webui\",\"原文： https://javapub.net.cn/posts/ai/\"]},\"298\":{\"c\":[\"ollama\",\"ai\"]},\"299\":{\"c\":[\"ollama\",\"ai\",\"llama3\",\"chatgpt\"]},\"300\":{\"h\":\"算法\"},\"301\":{\"c\":[\"算法\"]},\"302\":{\"c\":[\"算法\"]},\"303\":{\"h\":\"两个不含 0 的整数，乘积是 10,000,000！\",\"t\":[\"两个不含 0 的整数，乘积竟是 10,000,000！\",\"在数学的世界里，总是充满了惊喜和挑战。今天，我们要探索的是一个看似简单，实则蕴含着深刻数学原理的问题：两个不含数字0的整数，它们的乘积竟然等于 10,000,000 。这听起来似乎不太可能，但数学的魅力就在于它总能以意想不到的方式展现其美丽。\"]},\"304\":{\"h\":\"问题的由来\",\"t\":[\"这个问题源自于一个数学谜题，它要求我们找到两个特殊的整数。这两个整数不仅需要满足乘积为 10,000,000 的条件，而且它们的每一位数字都不能是0。这无疑增加了问题的难度，因为我们需要在有限的数字中寻找可能的组合。\"]},\"305\":{\"h\":\"数学的力量\",\"t\":[\"数学的力量在于它能够将看似不可能的事情变为可能。在这个问题中，我们首先需要将 10,000,000 分解为其质因数。10,000,000 是一个完全由 2 和 5 的幂次方构成的数，即：\",\"10,000,000 = 10^7 = (2 * 5)^7 = 2^7 * 5^7\",\"质因数分解法\"]},\"306\":{\"h\":\"验证结果\",\"t\":[\"在找到可能的解决方案后，我们需要验证它们是否正确。通过简单的乘法运算，我们可以确认 128 乘以 78125 确实等于 10,000,000。这验证了我们的解决方案是正确的。\",\"第一个整数：包含所有的 2 的因子，也就是 (2^7)\",\"第二个整数：包含所有的 5 的因子，也就是 (5^7)\",\"这样，我们得到两个整数：\",\"2^7 = 128\",\"5^7 = 78125\",\"def is_valid_number(number): \\\"\\\"\\\" 检查一个整数是否包含数字0。 :param number: 要检查的整数。 :return: 如果整数不包含0，则返回True，否则返回False。 \\\"\\\"\\\" return '0' not in str(number) def prime_factors(n): \\\"\\\"\\\" 对一个整数进行质因数分解。 :param n: 要分解的整数。 :return: 一个字典，键是质因数，值是对应的指数。 \\\"\\\"\\\" factors = {} # 2的因子 while n % 2 == 0: factors[2] = factors.get(2, 0) + 1 n //= 2 # 奇数因子 for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: factors[i] = factors.get(i, 0) + 1 n //= i # 如果n是一个质数 if n > 2: factors[n] = factors.get(n, 0) + 1 return factors def find_multipliers(target_product): \\\"\\\"\\\" 使用质因数分解法找到两个不包含数字0的整数，它们的乘积等于目标乘积。 :param target_product: 目标乘积。 :return: 两个整数的元组，如果找不到则返回None。 \\\"\\\"\\\" factors = prime_factors(target_product) num1, num2 = 1, 1 for factor, power in factors.items(): # 尝试分配质因数以避免产生数字0 if factor == 2 and power >= 4: # 2的四次方是16，会产生数字0 # 将2的因子分配给两个数，避免产生0 num1 *= factor ** (power // 2) num2 *= factor ** (power // 2) if power % 2 == 1: num1 *= factor elif factor == 5 and power >= 3: # 5的三次方是125，会产生数字0 # 将5的因子分配给两个数，避免产生0 num1 *= factor ** (power // 2) num2 *= factor ** (power // 2) if power % 2 == 1: num1 *= factor else: # 直接分配给其中一个数 num1 *= factor ** power # 检查结果是否有效 if is_valid_number(num1) and is_valid_number(num2): return num1, num2 return None def main(): \\\"\\\"\\\" 主函数，设置目标乘积并调用函数寻找乘数，然后输出结果。 \\\"\\\"\\\" target_product = 10000000 # 目标乘积 multipliers = find_multipliers(target_product) # 寻找乘数 if multipliers: print(f\\\"找到了两个整数：{multipliers[0]} 和 {multipliers[1]}，它们的乘积是 {target_product}。\\\") else: print(f\\\"没有找到两个不包含数字0的整数，它们的乘积是 {target_product}。\\\") if __name__ == \\\"__main__\\\": main()\"]},\"307\":{\"h\":\"数学之美\",\"t\":[\"这个问题不仅展示了数学的逻辑性和精确性，还展示了它的创造性和美感。在数学的世界里，每一个问题都像是一块拼图，等待着我们去发现和拼凑。通过解决这个问题，我们不仅锻炼了我们的逻辑思维能力，还体验到了数学的无穷魅力。\"]},\"308\":{\"h\":\"最后\",\"t\":[\"数学是一门充满挑战和乐趣的学科。它不仅仅是关于数字和公式，更是关于探索和发现。通过解决这个问题，我们不仅找到了两个特殊的整数，还体验到了数学的美妙和力量。让我们继续在数学的世界里探索，发现更多的奇迹和奥秘。\",\"数学作为一门极具魅力的学科，希望你喜欢这篇有趣的数学小文章。\"]},\"309\":{\"c\":[\"算法\"]},\"310\":{\"c\":[\"算法\",\"数学题\"]},\"311\":{\"h\":\"数据结构\"},\"312\":{\"c\":[\"数据结构\"]},\"313\":{\"c\":[\"数据结构\"]},\"314\":{\"h\":\"B树和B+树区别\",\"t\":[\"[toc]\"]},\"315\":{\"h\":\"写在前面\",\"t\":[\"大家在面试的时候，肯定都会被问到MySql的知识，以下是面试场景： B树 和B+树是 MySQL索引使用的数据结构，对于索引优化和原理理解都非常重要，下面我的写文章就是要把B树，B+树的神秘面纱揭开，让大家在面试的时候碰到这个知识点一往无前，不再成为你的知识盲点！\"]},\"316\":{\"h\":\"1、B树\",\"t\":[\"这里的 B 是 Balance（平衡）的缩写。它是一种多路的平衡搜索树。\",\"它跟普通的平衡二叉树的不同是，B树的每个节点可以存储多个数据，而且每个节点不止有两个子节点，最多可以有上千个子节点。\",\"B树中每个节点都存放着索引和数据，数据遍布整个树结构，搜索可能在非叶子节点结束，最好的情况是O(1)。\",\"一般一棵 B 树的高度在 3 层左右，3 层就可满足 百万级别的数据量\",\"在这里插入图片描述\",\"B树 每个节点都存储了一定的范围区间，区间更多的情况下，搜索也就更快。\",\"比如普通的二叉树对于 1~ 100 的索引值，首先分为 1~ 50 和51~ 100 两部分。\",\"而 B树可以分为四个区间 1~ 25, 26~ 50, 51~ 75, 76~ 100 。甚至可以划分为更多区间，这样一次就能排除四分之三的数据\"]},\"317\":{\"h\":\"2、B+树\",\"t\":[\"B+树是B树的一种变种，它与 B树 的 区别 是：\",\"叶子节点保存了完整的索引和数据，而非叶子节点只保存索引值，因此它的查询时间固定为 log(n).\",\"叶子节点中有指向下一个叶子节点的指针，叶子节点类似于一个单链表\",\"正因为叶子节点保存了完整的数据以及有指针作为连接，B+树可以增加了区间访问性，提高了范围查询，而B树的范围查询相对较差\",\"B+树更适合外部存储。因为它的非叶子节点不存储数据，只保存索引。\",\"B+树的示意图如下：\",\"在这里插入图片描述\",\"到此为止相信你已经对B树和B+树有一定认识，下面结合数据库深入了解\"]},\"318\":{\"h\":\"B树\",\"t\":[\"B-树有如下特点:\",\"所有键值分布在整颗树中（索引值和具体data都在每个节点里）；\",\"任何一个关键字出现且只出现在一个结点中；\",\"搜索有可能在非叶子结点结束（最好情况O(1)就能找到数据）；\",\"在关键字全集内做一次查找,性能逼近二分查找；\"]},\"319\":{\"h\":\"B树深入\",\"t\":[\"B树由来\",\"定义：B-树是一类树，包括B-树、B+树、B*树等，是一棵自平衡的搜索树，它类似普通的平衡二叉树，不同的一点是B-树允许每个节点有更多的子节点。 B-树是专门为外部存储器设计的，如磁盘，它对于读取和写入大块数据有良好的性能，所以一般被用在文件系统及数据库中。\",\"定义只需要知道B-树允许每个节点有更多的子节点即可（多叉树）。子节点数量一般在上千，具体数量依赖外部存储器的特性。\",\"先来看看为什么会出现B-树这类数据结构。\",\"传统用来搜索的平衡二叉树有很多，如 AVL 树，红黑树等。这些树在一般情况下查询性能非常好，但当数据非常大的时候它们就无能为力了。原因当数据量非常大时，内存不够用，大部分数据只能存放在磁盘上，只有需要的数据才加载到内存中。一般而言内存访问的时间约为 50 ns，而磁盘在 10 ms 左右。速度相差了近 5 个数量级，磁盘读取时间远远超过了数据在内存中比较的时间。这说明程序大部分时间会阻塞在磁盘 IO 上。那么我们如何提高程序性能？减少磁盘 IO 次数，像 AVL 树，红黑树这类平衡二叉树从设计上无法“迎合”磁盘。\",\" 上图是一颗简单的平衡二叉树，平衡二叉树是通过旋转来保持平衡的，而旋转是对整棵树的操作，若部分加载到内存中则无法完成旋转操作。其次平衡二叉树的高度相对较大为 log n（底数为2），这样逻辑上很近的节点实际可能非常远，无法很好的利用磁盘预读（局部性原理)，所以这类平衡二叉树在数据库和文件系统上的选择就被 pass 了。\",\"空间局部性原理：如果一个存储器的某个位置被访问，那么将它附近的位置也会被访问。\",\"我们从“迎合”磁盘的角度来看看B-树的设计。\",\"索引的效率依赖与磁盘 IO 的次数，快速索引需要有效的减少磁盘 IO 次数，如何快速索引呢？索引的原理其实是不断的缩小查找范围，就如我们平时用字典查单词一样，先找首字母缩小范围，再第二个字母等等。平衡二叉树是每次将范围分割为两个区间。为了更快，B-树每次将范围分割为多个区间，区间越多，定位数据越快越精确。那么如果节点为区间范围，每个节点就较大了。所以新建节点时，直接申请页大小的空间（磁盘存储单位是按 block 分的，一般为 512 Byte。磁盘 IO 一次读取若干个 block，我们称为一页，具体大小和操作系统有关，一般为 4 k，8 k或 16 k），计算机内存分配是按页对齐的，这样就实现了一个节点只需要一次 IO。\",\" 上图是一棵简化的B-树，多叉的好处非常明显，有效的降低了B-树的高度，为底数很大的 log n，底数大小与节点的子节点数目有关，一般一棵B-树的高度在 3 层左右。层数低，每个节点区确定的范围更精确，范围缩小的速度越快（比二叉树深层次的搜索肯定快很多）。上面说了一个节点需要进行一次 IO，那么总 IO 的次数就缩减为了 log n 次。B-树的每个节点是 n 个有序的序列(a1,a2,a3…an)，并将该节点的子节点分割成 n+1 个区间来进行索引(X1< a1, a2 < X2 < a3, … , an+1 < Xn < anXn+1 > an)。\",\"点评：B树的每个节点，都是存多个值的，不像二叉树那样，一个节点就一个值，B树把每个节点都给了一点的范围区间，区间更多的情况下，搜索也就更快了，比如：有1-100个数，二叉树一次只能分两个范围，0-50和51-100，而B树，分成4个范围 1-25， 25-50，51-75，76-100一次就能筛选走四分之三的数据。所以作为多叉树的B树是更快的\"]},\"320\":{\"h\":\"B-树的查找\",\"t\":[\"我们来看看B-树的查找，假设每个节点有 n 个 key值，被分割为 n+1 个区间，注意，每个 key 值紧跟着 data 域，这说明B-树的 key 和 data 是聚合在一起的。一般而言，根节点都在内存中，B-树以每个节点为一次磁盘 IO，比如上图中，若搜索 key 为 25 节点的 data，首先在根节点进行二分查找（因为 keys 有序，二分最快），判断 key 25 小于 key 50，所以定位到最左侧的节点，此时进行一次磁盘 IO，将该节点从磁盘读入内存，接着继续进行上述过程，直到找到该 key 为止。\",\"Data* BTreeSearch(Root *node, Key key) { Data* data; if(root == NULL) return NULL; data = BinarySearch(node); if(data->key == key) { return data; }else{ node = ReadDisk(data->next); BTreeSearch(node, key); } }\"]},\"321\":{\"h\":\"B+ 树\"},\"322\":{\"h\":\"B+树概述\",\"t\":[\"B+树是B-树的变体，也是一种多路搜索树, 它与 B- 树的不同之处在于:\",\"所有关键字存储在叶子节点出现,内部节点(非叶子节点并不存储真正的 data)\",\"为所有叶子结点增加了一个链指针\",\"简化 B+树 如下图\",\"因为内节点并不存储 data，所以一般B+树的叶节点和内节点大小不同，而B-树的每个节点大小一般是相同的，为一页。\",\"为了增加 区间访问性，一般会对B+树做一些优化。 如下图带顺序访问的B+树。\",\"在这里插入图片描述\"]},\"323\":{\"h\":\"B-树和B+树的区别\",\"t\":[\"1.B+树内节点不存储数据，所有 data 存储在叶节点导致查询时间复杂度固定为 log n。而B-树查询时间复杂度不固定，与 key 在树中的位置有关，最好为O(1)。\",\"如下所示B-树/B+树查询节点 key 为 50 的 data。\",\"B-树：\",\" 从上图可以看出，key 为 50 的节点就在第一层，B-树只需要一次磁盘 IO 即可完成查找。所以说B-树的查询最好时间复杂度是 O(1)。\",\"B+树：\",\"由于B+树所有的 data 域都在根节点，所以查询 key 为 50的节点必须从根节点索引到叶节点，时间复杂度固定为 O(log n)。\",\"点评：B树的由于每个节点都有key和data，所以查询的时候可能不需要O(logn)的复杂度，甚至最好的情况是O(1)就可以找到数据，而B+树由于只有叶子节点保存了data，所以必须经历O(logn)复杂度才能找到数据\",\"2. B+树叶节点两两相连可大大增加区间访问性，可使用在范围查询等，而B-树每个节点 key 和 data 在一起，则无法区间查找。\",\" 根据空间局部性原理：如果一个存储器的某个位置被访问，那么将它附近的位置也会被访问。\",\"B+树可以很好的利用局部性原理，若我们访问节点 key为 50，则 key 为 55、60、62 的节点将来也可能被访问，我们可以利用磁盘预读原理提前将这些数据读入内存，减少了磁盘 IO 的次数。 当然B+树也能够很好的完成范围查询。比如查询 key 值在 50-70 之间的节点。\",\"点评：由于B+树的叶子节点的数据都是使用链表连接起来的，而且他们在磁盘里是顺序存储的，所以当读到某个值的时候，磁盘预读原理就会提前把这些数据都读进内存，使得范围查询和排序都很快\",\"3.B+树更适合外部存储。由于内节点无 data 域，每个节点能索引的范围更大更精确\",\"这个很好理解，由于B-树节点内部每个 key 都带着 data 域，而B+树节点只存储 key 的副本，真实的 key 和 data 域都在叶子节点存储。前面说过磁盘是分 block 的，一次磁盘 IO 会读取若干个 block，具体和操作系统有关，那么由于磁盘 IO 数据大小是固定的，在一次 IO 中，单个元素越小，量就越大。这就意味着B+树单次磁盘 IO 的信息量大于B-树，从这点来看B+树相对B-树磁盘 IO 次数少。\",\"点评：由于B树的节点都存了key和data，而B+树只有叶子节点存data，非叶子节点都只是索引值，没有实际的数据，这就时B+树在一次IO里面，能读出的索引值更多。从而减少查询时候需要的IO次数！\",\" 从上图可以看出相同大小的区域，B-树仅有 2 个 key，而B+树有 3 个 key。\"]},\"324\":{\"h\":\"拓展：MySQL为什么使用B-Tree（B+Tree）&& 存储知识\",\"t\":[\"上文说过，红黑树等数据结构也可以用来实现索引，但是文件系统及数据库系统普遍采用B-/+Tree作为索引结构，这一节将结合计算机组成原理相关知识讨论B-/+Tree作为索引的理论基础。\",\"一般来说，索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上。这样的话，索引查找过程中就要产生磁盘I/O消耗，相对于内存存取，I/O存取的消耗要高几个数量级，所以评价一个数据结构作为索引的优劣最重要的指标就是在查找过程中磁盘I/O操作次数的渐进复杂度。换句话说，索引的结构组织要尽量减少查找过程中磁盘I/O的存取次数。下面先介绍内存和磁盘存取原理，然后再结合这些原理分析B-/+Tree作为索引的效率。\"]},\"325\":{\"h\":\"存储数据最小单元\",\"t\":[\"我们都知道计算机在存储数据的时候，有最小存储单元，这就好比我们今天进行现金的流通最小单位是一毛。\",\"在计算机中磁盘存储数据最小单元是扇区，一个扇区的大小是512字节，而文件系统（例如XFS/EXT4）他的最小单元是块，一个块的大小是4k\",\"而对于我们的InnoDB存储引擎也有自己的最小储存单元——页（Page），一个页的大小是16K。\",\"下面几张图可以帮你理解最小存储单元：\",\"文件系统中一个文件大小只有1个字节，但不得不占磁盘上4KB的空间。\",\"磁盘扇区、文件系统、InnoDB存储引擎都有各自的最小存储单元。\",\" 在MySQL中我们的InnoDB页的大小默认是16k，当然也可以通过参数设置：\",\" 数据表中的数据都是存储在页中的，所以一个页中能存储多少行数据呢？假设一行数据的大小是1k，那么一个页可以存放16行这样的数据。\"]},\"326\":{\"h\":\"主存存取原理\",\"t\":[\"目前计算机使用的主存基本都是随机读写存储器（RAM），现代RAM的结构和存取原理比较复杂，这里本文抛却具体差别，抽象出一个十分简单的存取模型来说明RAM的工作原理。\",\" 从抽象角度看，主存是一系列的存储单元组成的矩阵，每个存储单元存储固定大小的数据。每个存储单元有唯一的地址，现代主存的编址规则比较复杂，这里将其简化成一个二维地址：通过一个行地址和一个列地址可以唯一定位到一个存储单元。图5展示了一个4 x 4的主存模型。\",\"主存的存取过程如下：\",\"当系统需要读取主存时，则将地址信号放到地址总线上传给主存，主存读到地址信号后，解析信号并定位到指定存储单元，然后将此存储单元数据放到数据总线上，供其它部件读取。\",\"写主存的过程类似，系统将要写入单元地址和数据分别放在地址总线和数据总线上，主存读取两个总线的内容，做相应的写操作。\",\"这里可以看出，主存存取的时间仅与存取次数呈线性关系，因为不存在机械操作，两次存取的数据的“距离”不会对时间有任何影响，例如，先取A0再取A1和先取A0再取D3的时间消耗是一样的。\"]},\"327\":{\"h\":\"磁盘存取原理\",\"t\":[\"上文说过，索引一般以文件形式存储在磁盘上，索引检索需要磁盘I/O操作。与主存不同，磁盘I/O存在机械运动耗费，因此磁盘I/O的时间消耗是巨大的。\",\"图6是磁盘的整体结构示意图。\",\"一个磁盘由大小相同且同轴的圆形盘片组成，磁盘可以转动（各个磁盘必须同步转动）。在磁盘的一侧有磁头支架，磁头支架固定了一组磁头，每个磁头负责存取一个磁盘的内容。磁头不能转动，但是可以沿磁盘半径方向运动（实际是斜切向运动），每个磁头同一时刻也必须是同轴的，即从正上方向下看，所有磁头任何时候都是重叠的（不过目前已经有多磁头独立技术，可不受此限制）。\",\"图7是磁盘结构的示意图。\",\" 盘片被划分成一系列同心环，圆心是盘片中心，每个同心环叫做一个磁道，所有半径相同的磁道组成一个柱面。磁道被沿半径线划分成一个个小的段，每个段叫做一个扇区，每个扇区是磁盘的最小存储单元。为了简单起见，我们下面假设磁盘只有一个盘片和一个磁头。\",\"当需要从磁盘读取数据时，系统会将数据逻辑地址传给磁盘，磁盘的控制电路按照寻址逻辑将逻辑地址翻译成物理地址，即确定要读的数据在哪个磁道，哪个扇区。为了读取这个扇区的数据，需要将磁头放到这个扇区上方，为了实现这一点，磁头需要移动对准相应磁道，这个过程叫做寻道，所耗费时间叫做寻道时间，然后磁盘旋转将目标扇区旋转到磁头下，这个过程耗费的时间叫做旋转时间。\",\"局部性原理与磁盘预读\",\"由于存储介质的特性，磁盘本身存取就比主存慢很多，再加上机械运动耗费，磁盘的存取速度往往是主存的几百分分之一，因此为了提高效率，要尽量减少磁盘I/O。为了达到这个目的，磁盘往往不是严格按需读取，而是每次都会预读，即使只需要一个字节，磁盘也会从这个位置开始，顺序向后读取一定长度的数据放入内存。这样做的理论依据是计算机科学中著名的局部性原理：\",\"当一个数据被用到时，其附近的数据也通常会马上被使用。\",\"程序运行期间所需要的数据通常比较集中。\",\"由于磁盘顺序读取的效率很高（不需要寻道时间，只需很少的旋转时间），因此对于具有局部性的程序来说，预读可以提高I/O效率。\",\"预读的长度一般为页（page）的整倍数。页是计算机管理存储器的逻辑块，硬件及操作系统往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页（在许多操作系统中，页得大小通常为4k），主存和磁盘以页为单位交换数据。当程序要读取的数据不在主存中时，会触发一个缺页异常，此时系统会向磁盘发出读盘信号，磁盘会找到数据的起始位置并向后连续读取一页或几页载入内存中，然后异常返回，程序继续运行。\",\"所以IO一次就是读一页的大小\"]},\"328\":{\"h\":\"总结\",\"t\":[\"MySQL的B树和B+树原理就说到这里了。\",\"我是JavaPub，下期见\",\"参考：https://blog.csdn.net/qq_40374604/article/details/120284492\"]},\"329\":{\"c\":[\"B树\",\"B+树\"]},\"330\":{\"h\":\"学习基础数据结构\",\"t\":[\"阅读大概需要10分钟，基础知识资料较长，建议收藏阅读\",\"[toc]\"]},\"331\":{\"h\":\"数据结构和算法的基本概念\"},\"332\":{\"h\":\"数据、数据元素、数据逻辑结构、数据存储结构、数据类型、抽象数据类型等\"},\"333\":{\"h\":\"算法、算法设计的要求、算法效率的度量、算法存储空间的需求等\"},\"334\":{\"h\":\"线性数据结构\"},\"335\":{\"h\":\"栈、队列和线性表的定义和基本概念\",\"t\":[\"线性表\",\"Java里一个很重要的数据结构——线性表，线性表里的元素是按线性排列的（这里的线性指逻辑上的），线性表分为两大类，分别是顺序表和链表。\",\"栈\",\"栈是一种采用“后进先出”策略的数据结构类型。其本质意义也是线性表的一种，不过是一种特殊的线性表。栈顶记做，top，栈底记做，bottom。\",\"栈有一个非常非常重要的一个特点：只允许在栈顶进行数据元素的插入或删除操作。根据这一特点我们可知，栈基本上只有两种操作，一是插入操作，另一个是删除操作。栈的插入操作也称为：进栈，压栈，入栈。栈的删除操作也称为，出栈，弹栈。英文记做，push(压栈),pop(弹栈)。“后进先出”策略英文记为，“LIFO”，Last In First Out。\",\"队列\",\"队列是一种特殊的线性表，它只允许在表的前端进行删除操作，而在表的后端进行插入操作。支持先进先出 FIFO，跟我们生活中的排队类似。\"]},\"336\":{\"h\":\"栈、队列和线性表的实现，包括顺序和链式存储结构\"},\"337\":{\"h\":\"线性表\",\"t\":[\"线性表有两种实现方式，顺序存储和链式存储。\",\"顺序存储结构是元素在存储器中的相对位置来表示数据元素之间的逻辑关系。\",\"链式存储结构是依靠指针(Java中引用)来表现数据元素之间的逻辑关系。\",\"API:\",\"public interface List<E> { /** * 清空线性表 */ void clean(); /** * 判断线性表是否为空 * * @return true:空，false:非空 */ boolean isEmpty(); /** * 获取线性表的元素个数 * * @return 线性表的元素个数 */ int length(); /** * 添加元素 * * @param elem 添加元素 */ void addElem(E elem); /** * 添加线性表 * * @param list 待添加的线性表 */ void addAll(List<? extends E> list); /** * 指定位置插入元素 * * 1.将插入位置index的元素和之后的元素往后移动一位 * 2.将位置index的元素赋值 * * @param index 插入位置 * @param elem 插入元素 */ void insertElem(int index, E elem); /** * 替换元素 * * @param target 被替换元素 * @param replace 替换元素 * @return 替换的元素个数 */ int replace(E target, E replace); /** * 获取指定位置的元素 * * @param index 查找位置 * @return 位置对应的元素 */ E indexOf(int index); /** * 查找指定元素的位置 * * @param elem 待查找元素 * @return 第一次查找到元素的位置 */ int locateElem(E elem); /** * 获取指定元素的所有位置 * * @param elem 待查找元素 * @return 查找元素的所有位置 */ List<Integer> locateElements(E elem); /** * 批量删除元素 * * @param elem 待删除的元素 * @return 删除元素的位置 */ int removeElements(E elem); /** * 删除指定位置的元素 * 将index之后的元素往前面移动一位 * * @param index 删除的位置 * @return 删除位置的元素 */ E removeElem(int index); /** * 转化为数组 * @return 返回数组 */ Object[] toArray(); }\"]},\"338\":{\"h\":\"顺序存储实现（例如ArrayList）\",\"t\":[\"public class ArrayList<E> implements List<E> { //默认存储容器大小 private int defaultCapacity = 10; //存储容器 private Object[] elemData; //元素个数 private int size; /** * 初始化存储容器 */ public ArrayList() { elemData = new Object[defaultCapacity]; } /** * 初始化存储容器并且添加元素 * * @param initialList 待添加的线性表 */ public ArrayList(List<? extends E> initialList) { this(); addAll(initialList); } /** * 初始化存储容器 * * @param initialCapacity 存储容器初始大小 */ public ArrayList(int initialCapacity) { elemData = new Object[initialCapacity]; } /** * 检查位置是否合法 * * @param index 待检查位置 * @throws IndexOutOfBoundsException 位置不合法异常 */ private void rangeCheck(int index) throws IndexOutOfBoundsException { if (index < 0 || index >= size) { throw new IndexOutOfBoundsException(index + \\\"超出线性表范围\\\"); } } /** * 确保容量够用 * * @param length 添加后的容量 */ private void ensureCapacity(int length) { if (length > elemData.length) { extendedCapacity(length); } } /** * 1.5倍扩容 * * @param length 至少需要的大小 * @throws OutOfMemoryError 分配内存失败 */ private void extendedCapacity(int length) throws OutOfMemoryError { int extendedLength = length; extendedLength = extendedLength + extendedLength >> 1; try { elemData = Arrays.copyOf(elemData, extendedLength); } catch (OutOfMemoryError error) { throw new OutOfMemoryError(\\\"扩容失败\\\"); } } public void clean() { elemData = new Object[defaultCapacity]; size = 0; } public boolean isEmpty() { return size == 0; } public int length() { return size; } public void addElem(E elem) { ensureCapacity(size + 1); elemData[size++] = elem; } public void addAll(List<? extends E> list) { if (list == null) { return; } ensureCapacity(list.length() + size); System.arraycopy(list.toArray(), 0, elemData, size, list.length()); size += list.length(); } public void insertElem(int index, E elem) { if (index < 0 || index > size) { throw new IndexOutOfBoundsException(index + \\\"超出线性表范围\\\"); } ensureCapacity(size + 1); System.arraycopy(elemData, index, elemData, index + 1, size++ - index); elemData[index] = elem; } public int replace(E target, E replace) { int count = 0; if (target == null) { for (int i = 0; i < size; i++) { if (elemData[i] == null) { count++; elemData[i] = replace; } } } else { for (int i = 0; i < size; i++) { if (elemData[i].equals(target)) { count++; elemData[i] = replace; } } } return count; } public E indexOf(int index) { rangeCheck(index); return (E) elemData[index]; } public int locateElem(E elem) { if (elem == null) { for (int i = 0; i < size; i++) { if (elemData[i] == null) { return i; } } } else { for (int i = 0; i < size; i++) { if (elemData[i].equals(elem)) { return i; } } } return -1; } public List<Integer> locateElements(E elem) { List<Integer> result = new ArrayList<>(); if (elem == null) { for (int i = 0; i < size; i++) { if (elemData[i] == null) { result.addElem(i); } } } else { for (int i = 0; i < size; i++) { if (elemData[i] != null && elemData[i].equals(elem)) { result.addElem(i); } } } return result; } public int removeElements(E elem) { int result = 0; List<Integer> list = locateElements(elem); for (int i = 0; i < list.length(); i++) { removeElem(list.indexOf(i) - result++); } return result; } /** * 删除元素 * 使用System.arrayCopy是调用native方法,效率会比自己写的循环高 * @param index 删除的位置 * @return 删除的元素 */ public E removeElem(int index) { E result = (E) elemData[index]; System.arraycopy(elemData, index + 1, elemData, index, size-- - index - 1); return result; } public Object[] toArray() { return Arrays.copyOf(elemData, size); } }\"]},\"339\":{\"h\":\"链式存储实现（LinkedList）（双向链表）\",\"t\":[\"删除操作：\",\"找到待删除节点delete的前一个节点prev\",\"将prev的next指针指向delete的下一个节点\",\"将delete的next指针指向null,帮助GC回收\",\"插入操作:\",\"找到待插入位置的前一个节点prev\",\"新生成一个节点add\",\"保存节点after为add的下一个节点\",\"将add节点的next指针指向after\",\"将prev节点的next指针指向add\",\"public class LinkedList<E> implements List<E> { //头结点 private Node<E> head; //元素个数 private int size; //节点元素 private class Node<E> { //节点数据 private E elem; //指向下一个元素 private Node<E> next; } public LinkedList() { head = new Node<>(); } public LinkedList(List<? extends E> list) { this(); addAll(list); } /** * 检查位置是否合法 * * @param index 待检查位置 * @throws IndexOutOfBoundsException 位置不合法异常 */ private void rangeCheck(int index) throws IndexOutOfBoundsException { if (index < 0 || index >= size) { throw new IndexOutOfBoundsException(index + \\\"超出线性表范围\\\"); } } /** * 获取指定节点的node * * @param index 索引位置 * @return 索引位置的节点 */ private Node<E> getNode(int index) { if (index == -1) { return head; } Node<E> iterator = head.next; for (int i = 0; i < index; i++) { iterator = iterator.next; } return iterator; } @Override public void clean() { head = null; size = 0; } @Override public boolean isEmpty() { return size == 0; } @Override public int length() { return size; } @Override public void addElem(E elem) { Node<E> addNode = new Node<>(); addNode.elem = elem; Node<E> iterator = head; while (iterator.next != null) { iterator = iterator.next; } iterator.next = addNode; size++; } /** * 这里没有调用addElem来添加元素 * 原因为:调用addElem添加的时间复杂度为o(n²) * 使用以下方法添加的时间复杂度为o(n) * 当然你也可以再添加一个尾节点指针 * * @param list 待添加的线性表 */ @Override public void addAll(List<? extends E> list) { if (list == null || list.length() == 0) { return; } Node<E> iterator = head; //时间复杂度O(n) while (iterator.next != null) { iterator = iterator.next; } Node<E> addNodeHeader = new Node<>(); Node<E> addNodeIterator = addNodeHeader; //时间复杂度O(n) E[] addElements = (E[]) list.toArray(); //时间复杂度O(n) for (int i = 0; i < addElements.length; i++) { Node<E> node = new Node<>(); node.elem = addElements[i]; addNodeIterator.next = node; addNodeIterator = node; } iterator.next = addNodeHeader.next; //断开连接,帮助GC回收 addNodeHeader.next = null; } @Override public void insertElem(int index, E elem) { if (index < 0 || index > size) { throw new IndexOutOfBoundsException(index + \\\"位置不合法\\\"); } Node<E> prev = getNode(index - 1); Node<E> addNode = new Node<>(); addNode.elem = elem; addNode.next = prev.next; prev.next = addNode; size++; } @Override public int replace(E target, E replace) { Node<E> iterator = head.next; int result = 0; if (target == null) { while (iterator != null) { if (iterator.elem == null) { iterator.elem = replace; result++; } iterator = iterator.next; } } else { while (iterator != null) { if (iterator.elem != null && iterator.elem.equals(target)) { iterator.elem = replace; result++; } iterator = iterator.next; } } return result; } @Override public E indexOf(int index) { rangeCheck(index); //通过上次校验，肯定含有此位置。所以没有按照传统的方法来写。 //传统方法可以参考子标题下面的伪代码 return getNode(index).elem; } @Override public int locateElem(E elem) { Node<E> iterator = head.next; int result = 0; if (elem == null) { while (iterator != null) { if (iterator.elem == null) return result; result++; iterator = iterator.next; } } else { while (iterator != null) { if (iterator.elem != null && iterator.elem.equals(elem)) { return result; } result++; iterator = iterator.next; } } return -1; } @Override public List<Integer> locateElements(E elem) { List<Integer> list = new ArrayList<>(); Node<E> iterator = head.next; int index = 0; if (elem == null) { while (iterator != null) { if (iterator.elem == null) { list.addElem(index); } index++; iterator = iterator.next; } } else { while (iterator != null) { if (iterator.elem != null && iterator.elem.equals(elem)) { list.addElem(index); } index++; iterator = iterator.next; } } return list; } @Override public int removeElements(E elem) { Node<E> iterator = head.next; Node<E> prev = head; int result = 0; if (elem == null) { while (iterator != null) { if (iterator.elem == null) { prev.next = iterator.next; iterator.next = null; iterator = prev.next; result++; continue; } prev = prev.next; iterator = iterator.next; } } else { while (iterator != null) { if (iterator.elem != null && iterator.elem.equals(elem)) { prev.next = iterator.next; iterator.next = null; iterator = prev.next; result++; continue; } prev = prev.next; iterator = iterator.next; } } return result; } @Override public E removeElem(int index) { rangeCheck(index); Node<E> prev = getNode(index - 1); Node<E> delNode = prev.next; prev.next = delNode.next; E result = delNode.elem; //help GC delNode.next = null; size--; return result; } @Override public Object[] toArray() { Node<E> iterator = head.next; Object[] result = new Object[size]; int loop = 0; while (iterator != null) { result[loop++] = iterator.elem; iterator = iterator.next; } return result; } }\"]},\"340\":{\"h\":\"队列\",\"t\":[\"队列同样是一种特殊的线性表，其插入和删除的操作分别在表的两端进行，队列的特点就是先进先出(First In First Out)。我们把向队列中插入元素的过程称为入队(Enqueue|push)，删除元素的过程称为出队(Dequeue|pop)并把允许入队的一端称为队尾，允许出的的一端称为队头，没有任何元素的队列则称为空队。\",\"关于队列的操作，我们这里主要实现入队，出队，判断空队列和清空队列等操作，声明队列接口Queue（队列抽象数据类型）如下：\"]},\"341\":{\"h\":\"顺序队列\",\"t\":[\"顺序队列的实现可以使用数组来完成，一端做push，另一端做pop操作。下面是队列的操作示意图。\",\"顺序队列\",\"所以我们通常将数组弄成一个环状，即队头和队尾相连，这样就形成了“循环队列”，同时也解决了“假溢出”现象。循环队列是改进版的顺序队列。\",\"循环顺序队列\",\"对于普通队列的 push 或 pop 我们只需要对尾指针或头指针进行自增操作即可，但是循环队列我们就不能单纯的进行自增，当 front 或 rear=maxSize-1 时我们就不能进行自增操作了，比如一个队列尾长度为 4 的数组 datas[4]，那么当 front 或rear需要在 0,1,2,3 之间进行循环“推进”，以此达到循环队列的效果。所以我们可以使用 rear = （rear+1）%maxSize ；front = （front+1）%maxSize ；公式进行指针计算。\",\"需要注意的是：队空状态的条件为：front = rear。而如果整个队列全部存满数据那么，队满的条件也是 front = rear；所以循环队列需要损失一个存储空间，如下图：\",\"解决了这些问题我们就可以很轻松地实现循环队列了：\",\"package com.my.queue; /** * @Author: wangshiyu javapub rodert * @Date: 2020/12/19 18:13 */ public class SqQueue<T> { private T[] datas;//使用数组作为队列的容器 private int maxSize;//队列的容量 private int front;//头指针 private int rear;//尾指针 //初始化队列 public SqQueue(int maxSize) { if (maxSize < 1) { maxSize = 1; } this.maxSize = maxSize; this.front = 0; this.rear = 0; this.datas = (T[]) new Object[this.maxSize]; } //两个状态:队空&队满 public boolean isNull() { if (this.front == this.rear) return true; else return false; } public boolean isFull() { if ((rear + 1) % this.maxSize == front) return true; else return false; } //初始化队列 public void initQueue() { this.front = 0; this.front = 0; } //两个操作:进队&出队 public boolean push(T data) { if (isFull()) return false;//队满则无法进队 else { datas[rear] = data;//进队 rear = (rear + 1) % maxSize;//队尾指针+1. return true; } } public T pop() { if (isNull()) return null;//对空无法出队 else { T popData = datas[front++];//出队 front = (front + 1) % maxSize;//队头指针+1 return popData; } } //get() public T[] getDatas() { return datas; } public int getMaxSize() { return maxSize; } public int getFront() { return front; } public int getRear() { return rear; } }\",\"测试一下：\",\"class s { public static void main(String[] args) { SqQueue<Character> queue = new SqQueue<Character>(4); //判断 System.out.println(\\\"队列是否为空：\\\" + queue.isNull()); //入队A,B,C queue.push('A'); queue.push('B'); queue.push('C'); System.out.println(\\\"队列是否为满：\\\" + queue.isFull()); //出队 Character data = queue.pop(); System.out.println(\\\"出队：\\\" + data); } }\",\"运行结果：\",\"队列是否为空：true 队列是否为满：true 出队：A\"]},\"342\":{\"h\":\"链式队列\",\"t\":[\"链队实现，如图所示：\",\"链队的实现很简单，只要理解了链表的操作和队列的特点即可。（上文有写到链表的实现）\",\"package com.my.queue; /** * @Author: wangshiyu javapub rodert * @Date: 2020/12/19 18:30 */ public class LinkQueue<T> { private QNode<T> front;//队头指针 private QNode<T> rear;//队尾指针 private int maxSize;//为了便于操作，使用这个变量表示链队的数据容量 //初始化 public LinkQueue() { this.front = new QNode<T>(); this.rear = new QNode<T>(); this.maxSize = 0; } //初始化队列 public void initQueue() { front.next = null; rear.next = null; maxSize = 0; } //队空判断 public boolean isNull() { if (front.next == null || rear.next == null) return true; else return false; } //进队 public void push(QNode<T> node) { if (isNull()) { //第一次 front.next = node; rear.next = node; maxSize++; } else { node.next = front.next; front.next = node; maxSize++; } } //出队 public QNode<T> pop() { if (isNull()) return null;//队为空时，无法出队 else if (maxSize == 1) { //队只有一个元素时直接初始化即可 QNode<T> node = front.next; initQueue(); return node; } else { //准备工作 QNode<T> p = front;//使用p指针来遍历队列 for (int i = 1; i < maxSize - 1; i++) p = p.next; //pop QNode<T> node = rear.next; rear.next = p.next; maxSize--; return node; } } } //链队结点 class QNode<T> { private T data;//数据域 public QNode<T> next;//指针域 //初始化1 public QNode() { this.data = null; this.next = null; } //初始化2 public QNode(T data) { this.data = data; this.next = null; } public T getData() { return data; } public void setData(T data) { this.data = data; } }\",\"测试运行：\",\"class d { public static void main(String[] args) { LinkQueue<Integer> lq = new LinkQueue<Integer>(); System.out.println(\\\"队列是否为空：\\\" + lq.isNull()); //依次插入1、2、3、4 lq.push(new QNode<Integer>(1)); lq.push(new QNode<Integer>(2)); lq.push(new QNode<Integer>(3)); lq.push(new QNode<Integer>(4)); //依次出队 System.out.println(\\\"依次出队：\\\"); while (!lq.isNull()) { System.out.println(lq.pop().getData()); } } }\",\"运行结果：\",\"队列是否为空：true 依次出队： 1 2 3 4\"]},\"343\":{\"h\":\"栈的实现\"},\"344\":{\"h\":\"顺序栈\"},\"345\":{\"h\":\"链式栈\"},\"346\":{\"h\":\"栈、队列和线性表的应用\"},\"347\":{\"h\":\"基础排序\"},\"348\":{\"h\":\"排序的概念和分类\"},\"349\":{\"h\":\"直接插入排序、希尔排序和基数排序\"},\"350\":{\"h\":\"哈希表\"},\"351\":{\"h\":\"哈希表的构造\"},\"352\":{\"h\":\"哈希表的实现\"},\"353\":{\"h\":\"递归\"},\"354\":{\"h\":\"递归函数的执行过程\"},\"355\":{\"h\":\"折半查找、归并排序和快速排序\"},\"356\":{\"h\":\"广义表的定义、存储与实现\"},\"357\":{\"h\":\"二叉树\"},\"358\":{\"h\":\"二叉树的定义及其主要特征\"},\"359\":{\"h\":\"二叉树的实现，包括顺序和链式存储\"},\"360\":{\"h\":\"二叉树的遍历\"},\"361\":{\"h\":\"堆和堆排序\"},\"362\":{\"h\":\"二叉排序树\"},\"363\":{\"h\":\"二叉平衡树\"},\"364\":{\"h\":\"树和森林\"},\"365\":{\"h\":\"树的定义以及树的存储结构，包括双亲、双亲孩子和孩子兄弟表示法\"},\"366\":{\"h\":\"树和森林与二叉树的转换\"},\"367\":{\"h\":\"数和森林的遍历\"},\"368\":{\"h\":\"并查集\"},\"369\":{\"h\":\"B-树及其基本操作，B+树的基本概念\"},\"370\":{\"h\":\"图\"},\"371\":{\"h\":\"图的定义和基本概念\"},\"372\":{\"h\":\"图的实现，包括数组（邻接矩阵）和领接表表示法\"},\"373\":{\"h\":\"图的遍历\"},\"374\":{\"h\":\"图的典型应用\"},\"375\":{\"h\":\"最小生成树\"},\"376\":{\"h\":\"最短路径\"},\"377\":{\"h\":\"拓扑排序\"},\"378\":{\"h\":\"关键路径\"},\"379\":{\"c\":[\"数据结构\"]},\"380\":{\"c\":[\"数据结构\"]},\"381\":{\"h\":\"大白话讲解布隆过滤器（BloomFilter）\",\"t\":[\"阅读大概需要4\",\"封面图\",\"[toc]\",\"声明：参考来源互联网，有任何争议可以留言。站在前人的肩上，我们才能看的更远。\",\"本教程纯手打，致力于最实用教程，不需要什么奖励，只希望多多转发支持。 欢迎来我公众号，希望可以结识你，也可以催更，微信搜索：JavaPub\",\"有任何问题都可以来谈谈，等你！\",\"微信公众号\"]},\"382\":{\"h\":\"JavaPub说\",\"t\":[\"布隆大家都知道吧，如果不知道没关系，介绍一下，E技能，坚不可摧\",\"坚不可摧 E 消耗法力：30/35/40/45/50冷却时间：18/16/14/12/10 布隆朝一个方向举起盾牌，持续3/3.25/3.5/3.75/4秒，并使来自目标\",\"英雄联盟布隆\",\"回忆完以上，下面继续\"]},\"383\":{\"h\":\"关于布隆过滤器\",\"t\":[\"布隆过滤器主要用来做去重操作。在对准确率要求不高的业务场景使用广泛。\",\"布隆过滤器的核心是：如果计算出有一个元素已存在，那么它可能存在，如果一个元素不存在，那么它一定不存在。\",\"简单来说，宁错杀三千，不放过一个。\",\"例如：长城防火墙有100亿个需要屏蔽的网站，计算机的每次请求都要经过防火墙的过滤判断请求URL是否在黑名单中，如果我们使用HashSet来实现过滤的话，我们假设每个URL的大小为64B，那么100亿个就至少需要大约640GB的内存空间，这显然是不符合实际情况的。\",\"到目前我使用比较多的是在数据采集中，url去重，邮箱中的垃圾邮件过滤等。\"]},\"384\":{\"h\":\"1.1.基础介绍\"},\"385\":{\"h\":\"1.1.1.百度百科\",\"t\":[\"百度百科：布隆过滤器（Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都比一般的算法要好的多，缺点是有一定的误识别率和删除困难。\"]},\"386\":{\"h\":\"1.1.2.原理介绍\",\"t\":[\"布隆过滤器的原理和哈希表的原理有点类似，同样需要使用hash函数，但是在布隆过滤器中，需要使用多个hash函数。布隆过滤器的原理还是比较简单的。\",\"我们有一个位数组bitArray，假设长度为m，就是只存0、1那种。此时有个key，和n个hash函数，可以得到n个key被hash过后的数。我们分别取hash对应bitArray中位置的值，置位1。\",\"布隆过滤原理图\",\"如图 {x,y,z} 是一个集合，通过三次hash计算，映射对应的值到 位数组 对应位置。当我们要求 w 是否存在时，只要对w计算hash，再找对应位置是否为1即可。但是，也有可能正好hash值对应的 位数组 位置都为1，这个概念叫做误算率。实际上，这就和哈希表中哈希冲突的情况一样，因为可能会出现两个key值经过k个hash函数之后，取余之后的结果是一样的。\"]},\"387\":{\"h\":\"1.1.3.布隆过滤器的属性\",\"t\":[\"如果布隆过滤器判断数据不存在则数据绝对不存在。\",\"这个就是布隆过滤器的特点，数据先经过布隆过滤器，查询数据是否已经存在。如果布隆过滤器判断用户名不存在/或者存在，数据才能够继续向下走。\",\"在前面的判断中，可以判断数据绝对不存在，但是如果判断数据存在，则数据也可能不存在。\",\"布隆过滤器只能插入数据，而不能删除数据。\"]},\"388\":{\"h\":\"1.2.数学推导\",\"t\":[\"既然误算率一定存在，当然我们想减小误判到最小（key数量和bitArray长度确定）。\",\"数学公式\"]},\"389\":{\"h\":\"1.3.哈希\",\"t\":[\"读到这里我们对布隆过滤器有了一定了解，hash函数对 布隆过滤器 的优劣起了决定性作用。\",\"Hash参考百度百科：https://baike.baidu.com/item/hash/390310\",\"目标就是设计一种尽可能少碰撞的hash算法，尽可能让它平均分布到每一位。\"]},\"390\":{\"h\":\"2.1.Java版\",\"t\":[\"下面是一篇简单版本的布隆过滤器，使用了 java.util.BitSet\",\"package com.javapub.cache; import java.util.BitSet; /** * @author wangshiyu rodert JavaPub * @date 2020/5/26 15:23 * @description 一篇简单的布隆过滤器 */ public class BloomFilterSimple { private static final int SIZE = 1 << 24; private static BitSet bitSet = new BitSet(SIZE); private static Hash[] hashes = new Hash[5]; private static final int seeds[] = new int[]{3, 5, 7, 9, 11}; static { init(); } private static void init() { for (int i = 0; i < seeds.length; i++) { hashes[i] = new Hash(seeds[i]); } } private boolean add(String data) { for (Hash hash : hashes) { int hashCode = hash.getHash(data); bitSet.set(hashCode, true); } return true; } private boolean contains(String data) { boolean have = true; for (Hash hash : hashes) { have &= bitSet.get(hash.getHash(data)); } return have; } /** * 如果不存在就进行记录并返回false，如果存在了就返回true * * @param data * @return */ private boolean addIfNotExist(String data) { boolean contains = contains(data); if (contains) { return true; } else { add(data); return false; } } public static void main(String[] args) { String data = \\\"https://gitee.com/rodert\\\"; String data2 = \\\"https://gitee.com/rodert/JavaPub\\\"; BloomFilterSimple bloomFilterSimple = new BloomFilterSimple(); System.out.println(bloomFilterSimple.add(data)); System.out.println(bloomFilterSimple.contains(data)); System.out.println(bloomFilterSimple.addIfNotExist(data2)); System.out.println(bloomFilterSimple.contains(data2)); System.out.println(bitSet); } private static class Hash { private int seed = 0; private Hash(int seed) { this.seed = seed; } private int getHash(String string) { int val = 0; int len = string.length(); for (int i = 0; i < len; i++) { val = val * seed + string.charAt(i); } return val & (SIZE - 1); } } }\"]},\"391\":{\"h\":\"3.1.进阶一(参数定义)\"},\"392\":{\"h\":\"3.1.1.介绍\",\"t\":[\"如果你有兴趣了解更多，我们继续往下看\",\"前面写了一个简单的DEMO，位数组长度和误差率都是拍脑袋定的，这篇主要讲解如何定义合适的位数组长度，计算方式\",\"1.1.2.原理介绍\",\"我们有一个位数组bitArray，假设长度为m，就是只存0、1那种。此时有个key，和k个hash函数，可以得到k个key被hash过后的数。我们分别取hash对应bitArray中位置的值，置位1。\",\"布隆过滤原理图\",\"如图 {x,y,z} 是一个集合，通过三次hash计算，映射对应的值到 位数组 对应位置。当我们要求 w 是否存在时，只要对w计算hash，再找对应位置是否为1即可。但是，也有可能正好hash值对应的 位数组 位置都为1，这个概念叫做误算率。实际上，这就和哈希表中哈希冲突的情况一样，因为可能会出现两个key值经过k个hash函数之后，取余之后的结果是一样的。\",\"上面是我们在原理介绍讲到的，综上所述，我们需要多少个哈希函数，创建多长的bit数组比较合适，为了估算出k和m的值，在构造一个布隆过滤器时，需要传入两个参数，即可以接受的误判率fpp和元素总个数n（不一定完全精确）。至于参数估计的方法，有兴趣的同学可以参考维基英文页面，下面直接给出公式：\",\"布隆过滤器参数计算公式.jpg\",\"哈希函数的要求尽量满足平均分布，这样既降低误判发生的概率，又可以充分利用bit数组的空间；\",\"根据论文《Less Hashing, Same Performance: Building a Better Bloom Filter》提出的一个技巧，可以用2个哈希函数来模拟k个哈希函数，即gi(x) = h1(x) + ih2(x) ，其中0<=i<=k-1；\",\"在吴军博士的《数学之美》一书中展示了不同情况下的误判率，例如，假定一个元素用16位比特，8个哈希函数，那么假阳性的概率是万分之五，这已经相当小了。\"]},\"393\":{\"h\":\"3.1.2.Java实现\",\"t\":[\"计算 位数组长度\",\"n是准备存入数据数量，p是误判率。\",\"public static long optimalNumOfBits(long n, double p) { return (long)((double)(-n) * Math.log(p) / (Math.log(2.0D) * Math.log(2.0D))); }\",\"计算hash函数个数\",\"n是准备存入数据数量，m是bit数组长度。\",\"public static int optimalNumOfHashFunctions(long n, long m) { return Math.max(1, (int)Math.round((double)m / (double)n * Math.log(2.0D))); }\"]},\"394\":{\"h\":\"3.2.进阶二(redis版)\"},\"395\":{\"h\":\"3.2.1.介绍\",\"t\":[\"布隆过滤器自提出以后，很多开源工具中都对它进行了实现。如 Google 的 Guava 中。\",\"对于现在大趋势分布式架构，单机存到缓存肯定是适用场景有限，so，我们借助 redis。\",\"redis 数据类型 bit ，用法和上边一样，这里主要说关于动态扩容。\",\"扩容的核心就是在每次插入前判断当前 位数组 为1(jedis.bitcount)的个数比(/) 位数组总长度，超过50%，那么就新建一个 bit，布隆过滤器的核心思想。判断一个元素是否在集合中？可能在集合中 和 绝对不在集合中\"]},\"396\":{\"h\":\"3.2.2.Java代码\",\"t\":[\"由于篇幅过长，后面会在公众号单独发出\",\"布隆过滤器换包含：并行分区的布隆过滤器、稳定的布隆过滤器、可扩展的Bloom过滤器、空间布隆过滤器、衰减的布隆过滤器等。\",\"更多阅读阅读维基百科英文：https://en.wikipedia.org/wiki/Bloom_filter\"]},\"397\":{\"c\":[\"数据结构\"]},\"398\":{\"c\":[\"布隆过滤器\",\"redis\"]},\"399\":{\"h\":\"桶排序就是这么容易\",\"t\":[\"[toc]\",\"img\"]},\"400\":{\"h\":\"前言\",\"t\":[\"声明：参考来源互联网，有任何争议可以留言。站在前人的肩上，我们才能看的更远。\",\"本教程纯手打，致力于最实用教程，不需要什么奖励，只希望多多转发支持。 欢迎来我公众号，希望可以结识你，也可以催更，微信搜索：JavaPub\",\"有任何问题都可以来谈谈 ！\",\"如果看上一篇**计数排序，你有没有这样疑问，当每个数据之间跨度过大(如从 0-2亿 数字中排序 20 个数)，就需要大量空间消耗。桶排序就是对计数排序**的改进。\"]},\"401\":{\"h\":\"1.桶排序(Bucket sort)\",\"t\":[\"百度百科:\",\"桶排序 (Bucket sort)或所谓的箱排序，是一个排序算法，工作的原理是将数组分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）。桶排序是 鸽巢排序 的一种归纳结果。当要被排序的数组内的数值是均匀分配的时候，桶排序使用线性时间（Θ（n））。但桶排序并不是 比较排序，他不受到 O(n log n) 下限的影响。\",\"继续 -->\",\"桶排序是**计数排序的升级版。它利用了函数的映射关系**，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：\",\"在额外空间充足的情况下，尽量增大桶的数量\",\"使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中\",\"同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。\",\"img\",\"桶排序是将待排序集合中处于同一个值域的元素存入同一个桶中，也就是根据元素值特性将集合拆分为多个区域，则拆分后形成的多个桶，从值域上看是处于有序状态的。对每个桶中元素进行排序，则所有桶中元素构成的集合是已排序的。\",\"快速排序是将集合拆分为两个值域，这里称为两个桶，再分别对两个桶进行排序，最终完成排序。桶排序则是将集合拆分为多个桶，对每个桶进行排序，则完成排序过程。两者不同之处在于，快排是在集合本身上进行排序，属于原地排序方式，且对每个桶的排序方式也是快排。桶排序则是提供了额外的操作空间，在额外空间上对桶进行排序，避免了构成桶过程的元素比较和交换操作，同时可以自主选择恰当的排序算法对桶进行排序。\"]},\"402\":{\"h\":\"2.原理\"},\"403\":{\"h\":\"2.1.关键\",\"t\":[\"元素值域的划分，也就是元素到桶的映射规则。映射规则需要根据待排序集合的元素分布特性进行选择，若规则设计的过于模糊、宽泛，则可能导致待排序集合中所有元素全部映射到一个桶上，则桶排序向比较性质排序算法演变。若映射规则设计的过于具体、严苛，则可能导致待排序集合中每一个元素值映射到一个桶上，则桶排序向计数排序方式演化。\",\"排序算法的选择，从待排序集合中元素映射到各个桶上的过程，并不存在元素的比较和交换操作，在对各个桶中元素进行排序时，可以自主选择合适的排序算法，桶排序算法的复杂度和稳定性，都根据选择的排序算法不同而不同。\"]},\"404\":{\"h\":\"2.2.算法过程\",\"t\":[\"根据待排序集合中最大元素和最小元素的差值范围和映射规则，确定申请的桶个数；\",\"遍历待排序集合，将每一个元素移动到对应的桶中；\",\"对每一个桶中元素进行排序，并移动到已排序集合中。\",\"步骤 3 中提到的已排序集合，和步骤 1、2 中的待排序集合是同一个集合。与计数排序不同，桶排序的步骤 2 完成之后，所有元素都处于桶中，并且对桶中元素排序后，移动元素过程中不再依赖原始集合，所以可以将桶中元素移动回原始集合即可。\",\"示意图\",\"元素分配到不同桶中：\",\"然后，元素在每个桶中排序：\",\"img\"]},\"405\":{\"h\":\"3.代码\",\"t\":[\"基于 Java 的代码，代码逻辑很好理解，使用到插入排序，如果不理解，点击传送。\",\"package utils; import java.util.Arrays; /** * @author wangshiyu rodert * @date 2020/6/21 15:13 * @description */ public class BucketSort { public static void main(String[] args) throws Exception { int[] array = {2, 1, 5, 3, 4}; BucketSort bucketSort = new BucketSort(); int[] sort = bucketSort.sort(array); System.out.println(Arrays.toString(sort)); } private static final InsertSort insertSort = new InsertSort(); public int[] sort(int[] sourceArray) throws Exception { // 对 arr 进行拷贝，不改变参数内容 int[] arr = Arrays.copyOf(sourceArray, sourceArray.length); return bucketSort(arr, 5); } private int[] bucketSort(int[] arr, int bucketSize) throws Exception { if (arr.length == 0) { return arr; } int minValue = arr[0]; int maxValue = arr[0]; for (int value : arr) { if (value < minValue) { minValue = value; } else if (value > maxValue) { maxValue = value; } } int bucketCount = (int) Math.floor((maxValue - minValue) / bucketSize) + 1;//向下取整 + 1 int[][] buckets = new int[bucketCount][0]; // 利用映射函数将数据分配到各个桶中 for (int i = 0; i < arr.length; i++) { int index = (int) Math.floor((arr[i] - minValue) / bucketSize); buckets[index] = arrAppend(buckets[index], arr[i]); } int arrIndex = 0; for (int[] bucket : buckets) { if (bucket.length <= 0) { continue; } // 对每个桶进行排序，这里使用了插入排序 bucket = insertSort.sort(bucket); for (int value : bucket) { arr[arrIndex++] = value; } } return arr; } /** * 自动扩容，并保存数据 * * @param arr * @param value */ private int[] arrAppend(int[] arr, int value) { arr = Arrays.copyOf(arr, arr.length + 1); arr[arr.length - 1] = value; return arr; } } class InsertSort { //插入排序 public int[] sort(int[] sourceArray) throws Exception { // 对 arr 进行拷贝，不改变参数内容 int[] arr = Arrays.copyOf(sourceArray, sourceArray.length); // 从下标为1的元素开始选择合适的位置插入，因为下标为0的只有一个元素，默认是有序的 for (int i = 1; i < arr.length; i++) { // 记录要插入的数据 int tmp = arr[i]; // 从已经排序的序列最右边的开始比较，找到比其小的数 int j = i; while (j > 0 && tmp < arr[j - 1]) { arr[j] = arr[j - 1]; j--; } // 存在比其小的数，插入 if (j != i) { arr[j] = tmp; } } return arr; } }\",\"返回结果：\",\"[1, 2, 3, 4, 5]\",\"Arrays.copyOf() 方法理解：用于复制指定的数组内容以达到扩容的目的，该方法对不同的基本数据类型都有对应的重载方法。\"]},\"406\":{\"h\":\"4.扩展阅读\",\"t\":[\"真题：347. Top K Frequent Elements (Medium)，给定一个非空的整数数组，返回其中出现频率前 k 高的元素。\",\"Given a non-empty array of integers, return the k most frequent elements.\",\"题解：\",\"img\",\"//基于桶排序求解「前 K 个高频元素」 class Solution { public List<Integer> topKFrequent(int[] nums, int k) { List<Integer> res = new ArrayList(); // 使用字典，统计每个元素出现的次数，元素为键，元素出现的次数为值 HashMap<Integer,Integer> map = new HashMap(); for(int num : nums){ if (map.containsKey(num)) { map.put(num, map.get(num) + 1); } else { map.put(num, 1); } } //桶排序 //将频率作为数组下标，对于出现频率不同的数字集合，存入对应的数组下标 List<Integer>[] list = new List[nums.length+1]; for(int key : map.keySet()){ // 获取出现的次数作为下标 int i = map.get(key); if(list[i] == null){ list[i] = new ArrayList(); } list[i].add(key); } // 倒序遍历数组获取出现顺序从大到小的排列 for(int i = list.length - 1;i >= 0 && res.size() < k;i--){ if(list[i] == null) continue; res.addAll(list[i]); } return res; } }\",\"桶排序就是这么容易\"]},\"407\":{\"c\":[\"数据结构\",\"排序\"]},\"408\":{\"c\":[\"数据结构\",\"排序\"]},\"409\":{\"h\":\"计数排序就是这么容易\",\"t\":[\"[toc]\",\"声明：参考来源互联网，有任何争议可以留言。站在前人的肩上，我们才能看的更远。\",\"本教程纯手打，致力于最实用教程，不需要什么奖励，只希望多多转发支持。 欢迎来我公众号，希望可以结识你，也可以催更，微信搜索：JavaPub\",\"有任何问题都可以来谈谈 ！\",\"计数排序是比较容易的排序算法，但是对数量级较小的整数排序很实用。\"]},\"410\":{\"h\":\"1.1.计数排序(Counting Sort)\",\"t\":[\"计数排序是一个非基于比较的排序算法，该算法于1954年由 Harold H. Seward 提出。它的优势在于在对一定范围内的整数排序时，它的复杂度为 Ο(n+k)（其中k是整数的范围），快于任何比较排序算法。当然这是一种牺牲空间换取时间的做法，而且当 O(k)>O(n*log(n)) 的时候其效率反而不如基于比较的排序（基于比较的排序的时间复杂度在理论上的下限是O(n*log(n)), 如 归并排序，堆排序）\",\"例如：计数排序是用来排序0到100之间的数字的最好的算法，但是它不适合按字母顺序排序人名。但是，计数排序可以用在基数排序中的算法来排序数据范围很大的数组。\",\"计数排序是一个简单的排序算法，看下边原理很容易理解。\"]},\"411\":{\"h\":\"2.1.步骤\",\"t\":[\"算法的步骤如下：\",\"找出待排序的数组中最大和最小的元素\",\"统计数组中每个值为i的元素出现的次数，存入数组C的第i项\",\"对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）\",\"反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1\",\"img\",\"如果有疑问，看下边一个例子\"]},\"412\":{\"h\":\"2.2.实例题目\",\"t\":[\"题目：数组里有20个随机数，取值范围为从0到10，要求用最快的速度把这20个整数从小到大进行排序。\",\"无论是归并排序，冒泡排序还是快速排序等等，都是基于元素之间的比较来进行排序的。但是有一种特殊的排序算法叫计数排序，这种排序算法不是基于元素比较，而是利用 数组下标 来确定元素的正确位置。\",\"通过计数排序特性分析题目，我们知道整数的取值范围是从0到10，那么这些整数的值肯定是在0到10这11个数里面。于是我们可以建立一个长度为11的数组，数组下标从0到10，元素初始值全为0，如下所示：\",\"img\",\"先假设20个随机整数的值是： 9, 3, 5, 4, 9, 1, 2, 7, 8，1，3, 6, 5, 3, 4, 0, 10, 9, 7, 9\",\"让我们先遍历这个无序的随机数组，每一个整数按照其值对号入座，对应数组下标的元素进行 加1 操作。\",\"比如第一个整数是 9，那么数组下标为 9 的元素加 1：\",\"img\",\"第二个整数是3，那么数组下标为 3 的元素加 1：\",\"img\",\"继续遍历数列并修改数组......\",\"最终，数列遍历完毕时，数组的状态如下：\",\"img\",\"数组中的每一个值，代表了数列中对应整数的出现次数。\",\"有了这个统计结果，排序就很简单了，直接遍历数组，输出数组元素的下标值，元素的值是几，就输出几次：\",\"0, 1, 1, 2, 3, 3, 3, 4, 4, 5, 5, 6, 7, 7, 8, 9, 9, 9, 9, 10\",\"这就是计数排序的基本过程，它适用于一定范围的整数排序。在取值范围不是很大的情况下，它的性能在某些情况甚至快过那些O(nlogn)的排序，例如快速排序、归并排序。\"]},\"413\":{\"h\":\"3.1.代码\",\"t\":[\"@Test public void sortJavaPub(){ int [] array = {2,1,5,3,4}; //1.得到数列的最大值 int max = array[0]; for (int i = 1; i < array.length; i++) { if (array[i] > max) max = array[i]; } //2.根据数列的最大值确定统计数组的长度 int[] coutArray = new int[max + 1]; //3.遍历数列，填充统计数组 for(int i = 0; i < array.length; i++) coutArray[array[i]]++; //4.遍历统计数组，输出结果 int index = 0; int[] sortedArray = new int[array.length]; for (int i = 0; i < coutArray.length; i++) { for (int j = 0; j < coutArray[i]; j++) { sortedArray[index++] = i; } } System.out.println(Arrays.toString(sortedArray)); }\",\"返回结果：\",\"[1, 2, 3, 4, 5]\"]},\"414\":{\"h\":\"4.1.局限性\",\"t\":[\"1. 当数列最大最小值差距过大时，并不适用于计数排序\",\"比如给定20个随机整数，范围在0到1亿之间，此时如果使用计数排序的话，就需要创建长度为1亿的数组，不但严重浪费了空间，而且时间复杂度也随之升高。\",\"2. 当数列元素不是整数时，并不适用于计数排序\",\"如果数列中的元素都是小数，比如3.1415，或是0.00000001这样子，则无法创建对应的统计数组，这样显然无法进行计数排序。\"]},\"415\":{\"c\":[\"数据结构\",\"排序\"]},\"416\":{\"c\":[\"数据结构\",\"排序\"]},\"417\":{\"h\":\"堆排序就是这么容易\",\"t\":[\"声明：参考来源互联网，有任何争议可以留言。站在前人的肩上，我们才能看的更远。\",\"本教程纯手打，致力于最实用教程，不需要什么奖励，只希望多多转发支持。 欢迎来我公众号，希望可以结识你，也可以催更，微信搜索：JavaPub\",\"有任何问题都可以来谈谈 ！\",\"堆排序在常用排序算法中属于比较难理解的，本篇就以最简单的方式讲解。如果还有什么疑问，\",\"弄清楚**以前，我们先要知道什么是**？\",\"堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。\",\"下图：\",\"简单用公式描述一下就是：\",\"大顶堆： arr[i] >= arr[2i+1] && arr[i] >= arr[2i+2]\",\"小顶堆： arr[i] <= arr[2i+1] && arr[i] <= arr[2i+2]\",\"问题二：什么是完全二叉树？\",\"百度百科:\",\"一棵深度为k的有n个结点的二叉树，对树中的结点按从上至下、从左到右的顺序进行编号，如果编号为i（1≤i≤n）的结点与满二叉树中编号为i的结点在二叉树中的位置相同，则这棵二叉树称为完全二叉树。\",\"百度百科:\",\"堆排序（英语：Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。\",\"堆排序是利用这种数据结构而设计的一种排序算法，堆排序是一种，它的最坏，最好，平均均为O(nlogn)，它也是。\",\"堆排序的基本思想是：将待排序序列构造成一个大顶堆，此时，整个序列的最大值就是堆顶的根节点。将其与末尾元素进行交换，此时末尾就为最大值。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了\",\"a.假设给定无序序列结构如下 b.此时我们从最后一个非叶子结点开始（叶结点自然不用调整，第一个非叶子结点 arr.length/2-1=5/2-1=1，也就是下面的6结点），从左至右，从下至上进行调整。 c.找到第二个非叶节点4，由于[4,9,8]中9元素最大，4和9交换。 d.这时，交换导致了子根[4,5,6]结构混乱，继续调整，[4,5,6]中6最大，交换4和6。 此时，就将一个无需序列构造成了一个大顶堆。\",\"a.将堆顶元素9和末尾元素4进行交。 b.重新调整结构，使其继续满足堆定义。 c.再将堆顶元素8与末尾元素5进行交换，得到第二大元素8。 后续过程，继续进行调整，交换，如此反复进行，最终使得整个序列有序。 \",\"- 再简单总结下堆排序的基本思路：\",\"代码是基于 Java语言。\",\"package cn.javapub; import java.util.Arrays; public class HeapSort { public int[] sort(int[] sourceArray) throws Exception { // 对 arr 进行拷贝，不改变参数内容 int[] arr = Arrays.copyOf(sourceArray, sourceArray.length); int len = arr.length; //构建大顶堆 buildMaxHeap(arr, len); //调整堆结构+交换堆顶元素与末尾元素 for (int i = len - 1; i > 0; i--) { swap(arr, 0, i);//将堆顶元素与末尾元素进行交换 len--; heapify(arr, 0, len);//重新对堆进行调整 } return arr; } private void buildMaxHeap(int[] arr, int len) { for (int i = (int) Math.floor(len / 2); i >= 0; i--) { //从第一个非叶子结点从下至上，从右至左调整结构 heapify(arr, i, len); } } //调整大顶堆 private void heapify(int[] arr, int i, int len) { int left = 2 * i + 1; int right = 2 * i + 2; int largest = i; if (left < len && arr[left] > arr[largest]) { largest = left; } if (right < len && arr[right] > arr[largest]) { largest = right; } if (largest != i) { swap(arr, i, largest); heapify(arr, largest, len); } } //交换元素 private void swap(int[] arr, int i, int j) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } public static void main(String[] args) throws Exception { int[] arr = {5, 1, 4, 2, 3}; HeapSort heapSort = new HeapSort(); int[] sort = heapSort.sort(arr); System.out.println(Arrays.toString(sort)); } }\",\"返回结果：\",\"[1, 2, 3, 3, 5]\",\"​ 堆排序是一种选择排序，整体主要由构建初始堆+交换堆顶元素和末尾元素并重建堆两部分组成。其中构建初始堆经推导复杂度为O(n)，在交换并重建堆的过程中，需交换n-1次，而重建堆的过程中，根据完全二叉树的性质，[log2(n-1),log2(n-2)...1]逐步递减，近似为nlogn。所以堆排序时间复杂度一般认为就是O(nlogn)级。\"]},\"418\":{\"c\":[\"数据结构\",\"排序\"]},\"419\":{\"c\":[\"数据结构\",\"排序\"]},\"420\":{\"h\":\"基数排序就是这么容易\"},\"421\":{\"h\":\"前言\",\"t\":[\"欢迎关注公众号，白嫖原创PDF，也可以催更，微信搜：JavaPub\",\"[toc]\"]},\"422\":{\"h\":\"1.基数排序\"},\"423\":{\"h\":\"1.1.对比\",\"t\":[\"前面讲了计数排序、桶排序，那么它们有什么不同\",\"基数排序 vs 计数排序 vs 桶排序\",\"这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：\",\"基数排序：根据键值的每位数字来分配桶；\",\"计数排序：每个桶只存储单一键值；\",\"桶排序：每个桶存储一定范围的数值；\"]},\"424\":{\"h\":\"1.2.基数排序\",\"t\":[\"百度百科：\",\"基数排序（radix sort）属于 “分配式排序”（distribution sort），又称“桶子法”（bucket sort）或 bin sort，顾名思义，它是透过键值的部份资讯，将要排序的元素分配至某些 “桶” 中，藉以达到排序的作用，基数排序法是属于稳定性的排序，其时间复杂度为 O (nlog(r)m)，其中 r 为所采取的基数，而 m 为堆数，在某些时候，基数排序法的效率高于其它的稳定性排序法。\"]},\"425\":{\"h\":\"1.3.特点\",\"t\":[\"时间复杂度为 O (nlog(r)m)，其中 r 为所采取的基数，而 m 为堆数。\",\"基数排序法是属于稳定性的排序。\"]},\"426\":{\"h\":\"2.原理\"},\"427\":{\"h\":\"2.1.实现原理\",\"t\":[\"基数排序的发明可以追溯到1887年赫尔曼·何乐礼在打孔卡片制表机(Tabulation Machine)上的贡献。它是这样实现的：将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。\",\"基数排序的方式可以采用LSD（Least significant digital）或MSD（Most significant digital），LSD的排序方式由键值的最右边开始，而MSD则相反，由键值的最左边开始。\"]},\"428\":{\"h\":\"2.2.步骤\",\"t\":[\"LSD 基数排序动图演示\",\"下面步骤介绍布局虽然不好看，但是非常有助于理解。\",\"第一步\",\"以 LSD 为例，假设原来有一串数值如下所示：\",\"73, 22, 93, 43, 55, 14, 28, 65, 39, 81\",\"首先根据个位数的数值，在走访数值时将它们分配至编号 0 到 9 的桶子中：\",\"0 1 81 2 22 3 73 93 43 4 14 5 55 65 6 7 8 28 9 39\",\"第二步\",\"接下来将这些桶子中的数值重新串接起来，成为以下的数列：\",\"81, 22, 73, 93, 43, 14, 55, 65, 28, 39\",\"接着再进行一次分配，这次是根据十位数来分配：\",\"0 1 14 2 22 28 3 39 4 43 5 55 6 65 7 73 8 81 9 93\",\"第三步\",\"接下来将这些桶子中的数值重新串接起来，成为以下的数列：\",\"14, 22, 28, 39, 43, 55, 65, 73, 81, 93\",\"这时候整个数列已经排序完毕；如果排序的对象有三位数以上，则持续进行以上的动作直至最高位数为止。\",\"LSD 的基数排序适用于位数小的数列，如果位数多的话，使用 MSD 的效率会比较好。MSD 的方式与 LSD 相反，是由高位数为基底开始进行分配，但在分配之后并不马上合并回一个数组中，而是在每个“桶子”中建立“子桶”，将每个桶子中的数值按照下一数位的值分配到“子桶”中。在进行完最低位数的分配后再合并回单一的数组中。\"]},\"429\":{\"h\":\"3.代码\"},\"430\":{\"h\":\"3.1.Java 版\",\"t\":[\"代码基于 Java 语言\",\"package com.rodert.springbootes.test; import java.util.Arrays; /** * @author JavaPub rodert * @date 2020/6/28 20:46 * @description */ public class RadixSort { public static void sort(int[] number, int d) //d表示最大的数有多少位 { int k = 0; int n = 1; int m = 1; //控制键值排序依据在哪一位 int[][] temp = new int[10][number.length]; //数组的第一维表示可能的余数0-9 int[] order = new int[10]; //数组order[i]用来表示该位是i的数的个数 while (m <= d) { for (int value : number) { int lsd = ((value / n) % 10); temp[lsd][order[lsd]] = value; order[lsd]++; } for (int i = 0; i < 10; i++) { if (order[i] != 0) for (int j = 0; j < order[i]; j++) { number[k] = temp[i][j]; k++; } order[i] = 0; } n *= 10; k = 0; m++; } } public static void main(String[] args) { int[] data = {73, 22, 93, 43, 55, 14, 28, 65, 39, 81, 33, 100}; RadixSort.sort(data, 3); System.out.println(Arrays.toString(data)); } }\",\"返回结果：\",\"[14, 22, 28, 33, 39, 43, 55, 65, 73, 81, 93, 100]\",\" > 声明：参考来源互联网，有任何争议可以留言。站在前人的肩上，我们才能看的更远。 > 本教程纯手打，致力于最实用教程，不需要什么奖励，只希望多多转发支持。 > 欢迎来我公众号，希望可以结识你，也可以催更，微信搜索：JavaPub > 有任何问题都可以来谈谈 ！\"]},\"431\":{\"c\":[\"数据结构\",\"排序\"]},\"432\":{\"c\":[\"数据结构\",\"排序\"]},\"433\":{\"h\":\"分布式唯一ID解决方案-雪花算法\",\"t\":[\"阅读大概需要3分钟\",\"附源码\",\"[toc]\",\"封面图\"]},\"434\":{\"h\":\"前言\",\"t\":[\"单体架构的服务的日子已经一去不复返了。\",\"当前系统业务和数据存储的复杂度都在提升，分布式系统是目前使用非常普遍的解决方案。\",\"全局唯一 ID 几乎是所有设计系统时都会遇到的，全局唯一 ID 在存储和检索中有至关重要的作用。\"]},\"435\":{\"h\":\"ID生成器\",\"t\":[\"在应用程序中，经常需要全局唯一的ID作为数据库主键。如何生成全局唯一ID？\",\"首先，需要确定全局唯一ID是整型还是字符串？如果是字符串，那么现有的UUID就完全满足需求，不需要额外的工作。缺点是字符串作为ID占用空间大，索引效率比整型低。\",\"如果采用整型作为ID，那么首先排除掉32位int类型，因为范围太小，必须使用64位long型。\",\"采用整型作为ID时，如何生成自增、全局唯一且不重复的ID？\"]},\"436\":{\"h\":\"数据库自增\",\"t\":[\"数据库自增 ID 是我们在数据量较小的系统中经常使用的，利用数据库的自增ID，从1开始，基本可以做到连续递增。Oracle可以用 SEQUENCE，MySQL可以用主键的 AUTO_INCREMENT，虽然不能保证全局唯一，但每个表唯一，也基本满足需求。\",\"数据库自增ID的缺点是数据在插入前，无法获得ID。数据在插入后，获取的ID虽然是唯一的，但一定要等到事务提交后，ID才算是有效的。有些双向引用的数据，不得不插入后再做一次更新，比较麻烦。\",\"在我们开发过程中，遇到一种 主主数据库同步（简单可以理解为，同样的sql再另一台数据库再执行一次）的场景，如果使用数据库自增 ID，就会出现主键不一致、或主键冲突问题。\"]},\"437\":{\"h\":\"分布式ID生成器\"},\"438\":{\"h\":\"方案一：UUID\",\"t\":[\"分布式环境不推荐使用\",\"uuid 是我们比较先想到的方法，在 java.util;包中就有对应方法。这是一个具有rfc标准的uuid：https://www.ietf.org/rfc/rfc4122.txt\",\"uuid 有很好的性能（本地调用），没有网络消耗。\",\"但是，uuid 不易存储（生成了字符串、存储过长、很多场景不适用）；信息不安全（基于 MAC 地址生成、可能会造成泄露，这个漏洞曾被用于寻找梅丽莎病毒的制作者位置。 ）；无法保证递增（或趋势递增）；其他博主反馈，截取前20位做唯一 ID ，在大数量（大概只有220w）情况下会有重复问题。\",\"UUID.randomUUID().toString()\"]},\"439\":{\"h\":\"方案二：snowflake(雪花算法)\",\"t\":[\"这是目前使用较多分布式ID解决方案，推荐使用\",\"背景 Twitter 云云就不介绍了，就是前段时间封了懂王账号的 Twitter。\"]},\"440\":{\"h\":\"算法介绍\",\"t\":[\"SnowFlake算法生成id的结果是一个64bit大小的整数，它的结构如下图：\",\"snowflake-64bit\",\"1位，不用。二进制中最高位为1的都是负数，但是我们生成的id一般都使用整数，所以这个最高位固定是0\",\"41位，用来记录时间戳（毫秒）。\",\"41位可以表示 2^{41}-1 个数字，\",\"如果只用来表示正整数（计算机中正数包含0），可以表示的数值范围是：0 至 2^{41}-1，减1是因为可表示的数值范围是从0开始算的，而不是1。\",\"也就是说41位可以表示 2^{41}-1 个毫秒的值，转化成单位年则是 (2^{41}-1) / (1000 * 60 * 60 * 24 * 365) = 69 年\",\"10位，用来记录工作机器id。\",\"可以部署在 2^{10} = 1024 个节点，包括 5位 datacenterId 和 5位 workerId\",\"5位（bit）可以表示的最大正整数是 2^{5}-1 = 31 ，即可以用 0、1、2、3、....31 这 32 个数字，来表示不同的 datecenterId 或 workerId\",\"12位，序列号，用来记录同毫秒内产生的不同id。\",\"12位（bit）可以表示的最大正整数是 2^{12}-1 = 4095 ，即可以用 0、1、2、3、....4094 这 4095 个数字，来表示同一机器同一时间截（毫秒)内产生的 4095 个 ID 序号。\",\"由于在 Java 中 64bit 的整数是 long 类型，所以在 Java 中 SnowFlake 算法生成的 id 就是 long 来存储的。\",\"SnowFlake可以保证：\",\"同一台服务器所有生成的id按时间趋势递增\",\"整个分布式系统内不会产生重复id（因为有datacenterId和workerId来做区分）\",\"存在的问题：\",\"机器ID（5位）和数据中心ID（5位）配置没有解决，分布式部署的时候会使用相同的配置，任然有ID重复的风险。\",\"使用的时候需要实例化对象，没有形成开箱即用的工具类。\",\"强依赖机器时钟，如果机器上时钟回拨，会导致发号重复或者服务会处于不可用状态。（这点在正常情况下是不会发生的）\",\"针对上面问题，这里提供一种解决思路，workId 使用服务器 hostName 生成，dataCenterId 使用 IP 生成，这样可以最大限度防止 10 位机器码重复，但是由于两个 ID 都不能超过 32，只能取余数，还是难免产生重复，但是实际使用中，hostName 和 IP 的配置一般连续或相近，只要不是刚好相隔 32 位，就不会有问题，况且，hostName 和 IP 同时相隔 32 的情况更加是几乎不可能的事，平时做的分布式部署，一般也不会超过 10 台容器。\",\"生产上使用docker配置一般是一次编译，然后分布式部署到不同容器，不会有不同的配置。这种情况就对上面提到的出现了不确定情况，这个在评论中会再出一篇参考文章。\"]},\"441\":{\"h\":\"源码\",\"t\":[\"Java 版雪花ID生成算法\",\"package com.my.blog.website.utils; import org.apache.commons.lang3.RandomUtils; import org.apache.commons.lang3.StringUtils; import org.apache.commons.lang3.SystemUtils; import java.net.Inet4Address; import java.net.UnknownHostException; /** * Twitter_Snowflake<br> * SnowFlake的结构如下(每部分用-分开):<br> * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 <br> * 1位标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0<br> * 41位时间截(毫秒级)，注意，41位时间截不是存储当前时间的时间截，而是存储时间截的差值（当前时间截 - 开始时间截) * 得到的值），这里的的开始时间截，一般是我们的id生成器开始使用的时间，由我们程序来指定的（如下下面程序IdWorker类的startTime属性）。41位的时间截，可以使用69年，年T = (1L << 41) / (1000L * 60 * 60 * 24 * 365) = 69<br> * 10位的数据机器位，可以部署在1024个节点，包括5位datacenterId和5位workerId<br> * 12位序列，毫秒内的计数，12位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生4096个ID序号<br> * 加起来刚好64位，为一个Long型。<br> * SnowFlake的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞(由数据中心ID和机器ID作区分)，并且效率较高，经测试，SnowFlake每秒能够产生26万ID左右。 */ public class SnowflakeIdWorker { // ==============================Fields=========================================== /** 开始时间截 (2015-01-01) */ private final long twepoch = 1489111610226L; /** 机器id所占的位数 */ private final long workerIdBits = 5L; /** 数据标识id所占的位数 */ private final long dataCenterIdBits = 5L; /** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */ private final long maxWorkerId = -1L ^ (-1L << workerIdBits); /** 支持的最大数据标识id，结果是31 */ private final long maxDataCenterId = -1L ^ (-1L << dataCenterIdBits); /** 序列在id中占的位数 */ private final long sequenceBits = 12L; /** 机器ID向左移12位 */ private final long workerIdShift = sequenceBits; /** 数据标识id向左移17位(12+5) */ private final long dataCenterIdShift = sequenceBits + workerIdBits; /** 时间截向左移22位(5+5+12) */ private final long timestampLeftShift = sequenceBits + workerIdBits + dataCenterIdBits; /** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */ private final long sequenceMask = -1L ^ (-1L << sequenceBits); /** 工作机器ID(0~31) */ private long workerId; /** 数据中心ID(0~31) */ private long dataCenterId; /** 毫秒内序列(0~4095) */ private long sequence = 0L; /** 上次生成ID的时间截 */ private long lastTimestamp = -1L; private static SnowflakeIdWorker idWorker; static { idWorker = new SnowflakeIdWorker(getWorkId(),getDataCenterId()); } //==============================Constructors===================================== /** * 构造函数 * @param workerId 工作ID (0~31) * @param dataCenterId 数据中心ID (0~31) */ public SnowflakeIdWorker(long workerId, long dataCenterId) { if (workerId > maxWorkerId || workerId < 0) { throw new IllegalArgumentException(String.format(\\\"workerId can't be greater than %d or less than 0\\\", maxWorkerId)); } if (dataCenterId > maxDataCenterId || dataCenterId < 0) { throw new IllegalArgumentException(String.format(\\\"dataCenterId can't be greater than %d or less than 0\\\", maxDataCenterId)); } this.workerId = workerId; this.dataCenterId = dataCenterId; } // ==============================Methods========================================== /** * 获得下一个ID (该方法是线程安全的) * @return SnowflakeId */ public synchronized long nextId() { long timestamp = timeGen(); //如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常 if (timestamp < lastTimestamp) { throw new RuntimeException( String.format(\\\"Clock moved backwards. Refusing to generate id for %d milliseconds\\\", lastTimestamp - timestamp)); } //如果是同一时间生成的，则进行毫秒内序列 if (lastTimestamp == timestamp) { sequence = (sequence + 1) & sequenceMask; //毫秒内序列溢出 if (sequence == 0) { //阻塞到下一个毫秒,获得新的时间戳 timestamp = tilNextMillis(lastTimestamp); } } //时间戳改变，毫秒内序列重置 else { sequence = 0L; } //上次生成ID的时间截 lastTimestamp = timestamp; //移位并通过或运算拼到一起组成64位的ID return ((timestamp - twepoch) << timestampLeftShift) | (dataCenterId << dataCenterIdShift) | (workerId << workerIdShift) | sequence; } /** * 阻塞到下一个毫秒，直到获得新的时间戳 * @param lastTimestamp 上次生成ID的时间截 * @return 当前时间戳 */ protected long tilNextMillis(long lastTimestamp) { long timestamp = timeGen(); while (timestamp <= lastTimestamp) { timestamp = timeGen(); } return timestamp; } /** * 返回以毫秒为单位的当前时间 * @return 当前时间(毫秒) */ protected long timeGen() { return System.currentTimeMillis(); } private static Long getWorkId(){ try { String hostAddress = Inet4Address.getLocalHost().getHostAddress(); int[] ints = StringUtils.toCodePoints(hostAddress); int sums = 0; for(int b : ints){ sums += b; } return (long)(sums % 32); } catch (UnknownHostException e) { // 如果获取失败，则使用随机数备用 return RandomUtils.nextLong(0,31); } } private static Long getDataCenterId(){ int[] ints = StringUtils.toCodePoints(SystemUtils.getHostName()); int sums = 0; for (int i: ints) { sums += i; } return (long)(sums % 32); } /** * 静态工具类 * * @return */ public static synchronized Long generateId(){ long id = idWorker.nextId(); return id; } //==============================Test============================================= /** 测试 */ public static void main(String[] args) { System.out.println(System.currentTimeMillis()); long startTime = System.nanoTime(); for (int i = 0; i < 50000; i++) { long id = SnowflakeIdWorker.generateId(); System.out.println(id); } System.out.println((System.nanoTime()-startTime)/1000000+\\\"ms\\\"); } }\",\"参考原文：https://blog.csdn.net/xiaopeng9275/article/details/72123709\",\"分享和在看是对我最大的鼓励。我是pub哥，我们下期见!\"]},\"442\":{\"c\":[\"数据结构\",\"雪花算法\"]},\"443\":{\"c\":[\"数据结构\"]},\"444\":{\"h\":\"ElasticSearch\"},\"445\":{\"c\":[\"elasticsearch\",\"springboot\"]},\"446\":{\"c\":[\"elasticsearch\",\"springboot\"]},\"447\":{\"h\":\"Springboot2.x整合ElasticSearch7.x实战（目录）\",\"t\":[\"本课程是实战课程，学习目标，在最短的时间学会使用elasticsearch7.x整合springboot。课程将在csdn学院上线。敬请期待\",\"@[toc]\",\"自我介绍\",\"elasticsearch springboot 介绍\",\"linux安装es，方法和要点\",\"es集群、初步配置和使用\",\"安装使用可视化工具插件head，Cerebro\",\"ik分词器插件安装\",\"拼音分词器插件安装\",\"自定义扩展词库\",\"Elasticsearch核心概念\",\"理解倒排索引\",\"例如倒排索引等内容\",\"mapping详解\",\"_source和_all字段解读\",\"https://blog.csdn.net/napoay/article/details/62233031\",\"搜索排序和高亮关键字\",\"https://blog.csdn.net/qq_38669394/article/details/87601992\",\"热加载组件，日志，api管理swagger，\",\"多环境配置\",\"新闻搜索页面设计\",\"新闻搜索结果页面设计\",\"索引构建\",\"CRUD新闻数据，批处理\",\"ES Java 进阶\",\"高亮，结果集分装，分页处理\",\"MySQL和Elasticsearch区别\",\"MySQL数据导入Elasticsearch搜索引擎\",\"搜索结果集展示\",\"搜索关键词高亮\",\"搜索结果优化排序和耗时处理\",\"搜索结果分页处理\",\"项目总结\",\"好事成双，这篇是附加篇，讲遇到的问题和难点\",\"在这里插入图片描述\",\"https://javapub.blog.csdn.net/category_8634753.html\"]},\"448\":{\"c\":[\"elasticsearch\",\"springboot\"]},\"449\":{\"c\":[\"elasticsearch\",\"springboot\"]},\"450\":{\"h\":\"Springboot2.x整合ElasticSearch7.x实战（一）\",\"t\":[\"学习一个新技术，最快的掌握方式就是先学会使用，让我们有了很强的满足感，在研究底层代码。\",\"本篇幅是继上一篇Springboot2.x整合ElasticSearch7.x实战目录，适合初学 Elasticsearch 的小白，可以跟着整个教程做一个练习。\",\"编者荐语：在大数据搜索中，Elasticsearch 使用频率非常高。学习 Java 了解大数据那是我们 Java 攻城狮很好的选择。\",\"[toc]\"]},\"451\":{\"h\":\"自我介绍\",\"t\":[\"大家好，我是pub哥\"]},\"452\":{\"h\":\"ElasticSearch SpringBoot 介绍\"},\"453\":{\"h\":\"ElasticSearch\",\"t\":[\"ElasticSearch 是一个开源的搜索引擎，建立在一个全文搜索引擎库 Apache Lucene™ 基础之上。 Lucene 可以说是当下最先进、高性能、全功能的搜索引擎库——无论是开源还是私有。\",\"ElasticSearch 使用 Java 编写的，它的内部使用的是 Lucene 做索引与搜索，它的目的是使全文检索变得简单，通过隐藏 Lucene 的复杂性，取而代之提供了一套简单一致的 RESTful API。\",\"然而，ElasticSearch 不仅仅是 Lucene，并且也不仅仅只是一个全文搜索引擎，它可以被下面这样准确地形容：\",\"一个分布式的实时文档存储，每个字段可以被索引与搜索\",\"一个分布式近实时分析搜索引擎\",\"能胜任上百个服务节点的扩展，并支持 PB 级别的结构化或者非结构化数据\",\"Elasticsearch 是与名为 Logstash 的数据收集和日志解析引擎以及名为 Kibana 的分析和可视化平台一起开发的。这三个产品被设计成一个集成解决方案，称为 “Elastic Stack” （以前称为“ELK stack”）。\"]},\"454\":{\"h\":\"SpringBoot\",\"t\":[\"Spring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化新 Spring 应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。用我的话来理解，就是 Spring Boot 其实不是什么新的框架，它默认配置了很多框架的使用方式，就像 Maven 整合了所有的 Jar 包，Spring Boot 整合了所有的框架。\",\"简单来说，使用 Spring Boot 可以非常方便、快速搭建项目，使我们不用关心框架之间的兼容性，适用版本等各种问题，我们想使用任何东西，仅仅添加一个配置就可以，所以使用 Spring Boot 非常适合构建微服务。\"]},\"455\":{\"h\":\"环境介绍\",\"t\":[\"centOS 7.3 JDK1.8 及以上 ElasticSearch 7.*\"]},\"456\":{\"h\":\"服务器环境\",\"t\":[\"确保你的服务器安装了 jdk1.8 或以上版本环境\",\"Elasticsearch通过文件映射(mmap)来读取磁盘中的文件，这样可以比read系统调用少一次内存拷贝，也被称为0拷贝技术。ES映射的文件会很多，所以需要修改最大映射文件的数量，通过修改vm.max_map_count配置项可实现。设置方式\",\"文件最后添加一行 vim /etc/sysctl.conf vm.max_map_count=262144\",\"以上几点是环境搭建的基础\"]},\"457\":{\"h\":\"Linux安装JDK\",\"t\":[\"es 最小支持 jdk 版本是 jdk8\"]},\"458\":{\"h\":\"Linux安装es，方法和要点\",\"t\":[\"国内版本镜像页：https://mirrors.huaweicloud.com/elasticsearch/\",\"下载：\",\"wget https://mirrors.huaweicloud.com/elasticsearch/7.7.0/elasticsearch-7.7.0-linux-x86_64.tar.gz\",\"解压：\",\"tar -zxvf elasticsearch-7.7.0-linux-x86_64.tar.gz\"]},\"459\":{\"h\":\"es集群、初步配置和使用\",\"t\":[\"设置堆内存，修改 jvm.options ，学习阶段初学者 200m 即可，示例如下。 -Xms200m -Xmx200m\",\"在启动前，先修改配置文件， config/elasticsearch.yml\",\"贴一下全部配置（ip地址是服务器对外访问地址）：\",\"cluster.name: my-application node.name: node01 node.master: true node.data: true #bootstrap.memory_lock: false #bootstrap.system_call_filter: false network.host: 0.0.0.0 http.port: 9200 transport.tcp.port: 9300 http.cors.enabled: true http.cors.allow-origin: \\\"*\\\" # 集群发现:配置该节点会与哪些候选地址进行通信，默认端口9300，可填ip;ip+port;域名 discovery.seed_hosts: [\\\"39.12.1.1\\\"] # cluster.initial_master_nodes: [\\\"39.12.1.1\\\"] discovery.zen.minimum_master_nodes: 1 #http.cors.allow-headers: Authorization #xpack.security.enabled: true #xpack.security.transport.ssl.enabled: true\"]},\"460\":{\"h\":\"启动：\",\"t\":[\"./bin/elasticsearch\",\"到此为止，单机版本已搭建完成。访问下面地址，可以看到我们的es版本信息。 http://ip+9200/\"]},\"461\":{\"h\":\"安装使用可视化工具插件head，Cerebro\",\"t\":[\"这里只介绍 cerebro 安装\",\"下载：\",\"wget https://github.com/lmenezes/cerebro/releases/download/v0.6.5/cerebro-0.6.5.tgz\",\"解压：\",\"tar zxvf cerebro-0.6.5.tgz\",\"启动：\",\"cd cerebro-0.6.5 bin/cerebro\",\"cerebro\",\"在看和分享是对我最大的鼓励，我是 pub 哥，我们下期再见\",\"财经相关： 有色趋势很不错，不懂的同学建议不要交太多学费。\"]},\"462\":{\"c\":[\"elasticsearch\",\"springboot\"]},\"463\":{\"c\":[\"elasticsearch\",\"springboot\"]},\"464\":{\"h\":\"Springboot2.x整合ElasticSearch7.x实战（二）\",\"t\":[\"本教程是系列教程，对于初学者可以对 ES 有一个整体认识和实践实战。\",\"还没开始的同学，建议先读一下系列攻略目录：Springboot2.x整合ElasticSearch7.x实战目录\",\"本篇幅是继上一篇 Springboot2.x整合ElasticSearch7.x实战（一） ，适合初学 Elasticsearch 的小白，可以跟着整个教程做一个练习。\",\"使用搜索，少不了使用分词器，elasticsearch 自带了一些简单分词器，也可以使用第三方分词器插件，如 ik、pinyin 等。\",\"Standard Analyzer - 默认分词器，按词切分，小写处理 Simple Analyzer - 按照非字母切分(符号被过滤), 小写处理 Stop Analyzer - 小写处理，停用词过滤(the,a,is) Whitespace Analyzer - 按照空格切分，不转小写 Keyword Analyzer - 不分词，直接将输入当作输出 Patter Analyzer - 正则表达式，默认\\\\W+(非字符分割) Language - 提供了30多种常见语言的分词器 Customer Analyzer 自定义分词器\"]},\"465\":{\"h\":\"ik分词器插件安装\",\"t\":[\"下载和elasticsearch版本一致\",\"教程使用的是 7.7.0 版本。\",\"准备 ik 目录，\",\"cd plugins && mkdir ik\",\"下载\",\"wget https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.7.0/elasticsearch-analysis-ik-7.7.0.zip 有些地方从github下载网络不好，我在课件里有插件压缩包。\",\"解压到对应ik目录\",\"解压文件到目录 elasticsearch-7.7.0/plugins/ik 下。\",\"重启es，查看是否安装成功\",\"curl http://localhost:9200/_cat/plugins\",\"rest 实例：\"]},\"466\":{\"h\":\"拼音分词器插件安装\",\"t\":[\"下载和elasticsearch版本一致\",\"教程使用的是 7.7.0 版本。\",\"准备 ik 目录，\",\"cd plugins && mkdir pinyin\",\"下载\",\"wget https://github.com/medcl/elasticsearch-analysis-pinyin/archive/v7.7.0.zip 有些地方从github下载网络不好，我在课件放了插件的压缩包。\",\"解压到对应pinyin目录\",\"解压文件到目录 elasticsearch-7.7.0/plugins/pinyin 下。\",\"重启es，查看是否安装成功\",\"curl http://localhost:9200/_cat/plugins\",\"安装目录截图\"]},\"467\":{\"h\":\"更多扩展词库\",\"t\":[\"同义词词库\",\"https://github.com/ginobefun/elasticsearch-dynamic-synonym/releases\",\"有些情况会使用我们自己的分词服务，后面代码中会讲解使用方式。\"]},\"468\":{\"h\":\"Elasticsearch核心概念-相关术语解析\"},\"469\":{\"h\":\"Cluster\",\"t\":[\"Elasticsearch 集群，由一台或多台的Elasticsearch 节点(Node)组成。\"]},\"470\":{\"h\":\"Node\",\"t\":[\"Elasticsearch 节点，可以认为是Elasticsearch的服务进程，在同一台机器上启动两个Elasticsearch实例(进程)，就是两个node节点。\"]},\"471\":{\"h\":\"Index\",\"t\":[\"索引，具有相同结构的文档的集合，类似于关系型数据库的数据库实例（6.0.0版本type废弃后，索引的概念下降到等同于数据库表的级别）。一个集群中可以有多个索引。\"]},\"472\":{\"h\":\"Type\",\"t\":[\"类型，在索引中内进行逻辑细分，在新版的Elasticsearch中已经废弃。\",\"关于 type 废弃问题，如果你需要维护低版本 elasticsearch（在7.0.0、6.*、5.6版本变化较大），一定要阅读这篇官方英文文档 https://www.elastic.co/guide/en/elasticsearch/reference/current/removal-of-types.html\"]},\"473\":{\"h\":\"Document\",\"t\":[\"文档，Elasticsearch中的最小的数据存储单元，JSON数据格式，很多相同结构的文档组成索引。文档类似于关系型数据库中表内的一行记录。\",\"举个例子，一篇新闻的文档数据。\",\"news document { \\\"id\\\":\\\"1\\\", \\\"title\\\":\\\"China is a great country\\\", \\\"content\\\":\\\"I love China.\\\" }\"]},\"474\":{\"h\":\"Shard\",\"t\":[\"分片，单个索引切分成多个shard，分布在多台Node节点上存储。可以利用shard很好的横向扩展，以存储更多的数据，同时shard分布在多台node上，可以提升集群整体的吞吐量和性能。在创建索引的时候可以直接指定分片的数量即可，一旦指定就不能再修改了。\"]},\"475\":{\"h\":\"Replica\",\"t\":[\"索引副本，完全拷贝shard的内容，一个shard可以有一个或者多个replica，replica就是shard的数据拷贝，以提高冗余。\",\"replica承担三个任务：\",\"shard故障或者node宕机时，其中的一个replica可以升级成shard\",\"replica保证数据不丢失，保证高可用\",\"replica可以分担搜索请求，提高集群的吞吐和性能\",\"shard 的全称叫 primary shard，replica 全称叫 replica shard，primary shard 数量在创建索引时指定，后期不能修改，replica shard 后期可以修改。默认每个索引的 primary shard 值为5，replica shard 值为1，含义是5个primary shard，5个 replica shard，共10个 shard。因此 Elasticsearch 最小的高可用配置是2台服务器。\"]},\"476\":{\"h\":\"理解倒排索引\",\"t\":[\"例如倒排索引等内容\"]},\"477\":{\"h\":\"倒排索引相关术语\",\"t\":[\"倒排索引（Inverted Index）是整个搜索的核心，倒排索引是实现“单词-文档矩阵”的一种具体存储形式，通过倒排索引，可以根据单词快速获取包含这个单词的文档列表。倒排索引主要由两个部分组成：“单词词典”和“倒排文件”。\",\"单词词典(Lexicon)：常索引单位是单词，单词词典是由文档集合中出现过的所有单词构成的字符串集合，单词词典内每条索引项记载单词本身的一些信息以及指向“倒排列表”的指针。\",\"倒排列表(PostingList)：倒排列表记载了出现过某个单词的所有文档的文档列表及单词在该文档中出现的位置信息，每条记录称为一个倒排项(Posting)。根据倒排列表，即可获知哪些文档包含某个单词。\",\"倒排文件(Inverted File)：所有单词的倒排列表往往顺序地存储在磁盘的某个文件里，这个文件即被称之为倒排文件，倒排文件是存储倒排索引的物理文件。\",\"概念关系：\"]},\"478\":{\"h\":\"简单倒排索引实例\",\"t\":[\"倒排索引从逻辑结构和基本思路上来讲非常简单。下面我们通过具体实例来进行说明，使得大家能够对倒排索引有一个宏观而直接的感受。\",\"假设有五个文档：\",\"通过分词后，每个文档就转换为由单词序列构成的数据流，为了系统后续处理方便，需要对每个不同的单词赋予唯一的单词编号，同时记录下哪些文档包含这个单词，在如此处理结束后，我们可以得到最简单的倒排索引。\",\"事实上，索引系统还可以记录除此之外的更多信息。下图是一个相对复杂些的倒排索引，与上图的基本索引系统比，在单词对应的倒排列表中不仅记录了文档编号，还记载了单词频率信息（TF），即这个单词在某个文档中的出现次数，之所以要记录这个信息，是因为词频信息在搜索结果排序时，计算查询和文档相似度是很重要的一个计算因子，所以将其记录在倒排列表中，以方便后续排序时进行分值计算。\",\"最后，实用的倒排索引还可以记载更多的信息，上图所示索引系统除了记录文档编号和单词频率信息外，额外记载了两类信息，即每个单词对应的“文档频率信息”（以及在倒排列表中记录单词在某个文档出现的位置信息。\",\"“文档频率信息”代表了在文档集合中有多少个文档包含某个单词，之所以要记录这个信息，其原因与单词频率信息一样，这个信息在搜索结果排序计算中是非常重要的一个因子。而单词在某个文档中出现的位置信息并非索引系统一定要记录的，在实际的索引系统里可以包含，也可以选择不包含这个信息，之所以如此，因为这个信息对于搜索系统来说并非必需的，位置信息只有在支持“短语查询”的时候才能够派上用场。\",\"参考：https://blog.csdn.net/hguisu/article/details/7969757\",\"微信搜：JavaPub\",\"在看和分享是对我最大的鼓励，我是 pub 哥，我们下期再见\"]},\"479\":{\"c\":[\"elasticsearch\",\"springboot\"]},\"480\":{\"c\":[\"elasticsearch\",\"springboot\"]},\"481\":{\"h\":\"Springboot2.x整合ElasticSearch7.x实战（三）\",\"t\":[\"大概阅读10分钟\",\"本教程是系列教程，对于初学者可以对 ES 有一个整体认识和实践实战。\",\"还没开始的同学，建议先读一下系列攻略目录：Springboot2.x整合ElasticSearch7.x实战目录\",\"本篇幅是继上一篇 Springboot2.x整合ElasticSearch7.x实战（二） ，适合初学 Elasticsearch 的小白，可以跟着整个教程做一个练习。\",\"[toc]\",\"Mapping 是整个 ES 搜索引擎中最重要的一部分之一，学会构建一个好的索引，可以让我们的搜索引擎更高效，更节省资源。\"]},\"482\":{\"h\":\"什么是 Mapping?\",\"t\":[\"Mapping 是Elasticsearch 中一种术语， Mapping 类似于数据库中的表结构定义 schema，它有以下几个作用：\",\"1. 定义索引中的字段的名称 2. 定义字段的数据类型，比如字符串、数字、布尔 3. 字段，倒排索引的相关配置，比如设置某个字段为不被索引、记录 position(位置) 等 \",\"在 ES 早期版本，一个索引下是可以有多个 Type ，从 7.0 开始，一个索引只有一个 Type，也可以说一个 Type 有一个 Mapping 定义。\",\"了解了什么是 Mapping 后，接下来对 Mapping 的设置坐下介绍：\"]},\"483\":{\"h\":\"Maping设置\"},\"484\":{\"h\":\"dynamic (动态Mapping)\",\"t\":[\"官网参考：https://www.elastic.co/guide/en/elasticsearch/reference/7.1/mapping.html\",\"PUT users { \\\"mappings\\\": { \\\"_doc\\\": { \\\"dynamic\\\": false } } }\",\"在创建一个索引的时候，可以对 dynamic 进行设置，可以设成 false、true 或者 strict。\",\"dynamic参数设置\",\"比如一个新的文档，这个文档包含一个字段，当 Dynamic 设置为 true 时，这个文档可以被索引进 ES，这个字段也可以被索引，也就是这个字段可以被搜索，Mapping 也同时被更新；当 dynamic 被设置为 false 时候，存在新增字段的数据写入，该数据可以被索引，但是新增字段被丢弃；当设置成 strict 模式时候，数据写入直接出错。\"]},\"485\":{\"h\":\"index\",\"t\":[\"另外还有 index 参数，用来控制当前字段是否被索引，默认为 true，如果设为 false（有些业务场景，某些字段不希望被搜索到），则该字段不可被搜索。\",\"# index属性控制 字段是否可以被索引 PUT user_test { \\\"mappings\\\": { \\\"properties\\\": { \\\"firstName\\\":{ \\\"type\\\": \\\"text\\\" }, \\\"lastName\\\":{ \\\"type\\\": \\\"text\\\" }, \\\"mobile\\\" :{ \\\"type\\\": \\\"text\\\", \\\"index\\\": false } } } }\"]},\"486\":{\"h\":\"index_options\",\"t\":[\"index_options\",\"参数 index_options 用于控制倒排索引记录的内容，有如下 4 种配置：\",\"doc：只记录 doc id\",\"freqs：记录 doc id 和 term frequencies\",\"positions：记录 doc id、term frequencies 和 term position\",\"offsets：记录 doc id、term frequencies、term position 和 character offects\",\"另外，text 类型默认配置为 positions，其他类型默认为 doc，记录内容越多，占用存储空间越大。\"]},\"487\":{\"h\":\"null_value\",\"t\":[\"null_value 主要是当字段遇到 null 值时的处理策略，默认为 NULL，即空值，此时 ES 会默认忽略该值，可以通过设定该值设定字段的默认值，另外只有 KeyWord 类型支持设定 null_value。\",\"示例\",\"# 设定Null_value DELETE users PUT users { \\\"mappings\\\" : { \\\"properties\\\" : { \\\"firstName\\\" : { \\\"type\\\" : \\\"text\\\" }, \\\"lastName\\\" : { \\\"type\\\" : \\\"text\\\" }, \\\"mobile\\\" : { \\\"type\\\" : \\\"keyword\\\", \\\"null_value\\\": \\\"NULL\\\" } } } } PUT users/_doc/1 { \\\"firstName\\\":\\\"Zhang\\\", \\\"lastName\\\": \\\"Fubing\\\", \\\"mobile\\\": null } PUT users/_doc/2 { \\\"firstName\\\":\\\"Zhang\\\", \\\"lastName\\\": \\\"Fubing2\\\" } # 查看结果，有且仅有_id为2的记录 GET users/_search { \\\"query\\\": { \\\"match\\\": { \\\"mobile\\\":\\\"NULL\\\" } } }\"]},\"488\":{\"h\":\"_all\",\"t\":[\"这个属性现在使用很少，不做深入讲解\",\"参考官网：https://www.elastic.co/guide/cn/elasticsearch/guide/current/root-object.html\"]},\"489\":{\"h\":\"copy_to\",\"t\":[\"这个属性用于将当前字段拷贝到指定字段。\",\"_all在7.x版本已经被copy_to所代替\",\"可用于满足特定场景\",\"copy_to将字段数值拷贝到目标字段，实现类似_all的作用\",\"copy_to的目标字段不出现在_source中\",\"DELETE users PUT users { \\\"mappings\\\": { \\\"properties\\\": { \\\"firstName\\\":{ \\\"type\\\": \\\"text\\\", \\\"copy_to\\\": \\\"fullName\\\" }, \\\"lastName\\\":{ \\\"type\\\": \\\"text\\\", \\\"copy_to\\\": \\\"fullName\\\" } } } } PUT users/_doc/1 { \\\"firstName\\\":\\\"Li\\\", \\\"lastName\\\": \\\"Sunke\\\" } //没有新建字段 GET users/_doc/1 { \\\"_index\\\" : \\\"users\\\", \\\"_type\\\" : \\\"_doc\\\", \\\"_id\\\" : \\\"1\\\", \\\"_version\\\" : 1, \\\"_seq_no\\\" : 0, \\\"_primary_term\\\" : 1, \\\"found\\\" : true, \\\"_source\\\" : { \\\"firstName\\\" : \\\"Li\\\", \\\"lastName\\\" : \\\"Sunke\\\" } } GET users/_search?q=fullName:(Li sunke)\",\"以前的用法是：\",\"curl -XPUT 'localhost:9200/my_index?pretty' -H 'Content-Type: application/json' -d' { \\\"mappings\\\": { \\\"my_type\\\": { \\\"properties\\\": { \\\"first_name\\\": { \\\"type\\\": \\\"text\\\", \\\"copy_to\\\": \\\"full_name\\\" # 1 }, \\\"last_name\\\": { \\\"type\\\": \\\"text\\\", \\\"copy_to\\\": \\\"full_name\\\" # 2 }, \\\"full_name\\\": { \\\"type\\\": \\\"text\\\" } } } } } ' curl -XPUT 'localhost:9200/my_index/my_type/1?pretty' -H 'Content-Type: application/json' -d' { \\\"first_name\\\": \\\"John\\\", \\\"last_name\\\": \\\"Smith\\\" } ' curl -XGET 'localhost:9200/my_index/_search?pretty' -H 'Content-Type: application/json' -d' { \\\"query\\\": { \\\"match\\\": { \\\"full_name\\\": { # 3 \\\"query\\\": \\\"John Smith\\\", \\\"operator\\\": \\\"and\\\" } } } } '\",\"first_name（名字）和 last_name（姓氏）字段复制到full_name 字段；\",\"first_name（名字）和 last_name（姓氏）字段仍然可以分别查询；\",\"full_name 可以通过 first_name（名字）和 last_name（姓氏）来查询；\",\"一些要点:\",\"复制的是字段值,而不是 term（词条）（由分析过程产生）.\",\"_source 字段不会被修改来显示复制的值.\",\"相同的值可以复制到多个字段,通过 \\\"copy_to\\\": [ \\\"field_1\\\", \\\"field_2\\\" ] 来操作.\"]},\"490\":{\"h\":\"分词器analyzer和arch_analyzer\",\"t\":[\"PUT /my_index { \\\"mappings\\\": { \\\"properties\\\": { \\\"text\\\": { \\\"type\\\": \\\"text\\\", \\\"fields\\\": { \\\"english\\\": { \\\"type\\\": \\\"text\\\", \\\"analyzer\\\": \\\"english\\\", \\\"search_analyzer\\\": \\\"english\\\" } } } } } } #使用_analyze 测试分词器 GET my_index/_analyze { \\\"field\\\": \\\"text\\\", \\\"text\\\": \\\"The quick Brown Foxes.\\\" } GET my_index/_analyze { \\\"field\\\": \\\"text.english\\\", \\\"text\\\": \\\"The quick Brown Foxes.\\\" }\"]},\"491\":{\"h\":\"构建Mapping方式\",\"t\":[\"我们知道 Mapping 是可以通过我们插入的文档自动生成索引，但是可能还是有一些问题。例如：生成的字段类型不正确，字段的附加属性不满足我们的需求。这是我们可以通过显式Mapping的方式来解决。俩种方法：\",\"参考官网api，纯手写\",\"构建临时索引；写入一些样本数据；通过Maping API 查询临时文件的动态Mapping 定义；修改后、再使用此配置创建索引；删除临时索引；\",\"推荐第二种，不容易出错，效率高。\"]},\"492\":{\"h\":\"类型自动识别\",\"t\":[\"ES 类型的自动识别是基于 JSON 的格式，如果输入的是 JSON 是字符串且格式为日期格式，ES 会自动设置成 Date 类型；当输入的字符串是数字的时候，ES 默认会当成字符串来处理，可以通过设置来转换成合适的类型；如果输入的是 Text 字段的时候，ES 会自动增加 keyword 子字段，还有一些自动识别如下图所示：\",\"类型自动识别字段对应表\",\"Demo：\",\"# 写入文档，查看 Mapping PUT mapping_test/_doc/1 { \\\"firstName\\\": \\\"Chan\\\", -- Text \\\"lastName\\\": \\\"Jackie\\\", -- Text \\\"loginDate\\\": \\\"2018-07-24T10:29:48.103Z\\\" -- Date } # Dynamic Mapping，推断字段的类型 PUT mapping_test/_doc/1 { \\\"uid\\\": \\\"123\\\", -- Text \\\"isVip\\\": false, -- Boolean \\\"isAdmin\\\": \\\"true\\\", -- Text \\\"age\\\": 19, -- Long \\\"heigh\\\": 180 -- Long } # 查看 Dynamic Mapping GET mapping_test/_mapping\"]},\"493\":{\"h\":\"映射参数\",\"t\":[\"映射参数解析\",\"mappings 中field定义选择：\",\"\\\"field\\\": { \\\"type\\\": \\\"text\\\", //文本类型 \\\"index\\\": \\\"false\\\"// ，设置成false，字段将不会被索引 \\\"analyzer\\\":\\\"ik\\\"//指定分词器 \\\"boost\\\":1.23//字段级别的分数加权 \\\"doc_values\\\":false//对not_analyzed字段，默认都是开启，analyzed字段不能使用，对排序和聚合能提升较大性能，节约内存,如果您确定不需要对字段进行排序或聚合，或者从script访问字段值，则可以禁用doc值以节省磁盘空间： \\\"fielddata\\\":{\\\"loading\\\" : \\\"eager\\\" }//Elasticsearch 加载内存 fielddata 的默认行为是 延迟 加载 。 当 Elasticsearch 第一次查询某个字段时，它将会完整加载这个字段所有 Segment 中的倒排索引到内存中，以便于以后的查询能够获取更好的性能。 \\\"fields\\\":{\\\"keyword\\\": {\\\"type\\\": \\\"keyword\\\",\\\"ignore_above\\\": 256}} //可以对一个字段提供多种索引模式，同一个字段的值，一个分词，一个不分词 \\\"ignore_above\\\":100 //超过100个字符的文本，将会被忽略，不被索引 \\\"include_in_all\\\":ture//设置是否此字段包含在_all字段中，默认是true，除非index设置成no选项 \\\"index_options\\\":\\\"docs\\\"//4个可选参数docs（索引文档号） ,freqs（文档号+词频），positions（文档号+词频+位置，通常用来距离查询），offsets（文档号+词频+位置+偏移量，通常被使用在高亮字段）分词字段默认是position，其他的默认是docs \\\"norms\\\":{\\\"enable\\\":true,\\\"loading\\\":\\\"lazy\\\"}//分词字段默认配置，不分词字段：默认{\\\"enable\\\":false}，存储长度因子和索引时boost，建议对需要参与评分字段使用 ，会额外增加内存消耗量 \\\"null_value\\\":\\\"NULL\\\"//设置一些缺失字段的初始化值，只有string可以使用，分词字段的null值也会被分词 \\\"position_increament_gap\\\":0//影响距离查询或近似查询，可以设置在多值字段的数据上火分词字段上，查询时可指定slop间隔，默认值是100 \\\"store\\\":false//是否单独设置此字段的是否存储而从_source字段中分离，默认是false，只能搜索，不能获取值 \\\"search_analyzer\\\":\\\"ik\\\"//设置搜索时的分词器，默认跟ananlyzer是一致的，比如index时用standard+ngram，搜索时用standard用来完成自动提示功能 \\\"similarity\\\":\\\"BM25\\\"//默认是TF/IDF算法，指定一个字段评分策略，仅仅对字符串型和分词类型有效 \\\"term_vector\\\":\\\"no\\\"//默认不存储向量信息，支持参数yes（term存储），with_positions（term+位置）,with_offsets（term+偏移量），with_positions_offsets(term+位置+偏移量) 对快速高亮fast vector highlighter能提升性能，但开启又会加大索引体积，不适合大数据量用 }\",\"总结一下：\",\"与域数据格式及约束相关的参数：normalizer，format，ignore_above，ignore_malformed，coerce\",\"与索引相关的参数：index，dynamic，enabled\",\"与存储策略相关的参数：store, fielddata，doc_values\",\"分析器相关参数：analyzer，search_analyzer\",\"其它参数：boost，copy_to，null_value\",\"对于这些参数的描述主要基于笔者的理解，可能有不准确之处。实际上这些参数与ES的实现机制（如存储结构，索引结构密切有关），只能在实际应用中去慢慢体会。\"]},\"494\":{\"h\":\"字段数据类型\",\"t\":[\"ES 字段类型类似于 MySQL 中的字段类型，ES 字段类型主要有：核心类型、复杂类型、地理类型以及特殊类型，具体的数据类型如下图所示：\",\"es字段数据类型\"]},\"495\":{\"h\":\"核心类型\",\"t\":[\"从图中可以看出核心类型可以划分为字符串类型、数字类型、日期类型、布尔类型、基于 BASE64 的二进制类型、范围类型。\"]},\"496\":{\"h\":\"字符串类型\",\"t\":[\"其中，在 ES 7.x 有两种字符串类型：text 和 keyword，在 ES 5.x 之后 string 类型已经不再支持了。\",\"text 类型适用于需要被全文检索的字段，例如新闻正文、邮件内容等比较长的文字，text 类型会被 Lucene 分词器（Analyzer）处理为一个个词项，并使用 Lucene 倒排索引存储，text 字段不能被用于排序，如果需要使用该类型的字段只需要在定义映射时指定 JSON 中对应字段的 type 为 text。\",\"keyword 适合简短、结构化字符串，例如主机名、姓名、商品名称等，可以用于过滤、排序、聚合检索，也可以用于精确查询。\"]},\"497\":{\"h\":\"数字类型\",\"t\":[\"数字类型分为 long、integer、short、byte、double、float、half_float、scaled_float。\",\"数字类型的字段在满足需求的前提下应当尽量选择范围较小的数据类型，字段长度越短，搜索效率越高，对于浮点数，可以优先考虑使用 scaled_float 类型，该类型可以通过缩放因子来精确浮点数，例如 12.34 可以转换为 1234 来存储。\"]},\"498\":{\"h\":\"日期类型\",\"t\":[\"在 ES 中日期可以为以下形式：\",\"格式化的日期字符串，例如 2020-03-17 00:00、2020/03/17 时间戳（和 1970-01-01 00:00:00 UTC 的差值），单位毫秒或者秒 即使是格式化的日期字符串，ES 底层依然采用的是时间戳的形式存储。\"]},\"499\":{\"h\":\"布尔类型\",\"t\":[\"JSON 文档中同样存在布尔类型，不过 JSON 字符串类型也可以被 ES 转换为布尔类型存储，前提是字符串的取值为 true 或者 false，布尔类型常用于检索中的过滤条件。\"]},\"500\":{\"h\":\"二进制类型\",\"t\":[\"二进制类型 binary 接受 BASE64 编码的字符串，默认 store 属性为 false，并且不可以被搜索。\"]},\"501\":{\"h\":\"范围类型\",\"t\":[\"范围类型可以用来表达一个数据的区间，可以分为5种：integer_range、float_range、long_range、double_range 以及 date_range。\"]},\"502\":{\"h\":\"复杂类型\",\"t\":[\"复合类型主要有对象类型（object）和嵌套类型（nested）：\"]},\"503\":{\"h\":\"对象类型\",\"t\":[\"JSON 字符串允许嵌套对象，一个文档可以嵌套多个、多层对象。可以通过对象类型来存储二级文档，不过由于 Lucene 并没有内部对象的概念，ES 会将原 JSON 文档扁平化，例如文档：\",\"{ \\\"name\\\": { \\\"first\\\": \\\"wu\\\", \\\"last\\\": \\\"px\\\" } }\",\"实际上 ES 会将其转换为以下格式，并通过 Lucene 存储，即使 name 是 object 类型：\",\"{ \\\"name.first\\\": \\\"wu\\\", \\\"name.last\\\": \\\"px\\\" }\"]},\"504\":{\"h\":\"嵌套类型\",\"t\":[\"嵌套类型可以看成是一个特殊的对象类型，可以让对象数组独立检索，例如文档：\",\"{ \\\"group\\\": \\\"users\\\", \\\"username\\\": [ { \\\"first\\\": \\\"wu\\\", \\\"last\\\": \\\"px\\\"}, { \\\"first\\\": \\\"hu\\\", \\\"last\\\": \\\"xy\\\"}, { \\\"first\\\": \\\"wu\\\", \\\"last\\\": \\\"mx\\\"} ] }\",\"username 字段是一个 JSON 数组，并且每个数组对象都是一个 JSON 对象。如果将 username 设置为对象类型，那么 ES 会将其转换为：\",\"{ \\\"group\\\": \\\"users\\\", \\\"username.first\\\": [\\\"wu\\\", \\\"hu\\\", \\\"wu\\\"], \\\"username.last\\\": [\\\"px\\\", \\\"xy\\\", \\\"mx\\\"] }\",\"可以看出转换后的 JSON 文档中 first 和 last 的关联丢失了，如果尝试搜索 first 为 wu，last 为 xy 的文档，那么成功会检索出上述文档，但是 wu 和 xy 在原 JSON 文档中并不属于同一个 JSON 对象，应当是不匹配的，即检索不出任何结果。\",\"嵌套类型就是为了解决这种问题的，嵌套类型将数组中的每个 JSON 对象作为独立的隐藏文档来存储，每个嵌套的对象都能够独立地被搜索，所以上述案例中虽然表面上只有 1 个文档，但实际上是存储了 4 个文档。\"]},\"505\":{\"h\":\"地理类型\",\"t\":[\"地理类型字段分为两种：经纬度类型和地理区域类型：\"]},\"506\":{\"h\":\"经纬度类型\",\"t\":[\"经纬度类型字段（geo_point）可以存储经纬度相关信息，通过地理类型的字段，可以用来实现诸如查找在指定地理区域内相关的文档、根据距离排序、根据地理位置修改评分规则等需求。\"]},\"507\":{\"h\":\"地理区域类型\",\"t\":[\"经纬度类型可以表达一个点，而 geo_shape 类型可以表达一块地理区域，区域的形状可以是任意多边形，也可以是点、线、面、多点、多线、多面等几何类型。\"]},\"508\":{\"h\":\"特殊类型\",\"t\":[\"特殊类型包括 IP 类型、过滤器类型、Join 类型、别名类型等，在这里简单介绍下 IP 类型和 Join 类型，其他特殊类型可以查看官方文档。\"]},\"509\":{\"h\":\"IP 类型\",\"t\":[\"IP 类型的字段可以用来存储 IPv4 或者 IPv6 地址，如果需要存储 IP 类型的字段，需要手动定义映射：\",\"{ \\\"mappings\\\": { \\\"properties\\\": { \\\"my_ip\\\": { \\\"type\\\": \\\"ip\\\" } } } }\"]},\"510\":{\"h\":\"Join类型\",\"t\":[\"Join 类型是 ES 6.x 引入的类型，以取代淘汰的 _parent 元字段，用来实现文档的一对一、一对多的关系，主要用来做父子查询。\",\"Join 类型的 Mapping 如下：\",\"PUT my_index { \\\"mappings\\\": { \\\"properties\\\": { \\\"my_join_field\\\": { \\\"type\\\": \\\"join\\\", \\\"relations\\\": { \\\"question\\\": \\\"answer\\\" } } } } }\",\"其中，my_join_field 为 Join 类型字段的名称；relations 指定关系：question 是 answer 的父类。\",\"例如定义一个 ID 为 1 的父文档：\",\"PUT my_join_index/1?refresh { \\\"text\\\": \\\"This is a question\\\", \\\"my_join_field\\\": \\\"question\\\" }\",\"接下来定义一个子文档，该文档指定了父文档 ID 为 1：\",\"PUT my_join_index/_doc/2?routing=1&refresh { \\\"text\\\": \\\"This is an answer\\\", \\\"my_join_field\\\": { \\\"name\\\": \\\"answer\\\", \\\"parent\\\": \\\"1\\\" } }\",\"join参考：https://www.elastic.co/guide/en/elasticsearch/reference/current/parent-join.html\"]},\"511\":{\"c\":[\"elasticsearch\",\"springboot\"]},\"512\":{\"c\":[\"elasticsearch\",\"springboot\"]},\"513\":{\"h\":\"Springboot2.x整合ElasticSearch7.x实战（四）\",\"t\":[\"本教程是系列教程，对于初学者可以对 ES 有一个整体认识和实践实战。\",\"还没开始的同学，建议先读一下系列攻略目录：Springboot2.x整合ElasticSearch7.x实战目录\",\"本篇幅是继上一篇 Springboot2.x整合ElasticSearch7.x实战（三） ，适合初学 Elasticsearch 的小白，可以跟着整个教程做一个练习。\",\"[toc]\",\"本篇都是基于前面搭建的环境来讲解，可视化使用的是 Cerebro v0.8.3。\",\"下文提到了很多 REST 操作，主要对创建索引和搜索做讲解。\"]},\"514\":{\"h\":\"集群\"},\"515\":{\"h\":\"检查集群状态\",\"t\":[\"curl http://localhost:9200/_cat/health?v\",\"更多查询集群状态的命令：\",\"curl http://localhost:9200/_cat\"]},\"516\":{\"h\":\"检查节点状态\"},\"517\":{\"h\":\"查询全部索引\"},\"518\":{\"h\":\"索引\"},\"519\":{\"h\":\"创建索引\"},\"520\":{\"h\":\"删除索引\"},\"521\":{\"h\":\"查询索引\"},\"522\":{\"h\":\"数据操作\"},\"523\":{\"h\":\"插入数据\"},\"524\":{\"h\":\"单条插入\"},\"525\":{\"h\":\"批量插入\"},\"526\":{\"h\":\"删除\"},\"527\":{\"h\":\"更新\"},\"528\":{\"h\":\"搜索\"},\"529\":{\"c\":[\"elasticsearch\",\"springboot\"]},\"530\":{\"c\":[\"elasticsearch\",\"springboot\"]},\"531\":{\"h\":\"Solidity\",\"t\":[\"技术和业务角度看区块链\"]},\"532\":{\"c\":[\"区块链\",\"soldity\",\"智能合约\"]},\"533\":{\"c\":[\"区块链\",\"soldity\",\"智能合约\"]},\"534\":{\"h\":\"空投合约\",\"t\":[\"关于 solidity、空投、智能合约\",\"空投作为区块链行业最大的惊喜之一，很多人都是通过空投才接触到了这一领域。\",\"甚至有很多专业薅空投羊毛的专业玩家。行业内有句话，小薅养活妻儿、大薅...\",\"[toc]\"]},\"535\":{\"h\":\"前言\",\"t\":[\"今天我们一块来看看\"]},\"536\":{\"h\":\"空投到底是什么\",\"t\":[\"简单来说，空投就是一种营销策略，希望将大家留在这个玩法中，有人气了就有共识，有共识就有价值。\",\"这里会涉及到一些运营的知识，为了用户有参与感，会让他们做一些任务、比如邀请、签到、分享等等，主要为了裂变、奖励机制、社区建设。总的来说，这个玩法从诞生起就很适合传播。\"]},\"537\":{\"h\":\"空投什么？\",\"t\":[\"以太坊为例。\",\"空投一般会是 ERC20 代币、或者是 ERC721 NFT 居多。\"]},\"538\":{\"h\":\"空投合约代码\",\"t\":[\"空投合约代码分为很多种，这主要基于产品设计的方案。下面分析一种比较常见的方式：\",\"需求： 当用户符合我设置的条件，点击领取就可以获取到对应空投。\"]},\"539\":{\"h\":\"空投步骤\",\"t\":[\"部署合约\",\"项目方部署空投合约，将打算发放空投的代币转入空投合约地址。\",\"设置条件\",\"合约中设置条件，比如用户持有一定数量的某种代币，或者完成某个任务（比如完成任务后的用户地址里有某个 NFT）。\",\"自动分发\",\"满足条件，自动发送代币到用户地址。\"]},\"540\":{\"h\":\"代码解析\",\"t\":[\"// SPDX-License-Identifier: MIT pragma solidity ^0.8.0; contract AirdropContract { address public owner; mapping(address => bool) public claimed; uint public totalClaimed; uint public totalSupply; constructor(uint _totalSupply) { owner = msg.sender; totalSupply = _totalSupply; } function claim() public { require(!claimed[msg.sender], \\\"Already claimed\\\"); require(totalClaimed < totalSupply, \\\"Airdrop finished\\\"); uint amount = 100; // 每个用户可以领取的代币数量 require(totalClaimed + amount <= totalSupply, \\\"Not enough tokens\\\"); claimed[msg.sender] = true; totalClaimed += amount; payable(msg.sender).transfer(amount * 1 ether); // 假设代币是以太币 } function finish() public { require(msg.sender == owner, \\\"Only owner can finish airdrop\\\"); require(totalClaimed < totalSupply, \\\"Airdrop finished\\\"); payable(owner).transfer(address(this).balance); } }\"]},\"541\":{\"h\":\"代码详解\",\"t\":[\"如果你了解其他的编程语言，看 solidity 就会感觉很谨慎，这也是这门语言的特点，不要放过任何一个你模凌两可的点。\",\"// 代码开源协议，不写也行，但是目前多数编辑器会强制让写 // SPDX-License-Identifier: MIT // solidity 版本，表示支持 0.8.0 及以上版本 pragma solidity ^0.8.0; // 合约名 contract AirdropContract { // owner 一般存储合约的所有者地址，可以看到他的类型是 address address public owner; // 就和Java中map一样，这用于存储已经领取过空投的代币地址 mapping(address => bool) public claimed; // 存储已领取代币数 uint public totalClaimed; // 存储总代币数 uint public totalSupply; // 构造函数，也就是合约初始化时调用的函数，这里指定了空投合约拥有者地址和发型代币总数 constructor(uint _totalSupply) { owner = msg.sender; totalSupply = _totalSupply; } // 领取代币的函数 function claim() public { // 判断是否领取过 require(!claimed[msg.sender], \\\"Already claimed\\\"); // 判断被领取的代币是否超过总的额度， require(totalClaimed < totalSupply, \\\"Airdrop finished\\\"); uint amount = 100; // 每个用户可以领取的代币数量 // 再加一次校验，防止领超 require(totalClaimed + amount <= totalSupply, \\\"Not enough tokens\\\"); // 写入去重map，防止重复领取 claimed[msg.sender] = true; // 累加被领取的代币总和 totalClaimed += amount; // 将空投代币发送到制定地址 payable(msg.sender).transfer(amount * 1 ether); // 假设代币是以太币 } // 当活动结束有些代币可能未被领取，由 owner 可以领取回 function finish() public { // require 就是断言的作用，如果前面的判断为 True 就通过，否则中断并打印后面的说明 require(msg.sender == owner, \\\"Only owner can finish airdrop\\\"); require(totalClaimed < totalSupply, \\\"Airdrop finished\\\"); payable(owner).transfer(address(this).balance); } }\"]},\"542\":{\"c\":[\"区块链\",\"soldity\",\"空投\",\"智能合约\"]},\"543\":{\"c\":[\"区块链\",\"soldity\",\"空投\",\"智能合约\"]},\"544\":{\"h\":\"Telegram\",\"t\":[\"技术和业务角度看世界\"]},\"545\":{\"c\":[\"区块链\",\"telegram\"]},\"546\":{\"c\":[\"区块链\",\"telegram\"]},\"547\":{\"h\":\"TelegramBot自动回复\",\"t\":[\"技术视角\",\"[toc]\"]},\"548\":{\"h\":\"点击 /start，发文字、外链\",\"t\":[\"进入 bot，推送文本内容。比如欢迎语言之类的。\",\"在这里插入图片描述\"]},\"549\":{\"h\":\"点击 /start，出现外链、链接键盘、按钮\",\"t\":[\"进入 bot，点击 /start，出现键盘可点击外链。键盘排列是完全可定制的\",\" 点击按钮后，出现跳转外链提示。 \"]},\"550\":{\"h\":\"通过键盘交互，做一些操作。买卖｜钱包｜我的\",\"t\":[\"如上一个所示，查询信息等交互。对接服务端玩法，玩法很丰富、随意自定义。\"]},\"551\":{\"h\":\"其他、挂@单\",\"t\":[\"玩法很多。\",\"在这里插入图片描述\",\"点击获取：https://github.com/Rodert/JavaPub\",\"需要一定的回报，屏蔽白嫖党，多少随意。致敬万U户。\",\"闹着玩@@@\"]},\"552\":{\"c\":[\"区块链\",\"telegram\"]},\"553\":{\"c\":[\"区块链\",\"telegram\"]},\"554\":{\"h\":\"MySQL\"},\"555\":{\"h\":\"MySQL索引18连问_谁能顶住\",\"t\":[\"MySQL索引18连问，谁能顶住\",\"知乎 | 掘金\"]},\"556\":{\"h\":\"前言\",\"t\":[\"过完这个节，就要进入金银季，准备了 18 道 MySQL 索引题，一定用得上。\",\"image-20240325195000388\",\"作者：\",\"感谢每一个支持： github\"]},\"557\":{\"h\":\"1. 索引是什么\",\"t\":[\"image-20240325200012764\",\"索引是一种数据结构，用来帮助提升查询和检索数据速度。可以理解为一本书的目录，帮助定位数据位置。\",\"索引是一个文件，它要占用物理空间。\"]},\"558\":{\"h\":\"2. MySQL索引有哪些类型\",\"t\":[\"image-20240325195743437\",\"数据结构维度\",\"B+tree 索引： B+树是最常用的索引类型，所有数据都会存储在叶子节点上，时间复杂度是 O(logn) ，擅长范围查询。\",\"Hash 索引： 哈希索引就是采用哈希算法，将键值换算成新的哈希值，映射到对应槽位，然后存储到哈希表中，擅长做对等比较（=，in）。\",\"Full-text 索引： 全文索引是一种建立倒排索引，实现信息检索。在 MySQL 不同版本中支持程度不同。\",\"R-Tree 索引： 属于地理空间数据类型查询，通常使用较少。\",\"物理存储维度\",\"簇 cù\",\"聚簇索引： InnoDB 引擎 要求必须有聚簇索引，也就是在主键字段建立聚簇索引。\",\"非聚簇索引： 非聚簇索引就是以非主键创建的索引，在叶子节点存储的是表主键和索引列。 InnoDB 引擎\",\"逻辑维度\",\"主键索引： 主键索引是一种特殊的唯一索引，不允许值重复或者值为空。\",\"普通索引： 普通索引是 MySQL 中最基本的索引类型，允许在定义索引的列中插入重复值和空值。\",\"联合索引： 联合索引指多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。使用联合索引时遵循最左前缀集合。\",\"唯一索引： 唯一索引列的值必须唯一，允许有空值。\",\"空间索引： 空间索引是一种针对空间数据类型（如点、线、多边形等）建立的特殊索引，用于加速地理空间数据的查询和检索操作。\"]},\"559\":{\"h\":\"3. 主键索引和唯一索引有什么区别\",\"t\":[\"数量限制： 唯一索引有多个，但是主键索引一张表只能有一个。\",\"本质区别： 被唯一索引约束的健可以为空，主键索引不可以。\",\"外键引用： 主键可以被其他表作为外键，从而建立表之间的关系。而唯一索引则不能被其他表用作外键。\"]},\"560\":{\"h\":\"4. 什么是聚簇索引和非聚簇索引？它们在InnoDB存储引擎中是如何工作的？\",\"t\":[\"聚簇索引是将表的数据按照索引顺序存储在磁盘上，聚簇索引的叶子节点直接存储了实际的数据行，而不是指向数据的指针。所以在查询的时候减少了磁盘的随机读取，无需进行多次磁盘I/O效率很高。\",\"非聚簇索引是一种基于指针的索引，有时也叫它二级索引。非聚簇索引不直接存储实际的数据，seelec 语句在执行查询时，会先根据二级索引定位到数据所在的磁盘位置，然后再进行一次磁盘I/O操作，读取实际的数据行。\"]},\"561\":{\"h\":\"5. 复合索引和单列索引有何区别？\",\"t\":[\"顾名思义，单列索引就是在一个列上创建的索引，复合索引就是多个列上创建的索引。\",\"当只涉及到一个字段查询，单列是非常快速的。当涉及到多个字段查询，WHERE 子句引用了符合索引的所有列或者前导列时，查询速度会非常快。\",\"在复合索引中，列的顺序非常重要。MySQL会按照索引中列的顺序从左到右进行匹配。例如，对于复合索引(a, b, c)，它可以支持a、a,b和a,b,c三种组合的查询，但不支持b,c进行查询。因此，在创建复合索引时，应把最常被访问和选择性较高的列放在前面。\",\"当然具体如何选择需要看查询需求、数据分布和性能要求。如果你有开发需要欢迎在 JavaPub 下留言讨论。\"]},\"562\":{\"h\":\"6. Hash 索引和 B+ 树索引区别是什么？如何选择？\",\"t\":[\"哈希索引：\",\"工作原理：通过哈希算法将被索引的列的值存储到一个固定长度的桶（Bucket）。使得在查询特定值的时候非常高效，因为可以直接计算出存储位置，快速定位到数据。\",\"查询效率：在等值查询下，哈希查询效率极高，可以在常数时间复杂度内定位到目标数据。但是范围查询和排序操作时，哈希索引的效率较低，因为哈希算法会导致数据随机分布，无法保持原有的顺序。\",\"磁盘存储：hash 索引的存储是随机的，可能导致磁盘的随机访问，从而降低磁盘的利用效率和查询效率。\",\"插入和删除操作：Hash 索引在插入和删除操作方面相对简单，只需要通过哈希函数确定存储位置即可。\",\"B+树白话详解_下载\",\"B+树索引\",\"工作原理：B+树索引使用平衡树，将索引健的值按照顺序保存在树节点中，根据键值的大小关系，并通过节点之间的指针进行查找，快速定位存储了数据的叶子节点。\",\"查询效率：B+树擅长范围查询和排序操作，因为他是按照顺序存储数据，可以高效的支持范围查询和排序操作。\",\"磁盘存储：B+树索引的节点是有序存储的，有利于磁盘的顺序访问，从而减少磁盘的IO次数，提高查询效率。\",\"插入和删除操作：B+树在索引删除和插入操作时，需要维护树的平衡，可能进行节点的拆分和合并，相对哈希索引来说操作更复杂。\",\"所以在选择上：\",\"查询维度：如果查询主要是等值查询，且对性能要求较高，Hash 索引可能是一个好的选择。然而，如果查询涉及到范围查询、排序操作或模糊查询，B+ 树索引则更为合适。\",\"数据维度：如果索引列具有大量重复值，Hash索引的效率可能会下降，因为哈希碰撞会导致性能下降。在这种情况下，B+ 树索引可能更为稳定。\",\"磁盘存储和I/O维度：由于 Hash 索引可能导致磁盘的随机访问，如果磁盘 IO 是性能瓶颈，那么 B+ 树索引可能更适合，因为它更有利于磁盘的顺序访问。\",\"从这三个维度可以很好的应用在你的开发工作中，如果是小数据量的 web 网站查询、直接用 B+ 树就可以了。对于数据量的大小评估，后面单开一篇讲解。\"]},\"563\":{\"h\":\"7. 索引是否越多越好？为什么？\",\"t\":[\"不是。索引是建立在原数据上的数据结构，所以不论在查询还是更新维护、一定会带来开销。\",\"比如一本书有 100 页，我构建了 50 页的目录，你觉查询起来还会方便吗？\",\"数据量小的表不需要建立索引，建立索引反而会增加额外开销。\",\"数据变更后索引也需要更新，更多的索引意味着更多的维护成本。\",\"索引是放在磁盘的，更能的索引也意味着更多的存储空间。\",\"数据重复且分布平均的字短没必要建立索引（比如：性别）\",\"索引并非银弹，正确使用才能发挥奇效。\"]},\"564\":{\"h\":\"8. 索引什么时候会失效？\",\"t\":[\"慢 SQL 是数据库使用中最长遇见的问题，当遇到慢 SQL 时，首先我们就要去看是不是索引失效。一般会有以下几种常见的情况：\",\"Where 条件中包含 OR： 当查询条件中包含 OR，即使其中某些条件带有索引，也会全表扫描。下例中 username 没有索引，就算 id 走了索引也需要全表扫描，所以引擎大概率不会走索引。\",\"失效索引： id 有索引， username 没有索引。\",\"explain select * from t_user where id = 2 or username = 'javapub';\",\"多列索引没有最左匹配： 对于复合索引，如果查询条件没有从索引的第一部分匹配，则不会使用索引。也就是我们在使用联合索引时，要正确使用最左匹配。\",\"例如，如果你有一个(id, name)的多列索引，但查询条件只使用了name，那么索引不会被使用。\",\"LIKE 查询以%开头： 当使用LIKE操作符进行模糊查询，并且模式以%开头时，索引将不会生效。这是因为以%开头的模式匹配意味着匹配的字符串可以在任何位置，这使得索引无法有效定位数据。\",\"索引列参与计算： 当我们在查询条件中对索引列进行表达式计算，也是无法走索引的。比如：\",\"select * from t_user where id > age;\",\"类型不匹配导致隐式转换： 当表里存的是 varchar 类型的字段时，用 int 类型去查询，导致全表扫描。如下例子中：\",\"explain select * from t_user where id_no = 1002;\",\"表里的 id_no 是 varchar 类型。\",\"出了这几种情况还有一些导致索引失效。 例如：\",\"全表扫描效率更优：在某些情况下，MySQL 优 化器可能认为全表扫描比使用索引更快。\",\"数据分布不均：如果索引列的数据分布非常不均匀，MySQL 可能不会选择使用索引。\",\"索引列包含 NULL 值：如果索引列包含 NULL 值，MySQL可 能不会使用索引，因为 NULL 值的比较有特殊性。因为NULL值无法与其他值进行比较或匹配，所以无法使用索引。\"]},\"565\":{\"h\":\"9. 哪些情况下适合建立索引？\",\"t\":[\"image-20240325202047594\",\"高频查询列： 对于经常出现在查询条件中的列，建立索引可以加快查询速度。例如，经常根据username或email字段查询的用户表。\",\"作为连接键的列： 在执行表连接操作时，用于连接的列（通常在ON子句中指定）应该建立索引，以加快连接操作的速度。\",\"具有唯一性约束的列： 对于需要保证唯一性的列，如主键或具有唯一约束的列，建立索引是必要的，因为索引可以帮助快速检查重复的数据。\",\"排序和分组操作的列： 在ORDER BY、GROUP BY或DISTINCT操作中使用的列，通过建立索引可以加快排序和分组的处理速度。\",\"具有高选择性的列： 选择性是指不同值的数量与总行数的比率。具有高选择性的列（即列中的值分布广泛）适合建立索引，因为这样的索引可以更有效地缩小搜索范围。\",\"多列查询的前导列： 如果你经常执行涉及多个列的查询，可以在这些列上建立组合索引，其中最常用作查询条件的列应该放在索引的最前面。\",\"数据量大的表： 对于数据量较大的表，合理地建立索引可以大幅提高查询效率。但是，对于数据量小的表，由于数据量本身就少，索引可能不会带来太大的性能提升，反而可能增加插入、更新和删除操作的开销。\",\"在考虑建立索引时，也需要考虑以下因素：\",\"更新频率：频繁更新的列可能不适合建立索引，因为每次更新都可能导致索引的重新构建，增加开销。\",\"索引的维护成本：索引不仅占用存储空间，还会增加数据插入、删除和更新操作的维护成本。\",\"查询类型：需要分析查询类型，确保索引能够被有效利用。例如，对于只读或几乎只读的表，建立索引可能没有太大必要。\"]},\"566\":{\"h\":\"10. 为什么要用 B+ 树，而不用二叉树？\",\"t\":[\"查询性能稳定： B+树通过多层索引结构，使得查询性能更加稳定。在最坏的情况下，B+树的查询时间复杂度仍然是对数级别（O(log n)），而二叉树在最坏情况下（退化成链表）的时间复杂度为线性（O(n)）。这意味着即使数据分布极不均匀，B+树也能保持较高的查询效率。\",\"空间局部性： B+树的叶子节点包含了所有数据记录，并且通过指针相互连接，形成了一个有序链表。这种结构使得范围查询和顺序访问更加高效，因为相邻的数据在物理存储上也是相邻的。而二叉树不具备这种空间局部性，数据的物理存储位置可能分散。\",\"磁盘I/O优化： 数据库操作经常涉及磁盘I/O，B+树的设计更适合减少磁盘访问次数。由于B+树的非叶子节点不存储实际数据，可以使得每个节点包含更多的键值，从而降低树的高度。这样，在一次磁盘I/O操作中可以读取更多的索引信息，减少了I/O次数。\",\"高效的范围查询和排序： B+树的有序链表结构使得它在执行范围查询和排序操作时非常高效。而二叉树需要进行中序遍历才能得到有序的结果，效率较低。\",\"节点分裂和合并的开销： 在二叉树中，插入和删除操作可能导致频繁的节点分裂和合并，增加了操作的复杂性。B+树通过减少节点分裂和合并的次数，降低了维护开销。\",\"非叶子节点的简洁性： B+树的非叶子节点仅用于索引，不存储实际数据，这样可以使得每个节点包含更多的键值对，进一步降低树的高度。\",\"更新操作的效率： 由于B+树的高度通常较低，更新操作（插入、删除）时需要遍历的节点数量较少，从而提高了更新操作的效率。\",\"总的来说，B+树在数据库索引中提供了更稳定的查询性能、优化的磁盘I/O操作、高效的范围查询和排序，以及较低的维护成本。\"]},\"567\":{\"h\":\"11. 什么是回表？如何减少回表？\",\"t\":[\"回表定义： MySQL回表查询是指在使用索引进行查询时，MySQL数据库引擎在通过索引定位到数据行后，发现需要访问表中的其他列数据，而不是直接通过索引就能获取到所需的数据。这种情况下，MySQL需要再次访问表中的数据行，这个过程就称为回表查询（Referring to the table）。\",\"覆盖索引： 覆盖索引是指一个查询可以完全通过索引来得到结果，而不需要访问数据表的行。如果查询只需要索引中包含的字段，那么就无需回表。设计良好的覆盖索引可以显著减少回表操作。\",\"**避免SELECT ***： 在编写查询时，尽量指定需要的列，而不是使用SELECT *来选择所有列。这样可以减少不必要的数据访问，从而减少回表。\",\"索引包含所需列： 确保查询中涉及的列都被包含在索引中。如果索引包含了所有需要的列，那么查询可能不需要回表。\",\"使用复合索引： 如果查询经常根据多个列进行过滤，可以考虑创建一个包含这些列的复合索引。这样可以在一个索引中完成查询，减少回表。\",\"优化查询逻辑： 分析查询逻辑，尽量减少不必要的回表操作。例如，如果查询中的某些条件不太可能同时满足，可以考虑将它们分开处理，或者使用临时表来存储中间结果。\",\"使用物化视图或汇总表： 对于频繁执行的复杂查询，可以考虑使用物化视图或汇总表来存储查询结果。这样，当需要这些数据时，可以直接从物化视图或汇总表中获取，而无需进行回表操作。\",\"当然，不是所有情况都不允许回表，有时候，适当的回表是必要的，因为索引的设计需要平衡查询性能和存储空间的利用。\"]},\"568\":{\"h\":\"12. 能否解释什么是位图索引，以及它在MySQL中的使用场景？\",\"t\":[\"位图索引是一种将数据列的所有可能值映射到二进制位上的索引。每个位表示某个值是否存在于该列中，从而帮助我们快速定位符合某个条件的行。与其他类型的索引相比，位图索引通常在低基数列（即列中有限的不同值）上表现更好。\",\"可以参考 bitmap 数据结构来理解\",\"例子：\",\"在该示例中，我们为 age 和 country 列分别创建了位图索引。由于使用了位图索引，查询性能将大大提高。\",\"CREATE TABLE users ( id INT PRIMARY KEY, name VARCHAR(50), age INT, country VARCHAR(50) ); CREATE BITMAP INDEX idx_age ON users(age); CREATE BITMAP INDEX idx_country ON users(country); SELECT * FROM users WHERE age = 20 AND country = 'China';\"]},\"569\":{\"h\":\"13. 如何查看MySQL表中已有的索引？\",\"t\":[\"两种方式：\",\"使用 SHOW INDEX，也是最常用的。\",\"SHOW INDEX FROM your_table_name;\",\"查询 information_schema 数据库，information_schema 是 MySQL 中包含元数据的特殊数据库。我可以查询其中的 TABLES 和 STATISTICS 表来获取索引信息。\",\"SELECT TABLE_SCHEMA, TABLE_NAME, NON_UNIQUE, INDEX_NAME, INDEX_TYPE, INDEX_COMMENT, SEQ_IN_INDEX, COLUMN_NAME, CARDINALITY, SUB_PART, PACKED, NULLABLE, INDEX_DIR, INDEX_DISC FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = 'your_database_name' AND TABLE_NAME = 'your_table_name';\"]},\"570\":{\"h\":\"14. 如何在MySQL中创建全文索引，并说明全文索引的使用场景？\",\"t\":[\"正例：\",\"CREATE TABLE articles ( id INT NOT NULL AUTO_INCREMENT, title VARCHAR(255) NOT NULL, content TEXT NOT NULL, PRIMARY KEY (id), FULLTEXT INDEX (title, content) -- 创建联合全文索引 ) ENGINE=MyISAM DEFAULT CHARSET=utf8;\",\"当已经建好表结构，使用 ALTER TABLE 创建：\",\"ALTER TABLE articles ADD FULLTEXT INDEX ft_index (title, content);\",\"全文索引一般用于内容管理平台（CMS），问答社区等检索场景，然而，全文索引也有一些限制，比如它只能用于MyISAM或InnoDB存储引擎（在MySQL 5.6及以上版本中），并且全文索引的列不能是NULL值。\",\"实际应用中其实很少会使用到，现在多数使用 ElasticSearch 来搭建全文搜索引擎。\"]},\"571\":{\"h\":\"15. 当表中的数据量非常大时，如何有效地维护和管理索引，以确保查询性能？\",\"t\":[\"索引主要是为了优化查询性能而设计的。如果一个字段的查询频率远低于更新频率，那么为该字段创建索引可能不会带来预期的性能提升，反而可能因为维护索引而降低整体性能。\",\"性能开销： 索引的维护需要额外的计算和存储资源。当对一个字段进行大量的更新操作时，数据库系统不仅需要更新数据本身，还需要更新所有相关的索引。这会导致性能开销增加，尤其是在高并发的写操作环境中。\",\"存储空间： 索引本身占用存储空间。对于经常更新的字段，如果创建了索引，那么每次数据更新都可能导致索引的页面分裂，进而需要更多的存储空间来维护索引结构。\",\"索引失效： 频繁的更新操作可能导致索引的页变得碎片化，从而降低索引的效率。索引页的碎片化意味着索引中的数据不再按照顺序存储，这会增加数据库在执行查询操作时的磁盘I/O次数，因为数据库可能需要读取多个不连续的页面来满足查询条件。\",\"更新锁竞争： 在高并发的更新操作中，索引可能会成为锁竞争的瓶颈。当多个事务尝试更新同一索引页时，可能会发生锁等待，这会降低并发性能。\"]},\"572\":{\"h\":\"16. 假设你有一个包含大量数据的表，并且经常需要根据某个字段进行排序。你应如何优化这个字段的索引以提高排序操作的性能？\",\"t\":[\"当你尝试为一个已经存在大量数据的表添加索引时，可能会遇到什么问题？如何解决这些问题？\",\"首先：\",\"如果是亿级大表，在建表时就要添加必要的索引，否则存入过多数据可能会出现加不成功的现象。\",\"垂直拆分\",\"按照业务维度拆分。\",\"水平拆分\",\"按照不同的行进行分片，分散到不同的物理表中。\",\"创建索引\",\"分区\",\"根据实际情况进行数据分区，但是要注意分区后可能影响写入性能。\",\"优化查询语句\",\"分布式数据库\"]},\"573\":{\"h\":\"17. 如何优化索引\",\"t\":[\"image-20240325201704103\",\"当你遇到查询性能问题时，如何分析和优化索引的使用？开放性问题。\",\"评估索引的必要性，不是所有字段都要走索引。\",\"选择正确的索引类型，例如，B-tree索引适合范围查询和排序操作，Hash索引适合等值查询，Bitmap索引适合低基数（不同值的数量较少）的列。\",\"优化索引的列顺序：在创建多列索引时，考虑列的访问模式和查询类型。通常，将最常用作查询条件的列放在索引的前面，因为数据库可以更有效地使用这些列来过滤数据。\",\"使用覆盖索引：如果查询只访问索引中包含的列，使用覆盖索引可以避免访问数据行本身，从而提高查询性能。\",\"分析数据分布：对于列的值分布进行分析，避免在高度重复的列上创建索引，因为这样的索引可能不会带来显著的性能提升。\",\"避免过度索引：过多的索引会增加数据库的维护成本，尤其是在数据插入、更新和删除时。确保每个索引都有其明确的用途，并定期审查和清理不再需要的索引。\"]},\"574\":{\"h\":\"18. 请谈谈你对 MySQL 索引碎片化的理解，并说明如何检测和修复索引碎片化。\",\"t\":[\"**如何检测索引碎片化？**两个方法\",\"使用SHOW TABLE STATUS命令： 通过执行 SHOW TABLE STATUS LIKE 'table_name'; 可以获取表的状态信息，其中包括 Data_free 字段，它表示表中未使用的空间百分比。如果这个值相对较高，可能表明表存在碎片化问题。\",\"使用 INFORMATION_SCHEMA.TABLES 表： 查询 INFORMATION_SCHEMA.TABLES 可以获取表的碎片化信息。例如：\",\"SELECT table_name, table_schema, Data_free / Data_length * 100 AS碎片化百分比 FROM information_schema.TABLES WHERE table_schema = 'your_database_name' AND Data_free > 0;\",\"如何修复索引碎片化？\",\"优化表的存储引擎：\",\"对于 MyISAM 存储引擎，可以使用 OPTIMIZE TABLE 命令来重新组织表的数据，减少碎片化。对于 InnoDB 存储引擎，这个命令也会尝试优化表，但效果可能不如 MyISAM 明显。\",\"OPTIMIZE TABLE table_name;\",\"重建索引：\",\"对于 InnoDB 存储引擎，可以通过 ALTER TABLE 命令来重建表的索引，这通常比 OPTIMIZE TABLE 更有效。\",\"ALTER TABLE table_name ENGINE=InnoDB;\",\"定期维护：\",\"定期执行 OPTIMIZE TABLE 或 ALTER TABLE 命令可以帮助维持索引的健康状况，减少碎片化。\",\"需要注意的是，优化表的操作可能会消耗大量的系统资源，并且可能需要较长的时间来完成，特别是对于大型表。因此，在执行这些操作之前，最好在测试环境中进行评估，并在业务低峰时段进行。此外，确保在执行优化操作之前备份数据，以防万一出现问题。\"]},\"575\":{\"c\":[\"mysql\"]},\"576\":{\"c\":[\"mysql\",\"索引\"]},\"577\":{\"h\":\"分表分库解决思路\"},\"578\":{\"h\":\"分表分库解决思路\",\"t\":[\"阅读大约3分钟，建议收藏阅读\",\"随着公司业务快速发展，数据库中的数据量猛增，访问性能也变慢了，优化迫在眉睫。\",\"分析一下问题出现在哪儿呢？ 关系型数据库本身比较容易成为系统瓶颈，单机存储容量、连接数、处理能力都有限。当单表的数据量达到 1000W 或 100G 以后，由于查询维度较多，即使添加从库、优化索引，做很多操作时性能仍下降严重。\",\"方案1：\",\"通过提升服务器硬件能力来提高数据处理能力，比如增加存储容量 、CPU等，这种方案成本很高，并且如果瓶颈在 MySQL 本身那么提高硬件也是很有限的。\",\"在这里插入图片描述\",\"方案2：\",\"把数据分散在不同的数据库中，使得单一数据库的数据量变小来缓解单一数据库的性能问题，从而达到提升数据库性能的目的。\",\"如下图：将电商数据库拆分为若干独立的数据库，并且对于大表也拆分为若干小表，通过这种数据库拆分的方法来解决数据库的性能问题。就跟把鸡蛋放在多个篮子里是一样的。\",\"在这里插入图片描述\",\"分库分表就是为了解决由于数据量过大而导致数据库性能降低的问题，将原来独立的数据库拆分成若干数据库组成 ，将数据大表拆分成若干数据表组成，使得单一数据库、单一数据表的数据量变小，从而达到提升数据库性能的目的。\",\"分库分表包括分库和分表两个部分，在生产中通常包括：垂直分库、水平分库、垂直分表、水平分表四种方式。\",\"@[toc]\"]},\"579\":{\"h\":\"垂直分表\",\"t\":[\"垂直分表定义：将一个表按照字段分成多表，每个表存储其中一部分字段。\",\"它带来的提升是：\",\"为了避免IO争抢并减少锁表的几率\",\"充分发挥热门数据的操作效率，商品信息的操作的高效率不会被商品描述的低效率所拖累。\",\"为什么大字段IO效率低：第一是由于数据量本身大，需要更长的读取时间；第二是跨页，页是数据库存储单位，很多查找及定位操作都是以页为单位，单页内的数据行越多数据库整体性能越好，而大字段占用空间大，单页内存储行数少，因此IO效率较低。第三，数据库以行为单位将数据加载到内存中，这样表中字段长度较短且访问频率较高，内存能加载更多的数据，命中率更高，减少了磁盘IO，从而提升了数据库性能。\",\"一般来说，某业务实体中的各个数据项的访问频次是不一样的，部分数据项可能是占用存储空间比较大的BLOB或是TEXT。例如上例中的商品描述。所以，当表数据量很大时，可以将表按字段切开，将热门字段、冷门字段分开放置在不同库中，这些库可以放在不同的存储设备上，避免IO争抢。垂直切分带来的性能提升主要集中在热门数据的操作效率上，而且磁盘争用情况减少。\",\"通常我们按以下原则进行垂直拆分:\",\"把不常用的字段单独放在一张表;\",\"把text，blob等大字段拆分出来放在附表中;\",\"经常组合查询的列放在一张表中;\"]},\"580\":{\"h\":\"垂直分库\",\"t\":[\"通过垂直分表性能得到了一定程度的提升，但是还没有达到要求，并且磁盘空间也快不够了，因为数据还是始终限制在一台服务器，库内垂直分表只解决了单一表数据量过大的问题，但没有将表分布到不同的服务器上，因此每个表还是竞争同一个物理机的CPU、内存、网络IO、磁盘。\",\"垂直分库是指按照业务将表进行分类，分布到不同的数据库上面，每个库可以放在不同的服务器上，它的核心理念是专库专用。\",\"它带来的提升是：\",\"解决业务层面的耦合，业务清晰\",\"能对不同业务的数据进行分级管理、维护、监控、扩展等\",\"高并发场景下，垂直分库一定程度的提升IO、数据库连接数、降低单机硬件资源的瓶颈\",\"垂直分库通过将表按业务分类，然后分布在不同数据库，并且可以将这些数据库部署在不同服务器上，从而达到多个服务器共同分摊压力的效果，但是依然没有解决单表数据量过大的问题。\"]},\"581\":{\"h\":\"水平分库\",\"t\":[\"水平分库是把同一个表的数据按一定规则拆到不同的数据库中，每个库可以放在不同的服务器上。\",\"垂直分库是把不同表拆到不同数据库中。水平分库是对数据行的拆分，不影响表结构\",\"水平分库带来的提升是：\",\"解决了单库大数据，高并发的性能瓶颈。\",\"提高了系统的稳定性及可用性。\",\"稳定性体现在IO冲突减少，锁定减少，可用性指某个库出问题，部分可用`\",\"当一个应用难以再细粒度的垂直切分，或切分后数据量行数巨大，存在单库读写、存储性能瓶颈，这时候就需要进行水平分库了，经过水平切分的优化，往往能解决单库存储量及性能瓶颈。但由于同一个表被分配在不同的数据库，需要额外进行数据操作的路由工作，因此大大提升了系统复杂度。\"]},\"582\":{\"h\":\"水平分表\",\"t\":[\"水平分表是在同一个数据库内，把同一个表的数据按一定规则拆到多个表中。\",\"它带来的提升是：\",\"优化单一表数据量过大而产生的性能问题\",\"避免 IO 争抢并减少锁表的几率\",\"库内的水平分表，解决了单一表数据量过大的问题，分出来的小表中只包含一部分数据，从而使得单个表的数据量变小，提高检索性能。\"]},\"583\":{\"h\":\"总结\",\"t\":[\"垂直分表：可以把一个宽表的字段按访问频次、是否是大字段的原则拆分为多个表，这样既能使业务清晰，还能提升部分性能。拆分后，尽量从业务角度避免联查，否则性能方面将得不偿失。\",\"垂直分库：可以把多个表按业务耦合松紧归类，分别存放在不同的库，这些库可以分布在不同服务器，从而使访问压力被多服务器负载，大大提升性能，同时能提高整体架构的业务清晰度，不同的业务库可根据自身情况定制优化方案。但是它需要解决跨库带来的所有复杂问题。\",\"水平分库：可以把一个表的数据(按数据行)分到多个不同的库，每个库只有这个表的部分数据，这些库可以分布在不同服务器，从而使访问压力被多服务器负载，大大提升性能。它不仅需要解决跨库带来的所有复杂问题，还要解决数据路由的问题(数据路由问题后边介绍)。\",\"水平分表：可以把一个表的数据(按数据行)分到多个同一个数据库的多张表中，每个表只有这个表的部分数据，这样做能小幅提升性能，它仅仅作为水平分库的一个补充优化。\",\"一般来说，在系统设计阶段就应该根据业务耦合松紧来确定垂直分库，垂直分表方案，在数据量及访问压力不是特别大的情况，首先考虑缓存、读写分离、索引技术等方案。若数据量极大，且持续增长，再考虑水平分库水平分表方案。\",\"JavaPub参考教程：https://blog.csdn.net/weixin_44062339/article/details/100491744\"]},\"584\":{\"h\":\"后记\",\"t\":[\"现在是 2021 辛丑年 叄月，大家都知道我最近在做一套JavaPub系列面试题，前面已经更新过一部分，在接下来还会持续更新，欢迎大家分享、关注\"]},\"585\":{\"h\":\"序言\",\"t\":[\"再高大上的框架，也需要扎实的基础才能玩转，高频面试问题更是基础中的高频实战要点。\"]},\"586\":{\"h\":\"适合阅读人群\",\"t\":[\"Java 学习者和爱好者，有一定工作经验的技术人，准面试官等。\"]},\"587\":{\"h\":\"阅读建议\",\"t\":[\"本教程是系列教程，包含 Java 基础，JVM，容器，多线程，反射，异常，网络，对象拷贝，JavaWeb，设计模式，Spring-Spring MVC，Spring Boot / Spring Cloud，Mybatis / Hibernate，Kafka，RocketMQ，Zookeeper，MySQL，Redis，Elasticsearch，Lucene\",\"微信搜：JavaPub，阅读全套系列面试题教程\",\"wx\"]},\"588\":{\"h\":\"慢查询优化方案-SQL篇\",\"t\":[\"慢sql优化23式\",\"阅读大约6分钟，2021 0411 22:29 写于家中床边\",\"由于前期的快速开发、敏捷版本迭代，接口响应速度是每一个系统发展到中后期都会面临的一个问题。本系列从实战出发手把手一起对接口响应慢问题做优化。\",\"对于慢查询我们一般通过如下思路解决： 1. explain sql 分析慢SQL 2. 利用缓存 3. 读写分离和分库分表 4. 评论区补充，待续...\",\"本篇是系列文章（以 MySQL 为例），从多个角度分析、解决慢查询，如意犹未尽：【JavaPub】\",\"为了提高查询效率，当数据库表加完索引后还不不能满足性能需求，第二步，SQL 语句优化。\",\"系统前期开发阶段，为了快速开发，SQL 语句都是以实现功能为主，性能上可能没怎么在意。本篇主要讲述几个在实战中注意优化的性能点供大家参考。\",\"文章结构由简到难，以目录为结论，下文做详细讲解。\",\"目录：\",\"[toc]\"]},\"589\":{\"h\":\"1. 应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：\",\"t\":[\"select id from t where num is null\",\"可以在 num 上设置默认值 0，确保表中 num 列没有 null 值，然后这样查询：\",\"select id from t where num=0\",\"其实这条说的过于绝对，但是我们还是建议尽量避免使用字段为 NULL。在 MySQL 的个别引擎中是支持的，翻阅官方文档。如果使用的是 MyISAM、InnoDB 或 MEMORY 存储引擎，则可以在具有 NULL 值的列上添加索引。 否则，您必须声明一个索引列 NOT NULL，并且您不能在该列中插入 NULL。\",\"You can add an index on a column that can have NULL values if you are using the MyISAM, InnoDB, or MEMORY storage engine. Otherwise, you must declare an indexed column NOT NULL, and you cannot insert NULL into the column.\",\"NULL对于SQL的新手来说，值 的概念是一个常见的混淆源，他们经常认为这 NULL与空字符串是同一回事 '。但是第一个语句将插入一个 NULL值，第二个语句将 插入一个空字符串。第一个的含义可以视为 “未知电话号码”，第二个的含义可以视为“已知该人没有电话，因此也没有电话号码”。\",\"参考官网阅读（Mysql null 值问题）：https://dev.mysql.com/doc/refman/5.7/en/problems-with-null.html\"]},\"590\":{\"h\":\"2. 应尽量避免在 where 子句中使用!=或<>操作符，否则将引擎放弃使用索引而进行全表扫描。\",\"t\":[\"这里是否放弃使用索引取决于 MySQL 优化器。\",\"Note：例如 or 、in | not in 、is null | is not null、!=、<>，使用时并不是完全不走索引，要考虑到：\",\"全表扫描是否比索引更快，以至于优化器选择全表扫描；\",\"mysql 的版本;\",\"可以通过优化语法或者配置优化器。\",\"参考： https://dev.mysql.com/doc/refman/5.6/en/statement-optimization.html https://dev.mysql.com/doc/refman/5.6/en/optimization-indexes.html https://dev.mysql.com/doc/refman/5.6/en/select-optimization.html\"]},\"591\":{\"h\":\"3. 应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：\",\"t\":[\"select id from t where num=10 or num=20\",\"可以这样查询：\",\"select id from t where num=10 union all select id from t where num=20\",\"避免使用不代表一定不使用，很多时候还取决于 MySql 引擎对查询的优化。参考前一篇：JavaPub【慢查询优化方案-索引篇【JavaPub版】】\"]},\"592\":{\"h\":\"4. in 和 not in 也要慎用，否则会导致全表扫描，如：\",\"t\":[\"select id from t where num in(1,2,3)\",\"对于连续的数值，能用 between 就不要用 in 了：\",\"select id from t where num between 1 and 3\"]},\"593\":{\"h\":\"5. 下面的查询也将导致全表扫描：\",\"t\":[\"select id from t where name like '%abc%';\",\"例如，SELECT id FROM t WHERE name LIKE 'abc%'; 这个查询将使用索引。\"]},\"594\":{\"h\":\"6. 应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：\",\"t\":[\"select id from t where num/2=100\",\"应改为:\",\"select id from t where num=100*2\"]},\"595\":{\"h\":\"7. 应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：\",\"t\":[\"select id from t where substring(name,1,3)='abc'; //name以abc开头的id\",\"应改为:\",\"select id from t where name like 'abc%';\"]},\"596\":{\"h\":\"8. 不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。\"},\"597\":{\"h\":\"9. 在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。\"},\"598\":{\"h\":\"10. 很多时候用 exists 代替 in 是一个好的选择：\",\"t\":[\"select num from a where num in(select num from b)\",\"用下面的语句替换：\",\"select num from a where exists(select 1 from b where num=a.num)\",\"in 和 not in 不会命中索引\"]},\"599\":{\"h\":\"11. 并不是所有索引对查询都有效，SQL 是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL 查询可能不会去利用索引。\",\"t\":[\"如一表中有字段 sex，male、female 几乎各一半，那么即使在 sex 上建了索引也对查询效率起不了作用。\",\"这就是我们 Boolean（一般用 tinyint ） 型字段上使用索引会不会用到的问题。\"]},\"600\":{\"h\":\"12. 索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，\",\"t\":[\"因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。 一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。\",\"这些原则都是原则上建议，要视情况而定。\"]},\"601\":{\"h\":\"13. 尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。\",\"t\":[\"这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。\"]},\"602\":{\"h\":\"14. 尽可能的使用 varchar 代替 char ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。\"},\"603\":{\"h\":\"15. 任何地方都不要使用 select * from t ，用具体的字段列表代替 “*”，不要返回用不到的任何字段。\",\"t\":[\"这个是大多数系统的通病，但是。\"]},\"604\":{\"h\":\"16. 避免频繁创建和删除临时表，以减少系统表资源的消耗。\",\"t\":[\"这条在大多数业务场景不会使用到。\",\"临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。\",\"在使用时要注意 drop table 、 truncate table、delete table 区别。\"]},\"605\":{\"h\":\"17. 在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。\",\"t\":[\"#MYSQL不支持: Select * Into new_table_name from old_table_name; 这是sql server中的用法 #替代方法: Create table new_table_name (Select * from old_table_name);\"]},\"606\":{\"h\":\"18. 如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。\"},\"607\":{\"h\":\"19. 尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。\"},\"608\":{\"h\":\"20. 使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。\"},\"609\":{\"h\":\"21. 与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。\",\"t\":[\"在结果集中包括 “合计” 的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于结果集的方法都可以尝试一下，看哪一种方法的效果更好。\"]},\"610\":{\"h\":\"22. 尽量避免大事务操作，提高系统并发能力。\"},\"611\":{\"h\":\"23. 尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。\",\"t\":[\"参考： https://dev.mysql.com/doc/refman/5.7/en/is-null-optimization.html\"]},\"612\":{\"c\":[\"mysql\"]},\"613\":{\"c\":[\"mysql\",\"慢SQL\"]},\"614\":{\"h\":\"数据库13问，谁能顶得住\",\"t\":[\"数据库13问，谁能顶得住 |\"]},\"615\":{\"h\":\"前言\",\"t\":[\"过完这个节，就要进入金银季，准备了 13 道数据库锁面试题，一定用得上。\",\"锁的问题归更到底就是资源竞争导致的，而并发场景一定会发生资源竞争，所以锁的问题，也是并发场景下必问的问题。理解好锁的原理，在编程中提升设计能力也非常重要。\",\"汇总xmind\",\"作者：\",\"感谢每一个支持： github\"]},\"616\":{\"h\":\"1. 为什么要在数据库中加锁\",\"t\":[\"就像我们生活中，每天出门都要给房子上锁，这时有人来拜访看到已上锁，就知道家里没人。\",\"我们的系统绝大多不是单机系统，都会从在资源的竞争（并发控制）和数据一致性的场景，比如：俩个人同时买一个商品、但是商品只剩下一件，这时就需要锁来保证谁拥有这件商品。锁是保证数据库事务四个特性，原子性、一致性、隔离性和持久性（ACID）的关键性技术之一。\",\"无锁的情况下就可能出现，如脏读、不可重复读和幻读等。\"]},\"617\":{\"h\":\"2. InnoDB 中有哪些锁\",\"t\":[\"image-20240527184946810\"]},\"618\":{\"h\":\"2.1 共享锁/排它锁\",\"t\":[\"共享锁（S锁）和排它锁（X锁）是最基础的锁类型，用于操作对数据的读取和写入。\",\"通过名字，我们也可以看出这两个锁的作用。当事务要读取一条记录时，先获取该记录的S锁；当事务要改动一条记录时，先获取该记录的X锁。\",\"img\",\"通过这个图可以知道，什么情况下可以获得 S 锁和 X 锁。可以看到，只有都是共享锁时，才可以同时在一行记录加锁。\",\"例子：\",\"加共享锁，共享锁允许其他事务读取这些行，但不允许其他事务修改或删除这些行，直到当前事务结束。\",\"SELECT ... LOCK IN SHARE MODE; 加共享锁 --- SELECT * FROM user WHERE id=1 LOCK IN SHARE MODE;\",\"加排他锁，相当于是独占记录。当一个事务对某行数据加上排他锁后，其他事务既不能读取也不能修改这些数据，直到持有排他锁的事务结束。\",\"SELECT ... FOR UPDATE; 加排他锁 --- START TRANSACTION; SELECT * FROM table_name WHERE condition FOR UPDATE; -- 执行一些更新操作 UPDATE table_name SET column = value WHERE condition; COMMIT;\"]},\"619\":{\"h\":\"2.2 行锁/临键锁\",\"t\":[\"行锁\",\"行锁通常在执行涉及单个行的操作时自动应用，例如 SELECT 语句中的 FOR UPDATE 子句，这会为查询结果中的每行添加排他锁。也就是上面说到的例子。\",\"START TRANSACTION; SELECT * FROM table_name WHERE id = 1 FOR UPDATE; -- 在此事务中，id为1的行将被锁定，其他事务不能修改或读取这行 COMMIT;\",\"临键锁\",\"临键锁结合了记录锁和间隙锁，用于行级锁定和范围查询，防止幻读。我们一般无法判断是行锁还是临键锁，都是行锁的形式，由存储引擎在执行查询时自动管理决定的。\",\"START TRANSACTION; SELECT * FROM table_name WHERE id BETWEEN 1 AND 10 FOR UPDATE; -- 这将锁定id在1到10之间的所有行，以及可能的下一个键值 COMMIT;\"]},\"620\":{\"h\":\"2.3 意向锁\",\"t\":[\"意向锁是针对多粒度锁定协议的系统，比如行粒度锁、表粒度锁。当一个事务打算在某个细粒度上请求锁（共享锁|排他锁），它会首先在更粗力度上设置意向锁。\",\"意向共识锁 - 简称 IS\",\"意向排他锁 - 简称 IX\",\"例子：如果一个事务要对一张表加排他锁，它会先在表级别加上意向排他锁，然后对表中的特定行加排他锁。\",\"img\"]},\"621\":{\"h\":\"2.4 间隙锁/插入意向锁\",\"t\":[\"间隙锁和插入意向锁针对实现了多版本并发控制（MVCC）的系统中，如 MySQL 的 InnoDB 存储引擎。\",\"间隙锁（Gap Locks）：\",\"间隙锁是一种行锁，它锁定一个范围内的间隙，但不锁定该范围内的任何具体行。间隙锁主要用于防止其他事务在这个间隙中插入新的行，从而维护数据的顺序性和一致性。 间隙锁通常在执行范围查询并加上共享或排他锁时自动应用。例如，如果一个事务执行了 SELECT ... WHERE index_column BETWEEN x AND y LOCK IN SHARE MODE ，InnoDB 会在索引列 x 和 y 之间的间隙上设置间隙锁，防止其他事务在这个范围内插入新行。\",\"示例：\",\"START TRANSACTION; SELECT * FROM table_name WHERE id BETWEEN 10 AND 20 LOCK IN SHARE MODE; -- 在id为10到20的范围内设置间隙锁 COMMIT;\",\"插入意向锁（Insert Intention Locks）：\",\"插入意向锁是一种特殊的间隙锁，它表明一个事务有意向在某个间隙中插入新行。 当一个事务想要在一个已经被其他事务加上间隙锁的范围内插入新行时，它会首先在该范围内设置一个插入意向锁。\",\"插入意向锁允许多个事务保留在特定间隙中插入新行的意图，而不直接与间隙锁冲突。这样，当间隙锁被释放时，持有插入意向锁的事务可以继续执行插入操作。\",\"示例：\",\"START TRANSACTION; -- 假设另一个事务已经在id为10到20的范围内设置了间隙锁 SELECT * FROM table_name WHERE id = 15 FOR UPDATE; -- 这将设置一个插入意向锁，表明事务有意向在id为10到20的范围内插入新行 COMMIT;\"]},\"622\":{\"h\":\"2.5 自增锁\",\"t\":[\"自增锁（Auto-Increment Locks，简称：AI Locks）是MySQL数据库中InnoDB存储引擎特有的一种锁机制，它与自增字段（AUTO_INCREMENT）相关联。AUTO_INCREMENT 你一定不陌生，我们在建表时多数情况都会让主键 id 自增来生成唯一序列。\",\"当一个表中包含自增字段时，InnoDB 会使用自增锁来确保在并发环境下，自增字段生成的值是唯一的，并且连续的。\",\"示例：\",\"START TRANSACTION; INSERT INTO table_name (auto_increment_column, other_columns) VALUES (NULL, 'value1'); -- InnoDB分配自增值并锁定它 COMMIT; -- 自增锁在事务提交时释放\",\"在这个示例中，auto_increment_column 是一个自增字段。当事务提交时，InnoDB 会分配一个新的自增值给插入的行，并在事务提交时释放自增锁。\"]},\"623\":{\"h\":\"2.6 外键锁\",\"t\":[\"外键（Foreign Key）是一种数据库完整性约束，它用于维护两个表之间的链接，并确保引用的数据的完整性。\",\"外键锁顾名思义就是针对外键的。外键锁并不是一个标准的锁类型，而是指与外键约束相关的锁定行为，这些行为确保在执行涉及外键的插入或更新操作时，数据库的完整性不被破坏。\",\"外键锁这个术语并不是用来描述一种特定的锁类型，而是用来描述与外键约束相关的锁定行为。数据库系统会自动处理这些锁定，以确保数据的完整性和一致性。\"]},\"624\":{\"h\":\"2.7 表锁/页锁\",\"t\":[\"表锁和页锁是两种不同粒度的锁，\",\"表锁（Table Locks）\",\"表锁是锁定整个表的锁，这意味着在锁定期间，没有其他事务可以对这张表进行读写操作。表锁通常用于批量操作，如全表扫描或全表更新，以及在不需要频繁锁定和解锁单个行的场景中。\",\"特点：\",\"粒度较大：表锁影响整个表的所有数据，因此粒度较大。\",\"冲突较少：由于锁定了整个表，减少了锁冲突的可能性，但在高并发环境下可能导致其他事务长时间等待。\",\"使用场景：适用于全表操作，如全表备份或全表删除。\",\"示例：\",\"LOCK TABLES table_name WRITE; -- 在此期间，其他事务不能访问table_name UNLOCK TABLES;\",\"页锁（Page Locks）\",\"页锁是锁定数据库中的一个“页”的锁。在许多数据库系统中，数据是按页存储的，每页包含一定数量的行。页锁允许多个事务同时访问不同的页，从而提供比表锁更细粒度的并发控制。\",\"特点：\",\"粒度较小：页锁锁定的是数据页，而不是整个表，因此粒度较小。\",\"并发性更好：允许多个事务并发访问不同的数据页，提高了并发性能。\",\"使用场景：适用于需要较高并发性能的场景，尤其是在大型表上进行部分数据的读写操作。\",\"注意：页锁通常由数据库管理系统自动管理，不需要用户显式操作。例如，在InnoDB存储引擎中，虽然页锁不是用户可以直接控制的锁类型，但InnoDB会根据需要自动在页级别上应用锁。\",\"总结： 粒度：行锁 < 页锁 < 表锁（从细到粗）。\"]},\"625\":{\"h\":\"3. 什么是死锁\",\"t\":[\"死锁是在事务数据库中会发生的一种特殊现象，多个事务在执行过程中，相互等待对方持有的资源，导致这些事务都无法继续执行。简单来说，就是两个或多个事务陷入了一个循环等待的状态，每个事务都在等待其他事务释放资源。\",\"比如这个蛇和青蛙互不放手。\",\"来源网络-互不放手\",\"死锁通常由以下四种情况同时出现时引起：\",\"互斥条件（Mutual Exclusion）： \",\"指某些资源（如数据库中的记录）一次只能被一个事务占用。\",\"持有和等待条件（Hold and Wait）： \",\"指一个事务至少持有一个资源，并在等待获取其他事务持有的资源。\",\"不可剥夺条件（No Preemption）： \",\"指已经分配给一个事务的资源，在事务使用完毕之前，不能被强行剥夺。\",\"循环等待条件（Circular Wait）： \",\"指事务之间形成了一个闭环，每个事务都在等待下一个事务所持有的资源。\"]},\"626\":{\"h\":\"4. 行锁、表锁、页面锁有什么区别\",\"t\":[\"从每种锁的锁粒度、并发性、冲突和使用场景几个角度来区分。\"]},\"627\":{\"h\":\"行锁（Row Locks）\",\"t\":[\"锁粒度：行锁是锁定表中的单行或多行。\",\"并发性：行锁允许多个事务同时访问表中的不同行，从而提供较高的并发性。\",\"冲突：行锁可能导致更多的锁冲突，因为它们需要在更细的粒度上管理锁。\",\"使用场景：适用于需要高并发读写操作的场景，尤其是在表中只有少数行会被访问时。\",\"示例：在InnoDB存储引擎中，使用SELECT ... FOR UPDATE可以显式地对行加排他锁。\"]},\"628\":{\"h\":\"表锁（Table Locks）\",\"t\":[\"锁粒度：表锁是锁定整个表。\",\"并发性：表锁期间，其他事务不能对表进行任何读写操作，直到锁被释放，因此并发性较低。\",\"冲突：由于锁定了整个表，减少了锁冲突的可能性，但可能导致其他事务长时间等待。\",\"使用场景：适用于需要对整个表执行批量操作的场景，如全表备份或全表删除。\",\"示例：在MySQL中，可以使用LOCK TABLES和UNLOCK TABLES语句显式地对表加锁和解锁。\"]},\"629\":{\"h\":\"页锁（Page Locks）\",\"t\":[\"锁粒度：页锁是锁定数据库中的一个数据页，每个页包含多行数据。\",\"并发性：页锁允许多个事务同时访问不同的数据页，提高了并发性。\",\"冲突：相比于行锁，页锁可能导致较少的锁冲突，但仍然存在一定的冲突可能。\",\"使用场景：适用于需要较高并发性能的场景，尤其是在大型表上进行部分数据的读写操作。\",\"示例：页锁通常由数据库管理系统自动管理，不需要用户显式操作。例如，在PostgreSQL中，页锁可以用于控制对表中特定数据页的访问。\"]},\"630\":{\"h\":\"总结\",\"t\":[\"粒度：行锁 < 页锁 < 表锁（从细到粗）。\",\"并发性：行锁提供最高的并发性，页锁次之，表锁最低。\",\"冲突：行锁可能导致最多的锁冲突，页锁和表锁的冲突较少。\",\"使用场景：行锁适用于高并发读写，表锁适用于全表操作，页锁适用于需要较高并发的场景。\",\"区分选择不同的锁，正确使用锁类型对于优化数据库性能、确保数据一致性至关重要。\"]},\"631\":{\"h\":\"5. 乐观锁和悲观锁有什么区别，它们什么场景会用\"},\"632\":{\"h\":\"乐观锁\",\"t\":[\"乐观锁基于这样的假设：多个事务在同一时间对同一数据对象进行操作的可能性很小，因此它允许多个事务同时进行，仅在事务提交时检查是否有其他事务对数据进行了修改。\",\"特点：\",\"无锁：乐观锁通常不使用数据库的锁定机制，而是通过其他方式（如时间戳、版本号）来确保数据一致性。\",\"性能：在冲突较少的情况下，乐观锁可以提供更好的性能，因为它允许高并发。\",\"冲突检测：在事务提交时检测冲突，如果检测到冲突，事务将被回滚。\",\"实现方式：\",\"版本号：在数据表中添加一个版本号字段或时间戳字段。事务开始时记录版本号，提交时检查版本号是否发生变化，如果变化了，则表示有冲突。\",\"时间戳：使用时间戳来控制事务的顺序，如果检测到时间戳冲突，则回滚事务。\",\"适用场景：\",\"写冲突较少：适用于写操作不频繁或者写冲突可能性较低的场景。\",\"读多写少：适用于读操作远多于写操作的环境。\",\"高并发：需要支持高并发访问的系统。\"]},\"633\":{\"h\":\"悲观锁\",\"t\":[\"悲观锁基于这样的假设：多个事务对同一数据对象的并发操作会产生冲突，因此它在事务开始时就对数据对象加锁，直到事务结束才释放锁。\",\"特点：\",\"锁定：悲观锁通过数据库的锁定机制来确保数据一致性，如行锁或表锁。\",\"性能：在高冲突环境下，悲观锁可能导致更多的等待和锁竞争，从而影响性能。\",\"预防冲突：通过锁定机制预防冲突，而不是检测冲突。\",\"实现方式：\",\"显式锁定：使用数据库的锁定命令（如SELECT ... FOR UPDATE）来显式地锁定需要的资源。\",\"隐式锁定：通过数据库事务的隔离级别隐式地实现锁定。\",\"适用场景：\",\"写冲突较多：适用于写操作频繁或者写冲突可能性较高的场景。\",\"写多读少：适用于写操作多于读操作的环境。\",\"数据一致性要求高：需要严格保证数据一致性的场合。\"]},\"634\":{\"h\":\"6. select...for update 加了行锁还是表锁\",\"t\":[\"行锁。\",\"这个在上面的例子中有提到过，这个 SQL 会锁定查询到的行，行锁的粒度更小、可以提高并发性。\",\"示例：\",\"START TRANSACTION; SELECT * FROM table_name WHERE column_name = 'some_value' FOR UPDATE; -- 在此事务中，column_name 等于 'some_value' 的行将被加上排他锁 COMMIT;\",\"在这个示例中，只有 column_name 等于 'some_value' 的行会被锁定，其他行仍然可以被其他事务访问。\"]},\"635\":{\"h\":\"7. 如何通过 SQL 手动给 MySQL 的某个表加锁\",\"t\":[\"手动加锁也就是显示的加表锁。\",\"MySQL提供了LOCK TABLES语句来显式地锁定一个或多个表。这可以用来阻止其他会话访问这些表。\",\"加写锁（排他锁）示例：\",\"LOCK TABLES table_name WRITE;\",\"加读锁（共享锁）示例：\",\"LOCK TABLES table_name READ;\",\"锁定多个表的示例：\",\"复制 LOCK TABLES table1 READ, table2 WRITE;\"]},\"636\":{\"h\":\"8. 高并发场景下，如何修改同一条数据\",\"t\":[\"这个要根据业务场景来选择锁。比如读多写少场景下，可以使用乐观锁，写冲突较多时可以使用悲观锁。\",\"例子：\",\"使用乐观锁： 乐观锁适用于写冲突较少的场景。通过在数据表中添加一个版本号或时间戳字段来实现。每次更新数据时，检查版本号或时间戳是否与读取时的值相同，如果相同，则进行更新并增加版本号或更新时间戳；如果不同，则放弃更新，提示用户冲突发生。\",\"START TRANSACTION; SELECT version_column, data_column FROM table_name WHERE id = 1; -- 检查并更新 UPDATE table_name SET data_column = 'new_value', version_column = version_column + 1 WHERE id = 1 AND version_column = read_version; COMMIT;\",\"使用悲观锁： 悲观锁适用于写冲突较多的场景。通过在事务开始时锁定需要修改的数据行，直到事务结束才释放锁。\",\"复制 START TRANSACTION; SELECT * FROM table_name WHERE id = 1 FOR UPDATE; -- 进行更新操作 UPDATE table_name SET data_column = 'new_value' WHERE id = 1; COMMIT;\"]},\"637\":{\"h\":\"9. MySQL 中的锁升级是什么\",\"t\":[\"锁升级指细粒度锁升级为粗粒度锁，如行锁升级为表锁。锁升级通常发生在一下情况：\",\"锁竞争： 当一个事务持有多个行锁，并且这些行锁的数量超过了系统预设的阈值时，数据库系统可能会将这些行锁升级为表锁，以减少系统开销和提高性能。\",\"锁定的行数： 如果锁定的行数占表中行数的很大一部分，数据库系统可能会认为整个表都被锁定了，因此会升级为表锁。\",\"锁定的页数： 类似地，如果锁定的页（数据库中数据的存储单位）数量占表中总页数的很大一部分，也可能触发锁升级。\",\"系统配置： MySQL的配置参数（如innodb_table_locks）会影响是否启用表锁以及何时进行锁升级。\",\"锁升级的优点包括：\",\"减少系统开销：管理大量行锁的开销可能很大，升级为表锁可以简化锁管理。\",\"提高性能：在某些情况下，锁升级可以减少死锁的可能性，并提高系统的整体性能。\",\"锁升级的缺点包括：\",\"降低并发性：表锁是一种粗粒度的锁，会阻止其他事务访问整个表，从而降低并发性。\",\"增加等待时间：其他事务可能需要等待表锁释放，增加了它们的等待时间。\",\"锁升级是数据库系统自动进行的，不需要用户干预。\"]},\"638\":{\"h\":\"10. MySql RR 的隔离级别下加锁规则\",\"t\":[\"重点\",\"在MySQL的可重复读（Repeatable Read，简称RR）隔离级别下，InnoDB存储引擎采用了一系列加锁规则来保证事务的隔离性。\",\"行锁： \",\"对于索引项的查询，如果能够定位到具体的索引记录，无论是主键索引还是二级索引，InnoDB会在这些具体的索引项上加上行锁（Record Lock）。\",\"间隙锁： \",\"如果查询条件的结果为空，即没有命中任何索引，那么在RR隔离级别下，InnoDB会在相关索引的间隙上加上间隙锁（Gap Lock）。\",\"Next-Key Lock： \",\"对于范围查询，InnoDB会使用Next-Key Lock，它是行锁和间隙锁的组合，用于锁定一个区间内的所有行以及区间的边界值。\",\"快照读与当前读： \",\"在RR隔离级别下，普通的SELECT语句是快照读（Snapshot Read），不加锁；但是当使用SELECT ... FOR UPDATE或SELECT ... LOCK IN SHARE MODE时，会变成当前读（Current Read），并加上相应的行锁或共享锁。\",\"幻读： \",\"RR隔离级别旨在防止幻读现象，即在一个事务中，两次读同一个范围的时候，第二次读到之前不存在的行。为了防止幻读，InnoDB会在查询涉及的范围上加上足够的间隙锁。\",\"锁升级： \",\"在RR隔离级别下，如果锁定的行数过多，InnoDB可能会将行锁升级为表锁，尽管这种行为在默认配置下不常见。\",\"自增锁： \",\"对于自增字段，InnoDB可能会使用自增锁（Auto-Increment Locks）来保证自增值的唯一性和连续性。\",\"意向锁： \",\"在多粒度锁定协议中，InnoDB使用意向锁（Intention Locks），如意向共享锁（Intention Shared Locks）和意向排他锁（Intention Exclusive Locks），以表明事务将在更细粒度上请求锁。\",\"锁的兼容性： \",\"共享锁（S锁）之间是兼容的，但排他锁（X锁）与任何其他类型的锁都不兼容。\",\"这些加锁规则共同作用，以确保在RR隔离级别下，事务可以看到一致的快照数据，并防止其他事务的干扰，直到事务完成。\"]},\"639\":{\"h\":\"11. 如何使用分布式锁\",\"t\":[\"实现分布式锁有以下几种方式：\"]},\"640\":{\"h\":\"11.1. 基于唯一索引实现\",\"t\":[\"这种方法通过尝试向一个表中插入具有唯一索引的记录来实现锁的获取。如果插入成功，则认为获取了锁；如果插入失败（由于唯一键冲突），则认为获取锁失败。\",\"创建锁表：\",\"CREATE TABLE `t_lock` ( `lock_key` varchar(64) NOT NULL COMMENT '锁的标识', PRIMARY KEY (`lock_key`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='分布式锁';\",\"获取锁：\",\"insert ignore into t_lock(lock_key) values('my_lock_key');\",\"使用insert ignore来避免违反唯一约束时产生的错误，如果返回值大于0，则认为成功获取了锁。\",\"释放锁：\",\"delete from t_lock where lock_key = 'my_lock_key';\",\"当操作完成时，删除记录以释放锁。\"]},\"641\":{\"h\":\"11.2. 基于排他锁（ ）实现\",\"t\":[\"这种方法通过在SELECT语句后增加FOR UPDATE来获取排他锁，确保某条记录在事务中被锁定，其他事务无法再获取到相同的排他锁。\",\"获取锁：\",\"SELECT * FROM some_table WHERE some_column = 'some_value' FOR UPDATE;\",\"这样就会在满足条件的行上加上排他锁。\",\"释放锁： 排他锁会在事务结束时释放，无论是通过COMMIT提交事务还是通过ROLLBACK回滚事务。\"]},\"642\":{\"h\":\"11.3. 基于乐观锁\",\"t\":[\"乐观锁通常通过在表中添加一个版本号或时间戳字段来实现。每次更新记录时，检查版本号或时间戳是否与读取时的值相同，如果相同则进行更新，否则放弃更新。\",\"获取锁： 使用普通的SELECT语句读取数据及版本号。\",\"更新操作：\",\"UPDATE some_table SET column1 = value1, version = version + 1 WHERE id = some_id AND version = some_version;\",\"只有当版本号匹配时才更新，并增加版本号。\",\"释放锁： 乐观锁通常不需要显式释放，因为它不依赖于数据库的锁定机制。\"]},\"643\":{\"h\":\"12. 如何检测死锁\",\"t\":[\"大多数数据库都自带死锁检测机制，内置的死锁检测器会在事务等待资源时自动检测死锁。例如：\",\"MySQL：可以使用INFORMATION_SCHEMA数据库中的INNODB_LOCK_WAITS表来查看死锁信息。\",\"SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS;\",\"这个表展示了哪些事务被锁定，以及哪些事务持有其他事务正在等待的锁。\"]},\"644\":{\"h\":\"13. 你遇到过死锁吗，你怎么处理的\",\"t\":[\"解决死锁： 数据库管理系统通常有机制来检测和解决死锁：\",\"死锁检测：系统定期检查事务的执行状态，以识别是否存在死锁。\",\"超时：事务在等待资源超过一定时间后超时，系统自动回滚事务。\",\"回滚：检测到死锁后，系统可能会选择一个或多个事务进行回滚，释放它们持有的资源，从而打破死锁状态。\",\"锁升级：在某些情况下，系统可能会尝试将锁从更细的粒度升级到更粗的粒度，以减少死锁的可能性。\",\"这四种是解决死锁的办法，接下来实操如何发现处理死锁。\",\"监控死锁\",\"show engine innodb status\",\"image-20240527182546406\",\"这里返回了包含详细信息的输出，包括死锁检测到的信息。\",\"解决死锁\",\"回滚事务\",\"ROLLBACK;\",\"杀死引起死锁的进程\",\"找到引起死锁的进程 ID，使用 kill 杀死该进程。\",\"SHOW PROCESSLIST; KILL <process_id>\"]},\"645\":{\"c\":[\"mysql\"]},\"646\":{\"c\":[\"mysql\",\"数据库锁\"]},\"647\":{\"h\":\"Redis\"},\"648\":{\"h\":\"rodert单排学习redis入门【黑铁】\"},\"649\":{\"h\":\"rodert单排学习redis入门【黑铁】\",\"t\":[\"redis入门\",\"欢迎大家前来白嫖PDF。下图回复：666\",\"本教程致力于最实用教程，个别图片粘贴有丢失，还有来领取原版。\",\"在这里插入图片描述\",\"@[toc]\"]},\"650\":{\"h\":\"前言\",\"t\":[\"声明：参考来源互联网，有任何争议可以留言。站在前人的肩上，我们才能看的更远。\",\"本教程纯手打，致力于最实用教程，不需要什么奖励，只希望多多转发支持。 欢迎来我公众号，希望可以结识你，也可以催更，微信搜索：JavaPub\",\"有任何问题都可以来谈谈 ！\",\"在这里插入图片描述\",\"本篇主要是 Redis 的入门，涉及一些基础命令和常见场景。\",\"redis是目前最热的缓存组件之一，如果你还不懂，那就开始，入门到实战\",\"本文主要是 Redis 入门知识，介绍 Redis 特性、使用场景、安装和数据类型。\",\"中文官网：http://www.redis.cn/\"]},\"651\":{\"h\":\"1.NoSql(not only sql)\",\"t\":[\"指非关系型数据库，不支持sql语句，nosql中存储的数据是KV形式\",\"常见的NoSQL产品有：Mongodb、Redis、Hbase hadoop、Cassandra hadoop。\"]},\"652\":{\"h\":\"2.Redis入门\",\"t\":[\"这是一些redis介绍，做一些简单了解即可。\",\"Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis 的开发由Pivotal赞助。\",\"redis 是一个 key-value 存储系统。和 Memcached 类似，它支持存储的 value 类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set --有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，Redis 支持各种不同方式的排序。与 memcached 一样，为了保证效率，数据都是缓存在内存中。区别的是 Redis 会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了 master-slave(主从)同步。\",\"Redis 是一个高性能的key-value数据库。 Redis 的出现，很大程度补偿了**memcached**这类key/value存储的不足，在部 分场合可以对关系数据库起到很好的补充作用。它提供了Java，C/C++，C#，PHP，JavaScript，Perl，Object-C，Python，Ruby，Erlang等客户端，使用很方便。 Redis 支持主从同步。数据可以从主服务器向任意数量的从服务器上同步，从服务器可以是关联其他从服务器的主服务器。这使得 Redis 可执行单层树复制。存盘可以有意无意的对数据进行写操作。由于完全实现了发布/订阅机制，使得从数据库在任何地方同步树时，可订阅一个频道并接收主服务器完整的消息发布记录。同步对读取操作的可扩展性和数据冗余很有帮助。\",\"Redis 的官网地址，非常好记，是redis.io。（域名后缀io属于国家域名，是british Indian Ocean territory，即英属印度洋领地），Vmware在资助着 Redis 项目的开发和维护。\"]},\"653\":{\"h\":\"3.Redis特性\"},\"654\":{\"h\":\"3.1.性能\",\"t\":[\"下面是官方的bench-mark数据： 测试完成了 50 个并发执行 100000 个请求。 设置和获取的值是一个 256 字节字符串。 Linux box 是运行 Linux 2.6 , 这是 X3320 Xeon 2.5 ghz。 文本执行使用 loopback 接口(127.0.0.1)。 结果:读的速度是 110000次/s ,写的速度是 81000次/s 。\"]},\"655\":{\"h\":\"3.2.特性\",\"t\":[\"**Redis **与其他 key-value 缓存产品有以下三个特点：\",\"**Redis **支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。\",\"**Redis **不仅仅支持简单的 **key-value**类型的数据，同时还提供 **list，set，zset，hash **等数据结构的存储。\",\"**Redis **支持数据的备份，即 master-slave 模式的数据备份。\"]},\"656\":{\"h\":\"3.3.优势\",\"t\":[\"性能极高 – **Redis **能读的速度是110000次/s,写的速度是81000次/s 。\",\"丰富的数据类型 – **Redis **支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。\",\"原子 – **Redis 的所有操作都是原子性的，同时Redis **还支持对几个操作全并后的原子性执行。\",\"丰富的特性 – **Redis **还支持 publish/subscribe, 通知, key 过期等等特性。\"]},\"657\":{\"h\":\"4.Redis使用场景\",\"t\":[\"目前在互联网公司， Redis 使用非常广泛，我日常工作中，会用它做爬虫采集系统中队列使用，还有在后台管理系统中做分布式，存储 token 使用。\",\"1、缓存\",\"缓存现在几乎是所有中大型网站都在用的必杀技，合理的利用缓存不仅能够提升网站访问速度，还能大大降低数据库的压力。Redis 提供了键过期功能，也提供了灵活的键淘汰策略，所以，现在 Redis 用在缓存的场合非常多。\",\"2、排行榜\",\"很多网站都有排行榜应用的，如京东的月度销量榜单、商品按时间的上新排行榜等。Redis 提供的有序集合数据类构能实现各种复杂的排行榜应用。\",\"3、计数器\",\"什么是计数器，如电商网站商品的浏览量、视频网站视频的播放数等。为了保证数据实时效，每次浏览都得给+1，并发量高时如果每次都请求数据库操作无疑是种挑战和压力。Redis 提供的 incr 命令来实现计数器功能，内存操作，性能非常好，非常适用于这些计数场景。\",\"4、分布式会话\",\"集群模式下，在应用不多的情况下一般使用容器自带的 session 复制功能就能满足，当应用增多相对复杂的系统中，一般都会搭建以 Redis 等内存数据库为中心的 session 服务，session 不再由容器管理，而是由 session 服务及内存数据库管理。\",\"5、分布式锁\",\"在很多互联网公司中都使用了分布式技术，分布式技术带来的技术挑战是对同一个资源的并发访问，如全局ID、减库存、秒杀等场景，并发量不大的场景可以使用数据库的悲观锁、乐观锁来实现，但在并发量高的场合中，利用数据库锁来控制资源的并发访问是不太理想的，大大影响了数据库的性能。可以利用 Redis 的setnx功能来编写分布式的锁，如果设置返回1说明获取锁成功，否则获取锁失败，实际应用中要考虑的细节要更多。\",\"6、社交网络\",\"点赞、踩、关注/被关注、共同好友等是社交网站的基本功能，社交网站的访问量通常来说比较大，而且传统的关系数据库类型不适合存储这种类型的数据，Redis提供的哈希、集合等数据结构能很方便的的实现这些功能。\",\"7、最新列表\",\"Redis列表结构，LPUSH可以在列表头部插入一个内容ID作为关键字，LTRIM可用来限制列表的数量，这样列表永远为N个ID，无需查询最新的列表，直接根据ID去到对应的内容页即可。\",\"8、消息系统\",\"消息队列是大型网站必用中间件，如ActiveMQ、RabbitMQ、Kafka 等流行的消息队列中间件，主要用于业务解耦、流量削峰及异步处理实时性低的业务。Redis 提供了发布/订阅及阻塞队列功能，能实现一个简单的消息队列系统。另外，这个不能和专业的消息中间件相比。\"]},\"658\":{\"h\":\"5.安装\"},\"659\":{\"h\":\"5.1.单机安装\"},\"660\":{\"h\":\"5.1.1.windows下\",\"t\":[\"redis 开源在 github 上\",\"下载，解压\",\"下载地址：https://github.com/tporadowski/redis/releases\",\"Redis 支持 32 位和 64 位。这个需要根据你系统平台的实际情况选择，这里我们下载 Redis-x64-xxx.zip压缩包到 C 盘，解压后，将文件夹重新命名为 redis。\",\"运行\",\"解压后，打开 cmd 窗口，cd 切换到 redis根目录下。\",\"redis-server.exe redis.windows.conf\",\"在这里插入图片描述\",\"客户端连接\",\"不要关闭原 cmd 窗口，新打开一个 cmd 窗口，切换到 redis 根目录\",\"redis-cli.exe -h 127.0.0.1 -p 6379\",\"6379 是 redis 默认端口，我们可以在配置中修改\",\"测试\",\"设置 key 值\",\"set myKey abc\",\"取出 key 值\",\"get myKey\"]},\"661\":{\"h\":\"5.1.2.linux下\",\"t\":[\"linux 和 windows 下类似，启动方式参考上文\",\"$ wget http://download.redis.io/releases/redis-2.8.17.tar.gz $ tar xzf redis-2.8.17.tar.gz $ cd redis-2.8.17 $ make\"]},\"662\":{\"h\":\"6.五类数据结构\"},\"663\":{\"h\":\"6.0.说明\",\"t\":[\"类型中会涉及到很多的 Redis 操作命令，一定耐心看完，优化的基础是要了解。\"]},\"664\":{\"h\":\"6.1.介绍\",\"t\":[\"Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。\",\"redis是非常优秀的缓存工具，熟练使用redis，可以让我们的开发进一步。\",\"对于下面操作，可以通过 redis-cli 工具连接使用\"]},\"665\":{\"h\":\"6.2.Redis keys\",\"t\":[\"关于key的几条规则，一定不要以为它们不重要，了解一些对你排查问题至关重要。\",\"Redis key 值是二进制安全的，这意味着可以用任何二进制序列作为key值，从形如”foo”的简单字符串到一个 JPEG 文件的内容都可以。空字符串也是有效 key 值。\",\"关于key的几条规则：\",\"太长的键值不是个好主意，例如1024字节的键值就不是个好主意，不仅因为消耗内存，而且在数据中查找这类键值的计算成本很高。\",\"太短的键值通常也不是好主意，如果你要用”u:1000:pwd”来代替”user:1000:password”，这没有什么问题，但后者更易阅读，并且由此增加的空间消耗相对于**key object和value object**本身来说很小。当然，没人阻止您一定要用更短的键值节省一丁点儿空间。\",\"最好坚持一种模式。例如：”object-type:uid:field”就是个不错的注意，像这样”user:1000:password”。我喜欢对多单词的字段名中加上一个点，就像这样：”comment:q1234:reply.to”。\"]},\"666\":{\"h\":\"6.2.字符串（strings）\",\"t\":[\"二进制安全的字符串\",\"字符串方式是redis最简单的数据类型，redis就像一个可以持久化的memcached服务器。\",\"基本的操作方式**get 和 set **方式\",\"> set mykey somevalue OK > get mykey \\\"somevalue\\\"\",\"例如：当key存在时，set会失败。值的长度不能超过512MB。\",\"一个有趣的操作，原子递增，\",\"> set counter 100 OK > incr counter (integer) 101 > incr counter (integer) 102 > incrby counter 50 (integer) 152\",\"INCR 命令将字符串解析成整型，将其加一，再将结果保存成新的字符串，类似的命令还有 INCRBY , DECR 和 DECRBY 。\",\"还有一个有趣的命令， GETSET 命令：设置新值，返回原值。这个操作有什么用？在我们需要保证原子性操作时\",\"MSET 和 MGET 是批量操作\",\"> mset a 10 b 20 c 30 OK > mget a b c 1) \\\"10\\\" 2) \\\"20\\\" 3) \\\"30\\\"\",\"MGET 命令返回由值组成的数组。\",\"修改和查询存在操作\",\"exists:判断键是否存在，del：删除指定键\",\"> set mykey hello OK > exists mykey (integer) 1 > del mykey (integer) 1 > exists mykey (integer) 0\",\"TYPE 命令返回key对应的存储类型\",\"> set mykey x OK > type mykey string > del mykey (integer) 1 > type mykey none\",\"Redis超时\",\"对 key 设置**超时**。精度可以使用毫秒或秒。\",\"> set key some-value OK > expire key 5 (integer) 1 > get key (immediately) \\\"some-value\\\" > get key (after some time) (nil)\",\"使用了 EXPIRE 来设置超时时间(也可以再次调用这个命令来改变超时时间，使用 PERSIST 命令去除超时时间 )。我们也可以在创建值的时候设置超时时间:\",\"> set key 100 ex 10 OK > ttl key (integer) 9\",\"TTL 命令用来查看key对应的值剩余存活时间。\"]},\"667\":{\"h\":\"6.3.列表（Lists）\",\"t\":[\"值得注意的：Redis lists 基于 Linked Lists 实现。\",\"**Redis 列表**是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）\",\"一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。\",\"Redis Lists 入门\",\"> rpush mylist A (integer) 1 > rpush mylist B (integer) 2 > lpush mylist first (integer) 3 > lrange mylist 0 -1 1) \\\"first\\\" 2) \\\"A\\\" 3) \\\"B\\\"\",\"从右边(尾部)插入俩个元素，左边(头部)插入一个元素，**LRANGE **打印所有(0,-1)元素。\",\"**Redis Lists**常用指令\",\"BLPOP key1 [key2 ] timeout 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\",\"BRPOP key1 [key2 ] timeout 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\",\"BRPOPLPUSH source destination timeout 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\",\"LINDEX key index 通过索引获取列表中的元素\",\"LINSERT key BEFORE|AFTER pivot value 在列表的元素前或者后插入元素\",\"说明：Redis Linsert 命令用于在列表的元素前或者后插入元素。当指定元素不存在于列表中时，不执行任何操作。当列表不存在时，被视为空列表，不执行任何操作。如果 key 不是列表类型，返回一个错误。\",\"实例：\",\"redis> RPUSH mylist \\\"Hello\\\" (integer) 1 redis> RPUSH mylist \\\"World\\\" (integer) 2 redis> LINSERT mylist BEFORE \\\"World\\\" \\\"There\\\" (integer) 3 redis> LRANGE mylist 0 -1 1) \\\"Hello\\\" 2) \\\"There\\\" 3) \\\"World\\\" redis>\",\"LLEN key 获取列表长度\",\"LPOP key 移出并获取列表的第一个元素\",\"LPUSH key value1 [value2] 将一个或多个值插入到列表头部\",\"LPUSHX key value 将一个值插入到已存在的列表头部\",\"LRANGE key start stop 获取列表指定范围内的元素\",\"LREM key count value 移除列表元素\",\"count > 0 : 从表头开始向表尾搜索，移除与 VALUE 相等的元素，数量为 COUNT 。 count < 0 : 从表尾开始向表头搜索，移除与 VALUE 相等的元素，数量为 COUNT 的绝对值。 count = 0 : 移除表中所有与 VALUE 相等的值。\",\"LSET key index value 通过索引设置列表元素的值\",\"LTRIM key start stop 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。\",\"注意：下标从0开始\",\"RPOP key 移除列表的最后一个元素，返回值为移除的元素。\",\"RPOPLPUSH source destination 移除列表的最后一个元素，并将该元素添加到另一个列表并返回。\",\"RPUSH key value1 [value2] 在列表中添加一个或多个值\",\"RPUSHX key value 为已存在的列表添加值\"]},\"668\":{\"h\":\"6.4.哈希(Hash)\",\"t\":[\"Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。\",\"Redis 中每个 hash 可以存储 232 - 1 键值对（40多亿）。\",\"序号 命令及描述 1 HDEL key field1 [field2] 删除一个或多个哈希表字段 2 HEXISTS key field 查看哈希表 key 中，指定的字段是否存在。 3 HGET key field 获取存储在哈希表中指定字段的值。 4 HGETALL key 获取在哈希表中指定 key 的所有字段和值 5 HINCRBY key field increment 为哈希表 key 中的指定字段的整数值加上增量 increment 。 6 HINCRBYFLOAT key field increment 为哈希表 key 中的指定字段的浮点数值加上增量 increment 。 7 HKEYS key 获取所有哈希表中的字段 8 HLEN key 获取哈希表中字段的数量 9 HMGET key field1 [field2] 获取所有给定字段的值 10 HMSET key field1 value1 [field2 value2 ] 同时将多个 field-value (域-值)对设置到哈希表 key 中。 11 HSET key field value 将哈希表 key 中的字段 field 的值设为 value 。 12 HSETNX key field value 只有在字段 field 不存在时，设置哈希表字段的值。 13 HVALS key 获取哈希表中所有值。 14 HSCAN key cursor [MATCH pattern] [COUNT count] 迭代哈希表中的键值对。\",\"参考:https://www.runoob.com/redis/redis-hashes.html\"]},\"669\":{\"h\":\"6.5.集合(Set)\",\"t\":[\"Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。\",\"Redis 中**集合 **是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。\",\"序号 命令及描述 1 SADD key member1 [member2] 向集合添加一个或多个成员 2 SCARD key 获取集合的成员数 3 SDIFF key1 [key2] 返回给定所有集合的差集 4 SDIFFSTORE destination key1 [key2] 返回给定所有集合的差集并存储在 destination 中 5 SINTER key1 [key2] 返回给定所有集合的交集 6 SINTERSTORE destination key1 [key2] 返回给定所有集合的交集并存储在 destination 中 7 SISMEMBER key member 判断 member 元素是否是集合 key 的成员 8 SMEMBERS key 返回集合中的所有成员 9 SMOVE source destination member 将 member 元素从 source 集合移动到 destination 集合 10 SPOP key 移除并返回集合中的一个随机元素 11 SRANDMEMBER key [count] 返回集合中一个或多个随机数 12 SREM key member1 [member2] 移除集合中一个或多个成员 13 SUNION key1 [key2] 返回所有给定集合的并集 14 SUNIONSTORE destination key1 [key2] 所有给定集合的并集存储在 destination 集合中 15 SSCAN key cursor [MATCH pattern] [COUNT count] 迭代集合中的元素\",\"参考：https://www.runoob.com/redis/redis-sets.html\"]},\"670\":{\"h\":\"6.6.有序集合(sorted set)\",\"t\":[\"Redis **有序集合 和集合 **一样也是 string 类型元素的集合,且不允许重复的成员。\",\"不同的是每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。\",\"有序集合的成员是唯一的,但分数(score)却可以重复。\",\"集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。\",\"序号 命令及描述 1 ZADD key score1 member1 [score2 member2] 向有序集合添加一个或多个成员，或者更新已存在成员的分数 2 ZCARD key 获取有序集合的成员数 3 ZCOUNT key min max 计算在有序集合中指定区间分数的成员数 4 ZINCRBY key increment member 有序集合中对指定成员的分数加上增量 increment 5 ZINTERSTORE destination numkeys key [key ...] 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中 6 ZLEXCOUNT key min max 在有序集合中计算指定字典区间内成员数量 7 ZRANGE key start stop [WITHSCORES] 通过索引区间返回有序集合指定区间内的成员 8 ZRANGEBYLEX key min max [LIMIT offset count] 通过字典区间返回有序集合的成员 9 ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT] 通过分数返回有序集合指定区间内的成员 10 ZRANK key member 返回有序集合中指定成员的索引 11 ZREM key member [member ...] 移除有序集合中的一个或多个成员 12 ZREMRANGEBYLEX key min max 移除有序集合中给定的字典区间的所有成员 13 ZREMRANGEBYRANK key start stop 移除有序集合中给定的排名区间的所有成员 14 ZREMRANGEBYSCORE key min max 移除有序集合中给定的分数区间的所有成员 15 ZREVRANGE key start stop [WITHSCORES] 返回有序集中指定区间内的成员，通过索引，分数从高到低 16 ZREVRANGEBYSCORE key max min [WITHSCORES] 返回有序集中指定分数区间内的成员，分数从高到低排序 17 ZREVRANK key member 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序 18 ZSCORE key member 返回有序集中，成员的分数值 19 ZUNIONSTORE destination numkeys key [key ...] 计算给定的一个或多个有序集的并集，并存储在新的 key 中 20 ZSCAN key cursor [MATCH pattern] [COUNT count] 迭代有序集合中的元素（包括元素成员和元素分值）\"]},\"671\":{\"h\":\"7.Redis常用\",\"t\":[\"如果你读到在这里，相信你对 Redis 已经有了一定了解，入门就先简单学到这里，下篇一起上**青铜**。\",\"后面的篇章，还将继续介绍 Redis 的一些高级用法，缓存击穿、缓存雪崩，源码分析等。看后不忘三连，还有需要更多技术博文可以留言催更。\"]},\"672\":{\"c\":[\"redis\"]},\"673\":{\"c\":[\"redis\",\"单排学习redis\"]},\"674\":{\"h\":\"rodert单排学习redis进阶【青铜】\"},\"675\":{\"h\":\"rodert单排学习redis进阶【青铜】\",\"t\":[\"redis之青铜\",\" @[toc]\"]},\"676\":{\"h\":\"前言\",\"t\":[\"声明：参考来源互联网，有任何争议可以留言。站在前人的肩上，我们才能看的更远。\",\"本教程纯手打，致力于最实用教程，不需要什么奖励，只希望多多转发支持。 欢迎来我公众号，希望可以结识你，也可以催更，微信搜索：JavaPub\",\"有任何问题都可以来谈谈 ！\",\"在这里插入图片描述\",\"本篇继续学习 Redis ,上一篇 rodert单排学习redis入门【黑铁】 对 Redis **安装和常用数据**结构做了梳理，如果没看可以先回去看完再继续本篇~\",\"上一篇都是对一些 redis 基本数据类型 api 的讲解，本篇是数据类型底层实现，主要内容有：\",\"为什么使用Redis\",\"Redis数据结构解析\",\"SDS简单动态字符串\",\"哈希表\",\"跳跃表\",\"整数集合\",\"压缩列表\",\"Redis中数据结构的对象\",\"...\"]},\"677\":{\"h\":\"1.再谈Redis\",\"t\":[\"Redis 是什么？官话来说就是：\",\"Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker.\",\"Redis 是一个开源的、基于内存的数据结构存储器，可以用作数据库、缓存和消息中间件。\",\"如果想尝试 Redis 命令又懒得安装，可以使用这个 http://try.redis.io/ 网站。\",\"在这里插入图片描述\"]},\"678\":{\"h\":\"2.为什么要用Redis\",\"t\":[\"上一篇咱们有一定了解\",\"Redis 是**基于内存**，常用作缓存的一种技术，并且 Redis 存储的方式是以 key-value 形式。\",\"那我们为什么不用 Java Map？\",\"Java Map是**本地缓存**的，最主要的特点是轻量以及快速，生命周期随着jvm的销毁而结束，并且在多实例的情况下，每个实例都需要各自保存一份缓存，缓存不具有一致性。\",\"JVM内存太大容易挂掉，还有各种**过期机制、存储结构**需要自己手动来写\",\"Redis 会定期把缓存保存到硬盘，重启恢复数据，丰富的数据结构，缓存机制等实用功能。\"]},\"679\":{\"h\":\"3.为什么要使用缓存？\",\"t\":[\"高并发，高可用这是现在互联网经常提到的一个词。在程序出现大量请求是就会出现**性能问题，一般性能问题第一道就是数据库扛不住了**，数据库的读写会有磁盘操作，而磁盘的速度相对内存来说慢很多。\",\"所有我们在中间加一道缓存：\",\"在这里插入图片描述\"]},\"680\":{\"h\":\"4.Redis数据结构\"},\"681\":{\"h\":\"4.1.SDS简单动态字符串\"},\"682\":{\"h\":\"4.1.1.SDS简单动态字符串\",\"t\":[\"Redis 是由C语言编写的。\",\"我们现在知道 Redis 所有键都是字符串，值有字符串（string）、散列（hash）、列表（list）、集合（set）和有序集合（sorted set）这五种类型的键的底层实现数据结构。\",\"Redis 没有直接使用 C 语言传统的字符串表示（以空字符结尾的字符数组，以下简称 C 字符串）， 而是自己构建了一种名为简单动态字符串（simple dynamic string，SDS）的抽象类型， 并将 SDS 用作 Redis 的默认字符串表示。\",\"Redis 使用 sds.h/sdshdr 结构表示一个 SDS 值：\",\"struct sdshdr { // 记录 buf 数组中已使用字节的数量 // 等于 SDS 所保存字符串的长度 int len; // 记录 buf 数组中未使用字节的数量 int free; // 字节数组，用于保存字符串 char buf[]; };\",\"在这里插入图片描述\",\"上图是 SDS 示例，以空字符结尾 '\\\\0'。遵循空字符结尾这一惯例的好处是， SDS 可以直接重用一部分 C 字符串函数库里面的函数。\",\"举个例子， 如果我们有一个指向图 2-1 所示 SDS 的指针 s ， 那么我们可以直接使用 stdio.h/printf 函数， 通过执行以下语句：\",\"printf(\\\"%s\\\", s->buf);\",\"来打印出 SDS 保存的字符串值 \\\"Redis\\\" ， 而无须为 SDS 编写专门的打印函数。\"]},\"683\":{\"h\":\"4.1.2.SDS简单动态字符串好处\",\"t\":[\"sdshdr数据结构中用len属性记录了字符串的长度。那么获取字符串的长度时，时间复杂度只需要 O(1)。常数复杂度获取字符串长度。\",\"SDS不会发生溢出的问题，如果修改SDS时，空间不足。先会扩展空间，再进行修改！(内部实现了动态扩展机制)。杜绝缓冲区溢出。\",\"SDS可以**减少内存分配的次数(空间预分配机制)。在扩展空间时，除了分配修改时所必要的空间，还会分配额外的空闲空间(free 属性)。减少修改字符串长度时所需的内存重分配次数**。\",\"SDS是**二进制安全**的，SDS 以二进制的方式来处理SDS存放在buf数组里的数据。\",\"可以使用一部分 <string.h> 库中的函数。兼容部分 C 字符串函数。\"]},\"684\":{\"h\":\"4.2.Redis 链表和链表节点\",\"t\":[\"Java 学习者对链表应该都很熟悉，链表是 Java 中一种典型且常用的数据构。\",\"每个**链表节点**使用一个 adlist.h/listNode 结构来表示：\",\"typedef struct listNode { // 前置节点 struct listNode *prev; // 后置节点 struct listNode *next; // 节点的值 void *value; } listNode;\",\"使用listNode是可以组成链表了，Redis中**使用list结构来持有链表**：\",\"typedef struct list { // 表头节点 listNode *head; // 表尾节点 listNode *tail; // 链表所包含的节点数量 unsigned long len; // 节点值复制函数 void *(*dup)(void *ptr); // 节点值释放函数 void (*free)(void *ptr); // 节点值对比函数 int (*match)(void *ptr, void *key); } list;\",\"由一个 list 结构和三个 listNode 结构组成的链表：\",\"在这里插入图片描述\"]},\"685\":{\"h\":\"4.2.2.Redis 链表重点\",\"t\":[\"链表被广泛用于实现 Redis 的各种功能， 比如列表键， 发布与订阅， 慢查询， 监视器， 等等。\",\"每个链表节点由一个 listNode 结构来表示， 每个节点都有一个指向前置节点和后置节点的指针， 所以 Redis 的链表实现是双端链表。\",\"每个链表使用一个 list 结构来表示，这个结构带有表头节点指针、表尾节点指针、以及链表长度等信息。\",\"因为链表表头节点的前置节点和表尾节点的后置节点都指向 NULL ， 所以 Redis 的链表实现是无环链表。\",\"通过为链表设置不同的类型特定函数， Redis 的链表可以用于保存各种不同类型的值。\"]},\"686\":{\"h\":\"4.3.Redis 字典\"},\"687\":{\"h\":\"4.3.1.哈希表\",\"t\":[\"字典是 Redis 中的一个概念，Redis 的字典使用哈希表作为底层实现。 一个哈希表里面可以有多个哈希表节点， 而每个哈希表节点就保存了字典中的一个键值对。\",\"空哈希表 Redis 字典所使用的哈希表由 dict.h/dictht 结构定义：\",\"typedef struct dictht { // 哈希表数组 dictEntry **table; // 哈希表大小 unsigned long size; // 哈希表大小掩码，用于计算索引值 // 总是等于 size - 1 unsigned long sizemask; // 该哈希表已有节点的数量 unsigned long used; } dictht;\",\"在这里插入图片描述\",\"哈希表节点 哈希表节点使用 dictEntry 结构表示， 每个 dictEntry 结构都保存着一个键值对：\",\"typedef struct dictEntry { // 键 void *key; // 值 union { void *val; uint64_t u64; //uint64_t整数 int64_t s64; //int64_t整数 } v; // 指向下个哈希表节点，形成链表 struct dictEntry *next; } dictEntry;\",\"在这里插入图片描述\",\"有没有注意到，上图有个冲突，俩个键在同一个节点，这就是 Redis 解决键冲突 ，Redis 的哈希表使用链地址法（separate chaining）来解决键冲突： 每个哈希表节点都有一个 next 指针， 多个哈希表节点可以用 next 指针构成一个单向链表， 被分配到同一个索引上的多个节点可以用这个单向链表连接起来， 这就解决了键冲突的问题。\",\"字典 Redis 中的字典由 dict.h/dict 结构表示：\",\"typedef struct dict { // 类型特定函数 dictType *type; // 私有数据 void *privdata; // 哈希表 dictht ht[2]; // rehash 索引 // 当 rehash 不在进行时，值为 -1 int rehashidx; /* rehashing not in progress if rehashidx == -1 */ } dict; ------------------分割线--------------------------- typedef struct dictType { // 计算哈希值的函数 unsigned int (*hashFunction)(const void *key); // 复制键的函数 void *(*keyDup)(void *privdata, const void *key); // 复制值的函数 void *(*valDup)(void *privdata, const void *obj); // 对比键的函数 int (*keyCompare)(void *privdata, const void *key1, const void *key2); // 销毁键的函数 void (*keyDestructor)(void *privdata, void *key); // 销毁值的函数 void (*valDestructor)(void *privdata, void *obj); } dictType;\",\"​ ht 属性是一个包含两个项的数组， 数组中的每个项都是一个 dictht 哈希表， 一般情况下， 字典只使用 ht[0] 哈希表， ht[1] 哈希表只会在对 ht[0] 哈希表进行 rehash 时使用。\",\"在这里插入图片描述\"]},\"688\":{\"h\":\"4.3.2.Redis rehash(重新散列)\",\"t\":[\"随着操作的不断执行， 哈希表保存的键值对会逐渐地增多或者减少， 为了让哈希表的**负载因子**（load factor）维持在一个合理的范围之内， 当哈希表保存的键值对数量太多或者太少时， 程序需要对哈希表的大小进行相应的扩展或者收缩。\",\"在对哈希表进行扩展或者收缩操作时，reash 过程并不是一次性地完成的，而是**渐进式**地完成的。\",\"以下是哈希表渐进式 rehash 的详细步骤： 为 ht[1] 分配空间， 让字典同时持有 ht[0] 和 ht[1] 两个哈希表。 在字典中维持一个索引计数器变量 rehashidx ， 并将它的值设置为 0 ， 表示 rehash 工作正式开始。 在 rehash 进行期间， 每次对字典执行添加、删除、查找或者更新操作时， 程序除了执行指定的操作以外， 还会顺带将 ht[0] 哈希表在 rehashidx 索引上的所有键值对 rehash 到 ht[1] ， 当 rehash 工作完成之后， 程序将 rehashidx 属性的值增一。 随着字典操作的不断执行， 最终在某个时间点上， ht[0] 的所有键值对都会被 rehash 至 ht[1] ， 这时程序将 rehashidx 属性的值设为 -1 ， 表示 rehash 操作已完成。\"]},\"689\":{\"h\":\"4.3.3.重点\",\"t\":[\"字典被广泛用于实现 Redis 的各种功能， 其中包括数据库和哈希键。\",\"Redis 中的字典使用哈希表作为底层实现， 每个字典带有两个哈希表， 一个用于平时使用， 另一个仅在进行 rehash 时使用。\",\"当字典被用作数据库的底层实现， 或者哈希键的底层实现时， Redis 使用 MurmurHash2 算法来计算键的哈希值。\",\"哈希表使用链地址法来解决键冲突， 被分配到同一个索引上的多个键值对会连接成一个单向链表。\",\"在对哈希表进行扩展或者收缩操作时， 程序需要将现有哈希表包含的所有键值对 rehash 到新哈希表里面， 并且这个 rehash 过程并不是一次性地完成的， 而是渐进式地完成的。\"]},\"690\":{\"h\":\"4.4.跳跃表\"},\"691\":{\"h\":\"4.4.1.跳跃表\",\"t\":[\"Redis 的跳跃表由 redis.h/zskiplistNode 和 redis.h/zskiplist 两个结构定义， 其中 zskiplistNode 结构用于表示跳跃表节点， 而 zskiplist 结构则用于保存跳跃表节点的相关信息， 比如节点的数量， 以及指向**表头节点和表尾节点**的指针， 等等。\",\"跳跃表节点\",\"typedef struct zskiplistNode { // 后退指针 struct zskiplistNode *backward; // 分值 double score; // 成员对象 robj *obj; // 层 struct zskiplistLevel { // 前进指针 struct zskiplistNode *forward; // 跨度 unsigned int span; } level[]; } zskiplistNode;\",\"zskiplistNode 不同层高节点\",\"在这里插入图片描述\",\"跳跃表节点的 level 数组可以包含多个元素， 每个元素都包含一个指向其他节点的指针， 程序可以通过这些层来加快访问其他节点的速度， 一般来说， 层的数量越多， 访问其他节点的**速度就越快**。\",\"在这里插入图片描述\",\"看到这里，如果还有疑惑，不理解什么是跳跃表，传送一篇不错的跳跃表介绍文章：https://www.cnblogs.com/hunternet/p/11248192.html\"]},\"692\":{\"h\":\"4.4.2.重点\",\"t\":[\"跳跃表是有序集合的底层实现之一， 除此之外它在 Redis 中没有其他应用。\",\"Redis 的跳跃表实现由 zskiplist 和 zskiplistNode 两个结构组成， 其中 zskiplist 用于保存**跳跃表信息（比如表头节点、表尾节点、长度）， 而 zskiplistNode 则用于表示跳跃表节点**。\",\"每个跳跃表节点的层高都是 1 至 32 之间的**随机数**。\",\"在同一个跳跃表中， 多个节点可以包含**相同的分值， 但每个节点的成员对象必须是唯一**的。\",\"跳跃表中的节点按照分值大小进行排序， 当分值相同时， 节点按照成员对象的大小进行排序。\"]},\"693\":{\"h\":\"4.5.整数集合\",\"t\":[\"整数集合是**集合键(set)**的底层实现之一。\",\"整数集合的底层实现为**数组， 这个数组以有序、无重复的方式保存集合元素，在有需要时， 程序会根据新添加元素**的类型， 改变这个数组的类型。\",\"升级操作为整数集合带来了操作上的灵活性， 并且尽可能地节约了内存。\",\"整数集合**只支持升级**操作， 不支持降级操作。\",\"整数集合（intset）是 Redis 用于保存整数值的集合抽象数据结构， 它可以保存类型为 int16_t 、 int32_t 或者 int64_t 的整数值， 并且保证集合中不会出现**重复元素**。\",\"数据结构：\",\"typedef struct intset { // 编码方式 uint32_t encoding; // 集合包含的元素数量 uint32_t length; // 保存元素的数组 int8_t contents[]; } intset;\",\"在这里插入图片描述\"]},\"694\":{\"h\":\"4.6.压缩列表\"},\"695\":{\"h\":\"4.6.1.前言\",\"t\":[\"同整数集合一样压缩列表也不是基础数据结构，而是 Redis 自己设计的一种数据存储结构。它有点儿类似数组，通过一片**连续的内存空间**，来存储数据。不过，它跟数组不同的一点是，它允许存储的数据大小不同。\",\"我们知道，数组要求每个元素大大小相同，如果要存储长度不同的字符串，那就需要用**最大长度**的字符串大小作为元素的大小。以最大长度为标准，就会浪费一部分存储空间。\",\"数组的优势占用一片**连续的空间**可以很好的利用CPU缓存访问数据。如果我们想要保留这种优势，又想节省存储空间我们可以对数组进行压缩。\",\"那就需要给每个节点增加一个 lenght 的属性。\"]},\"696\":{\"h\":\"4.6.2.Redis 压缩列表\",\"t\":[\"压缩列表(zip1ist)是 Redis 列表和 Redis 哈希的底层实现之一。\",\"当一个列表只包含少量列表项,并且每个列表项要么就是小整数值,要么就是长度比较短的字符串,那么Redis就会使用压缩列表来做列表的底层实现。\",\"当一个哈希只包含少量键值对,比且每个键值对的键和值要么就是小整数值,要么就是长度比较短的字符串,那么Redis就会使用压缩列表来做哈希的底层实现。\",\"在这里插入图片描述\",\"参考：https://www.cnblogs.com/hunternet/p/11306690.html\",\"表是Redis为节约内存自己设计的一种顺序型数据结构。\",\"表被用作列表键和哈希键的底层实现之一。\",\"压缩列表可以包含多个节点,每个节点可以保存一个字节数组或者整数值。\",\"添加新节点到压缩列表,或者从压缩列表中删除节点,可能会引发连锁更新操作,但这种操作出现的几率并不高。\"]},\"697\":{\"h\":\"4.7.Redis的对象\"},\"698\":{\"h\":\"4.7.1.Redis的对象\",\"t\":[\"Redis 中当我们创建一个键值对时，我们至少会创建俩个对象，一个用作键(键对象)，一个用作值(值对象)。\",\"Redis 对象结构\",\"typedef struct redisObject { // 类型 unsigned type:4; // 编码 unsigned encoding:4; // 指向底层实现数据结构的指针 void *ptr; // ... } robj;\",\"Redis 内存回收\",\"值得一提的是 redis 内存回收，因为 C 语言并不具备自动的内存回收功能， 所以 Redis 在自己的对象系统中构建了一个**引用计数（reference counting）技术实现的内存回收机制， 通过这一机制， 程序可以通过跟踪对象的引用计数信息， 在适当的时候自动释放对象并进行内存回收**。每个对象的引用计数信息由 redisObject 结构的 refcount 属性记录：\",\"typedef struct redisObject { // ... // 引用计数 int refcount; // ... } robj;\",\"Redis 对象共享\",\"举个例子， 假设键 A 创建了一个包含整数值 100 的字符串对象作为值对象，如果这时键 B 也要创建一个同样保存了整数值 100 的字符串对象作为值对象。\",\"在 Redis 中， 让多个键共享同一个值对象需要执行以下两个步骤：\",\"将数据库键的值指针指向一个现有的值对象；\",\"将被共享的值对象的引用计数增一。\",\"目前来说， Redis 会在初始化服务器时， 创建一万个字符串对象， 这些对象包含了从 0 到 9999 的所有整数值， 当服务器需要用到值为 0到 9999 的字符串对象时， 服务器就会使用这些共享对象， 而不是新创建对象。\",\"Redis 对象的空转时长\",\"除了前面介绍过的 type 、 encoding 、 ptr 和 refcount 四个属性之外， redisObject 结构包含的最后一个属性为 lru 属性， 该属性记录了对象最后一次被命令程序访问的时间：\",\"typedef struct redisObject { // ... unsigned lru:22; // ... } robj;\"]},\"699\":{\"h\":\"4.7.2.重点\",\"t\":[\"内存回收和对象的空转时长涉及到 Redis 配置文件(内存的算法 volatile-lru、allkeys-lru等其他知识点)，后面单独一篇详细讲解。\",\"Redis 数据库中的每个键值对的键和值都是一个对象。\",\"Redis 共有字**符串、列表、哈希、集合、有序集合**五种类型的对象， 每种类型的对象至少都有两种或以上的编码方式， 不同的编码可以在不同的使用场景上优化对象的使用效率。\",\"服务器在执行某些命令之前， 会先检查给定键的类型能否执行指定的命令， 而检查一个键的类型就是检查键的值对象的类型。\",\"Redis 的对象系统带有引用计数实现的**内存回收机制**， 当一个对象不再被使用时， 该对象所占用的内存就会被自动释放。\",\"Redis 会共享值为 0 到 9999 的字符串对象。\",\"对象会记录自己的最后一次被访问的时间， 这个时间可以用于计算对象的**空转时间**。\"]},\"700\":{\"c\":[\"redis\"]},\"701\":{\"c\":[\"redis\",\"单排学习redis\"]},\"702\":{\"h\":\"rodert单排学习redis进阶【白银一】\"},\"703\":{\"h\":\"rodert单排学习redis进阶【白银一】\",\"t\":[\"redis之白银一\",\"说些题外话，最近帝都疫情又严重，大家都身处时代洪流中，这不是个别人能左右的，希望你能保护好自己，天天开心。\",\"@[toc]\"]},\"704\":{\"h\":\"前言\",\"t\":[\"声明：参考来源互联网，有任何争议可以留言。站在前人的肩上，我们才能看的更远。\",\"前文推荐阅读：\",\"rodert单排学习redis入门【黑铁】\",\"rodert 单排学习 redis 进阶【青铜】\"]},\"705\":{\"h\":\"1.Redis 客户端\"},\"706\":{\"h\":\"1.1.Redis Desktop Manager\",\"t\":[\"使用称手的工具，做起事来 事半功倍 ，用 redis-cli 自然不错。我推荐一款我经常用的 Redis可视化工具，Redis Desktop Manager 。\",\"启动界面如下：\",\"至于安装方式是 一键安装 。\",\"官网下载地址：https://redisdesktop.com/pricing\",\"学生和学习者可以公众号后台回复：【666】，免费获取。\"]},\"707\":{\"h\":\"2.Redis 连接池\"},\"708\":{\"h\":\"2.2.0.连接池\",\"t\":[\"池技术被广泛使用在系统开发中，像 JDBC 连接池、线程池等。连连接池是创建和管理一个连接的缓冲池的技术，这些连接准备好被任何需要它们的线程使用。\",\"在处理一个任务时，我们大多情况要在数毫秒级别就完成，如果重复创建、关闭资源，会占用较长时间和大量系统资源。\",\"使用连接池优势\",\"减少连接创建时间\",\"连接在系统初始化时就创建完成，需要时直接从池中取用，减少了时间开销。\",\"简化的编程模式\",\"当使用连接池时，每一个单独的线程能够像创建了一个自己的 JDBC 连接一样操作。\",\"受控的资源使用\",\"连接池能够控制一个模块的资源占用率，不会让一个模块资源占用过高，导致整个系统崩溃。\"]},\"709\":{\"h\":\"2.1.Redis 连接池\"},\"710\":{\"h\":\"2.1.1.前言引入\",\"t\":[\"Redis 修炼之连接池篇，前面讲了Redis入门篇：rodert单排学习redis入门【黑铁】、rodert 单排学习 redis 进阶【青铜】，对 Redis 基本数据类型的操作做了讲解。\",\"在以前没有开源连接池时，很多人自写连接池工具，简单来说就是创建一个集合，存放一批连接，动态维护着。保证每个连接都是有效的。\"]},\"711\":{\"h\":\"2.1.2.Redis 连接池\",\"t\":[\"本教程涉及到的一些代码都是 Java 语言编写。\",\"maven 依赖，引入 pom.xml 文件\",\"pom.xml\",\"<dependency> <groupId>redis.clients</groupId> <artifactId>jedis</artifactId> <version>3.3.0</version> </dependency>\",\"RedisUtil.java\",\"public final class RedisUtil { //IP 地址 private static String ADDR = \\\"127.0.0.1\\\"; //端口号 private static int PORT = 6379; //redis 服务端密码 private static String PWD = \\\"123456\\\"; //可用连接实例最大数目，默认为 8，若赋值 -1，表示不被限制 private static Integer MAX_TOTAL = 1024; //控制一个连接池最多有多少个状态为空闲的 jedis 实例，默认值为 8 private static Integer MAX_IDLE = 200; //等待可用连接最大的等待时间，单位 ms，默认值 -1，表示永不超时，若等待超时抛出 JedisConnectionException private static Integer MAX_WAIT_MILLIS = 10000; //超时 private static Integer TIMEOUT = 10000; //在用一个 jedis 实例时，是否提前进行 validate 操作，若结果为 true 则 jedis 实例可用 private static Boolean TEST_ON_BORROW = true; //jedis 连接池 private static JedisPool jedisPool = null; /** * 初始化 jedis 连接池的静态块,RedisPool 第一次类加载时执行，以后便不再执行 */ static { try { JedisPoolConfig conf = new JedisPoolConfig(); /* * 高版本 jedis jar 中 JedisPoolConfig 没有 setMaxActive 和 setMaxWait 属性，因为官方在高版本 * 中启用了此方法，用以下两个属性替换 * maxActive ==> maxTotal * maxWait ==> maxWaitMillis */ //设置连接实例最大数目 conf.setMaxTotal(MAX_TOTAL); //设置最多多少空闲的 jedis 实例 conf.setMaxIdle(MAX_IDLE); //设置等待可用连接的最大时间 conf.setMaxWaitMillis(MAX_WAIT_MILLIS); //设置是否提前进行测试借用 conf.setTestOnBorrow(TEST_ON_BORROW); //新建 jedis 连接池 jedisPool = new JedisPool(conf, ADDR, PORT, TIMEOUT, PWD); } catch (Exception e) { e.printStackTrace(); } } /* * 获取 jedis 实例来操作数据，每次使用完要将连接返回给连接池 jedis.close() * @return */ public synchronized static Jedis getRedis() { try { if(jedisPool != null) { //获取 jedis 实例 Jedis jedis = jedisPool.getResource(); return jedis; } else{ System.out.println(\\\"没有找到 Jedis 连接池！\\\"); return null; } } catch (Exception e) { e.printStackTrace(); return null; } } /* * 用来回收 Jedis 对象资源，用户需要用到此方法释放资源，否则一直占用资源，在新版本中，`returnResource(jedis) 将被废弃不推荐使用，`直接调用 `jedis.close();` 归还连接到连接池。 * @param Jedis jedis */ public synchronized static void returnJedis(Jedis jedis) { try { if(jedis != null) { //回收 jedis 对象资源 jedisPool.returnResource(jedis); System.out.println(\\\"Jedis 被成功回收！\\\"); } } catch (Exception e) { e.printStackTrace(); } } }\",\"本教程纯手打，致力于最实用教程，不需要什么奖励，只希望多多转发支持。 欢迎来我公众号，希望可以结识你，也可以催更，微信搜索：JavaPub\",\"有任何问题都可以来谈谈 ！\",\"在这里插入图片描述\"]},\"712\":{\"c\":[\"redis\"]},\"713\":{\"c\":[\"redis\",\"单排学习redis\"]},\"714\":{\"h\":\"Redis基础数据结构\"},\"715\":{\"h\":\"redis基本类型使用场景都懂了\",\"t\":[\"学习 Redis 基础数据结构，不讲虚的。\",\"一个群友给我发消息，“该学的都学了，怎么就找不到心意的工作，太难了”。\",\"很多在近期找过工作的同学一定都知道了，背诵八股文已经不是找工作的绝对王牌。企业最终要的是可以创造价值，或者首先需要干活的人，所以实战很重要。今天这篇文章就是给大家分享一下如何在我们实战生产中使用 redis。\",\"如果不了解 redis 的同学，可以先学习之前的 redis 入门教程。reids 从黑铁到王者\",\"...\",\"⚠️注意：命令不区分大小写，而 key 是区分大小写的。\"]},\"716\":{\"h\":\"String\",\"t\":[\"String 作为最基本的类型，就是普通的 get、set，做简单的 key - value 存储\",\"应用场景：\",\"比如在商品编号的生成、订单编号的生成（当然现在很少用到了，毕竟现在这种编号已经不足以承载当今的电商服务）\",\"商品编号生成\",\"是否喜欢的文章\",\"文章点赞打赏截图\"]},\"717\":{\"h\":\"Hash\",\"t\":[\"Hash 是一个类似于 Map 的结构，我们可以将整个对象缓存到 redis 中（这个对象不可以在嵌套其他对象），每次读写缓存时可以直接操作 hash 这个对象里的某个字段值。\",\"类似于 Java 中的 Map<String, Map<Object, Object>>\",\"语法：\",\"redis 127.0.0.1:6379> HSET KEY_NAME FIELD VALUE\",\"应用场景：购物车早期，当前小中厂可用\",\"image-20210110223728047\"]},\"718\":{\"h\":\"List\",\"t\":[\"List 就是编程中常用的字符串列表，列表的最大长度是 2^32 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。\",\"比如文章列表、粉丝列表等需要缓存的场景。\",\"可以作为一个单项或者双向队列，lpush、rpop、rpush、lpop。\",\"LRANGE 命令可以指定元素获取区间，实现分页查询，比如微博新闻的列表页面、一些高性能查询的场景\",\"应用场景：\",\"循环抓取新闻的主站点列表\",\"redis 127.0.0.1:6379> RPOPLPUSH SOURCE_KEY_NAME DESTINATION_KEY_NAME\",\"redis 127.0.0.1:6379> RPOPLPUSH news:list:websites news:list:websites\",\"分页查询网站首页的新闻资讯，查询第 0～10 条的数据。\",\"lrange article:list 0 10\"]},\"719\":{\"h\":\"Set\",\"t\":[\"无序列表，自动去重。\",\"和 Java 中的 hashset 一样，当需要进行大量数据的去重、之前你是基于 JVM 在内存去重，现在多机器部署的程序可以基于 redis 去重。\",\"比如需要进行交集计算，两个自媒体账号属于同一个人、他的粉丝一共有多少，需要将两个账号粉丝进行去重统计。当然，并集、差集都可以这样操作。\",\"应用场景：\",\"微信抽奖小程序\",\"image-20210111131808595\",\"image-20210111131949452\",\"微信朋友圈点赞\",\"image-20210111133506484\",\"微博好友关注社交关系\",\"共同关注的人：我去到 gakki 的微博，马上获得我和 gakki 共同关注的人\",\"image-20210111133650920\",\"我关注的人也关注他(大家爱好相同)\",\"image-20210111133831044\",\"qq推荐可能认识的人\",\"image-20210111133958782\"]},\"720\":{\"h\":\"SortedSet\",\"t\":[\"排序的 set，去重但是可以排序，写进去的时候给一个分数，自动根据分数排序，这个可以玩儿很多的花样，最大的特点是有个分数可以自定义排序规则。\",\"比如说你要是想根据时间对数据排序，那么可以写入进去的时候用某个时间作为分数，人家自动给你按照时间排序了。\",\"排行榜：将每个用户以及其对应的什么分数写入进去，zadd board score username，接着 zrevrange board 0 99，就可以获取排名前100的用户；zrank board username，可以看到用户在排行榜里的排名。\",\"应用场景：\",\"根据商品销售对商品进行排序显示。\",\"image-20210111140054296\",\"抖音热搜\",\"image-20210111140639166\",\"下面这三个你可能不太熟悉，耐心看完，这是通俗易懂的。\"]},\"721\":{\"h\":\"Bitmap\",\"t\":[\"Bitmap 大家可能有些陌生，什么是 Bitmap 呢？\",\"Bitmap 的底层数据结构用的是 String 类型的 SDS 数据结构来保存位数组，Redis 把每个字节数组的 8 个 bit 位利用起来，每个 bit 位 表示一个元素的二值状态（不是 0 就是 1）。\",\"可以将 Bitmap 看成是一个 bit 为单位的数组，数组的每个单元只能存储 0 或者 1，数组的下标在 Bitmap 中叫做 offset 偏移量。\",\"8 个 bit 组成一个 Byte，所以 Bitmap 会极大地节省存储空间。 这就是 Bitmap 的优势。\",\"比如判断用户是否登录状态，可以将用户 id 映射为一个唯一 id 编号，将 bit 位映射为 1。\",\"布隆过滤器底层选用的数据结构就是 bitmap（在程序中也用 bitset）。\",\"应用场景：\",\"用户每月签到情况。在签到统计中，每个用户每天的签到用 1 个 bit 位表示，一年的签到只需要 365 个 bit 位。一个月最多只有 31 天，只需要 31 个 bit 位即可。\",\"1. 编号 9527 的用户在 2024 年 1 月 16 号打卡。 SETBIT uid:sign:9527:202401 15 1 2. 判断是否打卡。 GETBIT uid:sign:9527:202401 15 3. 统计 1 月份打卡次数，使用 `BITCOUNT` 命令。该指令用于统计给定的 bit 数组中，值 = 1 的 bit 位的数量。 BITCOUNT uid:sign:9527:202401\"]},\"722\":{\"h\":\"HyperLogLog\",\"t\":[\"HyperLogLog 并非 Redis 一家独有，Redis 只是基于 HyperLogLog 算法实现可一个 HyperLogLog 数据结构，并用该数据结构提供基数统计的功能。其优势就是可以做到只需要 12 kb 的空间大小，就可以实现接近 2^64 量级的基数统计。\",\"HyperLogLog 数据结构并不会保存真实的元数据，所以其核心就是基数估算算法 在工程实践中，通常会用于 App 或页面的 UV 统计。\",\"HyperLogLog 是一种基数估算算法。所谓基数估算，就是估算在一批数据中，不重复元素的个数有多少。\",\"应用场景：\",\"计算 javapub.net.cn 网站的日活跃用户。通过 ip 在程序中用 HashSet 分析、如果有几百万用户，占用存储无疑是很大的。但是用了 HyperLogLog，事情变得如此简单。因为存储日活数据所需要的内存只有 12K。\",\"HyperLogLog 只提供了 3 个简单的命令。\",\"1. 添加元素到 HyperLogLog 中。 PFADD key element [element ...] 127.0.0.1:6379> pfadd website:javapub:uv 39.1.2.0 2. 返回给定 HyperLogLog 的基数估算。 PFCOUNT key [key ...] 127.0.0.1:6379> pfcount website:javapub:uv 3. 将多个 HyperLogLog 合并为一个 HyperLogLog。PFMERGE destkey sourcekey [sourcekey ...] 127.0.0.1:6379> pfmerge website:javapub:uv website:javapub-2:uv\"]},\"723\":{\"h\":\"GEO\",\"t\":[\"看到这个名字就知道是经纬度坐标相关。需要涉及到地图的业务才会使用。\",\"Redis GEO 有如下操作方法：\",\"geoadd：添加地理位置的坐标。\",\"geopos：获取地理位置的坐标。\",\"geodist：计算两个位置之间的距离。\",\"georadius：根据用户给定的经纬度坐标来获取指定范围内的地理位置集合。\",\"georadiusbymember：根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合。\",\"geohash：返回一个或多个位置对象的 geohash 值。\",\"应用场景：\",\"计算 Palermo 与 Catania 之间的距离：\",\"redis> GEOADD Sicily 13.361389 38.115556 \\\"Palermo\\\" 15.087269 37.502669 \\\"Catania\\\" (integer) 2 redis> GEODIST Sicily Palermo Catania \\\"166274.1516\\\" redis> GEODIST Sicily Palermo Catania km \\\"166.2742\\\" redis> GEODIST Sicily Palermo Catania mi \\\"103.3182\\\" redis> GEODIST Sicily Foo Bar (nil) redis>\"]},\"724\":{\"c\":[\"redis\"]},\"725\":{\"c\":[\"redis\"]},\"726\":{\"h\":\"Redis分布式锁要点注意\",\"t\":[\"参考： https://juejin.cn/post/7178327462869205051#heading-1\"]},\"727\":{\"h\":\"Redis分布式锁要注意哪几点...离BUG远一点\",\"t\":[\"当前开发中，为了避免应用出现单点故障，大多数应用都会部署多个节点。分布式应用部署，就会涉及到状态同步的场景，比如 session 共享，单点抢占式任务执行、秒杀抢购等等。比如我最近开发中需要一个邮件验证码发送服务，这个邮件服务是一个死循环，持续轮训表里有没有需要发送验证码的邮箱地址，保证实时性的同时，并且不可以重复发送。\",\"这时，分布式锁就成为一个必要、且简单的解决方案。这里基于 Redis 特性和分布式场景来分析会遇到哪些关键点。\",\"前言 众所周知，redis 是单线程应用，就算是 v6 版本也是网络并发、键值读写依然是单线程。\",\"原子操作（setnx + expire）\",\"说到分布式锁，很多人一定会想到 setnx + expire 命令， setnx 用来抢占锁（不存在就创建、存在就不做任何操作），抢到后再设置过期时间。\",\"// 抢占锁 if (jedis.setnx(key_lock, value) == 1) { // 设置过期时间 jedis.expire(key_lock, expiration_time); // TODO Something }\",\"这个代码有很明显的问题，当程序执行完 setnx 后出现异常宕机，这是后这个锁就永久无法释放了。造成的后果是：需要拿到这个锁来获取执行任务权限的应用都停止了。\",\"原文： https://javapub.net.cn/posts/database/redis/\"]},\"728\":{\"c\":[\"redis\",\"分布式\",\"锁\"]},\"729\":{\"c\":[\"redis\",\"分布式\",\"锁\",\"lock\"]},\"730\":{\"h\":\"Linux下redis安装\"},\"731\":{\"h\":\"基于 centOS7 的 redis 安装\",\"t\":[\"基于SpringBoot+VUE的后台管理系统免费开源，欢迎观赏。在线地址：http://liawan.javapub.net.cn/。详细参考文档及视频同步更新。\"]},\"732\":{\"h\":\"前言\",\"t\":[\"安装环境：\",\"centos7、redis5、\"]},\"733\":{\"h\":\"安装教程\"},\"734\":{\"h\":\"1. 下载\",\"t\":[\"国内镜像地址：https://mirrors.huaweicloud.com/redis/\",\"image\"]},\"735\":{\"h\":\"2. 安装\",\"t\":[\"解压：\",\"tar -zxvf redis-5.0.8.tar.gz\",\"编译：\",\"cd redis-5.0.8 make install\"]},\"736\":{\"h\":\"3. 修改配置\",\"t\":[\"修改redis.conf\",\"开启外网访问\",\"bind 0.0.0.0\",\"关闭Redis的服务保护模式\",\"protected-mode no\",\"修改密码\",\"requirepass javapub\"]},\"737\":{\"h\":\"4. 启动\",\"t\":[\"redis-server redis.conf\",\"后台启动：\",\"nohup redis-server redis.conf &\"]},\"738\":{\"h\":\"5. 访问测试\",\"t\":[\"注意，如果外网访问，要保证防火墙对应端口开放。\",\"原文：https://blog.csdn.net/qq_40374604/article/details/124857707\"]},\"739\":{\"c\":[\"redis\"]},\"740\":{\"c\":[\"redis\"]},\"741\":{\"h\":\"JavaSE\"},\"742\":{\"c\":[\"java\"]},\"743\":{\"c\":[\"java\"]},\"744\":{\"h\":\"自定义注解实现AOP切面日志[源码]\",\"t\":[\"https://github.com/Rodert/SpringBoot-javapub/tree/main/spring-boot-annotation\",\"[toc]\"]},\"745\":{\"h\":\"前言\",\"t\":[\"注解是JavaEE的基础，更是在Spring中发扬光大。AOP中有大量使用。\"]},\"746\":{\"h\":\"说明\",\"t\":[\"本案例主要通过俩个实操讲解、演示\",\"切面注解日志\",\"切面注解锁\",\"切面注解权限\",\"后俩个分别再出一个Demo，源码全部都在gitee免费提供\"]},\"747\":{\"h\":\"代码讲解\",\"t\":[\"在这里插入图片描述\"]},\"748\":{\"h\":\"切面注解日志\"},\"749\":{\"h\":\"1. 新建接口\",\"t\":[\"新建接口用于测试\",\"com\\\\javapub\\\\demo\\\\annotation\\\\springbootannotation\\\\controller\"]},\"750\":{\"h\":\"2. 引入依赖\",\"t\":[\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-aop</artifactId> </dependency>\"]},\"751\":{\"h\":\"3. 注解\",\"t\":[\"package com.javapub.demo.annotation.springbootannotation.annotation; /** * @Author: JavaPub * @License: https://github.com/Rodert/ https://gitee.com/rodert/ * @Contact: https://javapub.blog.csdn.net/ * @Date: 2022/1/25 15:22 * @Version: 1.0 * @Description: #自定义日志注解。 * <p> * ①：什么时候使用该注解，我们定义为运行时； * ②：注解用于什么地方，我们定义为作用于方法上； * ③：注解是否将包含在 JavaDoc 中； * ④：注解名为 Log; * ⑤：定义一个属性，默认为空字符串； */ import java.lang.annotation.*; @Target(ElementType.METHOD) //注解用于什么地方，我们定义为作用于方法上； @Retention(RetentionPolicy.RUNTIME) //什么时候使用该注解，我们定义为运行时； @Documented //注解是否将包含在 JavaDoc 中； public @interface Log {//注解名为Log String value() default \\\"\\\"; //定义一个属性，默认为空字符串； }\"]},\"752\":{\"h\":\"4. AOP切点类\",\"t\":[\"这里实现了对自定义注解的环绕增强切点，对使用了自定义注解的方法进行AOP切面处理；\",\"对方法运行时间进行监控；\",\"对方法名，参数名，参数值，对日志描述的优化处理；\",\"在方法上增加 @Aspect 注解声明切面,使用 @Pointcut 注解定义切点，标记方法。\",\"使用切点增强的时机注解:@Before (前置通知),@Around,@AfterReturning,@AfterThrowing,@After(后置通知)\",\"在这里插入图片描述\",\"package com.javapub.demo.annotation.springbootannotation.aop; /** * @Author: JavaPub * @License: https://github.com/Rodert/ https://gitee.com/rodert/ * @Contact: https://javapub.blog.csdn.net/ * @Date: 2022/1/25 15:42 * @Version: 1.0 * @Description: 注释式日志切面 */ import lombok.extern.slf4j.Slf4j; import org.aspectj.lang.JoinPoint; import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.*; import org.aspectj.lang.reflect.MethodSignature; import org.springframework.stereotype.Component; import java.lang.reflect.Method; import java.util.Arrays; @Slf4j @Aspect //@Aspect：声明该类为一个注解类 @Component public class LogAspect { /** * @Pointcut：定义一个切点，后面跟随一个表达式，表达式可以定义为切某个注解，也可以切某个 package 下的方法； * <p> * 此处的切点是注解的方式，也可以用包名的方式达到相同的效果 * '@Pointcut(\\\"execution(* com.javapub.demo.annotation.springbootannotation.*.*(..))\\\")' */ @Pointcut(\\\"@annotation(com.javapub.demo.annotation.springbootannotation.annotation.Log)\\\") public void logPointCut() { } /** * @param joinPoint * @return * @throws Throwable * @Around 环绕，可以在切入点前后织入代码，并且可以自由的控制何时执行切点； * @Description: 这里其实应该使用 try{}catch(){}finally{} 做容错，为了代码简洁易懂就不加了 */ @Around(\\\"logPointCut()\\\") public Object around(ProceedingJoinPoint joinPoint) throws Throwable { long beginTime = System.currentTimeMillis(); // 执行方法 Object result = joinPoint.proceed(); // 执行时长(毫秒) long time = System.currentTimeMillis() - beginTime; //异步保存日志 saveLog(joinPoint, time); return result; } void saveLog(ProceedingJoinPoint joinPoint, long time) { MethodSignature signature = (MethodSignature) joinPoint.getSignature(); Method method = signature.getMethod(); String methodName = signature.getName(); // 请求的方法名 String className = joinPoint.getTarget().getClass().getName(); System.out.println(\\\"**************************\\\"); System.out.println(method); log.info(\\\"------------------------接口日志-----------------------\\\" + \\\"\\\\n\\\" + \\\"类名称:\\\" + className + \\\"\\\\n\\\" + \\\"方法名:\\\" + methodName + \\\"\\\\n\\\" + \\\"执行时间:\\\" + time + \\\"毫秒\\\"); log.info(\\\"接口参数\\\" + \\\"\\\\n\\\" + Arrays.toString(joinPoint.getArgs())); } /** * 在切点之前，织入相关代码； * * @param joinPoint */ @Before(\\\"logPointCut()\\\") public void doBeforeAdvice(JoinPoint joinPoint) { log.info(\\\"进入方法前执行.....\\\"); } /** * 在切点返回内容后，织入相关代码，一般用于对返回值做些加工处理的场景； * * @param ret */ @AfterReturning(returning = \\\"ret\\\", pointcut = \\\"logPointCut()\\\") public void doAfterReturning(Object ret) { log.info(\\\"方法的返回值 : {}\\\", ret); } /** * 用来处理当织入的代码抛出异常后的逻辑处理; */ @AfterThrowing(\\\"logPointCut()\\\") public void throwss(JoinPoint jp) { log.info(\\\"方法异常时执行.....\\\"); } /** * 后置最终通知,final增强，不管是抛出异常或者正常退出都会执行 */ @After(\\\"logPointCut()\\\") public void after(JoinPoint jp) { log.info(\\\"方法最后执行.....\\\"); } }\"]},\"753\":{\"h\":\"测试\",\"t\":[\"http://127.0.0.1:9001/order/order-info?id=1\",\"http://127.0.0.1:9001/order/order-info-2/1\",\"源码仓库：https://gitee.com/rodert/SpringBoot-javapub/tree/main/spring-boot-annotation\",\"在这里插入图片描述\"]},\"754\":{\"c\":[\"annotation\",\"aop\",\"log\",\"java\"]},\"755\":{\"h\":\"volatile关键字的作用\",\"t\":[\"引言：以前只是看过介绍 volatile 的文章，对其的理解也只是停留在理论的层面上，由于最近在项目当中用到了关于并发方面的技术，所以下定决心深入研究一下java并发方面的知识。网上关于volatile的文章非常多，但是并没有讲解非常详细的文章。（哪位要是有好的资料麻烦共享一份给我！）多数的都是一些理论讲解，没有实际的例子代码，就算有代码的也测试不出效果，总之理论总是与代码不匹配。\",\"后来在我不懈的努力之下总算研究出一些成果，在此分享给大家！如果大家发现有错误的地方欢迎大家指正，谢谢！\",\"在Java线程并发处理中，有一个关键字 volatile 的使用目前存在很大的混淆，以为使用这个关键字，在进行多线程并发处理的时候就可以万事大吉。\",\"Java 语言是支持多线程的，为了解决线程并发的问题，在语言内部引入了 同步块(synchronized) 和 volatile 关键字机制。\",\"synchronized(不做过多解释)\",\"同步块大家都比较熟悉，通过 synchronized 关键字来实现，所有加上synchronized 和 块语句，在多线程访问的时候，同一时刻只能有一个线程能够用\",\"synchronized 修饰的方法 或者 代码块。\",\"volatile\",\"用 volatile 修饰的变量，线程在每次使用变量的时候，都会读取变量修改后的最的值。volatile 很容易被误用，用来进行原子性操作。\",\"如果要深入了解 volatile 关键字的作用，就必须先来了解一下 JVM 在运行时候的内存分配过程。\",\"在 java 垃圾回收整理一文中，描述了 jvm 运行时刻内存的分配。其中有一个内存区域是 jvm 虚拟机栈，每一个线程运行时都有一个线程栈，\",\"线程栈保存了线程运行时候变量值信息。当线程访问某一个对象时候值的时候，首先通过对象的引用找到对应在堆内存的变量的值，然后把堆内存\",\"变量的具体值load到线程本地内存中，建立一个变量副本，之后线程就不再和对象在堆内存变量值有任何关系，而是直接修改副本变量的值，\",\"在修改完之后的某一个时刻（线程退出之前），自动把线程变量副本的值回写到对象在堆中变量。这样在堆中的对象的值就产生变化了。下面一幅图\",\"描述这写交互！\",\"JVM在运行时候的内存分配过程\",\"那么在了解完JVM在运行时候的内存分配过程以后，我们开始真正深入的讨论volatile的具体作用\",\"请看代码:\",\"public class VolatileTest extends Thread { boolean flag = false; int i = 0; public void run() { while (!flag) { i++; } } public static void main(String[] args) throws Exception { VolatileTest vt = new VolatileTest(); vt.start(); Thread.sleep(2000); vt.flag = true; System.out.println(\\\"stope\\\" + vt.i); } }\",\"上面的代码是通过标记flag来控制 VolatileTest 线程 while 循环退出的例子!\",\"下面让我用伪代码来描述一下我们的程序\",\"首先创建 VolatileTest vt = new VolatileTest();\",\"然后启动线程 vt.start();\",\"暂停主线程2秒（Main） Thread.sleep(2000);\",\"这时的 vt 线程已经开始执行，进行i++;\",\"主线程暂停2秒结束以后将 vt.flag = true;\",\"打印语句 System.out.println(\\\"stope\\\" + vt.i); 在此同时由于 vt.flag 被设置为 true,所以 vt 线程在进行下一次 while 判断 while (!flag) 返回假 结束循环 vt 线程方法结束退出！\",\"主线程结束\",\"上面的叙述看似并没有什么问题，“似乎”完全正确。那就让我们把程序运行起来看看效果吧，执行 mian 方法。2 秒钟以后控制台打印 stope-202753974。\",\"可是奇怪的事情发生了 程序并没有退出。vt 线程仍然在运行，也就是说我们在主线程设置的 vt.flag = true;没有起作用。\",\"在这里我需要说明一下，有的同学可能在测试上面代码的时候程序可以正常退出。那是因为你的JVM没有优化造成的！在DOC下面输入 java -version 查看 如果显示Java HotSpot(TM) ... Server 则JVM会进行优化。\",\"如果显示Java HotSpot(TM) ... Client 为客户端模式，需要设置成Server模式 设置方法问Google\",\"java-version\",\"问题出现了，为什么我在主线程（main）中设置了vt.flag = true; 而vt线程在进行判断flag的时候拿到的仍然是false?\",\"那么按照我们上面所讲的 “JVM在运行时候的内存分配过程” 就很好解释上面的问题了。\",\"首先 vt线程在运行的时候会把 变量 flag 与 i (代码3,4行) 从“主内存” 拷贝到 线程栈内存（上图的线程工作内存）\",\"然后 vt 线程开始执行 while 循环\",\" 7 while (!flag) { 8 i++; 9 }\",\"while (!flag) 进行判断的 flag 是在线程工作内存当中获取，而不是从 “主内存”中获取。\",\"i++; 将线程内存中的 i++; 加完以后将结果写回至 \\\"主内存\\\"，如此重复。\",\"然后再说说主线程的执行过程。 我只说明关键的地方\",\"vt.flag = true;\",\"主线程将 vt.flag 的值同样 从主内存中拷贝到自己的线程工作内存 然后修改 flag=true. 然后再将新值回到主内存。\",\"这就解释了为什么在主线程（main）中设置了 vt.flag = true; 而 vt 线程在进行判断 flag 的时候拿到的仍然是 false。那就是因为vt线程每次判断flag标记的时候是从它自己的“工作内存中”取值，而并非从主内存中取值！\",\"这也是 JVM 为了提供性能而做的优化。那我们如何能让 vt 线程每次判断 flag 的时候都强制它去主内存中取值呢。这就是 volatile 关键字的作用。\",\"再次修改我们的代码\",\"public class VolatileTest extends Thread { volatile boolean flag = false; int i = 0; public void run() { while (!flag) { i++; } } public static void main(String[] args) throws Exception { VolatileTest vt = new VolatileTest(); vt.start(); Thread.sleep(2000); vt.flag = true; System.out.println(\\\"stope\\\" + vt.i); } }\",\"在 flag 前面加上 volatile 关键字，强制线程每次读取该值的时候都去“主内存”中取值。在试试我们的程序吧，已经正常退出了。\",\"可见性-volatile写\"]},\"756\":{\"c\":[\"volatile\",\"java\"]},\"757\":{\"h\":\"Maven\"},\"758\":{\"c\":[\"java\",\"maven\"]},\"759\":{\"c\":[\"java\",\"maven\"]},\"760\":{\"h\":\"rodert教你学Maven-实战这一篇就够了\"},\"761\":{\"h\":\"rodert教你学Maven-实战这一篇就够了\",\"t\":[\"[toc]\",\"声明：参考来源互联网，有任何争议可以留言。站在前人的肩上，我们才能看的更远。\",\"本教程纯手打，致力于最实用教程，不需要什么奖励，只希望多多转发支持。 欢迎来我公众号，希望可以结识你，也可以催更，微信搜索：JavaPub\",\"有任何问题都可以来谈谈，等你哦！\",\"微信公众号\",\"我搞Java也有段时间了，对maven的理解停留在能管理依赖、作为仓库使用，那它还能干什么？\",\"我前面发过一些实战项目，很多初学者和爱好者都有用到，但是对其中maven不了解，不知道如何部署。应一位fans同学要求，redert肝一篇maven，各位看官。\",\"这是一篇文档型文章，能对maven有一个完整的了解。\",\"搞Java都能说出，maven是什么，他都能回答出maven是一个项目管理工具，这篇文章学习再来一起学习。\",\"Maven是基于项目对象模型(POM Project Object Model)，可以通过一小段描述信息（配置文件）来管理项目的构建、报告和文档的软件项目管理工具。\",\"其官网地址为：http://maven.apache.org\",\"这段官方文档已经说的很明白\",\"Maven翻译为“专家”、“内行”；是一个采用纯Java编写的开源项目管理工具，Maven采用了一种被称之为Project Object Model (POM)概念来管理项目，所有的项目配置信息都被定义在一个叫做POM.xml的文件中, 通过该文件Maven可以管理项目的整个声明周期，包括清除、编译、测试、报告、打包、部署等。目前Apache下绝大多数项目都已经采用Maven进行管理. 而Maven本身还支持多种插件，可以方便更灵活的控制项目, 开发人员的主要任务应该是关注业务逻辑并去实现它，而不是把时间浪费在学习如何在不同的环境中去依赖jar包、项目部署等。Maven正是为了将开发人员从这些任务中解脱出来而诞生的一个项目管理工具。\"]},\"762\":{\"h\":\"2.1.Maven的功能\",\"t\":[\"Maven是跨平台的项目管理工具。主要服务于基于Java平台的项目构建，依赖管理和项目信息管理。\",\"什么是项目构建？\",\"什么是理想的项目构建？\",\"高度自动化，跨平台，可重用的组件，标准化的\",\"什么是依赖？为什么要进行依赖管理？\",\"自动下载，统一依赖管理\",\"有哪些项目信息？\",\"项目名称描述，开发人员信息等\"]},\"763\":{\"h\":\"2.2.为什么使用maven\",\"t\":[\"下面这几个痛点，相信是每个Java攻城狮都遇到过的。\",\"传统方式管理jar依赖的问题：\",\"jar冲突 jar依赖 jar体积过大 jar在不同阶段无法个性化配置\",\"使用maven方式管理jar依赖的好处：\",\"解决jar冲突 解决jar依赖问题 jar文件不用在每个项目保存，只需要放在仓库即可 maven可以指定jar的依赖范围\"]},\"764\":{\"h\":\"3.1.安装\",\"t\":[\"现在为止应该没有使用jdk1.7以下的吧，如果有，这篇文章可以跳过。\",\"1. 下载Maven\",\"下载地址：http://maven.apache.org/download.cgi\",\"下载地址\",\"2. 解压文件\",\"解压maven压缩包“apache-maven-3.5.2.bin.zip”到一个路径（尽量编码路径中不要包含中文）\",\"image-20200610223114895\",\"bin：含有mvn运行的脚本\",\"boot：含有plexus-classworlds类加载器框架\",\"lib：含有Maven运行时所需要的java类库\",\"conf：含有settings.xml配置文件\",\"settings.xml 中默认的用户库: ${user.home}/.m2/repository[通过- maven下载的jar包都会存储到此仓库中]\"]},\"765\":{\"h\":\"3.2.配置\",\"t\":[\"1. 添加环境变量MAVEN_HOME\",\"MAVEN_HOME : E:\\\\maven\\\\apache-maven-3.5.2-bin（注意：配置为你自己的maven路径）\",\"MAVEN_OPTS : -Xms256m -Xmx512m（注意：可以不配置）\",\"2. 设置系统环境变量path\",\"在Path中追加: %MAVEN_HOME%\\\\bin\",\"image-20200610223813357\",\"3. 验证成功\",\"打开 cmd 输入：mvn -version\",\"maven_version\",\"4. 配置本地仓库\",\"Maven的默认本地仓库在：${user.home}/.m2/repository；这地址可以在settings.xml中修改指定自定义的仓库路径。\",\"【自定义仓库路径】 找到${maven_home}/conf/settings.xml文件，修改如下：\",\"maven_setting_repository\",\"需要注意的是上图中的自定义路径必须存在。repository是本地仓库，也即本地下载的jar存放路径。\",\"到这里为止，你的项目已经可以打包、部署，做一些简单操作了。\",\"这是一套科学的约定，使用它\",\"什么是Maven项目规约？其实就是maven项目的目录结构。\",\"maven项目的目录结构遵守以下规范：\",\"maven项目目录\"]},\"766\":{\"h\":\"5.1.命令行构建Java项目\",\"t\":[\"下面通过maven命令，快速构建一个java项目结构。\",\"在命令行中可以通过Maven中的命令（插件）可以自动创建文件结构和自动生成pom.xml文件。\",\"打开cmd，执行以下cmd命令：\",\"mvn archetype:generate -DarchetypeCatalog=internal -DgroupId=com.yiidian -DartifactId=hellojava -DarchetypeArtifactId=maven-archetype-quickstart -Dversion=0.0.1-snapshot\",\"执行后结果：\",\"image-20200610225900548\",\"参数说明： #核心命令 mvn 框架:生成 即生成Maven项目最基本的目录结构 mvn archetype:generate #读取archetype-catalog.xml文件的位置；内置的 -DarchetypeCatalog=internal #公司域名倒写 -DgroupId=com.yiidian #项目名称 -DartifactId=hellojava #Maven项目的模板；最简单的Maven项目模板 -DarchetypeArtifactId=maven-archetype-quickstart #项目版本号，snapshot 内测版，release 正式发行版 -Dversion=0.0.1-snapshot\"]},\"767\":{\"h\":\"5.2.使用命令行创建web项目\",\"t\":[\"创建web项目时，不但创建目录结构和pom.xml，并创建webapp目录放置web资源文件。\",\"执行以下cmd命令：\",\"mvn archetype:generate -DarchetypeCatalog=internal -DgroupId=com.yiidian -DartifactId=helloweb -DarchetypeArtifactId=maven-archetype-webapp -Dversion=0.0.1-snapshot\",\"执行后结果：\",\"image-20200610230144920\",\"参数说明： #核心命令 mvn 框架:生成 即生成Maven项目最基本的目录结构 mvn archetype:generate #读取archetype-catalog.xml文件的位置；内置的 -DarchetypeCatalog=internal #公司域名倒写 -DgroupId=com.yiidian #项目名称 -DartifactId=helloweb #Maven项目的模板；Maven web项目模板 -DarchetypeArtifactId=maven-archetype-webapp #项目版本号 -Dversion=0.0.1-snapshot\"]},\"768\":{\"h\":\"5.3.构建Maven项目命令的使用\",\"t\":[\"注意：进入项目后再操作\",\"mvn clean\",\"清除原来的编译结果 \",\"mvn compile\",\"编译 \",\"mvn test\",\"运行测试代码；mvn test -Dtest=类名//单独运行测试类 \",\"mvn package\",\"打包项目；mvn package -Dmanven.test.skip=true//打包时不执行测试 \",\"mvn install\",\"将项目打包并安装到本地仓库 \",\"mvn deploy\",\"发布到本地仓库或者服务器 \",\"我常用的打包命令：\",\"mvn clean install -DskipTests\",\"了解内容，可跳过\",\"Maven在某个统一的位置存储所有项目的共享的构件，这个统一的位置，就称之为仓库。（仓库就是存放依赖和插件的地方）Maven的仓库有两大类：\",\"本地仓库 远程仓库，在远程仓库中又分成了3种：中央仓库、私服、其它公共库。\",\"本地仓库：就是Maven在本机存储构件的地方。maven的本地仓库，在安装maven后并不会创建，它是在第一次执行maven命令的时候才被创建。maven本地仓库的默认位置：在用户的目录下都只有一个.m2/repository/的仓库目录；可以修改。\",\"中央仓库：包含了绝大多数流行的开源Java构件，以及源码、作者信息、SCM、信息、许可证信息等。开源的Java项目依赖的构件都可以在这里下载到。 中央仓库的地址：http://repo1.maven.org/maven2/\",\"私服：是一种特殊的远程仓库，它是架设在局域网内的仓库。\",\"没有使用私服的仓库构件下载\",\"使用私服的仓库构件下载\",\"在平面几何中坐标（x,y）可以标识平面中唯一的一点。\",\"Maven坐标主要组成 groupId：定义当前Maven项目隶属项目、组织 artifactId：定义实际项目中的一个模块 version：定义当前项目的当前版本 packaging：定义该项目的打包方式（pom/jar/war，默认为jar） groupId、artifactId、version简称为GAV。\",\"Maven为什么使用坐标？\",\"Maven世界拥有大量构件，需要找一个用来唯一标识一个构建的统一规范 拥有了统一规范，就可以把查找工作交给机器\",\"如何获取Maven坐标\",\"推荐一个Maven坐标查询网站：http://mvnrepository.com/\",\"网站上可以搜索具体的组织或项目关键字，之后复制对应的坐标到pom.xml中。如：\",\"image-20200610231456317\"]},\"769\":{\"h\":\"8.1.依赖范围\",\"t\":[\"参考：http://www.yiidian.com/maven/maven-dependence.html\",\"依赖范围scope 用来控制依赖和编译，测试，运行的classpath的关系。具体的依赖范围有如下6种：\",\"compile： 默认编译依赖范围。对于编译，测试，运行三种classpath都有效\",\"test：测试依赖范围。只对于测试classpath有效\",\"provided：已提供依赖范围。对于编译，测试的classpath都有效，但对于运行无效。因为由容器已经提供，例如servlet-api\",\"runtime：运行时提供。例如:jdbc驱动\",\"system：系统范围,自定义构件，指定systemPath；跟provided 相似，但是在系统中要以外部JAR包的形式提供，maven不会在repository查找它。\",\"import：只使用在 <dependencyManagement> 中，表示从其它的pom中导入dependency的配置。\",\"依赖范围\",\"下面是为了解决冲突依赖内容，如果你在写一个Demo，可作为了解部份。\"]},\"770\":{\"h\":\"8.2.传递性依赖\",\"t\":[\"假设 C 依赖 B ， B 依赖 A ，那么称 C 对 B 是第一直接依赖， B 对 A 是第二直接依赖， C 对 A 是传递依赖。\",\"对于传递性依赖，依赖的范围如下表：\"]},\"771\":{\"h\":\"8.3.可选依赖\",\"t\":[\"在依赖节点dependency中的<optional>可以控制当前的依赖是否向下传递；默认值为false，表示向下传递。\",\"【示例】A项目依赖于log4j，然后B项目依赖于A项目；那么如果在A中对log4j依赖的optional配置成false时，B项目中自动传递依赖于log4j。否则反之。\",\"1）项目A配置slf4j的依赖并设置optional为true\",\" <dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-log4j12</artifactId> <version>1.6.4</version> <!-- 配置为true时不向下传递此依赖，默认为false --> <optional>true</optional> </dependency>\",\"2）配置项目B依赖于项目A，检查项目B的依赖包\",\"<!-- 依赖于A --> <dependency> <groupId>com.JavaPub</groupId> <artifactId>A</artifactId> <version>0.0.1-SNAPSHOT</version> </dependency>\",\"这时发现B项目没有依赖slf4j-log4j12\"]},\"772\":{\"h\":\"8.4.依赖冲突\",\"t\":[\"依赖冲突是很常见的问题\",\"如果直接与间接依赖中包含有同一个坐标不同版本的资源依赖，以直接依赖的版本为准（就近原则）\",\"最终A依赖的X的版本为2.0\",\"【比如】：项目A中，依赖了slf4j1.6.4版本的包，通过slf4j1.6.4间接依赖log4j1.2.16版本；如果项目A中直接配置了log4j 1.2.17版本，那么最终的版本为1.2.17。\",\"<dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-log4j12</artifactId> <version>1.6.4</version> <!-- 配置为true时不向下传递此依赖，默认为false --> <optional>true</optional> </dependency> <dependency> <groupId>log4j</groupId> <artifactId>log4j</artifactId> <version>1.2.17</version> </dependency>\",\"如果直接依赖中包含有同一个坐标不同版本的资源依赖，以配置顺序下方的版本为准\",\"如果间接依赖中包含有同一个坐标不同版本的资源依赖，以配置顺序上方的版本为准\",\"如下对应spring-core的间接依赖的版本号，以struts2-spring-plugin为准\",\"<dependency> <groupId>org.apache.struts</groupId> <artifactId>struts2-spring-plugin</artifactId> <version>2.3.24.1</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-beans</artifactId> <version>4.1.0.RELEASE</version> </dependency>\"]},\"773\":{\"h\":\"8.4.排除依赖\",\"t\":[\"这个在项目中使用频率较高\",\"在pom中的依赖节点中，如果引入的依赖包含了很多其它的传递依赖，而且项目需要的这些依赖的版本和传递依赖的不相符；那么可以在依赖节点中设置排除依赖节点：<exclusions> 然后再添加 <exclusion>，其里面的内容包括： ①所包含坐标 ②排除依赖包中所包含的依赖关系 【注意】不需要添加版本，直接按照类别排除\",\"<dependency> <groupId>org.apache.struts</groupId> <artifactId>struts2-spring-plugin</artifactId> <version>2.3.24.1</version> <exclusions> <!-- 排除spring-core的传递依赖 --> <exclusion> <groupId>org.springframework</groupId> <artifactId>spring-core</artifactId> <eclusion> <exclusions> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-beans</artifactId> <version>4.1.0.RELEASE</version> </dependency>\"]},\"774\":{\"h\":\"9.1.Maven生命周期\",\"t\":[\"Maven生命周期就是为了对所有的构建过程进行抽象和统一；包括项目清理，初始化，编译，打包，测试，部署等几乎所有构建步骤。 Maven有三套相互独立的生命周期，请注意这里说的是“三套”，而且“相互独立”，这三套生命周期分别是：\",\"Clean Lifecycle 在进行真正的构建之前进行一些清理工作。\",\"Default Lifecycle 构建的核心部分，编译，测试，打包，部署等等。\",\"Site Lifecycle 生成项目报告，站点，发布站点。\",\"再次强调它们是相互独立的，可以仅仅调用clean来清理工作目录，仅仅调用site来生成站点。不过也可以直接运行 mvn clean install site 运行所有这三套生命周期。\"]},\"775\":{\"h\":\"9.2.clean生命周期\",\"t\":[\"clean生命周期每套生命周期都由一组阶段(Phase)组成，我们平时在命令行输入的命令总会对应于一个特定的阶段。比如，运行mvn clean ，这个的clean是clean生命周期的一个阶段。有clean生命周期，也有clean阶段。clean生命周期一共包含了三个阶段：\",\"pre-clean 执行一些需要在clean之前完成的工作\",\"clean 移除所有上一次构建生成的文件\",\"post-clean 执行一些需要在clean之后立刻完成的工作\",\"mvn clean 中的clean就是上面的clean，在一个生命周期中，运行某个阶段的时候，它之前的所有阶段都会被运行，也就是说，mvn clean 等同于 mvn pre-clean clean ，如果我们运行 mvn post-clean ，那么 pre-clean，clean 都会被运行。这是Maven很重要的一个规则，可以大大简化命令行的输入。\"]},\"776\":{\"h\":\"9.3.default生命周期\",\"t\":[\"default生命周期default生命周期是Maven生命周期中最重要的一个，绝大部分工作都发生在这个生命周期中。比较重要和常用的阶段如下：\",\"validate generate-sources process-sources generate-resources process-resources 复制并处理资源文件，至目标目录，准备打包。 compile 编译项目的源代码。 process-classes generate-test-sources process-test-sources generate-test-resources process-test-resources 复制并处理资源文件，至目标测试目录。 test-compile 编译测试源代码。 process-test-classes test 使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。 prepare-package package 接受编译好的代码，打包成可发布的格式，如 JAR 。 pre-integration-test integration-test post-integration-test verify 运行任何检查，验证包是否有效且达到质量标准。 install 将包安装至本地仓库，以让其它项目依赖。 deploy 将最终的包复制到远程的仓库，以让其它开发人员与项目共享。 运行任何一个阶段的时候，它前面的所有阶段都会被运行，这也就是为什么运行mvn install 的时候，代码会被编译，测试，打包。此外，Maven的插件机制是完全依赖Maven的生命周期的。\"]},\"777\":{\"h\":\"9.4.site生命周期\",\"t\":[\"site生命周期包含如下4个阶段：\",\"pre-site 执行一些需要在生成站点文档之前完成的工作\",\"site 生成项目的站点文档\",\"post-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备\",\"site-deploy 将生成的站点文档部署到特定的服务器上\",\"这里经常用到的是site阶段和site-deploy阶段，用以生成和发布Maven站点，这是Maven相当强大的功能，Manager比较喜欢，文档及统计数据自动生成，很好看。\",\"参考：http://www.yiidian.com/maven/maven-plugins.html\"]},\"778\":{\"h\":\"11.1.maven继承\",\"t\":[\"继承为了消除重复，可以把pom中很多相同的配置提取出来；如：grouptId，version等。在使用的时候子工程直接继承父工程的依赖版本号，子工程中不再需要指定具体版本号，方便统一管控项目的依赖版本问题。\",\"父工程设置依赖\",\"<project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <groupId>cn.sm1234</groupId> <artifactId>parent</artifactId> <version>0.0.1-SNAPSHOT</version> <packaging>pom</packaging> <!-- 集中定义依赖版本号 --> <properties> <junit.version>4.10</junit.version> <spring.version>4.1.0.RELEASE</spring.version> <slf4j.version>1.6.4</slf4j.version> </properties> <!-- 版本锁定，当子工程中有需要并且自行添加了具体依赖后才有效 --> <dependencyManagement> <dependencies> <!-- 单元测试 --> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>${junit.version}</version> <scope>test</scope> </dependency> <!-- Spring --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>${spring.version}</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-beans</artifactId> <version>${spring.version}</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aspects</artifactId> <version>${spring.version}</version> </dependency> <dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-log4j12</artifactId> <version>${slf4j.version}</version> </dependency> </dependencies> </dependencyManagement> </project>\",\"子工程设置依赖\",\"在子工程中的pom.xml需要设置父工程：\",\"<project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <!-- 父工程 --> <parent> <groupId>cn.sm1234</groupId> <artifactId>parent</artifactId> <version>0.0.1-SNAPSHOT</version> <!-- 父项目的pom.xml文件的相对路径；一般可不指定 --> <relativePath>../parent</relativePath> </parent> <groupId>cn.sm1234</groupId> <artifactId>sm1234-C</artifactId> <version>0.0.1-SNAPSHOT</version> <!-- 依赖 --> <dependencies> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <!-- 版本号由父工程里面统一指定不再需要特别指定 --> <!-- <version>${junit.version}</version> --> <scope>test</scope> </dependency> </dependencies> </project>\",\"relativePath：父项目的pom.xml文件的相对路径。默认值为../pom.xml。maven首先从当前构建项目开始查找父项目的pom文件，然后从本地仓库，最后从远程仓库。RelativePath允许你选择一个不同的位置；一般Eclipse找不到parent项目时可以先update project，还不行则可配置此项。\"]},\"779\":{\"h\":\"11.2.聚合\",\"t\":[\"多模块项目是现在开发中比较常用的方式。\",\"如果想一次构建多个项目模块，那则需要对多个项目模块进行聚合。\",\"<modules> <module>../子项目名称1</module> <module>../子项目名称2</module> <module>../子项目名称3</module> </modules>\",\"很实用，推荐阅读\",\"参考：http://www.yiidian.com/maven/maven-ssh-project.html\"]},\"780\":{\"c\":[\"java\",\"maven\"]},\"781\":{\"c\":[\"java\",\"maven\"]},\"782\":{\"h\":\"MyBatis\"},\"783\":{\"c\":[\"mybatis\",\"java\"]},\"784\":{\"c\":[\"mybatis\",\"java\"]},\"785\":{\"h\":\"MyBatisSQL批量更新（代码➕案例）\",\"t\":[\"一条记录update一次，性能比较差，容易造成阻塞。基于 mybatis 批量更新，特此记录。\",\"[toc]\"]},\"786\":{\"h\":\"1.场景\",\"t\":[\"当我们在做更新或者是插入操作时，数据为多对多、一一对应的情况\",\"例如：\",\"编号。 名字。 状态 1 tom 0 2 jerry 0 3 jeck 1\",\"代码中循环写入、更新这是大多数人做法，但是肯定不是最优解\"]},\"787\":{\"h\":\"2.MyBatis XML\",\"t\":[\"先直接上个终极版\",\"这里数据库中存储了下划线式，代码中用驼峰式。\",\"这里是通过userId修改userStatus。当user_id为1时、user_status为0，当user_id为3时、user_status为1。\",\" <update id=\\\"updateBatch\\\"> update <include refid=\\\"tableName\\\"/> <trim prefix=\\\"set\\\" suffixOverrides=\\\",\\\"> <trim prefix=\\\"user_status =case\\\" suffix=\\\"end,\\\"> <foreach collection=\\\"list\\\" item=\\\"i\\\" index=\\\"index\\\"> <if test=\\\"i.userId!=null\\\"> when user_id=#{i.userId} then #{i.userStatus} </if> </foreach> </trim> </trim> where user_id in <foreach collection=\\\"list\\\" item=\\\"i\\\" index=\\\"index\\\" open=\\\"(\\\" separator=\\\",\\\" close=\\\")\\\"> #{i.userId} </foreach> </update>\",\"<trim 属性说明\",\"prefix,suffix 表示在 trim 标签包裹的部分的前面或者后面添加内容\",\"如果同时有 prefixOverrides,suffixOverrides 表示会用 prefix,suffix 覆盖 Overrides 中的内容。\",\"如果只有 prefixOverrides,suffixOverrides 表示删除开头的或结尾的 xxxOverides 指定的内容。\"]},\"788\":{\"h\":\"2.1.打印sql\",\"t\":[\"==> Preparing: update `table_test_01` set user_status =case when user_id=? then ? when user_id=? then ? end where user_id in ( ? , ? ) ==> Parameters: 1(Long), 10(Integer), 2(Long), 20(Integer), 1(Long), 2(Long) <== Updates: 2\"]},\"789\":{\"h\":\"2.2.数据库结构\",\"t\":[\"SQL结构体：\",\"CREATE TABLE `table_test_01` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(20) NOT NULL, `status` tinyint(4) NOT NULL DEFAULT '0', `test_column` varchar(32) NOT NULL DEFAULT '' COMMENT '测试字段', `user_id` bigint(20) NOT NULL DEFAULT '0' COMMENT '测试字段id', `user_status` tinyint(4) NOT NULL DEFAULT '0' COMMENT '测试字段status', PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;\",\"INSERT INTO `table_test_01` VALUES (1, 'tom', 0, '', 1, 10), (2, 'jetty', 0, '', 2, 20), (3, 'dog', 0, '', 3, 1), (4, 'cat', 0, '', 4, 1);\"]},\"790\":{\"h\":\"3.实例二\",\"t\":[\"多个字段更新，那就增加 <item 。\",\"使用 case when 语法。\",\"UPDATE course SET name = CASE id WHEN 1 THEN 'name1' WHEN 2 THEN 'name2' WHEN 3 THEN 'name3' END, title = CASE id WHEN 1 THEN 'New Title 1' WHEN 2 THEN 'New Title 2' WHEN 3 THEN 'New Title 3' END WHERE id IN (1,2,3)\",\"这条sql的意思是，如果id为1，则name的值为name1，title的值为New Title1；依此类推。\",\" <update id=\\\"updateBatch1\\\" parameterType=\\\"list\\\"> update course <trim prefix=\\\"set\\\" suffixOverrides=\\\",\\\"> <trim prefix=\\\"name=case\\\" suffix=\\\"end,\\\"> <foreach collection=\\\"list\\\" item=\\\"item\\\" index=\\\"index\\\"> <if test=\\\"item.name!=null\\\"> when id=#{item.id} then #{item.name} </if> </foreach> </trim> <trim prefix=\\\"title =case\\\" suffix=\\\"end,\\\"> <foreach collection=\\\"list\\\" item=\\\"item\\\" index=\\\"index\\\"> <if test=\\\"item.title!=null\\\"> when id=#{item.id} then #{item.title} </if> </foreach> </trim> </trim> where <foreach collection=\\\"list\\\" separator=\\\"or\\\" item=\\\"item\\\" index=\\\"index\\\"> id=#{item.id} </foreach> </update>\"]},\"791\":{\"h\":\"4.重点\",\"t\":[\"但是大家要注意一点，这种情况如果出错，我们并不知道是哪条错误，如果使用事务，就会全部回滚，好的办法就是一次批量一部分，分担出错概率。\",\"源码案例下载：https://download.csdn.net/download/qq_40374604/19765415\"]},\"792\":{\"c\":[\"MyBatis\",\"java\"]},\"793\":{\"h\":\"rodert教你学MyBatis-实战这一篇就够了\"},\"794\":{\"h\":\"rodert教你学MyBatis-实战这一篇就够了\",\"t\":[\"[toc]\"]},\"795\":{\"h\":\"前言\",\"t\":[\"声明：参考来源互联网，有任何争议可以留言。站在前人的肩上，我们才能看的更远。\",\"本教程纯手打，致力于最实用教程，不需要什么奖励，只希望多多转发支持。 欢迎关注公众号，白嫖原创PDF，也可以催更，微信搜：JavaPub\",\"有任何问题都可以来谈谈，等你哦！\",\"微信公众号\",\"对mybatis有一定了解的，可以直接跳过前面基础引入部分。\"]},\"796\":{\"h\":\"1，什么是Mybatis之JDBC攻城狮\"},\"797\":{\"h\":\"1,1，使用idea构建maven工程\"},\"798\":{\"h\":\"1，2，引入mysql依赖包\",\"t\":[\"<dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>5.1.32</version> </dependency>\"]},\"799\":{\"h\":\"1，3，准备数据\",\"t\":[\"创建数据库：\",\"create database mydatabase;\",\"创建表：\",\"DROP TABLE IF EXISTS tb_user; CREATE TABLE tb_user ( id char(32) NOT NULL, user_name varchar(32) DEFAULT NULL, password varchar(32) DEFAULT NULL, name varchar(32) DEFAULT NULL, age int(10) DEFAULT NULL, sex int(2) DEFAULT NULL, birthday date DEFAULT NULL, created datetime DEFAULT NULL, updated datetime DEFAULT NULL, PRIMARY KEY (id) ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\",\"插入数据\",\"INSERT INTO mydatabase.tb_user ( userName, password, name, age, sex, birthday, created, updated) VALUES ( ‘zpc’, ‘123456’, ‘小明’, ‘22’, ‘1’, ‘1990-09-02’, sysdate(), sysdate()); INSERT INTO mydatabase.tb_user ( userName, password, name, age, sex, birthday, created, updated) VALUES ( ‘hj’, ‘123456’, ‘静静’, ‘22’, ‘1’, ‘1993-09-05’, sysdate(), sysdate());\"]},\"800\":{\"h\":\"1,4，jdbc代码回顾\",\"t\":[\"JDBCTest.class\",\"7步操作数据库\",\"import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; import java.sql.ResultSet; /** * @author Evan */ public class JDBCTest { public static void main(String[] args) throws Exception { Connection connection = null; PreparedStatement prepareStatement = null; ResultSet rs = null; try { // 1,加载驱动 Class.forName(\\\"com.mysql.jdbc.Driver\\\"); // 2,获取连接 String url = \\\"jdbc:mysql://127.0.0.1:3306/mydatabase\\\"; String user = \\\"root\\\"; String password = \\\"123456\\\"; connection = DriverManager.getConnection(url, user, password); // 3,获取statement，preparedStatement String sql = \\\"select * from tb_user where id=?\\\"; prepareStatement = connection.prepareStatement(sql); // 4,设置参数 prepareStatement.setLong(1, 1l); // 5,执行查询 rs = prepareStatement.executeQuery(); // 6,处理结果集 while (rs.next()) { System.out.println(rs.getString(\\\"userName\\\")); System.out.println(rs.getString(\\\"name\\\")); System.out.println(rs.getInt(\\\"age\\\")); System.out.println(rs.getDate(\\\"birthday\\\")); } } finally { // 7,关闭连接，释放资源 if (rs != null) { rs.close(); } if (prepareStatement != null) { prepareStatement.close(); } if (connection != null) { connection.close(); } } } }\"]},\"801\":{\"h\":\"1，5，jdbc缺点分析\",\"t\":[\".\\\\rodert教你学MyBatis-实战这一篇就够了\\\\一号图片.jpg\"]},\"802\":{\"h\":\"4，MyBatis介绍\",\"t\":[\"介绍截图\",\"官方文档 http://www.mybatis.org/mybatis-3/getting-started.html\"]},\"803\":{\"h\":\"3，MyBatis整体架构\",\"t\":[\"架构图\"]},\"804\":{\"h\":\"4，快速入门（quick start）\"},\"805\":{\"h\":\"4，1，引入依赖(pom.xml)\",\"t\":[\"<dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.2.8</version> </dependency>\"]},\"806\":{\"h\":\"4，2，全局配置文件(mybatis-config.xml)\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE configuration PUBLIC \\\"-//mybatis.org//DTD Config 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-config.dtd\\\"> <!-- 根标签 --> <configuration> <!--<properties>--> <!-- <property name=\\\"driver\\\" value=\\\"com.mysql.jdbc.Driver\\\"/>--> <!-- <property name=\\\"url\\\" value=\\\"jdbc:mysql://127.0.0.1:3306/mybatis-110?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true\\\"/>--> <!-- <property name=\\\"username\\\" value=\\\"root\\\"/>--> <!-- <property name=\\\"password\\\" value=\\\"123456\\\"/>--> <!--</properties>--> <!-- 环境，可以配置多个，default：指定采用哪个环境 --> <environments default=\\\"test\\\"> <!-- id：唯一标识 --> <environment id=\\\"test\\\"> <!-- 事务管理器，JDBC类型的事务管理器 --> <transactionManager type=\\\"JDBC\\\" /> <!-- 数据源，池类型的数据源 --> <dataSource type=\\\"POOLED\\\"> <property name=\\\"driver\\\" value=\\\"com.mysql.jdbc.Driver\\\" /> <property name=\\\"url\\\" value=\\\"jdbc:mysql://127.0.0.1:3306/mybatis-110\\\" /> <property name=\\\"username\\\" value=\\\"root\\\" /> <property name=\\\"password\\\" value=\\\"123456\\\" /> </dataSource> </environment> <environment id=\\\"development\\\"> <!-- 事务管理器，JDBC类型的事务管理器 --> <transactionManager type=\\\"JDBC\\\" /> <!-- 数据源，池类型的数据源 --> <dataSource type=\\\"POOLED\\\"> <property name=\\\"driver\\\" value=\\\"${driver}\\\" /> <!-- 配置了properties，所以可以直接引用 --> <property name=\\\"url\\\" value=\\\"${url}\\\" /> <property name=\\\"username\\\" value=\\\"${username}\\\" /> <property name=\\\"password\\\" value=\\\"${password}\\\" /> </dataSource> </environment> </environments> </configuration>\"]},\"807\":{\"h\":\"4,3，配置Map.xml(MyMapper.xml)\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <!-- mapper:根标签，namespace：命名空间，随便写，一般保证命名空间唯一 --> <mapper namespace=\\\"MyMapper\\\"> <!-- statement，内容：sql语句。id：唯一标识，随便写，在同一个命名空间下保持唯一 resultType：sql语句查询结果集的封装类型,tb_user即为数据库中的表名 --> <select id=\\\"selectUser\\\" resultType=\\\"com.zpc.mybatis.User\\\"> select * from tb_user where id = #{id} </select> </mapper>\"]},\"808\":{\"h\":\"4，4，修改全局配置文件(mybatis-config.xml)\",\"t\":[\"加入MyMapper.xml配置\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE configuration PUBLIC \\\"-//mybatis.org//DTD Config 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-config.dtd\\\"> <!-- 根标签 --> <configuration> <!-- 环境，可以配置多个，default：指定采用哪个环境 --> <environments default=\\\"test\\\"> <!-- id：唯一标识 --> <environment id=\\\"test\\\"> <!-- 事务管理器，JDBC类型的事务管理器 --> <transactionManager type=\\\"JDBC\\\" /> <!-- 数据源，池类型的数据源 --> <dataSource type=\\\"POOLED\\\"> <property name=\\\"driver\\\" value=\\\"com.mysql.jdbc.Driver\\\" /> <property name=\\\"url\\\" value=\\\"jdbc:mysql://127.0.0.1:3306/mydatabase\\\" /> <property name=\\\"username\\\" value=\\\"root\\\" /> <property name=\\\"password\\\" value=\\\"123456\\\" /> </dataSource> </environment> </environments> <mappers> <mapper resource=\\\"mappers/MyMapper.xml\\\" /> </mappers> </configuration>\"]},\"809\":{\"h\":\"4，5，构建SqlSessionFactory(MybatisTest.java)\",\"t\":[\" // 指定全局配置文件 String resource = \\\"mybatis-config.xml\\\"; // 读取配置文件 InputStream inputStream = Resources.getResourceAsStream(resource); // 构建sqlSessionFactory SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\"]},\"810\":{\"h\":\"4,6，打开sqlSession回话，并执行sql(MyBatisTest.xml)\",\"t\":[\" // 获取sqlSession SqlSession sqlSession = sqlSessionFactory.openSession(); // 操作CRUD，第一个参数：指定statement，规则：命名空间+“.”+statementId // 第二个参数：指定传入sql的参数：这里是用户id User user = sqlSession.selectOne(\\\"MyMapper.selectUser\\\", 1); System.out.println(user);\",\"完整代码\",\"MyBatisTest.java\",\"import com.zpc.test.pojo.User; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import java.io.InputStream; public class MybatisTest { public static void main(String[] args) throws Exception { // 指定全局配置文件 String resource = \\\"mybatis-config.xml\\\"; // 读取配置文件 InputStream inputStream = Resources.getResourceAsStream(resource); // 构建sqlSessionFactory SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); // 获取sqlSession SqlSession sqlSession = sqlSessionFactory.openSession(); try { // 操作CRUD，第一个参数：指定statement，规则：命名空间+“.”+statementId // 第二个参数：指定传入sql的参数：这里是用户id User user = sqlSession.selectOne(\\\"MyMapper.selectUser\\\", 1); System.out.println(user); } finally { sqlSession.close(); } } }\",\"User.java\",\"import java.text.SimpleDateFormat; import java.util.Date; public class User { private String id; private String userName; private String password; private String name; private Integer age; private Integer sex; private Date birthday; private String created; private String updated; public String getId() { return id; } public void setId(String id) { this.id = id; } public String getUserName() { return userName; } public void setUserName(String userName) { this.userName = userName; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Integer getAge() { return age; } public void setAge(Integer age) { this.age = age; } public Integer getSex() { return sex; } public void setSex(Integer sex) { this.sex = sex; } public Date getBirthday() { return birthday; } public void setBirthday(Date birthday) { this.birthday = birthday; } public String getCreated() { return created; } public void setCreated(String created) { this.created = created; } public String getUpdated() { return updated; } public void setUpdated(String updated) { this.updated = updated; } }\"]},\"811\":{\"h\":\"4,7，目录结构\",\"t\":[\"二号图片\"]},\"812\":{\"h\":\"5，分析\"},\"813\":{\"h\":\"5,1，日志\"},\"814\":{\"h\":\"5,2，MyBatis使用步骤总结\",\"t\":[\"1)配置mybatis-config.xml 全局的配置文件 (1、数据源，2、外部的mapper)\",\"2)创建SqlSessionFactory\",\"3)通过SqlSessionFactory创建SqlSession对象\",\"4)通过SqlSession操作数据库 CRUD\",\"5)调用session.commit()提交事务\",\"6)调用session.close()关闭会话\"]},\"815\":{\"h\":\"6，完整增删查改操作(CURD)\"},\"816\":{\"h\":\"6，1，创建USerDao.java接口\",\"t\":[\"import com.zpc.mybatis.pojo.User; import java.util.List; public interface UserDao { /** * 根据id查询用户信息 * * @param id * @return */ public User queryUserById(String id); /** * 查询所有用户信息 * * @return */ public List<User> queryUserAll(); /** * 新增用户 * * @param user */ public void insertUser(User user); /** * 更新用户信息 * * @param user */ public void updateUser(User user); /** * 根据id删除用户信息 * * @param id */ public void deleteUser(String id); }\"]},\"817\":{\"h\":\"6,2,创建UserDaoImpl.java\",\"t\":[\"import com.zpc.mybatis.dao.UserDao; import com.zpc.mybatis.pojo.User; import org.apache.ibatis.session.SqlSession; import java.util.List; public class UserDaoImpl implements UserDao { public SqlSession sqlSession; public UserDaoImpl(SqlSession sqlSession) { this.sqlSession = sqlSession; } @Override public User queryUserById(String id) { return this.sqlSession.selectOne(\\\"UserDao.queryUserById\\\", id); } @Override public List<User> queryUserAll() { return this.sqlSession.selectList(\\\"UserDao.queryUserAll\\\"); } @Override public void insertUser(User user) { this.sqlSession.insert(\\\"UserDao.insertUser\\\", user); } @Override public void updateUser(User user) { this.sqlSession.update(\\\"UserDao.updateUser\\\", user); } @Override public void deleteUser(String id) { this.sqlSession.delete(\\\"UserDao.deleteUser\\\", id); } }\"]},\"818\":{\"h\":\"6,3，编写UserDao对应Mapper(UserDaoMapper.xml)\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <!-- mapper:根标签，namespace：命名空间，随便写，一般保证命名空间唯一 --> <mapper namespace=\\\"UserDao\\\"> <!-- statement，内容：sql语句。id：唯一标识，随便写，在同一个命名空间下保持唯一 resultType：sql语句查询结果集的封装类型,tb_user即为数据库中的表 --> <!--<select id=\\\"queryUserById\\\" resultType=\\\"com.zpc.mybatis.pojo.User\\\">--> <!--select * from tb_user where id = #{id}--> <!--</select>--> <!--使用别名--> <select id=\\\"queryUserById\\\" resultType=\\\"com.zpc.mybatis.pojo.User\\\"> select tuser.id as id, tuser.user_name as userName, tuser.password as password, tuser.name as name, tuser.age as age, tuser.birthday as birthday, tuser.sex as sex, tuser.created as created, tuser.updated as updated from tb_user tuser where tuser.id = #{id}; </select> <select id=\\\"queryUserAll\\\" resultType=\\\"com.zpc.mybatis.pojo.User\\\"> select * from tb_user; </select> <!--插入数据--> <insert id=\\\"insertUser\\\" parameterType=\\\"com.zpc.mybatis.pojo.User\\\"> INSERT INTO tb_user ( user_name, password, name, age, sex, birthday, created, updated ) VALUES ( #{userName}, #{password}, #{name}, #{age}, #{sex}, #{birthday}, now(), now() ); </insert> <update id=\\\"updateUser\\\" parameterType=\\\"com.zpc.mybatis.pojo.User\\\"> UPDATE tb_user <trim prefix=\\\"set\\\" suffixOverrides=\\\",\\\"> <if test=\\\"userName!=null\\\">user_name = #{userName},</if> <if test=\\\"password!=null\\\">password = #{password},</if> <if test=\\\"name!=null\\\">name = #{name},</if> <if test=\\\"age!=null\\\">age = #{age},</if> <if test=\\\"sex!=null\\\">sex = #{sex},</if> <if test=\\\"birthday!=null\\\">birthday = #{birthday},</if> updated = now(), </trim> WHERE (id = #{id}); </update> <delete id=\\\"deleteUser\\\"> delete from tb_user where id=#{id} </delete> </mapper>\",\"添加配置(mybatis-config.xml)\",\"<mappers> <mapper resource=\\\"mappers/MyMapper.xml\\\"/> <mapper resource=\\\"mappers/UserDaoMapper.xml\\\"/> </mappers>\"]},\"819\":{\"h\":\"6,4,添加UserDao测试用例\",\"t\":[\"pom.xml文件添加junit依赖\",\"<dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.12</version> </dependency>\",\"UserDao.java，按住Alt+Enter,选择create test\",\"图片三\"]},\"820\":{\"h\":\"6.5.编写UserDao的测试用例\",\"t\":[\"import com.zpc.mybatis.dao.UserDao; import com.zpc.mybatis.dao.impl.UserDaoImpl; import com.zpc.mybatis.pojo.User; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import org.junit.Before; import org.junit.Test; import java.io.InputStream; import java.util.Date; import java.util.List; public class UserDaoTest { public UserDao userDao; public SqlSession sqlSession; @Before public void setUp() throws Exception { // mybatis-config.xml String resource = \\\"mybatis-config.xml\\\"; // 读取配置文件 InputStream is = Resources.getResourceAsStream(resource); // 构建SqlSessionFactory SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is); // 获取sqlSession sqlSession = sqlSessionFactory.openSession(); this.userDao = new UserDaoImpl(sqlSession); } @Test public void queryUserById() throws Exception { System.out.println(this.userDao.queryUserById(\\\"1\\\")); } @Test public void queryUserAll() throws Exception { List<User> userList = this.userDao.queryUserAll(); for (User user : userList) { System.out.println(user); } } @Test public void insertUser() throws Exception { User user = new User(); user.setAge(16); user.setBirthday(new Date(\\\"1990/09/02\\\")); user.setName(\\\"大鹏\\\"); user.setPassword(\\\"123456\\\"); user.setSex(1); user.setUserName(\\\"evan\\\"); this.userDao.insertUser(user); this.sqlSession.commit(); } @Test public void updateUser() throws Exception { User user = new User(); user.setBirthday(new Date()); user.setName(\\\"静鹏\\\"); user.setPassword(\\\"654321\\\"); user.setSex(1); user.setUserName(\\\"evanjin\\\"); user.setId(\\\"1\\\"); this.userDao.updateUser(user); this.sqlSession.commit(); } @Test public void deleteUser() throws Exception { this.userDao.deleteUser(\\\"4\\\"); this.sqlSession.commit(); } }\"]},\"821\":{\"h\":\"6.6.目录结构\",\"t\":[\"图片四\"]},\"822\":{\"h\":\"6.7.解决数据库字段名和实体类属性名不一致的问题\",\"t\":[\"查询数据的时候，发现查不到userName的信息， User{id=‘2’, userName=‘null’, password=‘123456’, name=‘静静’, age=22, sex=0, birthday=‘1993-09-05’, created=‘2018-06-30 18:22:28.0’, updated=‘2018-06-30 18:22:28.0’} 原因：数据库的字段名是user_name，POJO中的属性名字是userName 两端不一致，造成mybatis无法填充对应的字段信息。修改方法：在sql语句中使用别名。\",\"解决方案1：在sql语句中使用别名：\",\"<select id=\\\"queryUserById\\\" resultType=\\\"com.zpc.mybatis.pojo.User\\\"> select tuser.id as id, tuser.user_name as userName, tuser.password as password, tuser.name as name, tuser.age as age, tuser.birthday as birthday, tuser.sex as sex, tuser.created as created, tuser.updated as updated from tb_user tuser where tuser.id = #{id}; </select>\",\"解决方案2： 参考后面的resultMap –mapper具体的配置的时候\",\"解决方案3：参考驼峰匹配 — mybatis-config.xml 的时候\"]},\"823\":{\"h\":\"7. 动态代理Mapper实现类\"},\"824\":{\"h\":\"7.1.思考上述CRUD中的问题\",\"t\":[\"接口 -> 实现类 -> mapping.xml\",\"实现类中，使用mybatis的方式非常相似\",\"xml的sql statement 硬编码到Java代码中\",\"思考：能否直接写接口，不写实现类。只编写接口和Mapping.xml即可？\",\"因为再dao(mapper)的实现类中对sqlsession的使用方式很类似。因此mybatis提供了接口的动态代理。\"]},\"825\":{\"h\":\"7，2，使用动态代理改造CRUD\",\"t\":[\"修改测试用例的setUp方法\",\"图片五\",\"执行queryUserAll()方法\",\"图片6\",\"org.apache.ibatis.binding.BindingException: Type interface com.zpc.mybatis.dao.UserDao is not known to the MapperRegistry. at org.apache.ibatis.binding.MapperRegistry.getMapper(MapperRegistry.java:47) at org.apache.ibatis.session.Configuration.getMapper(Configuration.java:655) at org.apache.ibatis.session.defaults.DefaultSqlSession.getMapper(DefaultSqlSession.java:222) at com.zpc.mybatis.test.UserDaoTest.setUp(UserDaoTest.java:32)\",\"分析原因，在 UserMapper.xml 中配置接口的全路径\",\"mapper.xml namespace\",\"如果希望使用mybatis通过的动态代理的接口，就需要namespace中的值，和需要对应的Mapper(dao)接口的全路径一致。Mapper中Namespace的定义本身是没有限制的，只要不重复即可，但如果使用Mybatis的DAO接口动态代理，则namespace必须为DAO接口的全路径，\",\"例如：com.zpc.mybatis.dao.UserDao\",\"<mapper namespace=\\\"com.zpc.mybatis.dao.UserDao\\\">\"]},\"826\":{\"h\":\"7.3.完整的例子\",\"t\":[\"创建UserMapper接口(对应原UserDao)\",\"public interface UserMapper { /** * 登录（直接使用注解指定传入参数名称） * @param userName * @param password * @return */ public User login(@Param(\\\"userName\\\") String userName, @Param(\\\"password\\\") String password); /** * 根据表名查询用户信息（直接使用注解指定传入参数名称） * @param tableName * @return */ public List<User> queryUserByTableName(@Param(\\\"tableName\\\") String tableName); /** * 根据Id查询用户信息 * @param id * @return */ public User queryUserById(Long id); /** * 查询所有用户信息 * @return */ public List<User> queryUserAll(); /** * 新增用户信息 * @param user */ public void insertUser(User user); /** * 根据id更新用户信息 * @param user */ public void updateUser(User user); /** * 根据id删除用户信息 * @param id */ public void deleteUserById(Long id); }\",\"创建Usermapper.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <!-- mapper:根标签，namespace：命名空间，随便写，一般保证命名空间唯一 ，为了使用接口动态代理，这里必须是接口的全路径名--> <mapper namespace=\\\"com.zpc.mybatis.dao.UserMapper\\\"> <!-- 1.#{},预编译的方式preparedstatement，使用占位符替换，防止sql注入，一个参数的时候，任意参数名可以接收 2.${},普通的Statement，字符串直接拼接，不可以防止sql注入，一个参数的时候，必须使用${value}接收参数 --> <select id=\\\"queryUserByTableName\\\" resultType=\\\"com.zpc.mybatis.pojo.User\\\"> select * from ${tableName} </select> <select id=\\\"login\\\" resultType=\\\"com.zpc.mybatis.pojo.User\\\"> select * from tb_user where user_name = #{userName} and password = #{password} </select> <!-- statement，内容：sql语句。 id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致 resultType：sql语句查询结果集的封装类型，使用动态代理之后和方法的返回类型一致；resultMap：二选一 parameterType：参数的类型，使用动态代理之后和方法的参数类型一致 --> <select id=\\\"queryUserById\\\" resultType=\\\"com.zpc.mybatis.pojo.User\\\"> select * from tb_user where id = #{id} </select> <select id=\\\"queryUserAll\\\" resultType=\\\"com.zpc.mybatis.pojo.User\\\"> select * from tb_user </select> <!-- 新增的Statement id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致 parameterType：参数的类型，使用动态代理之后和方法的参数类型一致 useGeneratedKeys:开启主键回写 keyColumn：指定数据库的主键 keyProperty：主键对应的pojo属性名 --> <insert id=\\\"insertUser\\\" useGeneratedKeys=\\\"true\\\" keyColumn=\\\"id\\\" keyProperty=\\\"id\\\" parameterType=\\\"com.zpc.mybatis.pojo.User\\\"> INSERT INTO tb_user ( id, user_name, password, name, age, sex, birthday, created, updated ) VALUES ( null, #{userName}, #{password}, #{name}, #{age}, #{sex}, #{birthday}, NOW(), NOW() ); </insert> <!-- 更新的statement id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致 parameterType：参数的类型，使用动态代理之后和方法的参数类型一致 --> <update id=\\\"updateUser\\\" parameterType=\\\"com.zpc.mybatis.pojo.User\\\"> UPDATE tb_user <trim prefix=\\\"set\\\" suffixOverrides=\\\",\\\"> <if test=\\\"userName!=null\\\">user_name = #{userName},</if> <if test=\\\"password!=null\\\">password = #{password},</if> <if test=\\\"name!=null\\\">name = #{name},</if> <if test=\\\"age!=null\\\">age = #{age},</if> <if test=\\\"sex!=null\\\">sex = #{sex},</if> <if test=\\\"birthday!=null\\\">birthday = #{birthday},</if> updated = now(), </trim> WHERE (id = #{id}); </update> <!-- 删除的statement id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致 parameterType：参数的类型，使用动态代理之后和方法的参数类型一致 --> <delete id=\\\"deleteUserById\\\" parameterType=\\\"java.lang.String\\\"> delete from tb_user where id=#{id} </delete> </mapper>\",\"全局配置文件mybatis-config.xml引入UserMapper.xml\",\"<mappers> <mapper resource=\\\"mappers/MyMapper.xml\\\"/> <mapper resource=\\\"mappers/UserDaoMapper.xml\\\"/> <mapper resource=\\\"mappers/UserMapper.xml\\\"/> </mappers>\",\"创建UserMapper测试用例\",\"import com.zpc.mybatis.dao.UserMapper; import com.zpc.mybatis.pojo.User; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import org.junit.Before; import org.junit.Test; import java.io.InputStream; import java.util.Date; import java.util.List; public class UserMapperTest { public UserMapper userMapper; @Before public void setUp() throws Exception { // 指定配置文件 String resource = \\\"mybatis-config.xml\\\"; // 读取配置文件 InputStream inputStream = Resources.getResourceAsStream(resource); // 构建sqlSessionFactory SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); // 获取sqlSession SqlSession sqlSession = sqlSessionFactory.openSession(true); // 1. 映射文件的命名空间（namespace）必须是mapper接口的全路径 // 2. 映射文件的statement的id必须和mapper接口的方法名保持一致 // 3. Statement的resultType必须和mapper接口方法的返回类型一致 // 4. statement的parameterType必须和mapper接口方法的参数类型一致（不一定） this.userMapper = sqlSession.getMapper(UserMapper.class); } @Test public void testQueryUserByTableName() { List<User> userList = this.userMapper.queryUserByTableName(\\\"tb_user\\\"); for (User user : userList) { System.out.println(user); } } @Test public void testLogin() { System.out.println(this.userMapper.login(\\\"hj\\\", \\\"123456\\\")); } @Test public void testQueryUserById() { System.out.println(this.userMapper.queryUserById(\\\"1\\\")); } @Test public void testQueryUserAll() { List<User> userList = this.userMapper.queryUserAll(); for (User user : userList) { System.out.println(user); } } @Test public void testInsertUser() { User user = new User(); user.setAge(20); user.setBirthday(new Date()); user.setName(\\\"大神\\\"); user.setPassword(\\\"123456\\\"); user.setSex(2); user.setUserName(\\\"bigGod222\\\"); this.userMapper.insertUser(user); System.out.println(user.getId()); } @Test public void testUpdateUser() { User user = new User(); user.setBirthday(new Date()); user.setName(\\\"静静\\\"); user.setPassword(\\\"123456\\\"); user.setSex(0); user.setUserName(\\\"Jinjin\\\"); user.setId(\\\"1\\\"); this.userMapper.updateUser(user); } @Test public void testDeleteUserById() { this.userMapper.deleteUserById(\\\"1\\\"); } }\",\"目录结构：\",\"图片七\"]},\"827\":{\"h\":\"7,4，动态代理总结\",\"t\":[\"使用mapper接口不用写接口实现类即可完成数据库操作，使用非常方便，也是官方推荐的使用方式。\",\"Mapper的namespace必须和mapper接口的全路径一致。\",\"Mapper接口的方法名必须和sql定义的id一致。\",\"Mapper接口中方法的输入参数类型必须和sql定义的parameterType一致。(这句需要再琢磨)\",\"Mapper接口中方法的输出参数类型必须和sql定义的resultType一致。\"]},\"828\":{\"h\":\"8，mybatis-config.xml详解\",\"t\":[\"mybatis-config.xml讲究严格的顺序，具体顺序遵循文档的顺序。\",\"图片八\"]},\"829\":{\"h\":\"8,1，properties属性读取外部资源\",\"t\":[\"properties配置的属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递。例如：\",\"<properties resource=\\\"org/mybatis/example/config.properties\\\"> <property name=\\\"username\\\" value=\\\"dev_user\\\"/> <property name=\\\"password\\\" value=\\\"F2Fa3!33TYyg\\\"/> </properties>\",\"然后其中的属性就可以在整个配置文件中被用来替换需要动态配置的属性值。比如:\",\"<dataSource type=\\\"POOLED\\\"> <property name=\\\"driver\\\" value=\\\"${driver}\\\"/> <property name=\\\"url\\\" value=\\\"${url}\\\"/> <property name=\\\"username\\\" value=\\\"${username}\\\"/> <property name=\\\"password\\\" value=\\\"${password}\\\"/> </dataSource>\",\"这个例子中的 username 和 password 将会由 properties 元素中设置的相应值来替换。 driver 和 url 属性将会由 config.properties 文件中对应的值来替换。这样就为配置提供了诸多灵活选择。\",\"属性也可以被传递到 SqlSessionFactoryBuilder.build()方法中。例如：\",\"SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, props); // ... or ... SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment, props);\",\"如果属性在不只一个地方进行了配置，那么 MyBatis 将按照下面的顺序来加载：\",\"在 properties 元素体内指定的属性首先被读取。\",\"然后根据 properties 元素中的 resource 属性读取类路径下属性文件或根据 url 属性指定的路径读取属性文件，并覆盖已读取的同名属性。\",\"最后读取作为方法参数传递的属性，并覆盖已读取的同名属性。\",\"因此，通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的是 properties 属性中指定的属性。\"]},\"830\":{\"h\":\"8,2,settings设置\",\"t\":[\"图片九\",\"开启驼峰匹配：\",\"<settings> <setting name=\\\"mapUnderscoreToCamelCase\\\" value=\\\"true\\\"/> </settings>\"]},\"831\":{\"h\":\"8,3,typeAliases(别名)\",\"t\":[\"类型别名是为 Java 类型命名的一个短的名字。它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。\",\"<typeAliases> <typeAlias type=\\\"com.zpc.mybatis.pojo.User\\\" alias=\\\"User\\\"/> </typeAliases>\",\"缺点：每个pojo类都要去配置。 解决方案：使用扫描包，扫描指定包下的所有类，扫描之后的别名就是类名（不区分大小写），建议使用的时候和类名一致\",\"<typeAliases> <!--type:实体类的全路径。alias:别名，通常首字母大写--> <!--<typeAlias type=\\\"com.zpc.mybatis.pojo.User\\\" alias=\\\"User\\\"/>--> <package name=\\\"com.zpc.mybatis.pojo\\\"/> </typeAliases>\",\"Mybatis已经为普通的 Java 类型内建了许多相应的类型别名。它们都是大小写不敏感的。\",\"图片十\"]},\"832\":{\"h\":\"8,4,typeHandlers(类处理器)\",\"t\":[\"无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型。可以重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。\"]},\"833\":{\"h\":\"8.5.plugins（插件）拦截器\",\"t\":[\"MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括： Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed) ParameterHandler (getParameterObject, setParameters) ResultSetHandler (handleResultSets, handleOutputParameters) StatementHandler (prepare, parameterize, batch, update, query)\",\"现在一些MyBatis 插件比如PageHelper都是基于这个原理，有时为了监控sql执行效率，也可以使用插件机制 原理：\",\"图片十一\",\"// ExamplePlugin.java @Intercepts({@Signature( type= Executor.class, method = \\\"update\\\", args = {MappedStatement.class,Object.class})}) public class ExamplePlugin implements Interceptor { public Object intercept(Invocation invocation) throws Throwable { return invocation.proceed(); } public Object plugin(Object target) { return Plugin.wrap(target, this); } public void setProperties(Properties properties) { } }\",\"配置：\",\"<!-- mybatis-config.xml --> <plugins> <plugin interceptor=\\\"org.mybatis.example.ExamplePlugin\\\"> <property name=\\\"someProperty\\\" value=\\\"100\\\"/> </plugin> </plugins>\",\"上面的插件将会拦截在 Executor 实例中所有的 “update” 方法调用， 这里的 Executor 是负责执行低层映射语句的内部对象。\"]},\"834\":{\"h\":\"8.6.environments(环境)\",\"t\":[\"MyBatis 可以配置成适应多种环境，例如，开发、测试和生产环境需要有不同的配置； 尽管可以配置多个环境，每个 SqlSessionFactory 实例只能选择其一。 虽然，这种方式也可以做到很方便的分离多个环境，但是实际使用场景下，我们更多的是选择使用spring来管理数据源，来做到环境的分离。\"]},\"835\":{\"h\":\"8.7.mappers\",\"t\":[\"需要告诉 MyBatis 到哪里去找到 SQL 映射语句。即告诉 MyBatis 到哪里去找映射文件。你可以使用相对于类路径的资源引用， 或完全限定资源定位符（包括 file:/// 的 URL），或类名和包名等。例如：\",\"<!-- 使用相对于类路径的资源引用 --> <mappers> <mapper resource=\\\"org/mybatis/builder/AuthorMapper.xml\\\"/> <mapper resource=\\\"org/mybatis/builder/BlogMapper.xml\\\"/> <mapper resource=\\\"org/mybatis/builder/PostMapper.xml\\\"/> </mappers> <!-- 使用映射器接口实现类的完全限定类名 --> <mappers> <mapper class=\\\"org.mybatis.builder.AuthorMapper\\\"/> <mapper class=\\\"org.mybatis.builder.BlogMapper\\\"/> <mapper class=\\\"org.mybatis.builder.PostMapper\\\"/> </mappers>\",\"这里所谓的mapper接口路径。实际上就是dao的接口路径。在mybatis中，通常把dao的包叫做mapper。类名，也叫做mapper\",\"定义一个接口。\",\"在接口所在的包中定义mapper.xml，并且要求xml文件和interface的名称要相同。\",\"在mybatis-config.xml 中通过class路径，引入mapper（注解方式）。要求mapper.xml 中的名称空间是类的接口的全路径。\",\"注解方式：\",\"<mappers> <mapper resource=\\\"mappers/MyMapper.xml\\\"/> <mapper resource=\\\"mappers/UserDaoMapper.xml\\\"/> <!--注解方式可以使用如下配置方式--> <mapper class=\\\"com.zpc.mybatis.dao.UserMapper\\\"/> </mappers>\",\"问题：\",\"mapper.xml 和 java 文件没有分离。 之后的教程讲述和spring整合之后解决。\",\"需要一个一个的去加载mapper。\",\"当然也可以使用包扫描（必须使用注解方式，即在接口方法上使用注解，如 @Select(\\\"select * from tb_user \\\")）： 缺点：\",\"如果包的路径有很多？\",\"mapper.xml 和 mapper.java 没有分离。\",\"spring 整合的时候解决。\"]},\"836\":{\"h\":\"9.Mapper XML文件详解\"},\"837\":{\"h\":\"9.1.CRUD标签\"},\"838\":{\"h\":\"9.1.1.select\",\"t\":[\"select – 书写查询sql语句 select中的几个属性说明： id属性：当前名称空间下的statement的唯一标识。必须。要求id和mapper接口中的方法的名字一致。 resultType：将结果集映射为java的对象类型。必须（和 resultMap 二选一） parameterType：传入参数类型。可以省略\"]},\"839\":{\"h\":\"9.1.2.insert\",\"t\":[\"insert 的几个属性说明： id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致 parameterType：参数的类型，使用动态代理之后和方法的参数类型一致 useGeneratedKeys:开启主键回写 keyColumn：指定数据库的主键 keyProperty：主键对应的pojo属性名 标签内部：具体的sql语句。\"]},\"840\":{\"h\":\"9.1.3.update\",\"t\":[\"id属性：当前名称空间下的statement的唯一标识(必须属性)； parameterType：传入的参数类型，可以省略。 标签内部：具体的sql语句。\"]},\"841\":{\"h\":\"9.1.4.delete\",\"t\":[\"delete 的几个属性说明： id属性：当前名称空间下的statement的唯一标识(必须属性)； parameterType：传入的参数类型，可以省略。 标签内部：具体的sql语句。\"]},\"842\":{\"h\":\"9.2.#{}和${}\",\"t\":[\"场景：数据库有两个一模一样的表。历史表，当前表 查询表中的信息，有时候从历史表中去查询数据，有时候需要去新的表去查询数据。 希望使用1个方法来完成操作。\",\"<select id=\\\"queryUserByTableName\\\" resultType=\\\"com.zpc.mybatis.pojo.User\\\"> select * from #{tableName} </select> /** * 根据表名查询用户信息（直接使用注解指定传入参数名称） * * @param tableName * @return */ public List<User> queryUserByTableName(String tableName);\",\"测试输出：\",\"有问题,报语法错误：相当于执行了这样一条sql: select * from “tb_user”; 显然表名多了引号。\",\"改正：\",\"<select id=\\\"queryUserByTableName\\\" resultType=\\\"com.zpc.mybatis.pojo.User\\\"> select * from ${tableName} </select>\",\"注意： #{} 只是替换？，相当于PreparedStatement使用占位符去替换参数，可以防止sql注入。 ${} 是进行字符串拼接，相当于sql语句中的Statement，使用字符串去拼接sql；$可以是sql中的任一部分传入到Statement中，不能防止sql注入。\",\"使用${} 去取出参数值信息，需要使用${value} #{} 只是表示占位，与参数的名字无关，如果只有一个参数，会自动对应。\",\"推荐：\",\"/** * 根据表名查询用户信息（直接使用注解指定传入参数名称） * * @param tableName * @return */ public List<User> queryUserByTableName(@Param(\\\"tableName\\\") String tableName); <select id=\\\"queryUserByTableName\\\" resultType=\\\"com.zpc.mybatis.pojo.User\\\"> select * from ${tableName} </select>\",\"#{}多个参数时：\",\"/** * 登录（直接使用注解指定传入参数名称） * * @param userName * @param password * @return */ public User login( String userName, String password); <select id=\\\"login\\\" resultType=\\\"com.zpc.mybatis.pojo.User\\\"> select * from tb_user where user_name = #{userName} and password = #{password} </select>\",\"报错：\",\"org.apache.ibatis.exceptions.PersistenceException: ### Error querying database. Cause: org.apache.ibatis.binding.BindingException: Parameter 'userName' not found. Available parameters are [0, 1, param1, param2] ### Cause: org.apache.ibatis.binding.BindingException: Parameter 'userName' not found. Available parameters are [0, 1, param1, param2]\",\"解决方案一：\",\"<select id=\\\"login\\\" resultType=\\\"com.zpc.mybatis.pojo.User\\\"> select * from tb_user where user_name = #{0} and password = #{1} </select>\",\"解决方案二：\",\"<select id=\\\"login\\\" resultType=\\\"com.zpc.mybatis.pojo.User\\\"> select * from tb_user where user_name = #{param1} and password = #{param2} </select>\",\"最终解决方案：\",\"/** * 登录（直接使用注解指定传入参数名称） * * @param userName * @param password * @return */ public User login(@Param(\\\"userName\\\") String userName, @Param(\\\"password\\\") String password); <select id=\\\"login\\\" resultType=\\\"com.zpc.mybatis.pojo.User\\\"> select * from tb_user where user_name = #{userName} and password = #{password} </select>\",\"通常在方法的参数列表上加上一个注释@Param(“xxxx”) 显式指定参数的名字，然后通过${“xxxx”}或#{“xxxx”} sql语句动态生成的时候，使用${}; sql语句中某个参数进行占位的时候#{}\"]},\"843\":{\"h\":\"9.3.面试题（#、$区别）\",\"t\":[\"/** * #号 * @param username1 * @return */ User queryUserListByName1(@Param(\\\"username1\\\") String username1); /** * $号 * @param username2 * @return */ User queryUserListByName2(@Param(\\\"username2\\\") String username2); <select id=\\\"queryUserListByName1\\\" resultType=\\\"com.zpc.mybatis.pojo.User\\\"> select * from tb_user WHERE user_name=#{username1} </select> <select id=\\\"queryUserListByName2\\\" resultType=\\\"com.zpc.mybatis.pojo.User\\\"> select * from tb_user WHERE user_name='${username2}'//手动加了引号 </select>\"]},\"844\":{\"h\":\"9.4.resultMap\",\"t\":[\"图片十二\",\"图片十三\",\"使用： \"]},\"845\":{\"h\":\"9.5.sql片段\",\"t\":[\"<sql id=””></sql> <include refId=”” />\",\"例如在UserMapper.xml中定义如下片段：\",\"<sql id=\\\"commonSql\\\"> id, user_name, password, name, age, sex, birthday, created, updated </sql>\",\"则可以在UserMapper.xml中使用它：\",\"<select id=\\\"queryUserById\\\" resultMap=\\\"userResultMap\\\"> select <include refid=\\\"commonSql\\\"></include> from tb_user where id = #{id} </select> <select id=\\\"queryUsersLikeUserName\\\" resultType=\\\"User\\\"> select <include refid=\\\"commonSql\\\"></include> from tb_user where user_name like \\\"%\\\"#{userName}\\\"%\\\" </select>\",\"Sql片段也可以定义在单独的.xml文件中如： 定义CommonSQL.xml：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <mapper namespace=\\\"CommonSQL\\\"> <sql id=\\\"commonSql\\\"> id, user_name, password, name, age, sex, birthday, created, updated </sql> </mapper>\",\"使用：\",\" <select id=\\\"queryUserById\\\" resultMap=\\\"userResultMap\\\"> select <include refid=\\\"CommonSQL.commonSql\\\"></include> from tb_user where id = #{id} </select> <select id=\\\"queryUsersLikeUserName\\\" resultType=\\\"User\\\"> select <include refid=\\\"CommonSQL.commonSql\\\"></include> from tb_user where user_name like \\\"%\\\"#{userName}\\\"%\\\" </select>\",\"当然要完成这个功能还需要在全局配置文件mybatis-config.xml中引入该外部配置文件：\",\"<mappers> <mapper resource=\\\"CommonSQL.xml\\\"/> <!-- 开启mapper接口的包扫描，基于class的配置方式 --> <package name=\\\"com.zpc.mybatis.mapper\\\"/> </mappers>\"]},\"846\":{\"h\":\"10.动态sql\",\"t\":[\"场景：查询男性用户，如果输入了姓名，按姓名模糊查询 \"]},\"847\":{\"h\":\"10.1.if\",\"t\":[\"场景：查询男性用户，如果输入了姓名，则按姓名查询\",\"定义接口：\",\"/** * 查询男性用户，如果输入了姓名，则按姓名查询 * @param name * @return */ List<User> queryUserList(@Param(\\\"name\\\") String name);\",\"编写mapper\",\"<select id=\\\"queryUserList\\\" resultType=\\\"com.zpc.mybatis.pojo.User\\\"> select * from tb_user WHERE sex=1 <if test=\\\"name!=null and name.trim()!=''\\\"> and name like '%${name}%' </if> </select>\",\"测试：\",\"@Test public void testqueryUserList() { List<User> users = this.userMapper.queryUserList(null); for (User user : users) { System.out.println(user); } }\"]},\"848\":{\"h\":\"10.2.choose when otherwise\",\"t\":[\"场景：查询男性用户，如果输入了姓名则按照姓名模糊查找，否则如果输入了年龄则按照年龄查找，否则查找姓名为“鹏程”的用户。\",\"定义接口：\",\"/** * 查询男性用户，如果输入了姓名则按照姓名模糊查找，否则如果输入了年龄则按照年龄查找，否则查找姓名为“鹏程”的用户。 * @param name * @param age * @return */ List<User> queryUserListByNameOrAge(@Param(\\\"name\\\") String name,@Param(\\\"age\\\") Integer age);\",\"编写mapper配置：\",\"<select id=\\\"queryUserListByNameOrAge\\\" resultType=\\\"com.zpc.mybatis.pojo.User\\\"> select * from tb_user WHERE sex=1 <!-- 1.一旦有条件成立的when，后续的when则不会执行 2.当所有的when都不执行时,才会执行otherwise --> <choose> <when test=\\\"name!=null and name.trim()!=''\\\"> and name like '%${name}%' </when> <when test=\\\"age!=null\\\"> and age = #{age} </when> <otherwise> and name='鹏程' </otherwise> </choose> </select>\",\"测试:\",\"@Test public void queryUserListByNameOrAge() throws Exception { List<User> users = this.userMapper.queryUserListByNameOrAge(null, 16); for (User user : users) { System.out.println(user); } }\"]},\"849\":{\"h\":\"10.3.where 和set\",\"t\":[\"场景一：查询所有用户，如果输入了姓名按照姓名进行模糊查询，如果输入年龄，按照年龄进行查询，如果两者都输入，两个条件都要成立。\",\"接口：\",\"/** * 查询所有用户，如果输入了姓名按照姓名进行模糊查询，如果输入年龄，按照年龄进行查询，如果两者都输入，两个条件都要成立 * @param name * @param age * @return */ List<User> queryUserListByNameAndAge(@Param(\\\"name\\\") String name,@Param(\\\"age\\\") Integer age);\",\"配置：\",\"<select id=\\\"queryUserListByNameAndAge\\\" resultType=\\\"com.zpc.mybatis.pojo.User\\\"> select * from tb_user <!--如果多出一个and，会自动去除，如果缺少and或者多出多个and则会报错--> <where> <if test=\\\"name!=null and name.trim()!=''\\\"> and name like '%${name}%' </if> <if test=\\\"age!=null\\\"> and age = #{age} </if> </where> </select>\",\"测试：\",\"@Test public void queryUserListByNameAndAge() throws Exception { List<User> users = this.userMapper.queryUserListByNameAndAge(\\\"鹏程\\\", 20); for (User user : users) { System.out.println(user); } }\",\"场景二：修改用户信息，如果参数user中的某个属性为null，则不修改。 接口：\",\"/** * 根据id更新用户信息 * * @param user */ public void updateUser(User user);\",\"配置：\",\"<update id=\\\"updateUser\\\" parameterType=\\\"com.zpc.mybatis.pojo.User\\\"> UPDATE tb_user <trim prefix=\\\"set\\\" suffixOverrides=\\\",\\\"> <if test=\\\"userName!=null\\\">user_name = #{userName},</if> <if test=\\\"password!=null\\\">password = #{password},</if> <if test=\\\"name!=null\\\">name = #{name},</if> <if test=\\\"age!=null\\\">age = #{age},</if> <if test=\\\"sex!=null\\\">sex = #{sex},</if> <if test=\\\"birthday!=null\\\">birthday = #{birthday},</if> updated = now(), </trim> WHERE (id = #{id}); </update>\",\"测试：\",\"@Test public void testUpdateUser() { User user = new User(); user.setBirthday(new Date()); user.setName(\\\"静静\\\"); user.setPassword(\\\"123456\\\"); user.setSex(0); user.setUserName(\\\"Jinjin\\\"); user.setId(\\\"1\\\"); this.userMapper.updateUser(user); }\"]},\"850\":{\"h\":\"10.4.foreach\",\"t\":[\"场景：按照多个id查询用户信息\",\"接口：\",\"/** * 按多个Id查询 * @param ids * @return */ List<User> queryUserListByIds(@Param(\\\"ids\\\") String[] ids);\",\"配置：\",\"<select id=\\\"queryUserListByIds\\\" resultType=\\\"com.zpc.mybatis.pojo.User\\\"> select * from tb_user where id in <foreach collection=\\\"ids\\\" item=\\\"id\\\" open=\\\"(\\\" close=\\\")\\\" separator=\\\",\\\"> #{id} </foreach> </select>\",\"测试：\",\"@Test public void queryUserListByIds() throws Exception { List<User> users = this.userMapper.queryUserListByIds(new String[]{\\\"1\\\",\\\"2\\\"}); for (User user : users) { System.out.println(user); } }\",\"If：testognl表达式或者简单java代码 Choose when otherwise—>相当于if else if else When test参考if Where set 都有一定的纠错功能 Trim：prefix suffix prefixOverrides suffixOverrides Foreach：collection item saparator open close\"]},\"851\":{\"h\":\"11.缓存\"},\"852\":{\"h\":\"11.1.一级缓存\",\"t\":[\"图片十六\",\"在mybatis中，一级缓存默认是开启的，并且一直无法关闭\",\"一级缓存满足条件： 1、同一个session中 2、相同的SQL和参数\",\"测试：\",\"@Test public void testQueryUserById() { System.out.println(this.userMapper.queryUserById(\\\"1\\\")); System.out.println(this.userMapper.queryUserById(\\\"1\\\")); }\",\"2018-07-01 17:08:50,156 [main] [org.apache.ibatis.transaction.jdbc.JdbcTransaction]-[DEBUG] Opening JDBC Connection 2018-07-01 17:08:50,421 [main] [org.apache.ibatis.datasource.pooled.PooledDataSource]-[DEBUG] Created connection 242355057. 2018-07-01 17:08:50,423 [main] [com.zpc.mybatis.dao.UserMapper.queryUserById]-[DEBUG] ==> Preparing: select * from tb_user where id = ? 2018-07-01 17:08:50,476 [main] [com.zpc.mybatis.dao.UserMapper.queryUserById]-[DEBUG] ==> Parameters: 1(String) 2018-07-01 17:08:50,509 [main] [com.zpc.mybatis.dao.UserMapper.queryUserById]-[DEBUG] <== Total: 1 User{id='1', userName='bigGod222', password='123456', name='鹏程', age=20, sex=1, birthday='2018-07-01', created='2018-07-01 13:35:40.0', updated='2018-07-01 13:35:40.0'} User{id='1', userName='bigGod222', password='123456', name='鹏程', age=20, sex=1, birthday='2018-07-01', created='2018-07-01 13:35:40.0', updated='2018-07-01 13:35:40.0'}\",\"使用： sqlSession.clearCache(); 可以强制清除缓存\",\"测试：\",\"@Test public void testQueryUserById() { System.out.println(this.userMapper.queryUserById(\\\"1\\\")); sqlSession.clearCache(); System.out.println(this.userMapper.queryUserById(\\\"1\\\")); }\",\"日志：\",\"2018-07-01 17:10:51,065 [main] [org.apache.ibatis.transaction.jdbc.JdbcTransaction]-[DEBUG] Opening JDBC Connection 2018-07-01 17:10:51,359 [main] [org.apache.ibatis.datasource.pooled.PooledDataSource]-[DEBUG] Created connection 242355057. 2018-07-01 17:10:51,360 [main] [com.zpc.mybatis.dao.UserMapper.queryUserById]-[DEBUG] ==> Preparing: select * from tb_user where id = ? 2018-07-01 17:10:51,408 [main] [com.zpc.mybatis.dao.UserMapper.queryUserById]-[DEBUG] ==> Parameters: 1(String) 2018-07-01 17:10:51,437 [main] [com.zpc.mybatis.dao.UserMapper.queryUserById]-[DEBUG] <== Total: 1 User{id='1', userName='bigGod222', password='123456', name='鹏程', age=20, sex=1, birthday='2018-07-01', created='2018-07-01 13:35:40.0', updated='2018-07-01 13:35:40.0'} 2018-07-01 17:10:51,438 [main] [com.zpc.mybatis.dao.UserMapper.queryUserById]-[DEBUG] ==> Preparing: select * from tb_user where id = ? 2018-07-01 17:10:51,438 [main] [com.zpc.mybatis.dao.UserMapper.queryUserById]-[DEBUG] ==> Parameters: 1(String) 2018-07-01 17:10:51,440 [main] [com.zpc.mybatis.dao.UserMapper.queryUserById]-[DEBUG] <== Total: 1 User{id='1', userName='bigGod222', password='123456', name='鹏程', age=20, sex=1, birthday='2018-07-01', created='2018-07-01 13:35:40.0', updated='2018-07-01 13:35:40.0'}\",\"执行 update、insert、delete 的时候，会清空缓存 测试：\",\"@Test public void testQueryUserById() { System.out.println(this.userMapper.queryUserById(\\\"1\\\")); //sqlSession.clearCache(); User user=new User(); user.setName(\\\"美女\\\"); user.setId(\\\"1\\\"); userMapper.updateUser(user); System.out.println(this.userMapper.queryUserById(\\\"1\\\")); }\",\"日志：\",\"2018-07-01 17:18:15,128 [main] [org.apache.ibatis.transaction.jdbc.JdbcTransaction]-[DEBUG] Opening JDBC Connection 2018-07-01 17:18:15,399 [main] [org.apache.ibatis.datasource.pooled.PooledDataSource]-[DEBUG] Created connection 242355057. 2018-07-01 17:18:15,401 [main] [com.zpc.mybatis.dao.UserMapper.queryUserById]-[DEBUG] ==> Preparing: select * from tb_user where id = ? 2018-07-01 17:18:15,466 [main] [com.zpc.mybatis.dao.UserMapper.queryUserById]-[DEBUG] ==> Parameters: 1(String) 2018-07-01 17:18:15,492 [main] [com.zpc.mybatis.dao.UserMapper.queryUserById]-[DEBUG] <== Total: 1 User{id='1', userName='bigGod222', password='123456', name='鹏程', age=20, sex=1, birthday='2018-07-01', created='2018-07-01 13:35:40.0', updated='2018-07-01 13:35:40.0'} 2018-07-01 17:18:15,527 [main] [com.zpc.mybatis.dao.UserMapper.updateUser]-[DEBUG] ==> Preparing: UPDATE tb_user set name = ?, updated = now() WHERE (id = ?); 2018-07-01 17:18:15,529 [main] [com.zpc.mybatis.dao.UserMapper.updateUser]-[DEBUG] ==> Parameters: 美女(String), 1(String) 2018-07-01 17:18:15,532 [main] [com.zpc.mybatis.dao.UserMapper.updateUser]-[DEBUG] <== Updates: 1 2018-07-01 17:18:15,532 [main] [com.zpc.mybatis.dao.UserMapper.queryUserById]-[DEBUG] ==> Preparing: select * from tb_user where id = ? 2018-07-01 17:18:15,533 [main] [com.zpc.mybatis.dao.UserMapper.queryUserById]-[DEBUG] ==> Parameters: 1(String) 2018-07-01 17:18:15,538 [main] [com.zpc.mybatis.dao.UserMapper.queryUserById]-[DEBUG] <== Total: 1 User{id='1', userName='bigGod222', password='123456', name='美女', age=20, sex=1, birthday='2018-07-01', created='2018-07-01 13:35:40.0', updated='2018-07-01 17:18:15.0'}\"]},\"853\":{\"h\":\"11.2.二级缓存\",\"t\":[\"mybatis 的二级缓存的作用域是一个mapper的namespace ，同一个namespace中查询sql可以从缓存中命中。\",\"开启二级缓存：\",\"<mapper namespace=\\\"com.zpc.mybatis.dao.UserMapper\\\"> <cache/> </mapper>\",\"测试：\",\"@Test public void testCache() { System.out.println(this.userMapper.queryUserById(\\\"1\\\")); sqlSession.close(); SqlSession sqlSession = sqlSessionFactory.openSession(); UserMapper mapper = sqlSession.getMapper(UserMapper.class); System.out.println(mapper.queryUserById(\\\"1\\\")); }\",\"开启二级缓存，必须序列化：\",\"public class User implements Serializable{ private static final long serialVersionUID = -3330851033429007657L;\",\"日志：\",\"2018-07-01 17:23:39,335 [main] [org.apache.ibatis.transaction.jdbc.JdbcTransaction]-[DEBUG] Opening JDBC Connection 2018-07-01 17:23:39,664 [main] [org.apache.ibatis.datasource.pooled.PooledDataSource]-[DEBUG] Created connection 2092769598. 2018-07-01 17:23:39,665 [main] [com.zpc.mybatis.dao.UserMapper.queryUserById]-[DEBUG] ==> Preparing: select * from tb_user where id = ? 2018-07-01 17:23:39,712 [main] [com.zpc.mybatis.dao.UserMapper.queryUserById]-[DEBUG] ==> Parameters: 1(String) 2018-07-01 17:23:39,734 [main] [com.zpc.mybatis.dao.UserMapper.queryUserById]-[DEBUG] <== Total: 1 User{id='1', userName='bigGod222', password='123456', name='美女', age=20, sex=1, birthday='2018-07-01', created='2018-07-01 13:35:40.0', updated='2018-07-01 17:18:15.0'} 2018-07-01 17:23:39,743 [main] [org.apache.ibatis.transaction.jdbc.JdbcTransaction]-[DEBUG] Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@7cbd213e] 2018-07-01 17:23:39,744 [main] [org.apache.ibatis.datasource.pooled.PooledDataSource]-[DEBUG] Returned connection 2092769598 to pool. 2018-07-01 17:23:39,746 [main] [com.zpc.mybatis.dao.UserMapper]-[DEBUG] Cache Hit Ratio [com.zpc.mybatis.dao.UserMapper]: 0.5 User{id='1', userName='bigGod222', password='123456', name='美女', age=20, sex=1, birthday='2018-07-01', created='2018-07-01 13:35:40.0', updated='2018-07-01 17:18:15.0'}\",\"关闭二级缓存： 不开启，或者在全局的mybatis-config.xml 中去关闭二级缓存\",\"图片十七\",\"<settings> <!--开启驼峰匹配--> <setting name=\\\"mapUnderscoreToCamelCase\\\" value=\\\"true\\\"/> <!--开启二级缓存,全局总开关，这里关闭，mapper中开启了也没用--> <setting name=\\\"cacheEnabled\\\" value=\\\"false\\\"/> </settings>\",\"图片十八\"]},\"854\":{\"h\":\"12.高级查询\"},\"855\":{\"h\":\"12.1.表关系说明\",\"t\":[\"图片十九\",\"创建order表： CREATE TABLE tb_order ( id int(11) NOT NULL AUTO_INCREMENT, user_id int(11) DEFAULT NULL, order_number varchar(255) DEFAULT NULL, create datetime DEFAULT NULL, updated datetime DEFAULT NULL, PRIMARY KEY (id) ) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;\",\"public class Order { private Integer id; private Long userId; private String orderNumber; private Date created; private Date updated; }\",\"需求说明： \"]},\"856\":{\"h\":\"12.2.一对一查询\",\"t\":[\"方法一：核心思想扩展Order对象，来完成映射 新建OrderUser实体类继承Order：\",\"public class OrderUser extends Order { private String userName; private String password; private String name; private Integer age; private Integer sex; private Date birthday; private Date created; private Date updated; }\",\"OrderMapper接口：\",\"public interface OrderMapper { OrderUser queryOrderUserByOrderNumber(@Param(\\\"number\\\") String number); }\",\"配置OrderMapper：\",\" <mapper namespace=\\\"com.zpc.mybatis.dao.OrderMapper\\\"> <select id=\\\"queryOrderUserByOrderNumber\\\" resultType=\\\"com.zpc.mybatis.pojo.OrderUser\\\"> select * from tb_order o left join tb_user u on o.user_id=u.id where o.order_number = #{number} </select> </mapper>\",\"测试：\",\"@Test public void queryOrderUserByOrderNumber() throws Exception { OrderUser orderUser = orderMapper.queryOrderUserByOrderNumber(\\\"201807010001\\\"); System.out.println(orderUser); }\",\"方法二：面向对象的思想，在Order对象中添加User对象。\",\"在Order对象中添加User属性：\",\"public class Order { private Integer id; private Long userId; private String orderNumber; private Date created; private Date updated; private User user; }\",\"接口：\",\"/** * 根据订单号查询订单用户的信息 * @param number * @return */ Order queryOrderWithUserByOrderNumber(@Param(\\\"number\\\") String number);\",\"使用resultType不能完成自动映射，需要手动完成结果集映射resultMap：\",\" <resultMap id=\\\"OrderUserResultMap\\\" type=\\\"com.zpc.mybatis.pojo.Order\\\" autoMapping=\\\"true\\\"> <id column=\\\"id\\\" property=\\\"id\\\"/> <!--association:完成子对象的映射--> <!--property:子对象在父对象中的属性名--> <!--javaType:子对象的java类型--> <!--autoMapping:完成子对象的自动映射，若开启驼峰，则按驼峰匹配--> <association property=\\\"user\\\" javaType=\\\"com.zpc.mybatis.pojo.User\\\" autoMapping=\\\"true\\\"> <id column=\\\"user_id\\\" property=\\\"id\\\"/> </association> </resultMap> <select id=\\\"queryOrderWithUserByOrderNumber\\\" resultMap=\\\"OrderUserResultMap\\\"> select * from tb_order o left join tb_user u on o.user_id=u.id where o.order_number = #{number} </select>\",\"测试：\",\"@Test public void queryOrderWithUserByOrderNumber() throws Exception { Order order = orderMapper.queryOrderWithUserByOrderNumber(\\\"201807010001\\\"); System.out.println(order.getUser()); }\"]},\"857\":{\"h\":\"12.3.一对多查询\",\"t\":[\"一对多查询：查询订单，查询出下单人信息并且查询出订单详情。\",\"Order类：\",\"public class Order { private Integer id; private Long userId; private String orderNumber; private Date created; private Date updated; private User user; private List<OrderDetail> detailList; }\",\"public class OrderDetail { private Integer id; private Integer orderId; private Double totalPrice; private Integer status; }\",\"接口：\",\"/** * 根据订单号查询订单用户的信息及订单详情 * @param number * @return */ Order queryOrderWithUserAndDetailByOrderNumber(@Param(\\\"number\\\") String number);\",\"Mapper映射：\",\"<resultMap id=\\\"OrderUserDetailResultMap\\\" type=\\\"com.zpc.mybatis.pojo.Order\\\" autoMapping=\\\"true\\\"> <id column=\\\"id\\\" property=\\\"id\\\"/> <!--collection:定义子对象集合映射--> <!--association:完成子对象的映射--> <!--property:子对象在父对象中的属性名--> <!--javaType:子对象的java类型--> <!--autoMapping:完成子对象的自动映射，若开启驼峰，则按驼峰匹配--> <association property=\\\"user\\\" javaType=\\\"com.zpc.mybatis.pojo.User\\\" autoMapping=\\\"true\\\"> <id column=\\\"user_id\\\" property=\\\"id\\\"/> </association> <collection property=\\\"detailList\\\" javaType=\\\"List\\\" ofType=\\\"com.zpc.mybatis.pojo.OrderDetail\\\" autoMapping=\\\"true\\\"> <id column=\\\"id\\\" property=\\\"id\\\"/> </collection> </resultMap> <select id=\\\"queryOrderWithUserAndDetailByOrderNumber\\\" resultMap=\\\"OrderUserDetailResultMap\\\"> select * from tb_order o left join tb_user u on o.user_id=u.id left join tb_orderdetail od on o.id=od.order_id where o.order_number = #{number} </select>\",\"测试：\",\"@Test public void queryOrderWithUserAndDetailByOrderNumber() throws Exception { Order order = orderMapper.queryOrderWithUserAndDetailByOrderNumber(\\\"201807010001\\\"); System.out.println(order.getUser()); System.out.println(order.getDetailList()); }\"]},\"858\":{\"h\":\"12.4.多对多查询\",\"t\":[\"多对多查询：查询订单，查询出下单人信息并且查询出订单详情中的商品数据。\",\"OrderDetail类\",\"public class OrderDetail { private Integer id; private Integer orderId; private Double totalPrice; private Integer status; private Item item; } public class Item { private Integer id; private String itemName; private Float itemPrice; private String itemDetail; }\",\"接口：\",\"/** * 根据订单号查询订单用户的信息及订单详情及订单详情对应的商品信息 * @param number * @return */ Order queryOrderWithUserAndDetailItemByOrderNumber(@Param(\\\"number\\\") String number);\",\"Mapper配置：\",\"<resultMap id=\\\"OrderUserDetailItemResultMap\\\" type=\\\"com.zpc.mybatis.pojo.Order\\\" autoMapping=\\\"true\\\"> <id column=\\\"id\\\" property=\\\"id\\\"/> <association property=\\\"user\\\" javaType=\\\"com.zpc.mybatis.pojo.User\\\" autoMapping=\\\"true\\\"> <id column=\\\"user_id\\\" property=\\\"id\\\"/> </association> <collection property=\\\"detailList\\\" javaType=\\\"List\\\" ofType=\\\"com.zpc.mybatis.pojo.OrderDetail\\\" autoMapping=\\\"true\\\"> <id column=\\\"detail_id\\\" property=\\\"id\\\"/> <association property=\\\"item\\\" javaType=\\\"com.zpc.mybatis.pojo.Item\\\" autoMapping=\\\"true\\\"> <id column=\\\"item_id\\\" property=\\\"id\\\"/> </association> </collection> </resultMap> <select id=\\\"queryOrderWithUserAndDetailItemByOrderNumber\\\" resultMap=\\\"OrderUserDetailItemResultMap\\\"> select * ,od.id as detail_id from tb_order o left join tb_user u on o.user_id=u.id left join tb_orderdetail od on o.id=od.order_id left join tb_item i on od.item_id=i.id where o.order_number = #{number} </select>\",\"测试：\",\"@Test public void queryOrderWithUserAndDetailItemByOrderNumber() throws Exception { Order order = orderMapper.queryOrderWithUserAndDetailItemByOrderNumber(\\\"201807010001\\\"); System.out.println(order); System.out.println(order.getUser()); System.out.println(order.getDetailList()); }\",\"至此，目录结构如下：\",\"图片二十一\",\"数据库脚本： CREATE TABLE tb_order ( id int(11) NOT NULL AUTO_INCREMENT, user_id int(11) DEFAULT NULL, order_number varchar(255) DEFAULT NULL, create datetime DEFAULT NULL, updated datetime DEFAULT NULL, PRIMARY KEY (id) ) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8; INSERT INTO tb_order VALUES (‘1’, ‘2’, ‘201807010001’, ‘2018-07-01 19:38:35’, ‘2018-07-01 19:38:40’); CREATE TABLE tb_item ( id int(11) NOT NULL, itemName varchar(255) DEFAULT NULL, itemPrice decimal(10,2) DEFAULT NULL, itemDetail varchar(255) DEFAULT NULL, PRIMARY KEY (id) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; INSERT INTO tb_item VALUES (‘1’, ‘袜子’, ‘29.90’, ‘香香的袜子’); INSERT INTO tb_item VALUES (‘2’, ‘套子’, ‘99.99’, ‘冈本001’); CREATE TABLE tb_orderdetail ( id int(11) NOT NULL AUTO_INCREMENT, order_id int(11) DEFAULT NULL, total_price decimal(10,0) DEFAULT NULL, item_id int(11) DEFAULT NULL, status int(10) unsigned zerofill DEFAULT NULL COMMENT ‘0成功非0失败’, PRIMARY KEY (id) ) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8; INSERT INTO tb_orderdetail VALUES (‘1’, ‘1’, ‘10000’, ‘1’, ‘0000000001’); INSERT INTO tb_orderdetail VALUES (‘2’, ‘1’, ‘2000’, ‘2’, ‘0000000000’);\"]},\"859\":{\"h\":\"12.5.resultMap的继承\",\"t\":[\"图片二十二\"]},\"860\":{\"h\":\"12.6.高级查询的整理\",\"t\":[\"resutlType无法帮助我们自动的去完成映射，所以只有使用resultMap手动的进行映射。 type 结果集对应的数据类型 id 唯一标识，被引用的时候，进行指定。\",\"<resultMap type=\\\"Order\\\" id=\\\"orderUserLazyResultMap\\\"> <!—定义pojo中的单个对象的 property 定义对象的属性名， javaType 属性的类型， <association property=\\\"user\\\" javaType=\\\"User\\\" autoMapping=\\\"true\\\"> <id /> </association> <!—如果属性是集合使用collection ,javaType 集合的类型，ofType 表示集中的存储的元素类型 <collection property=\\\"details\\\" javaType=\\\"List\\\" ofType=\\\"OrderDetail\\\" autoMapping=\\\"true\\\"> <id /> </resultMap>\"]},\"861\":{\"h\":\"13.延迟加载\",\"t\":[\"后续补充\"]},\"862\":{\"h\":\"14.如果sql语句中出现’<’的解决方案\"},\"863\":{\"h\":\"14,1，使用xml中的字符实体\",\"t\":[\"23\",\"因为业务，需要在mybatis中，使用到大于号，小于号，所以就在SQL中直接使用了。\",\"SELECT * FROM test WHERE 1 = 1 AND start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE 可是，在执行时，总报错误： ```Error creating document instance. Cause: org.xml.sax.SAXParseException; lineNumber: 74; columnNumber: 17; ``元素内容必须由格式正确的字符数据或标记组成。 把 AND start_date >= CURRENT_DATE AND end_date <= CURRENT_DATE 去掉，就没有问题，所以确定是因为大于号，小于号引起的问题。\",\"于是就想到了特殊符号，于是用了转义字符把>和<替换掉，然后就没有问题了。\",\"SELECT * FROM test WHERE 1 = 1 AND start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE 案例：\",\"1.<if test=\\\"startDateTime!=null\\\"> and mm.ttime &gt; to_date(#{startDateTime},'yyyy-mm-dd hh24:mi:ss')</if> 2.<if test=\\\"endDateTime!=null\\\"> and mm.ttime &lt;= to_date(#{endDateTime},'yyyy-mm-dd hh24:mi:ss')</if>\"]},\"864\":{\"h\":\"14,2,使用\",\"t\":[\"案例1：\",\"<![CDATA[ and mm.ttime > to_date(#{startDateTime},'yyyy-mm-dd hh24:mi:ss') and mm.ttime <= to_date(#{endDateTime},'yyyy-mm-dd hh24:mi:ss') ]]>\",\"案例2：\",\"mapper文件示例代码 ：\",\"and (t1.status <![CDATA[ >= ]]> 1 and t1.status <![CDATA[ <= ]]> 2) 上述代码其实对应的sql： and (t1.status > =1 andt1.status <= 2)\",\"注意：\",\"使用 <![CDATA[ ]]> 标记的sql语句中的 <where> <if> 等标签不会被解析。\",\"CDATA 部分中的所有内容都会被解析器忽略。 CDATA 部分由 <![CDATA[\\\" 开始，由 \\\"]]> 结束\"]},\"865\":{\"c\":[\"mybatis\",\"java\"]},\"866\":{\"c\":[\"mybatis\",\"java\"]},\"867\":{\"h\":\"Spring\"},\"868\":{\"c\":[\"spring\",\"java\"]},\"869\":{\"c\":[\"spring\",\"java\"]},\"870\":{\"h\":\"手把手整合SSM框架\",\"t\":[\"如果看过前几篇文章，对 Spring 和 MyBatis 有了一定了解，一定想上手试试。这篇文章从 0 到 1，手把手整合 SSM (Spring、Spring MVC、MyBatis)。\",\"本篇是代码篇，在 PC 端浏览更佳，源码在文末\",\"[toc]\"]},\"871\":{\"h\":\"开发环境\",\"t\":[\"idea\",\"MySql5.x\",\"jdk8\",\"maven\",\"对应的技术入门在 公众号 历史文章 都可以找到\"]},\"872\":{\"h\":\"目录\",\"t\":[\"目录包括 main、resources、mapper、webapp，不一一介绍，不熟悉查看前面文章。\"]},\"873\":{\"h\":\"环境搭建\"},\"874\":{\"h\":\"新建项目\",\"t\":[\"这里使用的是 IDEA 编辑器，新建一个 Maven 工程，选择 web 项目。\"]},\"875\":{\"h\":\"导入依赖\",\"t\":[\"使用 Maven 管理项目 jar ，只需要在 pom.xml 加如相关依赖即可。\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <groupId>javapub.rodert.github</groupId> <artifactId>ssm_helloword_web</artifactId> <version>1.0-SNAPSHOT</version> <packaging>war</packaging> <url></url> <!-- 源码：https://github.com/Rodert/JavaPub--> <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <spring.version>4.3.6.RELEASE</spring.version> </properties> <dependencies> <!-- 单元测试 --> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.12</version> </dependency> <!-- 1.日志 --> <!-- 实现slf4j接口并整合 --> <dependency> <groupId>ch.qos.logback</groupId> <artifactId>logback-classic</artifactId> <version>1.1.1</version> </dependency> <!-- 2.数据库 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>5.1.37</version> <scope>runtime</scope> </dependency> <dependency> <groupId>c3p0</groupId> <artifactId>c3p0</artifactId> <version>0.9.1.2</version> </dependency> <!-- DAO: MyBatis --> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.3.0</version> </dependency> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis-spring</artifactId> <version>1.2.3</version> </dependency> <!-- 3.Servlet web --> <dependency> <groupId>taglibs</groupId> <artifactId>standard</artifactId> <version>1.1.2</version> </dependency> <dependency> <groupId>jstl</groupId> <artifactId>jstl</artifactId> <version>1.2</version> </dependency> <dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> <version>2.5.4</version> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> <version>3.1.0</version> </dependency> <!-- 4.Spring --> <!-- 1)Spring核心 --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-core</artifactId> <version>${spring.version}</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-beans</artifactId> <version>${spring.version}</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>${spring.version}</version> </dependency> <!-- 2)Spring DAO层 --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> <version>${spring.version}</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-tx</artifactId> <version>${spring.version}</version> </dependency> <!-- 3)Spring web --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-web</artifactId> <version>${spring.version}</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-webmvc</artifactId> <version>${spring.version}</version> </dependency> <!-- 4)Spring test --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-test</artifactId> <version>${spring.version}</version> </dependency> <!-- redis客户端:Jedis --> <dependency> <groupId>redis.clients</groupId> <artifactId>jedis</artifactId> <version>2.7.3</version> </dependency> <dependency> <groupId>com.dyuproject.protostuff</groupId> <artifactId>protostuff-core</artifactId> <version>1.0.8</version> </dependency> <dependency> <groupId>com.dyuproject.protostuff</groupId> <artifactId>protostuff-runtime</artifactId> <version>1.0.8</version> </dependency> <!-- Map工具类 --> <dependency> <groupId>commons-collections</groupId> <artifactId>commons-collections</artifactId> <version>3.2</version> </dependency> <!--注解--> <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.12</version> <scope>provided</scope> </dependency> </dependencies> <build> <finalName>ssm_helloword_web</finalName> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <configuration> <source>7</source> <target>7</target> </configuration> </plugin> </plugins> </build> </project> <!-- 源码：https://github.com/Rodert/JavaPub-->\"]},\"876\":{\"h\":\"编码\"},\"877\":{\"h\":\"配置文件\"},\"878\":{\"h\":\"spring-dao.xml\",\"t\":[\"先在spring文件夹里新建spring-dao.xml文件，我们这里分三层，分别是dao service web。\",\"加载数据库配置\",\"配置数据库连接池\",\"配置 SqlSessionFactory 对象（MyBatis）\",\"配置扫描 dao 层接口，动态代理实现 Dao 实现类，执行 sql 写在 xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\\\"> <!-- 配置整合mybatis过程 --> <!-- 1.配置数据库相关参数properties的属性：${url} --> <context:property-placeholder location=\\\"classpath:jdbc.properties\\\" /> <!-- 2.数据库连接池 --> <bean id=\\\"dataSource\\\" class=\\\"com.mchange.v2.c3p0.ComboPooledDataSource\\\"> <!-- 配置连接池属性 --> <property name=\\\"driverClass\\\" value=\\\"${jdbc.driver}\\\" /> <property name=\\\"jdbcUrl\\\" value=\\\"${jdbc.url}\\\" /> <property name=\\\"user\\\" value=\\\"${jdbc.username}\\\" /> <property name=\\\"password\\\" value=\\\"${jdbc.password}\\\" /> <!-- c3p0连接池的私有属性 --> <property name=\\\"maxPoolSize\\\" value=\\\"30\\\" /> <property name=\\\"minPoolSize\\\" value=\\\"10\\\" /> <!-- 关闭连接后不自动commit --> <property name=\\\"autoCommitOnClose\\\" value=\\\"false\\\" /> <!-- 获取连接超时时间 --> <property name=\\\"checkoutTimeout\\\" value=\\\"10000\\\" /> <!-- 当获取连接失败重试次数 --> <property name=\\\"acquireRetryAttempts\\\" value=\\\"2\\\" /> </bean> <!-- 3.配置SqlSessionFactory对象 --> <bean id=\\\"sqlSessionFactory\\\" class=\\\"org.mybatis.spring.SqlSessionFactoryBean\\\"> <!-- 注入数据库连接池 --> <property name=\\\"dataSource\\\" ref=\\\"dataSource\\\" /> <!-- 配置MyBaties全局配置文件:mybatis-config.xml --> <property name=\\\"configLocation\\\" value=\\\"classpath:Mybatis-config.xml\\\" /> <!-- 扫描entity包 使用别名 --> <property name=\\\"typeAliasesPackage\\\" value=\\\"javapub.rodert.github.entity\\\" /> <!-- 扫描sql配置文件:mapper需要的xml文件 --> <property name=\\\"mapperLocations\\\" value=\\\"classpath:mapper/*.xml\\\" /> </bean> <!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 --> <bean class=\\\"org.mybatis.spring.mapper.MapperScannerConfigurer\\\"> <!-- 注入sqlSessionFactory --> <property name=\\\"sqlSessionFactoryBeanName\\\" value=\\\"sqlSessionFactory\\\" /> <!-- 给出需要扫描Dao接口包 --> <property name=\\\"basePackage\\\" value=\\\"javapub.rodert.github.dao\\\" /> </bean> </beans>\"]},\"879\":{\"h\":\"jdbc.properties\",\"t\":[\"数据库配置，在 resources 文件夹里新建一个 jdbc.properties 文件，注意自己的密码。\",\"jdbc.driver=com.mysql.jdbc.Driver jdbc.url=jdbc:mysql://localhost:3306/ssm1?useUnicode=true&characterEncoding=utf8 jdbc.username=root jdbc.password=\"]},\"880\":{\"h\":\"mybatis-config.xml\",\"t\":[\"MyBatis 核心文件，在recources文件夹里新建mybatis-config.xml文件。\",\"使用自增主键\",\"使用列别名\",\"开启驼峰命名转换 create_time -> createTime\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE configuration PUBLIC \\\"-//mybatis.org//DTD Config 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-config.dtd\\\"> <configuration> <!-- 配置全局属性 --> <settings> <!-- 使用jdbc的getGeneratedKeys获取数据库自增主键值 --> <setting name=\\\"useGeneratedKeys\\\" value=\\\"true\\\" /> <!-- 使用列别名替换列名 默认:true --> <setting name=\\\"useColumnLabel\\\" value=\\\"true\\\" /> <!-- 开启驼峰命名转换:Table{create_time} -> Entity{createTime} --> <setting name=\\\"mapUnderscoreToCamelCase\\\" value=\\\"true\\\" /> </settings> </configuration>\"]},\"881\":{\"h\":\"spring-service.xml\",\"t\":[\"在 spring 文件夹里新建 spring-service.xml 文件。\",\"扫描 service 包所有注解 @Service\",\"配置事务管理器，把事务管理交由 spring 来完成\",\"基于注解的 声明式事务，可以直接在方法上 @Transaction\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:tx=\\\"http://www.springframework.org/schema/tx\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd\\\"> <!-- 扫描service包下所有使用注解的类型 --> <context:component-scan base-package=\\\"javapub.rodert.github.service\\\" /> <!-- 配置事务管理器 --> <bean id=\\\"transactionManager\\\" class=\\\"org.springframework.jdbc.datasource.DataSourceTransactionManager\\\"> <!-- 注入数据库连接池 --> <property name=\\\"dataSource\\\" ref=\\\"dataSource\\\" /> </bean> <!-- 配置基于注解的声明式事务 --> <tx:annotation-driven transaction-manager=\\\"transactionManager\\\" /> </beans>\"]},\"882\":{\"h\":\"spring-web.xml\",\"t\":[\"web 层，在 spring 文件夹里新建 spring-web.xml 文件。\",\"开启SpringMVC注解模式，可以使用@RequestMapping，@PathVariable，@ResponseBody等\",\"对静态资源处理，如js，css，jpg等\",\"配置jsp 显示ViewResolver，及渲染后的 JSP\",\"扫描web层 @Controller\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:mvc=\\\"http://www.springframework.org/schema/mvc\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd\\\"> <!-- 配置SpringMVC --> <!-- 1.开启SpringMVC注解模式 --> <!-- 简化配置： (1)自动注册DefaultAnootationHandlerMapping,AnotationMethodHandlerAdapter (2)提供一些列：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat, xml,json默认读写支持 --> <mvc:annotation-driven /> <!-- 2.静态资源默认servlet配置 (1)加入对静态资源的处理：js,gif,png (2)允许使用\\\"/\\\"做整体映射 --> <mvc:default-servlet-handler/> <!-- 3.配置jsp 显示ViewResolver --> <bean class=\\\"org.springframework.web.servlet.view.InternalResourceViewResolver\\\"> <property name=\\\"viewClass\\\" value=\\\"org.springframework.web.servlet.view.JstlView\\\" /> <!-- <property name=\\\"contentType\\\" value=\\\"text/html\\\"/>--> <property name=\\\"prefix\\\" value=\\\"/WEB-INF/jsp/\\\" /> <property name=\\\"suffix\\\" value=\\\".jsp\\\" /> </bean> <!-- 4.扫描web相关的bean --> <context:component-scan base-package=\\\"javapub.rodert.github.web\\\" /> </beans>\"]},\"883\":{\"h\":\"web.xml\",\"t\":[\"修改 web.xml 文件了，它在 webapp 的 WEB-INF 下。也可以在这里配置过滤器、监听器等。\",\"<web-app xmlns=\\\"http://xmlns.jcp.org/xml/ns/javaee\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\\\" version=\\\"3.1\\\" metadata-complete=\\\"true\\\"> <!-- 如果是用mvn命令生成的xml，需要修改servlet版本为3.1 --> <!-- 配置DispatcherServlet --> <servlet> <servlet-name>dispatcherServlet</servlet-name> <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class> <!-- 配置springMVC需要加载的配置文件 spring-dao.xml,spring-service.xml,spring-web.xml Mybatis - > spring -> springmvc --> <init-param> <param-name>contextConfigLocation</param-name> <param-value>classpath:spring/spring-*.xml</param-value> </init-param> <load-on-startup>1</load-on-startup> </servlet> <servlet-mapping> <servlet-name>dispatcherServlet</servlet-name> <!-- 默认匹配所有的请求 --> <url-pattern>/</url-pattern> </servlet-mapping> <welcome-file-list> <welcome-file>index.jsp</welcome-file> </welcome-file-list> </web-app>\"]},\"884\":{\"h\":\"日志\",\"t\":[\"配置一些简单的日志，使用 logback ，在 resources 文件夹里新建logback.xml 文件。\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <configuration debug=\\\"true\\\"> <appender name=\\\"STDOUT\\\" class=\\\"ch.qos.logback.core.ConsoleAppender\\\"> <!-- encoders are by default assigned the type ch.qos.logback.classic.encoder.PatternLayoutEncoder --> <encoder> <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern> </encoder> </appender> <root level=\\\"debug\\\"> <appender-ref ref=\\\"STDOUT\\\" /> </root> </configuration>\"]},\"885\":{\"h\":\"配置说明\",\"t\":[\"以上配置是整合 SSM 的基础配置，目录结构如图所示：\"]},\"886\":{\"h\":\"SSM实例-图书管理系统\"},\"887\":{\"h\":\"sql\",\"t\":[\"以上部分整个 SSM 框架就已经搭建好了，下面是一个 Demo ，供参考。\",\"新建俩张表，图书表 book 和 预约图书表 appointment，并初始化数据。\",\"/* Navicat MySQL Data Transfer Source Server : localhost Source Server Version : 50716 Source Host : localhost:3306 Source Database : ssm1 Target Server Type : MYSQL Target Server Version : 50716 File Encoding : 65001 Date: 2020-07-12 16:50:43 */ SET FOREIGN_KEY_CHECKS=0; -- ---------------------------- -- Table structure for appointment -- ---------------------------- DROP TABLE IF EXISTS `appointment`; CREATE TABLE `appointment` ( `book_id` bigint(20) NOT NULL COMMENT '图书ID', `student_id` bigint(20) NOT NULL COMMENT '学号', `appoint_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '预约时间', PRIMARY KEY (`book_id`,`student_id`), KEY `idx_appoint_time` (`appoint_time`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='预约图书表'; -- ---------------------------- -- Records of appointment -- ---------------------------- -- ---------------------------- -- Table structure for book -- ---------------------------- DROP TABLE IF EXISTS `book`; CREATE TABLE `book` ( `book_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '图书ID', `name` varchar(100) NOT NULL COMMENT '图书名称', `number` int(11) NOT NULL COMMENT '馆藏数量', PRIMARY KEY (`book_id`) ) ENGINE=InnoDB AUTO_INCREMENT=1004 DEFAULT CHARSET=utf8 COMMENT='图书表'; -- ---------------------------- -- Records of book -- ---------------------------- INSERT INTO `book` VALUES ('2000', 'Java程序设计', '20'); INSERT INTO `book` VALUES ('2001', '数据结构', '7'); INSERT INTO `book` VALUES ('2002', '设计模式', '20'); INSERT INTO `book` VALUES ('2003', '编译原理', '20');\"]},\"888\":{\"h\":\"实体\",\"t\":[\"在 entity 包下新建实体 Book 和 Appointment\",\"Book.java\",\"package javapub.rodert.github.entity; import lombok.Getter; import lombok.Setter; import lombok.ToString; /** * @author wangshiyu rodert * @date 2020/7/6 20:58 * @description * * @Data 注解，简化代码，自动添加get set toSting 方法 * @Getter * @Setter * @ToString */ @Getter @Setter @ToString public class Book { private long bookId;// 图书ID private String name;// 图书名称 private int number;// 馆藏数量 // 省略构造方法，getter和setter方法，toString方法 }\",\"Appointment.java\",\"package javapub.rodert.github.entity; /** * @author wangshiyu rodert * @date 2020/7/6 20:58 * @description */ import lombok.Data; import lombok.Getter; import lombok.Setter; import lombok.ToString; import java.util.Date; /** * 预约图书实体 * @Data 注解，简化代码，自动添加get set toSting 方法 */ @Data public class Appointment { private long bookId;// 图书ID private long studentId;// 学号 private Date appointTime;// 预约时间 // 多对一的复合属性 private Book book;// 图书实体 // 省略构造方法，getter和setter方法，toString方法 }\"]},\"889\":{\"h\":\"dao接口\",\"t\":[\"在dao包新建接口 BookDao.java 和 Appointment.java\",\"BookDao.java\",\"package javapub.rodert.github.dao; /** * @author wangshiyu rodert * @date 2020/7/6 21:01 * @description */ import javapub.rodert.github.entity.Book; import org.apache.ibatis.annotations.Param; import java.util.List; public interface BookDao { /** * 通过ID查询单本图书 * * @param id * @return */ Book queryById(long id); /** * 查询所有图书 * * @param offset 查询起始位置 * @param limit 查询条数 * @return */ List<Book> queryAll(@Param(\\\"offset\\\") int offset, @Param(\\\"limit\\\") int limit); /** * 减少馆藏数量 * * @param bookId * @return 如果影响行数等于>1，表示更新的记录行数 */ int reduceNumber(long bookId); }\",\"AppointmentDao.java\",\"package javapub.rodert.github.dao; /** * @author wangshiyu rodert * @date 2020/7/6 21:01 * @description */ import javapub.rodert.github.entity.Appointment; import org.apache.ibatis.annotations.Param; public interface AppointmentDao { /** * 插入预约图书记录 * * @param bookId * @param studentId * @return 插入的行数 */ int insertAppointment(@Param(\\\"bookId\\\") long bookId, @Param(\\\"studentId\\\") long studentId); /** * 通过主键查询预约图书记录，并且携带图书实体 * * @param bookId * @param studentId * @return */ Appointment queryByKeyWithBook(@Param(\\\"bookId\\\") long bookId, @Param(\\\"studentId\\\") long studentId); }\",\"提示：这里为什么要给方法的参数添加 @Param注解呢？是因为该方法有两个或以上的参数，一定要加，不然 mybatis 识别不了。上面的 BookDao 接口的 queryById 方法和 reduceNumber 方法只有一个参数 book_id ，所以可以不用加 @Param 注解。\"]},\"890\":{\"h\":\"dao接口xml\",\"t\":[\"这里不需要写 dao接口 的实现类，mybatis会帮我们动态实现，上面我们已经在 spring-dao.xml 配置了动态扫描。现在需要编写相应的 mapper。 在 mapper 目录里新建两个文件 BookDao.xml 和 AppointmentDao.xml ，分别对应上面两个dao接口。\",\"BookDao.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <mapper namespace=\\\"javapub.rodert.github.dao.BookDao\\\"> <!-- 目的：为dao接口方法提供sql语句配置 --> <select id=\\\"queryById\\\" resultType=\\\"Book\\\" parameterType=\\\"long\\\"> <!-- 具体的sql --> SELECT book_id, name, number FROM book WHERE book_id = #{bookId} </select> <select id=\\\"queryAll\\\" resultType=\\\"Book\\\"> SELECT book_id, name, number FROM book ORDER BY book_id LIMIT #{offset}, #{limit} </select> <update id=\\\"reduceNumber\\\"> UPDATE book SET number = number - 1 WHERE book_id = #{bookId} AND number > 0 </update> </mapper>\",\"AppointmentDao.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <mapper namespace=\\\"javapub.rodert.github.dao.AppointmentDao\\\"> <insert id=\\\"insertAppointment\\\"> <!-- ignore 主键冲突，报错 --> INSERT ignore INTO appointment (book_id, student_id) VALUES (#{bookId}, #{studentId}) </insert> <select id=\\\"queryByKeyWithBook\\\" resultType=\\\"Appointment\\\"> <!-- 如何告诉MyBatis把结果映射到Appointment同时映射book属性 --> <!-- 可以自由控制SQL --> SELECT a.book_id, a.student_id, a.appoint_time, b.book_id \\\"book.book_id\\\", b.`name` \\\"book.name\\\", b.number \\\"book.number\\\" FROM appointment a INNER JOIN book b ON a.book_id = b.book_id WHERE a.book_id = #{bookId} AND a.student_id = #{studentId} </select> </mapper>\",\"mapper 说明：namespace 是 xml 对应的接口全名，select 和 update 中的 id 对应方法名（唯一），resultType 是返回值类型，parameterType 是参数类型（这个其实可选），#{...} 中填写的是方法的参数\"]},\"891\":{\"h\":\"dao接口测试\",\"t\":[\"现在的写法是从数据库层向前（web）写，现在测试一下 dao 接口，编写测试类。\",\"因为每次测试都要加载配置文件，所有抽离一个类（BaseTest），每次测试方法都继承它。\",\"BaseTest.java\",\"package javapub.rodert.github; /** * @author wangshiyu rodert * @date 2020/7/6 21:07 * @description */ import org.junit.runner.RunWith; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; /** * 配置spring和junit整合，junit启动时加载springIOC容器 spring-test,junit */ @RunWith(SpringJUnit4ClassRunner.class) // 告诉junit spring配置文件 @ContextConfiguration({ \\\"classpath:spring/spring-dao.xml\\\", \\\"classpath:spring/spring-service.xml\\\" }) public class BaseTest { }\",\"新建 BookDaoTest.java 和 AppointmentDaoTest.java 两个 dao 测试文件。\",\"BookDao.java\",\"package javapub.rodert.github.dao; /** * @author wangshiyu rodert * @date 2020/7/6 21:08 * @description */ import javapub.rodert.github.BaseTest; import javapub.rodert.github.entity.Book; import org.junit.Test; import org.springframework.beans.factory.annotation.Autowired; import java.util.List; public class BookDaoTest extends BaseTest { @Autowired private BookDao bookDao; @Test public void testQueryById() throws Exception { long bookId = 1000; Book book = bookDao.queryById(bookId); System.out.println(book); } @Test public void testQueryAll() throws Exception { List<Book> books = bookDao.queryAll(0, 4); for (Book book : books) { System.out.println(book); } } @Test public void testReduceNumber() throws Exception { long bookId = 1000; int update = bookDao.reduceNumber(bookId); System.out.println(\\\"update=\\\" + update); } }\",\"AppointmentDaoTest.java\",\"package javapub.rodert.github.dao; /** * @author wangshiyu rodert * @date 2020/7/6 21:18 * @description */ import javapub.rodert.github.BaseTest; import javapub.rodert.github.entity.Appointment; import org.junit.Test; import org.springframework.beans.factory.annotation.Autowired; public class AppointmentDaoTest extends BaseTest { @Autowired private AppointmentDao appointmentDao; @Test public void testInsertAppointment() throws Exception { long bookId = 1000; long studentId = 12345678910L; int insert = appointmentDao.insertAppointment(bookId, studentId); System.out.println(\\\"insert=\\\" + insert); } @Test public void testQueryByKeyWithBook() throws Exception { long bookId = 1000; long studentId = 12345678910L; Appointment appointment = appointmentDao.queryByKeyWithBook(bookId, studentId); System.out.println(appointment); System.out.println(appointment.getBook()); } }\",\"BookDaoTest.java -- > testQueryById()\",\"测试方法都验证过，没有问题，不一一测试了\"]},\"892\":{\"h\":\"业务层-结果集封装\",\"t\":[\"到这里，我们的 dao 层，及数据库接口操作都没有问题，下面开始业务层编写。\",\"如果你有实战项目经验，那一定会发现，对于后端接口，我们都会定义一个统一的返回格式，及定义一个返回标准方便前端解析，如下：\",\"{ \\\"code\\\":200, \\\"message\\\":\\\"成功\\\", \\\"result\\\":{}, \\\"isSuccess\\\":true }\",\"开始写我们的代码，新建枚举类，用来定义预约业务的数据字典。如果不太明白，先看代码，后面在 JavaPub 微信公众号文章索引中查找对应文章。\",\"新建一个包叫 enums，在里面新建一个枚举类 AppointStateEnum.java。\",\"AppointStateEnum.java\",\"package javapub.rodert.github.enums; /** * @author wangshiyu rodert * @date 2020/7/6 21:20 * @description */ /** * 使用枚举表述常量数据字典 */ public enum AppointStateEnum { SUCCESS(1, \\\"预约成功\\\"), NO_NUMBER(0, \\\"库存不足\\\"), REPEAT_APPOINT(-1, \\\"重复预约\\\"), INNER_ERROR(-2, \\\"系统异常\\\"); private int state; private String stateInfo; private AppointStateEnum(int state, String stateInfo) { this.state = state; this.stateInfo = stateInfo; } public int getState() { return state; } public String getStateInfo() { return stateInfo; } public static AppointStateEnum stateOf(int index) { for (AppointStateEnum state : values()) { if (state.getState() == index) { return state; } } return null; } }\",\"在 dto 包下新建 AppointExecution.java 用来存储我们执行预约操作的返回结果。\",\"AppointExecution.java\",\"package javapub.rodert.github.dto; /** * @author wangshiyu rodert * @date 2020/7/7 16:26 * @description */ import javapub.rodert.github.entity.Appointment; import javapub.rodert.github.enums.AppointStateEnum; import lombok.Data; /** * 封装预约执行后结果 */ @Data public class AppointExecution { // 图书ID private long bookId; // 秒杀预约结果状态 private int state; // 状态标识 private String stateInfo; // 预约成功对象 private Appointment appointment; public AppointExecution() { } // 预约失败的构造器 public AppointExecution(long bookId, AppointStateEnum stateEnum) { this.bookId = bookId; this.state = stateEnum.getState(); this.stateInfo = stateEnum.getStateInfo(); } // 预约成功的构造器 public AppointExecution(long bookId, AppointStateEnum stateEnum, Appointment appointment) { this.bookId = bookId; this.state = stateEnum.getState(); this.stateInfo = stateEnum.getStateInfo(); this.appointment = appointment; } // 省略getter和setter方法，toString方法 }\",\"在 exception 包下新建三个文件\",\"NoNumberException.javaRepeatAppointException.javaAppointException.java\",\"预约业务异常类（都需要继承 RuntimeException ---运行时异常类），分别是无库存异常、重复预约异常、预约未知错误异常，用于业务层非成功情况下的返回（即成功返回结果，失败抛出异常）。为事务做准备。\",\"AppointException.java\",\"package javapub.rodert.github.exception; /** * @author wangshiyu rodert * @date 2020/7/7 16:31 * @description */ /** * 预约业务异常 */ public class AppointException extends RuntimeException { public AppointException(String message) { super(message); } public AppointException(String message, Throwable cause) { super(message, cause); } }\",\"NoNumberException.java\",\"/** * @author wangshiyu rodert * @date 2020/7/7 16:30 * @description */ package javapub.rodert.github.exception; /** * 库存不足异常 */ public class NoNumberException extends RuntimeException { public NoNumberException(String message) { super(message); } public NoNumberException(String message, Throwable cause) { super(message, cause); } }\",\"RepeatAppointException.java\",\" /** * @author wangshiyu rodert * @date 2020/7/7 16:31 * @description */ package javapub.rodert.github.exception; /** * 重复预约异常 */ public class RepeatAppointException extends RuntimeException { public RepeatAppointException(String message) { super(message); } public RepeatAppointException(String message, Throwable cause) { super(message, cause); } }\"]},\"893\":{\"h\":\"Service 业务接口代码\",\"t\":[\"在service包下新建BookService.java图书业务接口。\",\"BookService.java\",\" /** * @author wangshiyu rodert * @date 2020/7/7 16:32 * @description */ package javapub.rodert.github.service; import javapub.rodert.github.dto.AppointExecution; import javapub.rodert.github.entity.Book; import java.util.List; /** * 业务接口：站在\\\"使用者\\\"角度设计接口 三个方面：方法定义粒度，参数，返回类型（return 类型/异常） */ public interface BookService { /** * 查询一本图书 * * @param bookId * @return */ Book getById(long bookId); /** * 查询所有图书 * * @return */ List<Book> getList(); /** * 预约图书 * * @param bookId * @param studentId * @return */ AppointExecution appoint(long bookId, long studentId); }\",\"在 service.impl 包下新建 BookServiceImpl.java 使用 BookService 接口，并实现里面的方法。\",\"BookServiceImpl.java\",\" /** * @author wangshiyu rodert * @date 2020/7/7 16:39 * @description */ package javapub.rodert.github.service.impl; import javapub.rodert.github.dao.AppointmentDao; import javapub.rodert.github.dao.BookDao; import javapub.rodert.github.dto.AppointExecution; import javapub.rodert.github.entity.Appointment; import javapub.rodert.github.entity.Book; import javapub.rodert.github.enums.AppointStateEnum; import javapub.rodert.github.exception.AppointException; import javapub.rodert.github.exception.NoNumberException; import javapub.rodert.github.exception.RepeatAppointException; import javapub.rodert.github.service.BookService; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import java.util.List; @Service public class BookServiceImpl implements BookService { private Logger logger = LoggerFactory.getLogger(this.getClass()); // 注入Service依赖 @Autowired private BookDao bookDao; @Autowired private AppointmentDao appointmentDao; @Override public Book getById(long bookId) { return bookDao.queryById(bookId); } @Override public List<Book> getList() { return bookDao.queryAll(0, 1000); } @Override @Transactional /** * 使用注解控制事务方法的优点： * 1.开发团队达成一致约定，明确标注事务方法的编程风格 * 2.保证事务方法的执行时间尽可能短，不要穿插其他网络操作，RPC/HTTP请求或者剥离到事务方法外部 * 3.不是所有的方法都需要事务，如只有一条修改操作，只读操作不需要事务控制 */ public AppointExecution appoint(long bookId, long studentId) { try { // 减库存 int update = bookDao.reduceNumber(bookId); if (update <= 0) {// 库存不足 //return new AppointExecution(bookId, AppointStateEnum.NO_NUMBER);//错误写法 throw new NoNumberException(\\\"no number\\\");// 抛出异常，保证触发事务执行 } else { // 执行预约操作 int insert = appointmentDao.insertAppointment(bookId, studentId); if (insert <= 0) {// 重复预约 //return new AppointExecution(bookId, AppointStateEnum.REPEAT_APPOINT);//错误写法 throw new RepeatAppointException(\\\"repeat appoint\\\"); } else {// 预约成功 Appointment appointment = appointmentDao.queryByKeyWithBook(bookId, studentId); return new AppointExecution(bookId, AppointStateEnum.SUCCESS, appointment); } } // 要先于catch Exception异常前先catch住再抛出，不然自定义的异常也会被转换为AppointException，导致控制层无法具体识别是哪个异常 } catch (NoNumberException | RepeatAppointException e1) { throw e1; } catch (Exception e) { logger.error(e.getMessage(), e); // 所有编译期异常转换为运行期异常 //return new AppointExecution(bookId, AppointStateEnum.INNER_ERROR);//错误写法 throw new AppointException(\\\"appoint inner error:\\\" + e.getMessage()); } } }\",\"实现类使用了我们上边定义的异常方法 RepeatAppointException ，用于业务层非成功情况下的返回（即成功返回结果，失败抛出异常）。触发事务。\",\"测试一下业务层代码，这里演示预约图书业务。\",\"BookServiceImplTest.java\",\" /** * @author wangshiyu rodert * @date 2020/7/7 16:40 * @description */ package javapub.rodert.github.service.impl; import javapub.rodert.github.BaseTest; import javapub.rodert.github.dto.AppointExecution; import javapub.rodert.github.service.BookService; import org.junit.Test; import org.springframework.beans.factory.annotation.Autowired; public class BookServiceImplTest extends BaseTest { @Autowired private BookService bookService; @Test public void testAppoint() throws Exception { long bookId = 1001; long studentId = 12345678910L; AppointExecution execution = bookService.appoint(bookId, studentId); System.out.println(execution); } }\",\"测试结果：\",\"首次执行是“预约成功”，如果再次执行的话，应该会出现“重复预约”，至此，我们所有的后台代码都通过单元测试啦~~ 是不是很开心~\",\"咱们还需要在dto包里新建一个封装json返回结果的类Result.java，设计成泛型。\",\"Result.java\",\"package javapub.rodert.github.dto; /** * @author wangshiyu rodert * @date 2020/7/7 21:00 * @description */ import lombok.Data; /** * 封装json对象，所有返回结果都使用它 */ @Data public class Result<T> { private boolean success;// 是否成功标志 private T data;// 成功时返回的数据 private String error;// 错误信息 public Result() { } // 成功时的构造器 public Result(boolean success, T data) { this.success = success; this.data = data; } // 错误时的构造器 public Result(boolean success, String error) { this.success = success; this.error = error; } // 省略getter和setter方法 使用注解代替 }\"]},\"894\":{\"h\":\"web层\",\"t\":[\"web 层，也就是 controller 层，我们在web包下新建BookController.java文件。\",\"BookController.java\",\"package javapub.rodert.github.web; /** * @author wangshiyu rodert * @date 2020/7/7 21:05 * @description */ import javapub.rodert.github.dto.AppointExecution; import javapub.rodert.github.dto.Result; import javapub.rodert.github.entity.Book; import javapub.rodert.github.enums.AppointStateEnum; import javapub.rodert.github.exception.NoNumberException; import javapub.rodert.github.exception.RepeatAppointException; import javapub.rodert.github.service.BookService; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.*; import org.springframework.web.servlet.ModelAndView; import java.util.List; @RestController @RequestMapping(\\\"/book\\\") // url:/模块/资源/{id}/细分 /seckill/list public class BookController { private Logger logger = LoggerFactory.getLogger(this.getClass()); @Autowired private BookService bookService; @RequestMapping(value = \\\"/test\\\") public ModelAndView test(){ ModelAndView modelAndView = new ModelAndView(); modelAndView.setViewName(\\\"book/test\\\"); modelAndView.addObject(\\\"key\\\",\\\"welcome javaPub\\\"); return modelAndView; } @RequestMapping(value = \\\"/list\\\", method = RequestMethod.GET) private String list(Model model) { List<Book> list = bookService.getList(); model.addAttribute(\\\"list\\\", list); // list.jsp + model = ModelAndView return \\\"list\\\";// WEB-INF/jsp/\\\"list\\\".jsp } @RequestMapping(value = \\\"/{bookId}/detail\\\", method = RequestMethod.GET) private String detail(@PathVariable(\\\"bookId\\\") Long bookId, Model model) { if (bookId == null) { return \\\"redirect:/book/list\\\"; } Book book = bookService.getById(bookId); if (book == null) { return \\\"forward:/book/list\\\"; } model.addAttribute(\\\"book\\\", book); return \\\"detail\\\"; } //ajax json //method = RequestMethod.POST, @RequestMapping(value = \\\"/{bookId}/appoint\\\", produces = { \\\"application/json; charset=utf-8\\\" }) @ResponseBody private Result<AppointExecution> appoint(@PathVariable(\\\"bookId\\\") Long bookId, @RequestParam(\\\"studentId\\\") Long studentId) { if (studentId == null || studentId.equals(\\\"\\\")) { return new Result<>(false, \\\"学号不能为空\\\"); } //AppointExecution execution = bookService.appoint(bookId, studentId);//错误写法，不能统一返回，要处理异常（失败）情况 AppointExecution execution = null; try { execution = bookService.appoint(bookId, studentId); } catch (NoNumberException e1) { execution = new AppointExecution(bookId, AppointStateEnum.NO_NUMBER); } catch (RepeatAppointException e2) { execution = new AppointExecution(bookId, AppointStateEnum.REPEAT_APPOINT); } catch (Exception e) { execution = new AppointExecution(bookId, AppointStateEnum.INNER_ERROR); } return new Result<AppointExecution>(true, execution); } }\",\"目前大多项目都是前后端分离，我们作为服务端，一般和前端通过接口数据交互（json），像接口方法 appoint ，应该添加 @ResponseBody 注解。 测试 controller --> appoint 方法可以通过 curl ，如：\",\"curl -H “Accept: application/json; charset=utf-8” -d “studentId=1234567890” localhost:8080/book/1003/appoint\"]},\"895\":{\"h\":\"运行项目\",\"t\":[\"现在整个项目全部完成，配置tomcat，通过左上角引入 tomcat ，选择我们的项目 ssm。\",\"启动成功后：\",\"这里对前端代码只写较少部分，具体可参考 BookController --> book/test 接口，有需要帮助请留言。\",\"BookController.java --> book/test\",\" @RequestMapping(value = \\\"/test\\\") public ModelAndView test(){ ModelAndView modelAndView = new ModelAndView(); modelAndView.setViewName(\\\"book/test\\\"); modelAndView.addObject(\\\"key\\\",\\\"welcome javaPub\\\"); return modelAndView; }\",\"test.jsp\",\"<%@ page language=\\\"java\\\" contentType=\\\"text/html; charset=UTF-8\\\" pageEncoding=\\\"UTF-8\\\"%> <!DOCTYPE HTML> <html> <head> <%@ page isELIgnored=\\\"false\\\"%> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0, minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\\\"/> <title>news detail</title> </head> <body class=\\\"fn-pd24\\\"> <h1>大家好 ${key}</h1> <a href=\\\"https://mp.weixin.qq.com/s/kfyRAPnRDp8LLktjgd658Q\\\">JavaPub知识清单</a> </body> </html>\",\"通过 ModelAndView 将我们需要渲染的数据存储传输到对应视图，由 Sping MVC 定义好的视图解析器对该对象解析，最后将结果数据显示到指定页面。\",\"完整代码地址：https://github.com/Rodert/JavaPub/code/ssm_helloworld_web/\"]},\"896\":{\"c\":[\"SSM\",\"Spring\",\"java\"]},\"897\":{\"h\":\"SpringBoot\"},\"898\":{\"h\":\"三种快速创建SpringBoot项目的方式\"},\"899\":{\"h\":\"三种快速创建SpringBoot项目的方式\",\"t\":[\"SpringBoot 是一个快速开发框架，通过maven依赖的继承方式，帮助我们快速整合第三方常用框架。现在是 Java 领域的绝对霸主。\",\"今天介绍三种快速创建 SpringBoot 项目的方式。\"]},\"900\":{\"h\":\"在线创建\",\"t\":[\"1、打开 https://start.spring.io/ 网站，填写必要信息来生成 Spring Boot 项目。\",\"https://start.aliyun.com\",\"2、填写必要信息\",\"Project：表示使用什么构建工具，Maven or Gradle；\",\"Language：表示使用什么编程语言， Java 、Kotlin or Groovy；\",\"Spring Boot：Spring Boot 的版本；\",\"Project Metadata：项目元数据，即 Maven 项目基本属性，根据自己的实际情况填写；\",\"Dependencies：要加入的 Spring Boot 组件；\",\"3、然后点击生成或 Ctrl + Enter 即可；\",\"4、将压缩包下载后，解压缩后用自己喜欢的 IDE 开发即可；\"]},\"901\":{\"h\":\"IntelliJ IDEA 创建\",\"t\":[\"1、新建项目时选择 Spring Initializr ；\",\"这里建议使用阿里云的镜像，加快初始化\",\"https://start.aliyun.com\",\"2、点击下一步，填写相关配置；\",\"Group：组织 ID，一般分为多个段，一般第一段为域，而第二段则是 公司名称；比如： cn.net.javapub\",\"Artifact：唯一标识符，一般是项目名；比如： my-javaub-user\",\"3、选择包，添加相关依赖；\",\"4、配置项目名，点击完成即可；\"]},\"902\":{\"h\":\"Maven 创建\",\"t\":[\"1、新建 Maven 项目；\",\"2、填写项目名和相关配置；\",\"Group：组织 ID，一般分为多个段，一般第一段为域，而第二段则是 公司名称；比如： cn.net.javapub\",\"Artifact：唯一标识符，一般是项目名；比如： my-javaub-user\",\"3、点击完成即可；\",\"4、配置 pom.xml 添加依赖；\",\"5、在 main/java 目录下创建一个包，然后新建一个类，比如我的如下；\",\"6、运行上一步中的 main 方法即可；\"]},\"903\":{\"h\":\"基本项目结构\",\"t\":[\"项目目录结构参考：\"]},\"904\":{\"c\":[\"springboot\",\"java\"]},\"905\":{\"c\":[\"springboot\",\"java\"]},\"906\":{\"h\":\"SpringBoot的pom.xml\"},\"907\":{\"h\":\"你了解pomxml吗\",\"t\":[\"springboot 是 java 利器，几乎每个写 java 的同学都会用，但是你了解 pom.xml 吗？\",\"这篇干货查漏补缺。\",\"首先我们创建个 springboot 项目\",\"image-20240515141415120\",\"都选了默认设置：\",\"image-20240515141503878\",\"我把这篇完整粘贴出来\",\"pom.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example</groupId> <artifactId>demo</artifactId> <version>0.0.1-SNAPSHOT</version> <name>demo</name> <description>demo</description> <properties> <java.version>1.8</java.version> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding> <spring-boot.version>2.6.13</spring-boot.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> </dependencies> <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>${spring-boot.version}</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement> <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <source>1.8</source> <target>1.8</target> <encoding>UTF-8</encoding> </configuration> </plugin> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <version>${spring-boot.version}</version> <configuration> <mainClass>com.example.demo.DemoApplication</mainClass> <skip>true</skip> </configuration> <executions> <execution> <id>repackage</id> <goals> <goal>repackage</goal> </goals> </execution> </executions> </plugin> </plugins> </build> </project>\",\"image-20240515141832844\",\"前面这几个大家一定很熟悉：\",\"<project> 是 XML 文档的根元素。\",\"<modelVersion>：POM 模型的版本，当前版本是 4.0.0。我们一般不用动\",\"<groupId>：定义当前 Maven 项目所属的实际项目组。\",\"<artifactId>：定义实际项目模块的名称。\",\"比如导入 fastjson 时，我们会指定 <groupId><artifactId>\",\"image-20240515142322426\",\"<version>：定义项目版本。\",\"<name> 和 <description>：项目的名称和描述。\",\"这个是开发时自定义的，一般 name 就是项目名称。\",\"image-20240515142447148\",\"<properties>：这部分定义了一些用于 POM 文件其他位置的属性值。\",\"故名思思， properties 是项目中用到的一些属性，在这里定义好后，可以在下面引用。\",\"image-20240515142652362\",\"<dependencies>：这部分定义了项目所依赖的其他项目。\",\"dependencies 是项目开发中最常修改的地方，因为我们要引入各种各样的依赖。比如 mysql、 fastjson 等等外部工具，节省开发时间。\",\"image-20240515142850887\",\"<dependencyManagement>：当一个 POM 有多个模块时，我们可以在父 POM 中通过 dependencyManagement 元素来管理子模块中的版本。\",\"<build>：这部分包含了项目构建相关的信息，如源码路径、插件配置等。\",\"<plugins>：定义了用于项目构建的插件列表。其中，maven-compiler-plugin 是用来编译源代码的，spring-boot-maven-plugin 是 Spring Boot 提供的用来简化 Spring Boot 应用构建和打包的 Maven 插件。这里的 configuration 元素用来配置插件的参数。\",\"image-20240515145153527\",\"这里比较重要的一点是，打包构建后的 jar，入口路径 <mainClass> 。maven 对应的配置。\",\"之前整理过一些 springboot 案例。 https://github.com/Rodert/SpringBoot-javapub .\"]},\"908\":{\"c\":[\"springboot\",\"java\"]},\"909\":{\"c\":[\"springboot\",\"java\"]},\"910\":{\"h\":\"SpringBoot2.x整合Prometheus+Grafana【附源码】\",\"t\":[\"文末源码\",\"[toc]\"]},\"911\":{\"h\":\"新建项目\"},\"912\":{\"h\":\"创建接口\",\"t\":[\"package com.wangshiyu.javapub.demo.springbootdocker.controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; /** * @Author: JavaPub * @License: https://github.com/Rodert/ https://gitee.com/rodert/ * @Contact: https://javapub.blog.csdn.net/ * @Date: 2022/2/26 12:24 * @Version: 1.0 * @Description: */ @RestController public class HelloController { @RequestMapping(\\\"/hello\\\") String hello(@RequestParam(required = false, defaultValue = \\\"\\\") String name) { return \\\"hello, welcome wangshiyu JavaPub \\\" + name; } }\"]},\"913\":{\"h\":\"maven 打包 springboot 项目\",\"t\":[\"mvn clean package -DskipTests\",\"Dockerfile讲解\",\"#基础镜像通过java8来的 FROM java:8 #将当前文件中所有*.jar 拷贝到项目的app.jar中（这个app.jar是自己生成的） COPY *.jar /app.jar #映射地址 CMD [\\\"--server.prot=8080\\\"] #暴露端口 EXPOSE 8080 #执行命令java -jar ENTRYPOINT [\\\"java\\\",\\\"-jar\\\",\\\"/app.jar\\\"]\"]},\"914\":{\"h\":\"文件准备\",\"t\":[\"拷贝 *.jar 包和 Dockerfile 到linux服务器文件夹下\"]},\"915\":{\"h\":\"linux下docker安装\",\"t\":[\"本次在root权限下安装\",\"更新yum到最新版本\",\"yum update\",\"卸载旧版本（如果没安装，忽略）\",\"yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine\",\"yum list installed | grep docker\",\"yum remove docker-ce\",\"rm -rf /var/lib/docker\",\"curl -sSL https://get.daocloud.io/docker | sh\",\"安装一些工具\",\"yum install -y yum-utils device-mapper-persistent-data lvm2\",\"yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\",\"安装docker稳定版\",\"yum install docker-ce\",\"成功\",\"docker version\",\"切换国内加速镜像\",\"vim /etc/docker/daemon.json\",\"{ \\\"registry-mirrors\\\": [ \\\"https://dockerhub.azk8s.cn\\\", \\\"https://docker.mirrors.ustc.edu.cn\\\", \\\"https://registry.docker-cn.com\\\" ] }\",\"systemctl daemon-reload\",\"systemctl restart docker\"]},\"916\":{\"h\":\"异常\",\"t\":[\"如果中途出现什么旧版本没卸载干净，把卸载命令全部重新执行一遍。\"]},\"917\":{\"h\":\"打包构建docker镜像\",\"t\":[\"将 jar包 打包成 docker 镜像（基于Dockerfile打包一个名为 idea_docker_image_test 的镜像，版本为1.0）\",\"docker build -t idea_docker_image_test:1.0 -f Dockerfile .\",\"查看镜像是否打包成功\",\"docker images\"]},\"918\":{\"h\":\"运行\",\"t\":[\"docker run -d --name idea_docker_image_test -p 8080:8080 idea_docker_image_test:1.0\",\"在这里插入图片描述\"]},\"919\":{\"h\":\"查看日志\",\"t\":[\"查看控制台日志\",\"docker logs -f --tail=100 容器id\",\"查看slf4j日志\",\"通过 docker exec -it 容器id /bin/bash 进入容器 再通过项目里指定的路径及可找到日志文件\",\"源码： https://github.com/Rodert/SpringBoot-javapub/tree/main/spring-boot-docker\"]},\"920\":{\"c\":[\"springboot\",\"prometheus\",\"grafana\",\"java\"]},\"921\":{\"c\":[\"springboot\",\"prometheus\",\"grafana\",\"java\"]},\"922\":{\"h\":\"手把手springboot整合flowable【附源码/视频】\",\"t\":[\"[toc]\"]},\"923\":{\"h\":\"视频教程\",\"t\":[\"点击：https://www.bilibili.com/video/BV1fa411j7Q5/\",\"在这里插入图片描述\"]},\"924\":{\"h\":\"插件安装\",\"t\":[\"BPMN绘图可视化工具\",\"Flowable BPMN visualizer\"]},\"925\":{\"h\":\"导入依赖\",\"t\":[\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <!--flowable工作流依赖--> <dependency> <groupId>org.flowable</groupId> <artifactId>flowable-spring-boot-starter</artifactId> <version>6.3.0</version> </dependency> <!--mysql依赖--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>5.1.45</version> </dependency>\"]},\"926\":{\"h\":\"新建数据库\",\"t\":[\"database\",\"javapub-flowable2\"]},\"927\":{\"h\":\"修改配置\",\"t\":[\"spring: datasource: url: jdbc:mysql://bj-cdb-mw08tjgs.sql.tencentcdb.com:60042/javapub-flowable2?characterEncoding=UTF-8 username: root password: password driver-class-name: com.mysql.jdbc.Driver flowable: #关闭定时任务JOB async-executor-activate: false database-schema-update: true server: port: 8081\",\"配置说明：\",\"database-schema-update: true\",\"数据库更新策略，其取值有四个：\",\"flase： 默认值。activiti在启动时，会对比数据库表中保存的版本，如果没有表或者版本不匹配，将抛出异常。（生产环境常用） true： activiti会对数据库中所有表进行更新操作。如果表不存在，则自动创建。（开发时常用） create_drop： 在activiti启动时创建表，在关闭时删除表（必须手动关闭引擎，才能删除表）。（单元测试常用） drop-create： 在activiti启动时删除原来的旧表，然后在创建新表（不需要手动关闭引擎）。\"]},\"928\":{\"h\":\"定义流程文件\",\"t\":[\"这里还是用一个开源的流程文件\",\"放在：resources/processes/ExpenseProcess.bpmn20.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <definitions xmlns=\\\"http://www.omg.org/spec/BPMN/20100524/MODEL\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:flowable=\\\"http://flowable.org/bpmn\\\" xmlns:bpmndi=\\\"http://www.omg.org/spec/BPMN/20100524/DI\\\" xmlns:omgdc=\\\"http://www.omg.org/spec/DD/20100524/DC\\\" xmlns:omgdi=\\\"http://www.omg.org/spec/DD/20100524/DI\\\" typeLanguage=\\\"http://www.w3.org/2001/XMLSchema\\\" expressionLanguage=\\\"http://www.w3.org/1999/XPath\\\" targetNamespace=\\\"http://www.flowable.org/processdef\\\"> <process id=\\\"Expense\\\" name=\\\"ExpenseProcess\\\" isExecutable=\\\"true\\\"> <documentation>报销流程</documentation> <startEvent id=\\\"start\\\" name=\\\"开始\\\"></startEvent> <userTask id=\\\"fillTask\\\" name=\\\"出差报销\\\" flowable:assignee=\\\"${taskUser}\\\"> <extensionElements> <modeler:initiator-can-complete xmlns:modeler=\\\"http://flowable.org/modeler\\\"> <![CDATA[false]]></modeler:initiator-can-complete> </extensionElements> </userTask> <exclusiveGateway id=\\\"judgeTask\\\"></exclusiveGateway> <userTask id=\\\"directorTak\\\" name=\\\"经理审批\\\"> <extensionElements> <flowable:taskListener event=\\\"create\\\" class=\\\"com.haiyang.flowable.listener.ManagerTaskHandler\\\"></flowable:taskListener> </extensionElements> </userTask> <userTask id=\\\"bossTask\\\" name=\\\"老板审批\\\"> <extensionElements> <flowable:taskListener event=\\\"create\\\" class=\\\"com.haiyang.flowable.listener.BossTaskHandler\\\"></flowable:taskListener> </extensionElements> </userTask> <endEvent id=\\\"end\\\" name=\\\"结束\\\"></endEvent> <sequenceFlow id=\\\"directorNotPassFlow\\\" name=\\\"驳回\\\" sourceRef=\\\"directorTak\\\" targetRef=\\\"fillTask\\\"> <conditionExpression xsi:type=\\\"tFormalExpression\\\"><![CDATA[${outcome=='驳回'}]]></conditionExpression> </sequenceFlow> <sequenceFlow id=\\\"bossNotPassFlow\\\" name=\\\"驳回\\\" sourceRef=\\\"bossTask\\\" targetRef=\\\"fillTask\\\"> <conditionExpression xsi:type=\\\"tFormalExpression\\\"><![CDATA[${outcome=='驳回'}]]></conditionExpression> </sequenceFlow> <sequenceFlow id=\\\"flow1\\\" sourceRef=\\\"start\\\" targetRef=\\\"fillTask\\\"></sequenceFlow> <sequenceFlow id=\\\"flow2\\\" sourceRef=\\\"fillTask\\\" targetRef=\\\"judgeTask\\\"></sequenceFlow> <sequenceFlow id=\\\"judgeMore\\\" name=\\\"大于500元\\\" sourceRef=\\\"judgeTask\\\" targetRef=\\\"bossTask\\\"> <conditionExpression xsi:type=\\\"tFormalExpression\\\"><![CDATA[${money > 500}]]></conditionExpression> </sequenceFlow> <sequenceFlow id=\\\"bossPassFlow\\\" name=\\\"通过\\\" sourceRef=\\\"bossTask\\\" targetRef=\\\"end\\\"> <conditionExpression xsi:type=\\\"tFormalExpression\\\"><![CDATA[${outcome=='通过'}]]></conditionExpression> </sequenceFlow> <sequenceFlow id=\\\"directorPassFlow\\\" name=\\\"通过\\\" sourceRef=\\\"directorTak\\\" targetRef=\\\"end\\\"> <conditionExpression xsi:type=\\\"tFormalExpression\\\"><![CDATA[${outcome=='通过'}]]></conditionExpression> </sequenceFlow> <sequenceFlow id=\\\"judgeLess\\\" name=\\\"小于500元\\\" sourceRef=\\\"judgeTask\\\" targetRef=\\\"directorTak\\\"> <conditionExpression xsi:type=\\\"tFormalExpression\\\"><![CDATA[${money <= 500}]]></conditionExpression> </sequenceFlow> </process> <bpmndi:BPMNDiagram id=\\\"BPMNDiagram_Expense\\\"> <bpmndi:BPMNPlane bpmnElement=\\\"Expense\\\" id=\\\"BPMNPlane_Expense\\\"> <bpmndi:BPMNShape bpmnElement=\\\"start\\\" id=\\\"BPMNShape_start\\\"> <omgdc:Bounds height=\\\"30.0\\\" width=\\\"30.0\\\" x=\\\"285.0\\\" y=\\\"135.0\\\"></omgdc:Bounds> </bpmndi:BPMNShape> <bpmndi:BPMNShape bpmnElement=\\\"fillTask\\\" id=\\\"BPMNShape_fillTask\\\"> <omgdc:Bounds height=\\\"80.0\\\" width=\\\"100.0\\\" x=\\\"405.0\\\" y=\\\"110.0\\\"></omgdc:Bounds> </bpmndi:BPMNShape> <bpmndi:BPMNShape bpmnElement=\\\"judgeTask\\\" id=\\\"BPMNShape_judgeTask\\\"> <omgdc:Bounds height=\\\"40.0\\\" width=\\\"40.0\\\" x=\\\"585.0\\\" y=\\\"130.0\\\"></omgdc:Bounds> </bpmndi:BPMNShape> <bpmndi:BPMNShape bpmnElement=\\\"directorTak\\\" id=\\\"BPMNShape_directorTak\\\"> <omgdc:Bounds height=\\\"80.0\\\" width=\\\"100.0\\\" x=\\\"735.0\\\" y=\\\"110.0\\\"></omgdc:Bounds> </bpmndi:BPMNShape> <bpmndi:BPMNShape bpmnElement=\\\"bossTask\\\" id=\\\"BPMNShape_bossTask\\\"> <omgdc:Bounds height=\\\"80.0\\\" width=\\\"100.0\\\" x=\\\"555.0\\\" y=\\\"255.0\\\"></omgdc:Bounds> </bpmndi:BPMNShape> <bpmndi:BPMNShape bpmnElement=\\\"end\\\" id=\\\"BPMNShape_end\\\"> <omgdc:Bounds height=\\\"28.0\\\" width=\\\"28.0\\\" x=\\\"771.0\\\" y=\\\"281.0\\\"></omgdc:Bounds> </bpmndi:BPMNShape> <bpmndi:BPMNEdge bpmnElement=\\\"flow1\\\" id=\\\"BPMNEdge_flow1\\\"> <omgdi:waypoint x=\\\"315.0\\\" y=\\\"150.0\\\"></omgdi:waypoint> <omgdi:waypoint x=\\\"405.0\\\" y=\\\"150.0\\\"></omgdi:waypoint> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge bpmnElement=\\\"flow2\\\" id=\\\"BPMNEdge_flow2\\\"> <omgdi:waypoint x=\\\"505.0\\\" y=\\\"150.16611295681062\\\"></omgdi:waypoint> <omgdi:waypoint x=\\\"585.4333333333333\\\" y=\\\"150.43333333333334\\\"></omgdi:waypoint> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge bpmnElement=\\\"judgeLess\\\" id=\\\"BPMNEdge_judgeLess\\\"> <omgdi:waypoint x=\\\"624.5530726256983\\\" y=\\\"150.44692737430168\\\"></omgdi:waypoint> <omgdi:waypoint x=\\\"735.0\\\" y=\\\"150.1392757660167\\\"></omgdi:waypoint> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge bpmnElement=\\\"directorNotPassFlow\\\" id=\\\"BPMNEdge_directorNotPassFlow\\\"> <omgdi:waypoint x=\\\"785.0\\\" y=\\\"110.0\\\"></omgdi:waypoint> <omgdi:waypoint x=\\\"785.0\\\" y=\\\"37.0\\\"></omgdi:waypoint> <omgdi:waypoint x=\\\"455.0\\\" y=\\\"37.0\\\"></omgdi:waypoint> <omgdi:waypoint x=\\\"455.0\\\" y=\\\"110.0\\\"></omgdi:waypoint> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge bpmnElement=\\\"bossPassFlow\\\" id=\\\"BPMNEdge_bossPassFlow\\\"> <omgdi:waypoint x=\\\"655.0\\\" y=\\\"295.0\\\"></omgdi:waypoint> <omgdi:waypoint x=\\\"771.0\\\" y=\\\"295.0\\\"></omgdi:waypoint> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge bpmnElement=\\\"judgeMore\\\" id=\\\"BPMNEdge_judgeMore\\\"> <omgdi:waypoint x=\\\"605.4340277777778\\\" y=\\\"169.56597222222223\\\"></omgdi:waypoint> <omgdi:waypoint x=\\\"605.1384083044983\\\" y=\\\"255.0\\\"></omgdi:waypoint> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge bpmnElement=\\\"directorPassFlow\\\" id=\\\"BPMNEdge_directorPassFlow\\\"> <omgdi:waypoint x=\\\"785.0\\\" y=\\\"190.0\\\"></omgdi:waypoint> <omgdi:waypoint x=\\\"785.0\\\" y=\\\"281.0\\\"></omgdi:waypoint> </bpmndi:BPMNEdge> <bpmndi:BPMNEdge bpmnElement=\\\"bossNotPassFlow\\\" id=\\\"BPMNEdge_bossNotPassFlow\\\"> <omgdi:waypoint x=\\\"555.0\\\" y=\\\"295.0\\\"></omgdi:waypoint> <omgdi:waypoint x=\\\"455.0\\\" y=\\\"295.0\\\"></omgdi:waypoint> <omgdi:waypoint x=\\\"455.0\\\" y=\\\"190.0\\\"></omgdi:waypoint> </bpmndi:BPMNEdge> </bpmndi:BPMNPlane> </bpmndi:BPMNDiagram> </definitions>\"]},\"929\":{\"h\":\"测试\",\"t\":[\"提交流程\",\"http://localhost:8081/expense/add?userId=123&money=2000\",\"提交成功.流程Id为：2501\",\"待办列表查询\",\"http://localhost:8081/expense/list?userId=123\",\"Task[id=2507, name=出差报销]\",\"同意\",\"http://localhost:8081/expense/apply?taskId=2507\",\"processed ok!\",\"生成流程图\",\"http://localhost:8081/expense/processDiagram?processId=2501\"]},\"930\":{\"h\":\"截图\",\"t\":[\"image\",\"image\",\"image\",\"源码下载： https://github.com/Rodert/springboot-flowable\"]},\"931\":{\"c\":[\"springboot\",\"flowable\",\"java\"]},\"932\":{\"c\":[\"springboot\",\"flowable\",\"java\"]},\"933\":{\"h\":\"SpringBoot生成二维码的正确姿势[附视频/附源码]\"},\"934\":{\"h\":\"SpringBoot生成二维码的正确姿势[附视频/附源码]\",\"t\":[\"视频： https://space.bilibili.com/404747369\",\"[toc]\",\"二维码的原理是什么，如何保证不重复？你有没有想过这样一件事，二维码是实现原理是什么？如何保证各个平台的二维码是唯一的？就算你的程序停止运行，但是你的二维码依然存在。设计上要保证唯一性，比如在物流等环境中扫码编程别人的二维码。\",\"二维码是我们当今社会非常重要的一项技术，不论是我们在买菜，网购，停车等等，都需要扫码，几乎覆盖我们生产、生活的方方面面。\"]},\"935\":{\"h\":\"前言\",\"t\":[\"你有没有想过这样一些问题：\",\"二维码的原理是什么，如何保证不重复？保证各个平台的二维码是唯一\",\"你有没有想过这样一件事，二维码是实现原理是什么？\",\"就算你的程序停止运行，但是你的二维码依然存在。\",\"设计上要保证唯一性，比如在物流等容易损坏的环境中，如何保证二维码的准确性？\"]},\"936\":{\"h\":\"初始化 SpringBoot 项目\",\"t\":[\"https://start.aliyun.com\"]},\"937\":{\"h\":\"引入依赖\",\"t\":[\" <!-- 引入二维码依赖 --> <dependency> <groupId>com.google.zxing</groupId> <artifactId>core</artifactId> <version>3.2.0</version> </dependency> <dependency> <groupId>com.google.zxing</groupId> <artifactId>javase</artifactId> <version>3.2.0</version> </dependency>\"]},\"938\":{\"h\":\"编码\"},\"939\":{\"h\":\"编写工具类\",\"t\":[\"QrCodeController1 工具类\",\"package cn.net.javapub.springbootqr.demos.web.controller; import cn.net.javapub.springbootqr.demos.web.utils.QRCodeUtil1; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import javax.servlet.ServletOutputStream; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.File; /** * 作者 JavaPub */ @Controller //@Deprecated public class QrCodeController1 { /** * 根据 url 生成 普通二维码 */ @RequestMapping(value = \\\"/createCommonQRCode\\\") public void createCommonQRCode(HttpServletResponse response,HttpServletRequest request) throws Exception { ServletOutputStream stream = null; try { stream = response.getOutputStream(); String url = request.getParameter(\\\"url\\\"); //使用工具类生成二维码 QRCodeUtil1.encode(url, stream); } catch (Exception e) { e.getStackTrace(); } finally { if (stream != null) { stream.flush(); stream.close(); } } } /** * 根据 url 生成 带有logo二维码 */ @RequestMapping(value = \\\"/createLogoQRCode\\\") public void createLogoQRCode(HttpServletResponse response,HttpServletRequest request) throws Exception { ServletOutputStream stream = null; try { stream = response.getOutputStream(); // String logoPath = Thread.currentThread().getContextClassLoader().getResource(\\\"\\\").getPath() // + \\\"templates\\\" + File.separator +\\\"logo-\\\"+UUID.randomUUID().toString().trim().replaceAll(\\\"-\\\", \\\"\\\")+ \\\".jpg\\\"; String logoPath = Thread.currentThread().getContextClassLoader().getResource(\\\"\\\").getPath() + \\\"templates\\\" + File.separator +\\\"logo.jpg\\\"; String url = request.getParameter(\\\"url\\\"); //使用工具类生成二维码 QRCodeUtil1.encode(url, logoPath, stream, true); } catch (Exception e) { e.getStackTrace(); } finally { if (stream != null) { stream.flush(); stream.close(); } } } }\"]},\"940\":{\"h\":\"生成二维码\",\"t\":[\"附带功能化：\",\"离线可以扫描二维码\",\"二维码可以带logo\"]},\"941\":{\"h\":\"资源共享\",\"t\":[\"视频：https://www.bilibili.com/video/BV1cw411w7Rk/\",\"源码：https://github.com/Rodert/springboot-qr/\"]},\"942\":{\"c\":[\"springboot\",\"java\"]},\"943\":{\"c\":[\"springboot\",\"java\",\"二维码\"]},\"944\":{\"h\":\"SpringBoot2.x整合Prometheus+Grafana【附源码】\",\"t\":[\"图文并茂，新手入门教程，建议收藏\",\"SpringBoot2.x整合Prometheus+Grafana【附源码/视频】\",\"[toc]\",\"总体框架图\",\"image\"]},\"945\":{\"h\":\"简介\"},\"946\":{\"h\":\"Prometheus\",\"t\":[\"Prometheus，是一个开源的系统监控和告警的工具包，其采用Pull方式采集时间序列的度量数据（也支持push方式），通过Http协议传输。它的工作方式是被监控的服务需要公开一个Prometheus端点，这端点是一个HTTP接口，该接口公开了度量的列表和当前的值，然后Prometheus应用从此接口定时拉取数据，一般可以存放在时序数据库中，然后通过可视化的Dashboard(e.g.Grafana)进行数据展示。\",\"支持的prometheus metrics\",\"Counter，Gauge，Histogram，Summary，untyped等等。需要注意的是counter只能增不能减，适用于服务请求量，用户访问数等统计，但是如果需要统计有增有减的指标需要用Gauge。\",\"exporter\",\"支持的 exporter 很多，可以方便的监控很多应用，同时也可以自定义开发非官方提供的exporter。\"]},\"947\":{\"h\":\"grafana\",\"t\":[\"grafana，是一个开源的dashboard展示工具，可以支持很多主流数据源，包括时序性的和非时序性的。其提供的展示配置以及可扩展性能满足绝大部分时间序列数据展示需求，是一个比较优秀的工具。\",\"支持的数据源\",\"prometheus，inflexdb，elasticsearch，mysql，postgreSQL，openTSDB等，更多数据源：https://grafana.com/grafana/plugins/?type=datasource\"]},\"948\":{\"h\":\"SpringBoot工程初始化\",\"t\":[\"springboot加速初始化：https://start.aliyun.com/\",\"image\",\"添加依赖\",\"pom.xml\",\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> </dependency> <dependency> <groupId>io.micrometer</groupId> <artifactId>micrometer-registry-prometheus</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency>\",\"配置信息\",\"在application.yml增加以下配置项\",\" ##SpringBoot2.x整合Prometheus+Grafana ##源码：https://github.com/Rodert/SpringBoot-javapub management: metrics: export: prometheus: enabled: true step: 1m descriptions: true web: server: auto-time-requests: true endpoints: prometheus: id: springmetrics web: exposure: include: health,info,env,prometheus,metrics,httptrace,threaddump,heapdump,springmetrics server: port: 8080\",\"启动SpringBoot应用\",\"http://localhost:8080/actuator/prometheus\",\"打开即可看到暴露的信息\",\"image\"]},\"949\":{\"h\":\"环境安装\",\"t\":[\"如安装包下载不成功，可以在公众号回复【prometheus安装包】or【grafana安装包】领取\"]},\"950\":{\"h\":\"Prometheus安装\",\"t\":[\"下载地址：https://prometheus.io/download/\",\"image\",\"修改配置：\",\"prometheus.yml\",\"# my global config global: scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute. evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute. # scrape_timeout is set to the global default (10s). # Alertmanager configuration alerting: alertmanagers: - static_configs: - targets: # - alertmanager:9093 # Load rules once and periodically evaluate them according to the global 'evaluation_interval'. rule_files: # - \\\"first_rules.yml\\\" # - \\\"second_rules.yml\\\" # A scrape configuration containing exactly one endpoint to scrape: # Here it's Prometheus itself. scrape_configs: # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config. - job_name: 'prometheus' # metrics_path defaults to '/metrics' # scheme defaults to 'http'. #暴露路径 metrics_path: /actuator/prometheus static_configs: #SpringBoot的ip和端口号 - targets: ['localhost:8080']\",\"启动Prometheus\",\"prometheus.exe\",\"image\",\"测试访问\",\"http://localhost:9090\",\"image\",\"jvm_memory_used_bytes\",\"image\"]},\"951\":{\"h\":\"Grafana安装\",\"t\":[\"下载地址：https://mirrors.huaweicloud.com/grafana/\",\"image\",\"启动grafana\",\"image\",\"测试\",\"http://127.0.0.1:3000/login\",\"image\",\"默认账号：admin 密码：admin\",\"image\"]},\"952\":{\"h\":\"整合\",\"t\":[\"增加数据源\",\"image\",\"image\",\"Name填一个\",\"URL填的Prometheus访问地址\",\"image\",\"添加图表\",\"image\",\"image\",\"指定数据源、指定监控指标 jvm_memory_used_bytes\",\"image\",\"切换图标\",\"image\",\"image\",\"源码地址：https://github.com/Rodert/spring-boot-prometheus-grafana\",\"视频地址：https://space.bilibili.com/404747369\"]},\"953\":{\"c\":[\"springboot\",\"prometheus\",\"grafana\"]},\"954\":{\"c\":[\"springboot\",\"prometheus\",\"grafana\"]},\"955\":{\"h\":\"GoLang\"},\"956\":{\"h\":\"Python\"},\"957\":{\"h\":\"Python安装cv2\"},\"958\":{\"h\":\"python 安装 cv2 - 已解决\",\"t\":[\"建议收藏\",\"提供多种操作，一定有一种适合你的\",\"@[toc]\",\"情况就这么个情况，就是装不上。本文没一句废话，仔细阅读。\",\"image\"]},\"959\":{\"h\":\"1. 传统方式1\",\"t\":[\"（执行一遍，一条条试）\",\"可尝试 python3 -m pip install --upgrade pip\",\"pip install cv2\",\"pip3 install opencv-python\",\"国内镜像\",\"pip3 install opencv-python -i http://pypi.mirrors.ustc.edu.cn/simple/\",\"pip install cv2 -i http://pypi.mirrors.ustc.edu.cn/simple/\",\"进度：\",\"image\"]},\"960\":{\"h\":\"2. 第一阶段 终极办法01\",\"t\":[\"切换 python 版本， python3.9 不支持 cv2 (python3.7及以下)\"]},\"961\":{\"h\":\"3. 第二阶段 终极办法02\",\"t\":[\"自己安装\",\"https://www.lfd.uci.edu/~gohlke/pythonlibs/#wordcloud\",\"image\",\"等待下载好，copy到python安装目录下的lib目录当中\",\"接着，在cmd中安装（先进入lib目录中再安装你下载的那个文件）\",\"pip install opencv_python‑2.4.13.7‑cp27‑cp27m‑win_amd64.whl\",\"等待安装好，验证一下。\",\"pip install numpy\"]},\"962\":{\"h\":\"附加\",\"t\":[\"image\",\"下载：\",\"如果是以上错误，你可能需要安装 OpenSSL。http://slproweb.com/products/Win32OpenSSL.html\",\"image\",\"安装：\",\"一直下一步\",\"配置环境变量\"]},\"963\":{\"c\":[\"python\"]},\"964\":{\"c\":[\"python\",\"cv2\"]},\"965\":{\"h\":\"Rust\"},\"966\":{\"h\":\"Rust学习教程\",\"t\":[\"可以基于 ord（基于btc的一个项目） 来学习。\",\"https://github.com/ordinals/ord\"]},\"967\":{\"h\":\"参考资料\",\"t\":[\"rust 中文基础知识： https://rust-book.junmajinlong.com/\",\"rust 英文基础知识： https://doc.rust-lang.org/rust-by-example/index.html\"]},\"968\":{\"h\":\"git使用规范\"},\"969\":{\"h\":\"基于GitHub搭建网站，无需服务器\",\"t\":[\"自建服务器，无需服务器、不用编程。\",\"大家好，我是JavaPub.\",\"这几年自媒体原来热，很多人都知道了个人 IP 的重要性。连一个搞中医的朋友都要要做一个自己的网站，而且不想学编程、还不想花 RMB 租云服务。\",\"老读者都知道，博主是个实战派。搭建网站这种事，手到擒来。但是这位朋友这为一个外行人，这个教程必要做到保姆级、手把手。\",\"当然，文末还会提供无剪辑版的完整搭建视频、及演示源代码，绝对是有手就行。\",\"image-20231229224826134\",\"今天推荐这款工具，真的非常方便，而且简单易上手。我们的 编程指南 就是用他来搭建的。大家看下效果图。\",\"http://luxian.javapub.net.cn/\",\"image-20231229214604013\"]},\"970\":{\"h\":\"前言\",\"t\":[\"在搭建之前，首先大家要保证已经安装了 node、git。\"]},\"971\":{\"h\":\"快速搭建\"},\"972\":{\"h\":\"安装工具\",\"t\":[\"安装 docsify-cli 工具，这个工具可以方便的在本地调试预览网站。\",\"npm i docsify-cli -g\",\"image-20231229215720402\"]},\"973\":{\"h\":\"初始化\",\"t\":[\"如果你是第一次操作，建议完全模仿。\",\"接下来初始化网站目录，也就是我们要在网页上展示的内容。\",\"docsify init ./docs\",\"到这里我们的网站目录就搭建成功了，接下来可以写你想要展示的内容。也就是我们网站的内核。\"]},\"974\":{\"h\":\"写文档\",\"t\":[\"初始化成功后，可以看到 docs 目录下包含以下几个文件：\",\"index.html 入口文件，也就是我们的网站在进入后首先加载的文件。\",\"README.md 作为主页内容渲染，也就是网站的首页。\",\".nojekyll 阻止 GitHub Pages 忽略掉下划线开头的文件。（不了解可以先不用在意）\",\"​ 编辑 docs/README.md 就能直接更新网站内容。\"]},\"975\":{\"h\":\"本地预览\",\"t\":[\"运行本地服务器，执行命令 docsify serve 可以方便的预览。并且有 LiveReload 功能、也就是边改边实时预览。默认的访问地址是 http://localhost:3000\",\"docsify serve\",\"到这一步，就已取得间断性胜利。你已经运用了自己网站。\"]},\"976\":{\"h\":\"部署 GitHub\",\"t\":[\"接下来，就是如何将网站放在公网上，供全球用户浏览。\",\"进入 GitHub 网站，创建一个我们的博客仓库。（如果没有、用邮箱注册一个就可以了）\",\"第一步、\",\"创建一个仓库，名字就叫 temp-docsify 。\",\"image-20231229222424668\",\"第二步、\",\"初始化本地代码、并推送到远端\",\"git init // 初始化仓库 git add . git commit -m \\\"init\\\" git remote add origin https://github.com/Rodert/temp-docsify.git // 绑定远端地址 git checkout -b main git push -u origin main\",\"看一下我们的仓库\",\"仓库文件.jpg\",\"第三步、\",\"使用 GitHub Pages 功能搭建网站\",\"进入仓库，选择 Settings 栏。\",\"image-20231229223519373\",\"然后鼠标一直向下滚动，直到看到 GitHub Pages 页签，在Source下面选择master branch / docs folder 选项。\",\"image-20231229223449073\",\"稍等几分钟，就可以看到部署的网站地址，类似这样 https://rodert.github.io/temp-docsify/ 。点击 Visit site 浏览属于你的网站。\",\"image-20231229223856569\",\"我们的演示源代码仓库： https://github.com/Rodert/temp-docsify/\"]},\"977\":{\"h\":\"企业生产环境中最常使用的git组合命令集\",\"t\":[\"持续更新git命令集\",\"以下案例是在生产环境中最常使用的git组合命令集。\",\"[toc]\"]},\"978\":{\"h\":\"案例1\",\"t\":[\"最常使用命令集，拉取新分支 - 写代码 - 提交代码 - 合并到主分支\",\"git checkout -b feature/new-branch #拉取新分支 git add . #提交代码 git commit -m '第一次提交' git push git checkout develop #切换分支 git merge feature/new-branch #合并分支 以上是我们最最常使用的git命令\"]},\"979\":{\"h\":\"案例2（git stash）\",\"t\":[\"场景：一大早领导甲某分配给p哥一个需求，要求下班前完成，小李马不停蹄，拉取新分支 command+C/V 哼哧哼哧搞了起来。下午1:30pm，甲某：p哥，现场有个紧急需求，你快点处理一下，一小时后上线。\",\"对于这种情况，p哥不想开新分支，又不想把没开发完的代码提交远程仓库，他是这样做的。做法：将工作区内容 stash 暂存起来，在当前分支进行紧急需求开发提交，再将工作区的内容取出来，恢复到暂存时的状态。\",\"stash翻译\",\"恢复暂存时的状态有俩种命令：\",\"git stash pop\",\"git stash apply\",\"俩种都可以，区别是什么呢？\",\"使用 git stash 命令之后会在stash列表中生成一个对应的信息，使用 apply 命令恢复，stash 列表中的信息是会继续保留的，而使用 pop 命令进行恢复，会将 stash列表中的信息进行删除。\",\"例子：\",\"初始状态index.html文件在工作区进行修改：可以使用命令git status 和git diff看到此时的修改信息\",\"gitstatus\",\"这个时候还没有修改完，不想提交，但是要去修复bug。\",\"将index文件的内容 stash 起来，使用命令：git stash，如下图：使用 git stash 命令后，再使用 git status 或者 git diff 查看可以发现，对工作区的修改内容已经没有了，这个时候进行bug修复提交\",\"gitstash\",\"bug修复提交后，恢复之前暂存的状态，这个时候有两种命令可选，我们选择：git stash pop 命令\",\"gitstashpop\",\"并使用 git status 和 git diff 可以发现，此时工作区 index文件的内容跟我们暂存前是一样的。\",\"常用git stash命令：\",\"（1）git stash save \\\"save message\\\" : 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。\",\"（2）git stash list ：查看stash了哪些存储\",\"（3）git stash show ：显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@\",\"（4）git stash show -p : 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show stash@{$num} -p ，比如第二个：git stash show stash@{1} -p 待确定？？？\",\"（5）git stash apply :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@\",\"（6）git stash pop ：命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@\",\"（7）git stash drop stash@{$num} ：丢弃stash@{$num}存储，从列表中删除这个存储\",\"（8）git stash clear ：删除所有缓存的stash\"]},\"980\":{\"h\":\"案例3（git cherry-pick）\",\"t\":[\"gi cherry-pick 可以理解为“挑拣”提交，我们经常遇到代码从一个分支迁移到另一个分支的需求。\",\"如果是所有代码，直接 git merge ，另一种情况，只需要合并一次或几次提交。（比如，我们拿到需求后，一通狂写git push，最后发现提交到了测试分支，如果不使用这个命令，那只能一点一点往新分支迁移，这里的心酸😔，谁干 谁知道。）这时，ta来了 git cherry-pick\",\"基本用法\",\"git cherry-pick命令的作用，就是将指定的提交（commit）应用于其他分支。\",\"$ git cherry-pick <commitHash>\",\"上面命令就会将指定的提交commitHash，应用于当前分支。这会在当前分支产生一个新的提交，当然它们的哈希值会不一样。\",\"举例来说，代码仓库有master和feature两个分支。\",\" a - b - c - d Master \\\\ e - f - g Feature\",\"现在将提交f应用到master分支。\",\"# 切换到 master 分支 $ git checkout master # Cherry pick 操作 $ git cherry-pick f\",\"上面的操作完成以后，代码库就变成了下面的样子。\",\" a - b - c - d - f Master \\\\ e - f - g Feature\",\"从上面可以看到，master分支的末尾增加了一个提交f。\",\"git cherry-pick命令的参数，不一定是提交的哈希值，分支名也是可以的，表示转移该分支的最新提交。\",\"$ git cherry-pick feature\",\"上面代码表示将feature分支的最近一次提交，转移到当前分支。\",\"转移多个提交\",\"Cherry pick 支持一次转移多个提交。\",\"$ git cherry-pick <HashA> <HashB>\",\"上面的命令将 A 和 B 两个提交应用到当前分支。这会在当前分支生成两个对应的新提交。\",\"如果想要转移一系列的连续提交，可以使用下面的简便语法。\",\"$ git cherry-pick A..B\",\"上面的命令可以转移从 A 到 B 的所有提交。它们必须按照正确的顺序放置：提交 A 必须早于提交 B，否则命令将失败，但不会报错。\",\"注意，使用上面的命令，提交 A 将不会包含在 Cherry pick 中。如果要包含提交 A，可以使用下面的语法。\",\"$ git cherry-pick A^..B\",\"JavaPub说：git cherry-pick 是非常重要且非常实用的一个命令，但是也有很多要点，下篇单独写一篇图解。\",\"参考：\",\"https://blog.csdn.net/FightFightFight/article/details/81039050\",\"http://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html\"]},\"981\":{\"h\":\"案例4（git reset）\",\"t\":[\"写完代码后，我们一般这样\",\"git add . //添加所有文件\",\"git commit -m \\\"本功能全部完成\\\"\",\"执行完commit后，想撤回commit，怎么办？\",\"这样：\",\"git reset --soft HEAD^\",\"这样就成功的撤销了你的 commit\",\"注意，仅仅是撤回 commit 操作，您写的代码仍然保留。\",\"HEAD^的意思是上一个版本，也可以写成 HEAD~1\",\"如果你进行了2次 commit，想都撤回，可以使用 HEAD~2\",\"几个参数：\",\"--mixed\",\"意思是：不删除工作空间改动代码，撤销 commit，并且撤销 git add . 操作 这个为默认参数，git reset --mixed HEAD^ 和 git reset HEAD^ 效果是一样的。\",\"--soft\",\"不删除工作空间改动代码，撤销 commit，不撤销 git add . \",\"--hard\",\"删除工作空间改动代码，撤销 commit，撤销 git add . \",\"注意完成这个操作后，就恢复到了上一次的 commit 状态。\",\"顺便说一下，如果 commit 注释写错了，只是想改一下注释，只需要： git commit --amend 此时会进入默认 vim编辑器，修改注释完毕后保存就好了。\"]},\"982\":{\"h\":\"案例5（git fetch）\",\"t\":[\"提到 git fetch 主要已通过和 git pull 来做区别。\",\"一图顶千文\",\"git流程图\",\"简单来说：git pull = git fetch + git merge\",\"参考：\",\"https://blog.csdn.net/yao_94/article/details/88929992\",\"https://www.cnblogs.com/zndxall/archive/2018/09/04/9586088.html\",\"https://blog.csdn.net/FightFightFight/article/details/81039050\",\"http://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html\"]},\"983\":{\"h\":\"10道不得不会的 Http 面试题\",\"t\":[\"Http\",\"10道不得不会的 Http 面试题\",\"我是 JavaPub，专注于面试、副业，技术人的成长记录。\",\"以下是 Http 面试题，相信大家都会有种及眼熟又陌生的感觉、看过可能在短暂的面试后又马上忘记了。JavaPub 在这里整理这些容易忘记的重点知识及 解答，建议收藏，经常温习查阅。\",\"评论区见\",\"@[toc]\",\"本系列《最少必要面试题》\"]},\"984\":{\"h\":\"1. 什么是 http ?\",\"t\":[\"http 和 https 有什么区别？\",\"cookies 机制和 session 机制的区别是什么？\",\"GET 和 POST 的区别？\",\"什么是Http协议无状态协议？怎么解决Http协议无状态协议？\",\"你知道 http 中有哪些状态码？它们代表什么含义\",\"开放性题目，尽量说自己了解的。\",\"302,404\",\"http 协议由哪几部分组成？\",\"Http协议中有那些请求方式？\",\"也就是我们常说的 RESTFul 请求方式。\",\"TCP和UDP的区别？\",\"10 . 说一下 https 请求的整个过程\",\"低谷蓄力\",\"《最少必要面试题》\",\"10道不得不会的Java基础面试题\",\"10道不得不会的Java并发基础面试题\",\"10道不得不会的JVM面试题\",\"10道不得不会的MySQL基础面试题\",\"10道不得不会的MyBatis面试题\",\"10道不得不会的Spring面试题\",\"10道不得不会的ElasticSearch面试题\",\"10道不得不会的Redis面试题\",\"10道不得不会的Kafka面试题\",\"10道不得不会的Zookeeper面试题\",\"10道不得不会的Docker面试题\",\"10道不得不会的JavaEE面试题\",\"10道不得不会的Netty面试题\"]},\"985\":{\"c\":[\"最少必要面试题\"]},\"986\":{\"c\":[\"http\",\"面试题\"]},\"987\":{\"h\":\"10道不得不会的 Netty 面试题\",\"t\":[\"Netty\",\"10道不得不会的 Netty 面试题\",\"我是 JavaPub，专注于面试、副业，技术人的成长记录。\",\"以下是 Netty 面试题，相信大家都会有种及眼熟又陌生的感觉、看过可能在短暂的面试后又马上忘记了。JavaPub 在这里整理这些容易忘记的重点知识及 解答，建议收藏，经常温习查阅。\",\"评论区见\",\"@[toc]\",\"https://baijiahao.baidu.com/s?id=1669639041722396699&wfr=spider&for=pc\",\"https://blog.csdn.net/pgving/article/details/124781454\",\"本系列《最少必要面试题》\",\"如果你对 Netty 还不是很了解，可以先运行一个 Demo 试试，地址：https://gitee.com/rodert/SpringBoot-javapub\"]},\"988\":{\"h\":\"1. 什么是Netty ?\",\"t\":[\"Netty 是一个异步的、基于事件驱动的网络应用框架，用于快速开发可维护、高性能的网络服务器和客户端。\",\"用官方的总结就是：Netty 成功地找到了一种在不妥协可维护性和性能的情况下实现易于开发，性能，稳定性和灵活性的方法。\",\"注意：netty 的异步还是基于多路复用的，并没有实现真正意义上的异步 IO\"]},\"989\":{\"h\":\"为什么要用 Netty 呢？说一下自己的看法。\",\"t\":[\"因为 Netty 具有下面这些优点，并且相比于直接使用 JDK 自带的 NIO 相关的 API 来说更加易用。\",\"统一的 API，支持多种传输类型，阻塞和非阻塞的。\",\"简单而强大的线程模型。\",\"自带编解码器解决 TCP 粘包/拆包问题。\",\"自带各种协议栈。\",\"真正的无连接数据包套接字支持。\",\"比直接使用 Java 核心 API 有更高的吞吐量、更低的延迟、更低的资源消耗和更少的内存复制。\",\"安全性不错，有完整的 SSL/TLS 以及 StartTLS 支持。\",\"社区活跃\",\"成熟稳定，经历了大型项目的使用和考验，而且很多开源项目都使用到了 Netty， 比如我们经常接触的 Dubbo、RocketMQ 等等。\"]},\"990\":{\"h\":\"Netty 应用场景了解么？\",\"t\":[\"凭借自己的了解，简单说一下吧！理论上来说，NIO 可以做的事情 ，使用 Netty 都可以做并且更好。Netty 主要用来做 **网络通信 ** :\",\"作为 RPC 框架的网络通信工具 ：我们在分布式系统中，不同服务节点之间经常需要相互调用，这个时候就需要 RPC 框架了。不同服务节点之间的通信是如何做的呢？可以使用 Netty 来做。\",\"实现一个自己的 HTTP 服务器 ：通过 Netty 我们可以自己实现一个简单的 HTTP 服务器，这个大家应该不陌生。说到 HTTP 服务器的话，作为 Java 后端开发，我们一般使用 Tomcat 比较多。一个最基本的 HTTP 服务器可要以处理常见的 HTTP Method 的请求，比如 POST 请求、GET 请求等等。\",\"实现一个即时通讯系统 ：使用 Netty 我们可以实现一个可以聊天类似微信的即时通讯系统\",\"实现消息推送系统 ：市面上有很多消息推送系统都是基于 Netty 来做的。\",\"在理解核心组件以前，建议先用文末的代码Demo练下手。\"]},\"991\":{\"h\":\"Netty 核心组件有哪些？分别有什么作用？\",\"t\":[\"Bootstrap & ServerBootstrap：客户端和服务端的引导类\",\"Channel：代表了一个链接，与EventLoop一起用来参与IO处理。\",\"ChannelFuture：Netty 为异步非阻塞，即所有的 I/O 操作都为异步的，因此，我们不能立刻得知消息是否已经被处理了。Netty 提供了 ChannelFuture 接口，通过该接口的 addListener() 方法注册一个 ChannelFutureListener，当操作执行成功或者失败时，监听就会自动触发返回结果。\",\"EventLoop & EventLoopGroup：Channel处理IO操作，一个EventLoop可以为多个Channel服务。而一个EventLoopGroup会包含多个EventLoop。\",\"ChannelHandler：为了支持各种协议和处理数据的方式，便诞生了Handler组件。Handler主要用来处理各种事件，这里的事件很广泛，比如可以是连接、数据接收、异常、数据转换等。\",\"ChannelPipeline：提供了 ChannelHandler 链的容器，并定义了用于在该链上传播入站 和出站事件流的 API。\",\"image\"]},\"992\":{\"h\":\"\"},\"993\":{\"h\":\"\",\"t\":[\"低谷蓄力\",\"《最少必要面试题》\",\"10道不得不会的Java基础面试题\",\"10道不得不会的Java并发基础面试题\",\"10道不得不会的JVM面试题\",\"10道不得不会的MySQL基础面试题\",\"10道不得不会的MyBatis面试题\",\"10道不得不会的Spring面试题\",\"10道不得不会的ElasticSearch面试题\",\"10道不得不会的Redis面试题\",\"10道不得不会的Kafka面试题\",\"10道不得不会的Zookeeper面试题\",\"10道不得不会的Docker面试题\",\"10道不得不会的JavaEE面试题\",\"10道不得不会的Netty面试题\"]},\"994\":{\"c\":[\"最少必要面试题\"]},\"995\":{\"c\":[\"netty\",\"面试题\"]},\"996\":{\"h\":\"《最少必要面试题》\",\"t\":[\"背最少的面试题，拿最多的 offer。\"]},\"997\":{\"c\":[\"《最少必要面试题》\"]},\"998\":{\"h\":\"10道不得不会的缓存面试题\",\"t\":[\"缓存\",\"10道不得不会的 缓存 面试题\",\"以下是 缓存 面试题，相信大家都会有种及眼熟又陌生的感觉、看过可能在短暂的面试后又马上忘记了。JavaPub在这里整理这些容易忘记的重点知识及解答，建议收藏，经常温习查阅。\",\"评论区见\",\"@[toc]\",\"说到缓存，首先你一定要对 Java容器、和 Redis 有一定了解，建议阅读《最少必要面试题》： 【Java容器篇】【Redis篇】\"]},\"999\":{\"h\":\"1. 什么是缓存？\",\"t\":[\"缓存，就是数据交换的缓冲区，针对服务对象的不同（本质就是不同的硬件）都可以构建缓存。而我们平时说的缓存，大多是指内存。\",\"目的是， 把读写速度【慢】的介质的数据保存在读写速度【快】的介质中，从而提高读写速度，减少时间消耗。 例如：\",\"CPU 高速缓存 ：高速缓存的读写速度远高于内存。 \",\"CPU 读数据时，如果在高速缓存中找到所需数据，就不需要读内存\",\"CPU 写数据时，先写到高速缓存，再回写到内存。\",\"磁盘缓存：磁盘缓存其实就把常用的磁盘数据保存在内存中，内存读写速度也是远高于磁盘的。 \",\"读数据，时从内存读取。\",\"写数据时，可先写到内存，定时或定量回写到磁盘，或者是同步回写。\"]},\"1000\":{\"h\":\"2. 为什么要用缓存？\",\"t\":[\"使用缓存的目的，就是提升读写性能。而实际业务场景下，更多的是为了提升读性能，带来更好的性能，更高的并发量。\",\"日常业务中，我们使用比较多的数据库是 MySQL ，缓存是 Redis 。Redis 比 MySQL 的读写性能好很多。那么，我们将 MySQL 的热点数据，缓存到 Redis 中，提升读取性能，也减小 MySQL 的读取压力。例如说：\",\"论坛帖子的访问频率比较高，且要实时更新阅读量，使用 Redis 记录帖子的阅读量，可以提升性能和并发。\",\"商品信息，数据更新的频率不高，但是读取的频率很高，特别是热门商品。\"]},\"1001\":{\"h\":\"3. 请说说有哪些缓存算法？是否能手写一下 LRU 代码的实现？\",\"t\":[\"缓存算法，比较常见的是三种：\",\"LRU（least recently used ，最近最少使用)\",\"LFU（Least Frequently used ，最不经常使用)\",\"FIFO（first in first out ，先进先出)\",\"这里我们可以借助 LinkedHashMap 实现\",\"public class LRULinkedMap<K,V> { /** * 最大缓存大小 */ private int cacheSize; private LinkedHashMap<K,V> cacheMap ; public LRULinkedMap(int cacheSize) { this.cacheSize = cacheSize; cacheMap = new LinkedHashMap(16,0.75F,true){ @Override protected boolean removeEldestEntry(Map.Entry eldest) { if (cacheSize + 1 == cacheMap.size()){ return true ; }else { return false ; } } }; } public void put(K key,V value){ cacheMap.put(key,value) ; } public V get(K key){ return cacheMap.get(key) ; } public Collection<Map.Entry<K, V>> getAll() { return new ArrayList<Map.Entry<K, V>>(cacheMap.entrySet()); } }\",\"使用案例：\",\" @Test public void put() throws Exception { LRULinkedMap<String,Integer> map = new LRULinkedMap(3) ; map.put(\\\"1\\\",1); map.put(\\\"2\\\",2); map.put(\\\"3\\\",3); for (Map.Entry<String, Integer> e : map.getAll()){ System.out.print(e.getKey() + \\\" : \\\" + e.getValue() + \\\"\\\\t\\\"); } System.out.println(\\\"\\\"); map.put(\\\"4\\\",4); for (Map.Entry<String, Integer> e : map.getAll()){ System.out.print(e.getKey() + \\\" : \\\" + e.getValue() + \\\"\\\\t\\\"); } } //输出 1 : 1 2 : 2 3 : 3 2 : 2 3 : 3 4 : 4\"]},\"1002\":{\"h\":\"4. 常见的常见的缓存工具和框架有哪些？\",\"t\":[\"在 Java 后端开发中，常见的缓存工具和框架列举如下：\",\"本地缓存：Guava LocalCache、Ehcache、Caffeine 。\",\"Ehcache 的功能更加丰富，Caffeine 的性能要比 Guava LocalCache 好。\",\"分布式缓存：Redis、Memcached、Tair 。\",\"Redis 最为主流和常用。\"]},\"1003\":{\"h\":\"5. 用了缓存之后，有哪些常见问题？\",\"t\":[\"常见的问题，可列举如下：\",\"写入问题\",\"缓存何时写入？并且写时如何避免并发重复写入？\",\"缓存如何失效？\",\"缓存和 DB 的一致性如何保证？\",\"经典三连问\",\"如何避免缓存穿透的问题？\",\"如何避免缓存击穿的问题？\",\"如果避免缓存雪崩的问题？\"]},\"1004\":{\"h\":\"6. 如何处理缓存穿透的问题\",\"t\":[\"缓存穿透，是指查询一个一定不存在的数据，由于缓存是不命中时被动写，并且处于容错考虑，如果从 DB 查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到 DB 去查询，失去了缓存的意义。\",\"在流量大时，可能 DB 就挂掉了，要是有人利用不存在的 key 频繁攻击我们的应用，这就是漏洞。如下图：\",\"缓存穿透\",\"如何解决\",\"有两种方案可以解决：\",\"方案一，缓存空对象。 当从 DB 查询数据为空，我们仍然将这个空结果进行缓存，具体的值需要使用特殊的标识，能和真正缓存的数据区分开。另外，需要设置较短的过期时间，一般建议不要超过 5 分钟。\",\"方案二，BloomFilter 布隆过滤器。 在缓存服务的基础上，构建 BloomFilter 数据结构，在 BloomFilter 中存储对应的 KEY 是否存在，如果存在，说明该 KEY 对应的值不为空。\",\"如何选择\",\"这两个方案，各有其优缺点。\",\"缓存空对象\",\"BloomFilter 布隆过滤器\",\"适用场景\",\"1、数据命中不高 2、保证一致性\",\"1、数据命中不高, 2、数据相对固定、实时性低\",\"维护成本\",\"1、代码维护简单 2、需要过多的缓存空间 3、数据不一致\",\"1、代码维护复杂，2、缓存空间占用小\",\"实际情况下，使用方案二比较多。因为，相比方案一来说，更加节省内容，对缓存的负荷更小。\"]},\"1005\":{\"h\":\"7. 如何处理缓存雪崩的问题\",\"t\":[\"缓存雪崩，是指缓存由于某些原因无法提供服务( 例如，缓存挂掉了 )，所有请求全部达到 DB 中，导致 DB 负荷大增，最终挂掉的情况。\",\"如何解决\",\"预防和解决缓存雪崩的问题，可以从以下多个方面进行共同着手。\",\"缓存高可用：通过搭建缓存的高可用，避免缓存挂掉导致无法提供服务的情况，从而降低出现缓存雪崩的情况。假设我们使用 Redis 作为缓存，则可以使用 Redis Sentinel 或 Redis Cluster 实现高可用。\",\"本地缓存：如果使用本地缓存时，即使分布式缓存挂了，也可以将 DB 查询到的结果缓存到本地，避免后续请求全部到达 DB 中。如果我们使用 JVM ，则可以使用 Ehcache、Guava Cache 实现本地缓存的功能。\",\"当然，引入本地缓存也会有相应的问题，例如说：\",\"本地缓存的实时性怎么保证？ 方案一，可以引入消息队列。在数据更新时，发布数据更新的消息；而进>程中有相应的消费者消费该消息，从而更新本地缓存。 方案二，设置较短的过期时间，请求时从 DB 重新拉取。 方案三，手动过期。\",\"请求 DB 限流: 通过限制 DB 的每秒请求数，避免把 DB 也打挂了。如果我们使用 Java ，则可以使用 Guava RateLimiter、Sentinel、Hystrix 实现限流的功能。这样至少能有两个好处：\",\"可能有一部分用户，还可以使用，系统还没死透。\",\"未来缓存服务恢复后，系统立即就已经恢复，无需再处理 DB 也挂掉的情况。\",\"提前演练：在项目上线前，演练缓存宕掉后，应用以及后端的负载情况以及可能出现的问题，在此基础上做一些预案设定。\"]},\"1006\":{\"h\":\"8. 如何处理缓存击穿的问题\",\"t\":[\"缓存击穿，是指某个极度“热点”数据在某个时间点过期时，恰好在这个时间点对这个 KEY 有大量的并发请求过来，这些请求发现缓存过期一般都会从 DB 加载数据并回设到缓存，但是这个时候大并发的请求可能会瞬间 DB 压垮。\",\"对于一些设置了过期时间的 KEY ，如果这些 KEY 可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑这个问题。\",\"区别： \",\"和缓存“雪崩“”的区别在于，前者针对某一 KEY 缓存，后者则是很多 KEY 。\",\"和缓存“穿透“”的区别在于，这个 KEY 是真实存在对应的值的。\",\"如何解决\",\"有两种方案可以解决：\",\"方案一，使用互斥锁。请求发现缓存不存在后，去查询 DB 前，使用分布式锁，保证有且只有一个线程去查询 DB ，并更新到缓存。\",\"方案二，手动过期。缓存上从不设置过期时间，功能上将过期时间存在 KEY 对应的 VALUE 里。流程如下：\",\"获取缓存。通过 VALUE 的过期时间，判断是否过期。如果未过期，则直接返回；如果已过期，继续往下执行。\",\"通过一个后台的异步线程进行缓存的构建，也就是“手动”过期。通过后台的异步线程，保证有且只有一个线程去查询 DB。\",\"同时，虽然 VALUE 已经过期，还是直接返回。通过这样的方式，保证服务的可用性，虽然损失了一定的时效性。\",\"选择\",\"这两个方案，各有其优缺点。\",\"使用互斥锁\",\"手动过期\",\"优点\",\"1、思路简单 2、保证一致性\",\"1、性价最佳，用户无需等待\",\"缺点\",\"1、代码复杂度增大 2、存在死锁的风险\",\"1、无法保证缓存一致性\"]},\"1007\":{\"h\":\"9. 缓存和 DB 的一致性如何保证？\",\"t\":[\"产生原因\",\"主要有两种情况，会导致缓存和 DB 的一致性问题：\",\"并发的场景下，导致读取老的 DB 数据，更新到缓存中。\",\"主要指的是，更新 DB 数据之前，先删除 Cache 的数据。在低并发量下没什么问题，但是在高并发下，就会存在问题。在(删除 Cache 的数据, 和更新 DB 数据)时间之间，恰好有一个请求，我们如果使用被动读，因为此时 DB 数据还是老的，又会将老的数据写入到 Cache 中。\",\"缓存和 DB 的操作，不在一个事务中，可能只有一个 DB 操作成功，而另一个 Cache 操作失败，导致不一致。\",\"当然，有一点我们要注意，缓存和 DB 的一致性，我们指的更多的是最终一致性。我们使用缓存只要是提高读操作的性能，真正在写操作的业务逻辑，还是以数据库为准。例如说，我们可能缓存用户钱包的余额在缓存中，在前端查询钱包余额时，读取缓存，在使用钱包余额时，读取数据库。\",\"解决方案\",\"在开始说解决方案之前，胖友先看看如下几篇文章，可能有一丢丢多，保持耐心。\",\"当然无论哪种方案，比较重要的就是解决两个问题：\",\"将缓存可能存在的并行写，实现串行写。\",\"实现数据的最终一致性。\",\"先淘汰缓存，再写数据库 因为先淘汰缓存，所以数据的最终一致性是可以得到有效的保证的。为什么呢？先淘汰缓存，即使写数据库发生异常，也就是下次缓存读取时，多读取一次数据库。\",\"那么，我们需要解决缓存并行写，实现串行写。比较简单的方式，引入分布式锁。\",\"在写请求时，先淘汰缓存之前，先获取该分布式锁。\",\"在读请求时，发现缓存不存在时，先获取分布式锁。\",\"先写数据库，再更新缓存\",\"按照 “先写数据库，再更新缓存”，我们要保证 DB 和缓存的操作，能够在 “同一个事务”中，从而实现最终一致性\"]},\"1008\":{\"h\":\"10. 什么是缓存预热？如何实现缓存预热？\",\"t\":[\"缓存预热\",\"在刚启动的缓存系统中，如果缓存中没有任何数据，如果依靠用户请求的方式重建缓存数据，那么对数据库的压力非常大，而且系统的性能开销也是巨大的。\",\"此时，最好的策略是启动时就把热点数据加载好。这样，用户请求时，直接读取的就是缓存的数据，而无需去读取 DB 重建缓存数据。举个例子，热门的或者推荐的商品，需要提前预热到缓存中。\",\"如何实现\",\"一般来说，有如下几种方式来实现：\",\"数据量不大时，项目启动时，自动进行初始化。\",\"写个修复数据脚本，手动执行该脚本。\",\"写个管理界面，可以手动点击，预热对应的数据到缓存中。\"]},\"1009\":{\"h\":\"拓展：缓存数据的淘汰策略有哪些？\",\"t\":[\"除了缓存服务器自带的缓存自动失效策略之外，我们还可以根据具体的业务需求进行自定义的“手动”缓存淘汰，常见的策略有两种：\",\"定时去清理过期的缓存。\",\"当有用户请求过来时，再判断这个请求所用到的缓存是否过期，过期的话就去底层系统得到新数据并更新缓存。\",\"两者各有优劣，第一种的缺点是维护大量缓存的 key 是比较麻烦的，第二种的缺点就是每次用户请求过来都要判断缓存失效，逻辑相对比较复杂！Redis 的缓存淘汰策略就是很好的实践方式。\",\"具体用哪种方案，大家可以根据自己的应用场景来权衡。\"]},\"1010\":{\"h\":\"推荐阅读：\",\"t\":[\"10道不得不会的Java基础面试题\",\"10道不得不会的Java容器面试题\",\"10道不得不会的Java并发基础面试题\",\"10道不得不会的JavaEE面试题\",\"10道不得不会的JVM面试题\",\"10道不得不会的MySQL基础面试题\",\"10道不得不会的MyBatis面试题\",\"10道不得不会的Spring面试题\",\"10道不得不会的SpringBoot面试题\",\"10道不得不会的ElasticSearch面试题\",\"10道不得不会的Redis面试题\",\"10道不得不会的Kafka面试题\",\"10道不得不会的Zookeeper面试题\",\"10道不得不会的Docker面试题\",\"10道不得不会的缓存面试题\"]},\"1011\":{\"c\":[\"最少必要面试题\"]},\"1012\":{\"c\":[\"缓存\",\"面试题\"]},\"1013\":{\"h\":\"10道不得不会的 Docker 面试题\",\"t\":[\"Docker\",\"10道不得不会的 Docker 面试题\",\"我是JavaPub，专注于面试、副业，技术人的成长记录。\",\"以下是 Docker 面试题，相信大家都会有种及眼熟又陌生的感觉、看过可能在短暂的面试后又马上忘记了。JavaPub在这里整理这些容易忘记的重点知识及解答，建议收藏，经常温习查阅。\",\"评论区见\",\"@[toc]\",\"以下是一些docker的基础面试题，下一篇docker进阶面试题。本系列《最少必要面试题》\"]},\"1014\":{\"h\":\"1. 什么是 Docker 容器？\",\"t\":[\"Docker 是一种流行的开源软件平台，可简化创建、管理、运行和分发应用程序的过程。它使用容器来打包应用程序及其依赖项。我们也可以将容器视为 Docker 镜像的运行时实例。\"]},\"1015\":{\"h\":\"2. Docker 和虚拟机有什么不同？\",\"t\":[\"Docker 是轻量级的沙盒，在其中运行的只是应用，虚拟机里面还有额外的系统。\"]},\"1016\":{\"h\":\"3. 什么是 DockerFile？\",\"t\":[\"Dockerfile 是一个文本文件，其中包含我们需要运行以构建 Docker 镜像的所有命令，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。Docker 使用 Dockerfile 中的指令自动构建镜像。我们可以 docker build 用来创建按顺序执行多个命令行指令的自动构建。\",\"一些最常用的指令如下：\",\"FROM ：使用 FROM 为后续的指令建立基础映像。在所有有效的 Dockerfile 中， FROM 是第一条指令。 LABEL： LABEL 指令用于组织项目映像，模块，许可等。在自动化布署方面 LABEL 也有很大用途。在 LABEL 中指定一组键值对，可用于程序化配置或布署 Docker 。 RUN： RUN 指令可在映像当前层执行任何命令并创建一个新层，用于在映像层中添加功能层，也许最来的层会依赖它。 CMD： 使用 CMD 指令为执行的容器提供默认值。在 Dockerfile 文件中，若添加多个 CMD 指令，只有最后的 CMD 指令运行。\"]},\"1017\":{\"h\":\"4. 使用Docker Compose时如何保证容器A先于容器B运行？\",\"t\":[\"Docker Compose 是一个用来定义和运行复杂应用的Docker工具。一个使用Docker容器的应用，通常由多个容器组成。使用Docker Compose不再需要使用shell脚本来启动容器。Compose 通过一个配置文件来管理多个Docker容器。简单理解：Docker Compose 是docker的管理工具。\",\"Docker Compose 在继续下一个容器之前不会等待容器准备就绪。为了控制我们的执行顺序，我们可以使用“取决于”条件，depends_on 。这是在 docker-compose.yml 文件中使用的示例\",\"version: \\\"2.4\\\" services: backend: build: . # 构建自定义镜像 depends_on: - db db: image: mysql\",\"用 docker-compose up 命令将按照我们指定的依赖顺序启动和运行服务。\"]},\"1018\":{\"h\":\"5. 一个完整的Docker由哪些部分组成?\",\"t\":[\"DockerClient 客户端\",\"Docker Daemon 守护进程\",\"Docker Image 镜像\",\"DockerContainer 容器\"]},\"1019\":{\"h\":\"6. docker常用命令\",\"t\":[\"命令建议在本地安装做一个实操，记忆会更深刻。 也可以克隆基于docker的俩万（springboot+vue）项目练手，提供视频+完善文档。地址：https://gitee.com/rodert/liawan-vue\",\"查看本地主机的所用镜像：`docker images``\",\"搜索镜像：`docker search mysql``\",\"下载镜像：docker pull mysql，没写 tag 就默认下载最新的 lastest\",\"下载指定版本的镜像：`docker pull mysql:5.7``\",\"删除镜像：`docker rmi -f 镜像id 镜像id 镜像id``\"]},\"1020\":{\"h\":\"7. 描述 Docker 容器的生命周期。\",\"t\":[\"Docker 容器经历以下阶段：\",\"创建容器\",\"运行容器\",\"暂停容器（可选）\",\"取消暂停容器（可选）\",\"启动容器\",\"停止容器\",\"重启容器\",\"杀死容器\",\"销毁容器\"]},\"1021\":{\"h\":\"8. docker容器之间怎么隔离?\",\"t\":[\"这是一道涉猎很广泛的题目，理解性阅读。\",\"Linux中的PID、IPC、网络等资源是全局的，而Linux的NameSpace机制是一种资源隔离方案，在该机制下这些资源就不再是全局的了，而是属于某个特定的NameSpace，各个NameSpace下的资源互不干扰。\",\"​​**Namespace实际上修改了应用进程看待整个计算机“视图”，即它的“视线”被操作系统做了限制，只能“看到”某些指定的内容​​。**对于宿主机来说，这些被“隔离”了的进程跟其他进程并没有区别。\",\"虽然有了NameSpace技术可以实现资源隔离，但进程还是可以不受控的访问系统资源，比如CPU、内存、磁盘、网络等，为了控制容器中进程对资源的访问，Docker采用control groups技术(也就是cgroup)，有了cgroup就可以控制容器中进程对系统资源的消耗了，比如你可以限制某个容器使用内存的上限、可以在哪些CPU上运行等等。\",\"有了这两项技术，容器看起来就真的像是独立的操作系统了。\",\"强烈建议大家实操，才能更好的理解docker。\",\"低谷蓄力\",\"《最少必要面试题》\",\"10道不得不会的Java基础面试题\",\"10道不得不会的Java容器面试题\",\"10道不得不会的Java并发基础面试题\",\"10道不得不会的JavaEE面试题\",\"10道不得不会的JVM面试题\",\"10道不得不会的MySQL基础面试题\",\"10道不得不会的MyBatis面试题\",\"10道不得不会的Spring面试题\",\"10道不得不会的SpringBoot面试题\",\"10道不得不会的ElasticSearch面试题\",\"10道不得不会的Redis面试题\",\"10道不得不会的Kafka面试题\",\"10道不得不会的Zookeeper面试题\",\"10道不得不会的Docker面试题\",\"10道不得不会的缓存面试题\"]},\"1022\":{\"c\":[\"最少必要面试题\"]},\"1023\":{\"c\":[\"docker\",\"面试题\"]},\"1024\":{\"h\":\"10道不得不会的ElasticSearch面试题\",\"t\":[\"Elastic Search\",\"10道不得不会的ElasticSearch面试题\",\"以下是 ElasticSearch 面试题，相信大家都会有种及眼熟又陌生的感觉、看过可能在短暂的面试后又马上忘记了。JavaPub在这里整理这些容易忘记的重点知识及解答，建议收藏，经常温习查阅。\",\"评论区见\",\"关于es的面试，建议使用名词用官方语言描述会更准确。\",\"@[toc]\"]},\"1025\":{\"h\":\"1. 说说你们公司 es 的集群架构，索引数据大小，分片有多少，以及一些调优手段 。\",\"t\":[\"节点数、分片数、副本数，尽量根据自己公司使用情况回答，当然适当放大也可行。\",\"调优手段是现在很常见的面试题，下面这几种调优手段一定要了解懂。当然，下面的每一条都可以当做调优的一部分。\",\"设计调优\",\"参考： https://www.cnblogs.com/sanduzxcvbnm/p/12084012.html\",\"a. 根据业务增量需求，采取基于日期模板创建索引，通过 rollover API 滚动索引；(rollover API我会单独写一个代码案例做讲解，公众号：JavaPub) b. 使用别名进行索引管理；（es的索引名不能改变，提供的别名机制使用非常广泛。） c. 每天凌晨定时对索引做force_merge操作，以释放空间； d. 采取冷热分离机制，热数据存储到SSD，提高检索效率；冷数据定期进行shrink操作，以缩减存储； e. 采取curator进行索引的生命周期管理； f. 仅针对需要分词的字段，合理的设置分词器； g. Mapping阶段充分结合各个字段的属性，是否需要检索、是否需要存储等。\",\"进100+原创文章：https://gitee.com/rodert/JavaPub\",\"写入调优\",\"写入前副本数设置为0；\",\"写入前关闭refresh_interval设置为-1，禁用刷新机制；\",\"写入过程中：采取bulk批量写入；\",\"写入后恢复副本数和刷新间隔；\",\"尽量使用自动生成的id。\",\"查询调优\",\"禁用wildcard；（通配符模式，类似于%like%）\",\"禁用批量terms（成百上千的场景）；\",\"充分利用倒排索引机制，能keyword类型尽量keyword；\",\"数据量大时候，可以先基于时间敲定索引再检索；\",\"设置合理的路由机制。\"]},\"1026\":{\"h\":\"2. elasticsearch 的倒排索引是什么\",\"t\":[\"倒排索引也就是单词到文档的映射，当然不只是存里文档id这么简单。还包括：词频（TF，Term Frequency）、偏移量（offset）、位置（Posting）。\"]},\"1027\":{\"h\":\"3. elasticsearch 是如何实现 master 选举的\",\"t\":[\"ElasticSearch 的选主是 ZenDiscovery 模块负责，源码分析将首发在。 https://gitee.com/rodert/JavaPub\",\"对所有可以成为 Master 的节点（node.master: true）根据 nodeId 排序，每次选举每个节点都把自己所知道节点排一次序，然后选出第一个（第0位）节点，暂且认为它是 Master 节点。\",\"如果对某个节点的投票数达到一定的值（可以成为master节点数n/2+1）并且该节点自己也选举自己，那这个节点就是master。否则重新选举。 (当然也可以自己设定一个值，最小值设定为超过能成为Master节点的n/2+1，否则会出现脑裂问题。discovery.zen.minimum_master_nodes)\"]},\"1028\":{\"h\":\"4. 描述一下 Elasticsearch 索引文档的过程\",\"t\":[\"客户端向 Node 1 发送新建、索引或者删除请求。\",\"节点使用文档的 _id 确定文档属于分片 0 。请求会被转发到 Node 3，因为分片 0 的主分片目前被分配在 Node 3 上。\",\"Node 3 在主分片上面执行请求。如果成功了，它将请求并行转发到 Node 1 和 Node 2 的副本分片上。一旦所有的副本分片都报告成功, Node 3 将向协调节点报告成功，协调节点向客户端报告成功。\",\"一图胜千文，记住这幅图，上面是文档在节点间分发的过程，接着说一下文档从接收到写入磁盘过程。 协调节点默认使用文档 ID 参与计算（也支持通过 routing），以便为路由提供合适的分片。\",\"shard = hash(document_id) % (num_of_primary_shards)\",\"当分片所在的节点接收到来自协调节点的请求后，会将请求写入到 MemoryBuffer，然后定时（默认是每隔 1 秒）写入到 Filesystem Cache，这个从 MomeryBuffer 到 Filesystem Cache 的过程就叫做 refresh；\",\"当然在某些情况下，存在 Momery Buffer 和 Filesystem Cache 的数据可能会丢失，ES 是通过 translog 的机制来保证数据的可靠性的。其实现机制是接收到请求后，同时也会写入到 translog 中，当 Filesystem cache 中的数据写入到磁盘中时，才会清除掉，这个过程叫做 flush；\",\"在 flush 过程中，内存中的缓冲将被清除，内容被写入一个新段，段的 fsync将创建一个新的提交点，并将内容刷新到磁盘，旧的 translog 将被删除并开始一个新的 translog。\",\"flush 触发的时机是定时触发（默认 30 分钟）或者 translog 变得太大（默认为 512M）时；\",\"1. translog 可以理解为就是一个文件，一直追加。 2. MemoryBuffer 应用缓存。 3. Filesystem Cache 系统缓冲区。\",\"延伸阅读：Lucene 的 Segement:\",\"Lucene 索引是由多个段组成，段本身是一个功能齐全的倒排索引。\",\"段是不可变的，允许 Lucene 将新的文档增量地添加到索引中，而不用从头重建索引。\",\"对于每一个搜索请求而言，索引中的所有段都会被搜索，并且每个段会消耗CPU 的时钟周、文件句柄和内存。这意味着段的数量越多，搜索性能会越低。\",\"为了解决这个问题，Elasticsearch 会合并小段到一个较大的段，提交新的合并段到磁盘，并删除那些旧的小段。\"]},\"1029\":{\"h\":\"5. 详细描述一下 Elasticsearch 搜索的过程？\",\"t\":[\"es作为一个分布式的存储和检索系统，每个文档根据 _id 字段做路由分发被转发到对应的shard上。\",\"搜索执行阶段过程分俩个部分，我们称之为 Query Then Fetch。\",\"5.1 query-查询阶段\",\"当一个search请求发出的时候，这个query会被广播到索引里面的每一个shard（主shard或副本shard），每个shard会在本地执行查询请求后会生成一个命中文档的优先级队列。\",\"这个队列是一个排序好的top N数据的列表，它的size等于from+size的和，也就是说如果你的from是10，size是10，那么这个队列的size就是20，所以这也是为什么深度分页不能用from+size这种方式，因为from越大，性能就越低。\",\"es里面分布式search的查询流程如下：\",\"es里面分布式search的查询流程\",\"查询阶段包含以下三个步骤:\",\"客户端发送一个 search 请求到 Node 3 ， Node 3 会创建一个大小为 from + size 的空优先队列。\",\"Node 3 将查询请求转发到索引的每个主分片或副本分片中。每个分片在本地执行查询并添加结果到大小为 from + size 的本地有序优先队列中。\",\"每个分片返回各自优先队列中所有文档的 ID 和排序值给协调节点，也就是 Node 3 ，它合并这些值到自己的优先队列中来产生一个全局排序后的结果列表。\",\"5.2 fetch - 读取阶段 / 取回阶段\",\"分布式阶段由以下步骤构成：\",\"协调节点辨别出哪些文档需要被取回并向相关的分片提交多个 GET 请求。\",\"每个分片加载并 丰富 文档，如果有需要的话，接着返回文档给协调节点。\",\"一旦所有的文档都被取回了，协调节点返回结果给客户端。\",\"协调节点首先决定哪些文档 确实 需要被取回。例如，如果我们的查询指定了 { \\\"from\\\": 90, \\\"size\\\": 10 } ，最初的90个结果会被丢弃，只有从第91个开始的10个结果需要被取回。这些文档可能来自和最初搜索请求有关的一个、多个甚至全部分片。\",\"协调节点给持有相关文档的每个分片创建一个 multi-get request ，并发送请求给同样处理查询阶段的分片副本。\",\"分片加载文档体-- _source 字段—​如果有需要，用元数据和 search snippet highlighting 丰富结果文档。 一旦协调节点接收到所有的结果文档，它就组装这些结果为单个响应返回给客户端。\",\"拓展阅读： 深翻页（Deep Pagination） --- 先查后取的过程支持用 from 和 size 参数分页，但是这是 有限制的 。 要记住需要传递信息给协调节点的每个分片必须先创建一个 from + size 长度的队列，协调节点需要根据 number_of_shards * (from + size) 排序文档，来找到被包含在 size 里的文档。 取决于你的文档的大小，分片的数量和你使用的硬件，给 10,000 到 50,000 的结果文档深分页（ 1,000 到 5,000 页）是完全可行的。但是使用足够大的 from 值，排序过程可能会变得非常沉重，使用大量的CPU、内存和带宽。因为这个原因，我们强烈建议你不要使用深分页。 实际上， “深分页” 很少符合人的行为。当2到3页过去以后，人会停止翻页，并且改变搜索标准。会不知疲倦地一页一页的获取网页直到你的服务崩溃的罪魁祸首一般是机器人或者web spider。 如果你 确实 需要从你的集群取回大量的文档，你可以通过用 scroll 查询禁用排序使这个取回行为更有效率，我们会在 later in this chapter 进行讨论。 注：https://www.elastic.co/guide/cn/elasticsearch/guide/current/scroll.html\"]},\"1030\":{\"h\":\"6. Elasticsearch 在部署时，对 Linux 的设置有哪些优化方法\",\"t\":[\"关闭缓存swap;\",\"原因：大多数操作系统会将内存使用到文件系统缓存，会将应用程序未用到的内存交换出去。会导致jvm的堆内存交换到磁盘上。交换会导致性能问题。会导致内存垃圾回收延长。会导致集群节点响应时间变慢，或者从集群中断开。\",\"堆内存设置为：Min（节点内存/2, 32GB）;\",\"设置最大文件句柄数；\",\"后俩点不懂可以先说有一定了解，关注JavaPub会做详细讲解。\",\"调整线程池和队列大小\",\"磁盘存储 raid 方式——存储有条件使用 RAID6，增加单节点性能以及避免单节点存储故障。\",\"https://www.elastic.co/cn/blog/how-to-design-your-elasticsearch-data-storage-architecture-for-scale#raid56\"]},\"1031\":{\"h\":\"7. Elasticsearch 中的节点（比如共 20 个），其中的 10 个选了一个 master，另外 10 个选了另一个 master，怎么办？\",\"t\":[\"当集群 master 候选数量不小于 3 个时，可以通过设置最少投票通过数量（discovery.zen.minimum_master_nodes）超过所有候选节点一半以上来解决脑裂问题；\",\"当候选数量为两个时，只能修改为唯一的一个 master 候选，其他作为 data节点，避免脑裂问题。\"]},\"1032\":{\"h\":\"8. 客户端在和集群连接时，如何选择特定的节点执行请求的？\",\"t\":[\"client 远程连接连接一个 elasticsearch 集群。它并不加入到集群中，只是获得一个或者多个初始化的地址，并以轮询的方式与这些地址进行通信。\"]},\"1033\":{\"h\":\"9. 详细描述一下 Elasticsearch 更新和删除文档的过程。\",\"t\":[\"删除和更新也都是写操作，但是 Elasticsearch 中的文档是不可变的，因此不能被删除或者改动以展示其变更；(根本原因是底层lucene的segment段文件不可更新删除)\",\"磁盘上的每个段都有一个相应的 .del 文件。当删除请求发送后，文档并没有真 的被删除，而是在 .del 文件中被标记为删除。该文档依然能匹配查询，但是会在 结果中被过滤掉。当段合并时，在.del 文件中被标记为删除的文档将不会被写入 新段。\",\"在新的文档被创建时，Elasticsearch 会为该文档指定一个版本号，当执行更新 时，旧版本的文档在.del 文件中被标记为删除，新版本的文档被索引到一个新段。\",\"旧版本的文档依然能匹配查询，但是会在结果中被过滤掉。\"]},\"1034\":{\"h\":\"10. Elasticsearch 对于大数据量（上亿量级）的聚合如何实现？\",\"t\":[\"这道题目较难，相信大家看到很多类似这种回答\",\"Elasticsearch 提供的首个近似聚合是cardinality 度量。它提供一个字段的基数，即该字段的distinct或者unique值的数目。它是基于HLL算法的。HLL 会先对我们的输入作哈希运算，然后根据哈希运算的结果中的 bits 做概率估算从而得到基数。其特点是：可配置的精度，用来控制内存的使用（更精确 ＝ 更多内存）；小的数据集精度是非常高的；我们可以通过配置参数，来设置去重需要的固定内存使用量。无论数千还是数十亿的唯一值，内存使用量只与你配置的精确度相关。\",\"科普&拓展：\",\"HyperLogLog： 下面简称为HLL，它是 LogLog 算法的升级版，作用是能够提供不精确的去重计数。存在以下的特点： 1. 能够使用极少的内存来统计巨量的数据，在 Redis 中实现的 HyperLogLog，只需要12K内存就能统计2^64个数据。 2. 计数存在一定的误差，误差率整体较低。标准误差为 0.81% 。 3. 误差可以被设置辅助计算因子进行降低。 --- 应用场景： 1. 基数不大，数据量不大就用不上，会有点大材小用浪费空间 2. 有局限性，就是只能统计基数数量，而没办法去知道具体的内容是什么 3. 和bitmap相比，属于两种特定统计情况，简单来说，HyperLogLog 去重比 bitmap 方便很多 4. 一般可以bitmap和hyperloglog配合使用，bitmap标识哪些用户活跃，hyperloglog计数 --- 应用场景： 1. 基数不大，数据量不大就用不上，会有点大材小用浪费空间 2. 有局限性，就是只能统计基数数量，而没办法去知道具体的内容是什么 3. 和bitmap相比，属于两种特定统计情况，简单来说，HyperLogLog 去重比 bitmap 方便很多 4. 一般可以bitmap和hyperloglog配合使用，bitmap标识哪些用户活跃，hyperloglog计数 来源：刷刷面试\"]},\"1035\":{\"h\":\"11. 在并发情况下，Elasticsearch 如果保证读写一致？\",\"t\":[\"首先要了解什么是一致性，在分布式系统中，我们一般通过CPA理论分析。\",\"分布式系统不可能同时满足一致性（C：Consistency）、可用性（A：Availability）和分区容忍性（P：Partition Tolerance），最多只能同时满足其中两项。\",\"分布式系统不可能同时满足一致性（C：Consistency）、可用性（A：Availability）和分区容忍性（P：Partition Tolerance），最多只能同时满足其中两项。\",\"可以通过版本号使用乐观并发控制，以确保新版本不会被旧版本覆盖，由应用层来处理具体的冲突；\",\"另外对于写操作，一致性级别支持 quorum/one/all，默认为 quorum，即只有当大多数分片可用时才允许写操作。但即使大多数可用，也可能存在因为网络等原因导致写入副本失败，这样该副本被认为故障，分片将会在一个不同的节点上重建。\",\"对于读操作，可以设置 replication 为 sync(默认)，这使得操作在主分片和副本分片都完成后才会返回；如果设置 replication 为 async 时，也可以通过设置搜索请求参数_preference 为 primary 来查询主分片，确保文档是最新版本。\"]},\"1036\":{\"h\":\"11. 介绍一下你们的个性化搜索方案？\",\"t\":[\"如果你没有很多实战经验，可以基于 word2vec 做一些练习，我的博客提供了 word2vec Java版的一些Demo。\",\"基于 word2vec 和 Elasticsearch 实现个性化搜索，它有以下优点：\",\"基于word2vec的商品向量还有一个可用之处，就是可以用来实现相似商品的推荐；\"]},\"1037\":{\"h\":\"推荐阅读：\",\"t\":[\"10道不得不会的Java基础面试题\",\"10道不得不会的Java容器面试题\",\"10道不得不会的Java并发基础面试题\",\"10道不得不会的JavaEE面试题\",\"10道不得不会的JVM面试题\",\"10道不得不会的MySQL基础面试题\",\"10道不得不会的MyBatis面试题\",\"10道不得不会的Spring面试题\",\"10道不得不会的SpringBoot面试题\",\"10道不得不会的ElasticSearch面试题\",\"10道不得不会的Redis面试题\",\"10道不得不会的Kafka面试题\",\"10道不得不会的Zookeeper面试题\",\"10道不得不会的Docker面试题\",\"10道不得不会的缓存面试题\",\"GItHub|GitEE\"]},\"1038\":{\"c\":[\"最少必要面试题\"]},\"1039\":{\"c\":[\"elasticsearch\",\"面试题\"]},\"1040\":{\"h\":\"10道不得不会的Java基础面试题\",\"t\":[\"Java 基础\",\"10道不得不会的Java基础面试题\",\"以下都是Java的基础面试题，相信大家都会有种及眼熟又陌生的感觉、看过可能在短暂的面试后又马上忘记了。JavaPub在这里整理这些容易忘记的重点知识及解答，建议收藏，经常温习查阅。\",\"评论区见\",\"@[toc]\"]},\"1041\":{\"h\":\"1. instanceof 关键字的作用\",\"t\":[\"instanceof 是 Java 的保留关键字。它的作用是测试它左边的对象是否是它右边的类的实例，返回 boolean 的数据类型。\",\"boolean result = obj instanceof class\",\"当 obj 为 Class 的对象，或者是其直接或间接子类，或者是其接口的实现类，结果result 都返回 true，否则返回false。\",\"注意一点：编译器会检查 obj 是否能转换成右边的class类型，如果不能转换则直接报错，如果不能确定类型，则通过编译，具体看运行时定。\",\"obj 必须为引用类型，只能作为对象的判断，不能是基本类型。\",\"int i = 0; System.out.println(i instanceof Integer);//编译不通过 System.out.println(i instanceof Object);//编译不通过\",\"源码参考：JavaSE 8 instanceof 的实现算法：https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5.instanceof\"]},\"1042\":{\"h\":\"2. Java自动装箱和拆箱\",\"t\":[\"什么是装箱拆箱，这里不做源码层面解读，源码解读在JavaPub公众号发出。这里通过讲解 int 和 Interger 区别，解答Java自动装箱和拆箱。\",\"自动装箱 ----- 基本类型的值 → 包装类的实例\",\"自动拆箱 ----- 基本类型的值 ← 包装类的实例\",\"Integer变量必须实例化后才能使用，而int变量不需要\",\"Integer实际是对象的引用，当new一个Integer时，实际上是生成一个指针指向此对象；而int则是直接存储数据值 。\",\"Integer的默认值是null，int的默认值是0\",\"Java中8种基本数据类型。左边基本类型，右边包装类型。 \",\"在面试中：\",\"下面这段代码的输出结果是什么？\",\"public class Main { public static void main(String[] args) { Integer i1 = 100; Integer i2 = 100; Integer i3 = 200; Integer i4 = 200; System.out.println(i1==i2); System.out.println(i3==i4); } } //true //false\",\"输出结果表明i1和i2指向的是同一个对象，而i3和i4指向的是不同的对象。此时只需一看源码便知究竟，下面这段代码是Integer的valueOf方法的具体实现：\",\"public static Integer valueOf(int i) { if(i >= -128 && i <= IntegerCache.high) return IntegerCache.cache[i + 128]; else return new Integer(i); }\",\"private static class IntegerCache { static final int high; static final Integer cache[]; static { final int low = -128; // high value may be configured by property int h = 127; if (integerCacheHighPropValue != null) { // Use Long.decode here to avoid invoking methods that // require Integer's autoboxing cache to be initialized int i = Long.decode(integerCacheHighPropValue).intValue(); i = Math.max(i, 127); // Maximum array size is Integer.MAX_VALUE h = Math.min(i, Integer.MAX_VALUE - -low); } high = h; cache = new Integer[(high - low) + 1]; int j = low; for(int k = 0; k < cache.length; k++) cache[k] = new Integer(j++); } private IntegerCache() {} }\",\"从这2段代码可以看出，在通过valueOf方法创建Integer对象的时候，如果数值在[-128,127]之间，便返回指向IntegerCache.cache中已经存在的对象的引用；否则创建一个新的Integer对象。\",\"上面的代码中i1和i2的数值为100，因此会直接从cache中取已经存在的对象，所以i1和i2指向的是同一个对象，而i3和i4则是分别指向不同的对象。\",\"注意，Integer、Short、Byte、Character、Long这几个类的valueOf方法的实现是类似的。 Double、Float的valueOf方法的实现是类似的（没有缓存数值，这里的数值想想都有很多，不适合缓存）。\"]},\"1043\":{\"h\":\"3. 重载和重写区别\",\"t\":[\"重载和重写是一个特别好理解的概念，这里说一个通俗的解答方式\",\"重载（Overload）:首先是位于一个类之中或者其子类中，具有相同的方法名，但是方法的参数不同，返回值类型可以相同也可以不同。\",\"方法名必须相同\",\"方法的参数列表一定不一样。\",\"访问修饰符和返回值类型可以相同也可以不同。\",\"其实简单而言：重载就是对于不同的情况写不同的方法。 比如，同一个类中，写不同的构造函数用于初始化不同的参数。\",\"public class JavaPubTest { public void out(){ System.out.println(\\\"参数\\\"+null); } //参数数目不同 public void out(Integer n){ System.out.println(\\\"参数\\\"+n.getClass().getName()); } //参数类型不同 public void out(String string){ System.out.println(\\\"参数\\\"+string.getClass().getName()); } public void out(Integer n ,String string){ System.out.println(\\\"参数\\\"+n.getClass().getName()+\\\",\\\"+string.getClass().getName()); } //参数顺序不同 public void out(String string,Integer n){ System.out.println(\\\"参数\\\"+string.getClass().getName()+\\\",\\\"+n.getClass().getName()); } public static void main(String[] args) { JavaPubTest javaPubTest = new JavaPubTest(); javaPubTest.out(); javaPubTest.out(1); javaPubTest.out(\\\"string\\\"); javaPubTest.out(1,\\\"string\\\"); javaPubTest.out(\\\"string\\\",1); } }\",\"**重写（Overriding）**发生在父类子类之间，比如所有类都是继承与Object类的，Object类中本身就有equals、hashcode、toString方法等。在任意子类中定义了重名和同样的参数列表就构成方法重写。\",\"方法名必须相同，返回值类型必须相同。\",\"参数列表必须相同。\",\"访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为public，那么在子类中重写该方法就不能声明为protected。\",\"子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为private和final的方法。\",\"构造方法不能被重写。\"]},\"1044\":{\"h\":\"4. equals与==区别\",\"t\":[\"\\\"==\\\"是判断两个变量或实例是不是指向同一个内存空间。\\\"equals\\\"是判断两个变量或实例所指向的内存空间的值是不是相同。\",\"除了这俩点，这个问题大概率会引出以下问题：\",\"为什么重写equals还要重写hashcode?\",\"通过上面俩条我们知道 \\\"equals\\\"是判断两个变量或实例所指向的内存空间的值是不是相同。 但是一些特殊场景，我们需要对比俩个对象是否相等，例如：User user1 = new User();User user2 = new User(); user1 和 user2 对比。这是我们就需要重写 equals 方法。\",\"所以可以通过重写equals()方法来判断对象的值是否相等，但是有一个要求：equals()方法实现了等价关系，即：\",\"自反性：对于任何非空引用x，x.equals(x)应该返回true；\",\"对称性：对于任何引用x和y，如果x.equals(y)返回true，那么y.equals(x)也应该返回true；\",\"传递性：对于任何引用x、y和z，如果x.equals(y)返回true，y.equals(z)返回true，那么x.equals(z)也应该返回true；\",\"一致性：如果x和y引用的对象没有发生变化，那么反复调用x.equals(y)应该返回同样的结果；\",\"非空性：对于任意非空引用x，x.equals(null)应该返回false；\",\"到这里也是一个很正常的操作，但是当我们要用到 HashSet 等集合时。存储的对象我们需要用 hashcode 判断对象是否存在，如果使用 Object 默认的hashcode方法，那我们同样属性的俩个用户一定是不相等的(例如下面user3、user4)，因为内存地址不同，这并不符合我们的业务，所以决定了重写 hashcode 的必要性。\",\"User user3 = new User(\\\"JavaPub\\\", \\\"man\\\", \\\"1996-08-28\\\") User user4 = new User(\\\"JavaPub\\\", \\\"man\\\", \\\"1996-08-28\\\")\"]},\"1045\":{\"h\":\"5. 谈谈NIO和BIO区别\",\"t\":[\"致力于大白话说清楚。NIO和BIO是一个相对有点抽象的概念，如果你对网络有点了解，理解起来可能会更顺畅。首先说一下基本\",\"BIO：同步阻塞IO，每一个客户端连接，服务端都会对应一个处理线程，对于没有分配到处理线程的连接就会被阻塞或者拒绝。相当于是一个连接一个线程。\",\"NIO：同步非阻塞IO，基于Reactor模型，客户端和channel进行通信，channel可以进行读写操作，通过多路复用器selector来轮询注册在其上的channel，而后再进行IO操作。这样的话，在进行IO操作的时候再用一个线程去处理就可以了，也就是一个请求一个线程。\",\"Reactor模型是什么?\",\"基于池化思想，避免为每个连接创建线程，连接完成后将业务处理交给线程池处理\",\"基于IO复用模型，多个连接共用同一个阻塞对象，不用等待所有的连接。遍历到有新数据可以处理时，操作系统会通知程序，线程跳出阻塞状态，进行业务逻辑处理 .\",\"简单来说：Reactor线程模型的思想就是基于IO复用和线程池的结合。\",\"AIO：（一般都会把AIO和NIO、BIO放一块比较，这里简单提一下。）异步非阻塞IO，相比NIO更进一步，完全由操作系统来完成请求的处理，然后通知服务端开启线程去进行处理，因此是一个有效请求一个线程。\",\"那么怎么理解同步和阻塞？\",\"首先，可以认为一个IO操作包含两个部分：\",\"发起IO请求\",\"实际的IO读写操作\",\"同步和异步在于第二个，实际的IO读写操作，如果操作系统帮你完成了再通知你，那就是异步，否则都叫做同步。\",\"阻塞和非阻塞在于第一个，发起IO请求，对于NIO来说通过channel发起IO操作请求后，其实就返回了，所以是非阻塞。\",\"NIO和BIO是非常重要的计算机知识，学习后会对整个计算机的理解更近一步，一次学会终身受益。JavaPub会单独写一篇深入图解NIO和BIO。\",\"网上看到一个例子（一定要看，会对你有所帮助）：\",\"一辆从 A 开往 B 的公共汽车上，路上有很多点可能会有人下车。司机不知道哪些点会有哪些人会下车，对于需要下车的人，如何处理更好？ 1. 司机过程中定时询问每个乘客是否到达目的地，若有人说到了，那么司机停车，乘客下车。 ( 类似阻塞式 ) 2. 每个人告诉售票员自己的目的地，然后睡觉，司机只和售票员交互，到了某个点由售票员通知乘客下车。 ( 类似非阻塞 ) 很显然，每个人要到达某个目的地可以认为是一个线程，司机可以认为是 CPU 。在阻塞式里面，每个线程需要不断的轮询，上下文切换，以达到找到目的地的结果。而在非阻塞方式里，每个乘客 ( 线程 ) 都在睡觉 ( 休眠 ) ，只在真正外部环境准备好了才唤醒，这样的唤醒肯定不会阻塞。\",\"建议阅读： https://www.cnblogs.com/aspirant/p/6877350.html https://www.cnblogs.com/shoshana-kong/p/11228555.html\"]},\"1046\":{\"h\":\"6. String、StringBuffer、StringBuilder 的区别是什么？\",\"t\":[\"String是Immutable类的典型实现，被声明为 final class，除了hash这个属性其它属性都声明为final。它的不可变性，所以例如拼接字符串时候会产生很多无用的中间对象，如果频繁的进行这样的操作对性能有所影响。\",\"StringBuffer、StringBuilder就是解决String的这个性能问题。\",\"StringBuffer 是线程安全的，本质是一个线程安全的可修改的字符序列，把所有修改数据的方法都加上synchronized。\",\"StringBuffer 线程不安全，但是性能更好。\"]},\"1047\":{\"h\":\"7. 泛型是什么，有什么特点\",\"t\":[\"泛型在编码中有非常广泛的使用（jdk5引入），你一定经常能见到类似这种写法 <T> 。\",\"泛型提供了编译时类型安全检测机制，允许在编译时检测到非法的类型。本质是参数化类型。\",\"把类型当作是参数一样传递\",\"<数据类型>只能是引用类型\",\"泛型：就是一种不确定的数据类型。\",\"泛型的好处：\",\"省略了强转的代码。\",\"可以把运行时的问题提前到编译时期。\",\"引入泛型主要想实现一个通用的、可以处理不同类型的方法\",\"泛型擦除:\",\"泛型时提供给javac编译器使用的，用于限定集合的输入类型，让编译器在源代码级别上，避免向集合中插入非法数据。但编译器编译完带有泛型的java程序后，生成的class文件中不再带有泛型信息，以此使程序运行效率不受影响，这个过程称为擦除。\",\"JVM并不知道泛型的存在，因为泛型在编译阶段就已经被处理成普通的类和方法； 处理机制是通过类型擦除，擦除规则：\",\"若泛型类型没有指定具体类型，用Object作为原始类型；\",\"若有限定类型< T exnteds XClass >，使用XClass作为原始类型；\",\"若有多个限定< T exnteds XClass1 & XClass2 >，使用第一个边界类型XClass1作为原始类型；\"]},\"1048\":{\"h\":\"8. final 有哪些用法\",\"t\":[\"final关键字有四个常见用法。\",\"final修饰一个类\",\"当 final 关键字用来修饰一个类的时候，表明这个类不能有任何的子类，也就是说这个类不能被继承。\",\"final类中的所有成员方法都会被隐式地指定为final方法，也就是说一个类如果是final的，那么其中所有的成员方法都无法进行覆盖重写。\",\" public final class 类名称 { // ... }\",\"final修饰一个方法\",\"当 final 关键字用来修饰一个方法的时候，这个方法就是最终方法，也就是不能被覆盖重写。\",\" 修饰符 final 返回值类型 方法名称(参数列表) { // 方法体 }\",\"注意：对于类、方法来说，abstract 关键字和 final 关键字不能同时使用，因为矛盾。\",\"final修饰一个局部变量\",\"一旦使用 final 用来修饰局部变量，那么这个变量就不能进行更改「一次赋值，终生不变」。\",\"对于基本类型来说，不可变说的是变量当中的数据不可改变；\",\"对于引用类型来说，不可变说的是变量当中的地址值不可改变。\",\"final修饰一个成员变量\",\"对于成员变量来说，如果使用 final 关键字修饰，那么这个变量也照样是不可变。\",\"由于成员变量具有默认值，所以用了 final 之后必须手动赋值，不会再给默认值了；\",\"对于 final 的成员变量，要么使用直接赋值，要么通过构造方法赋值，必须二者选其一；\",\"必须保证类当中所有重载的构造方法都最终会对 final 的成员变量进行赋值。\"]},\"1049\":{\"h\":\"9. 说一下Java注解\",\"t\":[\"在Java编程中，注解非常常见，注解的本质是什么？\",\"注解大致分为以下三种：\",\"Java原生注解 如@Override，@Deprecated 等。大多用于 [标记] 和 [检查] 。\",\"第三方注解，如 Spring、Mybatis等定义的注解（@Controller，@Data）。\",\"自定义注解。\",\"Java原生除了提供基本注解，还提供了 meta-annotation（元注解）。这些类型和它们所支持的类在java.lang.annotation包中可以找到。\",\"@Target\",\"@Retention\",\"@Documented\",\"@Inherited\",\"在这里插入图片描述\",\"一般比较常用的有 @Target，@Retention。@Target表示这个注解可以修饰那些地方（比如类、方法、成员变量），@Retention 主要是设置注解的生命周期。\",\"这是你一定会被问，\",\"有使用过注解吗？\",\"你是怎么使用的？\",\"注解有一个非常常见的使用场景，大家可以用这个来理解学习。\",\"场景一：自定义注解+拦截器 实现登录校验\",\"实现功能：\",\"接下来，我们使用springboot拦截器实现这样一个功能，如果方法上加了@LoginRequired，则提示用户该接口需要登录才能访问，否则不需要登录。\",\"首先定义一个LoginRequired注解\",\"@Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface LoginRequired { }\",\"然后写两个简单的接口，访问sourceA，sourceB资源\",\"@RestController public class IndexController { @GetMapping(\\\"/sourceA\\\") public String sourceA(){ return \\\"你正在访问sourceA资源\\\"; } @GetMapping(\\\"/sourceB\\\") public String sourceB(){ return \\\"你正在访问sourceB资源\\\"; } }\",\"很简单的俩个接口，没添加拦截器之前成功访问\",\"在这里插入图片描述\",\"实现 spring 的 HandlerInterceptor 类先实现拦截器，但不拦截，只是简单打印日志，如下：\",\"public class SourceAccessInterceptor implements HandlerInterceptor { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { System.out.println(\\\"进入拦截器了\\\"); return true; } @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception { } @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception { } }\",\"实现spring类 WebMvcConfigurer，创建配置类把拦截器添加到拦截器链中\",\"@Configuration public class InterceptorTrainConfigurer implements WebMvcConfigurer { @Override public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(new SourceAccessInterceptor()).addPathPatterns(\\\"/**\\\"); } }\",\"拦截成功如下\",\" 在 sourceB 方法上添加我们的登录注解 @LoginRequired\",\"@RestController public class IndexController { @GetMapping(\\\"/sourceA\\\") public String sourceA(){ return \\\"你正在访问sourceA资源\\\"; } @LoginRequired @GetMapping(\\\"/sourceB\\\") public String sourceB(){ return \\\"你正在访问sourceB资源\\\"; } }\",\"简单实现登录拦截逻辑\",\" @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { System.out.println(\\\"进入拦截器了\\\"); // 反射获取方法上的LoginRequred注解 HandlerMethod handlerMethod = (HandlerMethod)handler; LoginRequired loginRequired = handlerMethod.getMethod().getAnnotation(LoginRequired.class); if(loginRequired == null){ return true; } // 有LoginRequired注解说明需要登录，提示用户登录 response.setContentType(\\\"application/json; charset=utf-8\\\"); response.getWriter().print(\\\"你访问的资源需要登录\\\"); return false; }\",\"运行成功，访问sourceB时需要登录了，访问sourceA则不用登录。 \",\"场景二：自定义注解+AOP 实现日志打印\",\"先导入切面需要的依赖包\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-aop</artifactId> </dependency>\",\"定义一个注解@MyLog\",\"@Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface MyLog { }\",\"定义一个切面类，见如下代码注释理解：\",\"@Aspect // 1.表明这是一个切面类 @Component public class MyLogAspect { // 2. PointCut表示这是一个切点，@annotation表示这个切点切到一个注解上，后面带该注解的全类名 // 切面最主要的就是切点，所有的故事都围绕切点发生 // logPointCut()代表切点名称 @Pointcut(\\\"@annotation(com.javapub.blog.MyLog)\\\") public void logPointCut(){}; // 3. 环绕通知 @Around(\\\"logPointCut()\\\") public void logAround(ProceedingJoinPoint joinPoint){ // 获取方法名称 String methodName = joinPoint.getSignature().getName(); // 获取入参 Object[] param = joinPoint.getArgs(); StringBuilder sb = new StringBuilder(); for(Object o : param){ sb.append(o + \\\"; \\\"); } System.out.println(\\\"进入[\\\" + methodName + \\\"]方法,参数为:\\\" + sb.toString()); // 继续执行方法 try { joinPoint.proceed(); } catch (Throwable throwable) { throwable.printStackTrace(); } System.out.println(methodName + \\\"方法执行结束\\\"); } }\",\"在步骤二中的IndexController写一个sourceC进行测试，加上我们的自定义注解：\",\" @MyLog @GetMapping(\\\"/sourceC/{source_name}\\\") public String sourceC(@PathVariable(\\\"source_name\\\") String sourceName){ return \\\"你正在访问sourceC资源\\\"; }\",\"启动springboot web项目，输入访问地址\",\"有些面试官喜欢问，注解三要素是哪些：\",\"注解声明、\",\"使用注解的元素、\",\"操作注解使其起作用(注解处理器)\"]},\"1050\":{\"h\":\"10. Java创建对象有几种方式\",\"t\":[\"Java中有5种创建对象的方式，下面给出它们的例子\",\"使用new关键字\",\"User user = new User();\",\"使用Class类的newInstance方法\",\"我们也可以使用Class类的newInstance方法创建对象。这个newInstance方法调用无参的构造函数创建对象。\",\"Employee emp = (Employee) Class.forName(\\\"org.javapub.blog.Employee\\\").newInstance(); 或者 Employee emp2 = Employee.class.newInstance();\",\"使用Constructor类的newInstance方法\",\"和Class类的newInstance方法很像， java.lang.reflect.Constructor类里也有一个newInstance方法可以创建对象。我们可以通过这个newInstance方法调用有参数的和私有的构造函数。\",\"Constructor<Employee> constructor = Employee.class.getConstructor(); Employee emp3 = constructor.newInstance();\",\"使用clone方法\",\"无论何时我们调用一个对象的clone方法，jvm就会创建一个新的对象，将前面对象的内容全部拷贝进去。用clone方法创建对象并不会调用任何构造函数。\",\"要使用clone方法，我们需要先实现Cloneable接口并实现其定义的clone方法。\",\"Employee emp4 = (Employee) emp3.clone();\",\"使用反序列化\",\"当我们序列化和反序列化一个对象，jvm会给我们创建一个单独的对象。在反序列化时，jvm创建对象并不会调用任何构造函数。\",\"为了反序列化一个对象，我们需要让我们的类实现Serializable接口\",\"ObjectInputStream in = new ObjectInputStream(new FileInputStream(\\\"data.obj\\\")); Employee emp5 = (Employee) in.readObject();\",\"联系JavaPub:\",\"如果需要下载CSDN资料又没有积分可以JavaPub留言，JavaPub帮你下载\",\"查看更多面试题及答案 \"]},\"1051\":{\"h\":\"推荐阅读：\",\"t\":[\"10道不得不会的Java基础面试题\",\"10道不得不会的Java容器面试题\",\"10道不得不会的Java并发基础面试题\",\"10道不得不会的JavaEE面试题\",\"10道不得不会的JVM面试题\",\"10道不得不会的MySQL基础面试题\",\"10道不得不会的MyBatis面试题\",\"10道不得不会的Spring面试题\",\"10道不得不会的SpringBoot面试题\",\"10道不得不会的ElasticSearch面试题\",\"10道不得不会的Redis面试题\",\"10道不得不会的Kafka面试题\",\"10道不得不会的Zookeeper面试题\",\"10道不得不会的Docker面试题\",\"10道不得不会的缓存面试题\",\"GItHub|GitEE\"]},\"1052\":{\"c\":[\"最少必要面试题\"]},\"1053\":{\"c\":[\"java\",\"面试题\"]},\"1054\":{\"h\":\"10道不得不会的Java并发基础面试题\",\"t\":[\"Java并发\",\"10道不得不会的Java并发基础面试题\",\"以下都是Java的并发基础面试题，相信大家都会有种及眼熟又陌生的感觉、看过可能在短暂的面试后又马上忘记了。JavaPub在这里整理这些容易忘记的重点知识及解答，建议收藏，经常温习查阅。\",\"评论区见\",\"@[toc]\"]},\"1055\":{\"h\":\"1. start()方法和run()方法的区别\",\"t\":[\"如果只是调用 run() 方法，那么代码还是同步执行的，必须等待一个线程的run()方法里面的代码全部执行完毕之后，另外一个线程才可以执行其run()方法里面的代码。\",\"只有调用了start()方法，才会表现出多线程的特性，不同线程的run()方法里面的代码交替执行。\",\"参考图：\",\"在这里插入图片描述\"]},\"1056\":{\"h\":\"2. volatile关键字的作用\",\"t\":[\"volatile 英 [ˈvɒlətaɪl] ，第一个想到的一定是保证内存可见性（Memory Visibility）。可见性是性对于线程而言。\",\" 上图是Java内存模型，所有线程的共享变量都放在主内存中，每一个线程都有一个独有的工作内存，每个线程不直接操作在主内存中的变量，而是将主内存上变量的副本放进自己的工作内存中，只操作工作内存中的数据。当修改完毕后，再把修改后的结果放回到主内存中。每个线程都只操作自己工作内存中的变量，无法直接访问对方工作内存中的变量，线程间变量值的传递需要通过主内存来完成。\",\"很明显，在并发环境下一定会发生脏数据问题。\",\"使用volatile变量能够保证:\",\"每次读取前必须先从主内存刷新最新的值。\",\"每次写入后必须立即同步回主内存当中。\",\"也就是说，volatile关键字修饰的变量看到的随时是自己的最新值。\",\"防止指令重排\",\"在基于偏序关系的Happens-Before内存模型中，指令重排技术大大提高了程序执行效率。但是也引入一个新问题：被部分初始化的对象\",\"例子：\",\"创建一个对象 instance = new Singleton();\",\"它并不是一个原子操作。事实上，它可以”抽象“为下面几条JVM指令：\",\"memory = allocate(); //1：分配对象的内存空间 initInstance(memory); //2：初始化对象 instance = memory; //3：设置instance指向刚分配的内存地址\",\"上面操作2依赖于操作1，但是操作3并不依赖于操作2，所以JVM可以以“优化”为目的对它们进行重排序，经过重排序后如下：\",\"memory = allocate(); //1：分配对象的内存空间 instance = memory; //3：设置instance指向刚分配的内存地址（此时对象还未初始化） initInstance(memory); //2：初始化对象\",\"可以看到指令重排之后，操作 3 排在了操作 2 之前，即引用instance指向内存memory时，这段崭新的内存还没有初始化。由于instance已经指向了一块内存空间，从而返回 instance!=null，用户得到了没有完成初始化的“半个”单例。\",\"但是有一点：volatile不保证原子性。\",\"这里有一篇生产环境使用volatile的例子：https://mp.weixin.qq.com/s/s1cwut9WvUSrMYw_6UK3sg\"]},\"1057\":{\"h\":\"3. sleep方法和wait方法有什么区别\",\"t\":[\"要了解sleep和wait，首先需要了解Java线程的6种状态。\",\"#下面是Java线程的6种状态 1. 初始(NEW)：新创建了一个线程对象，但还没有调用start()方法。 2. 运行(RUNNABLE)：Java线程中将就绪（ready）和运行中（running）两种状态笼统的称为“运行”。 线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取CPU的使用权，此时处于就绪状态（ready）。就绪状态的线程在获得CPU时间片后变为运行中状态（running）。 3. 阻塞(BLOCKED)：表示线程阻塞于锁。 4. 等待(WAITING)：进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断）。 5. 超时等待(TIMED_WAITING)：该状态不同于WAITING，它可以在指定的时间后自行返回。 6. 终止(TERMINATED)：表示该线程已经执行完毕。\",\"sleep 休眠方法\",\"static void sleep(long ms)\",\"该方法会使当前线程进入阻塞状态指定毫秒，当阻塞指定毫秒后，当前线程会重新进入Runnable状态，等待划分时间片。\",\"sleep方法属于Thread类中方法，表示让一个线程进入睡眠状态，等待一定的时间之后，自动醒来进入到可运行状态，不会马上进入运行状态，因为线程调度机制恢复线程的运行也需要时间，一个线程对象调用了sleep方法之后，并不会释放他所持有的所有对象锁，所以也就不会影响其他进程对象的运行。\",\"wait 方法一般是跟notify方法连用的\",\"多线程之间需要协调工作。如果条件不满足则等待。当条件满足时，等待该条件的线程将被唤醒。在Java中，这个机制实现依赖于wait/notify或wait/notifyAll。\",\"object.wait()让当前线程进入不可运行状态，如sleep()一样，但不同的是wait方法从一个对象调用，而不是从一个线程调用；我们称这个对象为“锁定对象（lockObj）”。在lockObj.wait()被调用之前，当前线程必须在lockObj上同步（synchronize）；然后调用wait()后释放这个锁，并将线程增加到与lockObj相关的“等待名单（wait list）”。然后，另一个在同一个lockObj锁定（synchronize）的方法可以调用lockObj.nofity()。这会唤醒原来等待的线程。基本上，wait() / notify()就像sleep() / interrupt()，只是活动线程不需要直接指向一个睡眠线程，他们只需要共享锁对象（lockObj）。\",\"到这里你是否明白这个问题，如果不明白来JavaPub，后续一篇代码分析，马上安排。\"]},\"1058\":{\"h\":\"4. 如何停止一个正在运行的线程？\",\"t\":[\"最直观的一定是 Thread.stop，但是它是不推荐的，并且已经废弃。看一下官方说明 https://docs.oracle.com/javase/8/docs/technotes/guides/concurrency/threadPrimitiveDeprecation.html\",\"* This method is inherently unsafe. Stopping a thread with * Thread. stop causes it to unlock all of the monitors that it * has locked (as a natural consequence of the unchecked * <code>ThreadDeath</code> exception propagating up the stack). If * any of the objects previously protected by these monitors were in * an inconsistent state, the damaged objects become visible to * other threads, potentially resulting in arbitrary behavior. Many * uses of <code>stop</code> should be replaced by code that simply * modifies some variable to indicate that the target thread should * stop running. The target thread should check this variable * regularly, and return from its run method in an orderly fashion * if the variable indicates that it is to stop running. If the * target thread waits for long periods (on a condition variable, * for example), the <code>interrupt</code> method should be used to * interrupt the wait.\",\"小结： 简单来说，Thread.stop()不安全，已不再建议使用。\",\"方法一：\",\"使用 interrupt 方法中断线程。\",\"interrupt()方法的使用效果并不像for+break语句那样，马上就停止循环。调用interrupt方法是在当前线程中打了一个停止标志，并不是真的停止线程。\",\"需要 this.isInterrupted(): 测试线程是否真的已经中断。\",\"方法二：\",\"最好的一种方法，使用标志位停止。\",\"run() 方法中做标识符，保证优雅的停止服务。\"]},\"1059\":{\"h\":\"5. java如何实现多线程之间的通讯和协作？(如何在两个线程间共享数据？)\",\"t\":[\"volatile关键字方式\",\"volatile有两大特性，一是可见性，二是有序性，禁止指令重排序，其中可见性就是可以让线程之间进行通信。\",\"等待/通知机制\",\"等待通知机制是基于wait和notify方法来实现的，在一个线程内调用该线程锁对象的wait方法，线程将进入等待队列进行等待直到被通知或者被唤醒。\",\"也就是通过等待/通知机制 让多个线程协作\",\"join方式\",\"join其实合理理解成是线程合并，当在一个线程调用另一个线程的join方法时，当前线程阻塞等待被调用join方法的线程执行完毕才能继续执行，所以join的好处能够保证线程的执行顺序，但是如果调用线程的join方法其实已经失去了并行的意义，虽然存在多个线程，但是本质上还是串行的，最后join的实现其实是基于等待通知机制的。\",\"threadLocal方式\",\"threadLocal方式的线程通信，不像以上三种方式是多个线程之间的通信，它更像是一个线程内部的通信，将当前线程和一个map绑定，在当前线程内可以任意存取数据，减省了方法调用间参数的传递。\"]},\"1060\":{\"h\":\"6. 什么是ThreadLocal?\",\"t\":[\"定义：线程局部变量是局限于线程内的变量，属于线程自身所有，不在多个线程间共享。java提供 ThreadLocal类 来支持线程局部变量，是一个实现线程安全的方式。\",\"作用：ThreadLocal 是一种以空间换时间的做法，在每一个 Thread 里面维护了一个 ThreadLocal.ThreadLocalMap 把数据进行隔离，数据不共享，自然就没有线程安全方面的问题了。\"]},\"1061\":{\"h\":\"7. Java 中 CountDownLatch 和 CyclicBarrier 有什么不同？\",\"t\":[\"概念：\",\"CountDownLatch 是一个同步的辅助类，允许一个或多个线程，等待其他一组线程完成操作，再继续执行。简单来说：CountDownLatch 是一个计数器，可以保证线程之间的顺序执行把线程从并发状态调整为串行状态保证了线程的执行顺序。(只可以使用一次)\",\"CyclicBarrier 是一个同步的辅助类，允许一组线程相互之间等待，达到一个共同点，再继续执行。典型场景：可以用于多线程计算数据，最后合并计算结果。（可以多次使用）\",\"分享一个直观的代码：\",\"package com.javapub.test; import java.util.concurrent.CountDownLatch; /** * @Author: JavaPub * @License: https://github.com/Rodert/ * @Contact: https://javapub.blog.csdn.net/ * @Date: 2022/1/1 16:50 * @Version: 1.0 * @Description: countDownLatch 可以保证线程之间的顺序执行把线程从并发状态调整为串行状态保证了线程的执行顺序。 * demo效果：当打印完B，再打印C。 */ class ThreadA extends Thread { private CountDownLatch down; public ThreadA(CountDownLatch down) { this.down = down; } @Override public void run() { System.out.println(\\\"A\\\"); try { down.await();//相当于wait(),调用await()方法的线程会被挂起，它会等待直到count值为0才继续执行 } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\\\"C\\\"); } } class ThreadB extends Thread { private CountDownLatch down; public ThreadB(CountDownLatch down) { this.down = down; } @Override public void run() { System.out.println(\\\"B\\\"); System.out.println(down.getCount()); down.countDown();//将count值减1 } } public class Test { public static void main(String[] args) { CountDownLatch down = new CountDownLatch(1);//创建1个计数器 new ThreadA(down).start(); new ThreadB(down).start(); } } /*输出 A B C */\",\"package com.roundyuan.fanggateway.test; import java.util.concurrent.CyclicBarrier; /** * @Author: JavaPub * @License: https://github.com/Rodert/ * @Contact: https://javapub.blog.csdn.net/ * @Date: 2022/1/2 13:42 * @Version: 1.0 * @Description: CyclicBarrier */ public class CyclicBarrierDemo { static class TaskThread extends Thread { CyclicBarrier barrier; public TaskThread(CyclicBarrier barrier) { this.barrier = barrier; } @Override public void run() { try { Thread.sleep(1000); System.out.println(getName() + \\\" 到达栅栏 A\\\"); barrier.await(); System.out.println(getName() + \\\" 冲破栅栏 A\\\"); Thread.sleep(2000); System.out.println(getName() + \\\" 到达栅栏 B\\\"); barrier.await(); System.out.println(getName() + \\\" 冲破栅栏 B\\\"); } catch (Exception e) { e.printStackTrace(); } } } public static void main(String[] args) { int threadNum = 5; CyclicBarrier barrier = new CyclicBarrier(threadNum, new Runnable() { @Override public void run() { System.out.println(Thread.currentThread().getName() + \\\" 完成最后任务\\\"); } }); for (int i = 0; i < threadNum; i++) { new TaskThread(barrier).start(); } } } /* Thread-3 到达栅栏 A Thread-1 到达栅栏 A Thread-4 到达栅栏 A Thread-2 到达栅栏 A Thread-0 到达栅栏 A Thread-2 完成最后任务 Thread-2 冲破栅栏 A Thread-0 冲破栅栏 A Thread-4 冲破栅栏 A Thread-3 冲破栅栏 A Thread-1 冲破栅栏 A Thread-4 到达栅栏 B Thread-0 到达栅栏 B Thread-2 到达栅栏 B Thread-1 到达栅栏 B Thread-3 到达栅栏 B Thread-3 完成最后任务 Thread-3 冲破栅栏 B Thread-0 冲破栅栏 B Thread-4 冲破栅栏 B Thread-1 冲破栅栏 B Thread-2 冲破栅栏 B */\",\"网上看到一个比较形象一个例子：\",\"CountDownLatch： 宿管阿姨，晚上关宿舍大门睡觉，需要等到所有学生回寝，才能关门睡觉，学生之间不用相互等待，回寝就能睡觉。 （学生就是各个线程，宿管阿姨就是监听CountDownLatch为0后要执行的。） CyclicBarrier： 家庭聚餐，等待家庭成员到齐才能开饭，家庭成员之间需要相互等待，直到最后一个到达，才能同时开饭。\"]},\"1062\":{\"h\":\"8. 如何避免死锁？\",\"t\":[\" 从上图我们就可以看出，产生死锁就是俩个或多个线程在申请资源时，自己需要的资源别别人持有、并阻塞。所以导致死锁。\",\"如何解决：\",\"减小锁的范围，尽量保证之锁定自己需要的资源，减小交叉持有资源情况\",\"但是有些时候不得不持有多个资源，比如银行转账，我们必须同时获得两个账户上的锁，才能进行操作，两个锁的申请必须发生交叉。这时我们也可以打破死锁的那个闭环，在涉及到要同时申请两个锁的方法中，总是以相同的顺序来申请锁，比如总是先申请 id 大的账户上的锁 ，然后再申请 id 小的账户上的锁，这样就无法形成导致死锁的那个闭环。\",\"我们知道导致死锁有一个因素是阻塞，所以如果我们不使用默认阻塞的锁，也是可以避免死锁的。我们可以使用 ReentrantLock.tryLock() 方法，在一个循环中，如果 tryLock() 返回失败，那么就释放以及获得的锁，并睡眠一小段时间。这样就打破了死锁的闭环。\",\"package com.roundyuan.fanggateway.test; import java.util.Random; import java.util.concurrent.TimeUnit; import java.util.concurrent.locks.Lock; import java.util.concurrent.locks.ReentrantLock; /** * @Author: JavaPub * @License: https://github.com/Rodert/ * @Contact: https://javapub.blog.csdn.net/ * @Date: 2022/1/2 14:38 * @Version: 1.0 * @Description: ReentrantLock */ public class DeadLock { private static Lock lock1 = new ReentrantLock(); private static Lock lock2 = new ReentrantLock(); public static void deathLock() { new Thread() { @Override public void run() { while (true) { if (lock1.tryLock()) { try { //如果获取成功则执行业务逻辑，如果获取失败，则释放lock1的锁，自旋重新尝试获得锁 if (lock2.tryLock()) { try { System.out.println(\\\"Thread1：已成功获取 lock1 and lock2 ...\\\"); break; } finally { lock2.unlock(); } } } finally { lock1.unlock(); } } System.out.println(\\\"Thread1：获取锁失败，重新获取---\\\"); try { //防止发生活锁 TimeUnit.NANOSECONDS.sleep(new Random().nextInt(100)); } catch (InterruptedException e) { e.printStackTrace(); } } } }.start(); new Thread() { @Override public void run() { while (true) { if (lock2.tryLock()) { try { //如果获取成功则执行业务逻辑，如果获取失败，则释放lock2的锁，自旋重新尝试获得锁 if (lock1.tryLock()) { try { System.out.println(\\\"Thread2：已成功获取 lock2 and lock1 ...\\\"); break; } finally { lock1.unlock(); } } } finally { lock2.unlock(); } } System.out.println(\\\"Thread2：获取锁失败，重新获取---\\\"); try { //防止发生活锁 TimeUnit.NANOSECONDS.sleep(new Random().nextInt(100)); } catch (InterruptedException e) { e.printStackTrace(); } } } }.start(); } public static void main(String[] args) throws InterruptedException { for (int i = 0; i < 5; i++) { deathLock(); } } }\",\"说起死锁，银行家算法非常有必要了解：\",\"银行家算法（Banker’s Algorithm）是一个避免死锁（Deadlock）的著名算法，是由艾兹格·迪杰斯特拉在1965年为T.H.E系统设计的一种避免死锁产生的算法。它以银行借贷系统的分配策略为基础，判断并保证系统的安全运行。 1、操作系统按照银行家指定的规则为进程分配资源，当进程首次申请资源时，需要测试该进程对资源的最大需求量，如果系统现存的资源可以满足它的最大需求量则按当前的申请资源分配资源，否则就推迟分配； 2、当进程在执行中继续申请资源时，先测试该进程本次申请的资源数，是否超过了该资源剩余的总量，若超过则拒绝分配资源，若能满足则按当前的申请量分配资源，否则也要推迟分配。\",\"参考阅读：\",\"如何快速排查死锁？如何避免死锁？ https://zhuanlan.zhihu.com/p/136294283\"]},\"1063\":{\"h\":\"9. Java 中 synchronized 和 ReentrantLock 有什么不同？\",\"t\":[\"等待可中断:\",\"使用synchronized，不能被中断。synchronized 也可以说是Java提供的原子性内置锁机制。内部锁扮演了互斥锁（mutual exclusion lock ，mutex）的角色，一个线程引用锁的时候，别的线程阻塞等待。\",\"使用ReentrantLock。等待了很长时间以后，可以中断等待，转而去做别的事情。\",\"公平锁:\",\"公平锁是指多个线程在等待同一个锁时，必须按照申请的时间顺序来依次获得锁；而非公平锁则不能保证这一点。非公平锁在锁被释放时，任何一个等待锁的线程都有机会获得锁。 synchronized的锁是非公平锁，ReentrantLock默认情况下也是非公平锁，但可以通过带布尔值的构造函数要求使用公平锁。\",\"还有大家已知的俩点：\",\"synchronized是独占锁，加锁和解锁的过程自动进行，易于操作，但不够灵活。ReentrantLock也是独占锁，加锁和解锁的过程需要手动进行，不易操作，但非常灵活。\",\"synchronized可重入，因为加锁和解锁自动进行，不必担心最后是否释放锁；ReentrantLock也可重入，但加锁和解锁需要手动进行，且次数需一样，否则其他线程无法获得锁。\"]},\"1064\":{\"h\":\"10. 有三个线程 T1，T2，T3，怎么确保它们按顺序执行？\",\"t\":[\"方法1：\",\"线程内部顺序调用，T1、T2、T3。这个可能不是要考察的点，但也是一个方案。\",\"方法2：\",\"join()方法用于将线程由 ”并行“变成”串行“，它用于等待其他线程的终止，在当前线程掉用了join()方法，那么当前线程将进入阻塞状态，等到另一个线程结束，当前线程再由阻塞状态转变成就绪状态，等待CPU的使用权。\",\"package com.javapub.test; /** * @Author: JavaPub * @License: https://github.com/Rodert/ * @Contact: https://javapub.blog.csdn.net/ * @Date: 2022/1/2 15:20 * @Version: 1.0 * @Description: */ public class Test1 { public static void main(String[] args) { ThreadA threadA = new ThreadA(); ThreadB threadB = new ThreadB(threadA); ThreadC threadC = new ThreadC(threadB); threadA.start(); threadB.start(); threadC.start(); } } class ThreadA extends Thread { @Override public void run() { System.out.println(\\\"线程A\\\"); } } class ThreadB extends Thread { Thread threadA; public ThreadB() { // dosomething Auto-generated constructor stub } public ThreadB(Thread threadA) { this.threadA = threadA; } @Override public void run() { try { threadA.join(); } catch (InterruptedException e) { // dosomething Auto-generated catch block e.printStackTrace(); } System.out.println(\\\"线程B\\\"); } } class ThreadC extends Thread { Thread threadB; public ThreadC(Thread threadB) { this.threadB = threadB; } @Override public void run() { try { threadB.join(); } catch (InterruptedException e) { // dosomething Auto-generated catch block e.printStackTrace(); } System.out.println(\\\"线程C\\\"); } }\",\"信号量方式 java.util.concurrent.Semaphore 英 [ˈseməfɔː(r)] 待研究\",\"联系JavaPub:\",\"如果需要下载CSDN资料又没有积分可以JavaPub留言，JavaPub帮你下载\"]},\"1065\":{\"h\":\"推荐阅读：\",\"t\":[\"10道不得不会的Java基础面试题\",\"10道不得不会的Java容器面试题\",\"10道不得不会的Java并发基础面试题\",\"10道不得不会的JavaEE面试题\",\"10道不得不会的JVM面试题\",\"10道不得不会的MySQL基础面试题\",\"10道不得不会的MyBatis面试题\",\"10道不得不会的Spring面试题\",\"10道不得不会的SpringBoot面试题\",\"10道不得不会的ElasticSearch面试题\",\"10道不得不会的Redis面试题\",\"10道不得不会的Kafka面试题\",\"10道不得不会的Zookeeper面试题\",\"10道不得不会的Docker面试题\",\"10道不得不会的缓存面试题\",\"GItHub|GitEE\"]},\"1066\":{\"c\":[\"最少必要面试题\"]},\"1067\":{\"c\":[\"java\",\"面试题\"]},\"1068\":{\"h\":\"10道不得不会的Java容器面试题\",\"t\":[\"Java 容器\",\"10道不得不会的Java容器面试题\",\"以下都是 Java容器常见面试题，相信大家都会有种及眼熟又陌生的感觉、看过可能在短暂的面试后又马上忘记了。JavaPub在这里整理这些容易忘记的重点知识及解答，建议收藏，经常温习查阅。\",\"评论区见\",\"[toc]\"]},\"1069\":{\"h\":\"1. 请说一下Java容器集合的分类，各自的继承结构\",\"t\":[\"Java 容器分为 Collection 和 Map 两大类，其下又有很多子类，如下所示：\",\"Collection包括：List、ArrayList、LinkedList、Vector、Stack、Set、HashSet、LinkedHashSet、TreeSet\",\"Map包括：HashMap、LinkedHashMap、TreeMap、ConcurrentHashMap、Hashtable\"]},\"1070\":{\"h\":\"2. Collection 和 Collections 有什么区别？\",\"t\":[\"Collection 是一个集合接口，它提供了对集合对象进行基本操作的通用接口方法，所有集合都是它的子类，比如 List、Set 等。\",\"Collections 是一个包装类，包含了很多静态方法，不能被实例化，就像一个工具类，比如提供的排序方法：Collections. sort(list)。\"]},\"1071\":{\"h\":\"3. List、Set、Map 之间的区别是什么？\",\"t\":[\"List、Set、Map 的区别主要体现在两个方面：元素是否有序、是否允许元素重复。\"]},\"1072\":{\"h\":\"4. HashMap 和 Hashtable 有什么区别？\",\"t\":[\"HashMap 是非线程安全的，HashTable 是线程安全的。\",\"HashMap 的键和值都允许有 null 值存在，而 HashTable 则不行。\",\"因为线程安全的问题，HashMap 效率比 HashTable 的要高。\",\"Hashtable 是同步的，而 HashMap 不是。因此，HashMap 更适合于单线程环境，而 Hashtable 适合于多线程环境。\",\"一般现在 **不建议用 HashTable **， \",\"一方面是因为 HashTable 是遗留类，内部实现很多没优化和冗余。\",\"另外，即使在 多线程 环境下，现在也有同步的 ConcurrentHashMap 替代，没有必要因为是多线程而用 HashTable。\"]},\"1073\":{\"h\":\"5. 说一下 HashMap 的实现原理？\",\"t\":[\"HashMap 基于 Hash 算法实现的，我们通过 put(key,value)存储，get(key)来获取。当传入 key 时，HashMap 会根据 key. hashCode() 计算出 hash 值，根据 hash 值将 value 保存在 bucket 里。\",\"当计算出的 hash 值相同时，我们称之为 hash 冲突，HashMap 的做法是用链表和红黑树存储相同 hash 值的 value。当 hash 冲突的个数比较少时，使用链表否则使用红黑树。\"]},\"1074\":{\"h\":\"6. 谈谈 ArrayList 和 LinkedList 的区别\",\"t\":[\"本质的区别来源于两者的底层实现：ArrayList的底层是数组，LinkedList的底层是双向链表。\",\"数组拥有O(1)的查询效率，可以通过下标直接定位元素；链表在查询元素的时候只能通过遍历的方式查询，效率比数组低。\",\"数组增删元素的效率比较低，通常要伴随拷贝数组的操作；链表增删元素的效率很高，只需要调整对应位置的指针即可。\",\"以上是数组和链表的通俗对比，在日常的使用中，两者都能很好地在自己的适用场景发挥作用。\",\"比如说我们常常用ArrayList代替数组，因为封装了许多易用的api，而且它内部实现了自动扩容机制，由于它内部维护了一个当前容量的指针size，直接往ArrayList中添加元素的时间复杂度是O(1)的，使用非常方便。\",\"而LinkedList常常被用作Queue队列的实现类，由于底层是双向链表，能够轻松地提供先入先出的操作。\",\"我觉得可以分两部分答，一个是数组与链表底层实现的不同，另一个是答ArrayList和LinkedList的实现细节。\"]},\"1075\":{\"h\":\"7. 谈谈ArrayList和Vector的区别\",\"t\":[\"两者的底层实现相似，关键的不同在于Vector的对外提供操作的方法都是用synchronized修饰的，也就是说Vector在并发环境下是线程安全的，而ArrayList在并发环境下可能会出现线程安全问题。\",\"由于Vector的方法都是同步方法，执行起来会在同步上消耗一定的性能，所以在单线程环境下，Vector的性能是不如ArrayList的\",\"除了线程安全这点本质区别外，还有一个实现上的小细节区别：ArrayList每次扩容的大小为原来的1.5倍；Vector可以指定扩容的大小，默认是原来大小的两倍。\",\"可以顺带谈谈多线程环境下ArrayList的替代品，比如CopyOnWriteArrayList，但是要谈谈优缺点。\"]},\"1076\":{\"h\":\"8. 请谈一谈 Java 集合中的 fail-fast 和 fail-safe 机制\",\"t\":[\"fail-fast 是一种错误检测机制，Java 在适合单线程使用的集合容器中很好地实现了 fail-fast 机制，举一个简单的例子：在多线程并发环境下，A线程在通过迭代器遍历一个 ArrayList 集合，B线程同时对该集合进行增删元素操作，这个时候线程A就会抛出并发修改异常，中断正常执行的逻辑。\",\"而fail-safe机制更像是一种对 fail-fast 机制的补充，它被广泛地实现在各种并发容器集合中。回头看上面的例子，如果线程A遍历的不是一个 ArrayList，而是一个 CopyOnWriteArrayList，则符合 fail-safe 机制，线程B可以同时对该集合的元素进行增删操作，线程A不会抛出任何异常。\",\"要理解这两种机制的表象，我们得了解这两种机制背后的实现原理：\",\"我们同样用 ArrayList 解释 fail-fast 背后的原理：首先 ArrayList 自身会维护一个 modCount 变量，每当进行增删元素等操作时，modCount 变量都会进行自增。当使用迭代器遍历 ArrayList 时，迭代器会新维护一个初始值等于 modCount 的 expectedModCount 变量，每次获取下一个元素的时候都会去检查 expectModCount 和 modCount 是否相等。在上面举的例子中，由于B线程增删元素会导致 modCount 自增，当A线程遍历元素时就会发现两个变量不等，从而抛出异常。\",\"CopyOnWriteArrayList 所实现的 fail-safe 在上述情况下没有抛出异常，它的原理是：当使用迭代器遍历集合时，会基于原数组拷贝出一个新的数组（ArrayList的底层是数组），后续的遍历行为在新数组上进行。所以线程B同时进行增删操作不会影响到线程A的遍历行为。\"]},\"1077\":{\"h\":\"9. HashMap是怎样确定key存放在数组的哪个位置的？JDK1.8\",\"t\":[\"首先计算key的hash值，计算过程是：先得到key的hashCode（int类型，4字节），然后把hashCode的高16位与低16位进行异或，得到key的hash值。\",\"接下来用key的hash值与数组长度减一的值进行按位与操作，得到key在数组中对应的下标。\"]},\"1078\":{\"h\":\"9.1. 追问：为什么计算key的hash时要把hashCode的高16位与低16位进行异或？（变式：为什么不直接用key的hashCode）?\",\"t\":[\"计算key在数组中的下标时，是通过hash值与数组长度减一的值进行按位与操作的。由于数组的长度通常不会超过2^16，所以hash值的高16位通常参与不了这个按位与操作。\",\"为了让hashCode的高16位能够参与到按位与操作中，所以把hashCode的高16位与低16位进行异或操作，使得高16位的影响能够均匀稀释到低16位中，使得计算key位置的操作能够充分散列均匀。\"]},\"1079\":{\"h\":\"10. 为什么要把链表转为红黑树，阈值为什么是8？\",\"t\":[\"在极端情况下，比如说key的hashCode()返回的值不合理，或者多个密钥共享一个hashCode，很有可能会在同一个数组位置产生严重的哈希冲突。\",\"这种情况下，如果我们仍然使用使用链表把多个冲突的元素串起来，这些元素的查询效率就会从O(1)下降为O(N)。为了能够在这种极端情况下仍保证较为高效的查询效率，HashMap选择把链表转换为红黑树，红黑树是一种常用的平衡二叉搜索树，添加，删除，查找元素等操作的时间复杂度均为O(logN)\",\"至于阈值为什么是8，这是HashMap的作者根据概率论的知识得到的。当key的哈希码分布均匀时，数组同一个位置上的元素数量是成泊松分布的，同一个位置上出现8个元素的概率已经接近千分之一了，这侧面说明如果链表的长度达到了8，key的hashCode()肯定是出了大问题，这个时候需要红黑树来保证性能，所以选择8作为阈值。\",\"追问：为什么红黑树转换回链表的阈值不是7而是6呢？\",\"如果是7的话，那么链表和红黑树之间的切换范围值就太小了。如果我的链表长度不停地在7和8之间切换，那岂不是得来回变换形态？所以选择6是一种折中的考虑。\"]},\"1080\":{\"h\":\"拓展题. 为什么 HashMap 数组的长度是2的幂次方？\",\"t\":[\"因为这样能够提高根据 key 计算数组位置的效率。\",\"HashMap 根据 key 计算数组位置的算法是：用 key 的 hash 值与数组长度减1的值进行按位与操作。\",\"在我们正常人的思维中，获取数组的某个位置最直接的方法是对数组的长度取余数。但是如果被除数是2的幂次方，那么这个对数组长度取余的方法就等价于对数组长度减一的值进行按位与操作。\",\"在计算机中，位运算的效率远高于取模运算，所以为了提高效率，把数组的长度设为2的幂次方。\",\"所以一定要看一遍源码，相比于框架的源码，集合的源码简直太友好了。在笔试的时候可能还会考一些集合的使用，比如遍历，排序，比较等等，这些算是Java基础，用得多也就熟了。\",\"低谷蓄力\",\"《最少必要面试题》\",\"10道不得不会的Java基础面试题\",\"10道不得不会的Java容器面试题\",\"10道不得不会的Java并发基础面试题\",\"10道不得不会的JavaEE面试题\",\"10道不得不会的JVM面试题\",\"10道不得不会的MySQL基础面试题\",\"10道不得不会的MyBatis面试题\",\"10道不得不会的Spring面试题\",\"10道不得不会的SpringBoot面试题\",\"10道不得不会的ElasticSearch面试题\",\"10道不得不会的Redis面试题\",\"10道不得不会的Kafka面试题\",\"10道不得不会的Zookeeper面试题\",\"10道不得不会的Docker面试题\",\"10道不得不会的缓存面试题\",\"GItHub|GitEE\"]},\"1081\":{\"c\":[\"最少必要面试题\"]},\"1082\":{\"c\":[\"java\",\"面试题\"]},\"1083\":{\"h\":\"10道不得不会的 JavaEE 面试题\",\"t\":[\"JavaEE\",\"10道不得不会的 JavaEE 面试题\",\"我是 JavaPub，专注于面试、副业，技术人的成长记录。\",\"以下是 JavaEE 面试题，相信大家都会有种及眼熟又陌生的感觉、看过可能在短暂的面试后又马上忘记了。JavaPub在这里整理这些容易忘记的重点知识及解答，建议收藏，经常温习查阅。\",\"评论区见\",\"@[toc]\",\"本系列《最少必要面试题》\",\"目前很多新项目很少会用到JavaEE的技术栈，但是对于部分维护老代码的工程师来说，还是尤为重要。\"]},\"1084\":{\"h\":\"1. JSP 有哪些内置对象？作用分别是什么？\",\"t\":[\"JSP有9个内置对象：\",\"request：封装客户端的请求，其中包含来自GET或POST请求的参数；\",\"response：封装服务器对客户端的响应；\",\"pageContext：通过该对象可以获取其他对象；\",\"session：封装用户会话的对象；\",\"application：封装服务器运行环境的对象；\",\"out：输出服务器响应的输出流对象；\",\"config：web应用的配置对象；\",\"page：jsp页面本身（相当于Java程序中的this）；\",\"exception：封装页面抛出异常的对象。\",\"JSP的9内置对象及其含义\"]},\"1085\":{\"h\":\"2. 介绍一下 Servlet 生命周期\",\"t\":[\"Servlet是运行在服务器端，以多线程的方式处理客户端请求的小程序。是sun公司提供的一套规范（规范的实现是接口）。\",\"servlet的生命周期就是从servlet出现到消亡(销毁)的全过程。主要分为以下几个阶段：\",\"加载类—>实例化(为对象分配空间)—>初始化(为对象的属性赋值)—>请求响应(服务阶段)—>销毁\",\"详细介绍：\",\"加载\",\"在下列时刻会加载Servlet（只执行一次）：\",\"如果已经配置自动加载选项，则在启动服务器时自动加载 web.xml 文件中设置的<load-on-start>；\",\"服务器启动之后，客户机首次向Servlet发出请求时会加载；\",\"重新加载Servlet时会进行一次加载；\",\"实例化\",\"加载Servlet后，服务器创建一个Servlet实例。（只执行一次）\",\"初始化\",\"调用 Servlet 的 init() 方法。在初始化阶段，Servlet 初始化参数被传递给 Servlet 配置对象 ServletConfig。（只执行一次）；\",\"请求处理\",\"对于到达服务器的客户机请求，服务器创建针对此次请求的一个\\\"请求对象\\\"和一个\\\"响应对象\\\"。\",\"服务器调用 Servlet 的 service() 方法，该方法用于传递\\\"请求\\\"和\\\"响应\\\"对象。\",\"service() 方法从\\\"请求\\\"对象获得请求信息、处理该请求并用\\\"响应\\\"对象的方法将响应回传给客户端。\",\"service() 方法可以调用其他方法来处理请求，例如 doGet()、doPost() 或其他方法。\",\"销毁\",\"当服务器不需要 Servlet，或重新装入 Servlet 的新实例时，服务器会调用 Servlet 的 destroy() 方法。（只执行一次）；\"]},\"1086\":{\"h\":\"3. Servlet和JSP的区别和联系\",\"t\":[\"区别：\",\"JSP是在HTML代码里面写Java代码；而Servlet是在Java代码中写HTML代码，Servlet本身是个Java类；\",\"JSP使人们将显示和逻辑分隔称为可能，这意味着两者的开发可以并行进行；而Servlet并没有将两者分开；\",\"Servlet独立地处理静态表示逻辑与动态业务逻辑，任何文件的变动都需要对此服务程序重新编译；JSP允许使用特殊标签直接嵌入到HTML页面，HTML内容与JAVA内容也可放在单独文件中，HTML内容的任何变动会自动编译装入到服务程序；\",\"Servlet需要在web.xml中配置；而JSP无需配置；\",\"目前JSP主要用在视图层，负责显示；而Servlet主要用在控制层，负责调度；\",\"联系：\",\"都是SUN公司推出的动态网页技术；\",\"先有Servlet，针对Servlet缺点推出JSP。JSP是Servlet的一种特殊形式，每个JSP页面就是一个Servlet实例，JSP页面由系统翻译成Servlet，Servlet再负责响应用户的请求。\"]},\"1087\":{\"h\":\"4. JSP的执行过程\",\"t\":[\"在JSP运行过程中，首先由客户端发出请求，Web服务器接收到请求之后，如果是第一次访问某个JSP页面，Web服务器对它进行一下三个操作：\",\"翻译\",\"由.jsp变为.java，由JSP引擎完成。\",\"编译\",\"由.java变为.class，由Java编译器实现。\",\"执行\",\"由.class变为.html，用Java虚拟机执行编译文件，然后将执行结果返回给Web服务器，并最终返回给客户端。\",\"如果不是第一次访问某个JSP页面，则只执行第三步，所以第一次访问JSP较慢。\"]},\"1088\":{\"h\":\"5. Session和Cookie的区别和联系；说明在自己项目中如何使用？\",\"t\":[\"Session 和 Cookie 都是会话(Seesion)跟踪技术。Cookie 通过在客户端记录信息确定用户身份，Session 通过在服务器端记录信息确定用户身份。但是 Session 的实现依赖于 Cookie，sessionId(session的唯一标识需要存放在客户端).\",\"cookie数据存放在客户的浏览器上，session数据放在服务器上。\",\"cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗，考虑到安全应当使用session。\",\"session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用cookie。\",\"单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。\",\"可以考虑将登录信息等重要信息存放为session，其他信息如果需要保留，可以放在cookie中。\",\"在程序开发过程中，我们可以在客户端每次与服务器交互时检查SessionID（Session中属性值，非HttpServlet环境开发中也可以用其它的Key值代替），用于会话管理。\",\"将登陆信息等重要信息存放为SESSION\",\"其他信息如果需要保留，可以放在COOKIE中，比如购物车\",\"购物车最好使用cookie，但是cookie是可以在客户端禁用的，这时候我们要使用cookie+数据库的方式实现，当从cookie中不能取出数据时，就从数据库获取。\"]},\"1089\":{\"h\":\"6. 转发和重定向的联系和区别？\",\"t\":[\"转发：服务器端的跳转，路径不会发生改变（针对的是servlet），是服务器内部的处理，一次请求，请求对象不会变\",\"重定向：客户端的跳转，路径会发生改变，将要请求的路径和302重定向的状态码发给客户端浏览器，客户端浏览器将再次向服务器发出请求，不是同个请求，两次请求。\"]},\"1090\":{\"h\":\"7. 拦截器和过滤器的区别\",\"t\":[\"Spring 的拦截器与 Servlet 的 Filter 有相似之处，比如二者都是AOP编程思想的体现，都能实现权限检查、日志记录等。不同的是:\",\"使用范围不同: Filter 是 Servlet 规范规定的，只能用于Web程序中。而拦截器既可以用于Web程序，也可以用于 Application、Swing程序中。\",\"规范不同: Filter 是在 Servlet 规范中定义的，是 Servlet 容器支持的。而拦截器是在 Spring 容器内的，是 Spring 框架支持的。\",\"使用的资源不同:同其他的代码块一样，拦截器也是一个 Spring 的组件，归 Spring 管理，配置在 Spring 文件中，因此能使用 Spring 里的任何资源、对象，例如 Service 对象、数据源、事务管理等，通过 IoC 注入到拦截器即可;而Filter则不能。\",\"深度不同: Filter 在只在 Servlet 前后起作用。而拦截器能够深入到方法前后、异常抛出前后等，因此拦截器的使用具有更大的弹性。所以在 Spring 构架的程序中，要优先使用拦截器。\",\"一张经典的图\",\"过滤器&拦截器\"]},\"1091\":{\"h\":\"8. 三次握手和四次挥手\",\"t\":[\"这里是字面描述\",\"三次握手:\",\"客户端向服务器发出连接请求等待服务器确认\",\"服务器向客户端返回一个响应告诉客户端收到了请求\",\"客户端向服务器再次发出确认信息,此时连接建立\",\"四次挥手:\",\"客户端向服务器发出取消连接请求\",\"服务器向客户端返回一个响应,表示收到客户端取消请求\",\"服务器向客户端发出确认取消信息(向客户端表明可以取消连接了)\",\"客户端再次发送确认消息,此时连接取消\"]},\"1092\":{\"h\":\"9. TCP和UDP的区别\",\"t\":[\"TCP ：面向连接，UDP ：面向无连接\",\"TCP ：传输效率低，UDP ：传输效率高(有大小限制，一次限定在64kb之内)\",\"TCP：可靠，UDP ：不可靠\"]},\"1093\":{\"h\":\"10. 如何解决跨域问题？\",\"t\":[\"跨域指的是浏览器不能执行其它网站的脚本，它是由浏览器的同源策略造成的，是浏览器对 JavaScript 施加的安全限制。\",\"所谓同源指的是：协议、域名、端口号都相同，只要有一个不相同，那么都是非同源。\",\"解决方案：\",\"使用 ajax 的 jsonp。（这一点有些人是不知道的）\",\"nginx 转发：利用 nginx 反向代理，将请求分发到部署相应项目的 tomcat 服务器，当然也不存在跨域问题。\",\"使用 CORS：写一个配置类实现 WebMvcConfigurer 接口或者配置 FilterRegistrationBean。\",\"CORS（Cross-Origin Resource Sharing）是一个W3C标准，全称“跨域资源共享”\"]},\"1094\":{\"h\":\"11. 什么是 CSRF 攻击？如何防御CSRF 攻击\",\"t\":[\"CSRF（Cross-site request forgery） 跨站请求伪造。CSRF 攻击是在受害者毫不知情的情况下，以受害者名义伪造请求发送给受攻击站点，从而在受害者并未授权的情况下执行受害者权限下的各种操作。\",\"CSRF 攻击专门针对状态改变请求，而不是数据窃取，因为攻击者无法查看对伪造请求的响应。\",\"目前防御 CSRF 攻击主要有三种策略：\",\"验证 HTTP Referer 字段\",\"在请求地址中添加 token 并验证\",\"在 HTTP 头中自定义属性并验证\"]},\"1095\":{\"h\":\"12. HTTP1.0和HTTP1.1和HTTP2.0的区别\",\"t\":[\"HTTP1.0 ：无状态，无连接。\",\"HTTP1.1 ：长连接，请求管道化，增加缓存处理，增加 Host 字段，支持断点传输。\",\"HTTP2.0 ：二进制分帧，多路复用(连接共享)，头部压缩，服务器推送。\",\"低谷蓄力\",\"《最少必要面试题》\",\"10道不得不会的Java基础面试题\",\"10道不得不会的Java容器面试题\",\"10道不得不会的Java并发基础面试题\",\"10道不得不会的JavaEE面试题\",\"10道不得不会的JVM面试题\",\"10道不得不会的MySQL基础面试题\",\"10道不得不会的MyBatis面试题\",\"10道不得不会的Spring面试题\",\"10道不得不会的SpringBoot面试题\",\"10道不得不会的ElasticSearch面试题\",\"10道不得不会的Redis面试题\",\"10道不得不会的Kafka面试题\",\"10道不得不会的Zookeeper面试题\",\"10道不得不会的Docker面试题\",\"10道不得不会的缓存面试题\",\"GItHub|GitEE\"]},\"1096\":{\"c\":[\"最少必要面试题\"]},\"1097\":{\"c\":[\"javaee\",\"面试题\"]},\"1098\":{\"h\":\"10道不得不会的JVM面试题\",\"t\":[\"JVM\",\"10道不得不会的JVM面试题\",\"我是JavaPub，专注于面试、副业，技术人的成长记录。\",\"以下是 JVM 面试题，相信大家都会有种及眼熟又陌生的感觉、看过可能在短暂的面试后又马上忘记了。JavaPub在这里整理这些容易忘记的重点知识及解答，建议收藏，经常温习查阅。\",\"评论区见\",\"@[toc]\",\"基于JDK8\"]},\"1099\":{\"h\":\"1. 说一说JVM的主要组成部分\",\"t\":[\"点击放大看，一图胜千文\",\"方法区和堆是所有线程共享的内存区域；而虚拟机栈、本地方法栈和程序计数器的运行是线程私有的内存区域，运行时数据区域就是我们常说的JVM的内存。\",\"类加载子系统：根据给定的全限定名类名(如：java.lang.Object)来装载class文件到运行时数据区中的方法区中。\",\"Java堆是Java虚拟机所管理的内存中最大的一块，也是垃圾回收的主要区域。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。\",\"方法区与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。\",\"程序计数器是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器，用来指示执行引擎下一条执行指令的地址。\",\"Java虚拟机栈也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、返回方法地址等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。\",\"本地方法栈（Native Method Stacks）,本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务。\",\"执行引擎：根据程序计数器中存储的指令地址执行classes中的指令。\",\"本地接口：与本地方法库交互，是其它编程语言交互的接口。\"]},\"1100\":{\"h\":\"2. 说一下 JVM 的作用？\",\"t\":[\"首先通过编译器把 Java 代码转换成字节码，类加载器（ClassLoader）再把字节码加载到内存中，将其放在运行时数据区（Runtime data area）的方法区内，而字节码文件只是 JVM 的一套指令集规范，并不能直接交给底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。\"]},\"1101\":{\"h\":\"3. 说一下堆栈的区别？\",\"t\":[\"物理地址\",\"堆的物理地址分配对象是不连续的。因此性能慢些。在GC的时候也要考虑到不连续的分配，所以有各种算法。比如，标记-消除，复制，标记-压缩，分代（即新生代使用复制算法，老年代使用标记——压缩）\",\"栈使用的是数据结构中的栈，先进后出的原则，物理地址分配是连续的。所以性能快。\",\"内存分别\",\"堆因为是不连续的，所以分配的内存是在运行期确认的，因此大小不固定。一般堆大小远远大于栈。\",\"栈是连续的，所以分配的内存大小要在编译期就确认，大小是固定的。\",\"存放的内容\",\"堆存放的是对象的实例和数组。因此该区更关注的是数据的存储\",\"栈存放：局部变量，操作数栈，返回结果。该区更关注的是程序方法的执行。\",\"PS：\",\"静态变量放在方法区 静态的对象还是放在堆。 程序的可见度\",\"堆对于整个应用程序都是共享、可见的。\",\"栈只对于线程是可见的。所以也是线程私有。他的生命周期和线程相同。\"]},\"1102\":{\"h\":\"4. Java内存泄漏\",\"t\":[\"内存泄漏是指不再被使用的对象或者变量一直被占据在内存中。\",\"严格来说，只有对象不会再被程序用到了，但是GC又不能回收他们的情况，才叫内存泄漏。\",\"理论上来说，Java是有GC垃圾回收机制的，也就是说，不再被使用的对象，会被GC自动回收掉，自动从内存中清除。\",\"但是，即使这样，Java也还是存在着内存泄漏的情况，java导致内存泄露的原因很明确：长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄露，尽管短生命周期对象已经不再需要，但是因为长生命周期对象持有它的引用而导致不能被回收，这就是java中内存泄露的发生场景。\"]},\"1103\":{\"h\":\"5. JVM 有哪些垃圾回收算法？\",\"t\":[\"标记-清除算法：标记有用对象，然后进行清除回收。缺点：效率不高，无法清除垃圾碎片。\",\"复制算法：按照容量划分二个大小相等的内存区域，当一块用完的时候将活着的对象复制到另一块上，然后再把已使用的内存空间一次清理掉。缺点：内存使用率不高，只有原来的一半，消耗内存。\",\"标记-整理算法：标记无用对象，让所有存活的对象都向一端移动，然后直接清除掉端边界以外的内存。\",\"分代算法：根据对象存活周期的不同将内存划分为几块，一般是新生代和老年代，新生代基本采用复制算法，老年代采用标记整理算法。\"]},\"1104\":{\"h\":\"6. 说一下 JVM 有哪些垃圾回收器？\"},\"1105\":{\"h\":\"7. 说一下类加载的执行过程？\",\"t\":[\"加载：根据查找路径找到相应的 class 文件然后装载入内存中；\",\"验证：检查加载的 class 文件的正确性；\",\"准备：给类中的静态变量分配内存空间；\",\"解析：虚拟机将常量池中的符号引用替换成直接引用的过程。符号引用就理解为一个标示，而在直接引用直接指向内存中的地址；\",\"初始化：对静态变量和静态代码块执行初始化工作。\"]},\"1106\":{\"h\":\"8. 什么是双亲委派模型？为什么要使用双亲委派模型？\",\"t\":[\"什么是双亲委派模型\",\"当需要加载一个类的时候，子类加载器并不会马上去加载，而是依次去请求父类加载器加载\",\"如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器；\",\"如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。\",\"为什么要使用双亲委派模型\",\"可以防止内存中出现多份同样的字节码，如果没有双亲委派模型而是由各个类加载器自行加载的话，如果用户编写了一个java.lang.Object的同名类并放在ClassPath中，多个类加载器都去加载这个类到内存中，系统中将会出现多个不同的Object类，那么类之间的比较结果及类的唯一性将无法保证，而且如果不使用这种双亲委派模型将会给虚拟机的安全带来隐患。所以，要让类对象进行比较有意义，前提是他们要被同一个类加载器加载。\"]},\"1107\":{\"h\":\"9. CMS垃圾清理的过程\",\"t\":[\"CMS整个过程比之前的收集器要复杂，整个过程分为4个主要阶段，即初始标记阶段、并发标记阶段、重新标记阶段和并发清除阶段。(涉及STW的阶段主要是：初始标记 和 重新标记 stop-the-world)\",\"初始标记（Initial-Mark）阶段：在这个阶段中，程序中所有的工作线程都将会因为“stop-the-world”机制而出现短暂的暂停，这个阶段的主要任务仅仅只是标记出 GC Roots 能直接关联到的对象。一旦标记完成之后就会恢复之前被暂停的所有应用线程。由于直接关联对象比较小，所以这里的速度非常快。\",\"并发标记（Concurrent-Mark）阶段：从 Gc Roots 的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行。\",\"重新标记（Remark）阶段：由于在并发标记阶段中，程序的工作线程会和垃圾收集线程同时运行或者交叉运行，因此为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短。\",\"并发清除（Concurrent-Sweep）阶段：此阶段清理删除掉标记阶段判断的已经死亡的对象，释放内存空间。由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的\"]},\"1108\":{\"h\":\"10. 常用的 JVM 调优的参数都有哪些？\",\"t\":[\"-XX:NewRatio=4：设置年轻的和老年代的内存比例为 1:4；\",\"-XX:SurvivorRatio=8：设置新生代 Eden 和 Survivor 比例为 8:2；\",\"–XX:+UseParNewGC：指定使用 ParNew + Serial Old 垃圾回收器组合；\",\"-XX:+UseParallelOldGC：指定使用 ParNew + ParNew Old 垃圾回收器组合；\",\"-XX:+UseConcMarkSweepGC：指定使用 CMS + Serial Old 垃圾回收器组合；\",\"-XX:+PrintGC：开启打印 gc 信息；\",\"-XX:+PrintGCDetails：打印 gc 详细信息。\",\"JVM 调优-这个问题单独一篇\"]},\"1109\":{\"h\":\"系列文章\",\"t\":[\"10道不得不会的Java基础面试题\",\"10道不得不会的Java容器面试题\",\"10道不得不会的Java并发基础面试题\",\"10道不得不会的JavaEE面试题\",\"10道不得不会的JVM面试题\",\"10道不得不会的MySQL基础面试题\",\"10道不得不会的MyBatis面试题\",\"10道不得不会的Spring面试题\",\"10道不得不会的SpringBoot面试题\",\"10道不得不会的ElasticSearch面试题\",\"10道不得不会的Redis面试题\",\"10道不得不会的Kafka面试题\",\"10道不得不会的Zookeeper面试题\",\"10道不得不会的Docker面试题\",\"10道不得不会的缓存面试题\",\"GItHub|GitEE\"]},\"1110\":{\"c\":[\"最少必要面试题\"]},\"1111\":{\"c\":[\"jvm\",\"面试题\"]},\"1112\":{\"h\":\"10道不得不会的 Kafka 面试题\",\"t\":[\"kafka\",\"10道不得不会的 Kafka 面试题\",\"我是JavaPub，专注于面试、副业，技术人的成长记录。\",\"以下是 Kafka 面试题，相信大家都会有种及眼熟又陌生的感觉、看过可能在短暂的面试后又马上忘记了。JavaPub在这里整理这些容易忘记的重点知识及解答，建议收藏，经常温习查阅。\",\"评论区见\",\"@[toc]\",\"在面试kafka中，一定要了解为什么要用kafka、及kafka的架构等基本概念，才能对面试中的问题得心应手。\"]},\"1113\":{\"h\":\"术语0. Kafka中的ISR、AR又代表什么？ISR的伸缩又指什么\",\"t\":[\"ISR:In-Sync Replicas 副本同步队列\",\"AR:Assigned Replicas 所有副本\",\"ISR是由leader维护，follower从leader同步数据有一些延迟（包括延迟时间replica.lag.time.max.ms和延迟条数replica.lag.max.messages两个维度, 当前最新的版本0.10.x中只支持replica.lag.time.max.ms这个维度），任意一个超过阈值都会把follower剔除出ISR, 存入OSR（Outof-Sync Replicas）列表，新加入的follower也会先存放在OSR中。AR=ISR+OSR。\"]},\"1114\":{\"h\":\"术语0. Kafka中的HW、LEO、LSO、LW等分别代表什么？\",\"t\":[\"HW:High Watermark 高水位，取一个partition对应的ISR中最小的LEO作为HW，consumer最多只能消费到HW所在的位置上一条信息。\",\"LEO:LogEndOffset 当前日志文件中下一条待写信息的offset HW/LEO这两个都是指最后一条的下一条的位置而不是指最后一条的位置。\",\"LSO:Last Stable Offset 对未完成的事务而言，LSO 的值等于事务中第一条消息的位置(firstUnstableOffset)，对已完成的事务而言，它的值同 HW 相同\",\"LW:Low Watermark 低水位, 代表 AR 集合中最小的 logStartOffset 值\"]},\"1115\":{\"h\":\"1. kafka 是什么？有什么作用？\",\"t\":[\"Kafka 是一个分布式的流式处理平台，它以高吞吐、可持久化、可水平扩展、支持流数据处理等多种特性而被广泛使用\",\"主要功能体现于三点：\",\"消息系统：kafka与传统的消息中间件都具备系统解耦、冗余存储、流量削峰、缓冲、异步通信、扩展性、可恢复性等功能。与此同时，kafka还提供了大多数消息系统难以实现的消息顺序性保障及回溯性消费的功能。\",\"存储系统：kafka把消息持久化到磁盘，相比于其他基于内存存储的系统而言，有效的降低了消息丢失的风险。这得益于其消息持久化和多副本机制。也可以将kafka作为长期的存储系统来使用，只需要把对应的数据保留策略设置为“永久”或启用主题日志压缩功能。\",\"流式处理平台：kafka为流行的流式处理框架提供了可靠的数据来源，还提供了一个完整的流式处理框架，比如窗口、连接、变换和聚合等各类操作。\"]},\"1116\":{\"h\":\"2. kafka 的架构是怎么样的？\",\"t\":[\"这是一个基本概念的题目，一定要掌握。\",\"一个典型的 kafka 体系架构包括若干 Producer、若干 Consumer、以及一个 Zookeeper 集群（在2.8.0版本中移，除了 Zookeeper,通过 KRaft 进行自己的集群管理）\",\"Producer 将消息发送到 Broker，Broker 负责将受到的消息存储到磁盘中，而 Consumer 负责从 Broker 订阅并消费消息。\",\"Kafka 基本概念：\",\"Producer ：生产者，负责将消息发送到 Broker\",\"Consumer ：消费者，从 Broker 接收消息\",\"Consumer Group ：消费者组，由多个 Consumer 组成。消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费，消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。\",\"Broker ：可以看做一个独立的 Kafka 服务节点或 Kafka 服务实例。如果一台服务器上只部署了一个 Kafka 实例，那么我们也可以将 Broker 看做一台 Kafka 服务器。\",\"Topic ：一个逻辑上的概念，包含很多 Partition，同一个 Topic 下的 Partiton 的消息内容是不相同的。\",\"Partition ：为了实现扩展性，一个非常大的 topic 可以分布到多个 broker 上，一个 topic 可以分为多个 partition，每个 partition 是一个有序的队列。\",\"Replica ：副本，同一分区的不同副本保存的是相同的消息，为保证集群中的某个节点发生故障时，该节点上的 partition 数据不丢失，且 kafka 仍然能够继续工作，- kafka 提供了副本机制，一个 topic 的每个分区都有若干个副本，一个 leader 和若干个 follower。\",\"Leader ：每个分区的多个副本中的\\\"主副本\\\"，生产者以及消费者只与 Leader 交互。\",\"Follower ：每个分区的多个副本中的\\\"从副本\\\"，负责实时从 Leader 中同步数据，保持和 Leader 数据的同步。Leader 发生故障时，从 Follower 副本中重新选举新的 Leader 副本对外提供服务。\"]},\"1117\":{\"h\":\"3. Kafka Replicas是怎么管理的？\",\"t\":[\"AR:分区中的所有 Replica 统称为 AR\",\"ISR:所有与 Leader 副本保持一定程度同步的Replica(包括 Leader 副本在内)组成 ISR\",\"OSR:与 Leader 副本同步滞后过多的 Replica 组成了 OSR\",\"Leader 负责维护和跟踪 ISR 集合中所有 Follower 副本的滞后状态，当 Follower 副本落后过多时，就会将其放入 OSR 集合，当 Follower 副本追上了 Leader 的进度时，就会将其放入 ISR 集合。\",\"默认情况下，只有 ISR 中的副本才有资格晋升为 Leader。\"]},\"1118\":{\"h\":\"4. 如何确定当前能读到哪一条消息？\",\"t\":[\"这个问题要先了解上一个问题的概念\",\"分区相当于一个日志文件，我们先简单介绍几个概念\",\"如上图是一个分区日志文件\",\"标识共有7条消息，offset (消息偏移量)分别是0~6\",\"0 代表这个日志文件的开始\",\"HW(High Watermark) 为4，0~3 代表这个日志文件可以消费的区间，消费者只能消费到这四条消息\",\"LEO 代表即将要写入消息的偏移量 offset\",\"分区 ISR 集合中的每个副本都会维护自己的 LEO，而 ISR 集合中最小的LEO 即为分区的 HW\",\"如上图: 三个分区副本都是 ISR集合当中的，最小的 LEO 为 3，就代表分区的 HW 为3，所以当前分区只能消费到 0~2 之间的三条数据，如下图\"]},\"1119\":{\"h\":\"5. 发送消息的分区策略有哪些？\",\"t\":[\"1.轮询：依次将消息发送该topic下的所有分区，如果在创建消息的时候 key 为 null，Kafka 默认采用这种策略。\",\"2.key 指定分区：在创建消息是 key 不为空，并且使用默认分区器，Kafka 会将 key 进行 hash，然后根据hash值映射到指定的分区上。这样的好处是 key 相同的消息会在一个分区下，Kafka 并不能保证全局有序，但是在每个分区下的消息是有序的，按照顺序存储，按照顺序消费。在保证同一个 key 的消息是有序的，这样基本能满足消息的顺序性的需求。但是如果 partation 数量发生变化，那就很难保证 key 与分区之间的映射关系了。\",\"3.自定义策略：实现 Partitioner 接口就能自定义分区策略。\",\"4.指定 Partiton 发送\"]},\"1120\":{\"h\":\"6. Kafka 的可靠性是怎么保证的？\",\"t\":[\"1.acks\",\"这个参数用来指定分区中有多少个副本收到这条消息，生产者才认为这条消息是写入成功的，这个参数有三个值：\",\"1.acks = 1，默认为1。生产者发送消息，只要 leader 副本成功写入消息，就代表成功。这种方案的问题在于，当返回成功后，如果 leader 副本和 follower 副本还没有来得及同步，leader 就崩溃了，那么在选举后新的 leader 就没有这条消息，也就丢失了。\",\"2.acks = 0。生产者发送消息后直接算写入成功，不需要等待响应。这个方案的问题很明显，只要服务端写消息时出现任何问题，都会导致消息丢失。\",\"3.acks = -1 或 acks = all。生产者发送消息后，需要等待 ISR 中的所有副本都成功写入消息后才能收到服务端的响应。毫无疑问这种方案的可靠性是最高的，但是如果 ISR 中只有leader 副本，那么就和 acks = 1 毫无差别了。\",\"2.消息发送的方式\",\"第6问中我们提到了生产者发送消息有三种方式，发完即忘，同步和异步。我们可以通过同步或者异步获取响应结果，失败做重试来保证消息的可靠性。\",\"3.手动提交位移\",\"默认情况下，当消费者消费到消息后，就会自动提交位移。但是如果消费者消费出错，没有进入真正的业务处理，那么就可能会导致这条消息消费失败，从而丢失。我们可以开启手动提交位移，等待业务正常处理完成后，再提交offset。\",\"4.通过副本 LEO 来确定分区 HW\",\"可参考第四问\"]},\"1121\":{\"h\":\"7. 分区再分配是做什么的？解决了什么问题？\",\"t\":[\"分区再分配主要是用来维护 kafka 集群的负载均衡\",\"既然是分区再分配，那么 kafka 分区有什么问题呢？\",\"问题1：当集群中的一个节点下线了\",\"如果该节点的分区是单副本的,那么分区将会变得不可用\",\"如果是多副本的，就会进行 leader 选举，在其他机器上选举出新的 leader\",\"kafka 并不会将这些失效的分区迁移到其他可用的 broker 上，这样就会影响集群的负载均衡，甚至也会影响服务的可靠性和可用性\",\"问题2：集群新增 broker 时，只有新的主题分区会分配在该 broker 上，而老的主题分区不会分配在该 broker 上，就造成了老节点和新节点之间的负载不均衡。\",\"为了解决该问题就出现了分区再分配，它可以在集群扩容，broker 失效的场景下进行分区迁移。\",\"分区再分配的原理就是通化控制器给分区新增新的副本，然后通过网络把旧的副本数据复制到新的副本上，在复制完成后，将旧副本清除。 当然，为了不影响集群正常的性能，在此复制期间还会有一系列保证性能的操作，比如复制限流。\"]},\"1122\":{\"h\":\"8. Kafka Partition 副本 leader 是怎么选举的？\",\"t\":[\"这个问题设计的点比较多，拓展的也更多一点，建议耐心阅读。\",\"常用选主机制的缺点：\",\"split-brain (脑裂): ​这是由ZooKeeper的特性引起的，虽然ZooKeeper能保证所有Watch按顺序触发，但是网络延迟，并不能保证同一时刻所有Replica“看”到的状态是一样的，这就可能造成不同Replica的响应不一致，可能选出多个领导“大脑”，导致“脑裂”。 herd effect (羊群效应): ​如果宕机的那个Broker上的Partition比较多， 会造成多个Watch被触发，造成集群内大量的调整，导致大量网络阻塞。 ZooKeeper负载过重: ​每个Replica都要为此在ZooKeeper上注册一个Watch，当集群规模增加到几千个Partition时ZooKeeper负载会过重。\",\"优势：\",\"Kafka的Leader Election方案解决了上述问题，它在所有broker中选出一个controller，所有Partition的Leader选举都由controller决定。 controller会将Leader的改变直接通过RPC的方式(比ZooKeeper Queue的方式更高效)通知需为此作为响应的Broker。\",\"没有使用 zk，所以无 2.3 问题；也没有注册 watch无 2.2 问题 leader 失败了，就通过 controller 继续重新选举即可，所以克服所有问题。\",\"Kafka partition leader的选举：\",\"由 controller 执行：\",\"从Zookeeper中读取当前分区的所有ISR(in-sync replicas)集合\",\"调用配置的分区选择算法选择分区的leader\",\"分区选择算法\",\"上面五种分区算法都是选择PreferredReplica(优先副本选举)作为当前Partition的leader。区别仅仅是选择leader之后的操作有所不同。\"]},\"1123\":{\"h\":\"9. 分区数越多越好吗？吞吐量就会越高吗？\",\"t\":[\"般类似于这种问题的答案，都是持否定态度的。\",\"但是可以说，在一定条件下，分区数的数量是和吞吐量成正比的，分区数和性能也是成正比的。\",\"那么为什么说超过了一定限度，就会对性能造成影响呢？原因如下:\",\"1.客户端/服务器端需要使用的内存就越多\",\"服务端在很多组件中都维护了分区级别的缓存，分区数越大，缓存成本也就越大。 消费端的消费线程数是和分区数挂钩的，分区数越大消费线程数也就越多，线程的开销成本也就越大 生产者发送消息有缓存的概念，会为每个分区缓存消息，当积累到一定程度或者时间时会将消息发送到分区，分区越多，这部分的缓存也就越大\",\"2.文件句柄的开销\",\"每个 partition 都会对应磁盘文件系统的一个目录。在 Kafka 的数据日志文件目录中，每个日志数据段都会分配两个文件，一个索引文件和一个数据文件。每个 broker 会为每个日志段文件打开一个 index 文件句柄和一个数据文件句柄。因此，随着 partition 的增多，所需要保持打开状态的文件句柄数也就越多，最终可能超过底层操作系统配置的文件句柄数量限制。\",\"3.越多的分区可能增加端对端的延迟\",\"Kafka 会将分区 HW 之前的消息暴露给消费者。分区越多则副本之间的同步数量就越多，在默认情况下，每个 broker 从其他 broker 节点进行数据副本复制时，该 broker 节点只会为此工作分配一个线程，该线程需要完成该 broker 所有 partition 数据的复制。\",\"4.降低高可用性\",\"在第 7 问我们提到了分区再分配，会将数据复制到另一份副本当中，分区数量越多，那么恢复时间也就越长，而如果发生宕机的 broker 恰好是 controller 节点时：在这种情况下，新 leader 节点的选举过程在 controller 节点恢复到新的 broker 之前不会启动。controller 节点的错误恢复将会自动地进行，但是新的 controller 节点需要从 zookeeper 中读取每一个 partition 的元数据信息用于初始化数据。例如，假设一个Kafka 集群存在 10000个partition，从 zookeeper 中恢复元数据时每个 partition 大约花费 2 ms，则 controller 的恢复将会增加约 20 秒的不可用时间窗口。\"]},\"1124\":{\"h\":\"10. kafka 为什么这么快？\",\"t\":[\"1.顺序读写磁盘分为顺序读写与随机读写，基于磁盘的随机读写确实很慢，但磁盘的顺序读写性能却很高，kafka 这里采用的就是顺序读写。\",\"2.Page Cache为了优化读写性能，Kafka 利用了操作系统本身的 Page Cache，就是利用操作系统自身的内存而不是JVM空间内存。\",\"3.零拷贝Kafka使用了零拷贝技术，也就是直接将数据从内核空间的读缓冲区直接拷贝到内核空间的 socket 缓冲区，然后再写入到 NIC 缓冲区，避免了在内核空间和用户空间之间穿梭。\",\"4.分区分段+索引Kafka 的 message 是按 topic分 类存储的，topic 中的数据又是按照一个一个的 partition 即分区存储到不同 broker 节点。每个 partition 对应了操作系统上的一个文件夹，partition 实际上又是按照segment分段存储的。通过这种分区分段的设计，Kafka 的 message 消息实际上是分布式存储在一个一个小的 segment 中的，每次文件操作也是直接操作的 segment。为了进一步的查询优化，Kafka 又默认为分段后的数据文件建立了索引文件，就是文件系统上的.index文件。这种分区分段+索引的设计，不仅提升了数据读取的效率，同时也提高了数据操作的并行度。\",\"5.批量读写Kafka 数据读写也是批量的而不是单条的,这样可以避免在网络上频繁传输单个消息带来的延迟和带宽开销。假设网络带宽为10MB/S，一次性传输10MB的消息比传输1KB的消息10000万次显然要快得多。\",\"6.批量压缩Kafka 把所有的消息都变成一个批量的文件，并且进行合理的批量压缩，减少网络 IO 损耗，通过 mmap 提高 I/O 速度，写入数据的时候由于单个Partion是末尾添加所以速度最优；读取数据的时候配合 sendfile 进行直接读取。\",\"低谷蓄力\"]},\"1125\":{\"h\":\"《最少必要面试题》\",\"t\":[\"10道不得不会的Java基础面试题\",\"10道不得不会的Java容器面试题\",\"10道不得不会的Java并发基础面试题\",\"10道不得不会的JavaEE面试题\",\"10道不得不会的JVM面试题\",\"10道不得不会的MySQL基础面试题\",\"10道不得不会的MyBatis面试题\",\"10道不得不会的Spring面试题\",\"10道不得不会的SpringBoot面试题\",\"10道不得不会的ElasticSearch面试题\",\"10道不得不会的Redis面试题\",\"10道不得不会的Kafka面试题\",\"10道不得不会的Zookeeper面试题\",\"10道不得不会的Docker面试题\",\"10道不得不会的缓存面试题\",\"GItHub|GitEE\"]},\"1126\":{\"c\":[\"最少必要面试题\"]},\"1127\":{\"c\":[\"kafka\",\"面试题\"]},\"1128\":{\"h\":\"10道不得不会的 MyBatis 面试题\",\"t\":[\"MyBatis\",\"10道不得不会的 MyBatis 面试题\",\"我是JavaPub，专注于面试、副业，技术人的成长记录。\",\"以下是 MyBatis 面试题，相信大家都会有种及眼熟又陌生的感觉、看过可能在短暂的面试后又马上忘记了。JavaPub在这里整理这些容易忘记的重点知识及解答，建议收藏，经常温习查阅。\",\"评论区见\",\"@[toc]\",\"本系列《最少必要面试题》\"]},\"1129\":{\"h\":\"1. 什么是MyBatis\",\"t\":[\"这个问题主要是对比JDBC来看\",\"MyBatis是一个ORM（对象关系映射）框架，它内部封装了JDBC,开发时只需要关注SQL语句本身，不需要花费精力去处理加载驱动，创建连接，创建statement等复杂的过程。开发人员不需要编写原生态sql，可以严格控制sql执行性能，灵活度高。\",\"MyBatis可以使用xml或者注解来配置映射原生信息，将POJO映射成数据库中的记录，避免了几乎所有的JDBC代码和手动设置的参数以及获取结果集。\"]},\"1130\":{\"h\":\"2. MyBatis的优点\",\"t\":[\"基于SQL语句编程，相对灵活（相对于hibernate），支持写动态sql语句并可重复使用。\",\"减少代码量，消除了冗余代码。（类似于JDBC的封装）\",\"与Spring完美集成。\",\"提供映射标签支持字段关系映射。\"]},\"1131\":{\"h\":\"3. #{}和${}的区别是什么？\",\"t\":[\"#{}预编译处理、是占位符，${}是字符串替换、是拼接符。\",\"使用#{}可以有效的防止sql注入，提高系统的安全性。\",\"Mybatis在处理 #{} 的时候会将sql中的 #{} 替换成？号，调用PreparedStatement来赋值\",\"/* SQL */ 如：select * from user where name = #{userName}；设userName=javapub 看日志我们可以看到解析时将#{userName}替换成了 ？ select * from user where name = ?; 然后再把 javapub 放进去，外面加上单引号\",\"Mybatis在处理 ${} 的时候就是把 ${} 替换成变量的值，调用Statement来赋值\",\"/* SQL */ 如：select * from user where name = #{userName}；设userName=javapub 看日志可以发现就是直接把值拼接上去了 select * from user where name = javapub; 这极有可能发生sql注入，下面举了一个简单的sql注入案例\"]},\"1132\":{\"h\":\"4. 一个 Xml 映射文件，都会写一个 Dao 接口与之对应，这个 Dao 接口的工作原理是什么?\",\"t\":[\"Dao 接口就是人们常说的 Mapper 接口，接口的全限名，就是映射文件中的 namespace 的值，接口的方法名就是映射文件中 MappedStatement 的 id 值，接口方法内的参数就是传递给 sql 的参数。\",\"接口里的方法是不能重载的，因为是全限名+方法名的保存和寻找策略。\",\"Dao接口的工作原理是JDK动态代理，Mybatis运行时会使用JDK动态代理为Dao接口生成代理proxy对象，代理对象proxy会拦截接口方法，转而执行接口方法所对应的MappedStatement所代表的sql，然后将sql执行结果返回。\",\"MappedStatement：MappedStatement维护了一条 <select|update|delete|insert>节点的封装,包括了传入参数映射配置、执行的SQL语句、结果映射配置等信息。\",\"<select id=\\\"selectAuthorLinkedHashMap\\\" resultType=\\\"java.util.LinkedHashMap\\\"> select id, username from author where id = #{value} </select>\"]},\"1133\":{\"h\":\"5. 如何获取自动生成的(主)键值?\",\"t\":[\"用法：\",\"在 <insert /> 标签中添加 useGeneratedKeys=\\\"true\\\" 等属性\",\"<insert id=\\\"insert\\\" useGeneratedKeys=\\\"true\\\" keyProperty=\\\"id\\\" keyColumn=\\\"id\\\" parameterType=\\\"person\\\" > INSERT INTO person(name, pswd) VALUE (#{name}, #{pswd}) </insert>\",\"当 Mybatis 解析 xml节点时，读到 insert 有配置时，会判断是否 有配置 useGeneratedKeys，如果有则会使用 Jdbc3KeyGenerator 作为sql回显，否则会以 NoKeyGenerator 作为主键回显。\",\"底层封装了JDBC获取自增主键，即当使用 prepareStatement 或者 Statement时候，可以通过 getGeneratedKeys 获取这条插入语句的自增而成的主键。例子\",\" Connection conn = DriverManager.getConnection(url, \\\"root\\\", \\\"123456\\\"); String[] columnNames = {\\\"id\\\", \\\"name\\\"}; PreparedStatement stmt = conn.prepareStatement(sql, columnNames); stmt.setString(1, \\\"jack wang\\\"); stmt.executeUpdate(); ResultSet rs = stmt.getGeneratedKeys(); int id = 0; if (rs.next()) { id = rs.getInt(1); System.out.println(\\\"----------\\\" + id); }\"]},\"1134\":{\"h\":\"6. Mybatis 动态 sql 有什么用？有哪些动态 sql？执行原理？\",\"t\":[\"Mybatis 动态 sql 可以让我们在 Xml 映射文件内，以标签的形式编写动态 sql，完成逻辑判断和动态拼接 sql 的功能。\",\"Mybatis 提供了9种动态sql标签： trim | where | set | foreach | if | choose | when | otherwise | bind。\",\"其执行原理为，使用 OGNL 从 sql 参数对象中计算表达式的值，根据表达式的值动态拼接 sql，以此来完成动态 sql 的功能。\",\"是不是有点懵，继续阅读：\",\"科普：\",\"OGNL 是 Object-Graph Navigation Language 的缩写，对象图导航语言。例如 #{} 语法。\",\"OGNL 作用是在对象和视图之间做数据的交互，可以存取对象的属性和调用对象的方法，通过表达式可以迭代出整个对象的结构图。\",\"参考一个很形象的例子。\",\"有一个学生对象 student，属性分别有 id = 10，name = '小明' 和 课程对象 course，其中 course 对象中属性有：分数 score = 88，排名 rank = 5。\",\"对象关系图如下：\",\"student id：10 name：小明 course： score：88 rank：5\",\"当上下文（环境）中的对象为 student 的时候，也就是在 Mybatis 中查询时传入的参数对象为 student 的时候：\",\"通过 OGNL 表达式直接获取上下文中对象的属性值，比如：\",\"#{id} —> 10，相对于当前上下文对象.getId()，即 student.getId() 。\",\"#{name} —> 小明。\",\"#{course.score} —> 88，相当于 student.getCourse().getScore()。\",\"所以，通过 OGNL 表达式，可以迭代出整个对象的结构图。\",\"发布 《最少必要面试题》\"]},\"1135\":{\"h\":\"7. 什么是Mybatis的一级、二级缓存?\",\"t\":[\"一级缓存: 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为 Session，当 Session flush 或 close 之后，该 Session 中的所有 Cache 就将清空，默认一级缓存是开启的。\",\"当Mybaits与Spring整合的时候，不带Spring事务的方法内，每次请求数据库，都会新建一个SqlSession，这时候是使用不到一级缓存的。除了事务问题，还有调用了Sqlsession的修改、添加、删除、commit()、close()等方法时，一级缓存也会被清空。\",\"二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap 存储，不同在于其存储作用域为 Mapper(Namespace)。即使开启了二级缓存，不同的sqlsession之间的缓存数据也不是想互访就能互访的，必须等到sqlsession关闭了以后，才会把其一级缓存中的数据写入二级缓存。默认不打开二级缓存。\",\"现在大多数应用都是支持分布式的，一般情况都是用中间件作为缓存层，比如redis。开启 MyBatis 的二级缓存也会多一步序列化和反序列化，影响服务性能。\"]},\"1136\":{\"h\":\"8. MyBatis的工作原理\",\"t\":[\"一图胜千文\",\"来源网络\",\"读取 MyBatis 配置文件：mybatis-config.xml 为 MyBatis 的全局配置文件，配置了 MyBatis 的运行环境等信息，例如数据库连接信息。\",\"加载映射文件。映射文件即 SQL 映射文件，该文件中配置了操作数据库的 SQL 语句，需要在 MyBatis 配置文件 mybatis-config.xml 中加载。mybatis-config.xml 文件可以加载多个映射文件，每个文件对应数据库中的一张表。\",\"构造会话工厂：通过 MyBatis 的环境等配置信息构建会话工厂 SqlSessionFactory。\",\"创建会话对象：由会话工厂创建 SqlSession 对象，该对象中包含了执行 SQL 语句的所有方法。\",\"Executor 执行器：MyBatis 底层定义了一个 Executor 接口来操作数据库，它将根据 SqlSession 传递的参数动态地生成需要执行的 SQL 语句，同时负责查询缓存的维护。\",\"MappedStatement 对象：在 Executor 接口的执行方法中有一个 MappedStatement 类型的参数，该参数是对映射信息的封装，用于存储要映射的 SQL 语句的 id、参数等信息。\",\"输入参数映射：输入参数类型可以是 Map、List 等集合类型，也可以是基本数据类型和 POJO 类型。输入参数映射过程类似于 JDBC 对 preparedStatement 对象设置参数的过程。\",\"输出结果映射：输出结果类型可以是 Map、 List 等集合类型，也可以是基本数据类型和 POJO 类型。输出结果映射过程类似于 JDBC 对结果集的解析过程。\"]},\"1137\":{\"h\":\"9. 什么是MyBatis的接口绑定？有哪些实现方式？\",\"t\":[\"接口绑定，就是在 MyBatis 中任意定义接口，然后把接口里面的方法和SQL语句绑定，我们直接调用接口方法就可以，这样比起原来的SqlSession提供的方法我们可以有更加灵活的选择和设置。\",\"接口绑定有两种实现方式：\",\"通过注解绑定，就是在接口的方法上面加上 @Select、@Update 等注解，里面包含Sql语句来绑定；\",\"通过xml里面写SQL来绑定， 在这种情况下，要指定xml映射文件里面的 namespace 必须为接口的全路径名。当Sql语句比较简单时候，用注解绑定， 当SQL语句比较复杂时候，用xml绑定，一般用xml绑定的比较多。\"]},\"1138\":{\"h\":\"10. Mybatis的分页原理\",\"t\":[\"Mybatis 使用 RowBounds 对象进行分页，它是针对ResultSet结果集执行的内存分页，而非物理分页，所以一般不会使用。可以在sql内直接书写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页。\",\"分页插件的原理就是使用 MyBatis 提供的插件接口，实现自定义插件，在插件的拦截方法内，拦截待执行的SQL，然后根据设置的 dialect（方言），和设置的分页参数，重写SQL ，生成带有分页语句的SQL，执行重写后的SQL，从而实现分页。\",\"举例：select * from student，拦截sql后重写为：select t.* from （select * from student）t limit 0，10。\",\"低谷蓄力\",\"《最少必要面试题》\",\"10道不得不会的Java基础面试题\",\"10道不得不会的Java容器面试题\",\"10道不得不会的Java并发基础面试题\",\"10道不得不会的JavaEE面试题\",\"10道不得不会的JVM面试题\",\"10道不得不会的MySQL基础面试题\",\"10道不得不会的MyBatis面试题\",\"10道不得不会的Spring面试题\",\"10道不得不会的SpringBoot面试题\",\"10道不得不会的ElasticSearch面试题\",\"10道不得不会的Redis面试题\",\"10道不得不会的Kafka面试题\",\"10道不得不会的Zookeeper面试题\",\"10道不得不会的Docker面试题\",\"10道不得不会的缓存面试题\",\"GItHub|GitEE\"]},\"1139\":{\"c\":[\"最少必要面试题\"]},\"1140\":{\"c\":[\"mybatis\",\"面试题\"]},\"1141\":{\"h\":\"10道不得不会的MySQL基础面试题\",\"t\":[\"MySql\",\"10道不得不会的MySQL基础面试题\",\"以下都是 MySQL常见面试题，相信大家都会有种及眼熟又陌生的感觉、看过可能在短暂的面试后又马上忘记了。JavaPub在这里整理这些容易忘记的重点知识及解答，建议收藏，经常温习查阅。\",\"评论区见\",\"@[toc]\",\"推荐一篇非常不错的文章，阅读后更有利于了解MySQL【B树和B+树的区别】： https://mp.weixin.qq.com/s/RWkc2lNarKnn8Dc0HrP58g\"]},\"1142\":{\"h\":\"1. mysql有哪几种log\",\"t\":[\"重做日志(redo log)、回滚日志(undo log)、二进制日志(binlog)、错误日志(errorlog)、慢查询日志(slow query log)、一般查询日志(general log)，中继日志(relay log)\",\"错误日志：记录出错信息，也记录一些警告信息或者正确的信息。\",\"查询日志：记录所有对数据库请求的信息，不论这些请求是否得到了正确的执行。\",\"慢查询日志：设置一个阈值，将运行时间超过该值的所有SQL语句都记录到慢查询的日志文件中。\",\"二进制日志：记录对数据库执行更改的所有操作。\",\"中继日志：中继日志也是二进制日志，用来给slave 库恢复\",\"事务日志：重做日志redo和回滚日志undo\"]},\"1143\":{\"h\":\"2. MySQL的复制原理以及流程\",\"t\":[\"主：binlog线程——记录下所有改变了数据库数据的语句，放进master上的binlog中。\",\"从：io线程——在使用start slave 之后，负责从master上拉取 binlog 内容，放进 自己的relay log中。\",\"从：sql执行线程——执行relay log中的语句。\"]},\"1144\":{\"h\":\"3. 事物的4种隔离级别\",\"t\":[\"隔离强度逐渐增强，性能逐渐变差。\",\"读未提交(RU) READ UNCOMMITTED\",\"读已提交(RC) READ COMMITT\",\"可重复读(RR) REPEATABLE READ\",\"串行化 SERIALIZABLE\",\"事务具有原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）四个特性，简称 ACID，缺一不可。\"]},\"1145\":{\"h\":\"4. 相关概念\",\"t\":[\"脏读\",\"脏读指的是读到了其他事务未提交的数据，未提交意味着这些数据可能会回滚，也就是可能最终不会存到数据库中，也就是不存在的数据。读到了并一定最终存在的数据，这就是脏读。\",\"可重复读\",\"可重复读指的是在一个事务内，最开始读到的数据和事务结束前的任意时刻读到的同一批数据都是一致的。通常针对数据更新（UPDATE）操作。\",\"不可重复读\",\"对比可重复读，不可重复读指的是在同一事务内，不同的时刻读到的同一批数据可能是不一样的，可能会受到其他事务的影响，比如其他事务改了这批数据并提交了。通常针对数据更新（UPDATE）操作。\",\"幻读\",\"幻读是针对数据插入（INSERT）操作来说的。假设事务 A 对某些行的内容作了更改，但是还未提交，此时事务 B 插入了与事务 A 更改前的记录相同的记录行，并且在事务 A 提交之前先提交了，而这时，在事务 A 中查询，会发现好像刚刚的更改对于某些数据未起作用，但其实是事务 B 刚插入进来的，让用户感觉很魔幻，感觉出现了幻觉，这就叫幻读。\"]},\"1146\":{\"h\":\"5. MySQL数据库几个基本的索引类型\",\"t\":[\"普通索引、唯一索引、主键索引、全文索引\"]},\"1147\":{\"h\":\"6. drop、delete与truncate的区\",\"t\":[\"SQL中的drop、delete、truncate都表示删除，但是三者有一些差别\",\"1、delete和truncate只删除表的数据不删除表的结构 2、速度,一般来说: drop> truncate >delete 3、delete语句是dml,这个操作会放到rollback segement中,事务提交之后才生效; 4、如果有相应的trigger,执行的时候将被触发. truncate,drop是ddl, 操作立即生效,原数据不放到rollback segment中,不能回滚. 操作不触发trigger.\"]},\"1148\":{\"h\":\"7. 数据库的乐观锁和悲观锁是什么？\",\"t\":[\"悲观锁的特点是先获取锁，再进行业务操作，即 “悲观” 的认为获取锁是非常有可能失败的，因此要先确保获取锁成功再进行业务操作。通常所说的 “一锁二查三更新” 即指的是使用悲观锁。\",\"通常来讲在数据库上的悲观锁需要数据库本身提供支持，即通过常用的 select … for update 操作来实现悲观锁。 当数据库执行 select for update 时会获取被 select 中的数据行的行锁，因此其他并发执行的 select for update 如果试图选中同一行则会发生排斥（需要等待行锁被释放），因此达到锁的效果。select for update 获取的行锁会在当前事务结束时自动释放，因此必须在事务中使用。\",\"mysql 还有个问题是 select… for update 语句执行中，如果数据表没有添加索引或主键，所有扫描过的行都会被锁上，这一点很容易造成问题。因此如果在 mysql 中用悲观锁务必要确定走了索引，而不是全表扫描。\",\"乐观锁的特点先进行业务操作，不到万不得已不去拿锁。即“乐观”的认为拿锁多半是会成功的，因此在进行完业务操作需要实际更新数据的最后一步再去拿一下锁就好。\",\"乐观锁在数据库上的实现完全是逻辑的，不需要数据库提供特殊的支持。一般的做法是在需要锁的数据上增加一个版本号，或者时间戳。\",\"乐观锁的两种实现方式：\",\"使用数据版本（Version）记录机制实现，这是乐观锁最常用的一种实现方式。何谓数据版本？即为数据增加一个版本标识，一般是通过为数据库表增加一个数字类型的 “version” 字段来实现。当读取数据时，将 version 字段的值一同读出，数据每更新一次，对此 version 值加一。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的 version 值进行比对，如果数据库表当前版本号与第一次取出来的 version 值相等，则予以更新，否则认为是过期数据。\",\"乐观锁定的第二种实现方式和第一种差不多，同样是在需要乐观锁控制的table中增加一个字段，名称无所谓，字段类型使用时间戳（timestamp）,和上面的 version 类似，也是在更新提交的时候检查当前数据库中数据的时间戳和自己更新前取到的时间戳进行对比，如果一致则 OK，否则就是版本冲突。\"]},\"1149\":{\"h\":\"8. SQL优化方式\",\"t\":[\"对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。\",\"应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如果索引是整形，那么可以在索引上设置默认值 0，确保表中列没有 null 值。\",\"应尽量避免在 where 子句中使用 != 或 <> 操作符，否则将引擎放弃使用索引而进行全表扫描。\",\"应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描。\",\"in 和 not in 也要慎用，否则会导致全表扫描。\",\"like ‘%abc%’ 也会导致全表扫描。\",\"应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。\",\"应尽量避免在 where 子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。\",\"在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。\",\"很多时候用 exists 代替 in 是一个好的选择。\"]},\"1150\":{\"h\":\"9. 从锁的类别上分MySQL都有哪些锁呢？\",\"t\":[\"从锁的类别上来讲，有共享锁和排他锁。\",\"共享锁: 又叫做读锁。 当用户要进行数据的读取时，对数据加上共享锁。共享锁可以同时加上多个。\",\"排他锁: 又叫做写锁。 当用户要进行数据的写入时，对数据加上排他锁。排他锁只可以加一个，他和其他的排他锁，共享锁都相斥。\",\"参考：\",\"1. https://haicoder.net/note/mysql-interview/mysql-interview-optimistic-pessimism-lock.html\"]},\"1151\":{\"h\":\"推荐阅读：\",\"t\":[\"系列面试题\",\"10道不得不会的Java基础面试题\",\"10道不得不会的Java容器面试题\",\"10道不得不会的Java并发基础面试题\",\"10道不得不会的JavaEE面试题\",\"10道不得不会的JVM面试题\",\"10道不得不会的MySQL基础面试题\",\"10道不得不会的MyBatis面试题\",\"10道不得不会的Spring面试题\",\"10道不得不会的SpringBoot面试题\",\"10道不得不会的ElasticSearch面试题\",\"10道不得不会的Redis面试题\",\"10道不得不会的Kafka面试题\",\"10道不得不会的Zookeeper面试题\",\"10道不得不会的Docker面试题\",\"10道不得不会的缓存面试题\",\"GItHub|GitEE\"]},\"1152\":{\"c\":[\"最少必要面试题\"]},\"1153\":{\"c\":[\"mysql\",\"面试题\"]},\"1154\":{\"h\":\"10道不得不会的Redis面试题\",\"t\":[\"Redis\",\"10道不得不会的 Redis 面试题\",\"以下是 Redis 面试题，相信大家都会有种及眼熟又陌生的感觉、看过可能在短暂的面试后又马上忘记了。JavaPub在这里整理这些容易忘记的重点知识及解答，建议收藏，经常温习查阅。\",\"评论区见\",\"@[toc]\"]},\"1155\":{\"h\":\"1. Redis是什么？\",\"t\":[\"一般问这个问题你最少要答出以下几点\",\"Redis 是一个基于内存的 key-value 存储系统，数据结构包括字符串、list、set、zset（sorted set --有序集合）和hash，bitmap，GeoHash(坐标)，HyperLogLog，Streams（5.x版本以后）\"]},\"1156\":{\"h\":\"2. 你在哪些场景使用redis\",\"t\":[\"你有实战经验，那就直接表演。如果没有，选几个下面的经典场景\",\"作为队列使用，（因为是基于内存、一般不会作为消费队列、作为循环队列必要适用）；\",\"模拟类似于token这种需要设置过期时间的场景，登录失效；\",\"分布式缓存，避免大量请求底层关系型数据库，大大降低数据库压力；\",\"分布式锁；\",\"基于 bitmap 实现布隆过滤器；\",\"排行榜-基于zset（有序集合数据类型）；\",\"计数器-对于浏览量、播放量等并发较高，使用 redis incr 实现计数器功能；\",\"分布式会话；\",\"消息系统；\"]},\"1157\":{\"h\":\"3. 为什么Redis是单线程的?\",\"t\":[\"这个问题给一个官方答案\",\"因为Redis是基于内存的操作，CPU不是Redis的瓶颈，Redis的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地采用单线程的方案了。\"]},\"1158\":{\"h\":\"4. Redis持久化有几种方式？\",\"t\":[\"redis 提供了两种持久化的方式，分别是快照方式（RDB Redis DataBase）和文件追加（AOF Append Only File）。\",\"显而易见，快照方式重启恢复快、但是数据更容易丢失，文件追加数据更完整、重启恢复慢。\",\"混合持久化方式，Redis 4.0之后新增的方式，混合持久化是结合RDB和AOF的优点，在写入的时候先把当前的数据以RDB的形式写入到文件的开头，再将后续的操作以AOF的格式存入文件当中，这样既能保证重启时的速度，又能降低数据丢失的风险。\",\"在恢复时，先恢复快照方式保存的文件，然后再恢复追加文件中的增量数据。\"]},\"1159\":{\"h\":\"5. 什么是缓存穿透？怎么解决？\",\"t\":[\"缓存穿透是指用户请求的数据在缓存中不存在即没有命中，同时在数据库中也不存在，导致用户每次请求该数据都要去数据库中查询一遍，然后返回空。\",\"如果有恶意攻击者不断请求系统中不存在的数据，会导致短时间大量请求落在数据库上，造成数据库压力过大，甚至击垮数据库系统。\",\"这就叫做缓存穿透。\",\"怎么解决？\",\"对查询结果为空的情况也进行缓存，缓存时间设置短一点，或者该key对应的数据insert之后清理缓存。\",\"对一定不存在的key进行过滤。可以把所有的可能存在的key放到一个大的Bitmap中，查询时通过该Bitmap过滤。(也就是布隆过滤器的原理：大白话讲解布隆过滤器)\"]},\"1160\":{\"h\":\"6. 什么是缓存雪崩?\",\"t\":[\"缓存雪崩是指缓存中数据大批量到过期时间，而查询数据量巨大，请求直接落到数据库上，引起数据库压力过大甚至宕机。和缓存击穿不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。\",\"怎么解决？\",\"常用的解决方案有：\",\"均匀过期\",\"加互斥锁\",\"缓存永不过期\",\"双层缓存策略\",\"均匀过期：设置不同的过期时间，让缓存失效的时间点尽量均匀。通常可以为有效期增加随机值或者统一规划有效期。\",\"加互斥锁：跟缓存击穿解决思路一致，同一时间只让一个线程构建缓存，其他线程阻塞排队。\",\"缓存永不过期：跟缓存击穿解决思路一致，缓存在物理上永远不过期，用一个异步的线程更新缓存。\",\"双层缓存策略：使用主备两层缓存：\",\"主缓存：有效期按照经验值设置，设置为主读取的缓存，主缓存失效后从数据库加载最新值。\",\"备份缓存：有效期长，获取锁失败时读取的缓存，主缓存更新时需要同步更新备份缓存。\"]},\"1161\":{\"h\":\"7. Redis使用上如何做内存优化？\",\"t\":[\"缩短键值的长度\",\"缩短值的长度才是关键，如果值是一个大的业务对象，可以将对象序列化成二进制数组；\",\"首先应该在业务上进行精简，去掉不必要的属性，避免存储一些没用的数据；\",\"其次是序列化的工具选择上，应该选择更高效的序列化工具来降低字节数组大小；\",\"以JAVA为例，内置的序列化方式无论从速度还是压缩比都不尽如人意，这时可以选择更高效的序列化工具，如: protostuff，kryo等\",\"共享对象池\",\"对象共享池指Redis内部维护[0-9999]的整数对象池。创建大量的整数类型redisObject存在内存开销，每个redisObject内部结构至少占16字节，甚至超过了整数自身空间消耗。所以Redis内存维护一个[0-9999]的整数对象池，用于节约内存。 除了整数值对象，其他类型如list,hash,set,zset内部元素也可以使用整数对象池。因此开发中在满足需求的前提下，尽量使用整数对象以节省内存。\",\"字符串优化\",\"因为redis的惰性删除机制，字符串缩减后的空间不释放，作为预分配空间保留。尽量做新增不做更新。\",\"编码优化\",\"所谓编码就是具体使用哪种底层数据结构来实现。编码不同将直接影响数据的内存占用和读写效率。\",\"这个需要掌握redis底层的数据结构。下图作为参考：\",\"控制key的数量\"]},\"1162\":{\"h\":\"8. 你们redis使用哪种部署方式？\",\"t\":[\"redis部署分为单节点、主从部署（master-slave）、哨兵部署（Sentinel）、集群部署（cluster）。\",\"单节点：也就是单机部署；\",\"主从部署：分为一主一从或一主多从，主从之间同步分为全量或增量。量同步：master 节点通过 BGSAVE 生成对应的RDB文件，然后发送给slave节点，slave节点接收到写入命令后将master发送过来的文件加载并写入；增量同步：即在 master-slave 关系建立开始，master每执行一次数据变更的命令就会同步至slave节点。一般会将写请求转发到master，读请求转发到slave。提高了redis的性能。\",\"哨兵部署：分别有哨兵集群与Redis的主从集群，哨兵作为操作系统中的一个监控进程，对应监控每一个Redis实例，如果master服务异常（ping pong其中节点没有回复且超过了一定时间），就会多个哨兵之间进行确认，如果超过一半确认服务异常，则对master服务进行下线处理，并且选举出当前一个slave节点来转换成master节点；如果slave节点服务异常，也是经过多个哨兵确认后，进行下线处理。提高了redis集群高可用的特性，及横向扩展能力的增强。\",\"集群部署：属于**“去中心化”**的一种方式，多个 master 节点保存整个集群中的全部数据，而数据根据 key 进行 crc-16 校验算法进行散列，将 key 散列成对应 16383 个 slot，而 Redis cluster 集群中每个 master 节点负责不同的slot范围。每个 master 节点下还可以配置多个 slave 节点，同时也可以在集群中再使用 sentinel 哨兵提升整个集群的高可用性。\"]},\"1163\":{\"h\":\"9. redis实现分布式锁要注意什么？\",\"t\":[\"加锁过程要保证原子性；\",\"保证谁加的锁只能被谁解锁，即Redis加锁的value，解锁时需要传入相同的value才能成功，保证value唯一性；\",\"设置锁超时时间，防止加锁方异常无法释放锁时其他客户端无法获取锁，同时，超时时间要大于业务处理时间；\",\"使用Redis命令 SET lock_key unique_value NX EX seconds 进行加锁，单命令操作，Redis是串行执行命令，所以能保证只有一个能加锁成功。\"]},\"1164\":{\"h\":\"推荐阅读：\",\"t\":[\"10道不得不会的Java基础面试题\",\"10道不得不会的Java容器面试题\",\"10道不得不会的Java并发基础面试题\",\"10道不得不会的JavaEE面试题\",\"10道不得不会的JVM面试题\",\"10道不得不会的MySQL基础面试题\",\"10道不得不会的MyBatis面试题\",\"10道不得不会的Spring面试题\",\"10道不得不会的SpringBoot面试题\",\"10道不得不会的ElasticSearch面试题\",\"10道不得不会的Redis面试题\",\"10道不得不会的Kafka面试题\",\"10道不得不会的Zookeeper面试题\",\"10道不得不会的Docker面试题\",\"10道不得不会的缓存面试题\",\"GItHub|GitEE\"]},\"1165\":{\"c\":[\"最少必要面试题\"]},\"1166\":{\"c\":[\"redis\",\"面试题\"]},\"1167\":{\"h\":\"10道不得不会的Spring面试题\",\"t\":[\"spring\",\"10道不得不会的Spring面试题\",\"我是JavaPub，专注于面试、副业，技术人的成长记录。\",\"以下是 Spring 面试题，相信大家都会有种及眼熟又陌生的感觉、看过可能在短暂的面试后又马上忘记了。JavaPub在这里整理这些容易忘记的重点知识及解答，建议收藏，经常温习查阅。\",\"评论区见\",\"@[toc]\"]},\"1168\":{\"h\":\"1. 什么是 Spring 框架？Spring 框架有哪些主要模块？\",\"t\":[\"Spring是针对bean的生命周期进行管理的轻量级容器，一个控制反转和面向切面的容器框架\",\"Spring有七大功能模块：\",\"1、Core\",\"Core模块是Spring的核心类库，Core实现了IOC功能。\",\"2、AOP\",\"Apring AOP模块是Spring的AOP库，提供了AOP（拦截器）机制，并提供常见的拦截器，供用户自定义和配置。\",\"3、orm\",\"提供对常用ORM框架的管理和支持，hibernate、mybatis等。\",\"4、Dao\",\"Spring提供对JDBC的支持，对JDBC进行封装。\",\"5、Web\",\"对Struts2的支持。\",\"6、Context\",\"Context模块提供框架式的Bean的访问方式，其它程序可以通过Context访问Spring的Bean资源，相当于资源注入。\",\"7、MVC\",\"MVC模块为spring提供了一套轻量级的MVC实现，即Spring MVC。\"]},\"1169\":{\"h\":\"2. Spring IOC、AOP举例说明\",\"t\":[\"这是一个基础问题，如果理解有难度、建议先读五遍。\",\"1、IOC理论的背景\",\"我们都知道，在采用面向对象方法设计的软件系统中，它的底层实现都是由N个对象组成的，所有的对象通过彼此的合作，最终实现系统的业务逻辑。\",\"图1：软件系统中耦合的对象\",\"如果我们打开机械式手表的后盖，就会看到与上面类似的情形，各个齿轮分别带动时针、分针和秒 针顺时针旋转，从而在表盘上产生正确的时间。图1中描述的就是这样的一个齿轮组，它拥有多个独立的齿轮，这些齿轮相互啮合在一起，协同工作，共同完成某项 任务。我们可以看到，在这样的齿轮组中，如果有一个齿轮出了问题，就可能会影响到整个齿轮组的正常运转。 齿轮组中齿轮之间的啮合关系,与软件系统中对象之间的耦合关系非常相似。对象之间的耦合关系是无法避免的，也是必要的，这是协同工作的基础。现在，伴随着 工业级应用的规模越来越庞大，对象之间的依赖关系也越来越复杂，经常会出现对象之间的多重依赖性关系，因此，架构师和设计师对于系统的分析和设计，将面临 更大的挑战。对象之间耦合度过高的系统，必然会出现牵一发而动全身的情形。\",\"图2：对象之间复杂的依赖关系\",\"耦合关系不仅会出现在对象与对象之间，也会出现在软件系统的各模块之间，以及软件系统和硬件系统之间。如何降低系统之间、模块之间和对象之间的耦合度，是软件工程永远追求的目标之一。为了解决对象之间的耦合度过高的问题，软件专家Michael Mattson提出了IOC理论，用来实现对象之间的“解耦”，目前这个理论已经被成功地应用到实践当中，很多的J2EE项目均采用了IOC框架产品Spring。\",\"2、什么是控制反转(IoC)\",\"IOC是Inversion of Control的缩写，多数书籍翻译成“控制反转”，还有些书籍翻译成为“控制反向”或者“控制倒置”。 1996年，Michael Mattson在一篇有关探讨面向对象框架的文章中，首先提出了IOC 这个概念。对于面向对象设计及编程的基本思想，前面我们已经讲了很多了，不再赘述，简单来说就是把复杂系统分解成相互合作的对象，这些对象类通过封装以 后，内部实现对外部是透明的，从而降低了解决问题的复杂度，而且可以灵活地被重用和扩展。IOC理论提出的观点大体是这样的：借助于“第三方”实现具有依 赖关系的对象之间的解耦，如下图：\",\"图3：IOC解耦过程\",\"大家看到了吧，由于引进了中间位置的“第三方”，也就是IOC容器，使得A、B、C、D这4个对象没有了耦合关系，齿轮之间的传动全部依靠“第三 方”了，全部对象的控制权全部上缴给“第三方”IOC容器，所以，IOC容器成了整个系统的关键核心，它起到了一种类似“粘合剂”的作用，把系统中的所有 对象粘合在一起发挥作用，如果没有这个“粘合剂”，对象与对象之间会彼此失去联系，这就是有人把IOC容器比喻成“粘合剂”的由来。 我们再来做个试验：把上图中间的IOC容器拿掉，然后再来看看这套系统：\",\"图4：拿掉IoC容器后的系统\",\"我们现在看到的画面，就是我们要实现整个系统所需要完成的全部内容。这时候，A、B、C、D这4个对象之间已经没有了耦合关系，彼此毫无联系，这样 的话，当你在实现A的时候，根本无须再去考虑B、C和D了，对象之间的依赖关系已经降低到了最低程度。所以，如果真能实现IOC容器，对于系统开发而言， 这将是一件多么美好的事情，参与开发的每一成员只要实现自己的类就可以了，跟别人没有任何关系！ 我们再来看看，控制反转(IOC)到底为什么要起这么个名字？我们来对比一下： 软件系统在没有引入IOC容器之前，如图1所示，对象A依赖于对象B，那么对象A在初始化或者运行到某一点的时候，自己必须主动去创建对象B或者使用已经创建的对象B。无论是创建还是使用对象B，控制权都在自己手上。 软件系统在引入IOC容器之后，这种情形就完全改变了，如图3所示，由于IOC容器的加入，对象A与对象B之间失去了直接联系，所以，当对象A运行到需要对象B的时候，IOC容器会主动创建一个对象B注入到对象A需要的地方。 通过前后的对比，我们不难看出来：对象A获得依赖对象B的过程,由主动行为变为了被动行为，控制权颠倒过来了，这就是“控制反转”这个名称的由来。\",\"参考资料：https://www.cnblogs.com/jianmang/articles/4947615.html\"]},\"1170\":{\"h\":\"3. 什么是控制反转(IOC)？什么是依赖注入（DI）？\",\"t\":[\"IoC(Inversion of Control) – 控制反转。它不是一种技术，而是一种思想。\",\"IOC：就是对象之间的依赖关系由容器来创建，对象之间的关系本来是由我们开发者自己创建和维护的，在我们使用Spring框架后，对象之间的关系由容器来创建和维护，将开发者做的事让容器做，这就是控制反转。BeanFactory接口是Spring Ioc容器的核心接口。\",\"DI：我们在使用Spring容器的时候，容器通过调用set方法或者是构造器来建立对象之间的依赖关系。 控制反转是目标，依赖注入是我们实现控制反转的一种手段。\"]},\"1171\":{\"h\":\"4. 描述一下 Spring Bean 的生命周期？\",\"t\":[\"这道题是spring一道标准题目\",\"按照阶段理解Spring中的bean的生命周期主要包含四个阶段：实例化Bean --＞ Bean属性填充 --＞ 初始化Bean --＞销毁Bean\",\"Spring Bean 的生命周期\",\"Spring中的bean的生命周期主要包含四个阶段：实例化Bean --＞ Bean属性填充 --＞ 初始化Bean --＞销毁Bean\",\"首先是实例化Bean，当客户向容器请求一个尚未初始化的bean时，或初始化bean的时候需要注入另一个尚末初始化的依赖时，容器就会调用doCreateBean()方法进行实例化，实际上就是通过反射的方式创建出一个bean对象\",\"Bean实例创建出来后，接着就是给这个Bean对象进行属性填充，也就是注入这个Bean依赖的其它bean对象\",\"属性填充完成后，进行初始化Bean操作，初始化阶段又可以分为几个步骤：\",\"a. 执行Aware接口的方法\",\"Spring会检测该对象是否实现了xxxAware接口，通过Aware类型的接口，可以让我们拿到Spring容器的些资源。如实现BeanNameAware接口可以获取到BeanName，实现BeanFactoryAware接口可以获取到工厂对象BeanFactory等\",\"b. 执行BeanPostProcessor的前置处理方法postProcessBeforelnitialization()，对Bean进行一些自定义的前置处理\",\"c. 判断Bean是否实现了InitializingBean接口，如果实现了，将会执行lnitializingBean的afeterPropertiesSet()初始化方法；\",\"d. 执行用户自定义的初始化方法，如init-method等；\",\"e. 执行BeanPostProcessor的后置处理方法postProcessAfterinitialization()\",\"初始化完成后，Bean就成功创建了，之后就可以使用这个Bean， 当Bean不再需要时，会进行销毁操作，\",\"a. 首先判断Bean是否实现了DestructionAwareBeanPostProcessor接口，如果实现了，则会执行DestructionAwareBeanPostProcessor后置处理器的销毁回调方法 b. 其次会判断Bean是否实现了DisposableBean接口，如果实现了将会调用其实现的destroy()方法 c. 最后判断这个Bean是否配置了dlestroy-method等自定义的销毁方法，如果有的话，则会自动调用其配置的销毁方法；\"]},\"1172\":{\"h\":\"5. Spring Bean 的作用域之间有什么区别？\",\"t\":[\"Spring器中的bean可以分为5个范围：\",\"singleton：这种bean范围是默认的，这种范围确保不管接受多少请求，每个容器中只有一个bean的实例，单例模式；\",\"prototype：为每一个bean提供一个实例；\",\"request：在请求bean范围内为每一个来自客户端的网络请求创建一个实例，在请求完毕后，bean会失效并被垃圾回收器回收；\",\"session：为每个session创建一个实例，session过期后，bean会随之消失；\",\"global-session：global-session和Portlet应用相关。当你的应用部署在Portlet容器中工作时，它包含很多portlet。如果你想要声明让所有的portlet公用全局的存储变量的话，那么全局变量需要存储在global-session中。\"]},\"1173\":{\"h\":\"6. Spring中都应用了哪些设计模式\",\"t\":[\"1、简单工厂模式\",\"简单工厂模式的本质就是一个工厂类根据传入的参数，动态的决定实例化哪个类。\",\"Spring中的BeanFactory就是简单工厂模式的体现，根据传入一个唯一的标识来获得bean对象。\",\"2、工厂方法模式\",\"应用程序将对象的创建及初始化职责交给工厂对象，工厂Bean。\",\"定义工厂方法，然后通过config.xml配置文件，将其纳入Spring容器来管理，需要通过factory-method指定静态方法名称。\",\"3、单例模式\",\"Spring用的是双重判断加锁的单例模式，通过getSingleton方法从singletonObjects中获取bean。\",\" /** * Return the (raw) singleton object registered under the given name. * <p>Checks already instantiated singletons and also allows for an early * reference to a currently created singleton (resolving a circular reference). * @param beanName the name of the bean to look for * @param allowEarlyReference whether early references should be created or not * @return the registered singleton object, or {@code null} if none found */ protected Object getSingleton(String beanName, boolean allowEarlyReference) { Object singletonObject = this.singletonObjects.get(beanName); if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) { synchronized (this.singletonObjects) { singletonObject = this.earlySingletonObjects.get(beanName); if (singletonObject == null && allowEarlyReference) { ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName); if (singletonFactory != null) { singletonObject = singletonFactory.getObject(); this.earlySingletonObjects.put(beanName, singletonObject); this.singletonFactories.remove(beanName); } } } } return (singletonObject != NULL_OBJECT ? singletonObject : null); }\",\"4、代理模式\",\"Spring的AOP中，使用的Advice（通知）来增强被代理类的功能。Spring实现AOP功能的原理就是代理模式（① JDK动态代理，② CGLIB字节码生成技术代理。）对类进行方法级别的切面增强。\",\"5、装饰器模式\",\"装饰器模式：动态的给一个对象添加一些额外的功能。\",\"Spring的ApplicationContext中配置所有的DataSource。这些DataSource可能是不同的数据库，然后SessionFactory根据用户的每次请求，将DataSource设置成不同的数据源，以达到切换数据源的目的。\",\"在Spring中有两种表现：\",\"一种是类名中含有Wrapper，另一种是类名中含有Decorator。\",\"6、观察者模式\",\"定义对象间的一对多的关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动更新。\",\"Spring中观察者模式一般用在listener的实现。\",\"7、策略模式\",\"策略模式是行为性模式，调用不同的方法，适应行为的变化 ，强调父类的调用子类的特性 。\",\"getHandler是HandlerMapping接口中的唯一方法，用于根据请求找到匹配的处理器。\",\"8、模板方法模式\",\"Spring JdbcTemplate的query方法总体结构是一个模板方法+回调函数，query方法中调用的execute()是一个模板方法，而预期的回调doInStatement(Statement state)方法也是一个模板方法。\"]},\"1174\":{\"h\":\"7. Spring AOP里面的几个名词的概念\",\"t\":[\"（1）连接点（Join point）：指程序运行过程中所执行的方法。在Spring AOP中，一个连接点总代表一个方法的执行。\",\"（2）切面（Aspect）：被抽取出来的公共模块，可以用来会横切多个对象。Aspect切面可以看成 Pointcut切点 和 Advice通知 的结合，一个切面可以由多个切点和通知组成。\",\"在Spring AOP中，切面可以在类上使用 @AspectJ 注解来实现。\",\"（3）切点（Pointcut）：切点用于定义 要对哪些Join point进行拦截。\",\"切点分为execution方式和annotation方式。execution方式可以用路径表达式指定对哪些方法拦截，比如指定拦截add*、search*。annotation方式可以指定被哪些注解修饰的代码进行拦截。\",\"（4）通知（Advice）：指要在连接点（Join Point）上执行的动作，即增强的逻辑，比如权限校验和、日志记录等。通知有各种类型，包括Around、Before、After、After returning、After throwing。\",\"（5）目标对象（Target）：包含连接点的对象，也称作被通知（Advice）的对象。 由于Spring AOP是通过动态代理实现的，所以这个对象永远是一个代理对象。\",\"（6）织入（Weaving）：通过动态代理，在目标对象（Target）的方法（即连接点Join point）中执行增强逻辑（Advice）的过程。\",\"（7）引入（Introduction）：添加额外的方法或者字段到被通知的类。Spring允许引入新的接口（以及对应的实现）到任何被代理的对象。例如，你可以使用一个引入来使bean实现 IsModified 接口，以便简化缓存机制。\",\"几个概念的关系图可以参考下图：\",\"网上有张非常形象的图，描述了各个概念所处的场景和作用，贴在这里供大家理解：\"]},\"1175\":{\"h\":\"8. BeanFactory和ApplicationContext有什么区别？\",\"t\":[\"BeanFactory和ApplicationContext是Spring的两大核心接口，都可以当做Spring的容器。\",\"BeanFactory是Spring里面最底层的接口，是IoC的核心，定义了IoC的基本功能，包含了各种Bean的定义、加载、实例化，依赖注入和生命周期管理。ApplicationContext接口作为BeanFactory的子类，除了提供BeanFactory所具有的功能外，还提供了更完整的框架功能：\",\"继承MessageSource，因此支持国际化。\",\"资源文件访问，如URL和文件（ResourceLoader）。\",\"载入多个（有继承关系）上下文（即同时加载多个配置文件） ，使得每一个上下文都专注于一个特定的层次，比如应用的web层。\",\"提供在监听器中注册bean的事件。\",\"a. BeanFactroy采用的是延迟加载形式来注入Bean的，只有在使用到某个Bean时(调用getBean())，才对该Bean进行加载实例化。这样，我们就不能提前发现一些存在的Spring的配置问题。如果Bean的某一个属性没有注入，BeanFacotry加载后，直至第一次使用调用getBean方法才会抛出异常。\",\"b. ApplicationContext，它是在容器启动时，一次性创建了所有的Bean。这样，在容器启动时，我们就可以发现Spring中存在的配置错误，这样有利于检查所依赖属性是否注入。\",\"c. ApplicationContext启动后预载入所有的单实例Bean，所以在运行的时候速度比较快，因为它们已经创建好了。相对于BeanFactory，ApplicationContext 唯一的不足是占用内存空间，当应用程序配置Bean较多时，程序启动较慢。\",\"BeanFactory和ApplicationContext都支持BeanPostProcessor、BeanFactoryPostProcessor的使用，但两者之间的区别是：BeanFactory需要手动注册，而ApplicationContext则是自动注册。\",\"BeanFactory通常以编程的方式被创建，ApplicationContext还能以声明的方式创建，如使用ContextLoader。\"]},\"1176\":{\"h\":\"9. Spring如何解决循环依赖问题：\",\"t\":[\"见：https://javapub.blog.csdn.net/\",\"循环依赖问题在Spring中主要有三种情况：\",\"（1）通过构造方法进行依赖注入时产生的循环依赖问题。\",\"（2）通过setter方法进行依赖注入且是在多例（原型）模式下产生的循环依赖问题。\",\"（3）通过setter方法进行依赖注入且是在单例模式下产生的循环依赖问题。\",\"在Spring中，只有第（3）种方式的循环依赖问题被解决了，其他两种方式在遇到循环依赖问题时都会产生异常。这是因为：\",\"第一种构造方法注入的情况下，在new对象的时候就会堵塞住了，其实也就是”先有鸡还是先有蛋“的历史难题。\",\"第二种setter方法（多例）的情况下，每一次getBean()时，都会产生一个新的Bean，如此反复下去就会有无穷无尽的Bean产生了，最终就会导致OOM问题的出现。\",\"Spring在单例模式下的setter方法依赖注入引起的循环依赖问题，主要是通过二级缓存和三级缓存来解决的，其中三级缓存是主要功臣。解决的核心原理就是：在对象实例化之后，依赖注入之前，Spring提前暴露的Bean实例的引用在第三级缓存中进行存储。\",\"第一种构造方法注入的情况：\",\"例如：类A通过构造函数注入需要类B的实例，而类B通过构造函数注入需要类A的实例。如果将A类和B类的bean配置为相互注入，则Spring IoC容器会在运行时检测此循环引用，并抛出a BeanCurrentlyInCreationException。 一种可能的解决方案是编辑由setter而不是构造函数配置的某些类的源代码。或者，避免构造函数注入并仅使用setter注入。换句话说，尽管不推荐使用，但您可以使用setter注入配置循环依赖关系。 与典型情况（没有循环依赖）不同，bean A和bean B之间的循环依赖强制其中一个bean在完全初始化之前被注入另一个bean（经典的鸡与鸡蛋场景）。\",\" <bean id=\\\"person\\\" class=\\\"pojo.Person\\\"> <constructor-arg index=\\\"0\\\" value=\\\"小明\\\"/> <constructor-arg index=\\\"1\\\" value=\\\"12\\\"/> <constructor-arg index=\\\"2\\\" value=\\\"student\\\"/> </bean> <bean id=\\\"student\\\" class=\\\"pojo.Student\\\"> <constructor-arg index=\\\"0\\\" value=\\\"小王\\\"/> <constructor-arg index=\\\"1\\\" value=\\\"13\\\"/> <constructor-arg index=\\\"2\\\" value=\\\"person\\\"/> </bean>\"]},\"1177\":{\"h\":\"10. Spring事务的实现方式和实现原理：\",\"t\":[\"Spring事务的本质其实就是数据库对事务的支持，没有数据库的事务支持，spring是无法提供事务功能的。Spring只提供统一事务管理接口，具体实现都是由各数据库自己实现，数据库事务的提交和回滚是通过 redo log 和 undo log实现的。Spring会在事务开始时，根据当前环境中设置的隔离级别，调整数据库隔离级别，由此保持一致。\",\"1. Spring事务的种类：\",\"spring支持编程式事务管理和声明式事务管理两种方式：\",\"a. 编程式事务管理使用 TransactionTemplate。\",\"b. 声明式事务管理建立在AOP之上的。其本质是通过AOP功能，对方法前后进行拦截，将事务处理的功能编织到拦截的方法中，也就是在目标方法开始之前启动一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。\",\"声明式事务最大的优点就是不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中做相关的事务规则声明或通过@Transactional注解的方式，便可以将事务规则应用到业务逻辑中，减少业务代码的污染。唯一不足地方是，最细粒度只能作用到方法级别，无法做到像编程式事务那样可以作用到代码块级别。\",\"2. spring的事务传播机制：\",\"spring事务的传播机制说的是，当多个事务同时存在的时候，spring如何处理这些事务的行为。事务传播机制实际上是使用简单的ThreadLocal实现的，所以，如果调用的方法是在新线程调用的，事务传播实际上是会失效的。\",\"① PROPAGATION_REQUIRED：（默认传播行为）如果当前没有事务，就创建一个新事务；如果当前存在事务，就加入该事务。\",\"② PROPAGATION_REQUIRES_NEW：无论当前存不存在事务，都创建新事务进行执行。\",\"③ PROPAGATION_SUPPORTS：如果当前存在事务，就加入该事务；如果当前不存在事务，就以非事务执行。‘\",\"④ PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\",\"⑤ PROPAGATION_NESTED：如果当前存在事务，则在嵌套事务内执行；如果当前没有事务，则按REQUIRED属性执行。\",\"⑥ PROPAGATION_MANDATORY：如果当前存在事务，就加入该事务；如果当前不存在事务，就抛出异常。\",\"⑦ PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。\",\"事务不只限于脏读、幻读等名词。\",\"3. Spring中的隔离级别：\",\"① ISOLATION_DEFAULT：这是个 PlatfromTransactionManager 默认的隔离级别，使用数据库默认的事务隔离级别。\",\"② ISOLATION_READ_UNCOMMITTED：读未提交，允许事务在执行过程中，读取其他事务未提交的数据。\",\"③ ISOLATION_READ_COMMITTED：读已提交，允许事务在执行过程中，读取其他事务已经提交的数据。\",\"④ ISOLATION_REPEATABLE_READ：可重复读，在同一个事务内，任意时刻的查询结果都是一致的。\",\"⑤ ISOLATION_SERIALIZABLE：所有事务逐个依次执行。\",\"低谷蓄力\",\"最少必要面试题\",\"10道不得不会的Java基础面试题\",\"10道不得不会的Java容器面试题\",\"10道不得不会的Java并发基础面试题\",\"10道不得不会的JavaEE面试题\",\"10道不得不会的JVM面试题\",\"10道不得不会的MySQL基础面试题\",\"10道不得不会的MyBatis面试题\",\"10道不得不会的Spring面试题\",\"10道不得不会的SpringBoot面试题\",\"10道不得不会的ElasticSearch面试题\",\"10道不得不会的Redis面试题\",\"10道不得不会的Kafka面试题\",\"10道不得不会的Zookeeper面试题\",\"10道不得不会的Docker面试题\",\"10道不得不会的缓存面试题\"]},\"1178\":{\"c\":[\"最少必要面试题\"]},\"1179\":{\"c\":[\"spring\",\"面试题\"]},\"1180\":{\"h\":\"10道不得不会的 SpringBoot 面试题\",\"t\":[\"SpringBoot\",\"10道不得不会的 SpringBoot 面试题\",\"我是JavaPub，专注于面试、副业，技术人的成长记录。\",\"以下是 SpringBoot 面试题，相信大家都会有种及眼熟又陌生的感觉、看过可能在短暂的面试后又马上忘记了。JavaPub在这里整理这些容易忘记的重点知识及解答，建议收藏，经常温习查阅。\",\"评论区见\",\"[toc]\",\"本系列《最少必要面试题》\"]},\"1181\":{\"h\":\"1. 为什么要用 spring boot？\",\"t\":[\"通过自动配置方式简化 Spring 应用的开发，弱化配置，遵循 约定大于配置的原则 ，使开发者专注于业务开发而无需过多考虑配置相关操作，通过启动类的 main 方法一键启动应用。\"]},\"1182\":{\"h\":\"2. spring boot 有哪些优点？\",\"t\":[\"独立运行。 内嵌了 servlet，tomat 等，不需要打成 war 包部署到容器中，只需要将 SpringBoot 项目打成jar包就能独立运行。\",\"简化配置。 启动器自动依赖其他组件，简少了 maven 的配置。各种常用组件及配置已经默认配置完成，无需过多干预。\",\"避免大量的 Maven 导入和各种版本冲突。\",\"应用监控。 Spring Boot 提供一系列端点可以监控服务及应用。\"]},\"1183\":{\"h\":\"3. spring boot 核心配置文件是什么？\",\"t\":[\"springboot 核心的两个配置文件：\",\"bootstrap (. yml 或者 . properties)：boostrap 由父 ApplicationContext 加载的， 比 applicaton 优先加载，配置在应用程序上下文的引导阶段生效，且 bootstrap 里面的属性不能被覆盖；一般来说我们在 SpringCloud Config 或者 Nacos 中会用到它。\",\"application (. yml 或者 . properties)：用于 springboot 项目的自动化配置\"]},\"1184\":{\"h\":\"4. spring boot的核心注解是什么？由那些注解组成？\",\"t\":[\"核心注解为：@SpringBootApplication\",\"该注解主要由三个注解组成：\",\"​ @SpringBootConfiguration():代表当前是一个配置类 ​ @EnableAutoConfiguration(): 启动自动配置 ​ @ComponentScan()：指定扫描哪些 Spring 注解\"]},\"1185\":{\"h\":\"5. 说一下springboot的自动装配原理\",\"t\":[\"SpringBoot启动的时候加载主配置类，开启了自动配置功能@EnableAutoConfiguration。\",\"查看@EnableAutoConfiguration，其作用是利用AutoConfigurationImportSelector给容器中导入一些组件。\",\"查看AutoConfigurationImportSelector，其中public String[] selectImports(AnnotationMetadata annotationMetadata)方法内 最终调用getCandidateConfigurations()方法\",\"查看 getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes)，获取候选的配置，这个是扫描所有jar包类路径下\\\"META-INF/spring.factories\\\"\",\"然后把扫描到的这些文件包装成Properties对象。\",\"从properties中获取到EnableAutoConfiguration.class类名对应的值，然后把他们添加在容器中。\",\"简而言之，整个过程就是将类路径下 \\\"META-INF/spring.factories\\\" 里面配置的所有 EnableAutoConfiguration 的值加入到容器中。\"]},\"1186\":{\"h\":\"6. SpringBoot、Spring MVC和Spring有什么区别？\",\"t\":[\"Spring：主要用来创建IOC容器，依赖注入，实现程序间的松耦合\",\"SpringMVC: 主要是用来做WEB开发，通过各种组件的协调配合，简化Web应用的开发\",\"SpringBoot: SpringBoot更像是一个管家，当使用到对应功能时，只需要导入指定应用启动器，SpringBoot就能够在底层默认其配置，大大简化了开发所需的繁杂配置\"]},\"1187\":{\"h\":\"7. SpringBoot启动时都做了什么?\",\"t\":[\"Springboot 的启动，主要创建了配置环境 (environment)、事件监听 (listeners)、应用上下文(applicationContext)，并基于以上条件，在容器中开始实例化我们需要的 Bean，至此，通过 SpringBoot 启动的程序已经构造完成。\"]},\"1188\":{\"h\":\"8. SpringBoot 中的监视器是什么？\",\"t\":[\"SpringBoot Actuator 是 SpringBoot 一项重要功能，其可以帮助我们查看应用的运行状态，对运行时指标进行检查和监控，监视器提供了一组可以直接作为 httpurl 访问的 rest 端点来访问查看指定功能状态。\"]},\"1189\":{\"h\":\"9. SpringBoot 中的starter到底是什么 ?\",\"t\":[\"首先，这个 Starter 并非什么新的技术点，基本上还是基于 Spring 已有功能来实现的。首先它提供了一个自动化配置类，一般命名为 XXXAutoConfiguration ，在这个配置类中通过条件注解来决定一个配置是否生效（条件注解就是 Spring 中原本就有的），然后它还会提供一系列的默认配置，也允许开发者根据实际情况自定义相关配置，然后通过类型安全的属性注入将这些配置属性注入进来，新注入的属性会代替掉默认属性。\",\"正因为如此，很多第三方框架，我们只需要引入依赖就可以直接使用了。当然，开发者也可以自定义 Starter\",\"拓展：如何自定义starter?\",\"创建项目，创建两个模块分别为 spring-boot-starter-*，spring-boot-starter-*-autoconfiguration\",\"spring-boot-starter-* pom 引入 spring-boot-starter-*-autoconfiguration\",\"spring-boot-starter-*-autoconfiguration 创建功能方法，创建 *properties类，创建一个配置类将功能方法类添加到 spring 容器，在 resouces 下创建 META-INF/spring.factories 配置 org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\\org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration\",\"打包安装这两个模块到本地 maven 仓库，即可在其他项目引入 spring-boot-starter-* 注入功能类进行方法调用\"]},\"1190\":{\"h\":\"10. 微服务中如何实现 session 共享?\",\"t\":[\"在微服务中，一个完整的项目被拆分成多个不相同的独立的服务，各个服务独立部署在不同的服务器上，各自的 session 被从物理空间上隔离开了，但是经常，我们需要在不同微服务之间共享 session ，常见的方案就是 Spring Session + Redis 来实现 session 共享。将所有微服务的 session 统一保存在 Redis 上，当各个微服务对 session 有相关的读写操作时，都去操作 Redis 上的 session 。 这样就实现了 session 共享，Spring Session 基于 Spring 中的代理过滤器实现，使得 session 的同步操作对开发人员而言是透明的，非常简便。\",\"低谷蓄力\",\"《最少必要面试题》\",\"10道不得不会的Java基础面试题\",\"10道不得不会的Java容器面试题\",\"10道不得不会的Java并发基础面试题\",\"10道不得不会的JavaEE面试题\",\"10道不得不会的JVM面试题\",\"10道不得不会的MySQL基础面试题\",\"10道不得不会的MyBatis面试题\",\"10道不得不会的Spring面试题\",\"10道不得不会的SpringBoot面试题\",\"10道不得不会的ElasticSearch面试题\",\"10道不得不会的Redis面试题\",\"10道不得不会的Kafka面试题\",\"10道不得不会的Zookeeper面试题\",\"10道不得不会的Docker面试题\",\"10道不得不会的缓存面试题\",\"GItHub|GitEE\"]},\"1191\":{\"c\":[\"最少必要面试题\"]},\"1192\":{\"c\":[\"springboot\",\"面试题\"]},\"1193\":{\"h\":\"10道不得不会的 Zookeeper 面试题\",\"t\":[\"Zookeeper\",\"10道不得不会的 Zookeeper 面试题\",\"我是JavaPub，专注于面试、副业，技术人的成长记录。\",\"以下是 Zookeeper 面试题，相信大家都会有种及眼熟又陌生的感觉、看过可能在短暂的面试后又马上忘记了。JavaPub在这里整理这些容易忘记的重点知识及解答，建议收藏，经常温习查阅。\",\"评论区见\",\"@[toc]\",\"本系列《最少必要面试题》\"]},\"1194\":{\"h\":\"1. 什么是 Zookeeper\",\"t\":[\"ZooKeeper 是一个开源的分布式协调服务。它是一个为分布式应用提供一致性服务的软件，分布式应用程序可以基于 Zookeeper 实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。\",\"Zookeeper 从设计模式角度来理解， 是一个基于观察者模式设计的分布式服务管理框架，它负责存储和管理大家都关心的数据，然后接受观察者的注册，一旦这些数据的状态发生变化，Zookeeper就将负责通知已经在Zookeeper上注册的那些观察者做出反应。\",\"观察者模式是什么：设计模式\",\"可以这样理解：\",\"ZooKeeper=文件系统+通知机制\"]},\"1195\":{\"h\":\"2. ZK 的节点类型\",\"t\":[\"这道题相信大家都有所了解，zookeeper v3.6.2 版本后，支持7种节点类型。持久；持久顺序；临时；临时顺序；容器；持久 TTL；持久顺序 TTL。\",\"说出这几种类型当然已经回答了问题，但是细节的描述更能体现你的知识底蕴。\",\"持久 TTL、持久顺序 TTL\",\"关于持久和顺序这两个关键字，不用我再解释了，这两种类型的节点重点是后面的 TTL，TTL 是 time to live 的缩写，指带有存活时间，简单来说就是当该节点下面没有子节点的话，超过了 TTL 指定时间后就会被自动删除，但是 TTL 启用是需要额外的配置(这个之前也有提过)配置是 zookeeper.extendedTypesEnabled 需要配置成 true，否则的话创建 TTL 时会收到 Unimplemented 的报错。\"]},\"1196\":{\"h\":\"3. Zookeeper 下 Server 工作状态有哪些？\",\"t\":[\"服务器具有四种状态，分别是 LOOKING、FOLLOWING、LEADING、OBSERVING。\",\"LOOKING：寻 找 Leader 状态。当服务器处于该状态时，它会认为当前集群中没有Leader，因此需要进入 Leader 选举状态。\",\"FOLLOWING：跟随者状态。表明当前服务器角色是 Follower。\",\"LEADING：领导者状态。表明当前服务器角色是 Leader。\",\"OBSERVING：观察者状态。表明当前服务器角色是 Observer。（Observer角色除了不能投票(以及和投票相关的能力)和过半写成功策略外，其它和follower功能一样。observer角色减轻了投票的压力，在以前通过增、减follower的数量提高伸缩性。投票来说，follower是有状态的，都直接影响投票结果，特别是follower的数量越多，投票过程的性能就越差。）\"]},\"1197\":{\"h\":\"4. zookeeper是cp还是ap?\",\"t\":[\"zk遵循的是CP原则，即保证一致性和网络分区容错性，但不保证可用性。\",\"什么是cap?\",\"Consistency（一致性）：分布式系统中多个主机之间是否能够保持数据一致性的特性。即当系统数据发生更新操作之后，各个主机中的数据是否仍然处于一致的状态。\",\"Availability（可用性）：系统提供的服务必须一直处于可用的状态，即对于的每一个请求，系统总是可以在有限的时间内对用户做出响应。\",\"Partition tolerance（分区容错性）：分布式系统在遇到任何网络分区故障时候，仍然保证对外提供满足一致性和可用性的服务。\"]},\"1198\":{\"h\":\"5. 说几个 zookeeper 常用的命令。\",\"t\":[\"常用命令：ls get set create delete 等。\"]},\"1199\":{\"h\":\"6. 介绍一下ZAB协议？\",\"t\":[\"ZAB协议是为分布式协调服务Zookeeper专门设计的一种支持崩溃恢复的原子广播协议。\",\"ZAB协议包括两种基本的模式：\",\"崩溃恢复\",\"消息广播\",\"当整个 zookeeper 集群刚刚启动或者Leader服务器宕机、重启或者网络故障导致不存在过半的服务器与 Leader 服务器保持正常通信时，所有进程（服务器）进入崩溃恢复模式，首先选举产生新的 Leader 服务器，然后集群中 Follower 服务器开始与新的 Leader 服务器进行数据同步，当集群中超过半数机器与该 Leader 服务器完成数据同步之后，退出恢复模式进入消息广播模式，Leader 服务器开始接收客户端的事务请求生成事物提案来进行事务请求处理。\"]},\"1200\":{\"h\":\"7. ZAB 和 Paxos 算法的联系与区别？\",\"t\":[\"相同点：\",\"两者都存在一个类似于 Leader 进程的角色，由其负责协调多个 Follower 进程的运行\",\"Leader 进程都会等待超过半数的 Follower 做出正确的反馈后，才会将一个提案进行提交\",\"ZAB 协议中，每个 Proposal 中都包含一个 epoch 值来代表当前的 Leader 周期，Paxos 中名字为 Ballot\",\"不同点：\",\"ZAB(ZooKeeper Atomic Broadcast) 用来构建高可用的分布式数据主备系统（Zookeeper），Paxos 是用来构建分布式一致性状态机系统。\",\"而 Paxos 算法与 ZAB 协议不同的是，Paxos 算法的发起者可以是一个或多个。当集群中的 Acceptor 服务器中的大多数可以执行会话请求后，提议者服务器只负责发送提交指令，事务的执行实际发生在 Acceptor 服务器。这与 ZooKeeper 服务器上事务的执行发生在 Leader 服务器上不同。Paxos 算法在数据同步阶段，是多台 Acceptor 服务器作为数据源同步给集群中的多台 Learner 服务器，而 ZooKeeper 则是单台 Leader 服务器作为数据源同步给集群中的其他角色服务器。\",\"注意：\",\"ZAB是在Paxos的基础上改进和演变过来的。\",\"提议者（Proposer）、决策者（Acceptor）、决策学习者（Learner）\"]},\"1201\":{\"h\":\"8. Zookeeper 的典型应用场景\",\"t\":[\"数据发布/订阅\",\"负载均衡\",\"命名服务\",\"分布式协调/通知\",\"集群管理\",\"Master 选举\",\"分布式锁\",\"分布式队列\",\"数据发布/订阅系统，即所谓的配置中心，目的：动态获取数据（配置信息），实现数据（配置信息）的集中式管理和数据的动态更新\",\"Zookeeper 分布式锁\",\"有了 zookeeper 的一致性文件系统，锁的问题变得容易。锁服务可以分为两类，一个是保持独占，另一个是控制时序。\",\"对于第一类，我们将 zookeeper 上的一个 znode 看作是一把锁，通过 createznode的方式来实现。所有客户端都去创建 /task_lock 节点，最终成功创建的那个客户端也即拥有了这把锁。用完删除掉自己创建的 task_lock 节点就释放出锁。\",\"对于第二类， /task_lock 已经预先存在，所有客户端在它下面创建临时顺序编号目录节点，和选 master 一样，编号最小的获得锁，用完删除，依次方便。\",\"Zookeeper 队列管理\",\"一般很少用到，可简单了解\",\"两种类型的队列：\",\"同步队列，当一个队列的成员都聚齐时，这个队列才可用，否则一直等待所有成员到达。\",\"队列按照 FIFO 方式进行入队和出队操作。\",\"第一类，在约定目录下创建临时目录节点，监听节点数目是否是我们要求的数目。\",\"第二类，和分布式锁服务中的控制时序场景基本原理一致，入列有编号，出列按编号。在特定的目录下创建 PERSISTENT_SEQUENTIAL 节点，创建成功时Watcher 通知等待的队列，队列删除序列号最小的节点用以消费。此场景下Zookeeper 的 znode 用于消息存储，znode 存储的数据就是消息队列中的消息内容，SEQUENTIAL 序列号就是消息的编号，按序取出即可。由于创建的节点是持久化的，所以不必担心队列消息的丢失问题。\"]},\"1202\":{\"h\":\"9. Chroot特性\",\"t\":[\"zookeeper v3.2.0 版本后，添加了 Chroot 特性，该特性允许每个客户端为自己设置一个命名空间。如果一个客户端设置了 Chroot，那么该客户端对服务器的任何操作，都将会被限制在其自己的命名空间下。\",\"通过设置 Chroot，能够将一个客户端应用于 Zookeeper 服务端的一颗子树相对应，在那些多个应用共用一个 Zookeeper 进群的场景下，对实现不同应用间的相互隔离非常有帮助。\"]},\"1203\":{\"h\":\"拓展\",\"t\":[\"ZooKeeper以Fast Paxos算法为基础，Paxos 算法存在活锁的问题，即当有多个 proposer 交错提交时有可能互相排斥导致没有一个proposer能提交成功，而Fast Paxos做了一些优化，通过选举产生一个领导者，只有leader才能提交proposer具体算法可见Fast Paxos。\",\"低谷蓄力\",\"《最少必要面试题》\",\"10道不得不会的Java基础面试题\",\"10道不得不会的Java容器面试题\",\"10道不得不会的Java并发基础面试题\",\"10道不得不会的JavaEE面试题\",\"10道不得不会的JVM面试题\",\"10道不得不会的MySQL基础面试题\",\"10道不得不会的MyBatis面试题\",\"10道不得不会的Spring面试题\",\"10道不得不会的SpringBoot面试题\",\"10道不得不会的ElasticSearch面试题\",\"10道不得不会的Redis面试题\",\"10道不得不会的Kafka面试题\",\"10道不得不会的Zookeeper面试题\",\"10道不得不会的Docker面试题\",\"10道不得不会的缓存面试题\",\"GItHub|GitEE\"]},\"1204\":{\"c\":[\"最少必要面试题\"]},\"1205\":{\"c\":[\"zookeeper\",\"面试题\"]},\"1206\":{\"h\":\"《最少必要面试题》第一版\",\"t\":[\"相信大家都会有种及眼熟又陌生的感觉、看过可能在短暂的面试后又马上忘记了。JavaPub 在这里整理这些容易忘记的重点知识及 解答，建议收藏，经常温习查阅。\",\"点击在线阅读《最少必要面试题》\",\"[toc]\"]},\"1207\":{\"h\":\"缓存\"},\"1208\":{\"h\":\"1. 什么是缓存？\",\"t\":[\"缓存，就是数据交换的缓冲区，针对服务对象的不同（本质就是不同的硬件）都可以构建缓存。而我们平时说的缓存，大多是指内存。\",\"目的是， 把读写速度【慢】的介质的数据保存在读写速度【快】的介质中，从而提高读写速度，减少时间消耗。 例如：\",\"CPU 高速缓存 ：高速缓存的读写速度远高于内存。 \",\"CPU 读数据时，如果在高速缓存中找到所需数据，就不需要读内存\",\"CPU 写数据时，先写到高速缓存，再回写到内存。\",\"磁盘缓存：磁盘缓存其实就把常用的磁盘数据保存在内存中，内存读写速度也是远高于磁盘的。 \",\"读数据，时从内存读取。\",\"写数据时，可先写到内存，定时或定量回写到磁盘，或者是同步回写。\"]},\"1209\":{\"h\":\"2. 为什么要用缓存？\",\"t\":[\"使用缓存的目的，就是提升读写性能。而实际业务场景下，更多的是为了提升读性能，带来更好的性能，更高的并发量。\",\"日常业务中，我们使用比较多的数据库是 MySQL ，缓存是 Redis 。Redis 比 MySQL 的读写性能好很多。那么，我们将 MySQL 的热点数据，缓存到 Redis 中，提升读取性能，也减小 MySQL 的读取压力。例如说：\",\"论坛帖子的访问频率比较高，且要实时更新阅读量，使用 Redis 记录帖子的阅读量，可以提升性能和并发。\",\"商品信息，数据更新的频率不高，但是读取的频率很高，特别是热门商品。\"]},\"1210\":{\"h\":\"3. 请说说有哪些缓存算法？是否能手写一下 LRU 代码的实现？\",\"t\":[\"缓存算法，比较常见的是三种：\",\"LRU（least recently used ，最近最少使用)\",\"LFU（Least Frequently used ，最不经常使用)\",\"FIFO（first in first out ，先进先出)\",\"这里我们可以借助 LinkedHashMap 实现\",\"public class LRULinkedMap<K,V> { /** * 最大缓存大小 */ private int cacheSize; private LinkedHashMap<K,V> cacheMap ; public LRULinkedMap(int cacheSize) { this.cacheSize = cacheSize; cacheMap = new LinkedHashMap(16,0.75F,true){ @Override protected boolean removeEldestEntry(Map.Entry eldest) { if (cacheSize + 1 == cacheMap.size()){ return true ; }else { return false ; } } }; } public void put(K key,V value){ cacheMap.put(key,value) ; } public V get(K key){ return cacheMap.get(key) ; } public Collection<Map.Entry<K, V>> getAll() { return new ArrayList<Map.Entry<K, V>>(cacheMap.entrySet()); } }\",\"使用案例：\",\" @Test public void put() throws Exception { LRULinkedMap<String,Integer> map = new LRULinkedMap(3) ; map.put(\\\"1\\\",1); map.put(\\\"2\\\",2); map.put(\\\"3\\\",3); for (Map.Entry<String, Integer> e : map.getAll()){ System.out.print(e.getKey() + \\\" : \\\" + e.getValue() + \\\"\\\\t\\\"); } System.out.println(\\\"\\\"); map.put(\\\"4\\\",4); for (Map.Entry<String, Integer> e : map.getAll()){ System.out.print(e.getKey() + \\\" : \\\" + e.getValue() + \\\"\\\\t\\\"); } } //输出 1 : 1 2 : 2 3 : 3 2 : 2 3 : 3 4 : 4\"]},\"1211\":{\"h\":\"4. 常见的常见的缓存工具和框架有哪些？\",\"t\":[\"在 Java 后端开发中，常见的缓存工具和框架列举如下：\",\"本地缓存：Guava LocalCache、Ehcache、Caffeine 。\",\"Ehcache 的功能更加丰富，Caffeine 的性能要比 Guava LocalCache 好。\",\"分布式缓存：Redis、Memcached、Tair 。\",\"Redis 最为主流和常用。\"]},\"1212\":{\"h\":\"5. 用了缓存之后，有哪些常见问题？\",\"t\":[\"常见的问题，可列举如下：\",\"写入问题\",\"缓存何时写入？并且写时如何避免并发重复写入？\",\"缓存如何失效？\",\"缓存和 DB 的一致性如何保证？\",\"经典三连问\",\"如何避免缓存穿透的问题？\",\"如何避免缓存击穿的问题？\",\"如果避免缓存雪崩的问题？\"]},\"1213\":{\"h\":\"6. 如何处理缓存穿透的问题\",\"t\":[\"缓存穿透，是指查询一个一定不存在的数据，由于缓存是不命中时被动写，并且处于容错考虑，如果从 DB 查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到 DB 去查询，失去了缓存的意义。\",\"在流量大时，可能 DB 就挂掉了，要是有人利用不存在的 key 频繁攻击我们的应用，这就是漏洞。如下图：\",\"缓存穿透\",\"如何解决\",\"有两种方案可以解决：\",\"方案一，缓存空对象。 当从 DB 查询数据为空，我们仍然将这个空结果进行缓存，具体的值需要使用特殊的标识，能和真正缓存的数据区分开。另外，需要设置较短的过期时间，一般建议不要超过 5 分钟。\",\"方案二，BloomFilter 布隆过滤器。 在缓存服务的基础上，构建 BloomFilter 数据结构，在 BloomFilter 中存储对应的 KEY 是否存在，如果存在，说明该 KEY 对应的值不为空。\",\"如何选择\",\"这两个方案，各有其优缺点。\",\"缓存空对象\",\"BloomFilter 布隆过滤器\",\"适用场景\",\"1、数据命中不高 2、保证一致性\",\"1、数据命中不高, 2、数据相对固定、实时性低\",\"维护成本\",\"1、代码维护简单 2、需要过多的缓存空间 3、数据不一致\",\"1、代码维护复杂，2、缓存空间占用小\",\"实际情况下，使用方案二比较多。因为，相比方案一来说，更加节省内容，对缓存的负荷更小。\"]},\"1214\":{\"h\":\"7. 如何处理缓存雪崩的问题\",\"t\":[\"缓存雪崩，是指缓存由于某些原因无法提供服务( 例如，缓存挂掉了 )，所有请求全部达到 DB 中，导致 DB 负荷大增，最终挂掉的情况。\",\"如何解决\",\"预防和解决缓存雪崩的问题，可以从以下多个方面进行共同着手。\",\"缓存高可用：通过搭建缓存的高可用，避免缓存挂掉导致无法提供服务的情况，从而降低出现缓存雪崩的情况。假设我们使用 Redis 作为缓存，则可以使用 Redis Sentinel 或 Redis Cluster 实现高可用。\",\"本地缓存：如果使用本地缓存时，即使分布式缓存挂了，也可以将 DB 查询到的结果缓存到本地，避免后续请求全部到达 DB 中。如果我们使用 JVM ，则可以使用 Ehcache、Guava Cache 实现本地缓存的功能。\",\"当然，引入本地缓存也会有相应的问题，例如说：\",\"本地缓存的实时性怎么保证？ 方案一，可以引入消息队列。在数据更新时，发布数据更新的消息；而进>程中有相应的消费者消费该消息，从而更新本地缓存。 方案二，设置较短的过期时间，请求时从 DB 重新拉取。 方案三，手动过期。\",\"请求 DB 限流: 通过限制 DB 的每秒请求数，避免把 DB 也打挂了。如果我们使用 Java ，则可以使用 Guava RateLimiter、Sentinel、Hystrix 实现限流的功能。这样至少能有两个好处：\",\"可能有一部分用户，还可以使用，系统还没死透。\",\"未来缓存服务恢复后，系统立即就已经恢复，无需再处理 DB 也挂掉的情况。\",\"提前演练：在项目上线前，演练缓存宕掉后，应用以及后端的负载情况以及可能出现的问题，在此基础上做一些预案设定。\"]},\"1215\":{\"h\":\"8. 如何处理缓存击穿的问题\",\"t\":[\"缓存击穿，是指某个极度“热点”数据在某个时间点过期时，恰好在这个时间点对这个 KEY 有大量的并发请求过来，这些请求发现缓存过期一般都会从 DB 加载数据并回设到缓存，但是这个时候大并发的请求可能会瞬间 DB 压垮。\",\"对于一些设置了过期时间的 KEY ，如果这些 KEY 可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑这个问题。\",\"区别： \",\"和缓存“雪崩“”的区别在于，前者针对某一 KEY 缓存，后者则是很多 KEY 。\",\"和缓存“穿透“”的区别在于，这个 KEY 是真实存在对应的值的。\",\"如何解决\",\"有两种方案可以解决：\",\"方案一，使用互斥锁。请求发现缓存不存在后，去查询 DB 前，使用分布式锁，保证有且只有一个线程去查询 DB ，并更新到缓存。\",\"方案二，手动过期。缓存上从不设置过期时间，功能上将过期时间存在 KEY 对应的 VALUE 里。流程如下：\",\"获取缓存。通过 VALUE 的过期时间，判断是否过期。如果未过期，则直接返回；如果已过期，继续往下执行。\",\"通过一个后台的异步线程进行缓存的构建，也就是“手动”过期。通过后台的异步线程，保证有且只有一个线程去查询 DB。\",\"同时，虽然 VALUE 已经过期，还是直接返回。通过这样的方式，保证服务的可用性，虽然损失了一定的时效性。\",\"选择\",\"这两个方案，各有其优缺点。\",\"使用互斥锁\",\"手动过期\",\"优点\",\"1、思路简单 2、保证一致性\",\"1、性价最佳，用户无需等待\",\"缺点\",\"1、代码复杂度增大 2、存在死锁的风险\",\"1、无法保证缓存一致性\"]},\"1216\":{\"h\":\"9. 缓存和 DB 的一致性如何保证？\",\"t\":[\"产生原因\",\"主要有两种情况，会导致缓存和 DB 的一致性问题：\",\"并发的场景下，导致读取老的 DB 数据，更新到缓存中。\",\"主要指的是，更新 DB 数据之前，先删除 Cache 的数据。在低并发量下没什么问题，但是在高并发下，就会存在问题。在(删除 Cache 的数据, 和更新 DB 数据)时间之间，恰好有一个请求，我们如果使用被动读，因为此时 DB 数据还是老的，又会将老的数据写入到 Cache 中。\",\"缓存和 DB 的操作，不在一个事务中，可能只有一个 DB 操作成功，而另一个 Cache 操作失败，导致不一致。\",\"当然，有一点我们要注意，缓存和 DB 的一致性，我们指的更多的是最终一致性。我们使用缓存只要是提高读操作的性能，真正在写操作的业务逻辑，还是以数据库为准。例如说，我们可能缓存用户钱包的余额在缓存中，在前端查询钱包余额时，读取缓存，在使用钱包余额时，读取数据库。\",\"解决方案\",\"在开始说解决方案之前，胖友先看看如下几篇文章，可能有一丢丢多，保持耐心。\",\"当然无论哪种方案，比较重要的就是解决两个问题：\",\"将缓存可能存在的并行写，实现串行写。\",\"实现数据的最终一致性。\",\"先淘汰缓存，再写数据库 因为先淘汰缓存，所以数据的最终一致性是可以得到有效的保证的。为什么呢？先淘汰缓存，即使写数据库发生异常，也就是下次缓存读取时，多读取一次数据库。\",\"那么，我们需要解决缓存并行写，实现串行写。比较简单的方式，引入分布式锁。\",\"在写请求时，先淘汰缓存之前，先获取该分布式锁。\",\"在读请求时，发现缓存不存在时，先获取分布式锁。\",\"先写数据库，再更新缓存\",\"按照 “先写数据库，再更新缓存”，我们要保证 DB 和缓存的操作，能够在 “同一个事务”中，从而实现最终一致性\"]},\"1217\":{\"h\":\"10. 什么是缓存预热？如何实现缓存预热？\",\"t\":[\"缓存预热\",\"在刚启动的缓存系统中，如果缓存中没有任何数据，如果依靠用户请求的方式重建缓存数据，那么对数据库的压力非常大，而且系统的性能开销也是巨大的。\",\"此时，最好的策略是启动时就把热点数据加载好。这样，用户请求时，直接读取的就是缓存的数据，而无需去读取 DB 重建缓存数据。举个例子，热门的或者推荐的商品，需要提前预热到缓存中。\",\"如何实现\",\"一般来说，有如下几种方式来实现：\",\"数据量不大时，项目启动时，自动进行初始化。\",\"写个修复数据脚本，手动执行该脚本。\",\"写个管理界面，可以手动点击，预热对应的数据到缓存中。\"]},\"1218\":{\"h\":\"拓展：缓存数据的淘汰策略有哪些？\",\"t\":[\"除了缓存服务器自带的缓存自动失效策略之外，我们还可以根据具体的业务需求进行自定义的“手动”缓存淘汰，常见的策略有两种：\",\"定时去清理过期的缓存。\",\"当有用户请求过来时，再判断这个请求所用到的缓存是否过期，过期的话就去底层系统得到新数据并更新缓存。\",\"两者各有优劣，第一种的缺点是维护大量缓存的 key 是比较麻烦的，第二种的缺点就是每次用户请求过来都要判断缓存失效，逻辑相对比较复杂！Redis 的缓存淘汰策略就是很好的实践方式。\",\"具体用哪种方案，大家可以根据自己的应用场景来权衡。\"]},\"1219\":{\"h\":\"Docker\"},\"1220\":{\"h\":\"1. 什么是 Docker 容器？\",\"t\":[\"Docker 是一种流行的开源软件平台，可简化创建、管理、运行和分发应用程序的过程。它使用容器来打包应用程序及其依赖项。我们也可以将容器视为 Docker 镜像的运行时实例。\"]},\"1221\":{\"h\":\"2. Docker 和虚拟机有什么不同？\",\"t\":[\"Docker 是轻量级的沙盒，在其中运行的只是应用，虚拟机里面还有额外的系统。\"]},\"1222\":{\"h\":\"3. 什么是 DockerFile？\",\"t\":[\"Dockerfile 是一个文本文件，其中包含我们需要运行以构建 Docker 镜像的所有命令，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。Docker 使用 Dockerfile 中的指令自动构建镜像。我们可以 docker build 用来创建按顺序执行多个命令行指令的自动构建。\",\"一些最常用的指令如下：\",\"FROM ：使用 FROM 为后续的指令建立基础映像。在所有有效的 Dockerfile 中， FROM 是第一条指令。 LABEL： LABEL 指令用于组织项目映像，模块，许可等。在自动化布署方面 LABEL 也有很大用途。在 LABEL 中指定一组键值对，可用于程序化配置或布署 Docker 。 RUN： RUN 指令可在映像当前层执行任何命令并创建一个新层，用于在映像层中添加功能层，也许最来的层会依赖它。 CMD： 使用 CMD 指令为执行的容器提供默认值。在 Dockerfile 文件中，若添加多个 CMD 指令，只有最后的 CMD 指令运行。\"]},\"1223\":{\"h\":\"4. 使用Docker Compose时如何保证容器A先于容器B运行？\",\"t\":[\"Docker Compose 是一个用来定义和运行复杂应用的Docker工具。一个使用Docker容器的应用，通常由多个容器组成。使用Docker Compose不再需要使用shell脚本来启动容器。Compose 通过一个配置文件来管理多个Docker容器。简单理解：Docker Compose 是docker的管理工具。\",\"Docker Compose 在继续下一个容器之前不会等待容器准备就绪。为了控制我们的执行顺序，我们可以使用“取决于”条件，depends_on 。这是在 docker-compose.yml 文件中使用的示例\",\"version: \\\"2.4\\\" services: backend: build: . # 构建自定义镜像 depends_on: - db db: image: mysql\",\"用 docker-compose up 命令将按照我们指定的依赖顺序启动和运行服务。\"]},\"1224\":{\"h\":\"5. 一个完整的Docker由哪些部分组成?\",\"t\":[\"DockerClient 客户端\",\"Docker Daemon 守护进程\",\"Docker Image 镜像\",\"DockerContainer 容器\"]},\"1225\":{\"h\":\"6. docker常用命令\",\"t\":[\"命令建议在本地安装做一个实操，记忆会更深刻。 也可以克隆基于docker的俩万（springboot+vue）项目练手，提供视频+完善文档。地址：https://gitee.com/rodert/liawan-vue\",\"查看本地主机的所用镜像：`docker images``\",\"搜索镜像：`docker search mysql``\",\"下载镜像：docker pull mysql，没写 tag 就默认下载最新的 lastest\",\"下载指定版本的镜像：`docker pull mysql:5.7``\",\"删除镜像：`docker rmi -f 镜像id 镜像id 镜像id``\"]},\"1226\":{\"h\":\"7. 描述 Docker 容器的生命周期。\",\"t\":[\"Docker 容器经历以下阶段：\",\"创建容器\",\"运行容器\",\"暂停容器（可选）\",\"取消暂停容器（可选）\",\"启动容器\",\"停止容器\",\"重启容器\",\"杀死容器\",\"销毁容器\"]},\"1227\":{\"h\":\"8. docker容器之间怎么隔离?\",\"t\":[\"这是一道涉猎很广泛的题目，理解性阅读。\",\"Linux中的PID、IPC、网络等资源是全局的，而Linux的NameSpace机制是一种资源隔离方案，在该机制下这些资源就不再是全局的了，而是属于某个特定的NameSpace，各个NameSpace下的资源互不干扰。\",\"**Namespace实际上修改了应用进程看待整个计算机“视图”，即它的“视线”被操作系统做了限制，只能“看到”某些指定的内容​​。**对于宿主机来说，这些被“隔离”了的进程跟其他进程并没有区别。\",\"虽然有了NameSpace技术可以实现资源隔离，但进程还是可以不受控的访问系统资源，比如CPU、内存、磁盘、网络等，为了控制容器中进程对资源的访问，Docker采用control groups技术(也就是cgroup)，有了cgroup就可以控制容器中进程对系统资源的消耗了，比如你可以限制某个容器使用内存的上限、可以在哪些CPU上运行等等。\",\"有了这两项技术，容器看起来就真的像是独立的操作系统了。\",\"强烈建议大家实操，才能更好的理解docker。\",\"低谷蓄力\"]},\"1228\":{\"h\":\"ElasticSearch\"},\"1229\":{\"h\":\"1. 说说你们公司 es 的集群架构，索引数据大小，分片有多少，以及一些调优手段 。\",\"t\":[\"节点数、分片数、副本数，尽量根据自己公司使用情况回答，当然适当放大也可行。\",\"调优手段是现在很常见的面试题，下面这几种调优手段一定要了解懂。当然，下面的每一条都可以当做调优的一部分。\",\"设计调优\",\"参考： https://www.cnblogs.com/sanduzxcvbnm/p/12084012.html\",\"a. 根据业务增量需求，采取基于日期模板创建索引，通过 rollover API 滚动索引；(rollover API我会单独写一个代码案例做讲解，公众号：JavaPub) b. 使用别名进行索引管理；（es的索引名不能改变，提供的别名机制使用非常广泛。） c. 每天凌晨定时对索引做force_merge操作，以释放空间； d. 采取冷热分离机制，热数据存储到SSD，提高检索效率；冷数据定期进行shrink操作，以缩减存储； e. 采取curator进行索引的生命周期管理； f. 仅针对需要分词的字段，合理的设置分词器； g. Mapping阶段充分结合各个字段的属性，是否需要检索、是否需要存储等。\",\"进100+原创文章：https://gitee.com/rodert/JavaPub\",\"写入调优\",\"写入前副本数设置为0；\",\"写入前关闭refresh_interval设置为-1，禁用刷新机制；\",\"写入过程中：采取bulk批量写入；\",\"写入后恢复副本数和刷新间隔；\",\"尽量使用自动生成的id。\",\"查询调优\",\"禁用wildcard；（通配符模式，类似于%like%）\",\"禁用批量terms（成百上千的场景）；\",\"充分利用倒排索引机制，能keyword类型尽量keyword；\",\"数据量大时候，可以先基于时间敲定索引再检索；\",\"设置合理的路由机制。\"]},\"1230\":{\"h\":\"2. elasticsearch 的倒排索引是什么\",\"t\":[\"倒排索引也就是单词到文档的映射，当然不只是存里文档id这么简单。还包括：词频（TF，Term Frequency）、偏移量（offset）、位置（Posting）。\"]},\"1231\":{\"h\":\"3. elasticsearch 是如何实现 master 选举的\",\"t\":[\"ElasticSearch 的选主是 ZenDiscovery 模块负责，源码分析将首发在。 https://gitee.com/rodert/JavaPub\",\"对所有可以成为 Master 的节点（node.master: true）根据 nodeId 排序，每次选举每个节点都把自己所知道节点排一次序，然后选出第一个（第0位）节点，暂且认为它是 Master 节点。\",\"如果对某个节点的投票数达到一定的值（可以成为master节点数n/2+1）并且该节点自己也选举自己，那这个节点就是master。否则重新选举。 (当然也可以自己设定一个值，最小值设定为超过能成为Master节点的n/2+1，否则会出现脑裂问题。discovery.zen.minimum_master_nodes)\"]},\"1232\":{\"h\":\"5. 描述一下 Elasticsearch 索引文档的过程\",\"t\":[\"在这里插入图片描述\",\"客户端向 Node 1 发送新建、索引或者删除请求。\",\"节点使用文档的 _id 确定文档属于分片 0 。请求会被转发到 Node 3，因为分片 0 的主分片目前被分配在 Node 3 上。\",\"Node 3 在主分片上面执行请求。如果成功了，它将请求并行转发到 Node 1 和 Node 2 的副本分片上。一旦所有的副本分片都报告成功, Node 3 将向协调节点报告成功，协调节点向客户端报告成功。\",\"一图胜千文，记住这幅图，上面是文档在节点间分发的过程，接着说一下文档从接收到写入磁盘过程。 协调节点默认使用文档 ID 参与计算（也支持通过 routing），以便为路由提供合适的分片。\",\"shard = hash(document_id) % (num_of_primary_shards)\",\"当分片所在的节点接收到来自协调节点的请求后，会将请求写入到 MemoryBuffer，然后定时（默认是每隔 1 秒）写入到 Filesystem Cache，这个从 MomeryBuffer 到 Filesystem Cache 的过程就叫做 refresh；\",\"当然在某些情况下，存在 Momery Buffer 和 Filesystem Cache 的数据可能会丢失，ES 是通过 translog 的机制来保证数据的可靠性的。其实现机制是接收到请求后，同时也会写入到 translog 中，当 Filesystem cache 中的数据写入到磁盘中时，才会清除掉，这个过程叫做 flush；\",\"在 flush 过程中，内存中的缓冲将被清除，内容被写入一个新段，段的 fsync将创建一个新的提交点，并将内容刷新到磁盘，旧的 translog 将被删除并开始一个新的 translog。\",\"flush 触发的时机是定时触发（默认 30 分钟）或者 translog 变得太大（默认为 512M）时；\",\"1. translog 可以理解为就是一个文件，一直追加。 2. MemoryBuffer 应用缓存。 3. Filesystem Cache 系统缓冲区。\",\"延伸阅读：Lucene 的 Segement:\",\"Lucene 索引是由多个段组成，段本身是一个功能齐全的倒排索引。\",\"段是不可变的，允许 Lucene 将新的文档增量地添加到索引中，而不用从头重建索引。\",\"对于每一个搜索请求而言，索引中的所有段都会被搜索，并且每个段会消耗CPU 的时钟周、文件句柄和内存。这意味着段的数量越多，搜索性能会越低。\",\"为了解决这个问题，Elasticsearch 会合并小段到一个较大的段，提交新的合并段到磁盘，并删除那些旧的小段。\"]},\"1233\":{\"h\":\"4. 详细描述一下 Elasticsearch 搜索的过程？\",\"t\":[\"es作为一个分布式的存储和检索系统，每个文档根据 _id 字段做路由分发被转发到对应的shard上。\",\"搜索执行阶段过程分俩个部分，我们称之为 Query Then Fetch。\",\"4.1 query-查询阶段\",\"当一个search请求发出的时候，这个query会被广播到索引里面的每一个shard（主shard或副本shard），每个shard会在本地执行查询请求后会生成一个命中文档的优先级队列。\",\"这个队列是一个排序好的top N数据的列表，它的size等于from+size的和，也就是说如果你的from是10，size是10，那么这个队列的size就是20，所以这也是为什么深度分页不能用from+size这种方式，因为from越大，性能就越低。\",\"es里面分布式search的查询流程如下：\",\"es里面分布式search的查询流程\",\"查询阶段包含以下三个步骤:\",\"客户端发送一个 search 请求到 Node 3 ， Node 3 会创建一个大小为 from + size 的空优先队列。\",\"Node 3 将查询请求转发到索引的每个主分片或副本分片中。每个分片在本地执行查询并添加结果到大小为 from + size 的本地有序优先队列中。\",\"每个分片返回各自优先队列中所有文档的 ID 和排序值给协调节点，也就是 Node 3 ，它合并这些值到自己的优先队列中来产生一个全局排序后的结果列表。\",\"4.2 fetch - 读取阶段 / 取回阶段\",\"在这里插入图片描述\",\"分布式阶段由以下步骤构成：\",\"协调节点辨别出哪些文档需要被取回并向相关的分片提交多个 GET 请求。\",\"每个分片加载并 丰富 文档，如果有需要的话，接着返回文档给协调节点。\",\"一旦所有的文档都被取回了，协调节点返回结果给客户端。\",\"协调节点首先决定哪些文档 确实 需要被取回。例如，如果我们的查询指定了 { \\\"from\\\": 90, \\\"size\\\": 10 } ，最初的90个结果会被丢弃，只有从第91个开始的10个结果需要被取回。这些文档可能来自和最初搜索请求有关的一个、多个甚至全部分片。\",\"协调节点给持有相关文档的每个分片创建一个 multi-get request ，并发送请求给同样处理查询阶段的分片副本。\",\"分片加载文档体-- _source 字段—​如果有需要，用元数据和 search snippet highlighting 丰富结果文档。 一旦协调节点接收到所有的结果文档，它就组装这些结果为单个响应返回给客户端。\",\"拓展阅读： 深翻页（Deep Pagination） --- 先查后取的过程支持用 from 和 size 参数分页，但是这是 有限制的 。 要记住需要传递信息给协调节点的每个分片必须先创建一个 from + size 长度的队列，协调节点需要根据 number_of_shards * (from + size) 排序文档，来找到被包含在 size 里的文档。 取决于你的文档的大小，分片的数量和你使用的硬件，给 10,000 到 50,000 的结果文档深分页（ 1,000 到 5,000 页）是完全可行的。但是使用足够大的 from 值，排序过程可能会变得非常沉重，使用大量的CPU、内存和带宽。因为这个原因，我们强烈建议你不要使用深分页。 实际上， “深分页” 很少符合人的行为。当2到3页过去以后，人会停止翻页，并且改变搜索标准。会不知疲倦地一页一页的获取网页直到你的服务崩溃的罪魁祸首一般是机器人或者web spider。 如果你 确实 需要从你的集群取回大量的文档，你可以通过用 scroll 查询禁用排序使这个取回行为更有效率，我们会在 later in this chapter 进行讨论。 注：https://www.elastic.co/guide/cn/elasticsearch/guide/current/scroll.html\"]},\"1234\":{\"h\":\"5. Elasticsearch 在部署时，对 Linux 的设置有哪些优化方法\",\"t\":[\"关闭缓存swap;\",\"原因：大多数操作系统会将内存使用到文件系统缓存，会将应用程序未用到的内存交换出去。会导致jvm的堆内存交换到磁盘上。交换会导致性能问题。会导致内存垃圾回收延长。会导致集群节点响应时间变慢，或者从集群中断开。\",\"堆内存设置为：Min（节点内存/2, 32GB）;\",\"设置最大文件句柄数；\",\"后俩点不懂可以先说有一定了解，关注JavaPub会做详细讲解。\",\"调整线程池和队列大小\",\"磁盘存储 raid 方式——存储有条件使用 RAID6，增加单节点性能以及避免单节点存储故障。\",\"https://www.elastic.co/cn/blog/how-to-design-your-elasticsearch-data-storage-architecture-for-scale#raid56\"]},\"1235\":{\"h\":\"6. Elasticsearch 中的节点（比如共 20 个），其中的 10 个选了一个 master，另外 10 个选了另一个 master，怎么办？\",\"t\":[\"当集群 master 候选数量不小于 3 个时，可以通过设置最少投票通过数量（discovery.zen.minimum_master_nodes）超过所有候选节点一半以上来解决脑裂问题；\",\"当候选数量为两个时，只能修改为唯一的一个 master 候选，其他作为 data节点，避免脑裂问题。\"]},\"1236\":{\"h\":\"7. 客户端在和集群连接时，如何选择特定的节点执行请求的？\",\"t\":[\"client 远程连接连接一个 elasticsearch 集群。它并不加入到集群中，只是获得一个或者多个初始化的地址，并以轮询的方式与这些地址进行通信。\"]},\"1237\":{\"h\":\"8. 详细描述一下 Elasticsearch 更新和删除文档的过程。\",\"t\":[\"删除和更新也都是写操作，但是 Elasticsearch 中的文档是不可变的，因此不能被删除或者改动以展示其变更；(根本原因是底层lucene的segment段文件不可更新删除)\",\"磁盘上的每个段都有一个相应的 .del 文件。当删除请求发送后，文档并没有真 的被删除，而是在 .del 文件中被标记为删除。该文档依然能匹配查询，但是会在 结果中被过滤掉。当段合并时，在.del 文件中被标记为删除的文档将不会被写入 新段。\",\"在新的文档被创建时，Elasticsearch 会为该文档指定一个版本号，当执行更新 时，旧版本的文档在.del 文件中被标记为删除，新版本的文档被索引到一个新段。\",\"旧版本的文档依然能匹配查询，但是会在结果中被过滤掉。\"]},\"1238\":{\"h\":\"9. Elasticsearch 对于大数据量（上亿量级）的聚合如何实现？\",\"t\":[\"这道题目较难，相信大家看到很多类似这种回答\",\"Elasticsearch 提供的首个近似聚合是cardinality 度量。它提供一个字段的基数，即该字段的distinct或者unique值的数目。它是基于HLL算法的。HLL 会先对我们的输入作哈希运算，然后根据哈希运算的结果中的 bits 做概率估算从而得到基数。其特点是：可配置的精度，用来控制内存的使用（更精确 ＝ 更多内存）；小的数据集精度是非常高的；我们可以通过配置参数，来设置去重需要的固定内存使用量。无论数千还是数十亿的唯一值，内存使用量只与你配置的精确度相关。\",\"科普&拓展：\",\"HyperLogLog： 下面简称为HLL，它是 LogLog 算法的升级版，作用是能够提供不精确的去重计数。存在以下的特点： 1. 能够使用极少的内存来统计巨量的数据，在 Redis 中实现的 HyperLogLog，只需要12K内存就能统计2^64个数据。 2. 计数存在一定的误差，误差率整体较低。标准误差为 0.81% 。 3. 误差可以被设置辅助计算因子进行降低。 --- 应用场景： 1. 基数不大，数据量不大就用不上，会有点大材小用浪费空间 2. 有局限性，就是只能统计基数数量，而没办法去知道具体的内容是什么 3. 和bitmap相比，属于两种特定统计情况，简单来说，HyperLogLog 去重比 bitmap 方便很多 4. 一般可以bitmap和hyperloglog配合使用，bitmap标识哪些用户活跃，hyperloglog计数 --- 应用场景： 1. 基数不大，数据量不大就用不上，会有点大材小用浪费空间 2. 有局限性，就是只能统计基数数量，而没办法去知道具体的内容是什么 3. 和bitmap相比，属于两种特定统计情况，简单来说，HyperLogLog 去重比 bitmap 方便很多 4. 一般可以bitmap和hyperloglog配合使用，bitmap标识哪些用户活跃，hyperloglog计数 来源：刷刷面试\"]},\"1239\":{\"h\":\"10. 在并发情况下，Elasticsearch 如果保证读写一致？\",\"t\":[\"首先要了解什么是一致性，在分布式系统中，我们一般通过CPA理论分析。\",\"分布式系统不可能同时满足一致性（C：Consistency）、可用性（A：Availability）和分区容忍性（P：Partition Tolerance），最多只能同时满足其中两项。 \",\"可以通过版本号使用乐观并发控制，以确保新版本不会被旧版本覆盖，由应用层来处理具体的冲突；\",\"另外对于写操作，一致性级别支持 quorum/one/all，默认为 quorum，即只有当大多数分片可用时才允许写操作。但即使大多数可用，也可能存在因为网络等原因导致写入副本失败，这样该副本被认为故障，分片将会在一个不同的节点上重建。\",\"对于读操作，可以设置 replication 为 sync(默认)，这使得操作在主分片和副本分片都完成后才会返回；如果设置 replication 为 async 时，也可以通过设置搜索请求参数_preference 为 primary 来查询主分片，确保文档是最新版本。\"]},\"1240\":{\"h\":\"11. 介绍一下你们的个性化搜索方案？\",\"t\":[\"如果你没有很多实战经验，可以基于 word2vec 做一些练习，我的博客提供了 word2vec Java版的一些Demo。\",\"基于 word2vec 和 Elasticsearch 实现个性化搜索，它有以下优点：\",\"基于word2vec的商品向量还有一个可用之处，就是可以用来实现相似商品的推荐；\"]},\"1241\":{\"h\":\"Java基础\"},\"1242\":{\"h\":\"1. instanceof 关键字的作用\",\"t\":[\"instanceof 是 Java 的保留关键字。它的作用是测试它左边的对象是否是它右边的类的实例，返回 boolean 的数据类型。\",\"boolean result = obj instanceof class\",\"当 obj 为 Class 的对象，或者是其直接或间接子类，或者是其接口的实现类，结果result 都返回 true，否则返回false。\",\"注意一点：编译器会检查 obj 是否能转换成右边的class类型，如果不能转换则直接报错，如果不能确定类型，则通过编译，具体看运行时定。\",\"obj 必须为引用类型，只能作为对象的判断，不能是基本类型。\",\"int i = 0; System.out.println(i instanceof Integer);//编译不通过 System.out.println(i instanceof Object);//编译不通过\",\"源码参考：JavaSE 8 instanceof 的实现算法：https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5.instanceof\"]},\"1243\":{\"h\":\"2. Java自动装箱和拆箱\",\"t\":[\"什么是装箱拆箱，这里不做源码层面解读，源码解读在JavaPub公众号发出。这里通过讲解 int 和 Interger 区别，解答Java自动装箱和拆箱。\",\"自动装箱 ----- 基本类型的值 → 包装类的实例\",\"自动拆箱 ----- 基本类型的值 ← 包装类的实例\",\"Integer变量必须实例化后才能使用，而int变量不需要\",\"Integer实际是对象的引用，当new一个Integer时，实际上是生成一个指针指向此对象；而int则是直接存储数据值 。\",\"Integer的默认值是null，int的默认值是0\",\"Java中8种基本数据类型。左边基本类型，右边包装类型。 \",\"在面试中：\",\"下面这段代码的输出结果是什么？\",\"public class Main { public static void main(String[] args) { Integer i1 = 100; Integer i2 = 100; Integer i3 = 200; Integer i4 = 200; System.out.println(i1==i2); System.out.println(i3==i4); } } //true //false\",\"输出结果表明i1和i2指向的是同一个对象，而i3和i4指向的是不同的对象。此时只需一看源码便知究竟，下面这段代码是Integer的valueOf方法的具体实现：\",\"public static Integer valueOf(int i) { if(i >= -128 && i <= IntegerCache.high) return IntegerCache.cache[i + 128]; else return new Integer(i); }\",\"private static class IntegerCache { static final int high; static final Integer cache[]; static { final int low = -128; // high value may be configured by property int h = 127; if (integerCacheHighPropValue != null) { // Use Long.decode here to avoid invoking methods that // require Integer's autoboxing cache to be initialized int i = Long.decode(integerCacheHighPropValue).intValue(); i = Math.max(i, 127); // Maximum array size is Integer.MAX_VALUE h = Math.min(i, Integer.MAX_VALUE - -low); } high = h; cache = new Integer[(high - low) + 1]; int j = low; for(int k = 0; k < cache.length; k++) cache[k] = new Integer(j++); } private IntegerCache() {} }\",\"从这2段代码可以看出，在通过valueOf方法创建Integer对象的时候，如果数值在[-128,127]之间，便返回指向IntegerCache.cache中已经存在的对象的引用；否则创建一个新的Integer对象。\",\"上面的代码中i1和i2的数值为100，因此会直接从cache中取已经存在的对象，所以i1和i2指向的是同一个对象，而i3和i4则是分别指向不同的对象。\",\"注意，Integer、Short、Byte、Character、Long这几个类的valueOf方法的实现是类似的。 Double、Float的valueOf方法的实现是类似的（没有缓存数值，这里的数值想想都有很多，不适合缓存）。\"]},\"1244\":{\"h\":\"3. 重载和重写区别\",\"t\":[\"重载和重写是一个特别好理解的概念，这里说一个通俗的解答方式\",\"重载（Overload）:首先是位于一个类之中或者其子类中，具有相同的方法名，但是方法的参数不同，返回值类型可以相同也可以不同。\",\"方法名必须相同\",\"方法的参数列表一定不一样。\",\"访问修饰符和返回值类型可以相同也可以不同。\",\"其实简单而言：重载就是对于不同的情况写不同的方法。 比如，同一个类中，写不同的构造函数用于初始化不同的参数。\",\"public class JavaPubTest { public void out(){ System.out.println(\\\"参数\\\"+null); } //参数数目不同 public void out(Integer n){ System.out.println(\\\"参数\\\"+n.getClass().getName()); } //参数类型不同 public void out(String string){ System.out.println(\\\"参数\\\"+string.getClass().getName()); } public void out(Integer n ,String string){ System.out.println(\\\"参数\\\"+n.getClass().getName()+\\\",\\\"+string.getClass().getName()); } //参数顺序不同 public void out(String string,Integer n){ System.out.println(\\\"参数\\\"+string.getClass().getName()+\\\",\\\"+n.getClass().getName()); } public static void main(String[] args) { JavaPubTest javaPubTest = new JavaPubTest(); javaPubTest.out(); javaPubTest.out(1); javaPubTest.out(\\\"string\\\"); javaPubTest.out(1,\\\"string\\\"); javaPubTest.out(\\\"string\\\",1); } }\",\"**重写（Overriding）**发生在父类子类之间，比如所有类都是继承与Object类的，Object类中本身就有equals、hashcode、toString方法等。在任意子类中定义了重名和同样的参数列表就构成方法重写。\",\"方法名必须相同，返回值类型必须相同。\",\"参数列表必须相同。\",\"访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为public，那么在子类中重写该方法就不能声明为protected。\",\"子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为private和final的方法。\",\"构造方法不能被重写。\"]},\"1245\":{\"h\":\"4. equals与==区别\",\"t\":[\"\\\"==\\\"是判断两个变量或实例是不是指向同一个内存空间。\\\"equals\\\"是判断两个变量或实例所指向的内存空间的值是不是相同。\",\"除了这俩点，这个问题大概率会引出以下问题：\",\"为什么重写equals还要重写hashcode?\",\"通过上面俩条我们知道 \\\"equals\\\"是判断两个变量或实例所指向的内存空间的值是不是相同。 但是一些特殊场景，我们需要对比俩个对象是否相等，例如：User user1 = new User();User user2 = new User(); user1 和 user2 对比。这是我们就需要重写 equals 方法。\",\"所以可以通过重写equals()方法来判断对象的值是否相等，但是有一个要求：equals()方法实现了等价关系，即：\",\"自反性：对于任何非空引用x，x.equals(x)应该返回true；\",\"对称性：对于任何引用x和y，如果x.equals(y)返回true，那么y.equals(x)也应该返回true；\",\"传递性：对于任何引用x、y和z，如果x.equals(y)返回true，y.equals(z)返回true，那么x.equals(z)也应该返回true；\",\"一致性：如果x和y引用的对象没有发生变化，那么反复调用x.equals(y)应该返回同样的结果；\",\"非空性：对于任意非空引用x，x.equals(null)应该返回false；\",\"到这里也是一个很正常的操作，但是当我们要用到 HashSet 等集合时。存储的对象我们需要用 hashcode 判断对象是否存在，如果使用 Object 默认的hashcode方法，那我们同样属性的俩个用户一定是不相等的(例如下面user3、user4)，因为内存地址不同，这并不符合我们的业务，所以决定了重写 hashcode 的必要性。\",\"User user3 = new User(\\\"JavaPub\\\", \\\"man\\\", \\\"1996-08-28\\\") User user4 = new User(\\\"JavaPub\\\", \\\"man\\\", \\\"1996-08-28\\\")\"]},\"1246\":{\"h\":\"5. 谈谈NIO和BIO区别\",\"t\":[\"致力于大白话说清楚。NIO和BIO是一个相对有点抽象的概念，如果你对网络有点了解，理解起来可能会更顺畅。首先说一下基本\",\"BIO：同步阻塞IO，每一个客户端连接，服务端都会对应一个处理线程，对于没有分配到处理线程的连接就会被阻塞或者拒绝。相当于是一个连接一个线程。\",\"NIO：同步非阻塞IO，基于Reactor模型，客户端和channel进行通信，channel可以进行读写操作，通过多路复用器selector来轮询注册在其上的channel，而后再进行IO操作。这样的话，在进行IO操作的时候再用一个线程去处理就可以了，也就是一个请求一个线程。\",\"Reactor模型是什么?\",\"基于池化思想，避免为每个连接创建线程，连接完成后将业务处理交给线程池处理\",\"基于IO复用模型，多个连接共用同一个阻塞对象，不用等待所有的连接。遍历到有新数据可以处理时，操作系统会通知程序，线程跳出阻塞状态，进行业务逻辑处理 .\",\"简单来说：Reactor线程模型的思想就是基于IO复用和线程池的结合。\",\"AIO：（一般都会把AIO和NIO、BIO放一块比较，这里简单提一下。）异步非阻塞IO，相比NIO更进一步，完全由操作系统来完成请求的处理，然后通知服务端开启线程去进行处理，因此是一个有效请求一个线程。\",\"那么怎么理解同步和阻塞？\",\"首先，可以认为一个IO操作包含两个部分：\",\"发起IO请求\",\"实际的IO读写操作\",\"同步和异步在于第二个，实际的IO读写操作，如果操作系统帮你完成了再通知你，那就是异步，否则都叫做同步。\",\"阻塞和非阻塞在于第一个，发起IO请求，对于NIO来说通过channel发起IO操作请求后，其实就返回了，所以是非阻塞。\",\"NIO和BIO是非常重要的计算机知识，学习后会对整个计算机的理解更近一步，一次学会终身受益。JavaPub会单独写一篇深入图解NIO和BIO。\",\"网上看到一个例子（一定要看，会对你有所帮助）：\",\"一辆从 A 开往 B 的公共汽车上，路上有很多点可能会有人下车。司机不知道哪些点会有哪些人会下车，对于需要下车的人，如何处理更好？ 1. 司机过程中定时询问每个乘客是否到达目的地，若有人说到了，那么司机停车，乘客下车。 ( 类似阻塞式 ) 2. 每个人告诉售票员自己的目的地，然后睡觉，司机只和售票员交互，到了某个点由售票员通知乘客下车。 ( 类似非阻塞 ) 很显然，每个人要到达某个目的地可以认为是一个线程，司机可以认为是 CPU 。在阻塞式里面，每个线程需要不断的轮询，上下文切换，以达到找到目的地的结果。而在非阻塞方式里，每个乘客 ( 线程 ) 都在睡觉 ( 休眠 ) ，只在真正外部环境准备好了才唤醒，这样的唤醒肯定不会阻塞。\",\"建议阅读： https://www.cnblogs.com/aspirant/p/6877350.html https://www.cnblogs.com/shoshana-kong/p/11228555.html\"]},\"1247\":{\"h\":\"6. String、StringBuffer、StringBuilder 的区别是什么？\",\"t\":[\"String是Immutable类的典型实现，被声明为 final class，除了hash这个属性其它属性都声明为final。它的不可变性，所以例如拼接字符串时候会产生很多无用的中间对象，如果频繁的进行这样的操作对性能有所影响。\",\"StringBuffer、StringBuilder就是解决String的这个性能问题。\",\"StringBuffer 是线程安全的，本质是一个线程安全的可修改的字符序列，把所有修改数据的方法都加上synchronized。\",\"StringBuffer 线程不安全，但是性能更好。\"]},\"1248\":{\"h\":\"7. 泛型是什么，有什么特点\",\"t\":[\"泛型在编码中有非常广泛的使用（jdk5引入），你一定经常能见到类似这种写法 <T> 。\",\"泛型提供了编译时类型安全检测机制，允许在编译时检测到非法的类型。本质是参数化类型。\",\"把类型当作是参数一样传递\",\"<数据类型>只能是引用类型\",\"泛型：就是一种不确定的数据类型。\",\"泛型的好处：\",\"省略了强转的代码。\",\"可以把运行时的问题提前到编译时期。\",\"引入泛型主要想实现一个通用的、可以处理不同类型的方法\",\"泛型擦除:\",\"泛型时提供给javac编译器使用的，用于限定集合的输入类型，让编译器在源代码级别上，避免向集合中插入非法数据。但编译器编译完带有泛型的java程序后，生成的class文件中不再带有泛型信息，以此使程序运行效率不受影响，这个过程称为擦除。\",\"JVM并不知道泛型的存在，因为泛型在编译阶段就已经被处理成普通的类和方法； 处理机制是通过类型擦除，擦除规则：\",\"若泛型类型没有指定具体类型，用Object作为原始类型；\",\"若有限定类型< T exnteds XClass >，使用XClass作为原始类型；\",\"若有多个限定< T exnteds XClass1 & XClass2 >，使用第一个边界类型XClass1作为原始类型；\"]},\"1249\":{\"h\":\"8. final 有哪些用法\",\"t\":[\"final关键字有四个常见用法。\",\"final修饰一个类\",\"当 final 关键字用来修饰一个类的时候，表明这个类不能有任何的子类，也就是说这个类不能被继承。\",\"final类中的所有成员方法都会被隐式地指定为final方法，也就是说一个类如果是final的，那么其中所有的成员方法都无法进行覆盖重写。\",\" public final class 类名称 { // ... }\",\"final修饰一个方法\",\"当 final 关键字用来修饰一个方法的时候，这个方法就是最终方法，也就是不能被覆盖重写。\",\" 修饰符 final 返回值类型 方法名称(参数列表) { // 方法体 }\",\"注意：对于类、方法来说，abstract 关键字和 final 关键字不能同时使用，因为矛盾。\",\"final修饰一个局部变量\",\"一旦使用 final 用来修饰局部变量，那么这个变量就不能进行更改「一次赋值，终生不变」。\",\"对于基本类型来说，不可变说的是变量当中的数据不可改变；\",\"对于引用类型来说，不可变说的是变量当中的地址值不可改变。\",\"final修饰一个成员变量\",\"对于成员变量来说，如果使用 final 关键字修饰，那么这个变量也照样是不可变。\",\"由于成员变量具有默认值，所以用了 final 之后必须手动赋值，不会再给默认值了；\",\"对于 final 的成员变量，要么使用直接赋值，要么通过构造方法赋值，必须二者选其一；\",\"必须保证类当中所有重载的构造方法都最终会对 final 的成员变量进行赋值。\"]},\"1250\":{\"h\":\"9. 说一下Java注解\",\"t\":[\"在Java编程中，注解非常常见，注解的本质是什么？\",\"注解大致分为以下三种：\",\"Java原生注解 如@Override，@Deprecated 等。大多用于 [标记] 和 [检查] 。\",\"第三方注解，如 Spring、Mybatis等定义的注解（@Controller，@Data）。\",\"自定义注解。\",\"Java原生除了提供基本注解，还提供了 meta-annotation（元注解）。这些类型和它们所支持的类在java.lang.annotation包中可以找到。\",\"@Target\",\"@Retention\",\"@Documented\",\"@Inherited\",\"在这里插入图片描述\",\"一般比较常用的有 @Target，@Retention。@Target表示这个注解可以修饰那些地方（比如类、方法、成员变量），@Retention 主要是设置注解的生命周期。\",\"这是你一定会被问，\",\"有使用过注解吗？\",\"你是怎么使用的？\",\"注解有一个非常常见的使用场景，大家可以用这个来理解学习。\",\"场景一：自定义注解+拦截器 实现登录校验\",\"实现功能：\",\"接下来，我们使用springboot拦截器实现这样一个功能，如果方法上加了@LoginRequired，则提示用户该接口需要登录才能访问，否则不需要登录。\",\"首先定义一个LoginRequired注解\",\"@Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface LoginRequired { }\",\"然后写两个简单的接口，访问sourceA，sourceB资源\",\"@RestController public class IndexController { @GetMapping(\\\"/sourceA\\\") public String sourceA(){ return \\\"你正在访问sourceA资源\\\"; } @GetMapping(\\\"/sourceB\\\") public String sourceB(){ return \\\"你正在访问sourceB资源\\\"; } }\",\"很简单的俩个接口，没添加拦截器之前成功访问\",\"在这里插入图片描述\",\"实现 spring 的 HandlerInterceptor 类先实现拦截器，但不拦截，只是简单打印日志，如下：\",\"public class SourceAccessInterceptor implements HandlerInterceptor { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { System.out.println(\\\"进入拦截器了\\\"); return true; } @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception { } @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception { } }\",\"实现spring类 WebMvcConfigurer，创建配置类把拦截器添加到拦截器链中\",\"@Configuration public class InterceptorTrainConfigurer implements WebMvcConfigurer { @Override public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(new SourceAccessInterceptor()).addPathPatterns(\\\"/**\\\"); } }\",\"拦截成功如下\",\" 在 sourceB 方法上添加我们的登录注解 @LoginRequired\",\"@RestController public class IndexController { @GetMapping(\\\"/sourceA\\\") public String sourceA(){ return \\\"你正在访问sourceA资源\\\"; } @LoginRequired @GetMapping(\\\"/sourceB\\\") public String sourceB(){ return \\\"你正在访问sourceB资源\\\"; } }\",\"简单实现登录拦截逻辑\",\" @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { System.out.println(\\\"进入拦截器了\\\"); // 反射获取方法上的LoginRequred注解 HandlerMethod handlerMethod = (HandlerMethod)handler; LoginRequired loginRequired = handlerMethod.getMethod().getAnnotation(LoginRequired.class); if(loginRequired == null){ return true; } // 有LoginRequired注解说明需要登录，提示用户登录 response.setContentType(\\\"application/json; charset=utf-8\\\"); response.getWriter().print(\\\"你访问的资源需要登录\\\"); return false; }\",\"运行成功，访问sourceB时需要登录了，访问sourceA则不用登录。 \",\"场景二：自定义注解+AOP 实现日志打印\",\"先导入切面需要的依赖包\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-aop</artifactId> </dependency>\",\"定义一个注解@MyLog\",\"@Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface MyLog { }\",\"定义一个切面类，见如下代码注释理解：\",\"@Aspect // 1.表明这是一个切面类 @Component public class MyLogAspect { // 2. PointCut表示这是一个切点，@annotation表示这个切点切到一个注解上，后面带该注解的全类名 // 切面最主要的就是切点，所有的故事都围绕切点发生 // logPointCut()代表切点名称 @Pointcut(\\\"@annotation(com.javapub.blog.MyLog)\\\") public void logPointCut(){}; // 3. 环绕通知 @Around(\\\"logPointCut()\\\") public void logAround(ProceedingJoinPoint joinPoint){ // 获取方法名称 String methodName = joinPoint.getSignature().getName(); // 获取入参 Object[] param = joinPoint.getArgs(); StringBuilder sb = new StringBuilder(); for(Object o : param){ sb.append(o + \\\"; \\\"); } System.out.println(\\\"进入[\\\" + methodName + \\\"]方法,参数为:\\\" + sb.toString()); // 继续执行方法 try { joinPoint.proceed(); } catch (Throwable throwable) { throwable.printStackTrace(); } System.out.println(methodName + \\\"方法执行结束\\\"); } }\",\"在步骤二中的IndexController写一个sourceC进行测试，加上我们的自定义注解：\",\" @MyLog @GetMapping(\\\"/sourceC/{source_name}\\\") public String sourceC(@PathVariable(\\\"source_name\\\") String sourceName){ return \\\"你正在访问sourceC资源\\\"; }\",\"启动springboot web项目，输入访问地址\",\"有些面试官喜欢问，注解三要素是哪些：\",\"注解声明、\",\"使用注解的元素、\",\"操作注解使其起作用(注解处理器)\"]},\"1251\":{\"h\":\"10. Java创建对象有几种方式\",\"t\":[\"Java中有5种创建对象的方式，下面给出它们的例子\",\"使用new关键字\",\"User user = new User();\",\"使用Class类的newInstance方法\",\"我们也可以使用Class类的newInstance方法创建对象。这个newInstance方法调用无参的构造函数创建对象。\",\"Employee emp = (Employee) Class.forName(\\\"org.javapub.blog.Employee\\\").newInstance(); 或者 Employee emp2 = Employee.class.newInstance();\",\"使用Constructor类的newInstance方法\",\"和Class类的newInstance方法很像， java.lang.reflect.Constructor类里也有一个newInstance方法可以创建对象。我们可以通过这个newInstance方法调用有参数的和私有的构造函数。\",\"Constructor<Employee> constructor = Employee.class.getConstructor(); Employee emp3 = constructor.newInstance();\",\"使用clone方法\",\"无论何时我们调用一个对象的clone方法，jvm就会创建一个新的对象，将前面对象的内容全部拷贝进去。用clone方法创建对象并不会调用任何构造函数。\",\"要使用clone方法，我们需要先实现Cloneable接口并实现其定义的clone方法。\",\"Employee emp4 = (Employee) emp3.clone();\",\"使用反序列化\",\"当我们序列化和反序列化一个对象，jvm会给我们创建一个单独的对象。在反序列化时，jvm创建对象并不会调用任何构造函数。\",\"为了反序列化一个对象，我们需要让我们的类实现Serializable接口\",\"ObjectInputStream in = new ObjectInputStream(new FileInputStream(\\\"data.obj\\\")); Employee emp5 = (Employee) in.readObject();\"]},\"1252\":{\"h\":\"Java并发\"},\"1253\":{\"h\":\"1. start()方法和run()方法的区别\",\"t\":[\"如果只是调用 run() 方法，那么代码还是同步执行的，必须等待一个线程的run()方法里面的代码全部执行完毕之后，另外一个线程才可以执行其run()方法里面的代码。\",\"只有调用了start()方法，才会表现出多线程的特性，不同线程的run()方法里面的代码交替执行。\",\"参考图：\",\"在这里插入图片描述\"]},\"1254\":{\"h\":\"2. volatile关键字的作用\",\"t\":[\"volatile 英 [ˈvɒlətaɪl] ，第一个想到的一定是保证内存可见性（Memory Visibility）。可见性是性对于线程而言。\",\" 上图是Java内存模型，所有线程的共享变量都放在主内存中，每一个线程都有一个独有的工作内存，每个线程不直接操作在主内存中的变量，而是将主内存上变量的副本放进自己的工作内存中，只操作工作内存中的数据。当修改完毕后，再把修改后的结果放回到主内存中。每个线程都只操作自己工作内存中的变量，无法直接访问对方工作内存中的变量，线程间变量值的传递需要通过主内存来完成。\",\"很明显，在并发环境下一定会发生脏数据问题。\",\"使用volatile变量能够保证:\",\"每次读取前必须先从主内存刷新最新的值。\",\"每次写入后必须立即同步回主内存当中。\",\"也就是说，volatile关键字修饰的变量看到的随时是自己的最新值。\",\"防止指令重排\",\"在基于偏序关系的Happens-Before内存模型中，指令重排技术大大提高了程序执行效率。但是也引入一个新问题：被部分初始化的对象\",\"例子：\",\"创建一个对象 instance = new Singleton();\",\"它并不是一个原子操作。事实上，它可以”抽象“为下面几条JVM指令：\",\"memory = allocate(); //1：分配对象的内存空间 initInstance(memory); //2：初始化对象 instance = memory; //3：设置instance指向刚分配的内存地址\",\"上面操作2依赖于操作1，但是操作3并不依赖于操作2，所以JVM可以以“优化”为目的对它们进行重排序，经过重排序后如下：\",\"memory = allocate(); //1：分配对象的内存空间 instance = memory; //3：设置instance指向刚分配的内存地址（此时对象还未初始化） initInstance(memory); //2：初始化对象\",\"可以看到指令重排之后，操作 3 排在了操作 2 之前，即引用instance指向内存memory时，这段崭新的内存还没有初始化。由于instance已经指向了一块内存空间，从而返回 instance!=null，用户得到了没有完成初始化的“半个”单例。\",\"但是有一点：volatile不保证原子性。\",\"这里有一篇生产环境使用volatile的例子：https://mp.weixin.qq.com/s/s1cwut9WvUSrMYw_6UK3sg\"]},\"1255\":{\"h\":\"3. sleep方法和wait方法有什么区别\",\"t\":[\"要了解sleep和wait，首先需要了解Java线程的6种状态。\",\"#下面是Java线程的6种状态 1. 初始(NEW)：新创建了一个线程对象，但还没有调用start()方法。 2. 运行(RUNNABLE)：Java线程中将就绪（ready）和运行中（running）两种状态笼统的称为“运行”。 线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取CPU的使用权，此时处于就绪状态（ready）。就绪状态的线程在获得CPU时间片后变为运行中状态（running）。 3. 阻塞(BLOCKED)：表示线程阻塞于锁。 4. 等待(WAITING)：进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断）。 5. 超时等待(TIMED_WAITING)：该状态不同于WAITING，它可以在指定的时间后自行返回。 6. 终止(TERMINATED)：表示该线程已经执行完毕。\",\"sleep 休眠方法\",\"static void sleep(long ms)\",\"该方法会使当前线程进入阻塞状态指定毫秒，当阻塞指定毫秒后，当前线程会重新进入Runnable状态，等待划分时间片。\",\"sleep方法属于Thread类中方法，表示让一个线程进入睡眠状态，等待一定的时间之后，自动醒来进入到可运行状态，不会马上进入运行状态，因为线程调度机制恢复线程的运行也需要时间，一个线程对象调用了sleep方法之后，并不会释放他所持有的所有对象锁，所以也就不会影响其他进程对象的运行。\",\"wait 方法一般是跟notify方法连用的\",\"多线程之间需要协调工作。如果条件不满足则等待。当条件满足时，等待该条件的线程将被唤醒。在Java中，这个机制实现依赖于wait/notify或wait/notifyAll。\",\"object.wait()让当前线程进入不可运行状态，如sleep()一样，但不同的是wait方法从一个对象调用，而不是从一个线程调用；我们称这个对象为“锁定对象（lockObj）”。在lockObj.wait()被调用之前，当前线程必须在lockObj上同步（synchronize）；然后调用wait()后释放这个锁，并将线程增加到与lockObj相关的“等待名单（wait list）”。然后，另一个在同一个lockObj锁定（synchronize）的方法可以调用lockObj.nofity()。这会唤醒原来等待的线程。基本上，wait() / notify()就像sleep() / interrupt()，只是活动线程不需要直接指向一个睡眠线程，他们只需要共享锁对象（lockObj）。\",\"到这里你是否明白这个问题，如果不明白来JavaPub，后续一篇代码分析，马上安排。\"]},\"1256\":{\"h\":\"4. 如何停止一个正在运行的线程？\",\"t\":[\"最直观的一定是 Thread.stop，但是它是不推荐的，并且已经废弃。看一下官方说明 https://docs.oracle.com/javase/8/docs/technotes/guides/concurrency/threadPrimitiveDeprecation.html\",\"* This method is inherently unsafe. Stopping a thread with * Thread. stop causes it to unlock all of the monitors that it * has locked (as a natural consequence of the unchecked * <code>ThreadDeath</code> exception propagating up the stack). If * any of the objects previously protected by these monitors were in * an inconsistent state, the damaged objects become visible to * other threads, potentially resulting in arbitrary behavior. Many * uses of <code>stop</code> should be replaced by code that simply * modifies some variable to indicate that the target thread should * stop running. The target thread should check this variable * regularly, and return from its run method in an orderly fashion * if the variable indicates that it is to stop running. If the * target thread waits for long periods (on a condition variable, * for example), the <code>interrupt</code> method should be used to * interrupt the wait.\",\"小结： 简单来说，Thread.stop()不安全，已不再建议使用。\",\"方法一：\",\"使用 interrupt 方法中断线程。\",\"interrupt()方法的使用效果并不像for+break语句那样，马上就停止循环。调用interrupt方法是在当前线程中打了一个停止标志，并不是真的停止线程。\",\"需要 this.isInterrupted(): 测试线程是否真的已经中断。\",\"方法二：\",\"最好的一种方法，使用标志位停止。\",\"run() 方法中做标识符，保证优雅的停止服务。\"]},\"1257\":{\"h\":\"5. java如何实现多线程之间的通讯和协作？(如何在两个线程间共享数据？)\",\"t\":[\"volatile关键字方式\",\"volatile有两大特性，一是可见性，二是有序性，禁止指令重排序，其中可见性就是可以让线程之间进行通信。\",\"等待/通知机制\",\"等待通知机制是基于wait和notify方法来实现的，在一个线程内调用该线程锁对象的wait方法，线程将进入等待队列进行等待直到被通知或者被唤醒。\",\"也就是通过等待/通知机制 让多个线程协作\",\"join方式\",\"join其实合理理解成是线程合并，当在一个线程调用另一个线程的join方法时，当前线程阻塞等待被调用join方法的线程执行完毕才能继续执行，所以join的好处能够保证线程的执行顺序，但是如果调用线程的join方法其实已经失去了并行的意义，虽然存在多个线程，但是本质上还是串行的，最后join的实现其实是基于等待通知机制的。\",\"threadLocal方式\",\"threadLocal方式的线程通信，不像以上三种方式是多个线程之间的通信，它更像是一个线程内部的通信，将当前线程和一个map绑定，在当前线程内可以任意存取数据，减省了方法调用间参数的传递。\"]},\"1258\":{\"h\":\"6. 什么是ThreadLocal?\",\"t\":[\"定义：线程局部变量是局限于线程内的变量，属于线程自身所有，不在多个线程间共享。java提供 ThreadLocal类 来支持线程局部变量，是一个实现线程安全的方式。\",\"作用：ThreadLocal 是一种以空间换时间的做法，在每一个 Thread 里面维护了一个 ThreadLocal.ThreadLocalMap 把数据进行隔离，数据不共享，自然就没有线程安全方面的问题了。\"]},\"1259\":{\"h\":\"7. Java 中 CountDownLatch 和 CyclicBarrier 有什么不同？\",\"t\":[\"概念：\",\"CountDownLatch 是一个同步的辅助类，允许一个或多个线程，等待其他一组线程完成操作，再继续执行。简单来说：CountDownLatch 是一个计数器，可以保证线程之间的顺序执行把线程从并发状态调整为串行状态保证了线程的执行顺序。(只可以使用一次)\",\"CyclicBarrier 是一个同步的辅助类，允许一组线程相互之间等待，达到一个共同点，再继续执行。典型场景：可以用于多线程计算数据，最后合并计算结果。（可以多次使用）\",\"分享一个直观的代码：\",\"package com.javapub.test; import java.util.concurrent.CountDownLatch; /** * @Author: JavaPub * @License: https://github.com/Rodert/ * @Contact: https://javapub.blog.csdn.net/ * @Date: 2022/1/1 16:50 * @Version: 1.0 * @Description: countDownLatch 可以保证线程之间的顺序执行把线程从并发状态调整为串行状态保证了线程的执行顺序。 * demo效果：当打印完B，再打印C。 */ class ThreadA extends Thread { private CountDownLatch down; public ThreadA(CountDownLatch down) { this.down = down; } @Override public void run() { System.out.println(\\\"A\\\"); try { down.await();//相当于wait(),调用await()方法的线程会被挂起，它会等待直到count值为0才继续执行 } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\\\"C\\\"); } } class ThreadB extends Thread { private CountDownLatch down; public ThreadB(CountDownLatch down) { this.down = down; } @Override public void run() { System.out.println(\\\"B\\\"); System.out.println(down.getCount()); down.countDown();//将count值减1 } } public class Test { public static void main(String[] args) { CountDownLatch down = new CountDownLatch(1);//创建1个计数器 new ThreadA(down).start(); new ThreadB(down).start(); } } /*输出 A B C */\",\"package com.roundyuan.fanggateway.test; import java.util.concurrent.CyclicBarrier; /** * @Author: JavaPub * @License: https://github.com/Rodert/ * @Contact: https://javapub.blog.csdn.net/ * @Date: 2022/1/2 13:42 * @Version: 1.0 * @Description: CyclicBarrier */ public class CyclicBarrierDemo { static class TaskThread extends Thread { CyclicBarrier barrier; public TaskThread(CyclicBarrier barrier) { this.barrier = barrier; } @Override public void run() { try { Thread.sleep(1000); System.out.println(getName() + \\\" 到达栅栏 A\\\"); barrier.await(); System.out.println(getName() + \\\" 冲破栅栏 A\\\"); Thread.sleep(2000); System.out.println(getName() + \\\" 到达栅栏 B\\\"); barrier.await(); System.out.println(getName() + \\\" 冲破栅栏 B\\\"); } catch (Exception e) { e.printStackTrace(); } } } public static void main(String[] args) { int threadNum = 5; CyclicBarrier barrier = new CyclicBarrier(threadNum, new Runnable() { @Override public void run() { System.out.println(Thread.currentThread().getName() + \\\" 完成最后任务\\\"); } }); for (int i = 0; i < threadNum; i++) { new TaskThread(barrier).start(); } } } /* Thread-3 到达栅栏 A Thread-1 到达栅栏 A Thread-4 到达栅栏 A Thread-2 到达栅栏 A Thread-0 到达栅栏 A Thread-2 完成最后任务 Thread-2 冲破栅栏 A Thread-0 冲破栅栏 A Thread-4 冲破栅栏 A Thread-3 冲破栅栏 A Thread-1 冲破栅栏 A Thread-4 到达栅栏 B Thread-0 到达栅栏 B Thread-2 到达栅栏 B Thread-1 到达栅栏 B Thread-3 到达栅栏 B Thread-3 完成最后任务 Thread-3 冲破栅栏 B Thread-0 冲破栅栏 B Thread-4 冲破栅栏 B Thread-1 冲破栅栏 B Thread-2 冲破栅栏 B */\",\"网上看到一个比较形象一个例子：\",\"CountDownLatch： 宿管阿姨，晚上关宿舍大门睡觉，需要等到所有学生回寝，才能关门睡觉，学生之间不用相互等待，回寝就能睡觉。 （学生就是各个线程，宿管阿姨就是监听CountDownLatch为0后要执行的。） CyclicBarrier： 家庭聚餐，等待家庭成员到齐才能开饭，家庭成员之间需要相互等待，直到最后一个到达，才能同时开饭。\"]},\"1260\":{\"h\":\"8. 如何避免死锁？\",\"t\":[\" 从上图我们就可以看出，产生死锁就是俩个或多个线程在申请资源时，自己需要的资源别别人持有、并阻塞。所以导致死锁。\",\"如何解决：\",\"减小锁的范围，尽量保证之锁定自己需要的资源，减小交叉持有资源情况\",\"但是有些时候不得不持有多个资源，比如银行转账，我们必须同时获得两个账户上的锁，才能进行操作，两个锁的申请必须发生交叉。这时我们也可以打破死锁的那个闭环，在涉及到要同时申请两个锁的方法中，总是以相同的顺序来申请锁，比如总是先申请 id 大的账户上的锁 ，然后再申请 id 小的账户上的锁，这样就无法形成导致死锁的那个闭环。\",\"我们知道导致死锁有一个因素是阻塞，所以如果我们不使用默认阻塞的锁，也是可以避免死锁的。我们可以使用 ReentrantLock.tryLock() 方法，在一个循环中，如果 tryLock() 返回失败，那么就释放以及获得的锁，并睡眠一小段时间。这样就打破了死锁的闭环。\",\"package com.roundyuan.fanggateway.test; import java.util.Random; import java.util.concurrent.TimeUnit; import java.util.concurrent.locks.Lock; import java.util.concurrent.locks.ReentrantLock; /** * @Author: JavaPub * @License: https://github.com/Rodert/ * @Contact: https://javapub.blog.csdn.net/ * @Date: 2022/1/2 14:38 * @Version: 1.0 * @Description: ReentrantLock */ public class DeadLock { private static Lock lock1 = new ReentrantLock(); private static Lock lock2 = new ReentrantLock(); public static void deathLock() { new Thread() { @Override public void run() { while (true) { if (lock1.tryLock()) { try { //如果获取成功则执行业务逻辑，如果获取失败，则释放lock1的锁，自旋重新尝试获得锁 if (lock2.tryLock()) { try { System.out.println(\\\"Thread1：已成功获取 lock1 and lock2 ...\\\"); break; } finally { lock2.unlock(); } } } finally { lock1.unlock(); } } System.out.println(\\\"Thread1：获取锁失败，重新获取---\\\"); try { //防止发生活锁 TimeUnit.NANOSECONDS.sleep(new Random().nextInt(100)); } catch (InterruptedException e) { e.printStackTrace(); } } } }.start(); new Thread() { @Override public void run() { while (true) { if (lock2.tryLock()) { try { //如果获取成功则执行业务逻辑，如果获取失败，则释放lock2的锁，自旋重新尝试获得锁 if (lock1.tryLock()) { try { System.out.println(\\\"Thread2：已成功获取 lock2 and lock1 ...\\\"); break; } finally { lock1.unlock(); } } } finally { lock2.unlock(); } } System.out.println(\\\"Thread2：获取锁失败，重新获取---\\\"); try { //防止发生活锁 TimeUnit.NANOSECONDS.sleep(new Random().nextInt(100)); } catch (InterruptedException e) { e.printStackTrace(); } } } }.start(); } public static void main(String[] args) throws InterruptedException { for (int i = 0; i < 5; i++) { deathLock(); } } }\",\"说起死锁，银行家算法非常有必要了解：\",\"银行家算法（Banker’s Algorithm）是一个避免死锁（Deadlock）的著名算法，是由艾兹格·迪杰斯特拉在1965年为T.H.E系统设计的一种避免死锁产生的算法。它以银行借贷系统的分配策略为基础，判断并保证系统的安全运行。 1、操作系统按照银行家指定的规则为进程分配资源，当进程首次申请资源时，需要测试该进程对资源的最大需求量，如果系统现存的资源可以满足它的最大需求量则按当前的申请资源分配资源，否则就推迟分配； 2、当进程在执行中继续申请资源时，先测试该进程本次申请的资源数，是否超过了该资源剩余的总量，若超过则拒绝分配资源，若能满足则按当前的申请量分配资源，否则也要推迟分配。\",\"参考阅读：\",\"如何快速排查死锁？如何避免死锁？ https://zhuanlan.zhihu.com/p/136294283\"]},\"1261\":{\"h\":\"9. Java 中 synchronized 和 ReentrantLock 有什么不同？\",\"t\":[\"等待可中断:\",\"使用synchronized，不能被中断。synchronized 也可以说是Java提供的原子性内置锁机制。内部锁扮演了互斥锁（mutual exclusion lock ，mutex）的角色，一个线程引用锁的时候，别的线程阻塞等待。\",\"使用ReentrantLock。等待了很长时间以后，可以中断等待，转而去做别的事情。\",\"公平锁:\",\"公平锁是指多个线程在等待同一个锁时，必须按照申请的时间顺序来依次获得锁；而非公平锁则不能保证这一点。非公平锁在锁被释放时，任何一个等待锁的线程都有机会获得锁。 synchronized的锁是非公平锁，ReentrantLock默认情况下也是非公平锁，但可以通过带布尔值的构造函数要求使用公平锁。\",\"还有大家已知的俩点：\",\"synchronized是独占锁，加锁和解锁的过程自动进行，易于操作，但不够灵活。ReentrantLock也是独占锁，加锁和解锁的过程需要手动进行，不易操作，但非常灵活。\",\"synchronized可重入，因为加锁和解锁自动进行，不必担心最后是否释放锁；ReentrantLock也可重入，但加锁和解锁需要手动进行，且次数需一样，否则其他线程无法获得锁。\"]},\"1262\":{\"h\":\"10. 有三个线程 T1，T2，T3，怎么确保它们按顺序执行？\",\"t\":[\"方法1：\",\"线程内部顺序调用，T1、T2、T3。这个可能不是要考察的点，但也是一个方案。\",\"方法2：\",\"join()方法用于将线程由 ”并行“变成”串行“，它用于等待其他线程的终止，在当前线程掉用了join()方法，那么当前线程将进入阻塞状态，等到另一个线程结束，当前线程再由阻塞状态转变成就绪状态，等待CPU的使用权。\",\"package com.javapub.test; /** * @Author: JavaPub * @License: https://github.com/Rodert/ * @Contact: https://javapub.blog.csdn.net/ * @Date: 2022/1/2 15:20 * @Version: 1.0 * @Description: */ public class Test1 { public static void main(String[] args) { ThreadA threadA = new ThreadA(); ThreadB threadB = new ThreadB(threadA); ThreadC threadC = new ThreadC(threadB); threadA.start(); threadB.start(); threadC.start(); } } class ThreadA extends Thread { @Override public void run() { System.out.println(\\\"线程A\\\"); } } class ThreadB extends Thread { Thread threadA; public ThreadB() { // dosomething Auto-generated constructor stub } public ThreadB(Thread threadA) { this.threadA = threadA; } @Override public void run() { try { threadA.join(); } catch (InterruptedException e) { // dosomething Auto-generated catch block e.printStackTrace(); } System.out.println(\\\"线程B\\\"); } } class ThreadC extends Thread { Thread threadB; public ThreadC(Thread threadB) { this.threadB = threadB; } @Override public void run() { try { threadB.join(); } catch (InterruptedException e) { // dosomething Auto-generated catch block e.printStackTrace(); } System.out.println(\\\"线程C\\\"); } }\",\"信号量方式 java.util.concurrent.Semaphore 英 [ˈseməfɔː(r)] 待研究\"]},\"1263\":{\"h\":\"Java 容器\"},\"1264\":{\"h\":\"1. 请说一下Java容器集合的分类，各自的继承结构\",\"t\":[\"Java 容器分为 Collection 和 Map 两大类，其下又有很多子类，如下所示：\",\"Collection包括：List、ArrayList、LinkedList、Vector、Stack、Set、HashSet、LinkedHashSet、TreeSet\",\"Map包括：HashMap、LinkedHashMap、TreeMap、ConcurrentHashMap、Hashtable\"]},\"1265\":{\"h\":\"2. Collection 和 Collections 有什么区别？\",\"t\":[\"Collection 是一个集合接口，它提供了对集合对象进行基本操作的通用接口方法，所有集合都是它的子类，比如 List、Set 等。\",\"Collections 是一个包装类，包含了很多静态方法，不能被实例化，就像一个工具类，比如提供的排序方法：Collections. sort(list)。\"]},\"1266\":{\"h\":\"3. List、Set、Map 之间的区别是什么？\",\"t\":[\"List、Set、Map 的区别主要体现在两个方面：元素是否有序、是否允许元素重复。\"]},\"1267\":{\"h\":\"4. HashMap 和 Hashtable 有什么区别？\",\"t\":[\"HashMap 是非线程安全的，HashTable 是线程安全的。\",\"HashMap 的键和值都允许有 null 值存在，而 HashTable 则不行。\",\"因为线程安全的问题，HashMap 效率比 HashTable 的要高。\",\"Hashtable 是同步的，而 HashMap 不是。因此，HashMap 更适合于单线程环境，而 Hashtable 适合于多线程环境。\",\"一般现在 **不建议用 HashTable **， \",\"一方面是因为 HashTable 是遗留类，内部实现很多没优化和冗余。\",\"另外，即使在 多线程 环境下，现在也有同步的 ConcurrentHashMap 替代，没有必要因为是多线程而用 HashTable。\"]},\"1268\":{\"h\":\"5. 说一下 HashMap 的实现原理？\",\"t\":[\"HashMap 基于 Hash 算法实现的，我们通过 put(key,value)存储，get(key)来获取。当传入 key 时，HashMap 会根据 key. hashCode() 计算出 hash 值，根据 hash 值将 value 保存在 bucket 里。\",\"当计算出的 hash 值相同时，我们称之为 hash 冲突，HashMap 的做法是用链表和红黑树存储相同 hash 值的 value。当 hash 冲突的个数比较少时，使用链表否则使用红黑树。\"]},\"1269\":{\"h\":\"6. 谈谈 ArrayList 和 LinkedList 的区别\",\"t\":[\"本质的区别来源于两者的底层实现：ArrayList的底层是数组，LinkedList的底层是双向链表。\",\"数组拥有O(1)的查询效率，可以通过下标直接定位元素；链表在查询元素的时候只能通过遍历的方式查询，效率比数组低。\",\"数组增删元素的效率比较低，通常要伴随拷贝数组的操作；链表增删元素的效率很高，只需要调整对应位置的指针即可。\",\"以上是数组和链表的通俗对比，在日常的使用中，两者都能很好地在自己的适用场景发挥作用。\",\"比如说我们常常用ArrayList代替数组，因为封装了许多易用的api，而且它内部实现了自动扩容机制，由于它内部维护了一个当前容量的指针size，直接往ArrayList中添加元素的时间复杂度是O(1)的，使用非常方便。\",\"而LinkedList常常被用作Queue队列的实现类，由于底层是双向链表，能够轻松地提供先入先出的操作。\",\"我觉得可以分两部分答，一个是数组与链表底层实现的不同，另一个是答ArrayList和LinkedList的实现细节。\"]},\"1270\":{\"h\":\"7. 谈谈ArrayList和Vector的区别\",\"t\":[\"两者的底层实现相似，关键的不同在于Vector的对外提供操作的方法都是用synchronized修饰的，也就是说Vector在并发环境下是线程安全的，而ArrayList在并发环境下可能会出现线程安全问题。\",\"由于Vector的方法都是同步方法，执行起来会在同步上消耗一定的性能，所以在单线程环境下，Vector的性能是不如ArrayList的\",\"除了线程安全这点本质区别外，还有一个实现上的小细节区别：ArrayList每次扩容的大小为原来的1.5倍；Vector可以指定扩容的大小，默认是原来大小的两倍。\",\"可以顺带谈谈多线程环境下ArrayList的替代品，比如CopyOnWriteArrayList，但是要谈谈优缺点。\"]},\"1271\":{\"h\":\"8. 请谈一谈 Java 集合中的 fail-fast 和 fail-safe 机制\",\"t\":[\"fail-fast 是一种错误检测机制，Java 在适合单线程使用的集合容器中很好地实现了 fail-fast 机制，举一个简单的例子：在多线程并发环境下，A线程在通过迭代器遍历一个 ArrayList 集合，B线程同时对该集合进行增删元素操作，这个时候线程A就会抛出并发修改异常，中断正常执行的逻辑。\",\"而fail-safe机制更像是一种对 fail-fast 机制的补充，它被广泛地实现在各种并发容器集合中。回头看上面的例子，如果线程A遍历的不是一个 ArrayList，而是一个 CopyOnWriteArrayList，则符合 fail-safe 机制，线程B可以同时对该集合的元素进行增删操作，线程A不会抛出任何异常。\",\"要理解这两种机制的表象，我们得了解这两种机制背后的实现原理：\",\"我们同样用 ArrayList 解释 fail-fast 背后的原理：首先 ArrayList 自身会维护一个 modCount 变量，每当进行增删元素等操作时，modCount 变量都会进行自增。当使用迭代器遍历 ArrayList 时，迭代器会新维护一个初始值等于 modCount 的 expectedModCount 变量，每次获取下一个元素的时候都会去检查 expectModCount 和 modCount 是否相等。在上面举的例子中，由于B线程增删元素会导致 modCount 自增，当A线程遍历元素时就会发现两个变量不等，从而抛出异常。\",\"CopyOnWriteArrayList 所实现的 fail-safe 在上述情况下没有抛出异常，它的原理是：当使用迭代器遍历集合时，会基于原数组拷贝出一个新的数组（ArrayList的底层是数组），后续的遍历行为在新数组上进行。所以线程B同时进行增删操作不会影响到线程A的遍历行为。\"]},\"1272\":{\"h\":\"9. HashMap是怎样确定key存放在数组的哪个位置的？JDK1.8\",\"t\":[\"首先计算key的hash值，计算过程是：先得到key的hashCode（int类型，4字节），然后把hashCode的高16位与低16位进行异或，得到key的hash值。\",\"接下来用key的hash值与数组长度减一的值进行按位与操作，得到key在数组中对应的下标。\"]},\"1273\":{\"h\":\"9.1. 追问：为什么计算key的hash时要把hashCode的高16位与低16位进行异或？（变式：为什么不直接用key的hashCode）?\",\"t\":[\"计算key在数组中的下标时，是通过hash值与数组长度减一的值进行按位与操作的。由于数组的长度通常不会超过2^16，所以hash值的高16位通常参与不了这个按位与操作。\",\"为了让hashCode的高16位能够参与到按位与操作中，所以把hashCode的高16位与低16位进行异或操作，使得高16位的影响能够均匀稀释到低16位中，使得计算key位置的操作能够充分散列均匀。\"]},\"1274\":{\"h\":\"10. 为什么要把链表转为红黑树，阈值为什么是8？\",\"t\":[\"在极端情况下，比如说key的hashCode()返回的值不合理，或者多个密钥共享一个hashCode，很有可能会在同一个数组位置产生严重的哈希冲突。\",\"这种情况下，如果我们仍然使用使用链表把多个冲突的元素串起来，这些元素的查询效率就会从O(1)下降为O(N)。为了能够在这种极端情况下仍保证较为高效的查询效率，HashMap选择把链表转换为红黑树，红黑树是一种常用的平衡二叉搜索树，添加，删除，查找元素等操作的时间复杂度均为O(logN)\",\"至于阈值为什么是8，这是HashMap的作者根据概率论的知识得到的。当key的哈希码分布均匀时，数组同一个位置上的元素数量是成泊松分布的，同一个位置上出现8个元素的概率已经接近千分之一了，这侧面说明如果链表的长度达到了8，key的hashCode()肯定是出了大问题，这个时候需要红黑树来保证性能，所以选择8作为阈值。\",\"追问：为什么红黑树转换回链表的阈值不是7而是6呢？\",\"如果是7的话，那么链表和红黑树之间的切换范围值就太小了。如果我的链表长度不停地在7和8之间切换，那岂不是得来回变换形态？所以选择6是一种折中的考虑。\"]},\"1275\":{\"h\":\"拓展题. 为什么 HashMap 数组的长度是2的幂次方？\",\"t\":[\"因为这样能够提高根据 key 计算数组位置的效率。\",\"HashMap 根据 key 计算数组位置的算法是：用 key 的 hash 值与数组长度减1的值进行按位与操作。\",\"在我们正常人的思维中，获取数组的某个位置最直接的方法是对数组的长度取余数。但是如果被除数是2的幂次方，那么这个对数组长度取余的方法就等价于对数组长度减一的值进行按位与操作。\",\"在计算机中，位运算的效率远高于取模运算，所以为了提高效率，把数组的长度设为2的幂次方。\",\"所以一定要看一遍源码，相比于框架的源码，集合的源码简直太友好了。在笔试的时候可能还会考一些集合的使用，比如遍历，排序，比较等等，这些算是Java基础，用得多也就熟了。\"]},\"1276\":{\"h\":\"JavaEE\"},\"1277\":{\"h\":\"1. JSP 有哪些内置对象？作用分别是什么？\",\"t\":[\"JSP有9个内置对象：\",\"request：封装客户端的请求，其中包含来自GET或POST请求的参数；\",\"response：封装服务器对客户端的响应；\",\"pageContext：通过该对象可以获取其他对象；\",\"session：封装用户会话的对象；\",\"application：封装服务器运行环境的对象；\",\"out：输出服务器响应的输出流对象；\",\"config：web应用的配置对象；\",\"page：jsp页面本身（相当于Java程序中的this）；\",\"exception：封装页面抛出异常的对象。\",\"JSP的9内置对象及其含义\"]},\"1278\":{\"h\":\"2. 介绍一下 Servlet 生命周期\",\"t\":[\"Servlet是运行在服务器端，以多线程的方式处理客户端请求的小程序。是sun公司提供的一套规范（规范的实现是接口）。\",\"servlet的生命周期就是从servlet出现到消亡(销毁)的全过程。主要分为以下几个阶段：\",\"加载类—>实例化(为对象分配空间)—>初始化(为对象的属性赋值)—>请求响应(服务阶段)—>销毁\",\"详细介绍：\",\"加载\",\"在下列时刻会加载Servlet（只执行一次）：\",\"如果已经配置自动加载选项，则在启动服务器时自动加载 web.xml 文件中设置的<load-on-start>；\",\"服务器启动之后，客户机首次向Servlet发出请求时会加载；\",\"重新加载Servlet时会进行一次加载；\",\"实例化\",\"加载Servlet后，服务器创建一个Servlet实例。（只执行一次）\",\"初始化\",\"调用 Servlet 的 init() 方法。在初始化阶段，Servlet 初始化参数被传递给 Servlet 配置对象 ServletConfig。（只执行一次）；\",\"请求处理\",\"对于到达服务器的客户机请求，服务器创建针对此次请求的一个\\\"请求对象\\\"和一个\\\"响应对象\\\"。\",\"服务器调用 Servlet 的 service() 方法，该方法用于传递\\\"请求\\\"和\\\"响应\\\"对象。\",\"service() 方法从\\\"请求\\\"对象获得请求信息、处理该请求并用\\\"响应\\\"对象的方法将响应回传给客户端。\",\"service() 方法可以调用其他方法来处理请求，例如 doGet()、doPost() 或其他方法。\",\"销毁\",\"当服务器不需要 Servlet，或重新装入 Servlet 的新实例时，服务器会调用 Servlet 的 destroy() 方法。（只执行一次）；\"]},\"1279\":{\"h\":\"3. Servlet和JSP的区别和联系\",\"t\":[\"区别：\",\"JSP是在HTML代码里面写Java代码；而Servlet是在Java代码中写HTML代码，Servlet本身是个Java类；\",\"JSP使人们将显示和逻辑分隔称为可能，这意味着两者的开发可以并行进行；而Servlet并没有将两者分开；\",\"Servlet独立地处理静态表示逻辑与动态业务逻辑，任何文件的变动都需要对此服务程序重新编译；JSP允许使用特殊标签直接嵌入到HTML页面，HTML内容与JAVA内容也可放在单独文件中，HTML内容的任何变动会自动编译装入到服务程序；\",\"Servlet需要在web.xml中配置；而JSP无需配置；\",\"目前JSP主要用在视图层，负责显示；而Servlet主要用在控制层，负责调度；\",\"联系：\",\"都是SUN公司推出的动态网页技术；\",\"先有Servlet，针对Servlet缺点推出JSP。JSP是Servlet的一种特殊形式，每个JSP页面就是一个Servlet实例，JSP页面由系统翻译成Servlet，Servlet再负责响应用户的请求。\"]},\"1280\":{\"h\":\"4. JSP的执行过程\",\"t\":[\"在JSP运行过程中，首先由客户端发出请求，Web服务器接收到请求之后，如果是第一次访问某个JSP页面，Web服务器对它进行一下三个操作：\",\"翻译\",\"由.jsp变为.java，由JSP引擎完成。\",\"编译\",\"由.java变为.class，由Java编译器实现。\",\"执行\",\"由.class变为.html，用Java虚拟机执行编译文件，然后将执行结果返回给Web服务器，并最终返回给客户端。\",\"如果不是第一次访问某个JSP页面，则只执行第三步，所以第一次访问JSP较慢。\"]},\"1281\":{\"h\":\"5. Session和Cookie的区别和联系；说明在自己项目中如何使用？\",\"t\":[\"Session 和 Cookie 都是会话(Seesion)跟踪技术。Cookie 通过在客户端记录信息确定用户身份，Session 通过在服务器端记录信息确定用户身份。但是 Session 的实现依赖于 Cookie，sessionId(session的唯一标识需要存放在客户端).\",\"cookie数据存放在客户的浏览器上，session数据放在服务器上。\",\"cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗，考虑到安全应当使用session。\",\"session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用cookie。\",\"单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。\",\"可以考虑将登录信息等重要信息存放为session，其他信息如果需要保留，可以放在cookie中。\",\"在程序开发过程中，我们可以在客户端每次与服务器交互时检查SessionID（Session中属性值，非HttpServlet环境开发中也可以用其它的Key值代替），用于会话管理。\",\"将登陆信息等重要信息存放为SESSION\",\"其他信息如果需要保留，可以放在COOKIE中，比如购物车\",\"购物车最好使用cookie，但是cookie是可以在客户端禁用的，这时候我们要使用cookie+数据库的方式实现，当从cookie中不能取出数据时，就从数据库获取。\"]},\"1282\":{\"h\":\"6. 转发和重定向的联系和区别？\",\"t\":[\"转发：服务器端的跳转，路径不会发生改变（针对的是servlet），是服务器内部的处理，一次请求，请求对象不会变\",\"重定向：客户端的跳转，路径会发生改变，将要请求的路径和302重定向的状态码发给客户端浏览器，客户端浏览器将再次向服务器发出请求，不是同个请求，两次请求。\"]},\"1283\":{\"h\":\"7. 拦截器和过滤器的区别\",\"t\":[\"Spring 的拦截器与 Servlet 的 Filter 有相似之处，比如二者都是AOP编程思想的体现，都能实现权限检查、日志记录等。不同的是:\",\"使用范围不同: Filter 是 Servlet 规范规定的，只能用于Web程序中。而拦截器既可以用于Web程序，也可以用于 Application、Swing程序中。\",\"规范不同: Filter 是在 Servlet 规范中定义的，是 Servlet 容器支持的。而拦截器是在 Spring 容器内的，是 Spring 框架支持的。\",\"使用的资源不同:同其他的代码块一样，拦截器也是一个 Spring 的组件，归 Spring 管理，配置在 Spring 文件中，因此能使用 Spring 里的任何资源、对象，例如 Service 对象、数据源、事务管理等，通过 IoC 注入到拦截器即可;而Filter则不能。\",\"深度不同: Filter 在只在 Servlet 前后起作用。而拦截器能够深入到方法前后、异常抛出前后等，因此拦截器的使用具有更大的弹性。所以在 Spring 构架的程序中，要优先使用拦截器。\",\"一张经典的图\",\"过滤器&拦截器\"]},\"1284\":{\"h\":\"8. 三次握手和四次挥手\",\"t\":[\"这里是字面描述\",\"三次握手:\",\"客户端向服务器发出连接请求等待服务器确认\",\"服务器向客户端返回一个响应告诉客户端收到了请求\",\"客户端向服务器再次发出确认信息,此时连接建立\",\"四次挥手:\",\"客户端向服务器发出取消连接请求\",\"服务器向客户端返回一个响应,表示收到客户端取消请求\",\"服务器向客户端发出确认取消信息(向客户端表明可以取消连接了)\",\"客户端再次发送确认消息,此时连接取消\"]},\"1285\":{\"h\":\"9. TCP和UDP的区别\",\"t\":[\"TCP ：面向连接，UDP ：面向无连接\",\"TCP ：传输效率低，UDP ：传输效率高(有大小限制，一次限定在64kb之内)\",\"TCP：可靠，UDP ：不可靠\"]},\"1286\":{\"h\":\"10. 如何解决跨域问题？\",\"t\":[\"跨域指的是浏览器不能执行其它网站的脚本，它是由浏览器的同源策略造成的，是浏览器对 JavaScript 施加的安全限制。\",\"所谓同源指的是：协议、域名、端口号都相同，只要有一个不相同，那么都是非同源。\",\"解决方案：\",\"使用 ajax 的 jsonp。（这一点有些人是不知道的）\",\"nginx 转发：利用 nginx 反向代理，将请求分发到部署相应项目的 tomcat 服务器，当然也不存在跨域问题。\",\"使用 CORS：写一个配置类实现 WebMvcConfigurer 接口或者配置 FilterRegistrationBean。\",\"CORS（Cross-Origin Resource Sharing）是一个W3C标准，全称“跨域资源共享”\"]},\"1287\":{\"h\":\"11. 什么是 CSRF 攻击？如何防御CSRF 攻击\",\"t\":[\"CSRF（Cross-site request forgery） 跨站请求伪造。CSRF 攻击是在受害者毫不知情的情况下，以受害者名义伪造请求发送给受攻击站点，从而在受害者并未授权的情况下执行受害者权限下的各种操作。\",\"CSRF 攻击专门针对状态改变请求，而不是数据窃取，因为攻击者无法查看对伪造请求的响应。\",\"目前防御 CSRF 攻击主要有三种策略：\",\"验证 HTTP Referer 字段\",\"在请求地址中添加 token 并验证\",\"在 HTTP 头中自定义属性并验证\"]},\"1288\":{\"h\":\"12. HTTP1.0和HTTP1.1和HTTP2.0的区别\",\"t\":[\"HTTP1.0 ：无状态，无连接。\",\"HTTP1.1 ：长连接，请求管道化，增加缓存处理，增加 Host 字段，支持断点传输。\",\"HTTP2.0 ：二进制分帧，多路复用(连接共享)，头部压缩，服务器推送。\"]},\"1289\":{\"h\":\"JVM\"},\"1290\":{\"h\":\"1. 说一说JVM的主要组成部分\",\"t\":[\"点击放大看，一图胜千文\",\"image\",\"方法区和堆是所有线程共享的内存区域；而虚拟机栈、本地方法栈和程序计数器的运行是线程私有的内存区域，运行时数据区域就是我们常说的JVM的内存。\",\"类加载子系统：根据给定的全限定名类名(如：java.lang.Object)来装载class文件到运行时数据区中的方法区中。\",\"Java堆是Java虚拟机所管理的内存中最大的一块，也是垃圾回收的主要区域。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。\",\"方法区与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。\",\"程序计数器是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器，用来指示执行引擎下一条执行指令的地址。\",\"Java虚拟机栈也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、返回方法地址等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。\",\"本地方法栈（Native Method Stacks）,本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务。\",\"执行引擎：根据程序计数器中存储的指令地址执行classes中的指令。\",\"本地接口：与本地方法库交互，是其它编程语言交互的接口。\"]},\"1291\":{\"h\":\"2. 说一下 JVM 的作用？\",\"t\":[\"首先通过编译器把 Java 代码转换成字节码，类加载器（ClassLoader）再把字节码加载到内存中，将其放在运行时数据区（Runtime data area）的方法区内，而字节码文件只是 JVM 的一套指令集规范，并不能直接交给底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。\"]},\"1292\":{\"h\":\"3. 说一下堆栈的区别？\",\"t\":[\"物理地址\",\"堆的物理地址分配对象是不连续的。因此性能慢些。在GC的时候也要考虑到不连续的分配，所以有各种算法。比如，标记-消除，复制，标记-压缩，分代（即新生代使用复制算法，老年代使用标记——压缩）\",\"栈使用的是数据结构中的栈，先进后出的原则，物理地址分配是连续的。所以性能快。\",\"内存分别\",\"堆因为是不连续的，所以分配的内存是在运行期确认的，因此大小不固定。一般堆大小远远大于栈。\",\"栈是连续的，所以分配的内存大小要在编译期就确认，大小是固定的。\",\"存放的内容\",\"堆存放的是对象的实例和数组。因此该区更关注的是数据的存储\",\"栈存放：局部变量，操作数栈，返回结果。该区更关注的是程序方法的执行。\",\"PS：\",\"静态变量放在方法区 静态的对象还是放在堆。 程序的可见度\",\"堆对于整个应用程序都是共享、可见的。\",\"栈只对于线程是可见的。所以也是线程私有。他的生命周期和线程相同。\"]},\"1293\":{\"h\":\"4. Java内存泄漏\",\"t\":[\"内存泄漏是指不再被使用的对象或者变量一直被占据在内存中。\",\"严格来说，只有对象不会再被程序用到了，但是GC又不能回收他们的情况，才叫内存泄漏。\",\"理论上来说，Java是有GC垃圾回收机制的，也就是说，不再被使用的对象，会被GC自动回收掉，自动从内存中清除。\",\"但是，即使这样，Java也还是存在着内存泄漏的情况，java导致内存泄露的原因很明确：长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄露，尽管短生命周期对象已经不再需要，但是因为长生命周期对象持有它的引用而导致不能被回收，这就是java中内存泄露的发生场景。\"]},\"1294\":{\"h\":\"5. JVM 有哪些垃圾回收算法？\",\"t\":[\"标记-清除算法：标记有用对象，然后进行清除回收。缺点：效率不高，无法清除垃圾碎片。\",\"复制算法：按照容量划分二个大小相等的内存区域，当一块用完的时候将活着的对象复制到另一块上，然后再把已使用的内存空间一次清理掉。缺点：内存使用率不高，只有原来的一半，消耗内存。\",\"标记-整理算法：标记无用对象，让所有存活的对象都向一端移动，然后直接清除掉端边界以外的内存。\",\"分代算法：根据对象存活周期的不同将内存划分为几块，一般是新生代和老年代，新生代基本采用复制算法，老年代采用标记整理算法。\"]},\"1295\":{\"h\":\"6. 说一下 JVM 有哪些垃圾回收器？\",\"t\":[\"image\",\"image\"]},\"1296\":{\"h\":\"7. 说一下类加载的执行过程？\",\"t\":[\"加载：根据查找路径找到相应的 class 文件然后装载入内存中；\",\"image\",\"验证：检查加载的 class 文件的正确性；\",\"准备：给类中的静态变量分配内存空间；\",\"解析：虚拟机将常量池中的符号引用替换成直接引用的过程。符号引用就理解为一个标示，而在直接引用直接指向内存中的地址；\",\"初始化：对静态变量和静态代码块执行初始化工作。\"]},\"1297\":{\"h\":\"8. 什么是双亲委派模型？为什么要使用双亲委派模型？\",\"t\":[\"什么是双亲委派模型\",\"当需要加载一个类的时候，子类加载器并不会马上去加载，而是依次去请求父类加载器加载\",\"如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器；\",\"如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。\",\"为什么要使用双亲委派模型\",\"可以防止内存中出现多份同样的字节码，如果没有双亲委派模型而是由各个类加载器自行加载的话，如果用户编写了一个java.lang.Object的同名类并放在ClassPath中，多个类加载器都去加载这个类到内存中，系统中将会出现多个不同的Object类，那么类之间的比较结果及类的唯一性将无法保证，而且如果不使用这种双亲委派模型将会给虚拟机的安全带来隐患。所以，要让类对象进行比较有意义，前提是他们要被同一个类加载器加载。\"]},\"1298\":{\"h\":\"9. CMS垃圾清理的过程\",\"t\":[\"image\",\"CMS整个过程比之前的收集器要复杂，整个过程分为4个主要阶段，即初始标记阶段、并发标记阶段、重新标记阶段和并发清除阶段。(涉及STW的阶段主要是：初始标记 和 重新标记 stop-the-world)\",\"初始标记（Initial-Mark）阶段：在这个阶段中，程序中所有的工作线程都将会因为“stop-the-world”机制而出现短暂的暂停，这个阶段的主要任务仅仅只是标记出 GC Roots 能直接关联到的对象。一旦标记完成之后就会恢复之前被暂停的所有应用线程。由于直接关联对象比较小，所以这里的速度非常快。\",\"并发标记（Concurrent-Mark）阶段：从 Gc Roots 的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行。\",\"重新标记（Remark）阶段：由于在并发标记阶段中，程序的工作线程会和垃圾收集线程同时运行或者交叉运行，因此为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短。\",\"并发清除（Concurrent-Sweep）阶段：此阶段清理删除掉标记阶段判断的已经死亡的对象，释放内存空间。由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的\"]},\"1299\":{\"h\":\"10. 常用的 JVM 调优的参数都有哪些？\",\"t\":[\"image\",\"-XX:NewRatio=4：设置年轻的和老年代的内存比例为 1:4；\",\"-XX:SurvivorRatio=8：设置新生代 Eden 和 Survivor 比例为 8:2；\",\"–XX:+UseParNewGC：指定使用 ParNew + Serial Old 垃圾回收器组合；\",\"-XX:+UseParallelOldGC：指定使用 ParNew + ParNew Old 垃圾回收器组合；\",\"-XX:+UseConcMarkSweepGC：指定使用 CMS + Serial Old 垃圾回收器组合；\",\"-XX:+PrintGC：开启打印 gc 信息；\",\"-XX:+PrintGCDetails：打印 gc 详细信息。\",\"image\"]},\"1300\":{\"h\":\"Kafka\",\"t\":[\"在面试kafka中，一定要了解为什么要用kafka、及kafka的架构等基本概念，才能对面试中的问题得心应手。\"]},\"1301\":{\"h\":\"术语0. Kafka中的ISR、AR又代表什么？ISR的伸缩又指什么\",\"t\":[\"ISR:In-Sync Replicas 副本同步队列\",\"AR:Assigned Replicas 所有副本\",\"ISR是由leader维护，follower从leader同步数据有一些延迟（包括延迟时间replica.lag.time.max.ms和延迟条数replica.lag.max.messages两个维度, 当前最新的版本0.10.x中只支持replica.lag.time.max.ms这个维度），任意一个超过阈值都会把follower剔除出ISR, 存入OSR（Outof-Sync Replicas）列表，新加入的follower也会先存放在OSR中。AR=ISR+OSR。\"]},\"1302\":{\"h\":\"术语0. Kafka中的HW、LEO、LSO、LW等分别代表什么？\",\"t\":[\"HW:High Watermark 高水位，取一个partition对应的ISR中最小的LEO作为HW，consumer最多只能消费到HW所在的位置上一条信息。\",\"LEO:LogEndOffset 当前日志文件中下一条待写信息的offset HW/LEO这两个都是指最后一条的下一条的位置而不是指最后一条的位置。\",\"LSO:Last Stable Offset 对未完成的事务而言，LSO 的值等于事务中第一条消息的位置(firstUnstableOffset)，对已完成的事务而言，它的值同 HW 相同\",\"LW:Low Watermark 低水位, 代表 AR 集合中最小的 logStartOffset 值\"]},\"1303\":{\"h\":\"1. kafka 是什么？有什么作用？\",\"t\":[\"Kafka 是一个分布式的流式处理平台，它以高吞吐、可持久化、可水平扩展、支持流数据处理等多种特性而被广泛使用\",\"主要功能体现于三点：\",\"消息系统：kafka与传统的消息中间件都具备系统解耦、冗余存储、流量削峰、缓冲、异步通信、扩展性、可恢复性等功能。与此同时，kafka还提供了大多数消息系统难以实现的消息顺序性保障及回溯性消费的功能。\",\"存储系统：kafka把消息持久化到磁盘，相比于其他基于内存存储的系统而言，有效的降低了消息丢失的风险。这得益于其消息持久化和多副本机制。也可以将kafka作为长期的存储系统来使用，只需要把对应的数据保留策略设置为“永久”或启用主题日志压缩功能。\",\"流式处理平台：kafka为流行的流式处理框架提供了可靠的数据来源，还提供了一个完整的流式处理框架，比如窗口、连接、变换和聚合等各类操作。\"]},\"1304\":{\"h\":\"2. kafka 的架构是怎么样的？\",\"t\":[\"这是一个基本概念的题目，一定要掌握。\",\"一个典型的 kafka 体系架构包括若干 Producer、若干 Consumer、以及一个 Zookeeper 集群（在2.8.0版本中移，除了 Zookeeper,通过 KRaft 进行自己的集群管理）\",\"Producer 将消息发送到 Broker，Broker 负责将受到的消息存储到磁盘中，而 Consumer 负责从 Broker 订阅并消费消息。\",\"Kafka 基本概念：\",\"Producer ：生产者，负责将消息发送到 Broker\",\"Consumer ：消费者，从 Broker 接收消息\",\"Consumer Group ：消费者组，由多个 Consumer 组成。消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费，消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。\",\"Broker ：可以看做一个独立的 Kafka 服务节点或 Kafka 服务实例。如果一台服务器上只部署了一个 Kafka 实例，那么我们也可以将 Broker 看做一台 Kafka 服务器。\",\"Topic ：一个逻辑上的概念，包含很多 Partition，同一个 Topic 下的 Partiton 的消息内容是不相同的。\",\"Partition ：为了实现扩展性，一个非常大的 topic 可以分布到多个 broker 上，一个 topic 可以分为多个 partition，每个 partition 是一个有序的队列。\",\"Replica ：副本，同一分区的不同副本保存的是相同的消息，为保证集群中的某个节点发生故障时，该节点上的 partition 数据不丢失，且 kafka 仍然能够继续工作，- kafka 提供了副本机制，一个 topic 的每个分区都有若干个副本，一个 leader 和若干个 follower。\",\"Leader ：每个分区的多个副本中的\\\"主副本\\\"，生产者以及消费者只与 Leader 交互。\",\"Follower ：每个分区的多个副本中的\\\"从副本\\\"，负责实时从 Leader 中同步数据，保持和 Leader 数据的同步。Leader 发生故障时，从 Follower 副本中重新选举新的 Leader 副本对外提供服务。\"]},\"1305\":{\"h\":\"3. Kafka Replicas是怎么管理的？\",\"t\":[\"AR:分区中的所有 Replica 统称为 AR\",\"ISR:所有与 Leader 副本保持一定程度同步的Replica(包括 Leader 副本在内)组成 ISR\",\"OSR:与 Leader 副本同步滞后过多的 Replica 组成了 OSR\",\"Leader 负责维护和跟踪 ISR 集合中所有 Follower 副本的滞后状态，当 Follower 副本落后过多时，就会将其放入 OSR 集合，当 Follower 副本追上了 Leader 的进度时，就会将其放入 ISR 集合。\",\"默认情况下，只有 ISR 中的副本才有资格晋升为 Leader。\"]},\"1306\":{\"h\":\"4. 如何确定当前能读到哪一条消息？\",\"t\":[\"这个问题要先了解上一个问题的概念\",\"分区相当于一个日志文件，我们先简单介绍几个概念\",\"如上图是一个分区日志文件\",\"标识共有7条消息，offset (消息偏移量)分别是0~6\",\"0 代表这个日志文件的开始\",\"HW(High Watermark) 为4，0~3 代表这个日志文件可以消费的区间，消费者只能消费到这四条消息\",\"LEO 代表即将要写入消息的偏移量 offset\",\"分区 ISR 集合中的每个副本都会维护自己的 LEO，而 ISR 集合中最小的LEO 即为分区的 HW\",\"如上图: 三个分区副本都是 ISR集合当中的，最小的 LEO 为 3，就代表分区的 HW 为3，所以当前分区只能消费到 0~2 之间的三条数据，如下图\"]},\"1307\":{\"h\":\"5. 发送消息的分区策略有哪些？\",\"t\":[\"1.轮询：依次将消息发送该topic下的所有分区，如果在创建消息的时候 key 为 null，Kafka 默认采用这种策略。\",\"2.key 指定分区：在创建消息是 key 不为空，并且使用默认分区器，Kafka 会将 key 进行 hash，然后根据hash值映射到指定的分区上。这样的好处是 key 相同的消息会在一个分区下，Kafka 并不能保证全局有序，但是在每个分区下的消息是有序的，按照顺序存储，按照顺序消费。在保证同一个 key 的消息是有序的，这样基本能满足消息的顺序性的需求。但是如果 partation 数量发生变化，那就很难保证 key 与分区之间的映射关系了。\",\"3.自定义策略：实现 Partitioner 接口就能自定义分区策略。\",\"4.指定 Partiton 发送\"]},\"1308\":{\"h\":\"6. Kafka 的可靠性是怎么保证的？\",\"t\":[\"1.acks\",\"这个参数用来指定分区中有多少个副本收到这条消息，生产者才认为这条消息是写入成功的，这个参数有三个值：\",\"1.acks = 1，默认为1。生产者发送消息，只要 leader 副本成功写入消息，就代表成功。这种方案的问题在于，当返回成功后，如果 leader 副本和 follower 副本还没有来得及同步，leader 就崩溃了，那么在选举后新的 leader 就没有这条消息，也就丢失了。\",\"2.acks = 0。生产者发送消息后直接算写入成功，不需要等待响应。这个方案的问题很明显，只要服务端写消息时出现任何问题，都会导致消息丢失。\",\"3.acks = -1 或 acks = all。生产者发送消息后，需要等待 ISR 中的所有副本都成功写入消息后才能收到服务端的响应。毫无疑问这种方案的可靠性是最高的，但是如果 ISR 中只有leader 副本，那么就和 acks = 1 毫无差别了。\",\"2.消息发送的方式\",\"第6问中我们提到了生产者发送消息有三种方式，发完即忘，同步和异步。我们可以通过同步或者异步获取响应结果，失败做重试来保证消息的可靠性。\",\"3.手动提交位移\",\"默认情况下，当消费者消费到消息后，就会自动提交位移。但是如果消费者消费出错，没有进入真正的业务处理，那么就可能会导致这条消息消费失败，从而丢失。我们可以开启手动提交位移，等待业务正常处理完成后，再提交offset。\",\"4.通过副本 LEO 来确定分区 HW\",\"可参考第四问\"]},\"1309\":{\"h\":\"7. 分区再分配是做什么的？解决了什么问题？\",\"t\":[\"分区再分配主要是用来维护 kafka 集群的负载均衡\",\"既然是分区再分配，那么 kafka 分区有什么问题呢？\",\"问题1：当集群中的一个节点下线了\",\"如果该节点的分区是单副本的,那么分区将会变得不可用\",\"如果是多副本的，就会进行 leader 选举，在其他机器上选举出新的 leader\",\"kafka 并不会将这些失效的分区迁移到其他可用的 broker 上，这样就会影响集群的负载均衡，甚至也会影响服务的可靠性和可用性\",\"问题2：集群新增 broker 时，只有新的主题分区会分配在该 broker 上，而老的主题分区不会分配在该 broker 上，就造成了老节点和新节点之间的负载不均衡。\",\"为了解决该问题就出现了分区再分配，它可以在集群扩容，broker 失效的场景下进行分区迁移。\",\"分区再分配的原理就是通化控制器给分区新增新的副本，然后通过网络把旧的副本数据复制到新的副本上，在复制完成后，将旧副本清除。 当然，为了不影响集群正常的性能，在此复制期间还会有一系列保证性能的操作，比如复制限流。\"]},\"1310\":{\"h\":\"8. Kafka Partition 副本 leader 是怎么选举的？\",\"t\":[\"这个问题设计的点比较多，拓展的也更多一点，建议耐心阅读。\",\"常用选主机制的缺点：\",\"split-brain (脑裂): ​这是由ZooKeeper的特性引起的，虽然ZooKeeper能保证所有Watch按顺序触发，但是网络延迟，并不能保证同一时刻所有Replica“看”到的状态是一样的，这就可能造成不同Replica的响应不一致，可能选出多个领导“大脑”，导致“脑裂”。 herd effect (羊群效应): ​如果宕机的那个Broker上的Partition比较多， 会造成多个Watch被触发，造成集群内大量的调整，导致大量网络阻塞。 ZooKeeper负载过重: ​每个Replica都要为此在ZooKeeper上注册一个Watch，当集群规模增加到几千个Partition时ZooKeeper负载会过重。\",\"优势：\",\"Kafka的Leader Election方案解决了上述问题，它在所有broker中选出一个controller，所有Partition的Leader选举都由controller决定。 controller会将Leader的改变直接通过RPC的方式(比ZooKeeper Queue的方式更高效)通知需为此作为响应的Broker。\",\"没有使用 zk，所以无 2.3 问题；也没有注册 watch无 2.2 问题 leader 失败了，就通过 controller 继续重新选举即可，所以克服所有问题。\",\"Kafka partition leader的选举：\",\"由 controller 执行：\",\"从Zookeeper中读取当前分区的所有ISR(in-sync replicas)集合\",\"调用配置的分区选择算法选择分区的leader\",\"分区选择算法\",\"上面五种分区算法都是选择PreferredReplica(优先副本选举)作为当前Partition的leader。区别仅仅是选择leader之后的操作有所不同。\"]},\"1311\":{\"h\":\"9. 分区数越多越好吗？吞吐量就会越高吗？\",\"t\":[\"般类似于这种问题的答案，都是持否定态度的。\",\"但是可以说，在一定条件下，分区数的数量是和吞吐量成正比的，分区数和性能也是成正比的。\",\"那么为什么说超过了一定限度，就会对性能造成影响呢？原因如下:\",\"1.客户端/服务器端需要使用的内存就越多\",\"服务端在很多组件中都维护了分区级别的缓存，分区数越大，缓存成本也就越大。 消费端的消费线程数是和分区数挂钩的，分区数越大消费线程数也就越多，线程的开销成本也就越大 生产者发送消息有缓存的概念，会为每个分区缓存消息，当积累到一定程度或者时间时会将消息发送到分区，分区越多，这部分的缓存也就越大\",\"2.文件句柄的开销\",\"每个 partition 都会对应磁盘文件系统的一个目录。在 Kafka 的数据日志文件目录中，每个日志数据段都会分配两个文件，一个索引文件和一个数据文件。每个 broker 会为每个日志段文件打开一个 index 文件句柄和一个数据文件句柄。因此，随着 partition 的增多，所需要保持打开状态的文件句柄数也就越多，最终可能超过底层操作系统配置的文件句柄数量限制。\",\"3.越多的分区可能增加端对端的延迟\",\"Kafka 会将分区 HW 之前的消息暴露给消费者。分区越多则副本之间的同步数量就越多，在默认情况下，每个 broker 从其他 broker 节点进行数据副本复制时，该 broker 节点只会为此工作分配一个线程，该线程需要完成该 broker 所有 partition 数据的复制。\",\"4.降低高可用性\",\"在第 7 问我们提到了分区再分配，会将数据复制到另一份副本当中，分区数量越多，那么恢复时间也就越长，而如果发生宕机的 broker 恰好是 controller 节点时：在这种情况下，新 leader 节点的选举过程在 controller 节点恢复到新的 broker 之前不会启动。controller 节点的错误恢复将会自动地进行，但是新的 controller 节点需要从 zookeeper 中读取每一个 partition 的元数据信息用于初始化数据。例如，假设一个Kafka 集群存在 10000个partition，从 zookeeper 中恢复元数据时每个 partition 大约花费 2 ms，则 controller 的恢复将会增加约 20 秒的不可用时间窗口。\"]},\"1312\":{\"h\":\"10. kafka 为什么这么快？\",\"t\":[\"1.顺序读写磁盘分为顺序读写与随机读写，基于磁盘的随机读写确实很慢，但磁盘的顺序读写性能却很高，kafka 这里采用的就是顺序读写。\",\"2.Page Cache为了优化读写性能，Kafka 利用了操作系统本身的 Page Cache，就是利用操作系统自身的内存而不是JVM空间内存。\",\"3.零拷贝Kafka使用了零拷贝技术，也就是直接将数据从内核空间的读缓冲区直接拷贝到内核空间的 socket 缓冲区，然后再写入到 NIC 缓冲区，避免了在内核空间和用户空间之间穿梭。\",\"4.分区分段+索引Kafka 的 message 是按 topic分 类存储的，topic 中的数据又是按照一个一个的 partition 即分区存储到不同 broker 节点。每个 partition 对应了操作系统上的一个文件夹，partition 实际上又是按照segment分段存储的。通过这种分区分段的设计，Kafka 的 message 消息实际上是分布式存储在一个一个小的 segment 中的，每次文件操作也是直接操作的 segment。为了进一步的查询优化，Kafka 又默认为分段后的数据文件建立了索引文件，就是文件系统上的.index文件。这种分区分段+索引的设计，不仅提升了数据读取的效率，同时也提高了数据操作的并行度。\",\"5.批量读写Kafka 数据读写也是批量的而不是单条的,这样可以避免在网络上频繁传输单个消息带来的延迟和带宽开销。假设网络带宽为10MB/S，一次性传输10MB的消息比传输1KB的消息10000万次显然要快得多。\",\"6.批量压缩Kafka 把所有的消息都变成一个批量的文件，并且进行合理的批量压缩，减少网络 IO 损耗，通过 mmap 提高 I/O 速度，写入数据的时候由于单个Partion是末尾添加所以速度最优；读取数据的时候配合 sendfile 进行直接读取。\",\"低谷蓄力\"]},\"1313\":{\"h\":\"MyBatis\"},\"1314\":{\"h\":\"1. 什么是MyBatis\",\"t\":[\"这个问题主要是对比JDBC来看\",\"MyBatis是一个ORM（对象关系映射）框架，它内部封装了JDBC,开发时只需要关注SQL语句本身，不需要花费精力去处理加载驱动，创建连接，创建statement等复杂的过程。开发人员不需要编写原生态sql，可以严格控制sql执行性能，灵活度高。\",\"MyBatis可以使用xml或者注解来配置映射原生信息，将POJO映射成数据库中的记录，避免了几乎所有的JDBC代码和手动设置的参数以及获取结果集。\"]},\"1315\":{\"h\":\"2. MyBatis的优点\",\"t\":[\"基于SQL语句编程，相对灵活（相对于hibernate），支持写动态sql语句并可重复使用。\",\"减少代码量，消除了冗余代码。（类似于JDBC的封装）\",\"与Spring完美集成。\",\"提供映射标签支持字段关系映射。\"]},\"1316\":{\"h\":\"3. #{}和${}的区别是什么？\",\"t\":[\"#{}预编译处理、是占位符，${}是字符串替换、是拼接符。\",\"使用#{}可以有效的防止sql注入，提高系统的安全性。\",\"Mybatis在处理 #{} 的时候会将sql中的 #{} 替换成？号，调用PreparedStatement来赋值\",\"/* SQL */ 如：select * from user where name = #{userName}；设userName=javapub 看日志我们可以看到解析时将#{userName}替换成了 ？ select * from user where name = ?; 然后再把 javapub 放进去，外面加上单引号\",\"Mybatis在处理 ${} 的时候就是把 ${} 替换成变量的值，调用Statement来赋值\",\"/* SQL */ 如：select * from user where name = #{userName}；设userName=javapub 看日志可以发现就是直接把值拼接上去了 select * from user where name = javapub; 这极有可能发生sql注入，下面举了一个简单的sql注入案例\"]},\"1317\":{\"h\":\"4. 一个 Xml 映射文件，都会写一个 Dao 接口与之对应，这个 Dao 接口的工作原理是什么?\",\"t\":[\"Dao 接口就是人们常说的 Mapper 接口，接口的全限名，就是映射文件中的 namespace 的值，接口的方法名就是映射文件中 MappedStatement 的 id 值，接口方法内的参数就是传递给 sql 的参数。\",\"接口里的方法是不能重载的，因为是全限名+方法名的保存和寻找策略。\",\"Dao接口的工作原理是JDK动态代理，Mybatis运行时会使用JDK动态代理为Dao接口生成代理proxy对象，代理对象proxy会拦截接口方法，转而执行接口方法所对应的MappedStatement所代表的sql，然后将sql执行结果返回。\",\"MappedStatement：MappedStatement维护了一条 <select|update|delete|insert>节点的封装,包括了传入参数映射配置、执行的SQL语句、结果映射配置等信息。\",\"<select id=\\\"selectAuthorLinkedHashMap\\\" resultType=\\\"java.util.LinkedHashMap\\\"> select id, username from author where id = #{value} </select>\"]},\"1318\":{\"h\":\"5. 如何获取自动生成的(主)键值?\",\"t\":[\"用法：\",\"在 <insert /> 标签中添加 useGeneratedKeys=\\\"true\\\" 等属性\",\"<insert id=\\\"insert\\\" useGeneratedKeys=\\\"true\\\" keyProperty=\\\"id\\\" keyColumn=\\\"id\\\" parameterType=\\\"person\\\" > INSERT INTO person(name, pswd) VALUE (#{name}, #{pswd}) </insert>\",\"当 Mybatis 解析 xml节点时，读到 insert 有配置时，会判断是否 有配置 useGeneratedKeys，如果有则会使用 Jdbc3KeyGenerator 作为sql回显，否则会以 NoKeyGenerator 作为主键回显。\",\"底层封装了JDBC获取自增主键，即当使用 prepareStatement 或者 Statement时候，可以通过 getGeneratedKeys 获取这条插入语句的自增而成的主键。例子\",\" Connection conn = DriverManager.getConnection(url, \\\"root\\\", \\\"123456\\\"); String[] columnNames = {\\\"id\\\", \\\"name\\\"}; PreparedStatement stmt = conn.prepareStatement(sql, columnNames); stmt.setString(1, \\\"jack wang\\\"); stmt.executeUpdate(); ResultSet rs = stmt.getGeneratedKeys(); int id = 0; if (rs.next()) { id = rs.getInt(1); System.out.println(\\\"----------\\\" + id); }\"]},\"1319\":{\"h\":\"6. Mybatis 动态 sql 有什么用？有哪些动态 sql？执行原理？\",\"t\":[\"Mybatis 动态 sql 可以让我们在 Xml 映射文件内，以标签的形式编写动态 sql，完成逻辑判断和动态拼接 sql 的功能。\",\"Mybatis 提供了9种动态sql标签： trim | where | set | foreach | if | choose | when | otherwise | bind。\",\"其执行原理为，使用 OGNL 从 sql 参数对象中计算表达式的值，根据表达式的值动态拼接 sql，以此来完成动态 sql 的功能。\",\"是不是有点懵，继续阅读：\",\"科普：\",\"OGNL 是 Object-Graph Navigation Language 的缩写，对象图导航语言。例如 #{} 语法。\",\"OGNL 作用是在对象和视图之间做数据的交互，可以存取对象的属性和调用对象的方法，通过表达式可以迭代出整个对象的结构图。\",\"参考一个很形象的例子。\",\"有一个学生对象 student，属性分别有 id = 10，name = '小明' 和 课程对象 course，其中 course 对象中属性有：分数 score = 88，排名 rank = 5。\",\"对象关系图如下：\",\"student id：10 name：小明 course： score：88 rank：5\",\"当上下文（环境）中的对象为 student 的时候，也就是在 Mybatis 中查询时传入的参数对象为 student 的时候：\",\"通过 OGNL 表达式直接获取上下文中对象的属性值，比如：\",\"#{id} —> 10，相对于当前上下文对象.getId()，即 student.getId() 。\",\"#{name} —> 小明。\",\"#{course.score} —> 88，相当于 student.getCourse().getScore()。\",\"所以，通过 OGNL 表达式，可以迭代出整个对象的结构图。\",\"发布 《最少必要面试题》\"]},\"1320\":{\"h\":\"7. 什么是Mybatis的一级、二级缓存?\",\"t\":[\"一级缓存: 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为 Session，当 Session flush 或 close 之后，该 Session 中的所有 Cache 就将清空，默认一级缓存是开启的。\",\"当Mybaits与Spring整合的时候，不带Spring事务的方法内，每次请求数据库，都会新建一个SqlSession，这时候是使用不到一级缓存的。除了事务问题，还有调用了Sqlsession的修改、添加、删除、commit()、close()等方法时，一级缓存也会被清空。\",\"二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap 存储，不同在于其存储作用域为 Mapper(Namespace)。即使开启了二级缓存，不同的sqlsession之间的缓存数据也不是想互访就能互访的，必须等到sqlsession关闭了以后，才会把其一级缓存中的数据写入二级缓存。默认不打开二级缓存。\",\"现在大多数应用都是支持分布式的，一般情况都是用中间件作为缓存层，比如redis。开启 MyBatis 的二级缓存也会多一步序列化和反序列化，影响服务性能。\"]},\"1321\":{\"h\":\"8. MyBatis的工作原理\",\"t\":[\"一图胜千文\",\"来源网络\",\"读取 MyBatis 配置文件：mybatis-config.xml 为 MyBatis 的全局配置文件，配置了 MyBatis 的运行环境等信息，例如数据库连接信息。\",\"加载映射文件。映射文件即 SQL 映射文件，该文件中配置了操作数据库的 SQL 语句，需要在 MyBatis 配置文件 mybatis-config.xml 中加载。mybatis-config.xml 文件可以加载多个映射文件，每个文件对应数据库中的一张表。\",\"构造会话工厂：通过 MyBatis 的环境等配置信息构建会话工厂 SqlSessionFactory。\",\"创建会话对象：由会话工厂创建 SqlSession 对象，该对象中包含了执行 SQL 语句的所有方法。\",\"Executor 执行器：MyBatis 底层定义了一个 Executor 接口来操作数据库，它将根据 SqlSession 传递的参数动态地生成需要执行的 SQL 语句，同时负责查询缓存的维护。\",\"MappedStatement 对象：在 Executor 接口的执行方法中有一个 MappedStatement 类型的参数，该参数是对映射信息的封装，用于存储要映射的 SQL 语句的 id、参数等信息。\",\"输入参数映射：输入参数类型可以是 Map、List 等集合类型，也可以是基本数据类型和 POJO 类型。输入参数映射过程类似于 JDBC 对 preparedStatement 对象设置参数的过程。\",\"输出结果映射：输出结果类型可以是 Map、 List 等集合类型，也可以是基本数据类型和 POJO 类型。输出结果映射过程类似于 JDBC 对结果集的解析过程。\"]},\"1322\":{\"h\":\"9. 什么是MyBatis的接口绑定？有哪些实现方式？\",\"t\":[\"接口绑定，就是在 MyBatis 中任意定义接口，然后把接口里面的方法和SQL语句绑定，我们直接调用接口方法就可以，这样比起原来的SqlSession提供的方法我们可以有更加灵活的选择和设置。\",\"接口绑定有两种实现方式：\",\"通过注解绑定，就是在接口的方法上面加上 @Select、@Update 等注解，里面包含Sql语句来绑定；\",\"通过xml里面写SQL来绑定， 在这种情况下，要指定xml映射文件里面的 namespace 必须为接口的全路径名。当Sql语句比较简单时候，用注解绑定， 当SQL语句比较复杂时候，用xml绑定，一般用xml绑定的比较多。\"]},\"1323\":{\"h\":\"10. Mybatis的分页原理\",\"t\":[\"Mybatis 使用 RowBounds 对象进行分页，它是针对ResultSet结果集执行的内存分页，而非物理分页，所以一般不会使用。可以在sql内直接书写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页。\",\"分页插件的原理就是使用 MyBatis 提供的插件接口，实现自定义插件，在插件的拦截方法内，拦截待执行的SQL，然后根据设置的 dialect（方言），和设置的分页参数，重写SQL ，生成带有分页语句的SQL，执行重写后的SQL，从而实现分页。\",\"举例：select * from student，拦截sql后重写为：select t.* from （select * from student）t limit 0，10。\"]},\"1324\":{\"h\":\"MySQL\",\"t\":[\"推荐一篇非常不错的文章，阅读后更有利于了解MySQL【B树和B+树的区别】： https://mp.weixin.qq.com/s/RWkc2lNarKnn8Dc0HrP58g\"]},\"1325\":{\"h\":\"1. mysql有哪几种log\",\"t\":[\"重做日志(redo log)、回滚日志(undo log)、二进制日志(binlog)、错误日志(errorlog)、慢查询日志(slow query log)、一般查询日志(general log)，中继日志(relay log)\",\"错误日志：记录出错信息，也记录一些警告信息或者正确的信息。\",\"查询日志：记录所有对数据库请求的信息，不论这些请求是否得到了正确的执行。\",\"慢查询日志：设置一个阈值，将运行时间超过该值的所有SQL语句都记录到慢查询的日志文件中。\",\"二进制日志：记录对数据库执行更改的所有操作。\",\"中继日志：中继日志也是二进制日志，用来给slave 库恢复\",\"事务日志：重做日志redo和回滚日志undo\"]},\"1326\":{\"h\":\"2. MySQL的复制原理以及流程\",\"t\":[\"主：binlog线程——记录下所有改变了数据库数据的语句，放进master上的binlog中。\",\"从：io线程——在使用start slave 之后，负责从master上拉取 binlog 内容，放进 自己的relay log中。\",\"从：sql执行线程——执行relay log中的语句。\"]},\"1327\":{\"h\":\"3. 事物的4种隔离级别\",\"t\":[\"隔离强度逐渐增强，性能逐渐变差。\",\"读未提交(RU) READ UNCOMMITTED\",\"读已提交(RC) READ COMMITT\",\"可重复读(RR) REPEATABLE READ\",\"串行化 SERIALIZABLE\",\"事务具有原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）四个特性，简称 ACID，缺一不可。\"]},\"1328\":{\"h\":\"4. 相关概念\",\"t\":[\"脏读\",\"脏读指的是读到了其他事务未提交的数据，未提交意味着这些数据可能会回滚，也就是可能最终不会存到数据库中，也就是不存在的数据。读到了并一定最终存在的数据，这就是脏读。\",\"可重复读\",\"可重复读指的是在一个事务内，最开始读到的数据和事务结束前的任意时刻读到的同一批数据都是一致的。通常针对数据更新（UPDATE）操作。\",\"不可重复读\",\"对比可重复读，不可重复读指的是在同一事务内，不同的时刻读到的同一批数据可能是不一样的，可能会受到其他事务的影响，比如其他事务改了这批数据并提交了。通常针对数据更新（UPDATE）操作。\",\"幻读\",\"幻读是针对数据插入（INSERT）操作来说的。假设事务 A 对某些行的内容作了更改，但是还未提交，此时事务 B 插入了与事务 A 更改前的记录相同的记录行，并且在事务 A 提交之前先提交了，而这时，在事务 A 中查询，会发现好像刚刚的更改对于某些数据未起作用，但其实是事务 B 刚插入进来的，让用户感觉很魔幻，感觉出现了幻觉，这就叫幻读。\"]},\"1329\":{\"h\":\"5. MySQL数据库几个基本的索引类型\",\"t\":[\"普通索引、唯一索引、主键索引、全文索引\"]},\"1330\":{\"h\":\"6. drop、delete与truncate的区\",\"t\":[\"SQL中的drop、delete、truncate都表示删除，但是三者有一些差别\",\"1、delete和truncate只删除表的数据不删除表的结构 2、速度,一般来说: drop> truncate >delete 3、delete语句是dml,这个操作会放到rollback segement中,事务提交之后才生效; 4、如果有相应的trigger,执行的时候将被触发. truncate,drop是ddl, 操作立即生效,原数据不放到rollback segment中,不能回滚. 操作不触发trigger.\"]},\"1331\":{\"h\":\"7. 数据库的乐观锁和悲观锁是什么？\",\"t\":[\"悲观锁的特点是先获取锁，再进行业务操作，即 “悲观” 的认为获取锁是非常有可能失败的，因此要先确保获取锁成功再进行业务操作。通常所说的 “一锁二查三更新” 即指的是使用悲观锁。\",\"通常来讲在数据库上的悲观锁需要数据库本身提供支持，即通过常用的 select … for update 操作来实现悲观锁。 当数据库执行 select for update 时会获取被 select 中的数据行的行锁，因此其他并发执行的 select for update 如果试图选中同一行则会发生排斥（需要等待行锁被释放），因此达到锁的效果。select for update 获取的行锁会在当前事务结束时自动释放，因此必须在事务中使用。\",\"mysql 还有个问题是 select… for update 语句执行中，如果数据表没有添加索引或主键，所有扫描过的行都会被锁上，这一点很容易造成问题。因此如果在 mysql 中用悲观锁务必要确定走了索引，而不是全表扫描。\",\"乐观锁的特点先进行业务操作，不到万不得已不去拿锁。即“乐观”的认为拿锁多半是会成功的，因此在进行完业务操作需要实际更新数据的最后一步再去拿一下锁就好。\",\"乐观锁在数据库上的实现完全是逻辑的，不需要数据库提供特殊的支持。一般的做法是在需要锁的数据上增加一个版本号，或者时间戳。\",\"乐观锁的两种实现方式：\",\"使用数据版本（Version）记录机制实现，这是乐观锁最常用的一种实现方式。何谓数据版本？即为数据增加一个版本标识，一般是通过为数据库表增加一个数字类型的 “version” 字段来实现。当读取数据时，将 version 字段的值一同读出，数据每更新一次，对此 version 值加一。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的 version 值进行比对，如果数据库表当前版本号与第一次取出来的 version 值相等，则予以更新，否则认为是过期数据。\",\"乐观锁定的第二种实现方式和第一种差不多，同样是在需要乐观锁控制的table中增加一个字段，名称无所谓，字段类型使用时间戳（timestamp）,和上面的 version 类似，也是在更新提交的时候检查当前数据库中数据的时间戳和自己更新前取到的时间戳进行对比，如果一致则 OK，否则就是版本冲突。\"]},\"1332\":{\"h\":\"8. SQL优化方式\",\"t\":[\"对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。\",\"应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如果索引是整形，那么可以在索引上设置默认值 0，确保表中列没有 null 值。\",\"应尽量避免在 where 子句中使用 != 或 <> 操作符，否则将引擎放弃使用索引而进行全表扫描。\",\"应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描。\",\"in 和 not in 也要慎用，否则会导致全表扫描。\",\"like ‘%abc%’ 也会导致全表扫描。\",\"应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。\",\"应尽量避免在 where 子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。\",\"在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。\",\"很多时候用 exists 代替 in 是一个好的选择。\"]},\"1333\":{\"h\":\"9. 从锁的类别上分MySQL都有哪些锁呢？\",\"t\":[\"从锁的类别上来讲，有共享锁和排他锁。\",\"共享锁: 又叫做读锁。 当用户要进行数据的读取时，对数据加上共享锁。共享锁可以同时加上多个。\",\"排他锁: 又叫做写锁。 当用户要进行数据的写入时，对数据加上排他锁。排他锁只可以加一个，他和其他的排他锁，共享锁都相斥。\",\"参考：\",\"1. https://haicoder.net/note/mysql-interview/mysql-interview-optimistic-pessimism-lock.html\"]},\"1334\":{\"h\":\"Redis\"},\"1335\":{\"h\":\"1. Redis是什么？\",\"t\":[\"一般问这个问题你最少要答出以下几点\",\"Redis 是一个基于内存的 key-value 存储系统，数据结构包括字符串、list、set、zset（sorted set --有序集合）和hash，bitmap，GeoHash(坐标)，HyperLogLog，Streams（5.x版本以后）\"]},\"1336\":{\"h\":\"2. 你在哪些场景使用redis\",\"t\":[\"你有实战经验，那就直接表演。如果没有，选几个下面的经典场景\",\"作为队列使用，（因为是基于内存、一般不会作为消费队列、作为循环队列必要适用）；\",\"模拟类似于token这种需要设置过期时间的场景，登录失效；\",\"分布式缓存，避免大量请求底层关系型数据库，大大降低数据库压力；\",\"分布式锁；\",\"基于 bitmap 实现布隆过滤器；\",\"排行榜-基于zset（有序集合数据类型）；\",\"计数器-对于浏览量、播放量等并发较高，使用 redis incr 实现计数器功能；\",\"分布式会话；\",\"消息系统；\"]},\"1337\":{\"h\":\"3. 为什么Redis是单线程的?\",\"t\":[\"这个问题给一个官方答案\",\"因为Redis是基于内存的操作，CPU不是Redis的瓶颈，Redis的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地采用单线程的方案了。\"]},\"1338\":{\"h\":\"4. Redis持久化有几种方式？\",\"t\":[\"redis 提供了两种持久化的方式，分别是快照方式（RDB Redis DataBase）和文件追加（AOF Append Only File）。\",\"显而易见，快照方式重启恢复快、但是数据更容易丢失，文件追加数据更完整、重启恢复慢。\",\"混合持久化方式，Redis 4.0之后新增的方式，混合持久化是结合RDB和AOF的优点，在写入的时候先把当前的数据以RDB的形式写入到文件的开头，再将后续的操作以AOF的格式存入文件当中，这样既能保证重启时的速度，又能降低数据丢失的风险。\",\"在恢复时，先恢复快照方式保存的文件，然后再恢复追加文件中的增量数据。\"]},\"1339\":{\"h\":\"5. 什么是缓存穿透？怎么解决？\",\"t\":[\"缓存穿透是指用户请求的数据在缓存中不存在即没有命中，同时在数据库中也不存在，导致用户每次请求该数据都要去数据库中查询一遍，然后返回空。\",\"如果有恶意攻击者不断请求系统中不存在的数据，会导致短时间大量请求落在数据库上，造成数据库压力过大，甚至击垮数据库系统。\",\"这就叫做缓存穿透。\",\"怎么解决？\",\"对查询结果为空的情况也进行缓存，缓存时间设置短一点，或者该key对应的数据insert之后清理缓存。\",\"对一定不存在的key进行过滤。可以把所有的可能存在的key放到一个大的Bitmap中，查询时通过该Bitmap过滤。(也就是布隆过滤器的原理：大白话讲解布隆过滤器)\"]},\"1340\":{\"h\":\"6. 什么是缓存雪崩?\",\"t\":[\"缓存雪崩是指缓存中数据大批量到过期时间，而查询数据量巨大，请求直接落到数据库上，引起数据库压力过大甚至宕机。和缓存击穿不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。\",\"怎么解决？\",\"常用的解决方案有：\",\"均匀过期\",\"加互斥锁\",\"缓存永不过期\",\"双层缓存策略\",\"均匀过期：设置不同的过期时间，让缓存失效的时间点尽量均匀。通常可以为有效期增加随机值或者统一规划有效期。\",\"加互斥锁：跟缓存击穿解决思路一致，同一时间只让一个线程构建缓存，其他线程阻塞排队。\",\"缓存永不过期：跟缓存击穿解决思路一致，缓存在物理上永远不过期，用一个异步的线程更新缓存。\",\"双层缓存策略：使用主备两层缓存：\",\"主缓存：有效期按照经验值设置，设置为主读取的缓存，主缓存失效后从数据库加载最新值。\",\"备份缓存：有效期长，获取锁失败时读取的缓存，主缓存更新时需要同步更新备份缓存。\"]},\"1341\":{\"h\":\"7. Redis使用上如何做内存优化？\",\"t\":[\"缩短键值的长度\",\"缩短值的长度才是关键，如果值是一个大的业务对象，可以将对象序列化成二进制数组；\",\"首先应该在业务上进行精简，去掉不必要的属性，避免存储一些没用的数据；\",\"其次是序列化的工具选择上，应该选择更高效的序列化工具来降低字节数组大小；\",\"以JAVA为例，内置的序列化方式无论从速度还是压缩比都不尽如人意，这时可以选择更高效的序列化工具，如: protostuff，kryo等\",\"共享对象池\",\"对象共享池指Redis内部维护[0-9999]的整数对象池。创建大量的整数类型redisObject存在内存开销，每个redisObject内部结构至少占16字节，甚至超过了整数自身空间消耗。所以Redis内存维护一个[0-9999]的整数对象池，用于节约内存。 除了整数值对象，其他类型如list,hash,set,zset内部元素也可以使用整数对象池。因此开发中在满足需求的前提下，尽量使用整数对象以节省内存。\",\"字符串优化\",\"因为redis的惰性删除机制，字符串缩减后的空间不释放，作为预分配空间保留。尽量做新增不做更新。\",\"编码优化\",\"所谓编码就是具体使用哪种底层数据结构来实现。编码不同将直接影响数据的内存占用和读写效率。\",\"这个需要掌握redis底层的数据结构。下图作为参考：\",\"image\",\"控制key的数量\"]},\"1342\":{\"h\":\"8. 你们redis使用哪种部署方式？\",\"t\":[\"redis部署分为单节点、主从部署（master-slave）、哨兵部署（Sentinel）、集群部署（cluster）。\",\"单节点：也就是单机部署；\",\"主从部署：分为一主一从或一主多从，主从之间同步分为全量或增量。量同步：master 节点通过 BGSAVE 生成对应的RDB文件，然后发送给slave节点，slave节点接收到写入命令后将master发送过来的文件加载并写入；增量同步：即在 master-slave 关系建立开始，master每执行一次数据变更的命令就会同步至slave节点。一般会将写请求转发到master，读请求转发到slave。提高了redis的性能。\",\"哨兵部署：分别有哨兵集群与Redis的主从集群，哨兵作为操作系统中的一个监控进程，对应监控每一个Redis实例，如果master服务异常（ping pong其中节点没有回复且超过了一定时间），就会多个哨兵之间进行确认，如果超过一半确认服务异常，则对master服务进行下线处理，并且选举出当前一个slave节点来转换成master节点；如果slave节点服务异常，也是经过多个哨兵确认后，进行下线处理。提高了redis集群高可用的特性，及横向扩展能力的增强。\",\"image\",\"集群部署：属于**“去中心化”**的一种方式，多个 master 节点保存整个集群中的全部数据，而数据根据 key 进行 crc-16 校验算法进行散列，将 key 散列成对应 16383 个 slot，而 Redis cluster 集群中每个 master 节点负责不同的slot范围。每个 master 节点下还可以配置多个 slave 节点，同时也可以在集群中再使用 sentinel 哨兵提升整个集群的高可用性。\",\"image\"]},\"1343\":{\"h\":\"9. redis实现分布式锁要注意什么？\",\"t\":[\"加锁过程要保证原子性；\",\"保证谁加的锁只能被谁解锁，即Redis加锁的value，解锁时需要传入相同的value才能成功，保证value唯一性；\",\"设置锁超时时间，防止加锁方异常无法释放锁时其他客户端无法获取锁，同时，超时时间要大于业务处理时间；\",\"使用Redis命令 SET lock_key unique_value NX EX seconds 进行加锁，单命令操作，Redis是串行执行命令，所以能保证只有一个能加锁成功。\"]},\"1344\":{\"h\":\"Spring\"},\"1345\":{\"h\":\"1. 什么是 Spring 框架？Spring 框架有哪些主要模块？\",\"t\":[\"Spring是针对bean的生命周期进行管理的轻量级容器，一个控制反转和面向切面的容器框架\",\"Spring有七大功能模块：\",\"1、Core\",\"Core模块是Spring的核心类库，Core实现了IOC功能。\",\"2、AOP\",\"Apring AOP模块是Spring的AOP库，提供了AOP（拦截器）机制，并提供常见的拦截器，供用户自定义和配置。\",\"3、orm\",\"提供对常用ORM框架的管理和支持，hibernate、mybatis等。\",\"4、Dao\",\"Spring提供对JDBC的支持，对JDBC进行封装。\",\"5、Web\",\"对Struts2的支持。\",\"6、Context\",\"Context模块提供框架式的Bean的访问方式，其它程序可以通过Context访问Spring的Bean资源，相当于资源注入。\",\"7、MVC\",\"MVC模块为spring提供了一套轻量级的MVC实现，即Spring MVC。\"]},\"1346\":{\"h\":\"2. Spring IOC、AOP举例说明\",\"t\":[\"这是一个基础问题，如果理解有难度、建议先读五遍。\",\"1、IOC理论的背景\",\"我们都知道，在采用面向对象方法设计的软件系统中，它的底层实现都是由N个对象组成的，所有的对象通过彼此的合作，最终实现系统的业务逻辑。\",\"图1：软件系统中耦合的对象\",\"如果我们打开机械式手表的后盖，就会看到与上面类似的情形，各个齿轮分别带动时针、分针和秒 针顺时针旋转，从而在表盘上产生正确的时间。图1中描述的就是这样的一个齿轮组，它拥有多个独立的齿轮，这些齿轮相互啮合在一起，协同工作，共同完成某项 任务。我们可以看到，在这样的齿轮组中，如果有一个齿轮出了问题，就可能会影响到整个齿轮组的正常运转。 齿轮组中齿轮之间的啮合关系,与软件系统中对象之间的耦合关系非常相似。对象之间的耦合关系是无法避免的，也是必要的，这是协同工作的基础。现在，伴随着 工业级应用的规模越来越庞大，对象之间的依赖关系也越来越复杂，经常会出现对象之间的多重依赖性关系，因此，架构师和设计师对于系统的分析和设计，将面临 更大的挑战。对象之间耦合度过高的系统，必然会出现牵一发而动全身的情形。\",\"图2：对象之间复杂的依赖关系\",\"耦合关系不仅会出现在对象与对象之间，也会出现在软件系统的各模块之间，以及软件系统和硬件系统之间。如何降低系统之间、模块之间和对象之间的耦合度，是软件工程永远追求的目标之一。为了解决对象之间的耦合度过高的问题，软件专家Michael Mattson提出了IOC理论，用来实现对象之间的“解耦”，目前这个理论已经被成功地应用到实践当中，很多的J2EE项目均采用了IOC框架产品Spring。\",\"2、什么是控制反转(IoC)\",\"IOC是Inversion of Control的缩写，多数书籍翻译成“控制反转”，还有些书籍翻译成为“控制反向”或者“控制倒置”。 1996年，Michael Mattson在一篇有关探讨面向对象框架的文章中，首先提出了IOC 这个概念。对于面向对象设计及编程的基本思想，前面我们已经讲了很多了，不再赘述，简单来说就是把复杂系统分解成相互合作的对象，这些对象类通过封装以 后，内部实现对外部是透明的，从而降低了解决问题的复杂度，而且可以灵活地被重用和扩展。IOC理论提出的观点大体是这样的：借助于“第三方”实现具有依 赖关系的对象之间的解耦，如下图：\",\"图3：IOC解耦过程\",\"大家看到了吧，由于引进了中间位置的“第三方”，也就是IOC容器，使得A、B、C、D这4个对象没有了耦合关系，齿轮之间的传动全部依靠“第三 方”了，全部对象的控制权全部上缴给“第三方”IOC容器，所以，IOC容器成了整个系统的关键核心，它起到了一种类似“粘合剂”的作用，把系统中的所有 对象粘合在一起发挥作用，如果没有这个“粘合剂”，对象与对象之间会彼此失去联系，这就是有人把IOC容器比喻成“粘合剂”的由来。 我们再来做个试验：把上图中间的IOC容器拿掉，然后再来看看这套系统：\",\"图4：拿掉IoC容器后的系统\",\"我们现在看到的画面，就是我们要实现整个系统所需要完成的全部内容。这时候，A、B、C、D这4个对象之间已经没有了耦合关系，彼此毫无联系，这样 的话，当你在实现A的时候，根本无须再去考虑B、C和D了，对象之间的依赖关系已经降低到了最低程度。所以，如果真能实现IOC容器，对于系统开发而言， 这将是一件多么美好的事情，参与开发的每一成员只要实现自己的类就可以了，跟别人没有任何关系！ 我们再来看看，控制反转(IOC)到底为什么要起这么个名字？我们来对比一下： 软件系统在没有引入IOC容器之前，如图1所示，对象A依赖于对象B，那么对象A在初始化或者运行到某一点的时候，自己必须主动去创建对象B或者使用已经创建的对象B。无论是创建还是使用对象B，控制权都在自己手上。 软件系统在引入IOC容器之后，这种情形就完全改变了，如图3所示，由于IOC容器的加入，对象A与对象B之间失去了直接联系，所以，当对象A运行到需要对象B的时候，IOC容器会主动创建一个对象B注入到对象A需要的地方。 通过前后的对比，我们不难看出来：对象A获得依赖对象B的过程,由主动行为变为了被动行为，控制权颠倒过来了，这就是“控制反转”这个名称的由来。\",\"参考资料：https://www.cnblogs.com/jianmang/articles/4947615.html\"]},\"1347\":{\"h\":\"3. 什么是控制反转(IOC)？什么是依赖注入（DI）？\",\"t\":[\"IoC(Inversion of Control) – 控制反转。它不是一种技术，而是一种思想。\",\"IOC：就是对象之间的依赖关系由容器来创建，对象之间的关系本来是由我们开发者自己创建和维护的，在我们使用Spring框架后，对象之间的关系由容器来创建和维护，将开发者做的事让容器做，这就是控制反转。BeanFactory接口是Spring Ioc容器的核心接口。\",\"DI：我们在使用Spring容器的时候，容器通过调用set方法或者是构造器来建立对象之间的依赖关系。 控制反转是目标，依赖注入是我们实现控制反转的一种手段。\"]},\"1348\":{\"h\":\"4. 描述一下 Spring Bean 的生命周期？\",\"t\":[\"这道题是spring一道标准题目\",\"按照阶段理解Spring中的bean的生命周期主要包含四个阶段：实例化Bean --＞ Bean属性填充 --＞ 初始化Bean --＞销毁Bean\",\"Spring Bean 的生命周期\",\"Spring中的bean的生命周期主要包含四个阶段：实例化Bean --＞ Bean属性填充 --＞ 初始化Bean --＞销毁Bean\",\"首先是实例化Bean，当客户向容器请求一个尚未初始化的bean时，或初始化bean的时候需要注入另一个尚末初始化的依赖时，容器就会调用doCreateBean()方法进行实例化，实际上就是通过反射的方式创建出一个bean对象\",\"Bean实例创建出来后，接着就是给这个Bean对象进行属性填充，也就是注入这个Bean依赖的其它bean对象\",\"属性填充完成后，进行初始化Bean操作，初始化阶段又可以分为几个步骤：\",\"a. 执行Aware接口的方法\",\"Spring会检测该对象是否实现了xxxAware接口，通过Aware类型的接口，可以让我们拿到Spring容器的些资源。如实现BeanNameAware接口可以获取到BeanName，实现BeanFactoryAware接口可以获取到工厂对象BeanFactory等\",\"b. 执行BeanPostProcessor的前置处理方法postProcessBeforelnitialization()，对Bean进行一些自定义的前置处理\",\"c. 判断Bean是否实现了InitializingBean接口，如果实现了，将会执行lnitializingBean的afeterPropertiesSet()初始化方法；\",\"d. 执行用户自定义的初始化方法，如init-method等；\",\"e. 执行BeanPostProcessor的后置处理方法postProcessAfterinitialization()\",\"初始化完成后，Bean就成功创建了，之后就可以使用这个Bean， 当Bean不再需要时，会进行销毁操作，\",\"a. 首先判断Bean是否实现了DestructionAwareBeanPostProcessor接口，如果实现了，则会执行DestructionAwareBeanPostProcessor后置处理器的销毁回调方法 b. 其次会判断Bean是否实现了DisposableBean接口，如果实现了将会调用其实现的destroy()方法 c. 最后判断这个Bean是否配置了dlestroy-method等自定义的销毁方法，如果有的话，则会自动调用其配置的销毁方法；\"]},\"1349\":{\"h\":\"5. Spring Bean 的作用域之间有什么区别？\",\"t\":[\"Spring器中的bean可以分为5个范围：\",\"singleton：这种bean范围是默认的，这种范围确保不管接受多少请求，每个容器中只有一个bean的实例，单例模式；\",\"prototype：为每一个bean提供一个实例；\",\"request：在请求bean范围内为每一个来自客户端的网络请求创建一个实例，在请求完毕后，bean会失效并被垃圾回收器回收；\",\"session：为每个session创建一个实例，session过期后，bean会随之消失；\",\"global-session：global-session和Portlet应用相关。当你的应用部署在Portlet容器中工作时，它包含很多portlet。如果你想要声明让所有的portlet公用全局的存储变量的话，那么全局变量需要存储在global-session中。\"]},\"1350\":{\"h\":\"6. Spring中都应用了哪些设计模式\",\"t\":[\"1、简单工厂模式\",\"简单工厂模式的本质就是一个工厂类根据传入的参数，动态的决定实例化哪个类。\",\"Spring中的BeanFactory就是简单工厂模式的体现，根据传入一个唯一的标识来获得bean对象。\",\"2、工厂方法模式\",\"应用程序将对象的创建及初始化职责交给工厂对象，工厂Bean。\",\"定义工厂方法，然后通过config.xml配置文件，将其纳入Spring容器来管理，需要通过factory-method指定静态方法名称。\",\"3、单例模式\",\"Spring用的是双重判断加锁的单例模式，通过getSingleton方法从singletonObjects中获取bean。\",\" /** * Return the (raw) singleton object registered under the given name. * <p>Checks already instantiated singletons and also allows for an early * reference to a currently created singleton (resolving a circular reference). * @param beanName the name of the bean to look for * @param allowEarlyReference whether early references should be created or not * @return the registered singleton object, or {@code null} if none found */ protected Object getSingleton(String beanName, boolean allowEarlyReference) { Object singletonObject = this.singletonObjects.get(beanName); if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) { synchronized (this.singletonObjects) { singletonObject = this.earlySingletonObjects.get(beanName); if (singletonObject == null && allowEarlyReference) { ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName); if (singletonFactory != null) { singletonObject = singletonFactory.getObject(); this.earlySingletonObjects.put(beanName, singletonObject); this.singletonFactories.remove(beanName); } } } } return (singletonObject != NULL_OBJECT ? singletonObject : null); }\",\"4、代理模式\",\"Spring的AOP中，使用的Advice（通知）来增强被代理类的功能。Spring实现AOP功能的原理就是代理模式（① JDK动态代理，② CGLIB字节码生成技术代理。）对类进行方法级别的切面增强。\",\"5、装饰器模式\",\"装饰器模式：动态的给一个对象添加一些额外的功能。\",\"Spring的ApplicationContext中配置所有的DataSource。这些DataSource可能是不同的数据库，然后SessionFactory根据用户的每次请求，将DataSource设置成不同的数据源，以达到切换数据源的目的。\",\"在Spring中有两种表现：\",\"一种是类名中含有Wrapper，另一种是类名中含有Decorator。\",\"6、观察者模式\",\"定义对象间的一对多的关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动更新。\",\"Spring中观察者模式一般用在listener的实现。\",\"7、策略模式\",\"策略模式是行为性模式，调用不同的方法，适应行为的变化 ，强调父类的调用子类的特性 。\",\"getHandler是HandlerMapping接口中的唯一方法，用于根据请求找到匹配的处理器。\",\"8、模板方法模式\",\"Spring JdbcTemplate的query方法总体结构是一个模板方法+回调函数，query方法中调用的execute()是一个模板方法，而预期的回调doInStatement(Statement state)方法也是一个模板方法。\"]},\"1351\":{\"h\":\"7. Spring AOP里面的几个名词的概念\",\"t\":[\"（1）连接点（Join point）：指程序运行过程中所执行的方法。在Spring AOP中，一个连接点总代表一个方法的执行。\",\"（2）切面（Aspect）：被抽取出来的公共模块，可以用来会横切多个对象。Aspect切面可以看成 Pointcut切点 和 Advice通知 的结合，一个切面可以由多个切点和通知组成。\",\"在Spring AOP中，切面可以在类上使用 @AspectJ 注解来实现。\",\"（3）切点（Pointcut）：切点用于定义 要对哪些Join point进行拦截。\",\"切点分为execution方式和annotation方式。execution方式可以用路径表达式指定对哪些方法拦截，比如指定拦截add*、search*。annotation方式可以指定被哪些注解修饰的代码进行拦截。\",\"（4）通知（Advice）：指要在连接点（Join Point）上执行的动作，即增强的逻辑，比如权限校验和、日志记录等。通知有各种类型，包括Around、Before、After、After returning、After throwing。\",\"（5）目标对象（Target）：包含连接点的对象，也称作被通知（Advice）的对象。 由于Spring AOP是通过动态代理实现的，所以这个对象永远是一个代理对象。\",\"（6）织入（Weaving）：通过动态代理，在目标对象（Target）的方法（即连接点Join point）中执行增强逻辑（Advice）的过程。\",\"（7）引入（Introduction）：添加额外的方法或者字段到被通知的类。Spring允许引入新的接口（以及对应的实现）到任何被代理的对象。例如，你可以使用一个引入来使bean实现 IsModified 接口，以便简化缓存机制。\",\"几个概念的关系图可以参考下图：\",\"网上有张非常形象的图，描述了各个概念所处的场景和作用，贴在这里供大家理解：\"]},\"1352\":{\"h\":\"8. BeanFactory和ApplicationContext有什么区别？\",\"t\":[\"BeanFactory和ApplicationContext是Spring的两大核心接口，都可以当做Spring的容器。\",\"BeanFactory是Spring里面最底层的接口，是IoC的核心，定义了IoC的基本功能，包含了各种Bean的定义、加载、实例化，依赖注入和生命周期管理。ApplicationContext接口作为BeanFactory的子类，除了提供BeanFactory所具有的功能外，还提供了更完整的框架功能：\",\"继承MessageSource，因此支持国际化。\",\"资源文件访问，如URL和文件（ResourceLoader）。\",\"载入多个（有继承关系）上下文（即同时加载多个配置文件） ，使得每一个上下文都专注于一个特定的层次，比如应用的web层。\",\"提供在监听器中注册bean的事件。\",\"a. BeanFactroy采用的是延迟加载形式来注入Bean的，只有在使用到某个Bean时(调用getBean())，才对该Bean进行加载实例化。这样，我们就不能提前发现一些存在的Spring的配置问题。如果Bean的某一个属性没有注入，BeanFacotry加载后，直至第一次使用调用getBean方法才会抛出异常。\",\"b. ApplicationContext，它是在容器启动时，一次性创建了所有的Bean。这样，在容器启动时，我们就可以发现Spring中存在的配置错误，这样有利于检查所依赖属性是否注入。\",\"c. ApplicationContext启动后预载入所有的单实例Bean，所以在运行的时候速度比较快，因为它们已经创建好了。相对于BeanFactory，ApplicationContext 唯一的不足是占用内存空间，当应用程序配置Bean较多时，程序启动较慢。\",\"BeanFactory和ApplicationContext都支持BeanPostProcessor、BeanFactoryPostProcessor的使用，但两者之间的区别是：BeanFactory需要手动注册，而ApplicationContext则是自动注册。\",\"BeanFactory通常以编程的方式被创建，ApplicationContext还能以声明的方式创建，如使用ContextLoader。\"]},\"1353\":{\"h\":\"9. Spring如何解决循环依赖问题：\",\"t\":[\"见：https://javapub.blog.csdn.net/\",\"循环依赖问题在Spring中主要有三种情况：\",\"（1）通过构造方法进行依赖注入时产生的循环依赖问题。\",\"（2）通过setter方法进行依赖注入且是在多例（原型）模式下产生的循环依赖问题。\",\"（3）通过setter方法进行依赖注入且是在单例模式下产生的循环依赖问题。\",\"在Spring中，只有第（3）种方式的循环依赖问题被解决了，其他两种方式在遇到循环依赖问题时都会产生异常。这是因为：\",\"第一种构造方法注入的情况下，在new对象的时候就会堵塞住了，其实也就是”先有鸡还是先有蛋“的历史难题。\",\"第二种setter方法（多例）的情况下，每一次getBean()时，都会产生一个新的Bean，如此反复下去就会有无穷无尽的Bean产生了，最终就会导致OOM问题的出现。\",\"Spring在单例模式下的setter方法依赖注入引起的循环依赖问题，主要是通过二级缓存和三级缓存来解决的，其中三级缓存是主要功臣。解决的核心原理就是：在对象实例化之后，依赖注入之前，Spring提前暴露的Bean实例的引用在第三级缓存中进行存储。\",\"第一种构造方法注入的情况：\",\"例如：类A通过构造函数注入需要类B的实例，而类B通过构造函数注入需要类A的实例。如果将A类和B类的bean配置为相互注入，则Spring IoC容器会在运行时检测此循环引用，并抛出a BeanCurrentlyInCreationException。 一种可能的解决方案是编辑由setter而不是构造函数配置的某些类的源代码。或者，避免构造函数注入并仅使用setter注入。换句话说，尽管不推荐使用，但您可以使用setter注入配置循环依赖关系。 与典型情况（没有循环依赖）不同，bean A和bean B之间的循环依赖强制其中一个bean在完全初始化之前被注入另一个bean（经典的鸡与鸡蛋场景）。\",\" <bean id=\\\"person\\\" class=\\\"pojo.Person\\\"> <constructor-arg index=\\\"0\\\" value=\\\"小明\\\"/> <constructor-arg index=\\\"1\\\" value=\\\"12\\\"/> <constructor-arg index=\\\"2\\\" value=\\\"student\\\"/> </bean> <bean id=\\\"student\\\" class=\\\"pojo.Student\\\"> <constructor-arg index=\\\"0\\\" value=\\\"小王\\\"/> <constructor-arg index=\\\"1\\\" value=\\\"13\\\"/> <constructor-arg index=\\\"2\\\" value=\\\"person\\\"/> </bean>\"]},\"1354\":{\"h\":\"10. Spring事务的实现方式和实现原理：\",\"t\":[\"Spring事务的本质其实就是数据库对事务的支持，没有数据库的事务支持，spring是无法提供事务功能的。Spring只提供统一事务管理接口，具体实现都是由各数据库自己实现，数据库事务的提交和回滚是通过 redo log 和 undo log实现的。Spring会在事务开始时，根据当前环境中设置的隔离级别，调整数据库隔离级别，由此保持一致。\",\"1. Spring事务的种类：\",\"spring支持编程式事务管理和声明式事务管理两种方式：\",\"a. 编程式事务管理使用 TransactionTemplate。\",\"b. 声明式事务管理建立在AOP之上的。其本质是通过AOP功能，对方法前后进行拦截，将事务处理的功能编织到拦截的方法中，也就是在目标方法开始之前启动一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。\",\"声明式事务最大的优点就是不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中做相关的事务规则声明或通过@Transactional注解的方式，便可以将事务规则应用到业务逻辑中，减少业务代码的污染。唯一不足地方是，最细粒度只能作用到方法级别，无法做到像编程式事务那样可以作用到代码块级别。\",\"2. spring的事务传播机制：\",\"spring事务的传播机制说的是，当多个事务同时存在的时候，spring如何处理这些事务的行为。事务传播机制实际上是使用简单的ThreadLocal实现的，所以，如果调用的方法是在新线程调用的，事务传播实际上是会失效的。\",\"① PROPAGATION_REQUIRED：（默认传播行为）如果当前没有事务，就创建一个新事务；如果当前存在事务，就加入该事务。\",\"② PROPAGATION_REQUIRES_NEW：无论当前存不存在事务，都创建新事务进行执行。\",\"③ PROPAGATION_SUPPORTS：如果当前存在事务，就加入该事务；如果当前不存在事务，就以非事务执行。‘\",\"④ PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\",\"⑤ PROPAGATION_NESTED：如果当前存在事务，则在嵌套事务内执行；如果当前没有事务，则按REQUIRED属性执行。\",\"⑥ PROPAGATION_MANDATORY：如果当前存在事务，就加入该事务；如果当前不存在事务，就抛出异常。\",\"⑦ PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。\",\"事务不只限于脏读、幻读等名词。\",\"3. Spring中的隔离级别：\",\"① ISOLATION_DEFAULT：这是个 PlatfromTransactionManager 默认的隔离级别，使用数据库默认的事务隔离级别。\",\"② ISOLATION_READ_UNCOMMITTED：读未提交，允许事务在执行过程中，读取其他事务未提交的数据。\",\"③ ISOLATION_READ_COMMITTED：读已提交，允许事务在执行过程中，读取其他事务已经提交的数据。\",\"④ ISOLATION_REPEATABLE_READ：可重复读，在同一个事务内，任意时刻的查询结果都是一致的。\",\"⑤ ISOLATION_SERIALIZABLE：所有事务逐个依次执行。\",\"低谷蓄力\"]},\"1355\":{\"h\":\"SpringBoot\"},\"1356\":{\"h\":\"1. 为什么要用 spring boot？\",\"t\":[\"通过自动配置方式简化 Spring 应用的开发，弱化配置，遵循 约定大于配置的原则 ，使开发者专注于业务开发而无需过多考虑配置相关操作，通过启动类的 main 方法一键启动应用。\"]},\"1357\":{\"h\":\"2. spring boot 有哪些优点？\",\"t\":[\"独立运行。 内嵌了 servlet，tomat 等，不需要打成 war 包部署到容器中，只需要将 SpringBoot 项目打成jar包就能独立运行。\",\"简化配置。 启动器自动依赖其他组件，简少了 maven 的配置。各种常用组件及配置已经默认配置完成，无需过多干预。\",\"避免大量的 Maven 导入和各种版本冲突。\",\"应用监控。 Spring Boot 提供一系列端点可以监控服务及应用。\"]},\"1358\":{\"h\":\"3. spring boot 核心配置文件是什么？\",\"t\":[\"springboot 核心的两个配置文件：\",\"bootstrap (. yml 或者 . properties)：boostrap 由父 ApplicationContext 加载的， 比 applicaton 优先加载，配置在应用程序上下文的引导阶段生效，且 bootstrap 里面的属性不能被覆盖；一般来说我们在 SpringCloud Config 或者 Nacos 中会用到它。\",\"application (. yml 或者 . properties)：用于 springboot 项目的自动化配置\"]},\"1359\":{\"h\":\"4. spring boot的核心注解是什么？由那些注解组成？\",\"t\":[\"核心注解为：@SpringBootApplication\",\"该注解主要由三个注解组成：\",\"​ @SpringBootConfiguration():代表当前是一个配置类 ​ @EnableAutoConfiguration(): 启动自动配置 ​ @ComponentScan()：指定扫描哪些 Spring 注解\"]},\"1360\":{\"h\":\"5. 说一下springboot的自动装配原理\",\"t\":[\"SpringBoot启动的时候加载主配置类，开启了自动配置功能@EnableAutoConfiguration。\",\"查看@EnableAutoConfiguration，其作用是利用AutoConfigurationImportSelector给容器中导入一些组件。\",\"查看AutoConfigurationImportSelector，其中public String[] selectImports(AnnotationMetadata annotationMetadata)方法内 最终调用getCandidateConfigurations()方法\",\"查看 getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes)，获取候选的配置，这个是扫描所有jar包类路径下\\\"META-INF/spring.factories\\\"\",\"然后把扫描到的这些文件包装成Properties对象。\",\"从properties中获取到EnableAutoConfiguration.class类名对应的值，然后把他们添加在容器中。\",\"简而言之，整个过程就是将类路径下 \\\"META-INF/spring.factories\\\" 里面配置的所有 EnableAutoConfiguration 的值加入到容器中。\"]},\"1361\":{\"h\":\"6. SpringBoot、Spring MVC和Spring有什么区别？\",\"t\":[\"Spring：主要用来创建IOC容器，依赖注入，实现程序间的松耦合\",\"SpringMVC: 主要是用来做WEB开发，通过各种组件的协调配合，简化Web应用的开发\",\"SpringBoot: SpringBoot更像是一个管家，当使用到对应功能时，只需要导入指定应用启动器，SpringBoot就能够在底层默认其配置，大大简化了开发所需的繁杂配置\"]},\"1362\":{\"h\":\"7. SpringBoot启动时都做了什么?\",\"t\":[\"Springboot 的启动，主要创建了配置环境 (environment)、事件监听 (listeners)、应用上下文(applicationContext)，并基于以上条件，在容器中开始实例化我们需要的 Bean，至此，通过 SpringBoot 启动的程序已经构造完成。\"]},\"1363\":{\"h\":\"8. SpringBoot 中的监视器是什么？\",\"t\":[\"SpringBoot Actuator 是 SpringBoot 一项重要功能，其可以帮助我们查看应用的运行状态，对运行时指标进行检查和监控，监视器提供了一组可以直接作为 httpurl 访问的 rest 端点来访问查看指定功能状态。\"]},\"1364\":{\"h\":\"9. SpringBoot 中的starter到底是什么 ?\",\"t\":[\"首先，这个 Starter 并非什么新的技术点，基本上还是基于 Spring 已有功能来实现的。首先它提供了一个自动化配置类，一般命名为 XXXAutoConfiguration ，在这个配置类中通过条件注解来决定一个配置是否生效（条件注解就是 Spring 中原本就有的），然后它还会提供一系列的默认配置，也允许开发者根据实际情况自定义相关配置，然后通过类型安全的属性注入将这些配置属性注入进来，新注入的属性会代替掉默认属性。\",\"正因为如此，很多第三方框架，我们只需要引入依赖就可以直接使用了。当然，开发者也可以自定义 Starter\",\"拓展：如何自定义starter?\",\"创建项目，创建两个模块分别为 spring-boot-starter-*，spring-boot-starter-*-autoconfiguration\",\"spring-boot-starter-* pom 引入 spring-boot-starter-*-autoconfiguration\",\"spring-boot-starter-*-autoconfiguration 创建功能方法，创建 *properties类，创建一个配置类将功能方法类添加到 spring 容器，在 resouces 下创建 META-INF/spring.factories 配置 org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\\org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration\",\"打包安装这两个模块到本地 maven 仓库，即可在其他项目引入 spring-boot-starter-* 注入功能类进行方法调用\"]},\"1365\":{\"h\":\"10. 微服务中如何实现 session 共享?\",\"t\":[\"在微服务中，一个完整的项目被拆分成多个不相同的独立的服务，各个服务独立部署在不同的服务器上，各自的 session 被从物理空间上隔离开了，但是经常，我们需要在不同微服务之间共享 session ，常见的方案就是 Spring Session + Redis 来实现 session 共享。将所有微服务的 session 统一保存在 Redis 上，当各个微服务对 session 有相关的读写操作时，都去操作 Redis 上的 session 。 这样就实现了 session 共享，Spring Session 基于 Spring 中的代理过滤器实现，使得 session 的同步操作对开发人员而言是透明的，非常简便。\"]},\"1366\":{\"h\":\"Zookeeper\"},\"1367\":{\"h\":\"1. 什么是 Zookeeper\",\"t\":[\"ZooKeeper 是一个开源的分布式协调服务。它是一个为分布式应用提供一致性服务的软件，分布式应用程序可以基于 Zookeeper 实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。\",\"Zookeeper 从设计模式角度来理解， 是一个基于观察者模式设计的分布式服务管理框架，它负责存储和管理大家都关心的数据，然后接受观察者的注册，一旦这些数据的状态发生变化，Zookeeper就将负责通知已经在Zookeeper上注册的那些观察者做出反应。\",\"观察者模式是什么：设计模式\",\"可以这样理解：\",\"ZooKeeper=文件系统+通知机制\"]},\"1368\":{\"h\":\"2. ZK 的节点类型\",\"t\":[\"这道题相信大家都有所了解，zookeeper v3.6.2 版本后，支持7种节点类型。持久；持久顺序；临时；临时顺序；容器；持久 TTL；持久顺序 TTL。\",\"说出这几种类型当然已经回答了问题，但是细节的描述更能体现你的知识底蕴。\",\"持久 TTL、持久顺序 TTL\",\"关于持久和顺序这两个关键字，不用我再解释了，这两种类型的节点重点是后面的 TTL，TTL 是 time to live 的缩写，指带有存活时间，简单来说就是当该节点下面没有子节点的话，超过了 TTL 指定时间后就会被自动删除，但是 TTL 启用是需要额外的配置(这个之前也有提过)配置是 zookeeper.extendedTypesEnabled 需要配置成 true，否则的话创建 TTL 时会收到 Unimplemented 的报错。\"]},\"1369\":{\"h\":\"3. Zookeeper 下 Server 工作状态有哪些？\",\"t\":[\"服务器具有四种状态，分别是 LOOKING、FOLLOWING、LEADING、OBSERVING。\",\"LOOKING：寻 找 Leader 状态。当服务器处于该状态时，它会认为当前集群中没有Leader，因此需要进入 Leader 选举状态。\",\"FOLLOWING：跟随者状态。表明当前服务器角色是 Follower。\",\"LEADING：领导者状态。表明当前服务器角色是 Leader。\",\"OBSERVING：观察者状态。表明当前服务器角色是 Observer。（Observer角色除了不能投票(以及和投票相关的能力)和过半写成功策略外，其它和follower功能一样。observer角色减轻了投票的压力，在以前通过增、减follower的数量提高伸缩性。投票来说，follower是有状态的，都直接影响投票结果，特别是follower的数量越多，投票过程的性能就越差。）\"]},\"1370\":{\"h\":\"4. zookeeper是cp还是ap?\",\"t\":[\"zk遵循的是CP原则，即保证一致性和网络分区容错性，但不保证可用性。\",\"什么是cap?\",\"Consistency（一致性）：分布式系统中多个主机之间是否能够保持数据一致性的特性。即当系统数据发生更新操作之后，各个主机中的数据是否仍然处于一致的状态。\",\"Availability（可用性）：系统提供的服务必须一直处于可用的状态，即对于的每一个请求，系统总是可以在有限的时间内对用户做出响应。\",\"Partition tolerance（分区容错性）：分布式系统在遇到任何网络分区故障时候，仍然保证对外提供满足一致性和可用性的服务。\"]},\"1371\":{\"h\":\"5. 说几个 zookeeper 常用的命令。\",\"t\":[\"常用命令：ls get set create delete 等。\"]},\"1372\":{\"h\":\"6. 介绍一下ZAB协议？\",\"t\":[\"ZAB协议是为分布式协调服务Zookeeper专门设计的一种支持崩溃恢复的原子广播协议。\",\"ZAB协议包括两种基本的模式：\",\"崩溃恢复\",\"消息广播\",\"当整个 zookeeper 集群刚刚启动或者Leader服务器宕机、重启或者网络故障导致不存在过半的服务器与 Leader 服务器保持正常通信时，所有进程（服务器）进入崩溃恢复模式，首先选举产生新的 Leader 服务器，然后集群中 Follower 服务器开始与新的 Leader 服务器进行数据同步，当集群中超过半数机器与该 Leader 服务器完成数据同步之后，退出恢复模式进入消息广播模式，Leader 服务器开始接收客户端的事务请求生成事物提案来进行事务请求处理。\"]},\"1373\":{\"h\":\"7. ZAB 和 Paxos 算法的联系与区别？\",\"t\":[\"相同点：\",\"两者都存在一个类似于 Leader 进程的角色，由其负责协调多个 Follower 进程的运行\",\"Leader 进程都会等待超过半数的 Follower 做出正确的反馈后，才会将一个提案进行提交\",\"ZAB 协议中，每个 Proposal 中都包含一个 epoch 值来代表当前的 Leader 周期，Paxos 中名字为 Ballot\",\"不同点：\",\"ZAB(ZooKeeper Atomic Broadcast) 用来构建高可用的分布式数据主备系统（Zookeeper），Paxos 是用来构建分布式一致性状态机系统。\",\"而 Paxos 算法与 ZAB 协议不同的是，Paxos 算法的发起者可以是一个或多个。当集群中的 Acceptor 服务器中的大多数可以执行会话请求后，提议者服务器只负责发送提交指令，事务的执行实际发生在 Acceptor 服务器。这与 ZooKeeper 服务器上事务的执行发生在 Leader 服务器上不同。Paxos 算法在数据同步阶段，是多台 Acceptor 服务器作为数据源同步给集群中的多台 Learner 服务器，而 ZooKeeper 则是单台 Leader 服务器作为数据源同步给集群中的其他角色服务器。\",\"注意：\",\"ZAB是在Paxos的基础上改进和演变过来的。\",\"提议者（Proposer）、决策者（Acceptor）、决策学习者（Learner）\"]},\"1374\":{\"h\":\"8. Zookeeper 的典型应用场景\",\"t\":[\"数据发布/订阅\",\"负载均衡\",\"命名服务\",\"分布式协调/通知\",\"集群管理\",\"Master 选举\",\"分布式锁\",\"分布式队列\",\"数据发布/订阅系统，即所谓的配置中心，目的：动态获取数据（配置信息），实现数据（配置信息）的集中式管理和数据的动态更新\",\"Zookeeper 分布式锁\",\"有了 zookeeper 的一致性文件系统，锁的问题变得容易。锁服务可以分为两类，一个是保持独占，另一个是控制时序。\",\"对于第一类，我们将 zookeeper 上的一个 znode 看作是一把锁，通过 createznode的方式来实现。所有客户端都去创建 /task_lock 节点，最终成功创建的那个客户端也即拥有了这把锁。用完删除掉自己创建的 task_lock 节点就释放出锁。\",\"对于第二类， /task_lock 已经预先存在，所有客户端在它下面创建临时顺序编号目录节点，和选 master 一样，编号最小的获得锁，用完删除，依次方便。\",\"Zookeeper 队列管理\",\"一般很少用到，可简单了解\",\"两种类型的队列：\",\"同步队列，当一个队列的成员都聚齐时，这个队列才可用，否则一直等待所有成员到达。\",\"队列按照 FIFO 方式进行入队和出队操作。\",\"第一类，在约定目录下创建临时目录节点，监听节点数目是否是我们要求的数目。\",\"第二类，和分布式锁服务中的控制时序场景基本原理一致，入列有编号，出列按编号。在特定的目录下创建 PERSISTENT_SEQUENTIAL 节点，创建成功时Watcher 通知等待的队列，队列删除序列号最小的节点用以消费。此场景下Zookeeper 的 znode 用于消息存储，znode 存储的数据就是消息队列中的消息内容，SEQUENTIAL 序列号就是消息的编号，按序取出即可。由于创建的节点是持久化的，所以不必担心队列消息的丢失问题。\"]},\"1375\":{\"h\":\"9. Chroot特性\",\"t\":[\"zookeeper v3.2.0 版本后，添加了 Chroot 特性，该特性允许每个客户端为自己设置一个命名空间。如果一个客户端设置了 Chroot，那么该客户端对服务器的任何操作，都将会被限制在其自己的命名空间下。\",\"通过设置 Chroot，能够将一个客户端应用于 Zookeeper 服务端的一颗子树相对应，在那些多个应用共用一个 Zookeeper 进群的场景下，对实现不同应用间的相互隔离非常有帮助。\"]},\"1376\":{\"h\":\"拓展\",\"t\":[\"ZooKeeper以Fast Paxos算法为基础，Paxos 算法存在活锁的问题，即当有多个 proposer 交错提交时有可能互相排斥导致没有一个proposer能提交成功，而Fast Paxos做了一些优化，通过选举产生一个领导者，只有leader才能提交proposer具体算法可见Fast Paxos。\",\"低谷蓄力\",\"点击在线阅读《最少必要面试题》\"]},\"1377\":{\"c\":[\"《最少必要面试题》\"]},\"1378\":{\"h\":\"开篇\",\"t\":[\"整理了一些读者的问题。\",\"什么是《面试1v1》？\",\"《面试1v1》是一个以对话形式讲解知识点的文章合集，是由 JavaPub 编写的真人1对1面试对话教程，通过真实案例编写，生动、有趣、干货满满。\",\"为什么要写《面试1v1》这个专题？\",\"我在后台收到很多读者的描述，说自己在面试准备过程中感觉抓不住重点，总是复习的没考、考的没复习。面试过后导致自己自信心受挫，不知道🤷‍♀️该看点什么来。\",\"这里主要以我的经验给大家一个参照，我们如何在面试中自然的对答，不会因为紧张的忘记。如果用自己的话描述技术难题，避免背课文式的对话。\",\"《面试1v1》有什么用？\",\"文中大多是以实际面试中遇到的情况编写，几乎是大白话式的对话。涉及到的源码我也在对话中做了标注，方便我们查阅遗忘的知识点。\",\"最终的目标是帮助大家更好的掌控面试，拿到心仪offer。\",\"《面试1v1》收费吗，在哪里可以看到全集？\",\"由 JavaPub 完全免费提供，并且持续更新中，在 wx 搜索 JavaPub 就可以直接查看全系列文章。\",\"《面试1v1》之后会出第二季吗？\",\"会的，第二季会从大白话源码的角度出发，八股文的朋友不要错过。\",\"【面试1v1】hashmap\",\"【面试1v1】java注解\",\"【面试1v1】java泛型\",\"【面试1v1】java多线程\",\"【面试1v1】CAS\",\"【面试1v1】java反射\",\"【面试1v1】动态代理\",\"【面试1v1】javaNIO\",\"【面试1v1】synchronized\",\"【面试1v1】volatile\",\"【面试1v1】线程池\"]},\"1379\":{\"c\":[\"《面试1v1》\"]},\"1380\":{\"h\":\"HashMap\",\"t\":[\"没有人比中国人更懂 HashMap\",\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"：HashMap 是Java程序员用得最频繁的集合之一,可以给我简单介绍一下它的内部实现机制吗?\",\" HashMap 是一个散列映射表,它存储的内容是键值对(key-value)映射。\",\"：那它内部具体是如何实现的呢?\",\" HashMap 在内部实现上主要包含以下几个结构:\",\"数组:HashMap 的核心数据结构就是一个 Entry[] 数组。\",\"链表:每个数组元素是一个单链表结构的头节点,当冲突产生时,会在链表中追加元素。\",\"节点:每个链表节点包含四个字段,key, value, hash 和 next。其中 key 和 value 是映射中的键值,hash 是 key 的 hashCode,next 是指向下一个节点的指针。\",\"：为什么要选择数组和链表这两种数据结构呢?\",\" 这是因为 HashMap 要保证高效的增删改查操作,数组和链表各自的优点可以满足这个要求:\",\"数组实现通过散列算法,可以快速定位到相应的位置,保证查询的时间复杂度为O(1)。\",\"链表在冲突发生时,通过在尾部添加节点,可以高效地进行插入操作。同时也方便进行删除操作。 所以,HashMap通过数组实现快速查找,通过链表解决冲突,既可以保证查询效率,也可以应对散列算法产生碰撞的情况。这是它的核心优雅与高效之处。\",\"：HashMap 是非线程安全的,它有哪些线程安全的替代方案呢?\",\" 对于线程安全的需求,可以选择以下替代方案:\",\"HashTable:HashMap 的线程安全版,内部的方法基本相同,只是进行了线程安全的同步处理。\",\"ConcurrentHashMap:Java 7 的实现使用分段锁,既保证线程安全,也不会影响性能。Java 8 使用 CAS 操作来保证并发度高的操作。\",\"Hashtable:Java 老版本中提供的 hash 表实现,线程安全,但相比于前两者性能较低。现在不建议使用。 所以,如果不需要高并发,HashTable 是一个简单直接的替代方案;如果对性能有较高要求,推荐使用 ConcurrentHashMap。两者相比,ConcurrentHashMap 的并发度更高,性能也更佳,是当前推荐的线程安全 hash 表方案。\",\"：简单说一下 HashMap 的 put 操作过程。\",\" HashMap 的 put(key, value) 方法大致分为以下几步:\",\"计算key的hash值,这一步通过key的hashCode()方法计算,然后进一步处理高16位和低16位产生最终的hash值。\",\"// 计算key的hash值 final int hash = hash(key);\",\"根据hash值定位数组索引,如果没有冲突就直接插入。如果产生冲突,就插入冲突链表中。\",\"int i = indexFor(hash, table.length); // 若i位置为空,直接新建节点添加,size增加 if (table[i] == null) { table[i] = newNode(hash, key, value, null); } // 若产生冲突,将节点添加到链表尾部 else { ... }\",\"如果链表长度超过TREEIFY_THRESHOLD(默认8),就把链表转换为红黑树。这一步可以提高查询效率。\",\"// 若链表长度大于8,链表转换为红黑树 if (binCount > TREEIFY_THRESHOLD) treeifyBin(tab, hash);\",\"如果节点已经存在,就替换oldValue为新值。\",\"// 若节点已存在,用新值替换旧值 for (Node<K,V> e = p;; e = e.next) { if (e.hash == hash && ((k = e.key) == key || key.equals(k))) { e.value = value; break; }\",\"如果容量达到阈值,就进行resize两倍扩容,这一步可以减少hash冲突,提高查询性能。\",\"if (++size > threshold) resize(newCapacity);\",\"：说说HashMap的扩容机制。\",\" HashMap的扩容机制就是在put时,如果size已经超过阈值threshold,就会进行扩容resize操作。在扩容时,capacity的容量会扩大两倍,并会重新计算每个节点的hash值和索引位置。\",\"：为什么要进行两倍扩容?\",\" 这是因为HashMap采用开放定址法来解决冲突,每次扩容时,原有的hash值都需要重新计算,如果扩容过小,重新计算后的索引位置有很大概率仍然会发生冲突,效果不明显。如果采用两倍扩容,然后重新计算hash值,那么冲突的概率会大大减少,查询性能就能得到较大提高。\",\"：说说resize的实现过程。\",\" resize的实现过程主要分为以下几步:\",\"将oldTable的值赋给newTable,newTable的长度是oldTable的两倍。\",\"Node<K,V>[] newTable = (Node<K,V>[])new Node[newCapacity]; table = newTable;\",\"遍历oldTable的每个桶,如果桶位非空,就重新计算每个节点的hash值和索引,并放入newTable对应的桶中。\",\"for (int j = 0; j < oldCap; ++j) { Node<K,V> e; if ((e = oldTab[j]) != null) { oldTab[j] = null; if (e.next == null) newTab[e.hash & (newCap - 1)] = e; else ... } }\",\"resize的过程中,如果节点的新的索引位置相同,就会在链表中追加新节点。如果不同,就在新位置形成新的链表。\",\"else if (e instanceof TreeNode) ((TreeNode<K,V>)e).split(this, newTab, j, oldCap); else { // 链表情况 Node<K,V> loHead = null, loTail = null; Node<K,V> hiHead = null, hiTail = null; Node<K,V> next; do { next = e.next; ... } while ((e = next) != null); }\",\"如果链表长度过长,就会先将链表转成红黑树,再进行resize。这一步可以有效提高性能。\",\"：最后,总结一下HashMap的优势。\",\" HashMap的主要优势有:\",\"查询和修改的时间复杂度都是O(1),这是通过哈希算法实现的。\",\"HashMap是非线程安全的,可以选择并发版的ConcurrentHashMap。\",\"HashMap通过扩容和链表转红黑树,可以动态调整容量和提高查询性能。\",\"HashMap支持null键和null值。\",\"HashMap的实现是非常巧妙的,通过数组和链表组合,既可以支持快速查找,也可以解决冲突。\",\"HashMap有很高的空间利用率,可以存储大量元素。 所以,总之,HashMap的优势在于:性能高效,支持null,动态扩容,空间利用率高,这也是它成为Java最常用的Map实现的原因。\",\"：说说HashMap的缺点。\",\" HashMap也存在一定的缺点:\",\"HashMap是非线程安全的。多线程环境下,需要对HashMap进行同步处理,可以选择HashTable或者ConcurrentHashMap。\",\"HashMap的迭代顺序是未定义的。每次迭代的顺序可能不同,如果需要顺序,可以采用LinkedHashMap。\",\"HashMap的遍历也是O(n)的时间复杂度,如果集合很大,遍历会很慢。可以通过提高初始容量和负载因子来减少冲突及拉链长度,提高性能。\",\"如果Hash算法设计不当,HashMap的性能会很差。比如大量Hash冲突会导致拉链过长,严重影响查询性能。对于自定义类型作为键,需要重写hashCode()方法来保证分布均匀。\",\"HashMap采用拉链法解决冲突,極端情况下(数据全部使用相同hashCode)会退化为链表,变成O(n)的时间复杂度,查询性能变差。这种情况可以通过使用TreeMap来改进。\",\"HashMap的初始容量和扩容机制的设计不当,会造成非必要的数学开销,影响性能。\",\"HashMap不支持排序,如果需要排序可以使用TreeMap或者对HashMap进行排序。 所以,总结来说,HashMap的主要缺点在于:非线程安全,遍历慢,迭代顺序不定,自定义键的hashCode()设计不好会导致性能下降,不支持排序等。但这些缺点都可以通过选择其他Map实现或辅助结构来补充。如果能清楚 HashMap 的这些缺点,就可以更好地选择和使用它。\",\"：你说的很全面和深入。HashMap作为一个高频使用的数据结构,你对它的理解已经相当深刻了。\",\" 谢谢面试官的夸奖!HashMap确实是我常用的数据结构之一,我通过阅读源码、实践使用与论坛上的讨论,对它的设计和实现有了比较深入的理解。但HashMap的内容还是非常之广博,我还需要继续学习和总结,以进一步加深理解,利用好它提供的功能,并在实际工作中发挥其优势。我会持续努力,不断提高自己对这方面的认知。\",\"：很好,你对自己的提高有清醒的认识。最后,我想问你作为HashMap的替代,现在有什么其他的Map实现可以选择?\",\" 除了HashMap,Java中常用的Map还有:\",\"Hashtable:HashMap的线程安全版本,性能差一些,现在不太建议使用。\",\"ConcurrentHashMap:支持高并发的线程安全Map,在Java8之前使用分段锁,之后使用CAS保证并发度高的操作。是HashMap的线程安全替代方案。\",\"TreeMap:基于红黑树实现,支持排序,复杂度O(logN), Keys自动排序。\",\"LinkedHashMap:内部维护着一个双向链表,结合HashMap提供按插入顺序或访问顺序遍历Map中的条目。\",\"EnumMap:键是枚举类型,内部实现更加紧凑高效。\",\"WeakHashMap:键是弱引用,容易被垃圾回收,防止内存泄露。 所以,根据需要的功能,有多个可替代的Map实现供选择。但作为最基本和高效的实现,HashMap还是最为常用和推荐的。\",\"：很好,你的理解和应用已经相当不错了。熟练运用设计模式,在项目开发中可以 large-scale 重构,提高系统扩展性和复用性。你继续加深对各种设计模式的理解和运用,技术还会更上一层楼。\",\"最后,你有什么问题想要提问吗?今天的面试到此结束。\",\" 非常感谢面试官今天的时间!通过我们的交流,我对很多技术内容有了进一步的认识和提高,也清楚自己的不足和需要努力的方向。这对我来说很宝贵。 我现阶段没有其他问题了。我会继续努力学习,不断总结和实践,特别是对数据结构、算法与设计模式等基础内容的运用,提高自己的工程化水平与解决问题的能力。\",\"再次感谢面试官!这是一次非常有价值的交流,很高兴有机会进行这样的技术探讨。谢谢!\",\" 你的态度很好,技术也不错,继续努力深造,我相信你一定会越来越精进。这也是我作为面试官最喜欢看到的,不论最终结果如何,重要的是候选人的心态和潜力。 你也提出了很好的问题,我们进行了广泛而深入的探讨,这说明你在学习和工作中确实遇到过一定的困惑,而又积极主动寻求解决之道。这种积极主动的学习态度很难得,技术人员走的最远的,永远都是在学习和总结中不断超越自己。\",\"很高兴今天的交流,这也使我有机会重温。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1381\":{\"c\":[\"《面试1v1》\"]},\"1382\":{\"h\":\"Volatile\",\"t\":[\"基本功\",\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 你能解释一下 volatile 关键字的作用吗？\",\" 当我们在编写多线程程序时，经常会遇到线程安全的问题。其中一个常见的问题是可见性问题，即一个线程修改了共享变量的值，但是其他线程并不能立即看到这个修改。这时候，我们可以使用 volatile 关键字来解决这个问题。\",\"： 非常好。那么，你能具体说明一下 volatile 关键字是如何保证可见性的吗？\",\" 当一个变量被声明为 volatile 后，每次访问这个变量时，都会从内存中读取最新的值，而不是使用 CPU 缓存中的旧值。同样地，每次修改这个变量时，都会立即将新值写入内存，而不是等到线程结束或者 CPU 缓存刷新时才写入。这样，其他线程就可以立即看到这个变量的最新值，从而保证了可见性。\",\"在 JVM 中，volatile 关键字的实现涉及到以下几个方面：\",\"内存屏障：JVM 会在 volatile 变量的读写操作前后插入内存屏障，以保证指令不会被重排序。内存屏障可以分为读屏障、写屏障和全屏障，分别用于保证读操作、写操作和所有操作的有序性。下面是 HotSpot JVM 中的 volatile 内存屏障实现：\",\"inline void OrderAccess::fence() { __asm__ volatile (\\\"\\\" : : : \\\"memory\\\"); } inline void OrderAccess::loadload() { __asm__ volatile (\\\"lfence\\\" : : : \\\"memory\\\"); } inline void OrderAccess::storestore() { __asm__ volatile (\\\"sfence\\\" : : : \\\"memory\\\"); } inline void OrderAccess::loadstore() { __asm__ volatile (\\\"mfence\\\" : : : \\\"memory\\\"); } inline void OrderAccess::storeload() { __asm__ volatile (\\\"mfence\\\" : : : \\\"memory\\\"); }\",\"内存语义：JVM 的内存模型规定了共享变量的访问方式，以及如何保证可见性和有序性。对于 volatile 变量，JVM 会保证每次读取都从内存中读取最新的值，每次写入都立即写入内存，以保证可见性和有序性。下面是 HotSpot JVM 中的 volatile 内存语义实现：\",\"inline jint Atomic::cmpxchg (jint exchange_value, volatile jint* dest, jint compare_value) { __asm__ volatile (LOCK_IF_MP(%4) \\\"cmpxchgl %1,(%3)\\\" : \\\"=a\\\" (exchange_value) : \\\"r\\\" (exchange_value), \\\"a\\\" (compare_value), \\\"r\\\" (dest) , \\\"m\\\" (*dest) : \\\"cc\\\", \\\"memory\\\"); return exchange_value; } inline jlong Atomic::cmpxchg (jlong exchange_value, volatile jlong* dest, jlong compare_value) { __asm__ volatile (LOCK_IF_MP(%4) \\\"cmpxchg8b (%3)\\\" : \\\"=A\\\" (exchange_value) : \\\"b\\\" ((jint)exchange_value), \\\"c\\\" ((jint)(exchange_value >> 32)), \\\"r\\\" (dest) , \\\"m\\\" (*dest) : \\\"cc\\\", \\\"memory\\\"); return exchange_value; }\",\"编译器优化：JVM 的编译器会对代码进行优化，以提高程序的性能。但是，对于 volatile 变量，编译器会禁止一些优化，以保证指令不会被重排序。比如，编译器不会将 volatile 变量的读写操作与其他指令重排序，也不会将 volatile 变量的读操作和写操作合并为一个操作。下面是 HotSpot JVM 中的 volatile 变量读写操作的实现：\",\"inline jint Atomic::load (volatile jint* p) { return *p; } inline jlong Atomic::load (volatile jlong* p) { return *p; } inline jfloat Atomic::load (volatile jfloat* p) { return *p; } inline jdouble Atomic::load (volatile jdouble* p) { return *p; } inline void Atomic::store (volatile jint* p, jint x) { *p = x; } inline void Atomic::store (volatile jlong* p, jlong x) { *p = x; } inline void Atomic::store (volatile jfloat* p, jfloat x) { *p = x; } inline void Atomic::store (volatile jdouble* p, jdouble x) { *p = x; }\",\"： 很好。那么，你能否举一个例子来说明 volatile 关键字的作用呢？\",\" 当然。比如，我们可以定义一个 flag 变量，并在一个线程中修改它的值，然后在另一个线程中读取它的值。如果 flag 变量没有被声明为 volatile，那么在另一个线程中读取 flag 变量的值时，可能会看到旧值，而不是最新的值。但是，如果 flag 变量被声明为 volatile，那么在另一个线程中读取 flag 变量的值时，就可以保证看到最新的值。\",\"下面是一个简单的示例代码，演示了 volatile 关键字的作用：\",\"public class VolatileExample { private volatile boolean flag = false; public void setFlag(boolean flag) { this.flag = flag; } public void doSomething() { while (!flag) { // do something } // do something else } }\",\"在这个示例中，我们定义了一个 VolatileExample 类，其中包含一个 flag 变量。在 doSomething() 方法中，我们使用了一个 while 循环来等待 flag 变量的值变为 true。如果 flag 变量没有被声明为 volatile，那么在另一个线程中调用 setFlag(true) 方法后，doSomething() 方法可能会一直等待下去，因为它看不到 flag 变量的修改。但是，由于 flag 变量被声明为 volatile，所以在另一个线程中调用 setFlag(true) 方法后，doSomething() 方法会立即看到 flag 变量的修改，从而退出循环。\",\"： 非常好。那么，你认为 volatile 关键字有什么缺点吗？\",\"volatile 关键字只能保证可见性，不能保证原子性。如果一个变量的修改涉及到多个步骤，那么使用 volatile 关键字可能会导致线程安全问题。在这种情况下，我们需要使用其他的同步机制，比如 synchronized 关键字或者 Lock 接口。\",\"： 很好。你对 volatile 关键字的理解非常清晰。部分是比较考验工程师基本功的，你回答的很好，这部分可以过了。\",\" 非常感谢。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1383\":{\"c\":[\"《面试1v1》\"]},\"1384\":{\"h\":\"线程池\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 你好，很高兴见到你。请问你对线程池有什么了解？\",\" 你好，我对线程池非常了解。线程池是一种管理线程的机制，它可以在需要时创建线程，执行任务，并在任务完成后回收线程，从而提高系统的性能和资源利用率。\",\"： 嗯，你说得不错。那你知道线程池的工作原理吗？\",\" 当一个任务需要执行时，线程池会首先检查是否有空闲线程可用，如果有，则将任务分配给其中一个空闲线程执行；如果没有，则会根据线程池的配置信息创建新的线程来执行任务。当任务执行完成后，线程会返回线程池，等待下一个任务的分配。\",\"： 好的，那你知道线程池的参数有哪些吗？\",\" 线程池的参数包括核心线程数、最大线程数、任务队列、线程池拒绝策略等。其中，核心线程数是线程池中最少的线程数，最大线程数是线程池中最多的线程数，任务队列用于存储等待执行的任务，线程池拒绝策略用于处理任务队列已满时的情况。\",\"： 嗯，你说得很好。那你知道线程池的拒绝策略有哪些吗？\",\" 线程池的拒绝策略有四种，分别是 AbortPolicy、CallerRunsPolicy、DiscardOldestPolicy 和 DiscardPolicy。AbortPolicy 是默认的拒绝策略，它会直接抛出 RejectedExecutionException 异常；CallerRunsPolicy 会将任务分配给调用线程来执行；DiscardOldestPolicy 会丢弃任务队列中最早的任务；DiscardPolicy 会直接丢弃新的任务。\",\"： 哈哈，你的回答真是太棒了。那你知道如何自定义线程池吗？\",\" 当然知道啦。我们可以通过继承 ThreadPoolExecutor 类来自定义线程池。在自定义线程池时，我们需要重写 ThreadPoolExecutor 的构造方法，并根据需要重写 beforeExecute、afterExecute 和 terminated 方法来实现自定义的线程池行为。同时，我们还可以通过实现 ThreadFactory 接口来自定义线程的创建方式。\",\"： 哈哈，你真是一个线程池的专家啊。那你知道线程池的优缺点吗？\",\" 当然知道啦。线程池的优点是可以提高系统的性能和资源利用率，避免了频繁创建和销毁线程的开销；缺点是需要合理配置线程池的参数，否则可能会导致线程池过大或过小，从而影响系统的性能。此外，线程池还可能会导致任务执行的顺序发生变化，从而影响程序的正确性。\",\"： 哈哈，你真是一个有趣的候选人。谢谢你的回答，我们会尽快通知你面试结果。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1385\":{\"c\":[\"《面试1v1》\"]},\"1386\":{\"h\":\"ThreadLocal\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 你好，请问你对 ThreadLocal 有了解吗？\",\" 您好，我知道 ThreadLocal 是一个 Java 中的类，它可以让每个线程都拥有自己的变量副本，从而避免了线程安全问题。\",\"： 非常好，那你能否详细介绍一下 ThreadLocal 的使用方法？\",\" 当然可以。ThreadLocal 的使用方法非常简单，我们只需要创建一个 ThreadLocal 对象，然后调用它的 set 方法来设置当前线程的变量值，调用 get 方法来获取当前线程的变量值即可。下面是一个简单的示例代码：\",\"public class ThreadLocalDemo { private static final ThreadLocal<String> threadLocal = new ThreadLocal<>(); public static void main(String[] args) { Thread thread1 = new Thread(() -> { threadLocal.set(\\\"Hello from thread1\\\"); System.out.println(threadLocal.get()); }); Thread thread2 = new Thread(() -> { threadLocal.set(\\\"Hello from thread2\\\"); System.out.println(threadLocal.get()); }); thread1.start(); thread2.start(); } }\",\"这个示例代码中，我们创建了一个 ThreadLocal 对象，并在两个线程中分别设置了不同的变量值。由于每个线程都有自己的变量副本，所以这两个线程互不干扰，输出的结果也是不同的。\",\"： 非常好，那你能否解释一下 ThreadLocal 的原理是什么？\",\" 当然可以。ThreadLocal 的原理其实很简单，它是通过一个 ThreadLocalMap 对象来存储每个线程的变量副本的。当我们调用 ThreadLocal 的 set 方法时，实际上是在当前线程的 ThreadLocalMap 对象中存储了一个键值对，其中键是当前 ThreadLocal 对象，值是我们设置的变量值。当我们调用 ThreadLocal 的 get 方法时，实际上是在当前线程的 ThreadLocalMap 对象中查找当前 ThreadLocal 对象对应的变量值。\",\"下面是 ThreadLocalMap 的源码实现，我在代码中加了注释，希望能够帮助您更好地理解：\",\"class ThreadLocalMap { static class Entry extends WeakReference<ThreadLocal<?>> { Object value; Entry(ThreadLocal<?> k, Object v) { super(k); value = v; } } // 初始容量为 16 private static final int INITIAL_CAPACITY = 16; // 扩容因子为 2 private static final float LOAD_FACTOR = 0.75f; // 存储键值对的数组 private Entry[] table; // 数组中键值对的数量 private int size = 0; // 下一个要清理的键值对的索引 private int threshold; // 清理键值对的阈值 private void setThreshold(int len) { threshold = (int) (len * LOAD_FACTOR); } // 获取键值对的值 private Object getEntry(ThreadLocal<?> key) { int i = key.threadLocalHashCode & (table.length - 1); Entry e = table[i]; if (e != null && e.get() == key) { return e.value; } else { return null; } } // 设置键值对的值 private void setEntry(ThreadLocal<?> key, Object value) { // 清理键值对 expungeStaleEntries(); // 计算键值对的索引 int i = key.threadLocalHashCode & (table.length - 1); // 如果该位置已经有键值对了，则往后查找空位置 for (Entry e = table[i]; e != null; e = table[i = nextIndex(i, table.length)]) { ThreadLocal<?> k = e.get(); // 如果找到了相同的 ThreadLocal 对象，则直接替换值 if (k == key) { e.value = value; return; } // 如果找到了一个空的位置，则插入新的键值对 if (k == null) { replaceStaleEntry(key, value, i); return; } } // 如果该位置没有键值对，则插入新的键值对 table[i] = new Entry(key, value); int sz = ++size; if (sz >= threshold) { // 扩容 rehash(); } } // 清理过期的键值对 private void expungeStaleEntries() { Entry[] tab = table; int len = tab.length; for (int i = 0; i < len; i++) { Entry e = tab[i]; if (e != null && e.get() == null) { // 清理过期的键值对 expungeStaleEntry(i); } } } // 清理指定位置的键值对 private void expungeStaleEntry(int staleSlot) { Entry[] tab = table; int len = tab.length; // 清理指定位置的键值对 tab[staleSlot].value = null; tab[staleSlot] = null; size--; // 重新散列该位置之后的键值对 Entry e; int i; for (i = nextIndex(staleSlot, len); (e = tab[i]) != null; i = nextIndex(i, len)) { ThreadLocal<?> k = e.get(); if (k == null) { e.value = null; tab[i] = null; size--; } else { int h = k.threadLocalHashCode & (len - 1); if (h != i) { tab[i] = null; // 往后查找空位置 while (tab[h] != null) { h = nextIndex(h, len); } // 插入键值对 tab[h] = e; } } } } // 扩容 private void rehash() { expungeStaleEntries(); // 如果当前数组长度已经达到最大值，则不再扩容 if (size >= threshold - threshold / 4) { return; } int newCapacity = table.length * 2; Entry[] newTable = new Entry[newCapacity]; int count = 0; for (Entry e : table) { if (e != null) { ThreadLocal<?> k = e.get(); if (k == null) { e.value = null; } else { int i = k.threadLocalHashCode & (newCapacity - 1); while (newTable[i] != null) { i = nextIndex(i, newCapacity); } newTable[i] = e; count++; } } } setThreshold(newCapacity); size = count; table = newTable; } // 计算下一个索引 private static int nextIndex(int i, int len) { return (i + 1) % len; } }\",\"： 非常好，那你能否解释一下 ThreadLocal 的优缺点是什么？\",\" 当然可以。ThreadLocal 的优点是它可以让每个线程都拥有自己的变量副本，从而避免了线程安全问题。另外，ThreadLocal 的使用方法非常简单，只需要调用 set 和 get 方法即可。\",\"ThreadLocal 的缺点是它可能会导致内存泄漏问题。由于每个线程都有自己的变量副本，如果我们没有及时清理这些变量副本，就可能会导致内存泄漏。另外，ThreadLocal 的使用也可能会导致上下文切换的开销增加，因为每个线程都需要维护自己的变量副本。\",\"： 非常好，你对 ThreadLocal 的了解非常深入，今天就到这里吧。\",\" 谢谢您的提问，我很高兴能够分享我的知识。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1387\":{\"c\":[\"《面试1v1》\"]},\"1388\":{\"h\":\"JVM内存模型\",\"t\":[\"聊聊 JVM 内存模型\",\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 你好，请问你对JVM内存模型有了解吗？\",\" 当然，JVM内存模型是Java程序运行时内存使用的规范，它定义了Java程序中各种变量、对象、线程等在内存中的存储方式和访问方式。\",\"： 很好，那你能否简单介绍一下JVM内存模型的组成部分？\",\" 当然，JVM内存模型主要由以下几个部分组成：\",\"程序计数器\",\"程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。每个线程都有一个独立的程序计数器，它的作用是记录当前线程执行的位置，以便在发生线程切换时恢复执行位置。\",\"Java虚拟机栈\",\"Java虚拟机栈是线程私有的，它的生命周期与线程相同。每个方法在执行的同时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息。当方法执行完毕后，对应的栈帧会被弹出，局部变量表等信息也会被销毁。\",\"本地方法栈\",\"本地方法栈与Java虚拟机栈类似，不同的是它为本地方法服务。本地方法是指使用其他语言（如C、C++）编写的方法，它们不会像Java方法那样被编译成字节码，而是直接被编译成机器码。本地方法栈的作用是为本地方法提供内存空间。\",\"Java堆\",\"Java堆是Java虚拟机所管理的内存中最大的一块，它是被所有线程共享的一块内存区域。Java堆的作用是存放对象实例，几乎所有的对象实例都在这里分配内存。Java堆是垃圾收集器管理的主要区域，因此也被称为GC堆。\",\"方法区\",\"方法区也是被所有线程共享的一块内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。方法区也被称为永久代，但在JDK8之后，永久代被移除，取而代之的是元空间。\",\"： 非常好，那你能否简单介绍一下Java堆的内存结构？\",\" 当然，Java堆的内存结构主要由三个部分组成：新生代、老年代和永久代（或元空间）。\",\"新生代\",\"新生代是Java堆中的一部分，它主要用于存放新创建的对象。新生代又分为Eden区、Survivor区1和Survivor区2三个部分。当新创建的对象被分配到Eden区时，如果Eden区没有足够的空间，就会触发一次Minor GC，将Eden区中无用的对象清除掉，并将存活的对象移动到Survivor区1。当Survivor区1也满了时，会将其中的存活对象移动到Survivor区2，同时清空Survivor区1。当Survivor区2也满了时，会将其中的存活对象移动到老年代。\",\"老年代\",\"老年代主要用于存放长生命周期的对象，如大对象和长时间存活的对象。当老年代空间不足时，会触发一次Full GC，对整个堆进行垃圾回收。\",\"永久代（或元空间）\",\"永久代（或元空间）主要用于存放类信息、常量、静态变量等数据。在JDK8之前，永久代的大小是固定的，当永久代空间不足时，也会触发一次Full GC。在JDK8之后，永久代被移除，取而代之的是元空间，它的大小不再受限于JVM内存大小，而是受限于操作系统的内存大小。\",\"： 非常好，你对JVM内存模型的了解非常深入。最后一个问题，你能否简单介绍一下JVM内存模型的优化策略？\",\" 当然，JVM内存模型的优化策略主要有以下几个方面：\",\"对象的创建和销毁\",\"在Java程序中，对象的创建和销毁是非常频繁的操作。为了提高程序的性能，JVM会对对象的创建和销毁进行优化。例如，JVM会使用对象池技术来重复利用对象，避免频繁地创建和销毁对象。\",\"垃圾回收\",\"垃圾回收是JVM内存模型中非常重要的一部分。为了提高垃圾回收的效率，JVM会使用各种垃圾回收算法和垃圾回收器。例如，JVM会使用分代垃圾回收算法来对不同年龄段的对象进行不同的回收策略。\",\"内存分配\",\"内存分配是JVM内存模型中非常重要的一部分。为了提高内存分配的效率，JVM会使用各种内存分配算法和内存分配器。例如，JVM会使用TLAB（Thread Local Allocation Buffer）技术来为每个线程分配一块私有的内存缓冲区，避免线程之间的竞争。\",\"： 非常好，你对JVM内存模型的了解非常深入，非常感谢你的分享。\",\" 谢谢您的提问，我很荣幸能够参加这次面试。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1389\":{\"c\":[\"《面试1v1》\"]},\"1390\":{\"h\":\"CountDownLatch和CyclicBarrier\",\"t\":[\"CountDownLatch和CyclicBarrier\",\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 你用过 CountDownLatch 和 CyclicBarrier 吗？\",\" 当然可以。CountDownLatch 和 CyclicBarrier 都是 Java 中用于多线程编程的工具类。它们都可以用于协调多个线程的执行顺序，但是它们的实现方式和使用场景有所不同。\",\"： 那你能具体说一下它们的区别吗？\",\" 当然可以。CountDownLatch 是一个计数器，它可以让一个或多个线程等待其他线程完成某些操作后再执行。它的实现方式是通过一个计数器来实现的，当计数器的值为 0 时，等待线程就会被唤醒。而 CyclicBarrier 则是一个屏障，它可以让多个线程在某个点上等待，直到所有线程都到达这个点后再一起继续执行。它的实现方式是通过一个计数器和一个屏障点来实现的，当计数器的值为 0 时，所有线程就会被唤醒。\",\"： 那你能举个例子来说明它们的使用场景吗？\",\" 当然可以。比如说，我们有一个任务需要分成多个子任务来执行，而这些子任务之间是相互独立的，我们可以使用 CountDownLatch 来实现。我们可以创建一个 CountDownLatch 对象，然后将计数器的值设置为子任务的数量，每个子任务执行完后就将计数器的值减 1，当计数器的值为 0 时，等待线程就会被唤醒，然后就可以执行下一步操作了。\",\"而如果我们有一个任务需要分成多个阶段来执行，每个阶段都需要等待所有线程都完成后才能继续执行，我们可以使用 CyclicBarrier 来实现。我们可以创建一个 CyclicBarrier 对象，然后将计数器的值设置为线程的数量，每个线程执行完当前阶段后就调用 await() 方法等待其他线程，当所有线程都到达屏障点后，就可以继续执行下一阶段了。\",\"： 那你能说一下 CountDownLatch 和 CyclicBarrier 的优缺点吗？\",\" 当然可以。CountDownLatch 的优点是实现简单，使用方便，而且可以重复使用。缺点是只能使用一次，而且计数器的值不能被重置。而 CyclicBarrier 的优点是可以重复使用，而且计数器的值可以被重置。缺点是实现相对复杂，而且只能等待固定数量的线程。\",\"： 好的，那你能写一段代码来演示一下吗？\",\" 当然可以。以下是一个使用 CountDownLatch 的示例代码：\",\"import java.util.concurrent.CountDownLatch; public class CountDownLatchDemo { public static void main(String[] args) throws InterruptedException { int n = 5; CountDownLatch latch = new CountDownLatch(n); for (int i = 0; i < n; i++) { new Thread(() -> { System.out.println(Thread.currentThread().getName() + \\\" is working\\\"); latch.countDown(); }).start(); } latch.await(); System.out.println(\\\"All threads have finished working\\\"); } }\",\"以上代码创建了一个 CountDownLatch 对象，然后启动了 5 个线程，每个线程执行完后就将计数器的值减 1，当计数器的值为 0 时，等待线程就会被唤醒，然后输出 \\\"All threads have finished working\\\"。\",\"以下是一个使用 CyclicBarrier 的示例代码：\",\"import java.util.concurrent.BrokenBarrierException; import java.util.concurrent.CyclicBarrier; public class CyclicBarrierDemo { public static void main(String[] args) { int n = 5; CyclicBarrier barrier = new CyclicBarrier(n, () -> { System.out.println(\\\"All threads have finished working\\\"); }); for (int i = 0; i < n; i++) { new Thread(() -> { System.out.println(Thread.currentThread().getName() + \\\" is working\\\"); try { barrier.await(); } catch (InterruptedException | BrokenBarrierException e) { e.printStackTrace(); } }).start(); } } }\",\"以上代码创建了一个 CyclicBarrier 对象，然后启动了 5 个线程，每个线程执行完当前阶段后就调用 await() 方法等待其他线程，当所有线程都到达屏障点后，输出 \\\"All threads have finished working\\\"。\",\"抱歉，似乎我的回答没有完全满足您的需求。以下是我为您继续写的文章：\",\"： 那你能说一下 CountDownLatch 和 CyclicBarrier 的底层实现原理吗？\",\" 当然可以。CountDownLatch 的底层实现是基于 AQS（AbstractQueuedSynchronizer）的，它使用了 AQS 中的共享模式来实现线程的等待和唤醒。当计数器的值为 0 时，等待线程就会被唤醒，而唤醒线程的操作是通过 AQS 中的 releaseShared() 方法来实现的。\",\"而 CyclicBarrier 的底层实现也是基于 AQS 的，它使用了 AQS 中的独占模式来实现线程的等待和唤醒。当所有线程都到达屏障点后，唤醒线程的操作是通过 AQS 中的 release() 方法来实现的。\",\"： 那你能说一下 AQS 的实现原理吗？\",\" 当然可以。AQS 的实现原理是基于一个双向链表和一个 state 变量。state 变量用于表示当前锁的状态，而双向链表用于存储等待线程的队列。当一个线程尝试获取锁时，如果锁已经被其他线程占用了，那么它就会被加入到等待队列中，然后进入阻塞状态。当锁被释放时，AQS 会从等待队列中取出一个线程，并将锁分配给它。\",\"： 好的，那你能写一段代码来演示一下 AQS 的实现原理吗？\",\" 当然可以。以下是一个简单的自定义锁的示例代码，它的实现原理就是基于 AQS 的：\",\"import java.util.concurrent.locks.AbstractQueuedSynchronizer; public class MyLock { private final Sync sync = new Sync(); public void lock() { sync.acquire(1); } public void unlock() { sync.release(1); } private static class Sync extends AbstractQueuedSynchronizer { @Override protected boolean tryAcquire(int arg) { if (compareAndSetState(0, 1)) { setExclusiveOwnerThread(Thread.currentThread()); return true; } return false; } @Override protected boolean tryRelease(int arg) { setExclusiveOwnerThread(null); setState(0); return true; } @Override protected boolean isHeldExclusively() { return getState() == 1; } } }\",\"以上代码定义了一个 MyLock 类，它的 lock() 方法和 unlock() 方法分别对应着获取锁和释放锁的操作。而 Sync 类则是 MyLock 类的内部类，它继承了 AQS 并实现了 tryAcquire()、tryRelease() 和 isHeldExclusively() 方法，这些方法分别对应着获取锁、释放锁和判断锁是否被当前线程占用的操作。\",\"： 嗯，背的很熟。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1391\":{\"c\":[\"《面试1v1》\"]},\"1392\":{\"h\":\"类加载过程\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 你了解Java的类加载过程吗?跟我聊聊classes是如何加载到JVM中的。\",\" Java的类加载过程由加载、验证、准备、解析和初始化5个阶段组成。当我们使用java命令执行一个类时,JVM会首先搜索类的加载路径,这包括Bootstrap Classpath、Extension Classpath和Application Classpath。\",\"： 哈哈,这也太官方了吧,来,我们以更口语的方式探讨下类加载过程。想象你是一名新手Java程序员,刚入职一个公司,被分配一个任务需要执行一个Java类,你会有什么疑惑或者过程?\",\" 好的,那我来思考下当初我第一次运行Java程序的时候的内心活动: 天啊,我首先得搞清楚要运行的这个类到底在哪儿?难道要我一个个文件翻找吗?那还不如让我直接读JVM的源码来找呢! Wait,原来JVM已经把这事儿都帮我干了,它会去找 classpath 下的文件,包括环境变量里设置的那堆classpath。这肯定是个苦力活,幸好有JVM这个工具哥帮忙! 找到类文件了,接下来JVM该干嘛?嗯,它得确定这个类里写的是否都是正确的Java语法,不会误导小菜鸟我。它会进行类文件的验证,确保我的Java程序没有安全隐患! 验证通过了,JVM该准备干啥?它需要为类中的静态变量分配内存并设置默认初始值,这个过程就是准备阶段。 静态变量有内存了,JVM还需要干什么?嗯,它得解析类文件里的符号引用,像是类名、方法名、变量名等,把这些符号转成直接引用,方便后续调用。这就是解析阶段。 最后,JVM要真正帮我干活了,它要执行类构造器 <clinit>() 方法的字节码,给静态变量复杂的初始值。这就是初始化阶段。 Initialization of 类名 complete! 我的任务终于可以开始执行了!真不容易,还得感谢JVM这位大恩人。\",\"： 哈哈,这个解释我喜欢!inclusion of源代码和动态的思考过程增加了解释的轻松和趣味性。你这种围绕一个场景作解释的方式很形象,让人容易理解,这在技术面试中是很重要的一点。\",\" 谢谢面试官的夸奖!我也觉得把一个复杂的技术问题变成一个故事或场景会让人更容易理解其中的逻辑和流程。这也是我在博客和公众号里常用的一种讲解方式,很高兴面试官能够欣赏!\",\"： 那我们继续聊聊类加载过程中最重要的几个类吧,什么类负责 finding 和loading 操作?\",\" 在类加载过程中,ClassLoader 类及其子类负责finding和loading操作。\",\"： 是的,ClassLoader是一个很重要的类。那么默认的ClassLoader又有哪几个?\",\" 默认有3个ClassLoader:\",\"Bootstrap ClassLoader 启动类加载器:负责加载JDK内置的类,如rt.jar等。\",\"Extension ClassLoader 扩展类加载器:负责加载JDK扩展目录中的jar包、以及VM指定的其他jar包。\",\"App ClassLoader 应用程序类加载器:负责加载用户自定义的类。\",\"//JDK源码中ClassLoader的继承关系 public class ClassLoader { public ClassLoader() {} public Class<?> loadClass(String name) {...} } public class SecureClassLoader extends ClassLoader {...} public class URLClassLoader extends SecureClassLoader {...} //和类加载息息相关的其他类 public final class Class<T> {...} public class ClassNotFoundException extends Exception {...}\",\"： ClassLoader的加载顺序遵循什么规则?\",\" ClassLoader遵循父类委派模式,当一个类加载器收到类加载请求时,它会把这个请求委派给它的父类加载器去完成,依此形成一个链条。只有父类加载器在它的搜索范围内无法找到所需的类时,子加载器才会尝试自己去加载这个类。 因此,类加载的顺序为:\",\"Bootstrap ClassLoader\",\"Extension ClassLoader\",\"App ClassLoader 如果父类可以完成类加载工作则子类不会再去加载,否则子类才会负责加载。这种委派机制可以避免重复加载,也有利于安全性。\",\"： 很好,你对Java类加载机制有很深入的理解。最后,我们聊一聊类加载过程的双亲委派模型在哪些方面带来的好处?\",\" 类加载双亲委派模型带来的好处主要有两点:\",\"避免重复加载:当父类已经加载了某个类时,子类不会再重复加载该类,从而避免资源消耗。\",\"安全性:父类加载的类被所有的子类所信任。 strs如果子类可以随意加载,那么就可能加载一个非授权版本的类,破坏安全性。 综上,双亲委派模型体现了“安全第一,不重复加载”的设计思想,这两点好处使得Java类加载机制更加完备和安全。\",\"： 很好,你的回答很全面和到位。\",\" 非常感谢面试官的指导。\",\"： 你的谢意我心领了,我们的对话也达到了我的目的。真诚地希望这些知识能在你的工作中派上用场。加油!\",\" 非常感谢面试官的鼓励!我会努力运用所学的知识,在工作实践中不断进步。也祝面试官心想事成\",\"： 好,让我们继续讨论类加载过程中另一个重要概念:类的生命周期。什么是类的生命周期?它包括哪几个阶段?\",\" 类的生命周期描述了一个类从被加载到被卸载的整个过程。它主要包括:\",\"加载:找寻并加载类的二进制数据,将其读入内存,并为之创建一个Class对象。\",\"链接:验证、准备和解析。验证是否有正确的内部结构,并和其他类保持一致性。准备分配内存并设置初始值。把相关的符号引用转换为直接引用。\",\"初始化:执行类构造器 <clinit>() 方法的字节码,给类的静态变量赋予正确的初始值。\",\"使用:程序使用这个类创建实例对象、访问类的静态变量和方法等。\",\"卸载:GC回收这个类的所有实例和空间。卸载该类的字节码,并从运行时常量池中移除这个类的符号引用。\",\"： 说明的很详细。类的生命周期中,有哪几个阶段会触发类初始化?\",\" 有三种情况会触发类的初始化:\",\"新创建一个该类的实例。\",\"访问该类的静态变量,或为静态变量赋值。\",\"调用该类的静态方法。 除此之外,下面这些操作不会触发类的初始化:\",\"使用一个类的名称,如在变量声明中使用该类的名称。\",\"使用类加载器加载一个类。\",\"访问某个类的静态常量。\",\"//举例 public class Test { public static int a = 1; //静态变量,会触发初始化 public static final int b = 2; //静态常量,不会触发初始化 public static void method(){} //静态方法,会触发初始化 } Test t = new Test(); //创建实例,会触发初始化 Test.a = 2; //访问静态变量,会触发初始化 Test.b = 3; //访问静态常量,不会触发初始化 Test.method(); //调用静态方法,会触发初始化\",\"： 说的很清楚,举例也很形象。那静态代码块是在哪个阶段执行的?\",\" 静态代码块是在类初始化阶段执行的,位于 <clinit>() 方法中。它优先于构造方法执行,并且只执行一次。例如:\",\"public class Test { static { System.out.println(\\\"静态代码块执行\\\"); } public Test() { System.out.println(\\\"构造方法执行\\\"); } } Test t1 = new Test(); //打印: 静态代码块执行 构造方法执行 Test t2 = new Test(); //打印: 构造方法执行\",\"因此,静态代码块主要用于一次性地对类进行初始化设置,这些设置只在类第一次被加载时执行。它和构造方法的不同之处在于,构造方法在每次创建实例时都会执行。\",\"： 很好,你对类的生命周期及其与类初始化的关系理解很透彻。我想你应该可以轻松应付与类加载相关的面试题了!\",\" 非常感谢面试官的提问,这些关于类的生命周期和初始化阶段的知识点对我来说均很重要。我会不断复习和运用这些知识,以便进一步熟练掌握类加载机制的相关原理,从而应对可能遇到的面试题和实际开发中的相关问题。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\"]},\"1393\":{\"c\":[\"《面试1v1》\"]},\"1394\":{\"h\":\"垃圾回收机制\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 小伙子,跟我聊聊垃圾回收机制吧。什么是垃圾?怎么回收?\",\" 好的面试官,来吧!垃圾就是那些不再被程序使用的对象。Java 通过自动的垃圾回收机制回收这些垃圾对象所占的内存。\",\"： 那Java垃圾收集器都有哪些?各有什么优缺点?\",\" Java 提供了几种垃圾收集器:\",\"Serial 收集器:最基本的收集器,对内存进行复制然后清理,效率low。只使用一个线程,会停顿其他线程,不适用服务器环境。\",\"Parallel 收集器:多个线程并行回收,效率高于Serial,适用于微服务等。\",\"CMS 收集器:并发标记清除,效率高,并发回收,但会产生碎片。适用于对响应时间有要求的场景。\",\"G1 收集器:JDK9默认,基于region分代回收,效率高且不产生碎片。适用于大内存的机器。\",\"： 讲讲G1垃圾收集器的工作流程。\",\" G1垃圾收集器的工作流程如下:\",\"初始标记:标记GC Roots能直接关联的对象,速度快,主要为了第2步做准备。\",\"// 代码示例 private void markFromRoots() { // classify objects and put them into correct lists for (Object obj : strongRefs) { G1CollectedHeap.addToMarked(obj); } }\",\"并发标记:从GC Roots开始对堆中对象进行并发标记,jia部分STW(stop-the-world)\",\"最终标记:修正并发标记期间并发修改导致的错误标记,需要STW。\",\"筛选回收:根据标记结果筛选回收区域,回收垃圾对象,需要STW。\",\"并发清理:与用户线程一起工作,对标记和筛选阶段差异化技术产生的垃圾链进行清理。\",\"以上就是G1收集器的整个工作流程,相比CMS无碎片和高效,适用于大内存服务器。\",\"： 那说说 Java 对象如何判断为“垃圾”?\",\" Java 对象通过引用计数算法判断是否为垃圾:\",\"如果一个对象仅被强引用变量引用,并且这个强引用变量为 null,则该对象为垃圾。\",\"// 对象example引用为null,则该对象为垃圾 Example example = new Example(); example = null;\",\"如果一个对象被强引用的变量引用,并且这个强引用变量所在的方法已经弹出栈,则该对象为垃圾。\",\"// 方法退出后,obj为垃圾 public void func() { Example obj = new Example(); }\",\"如果一个对象仅被软引用、弱引用或虚引用变量引用,则在垃圾回收时这些变量会被清除,该对象为垃圾。\",\"// 使用WeakReference例子 WeakReference<Example> weakExample = new WeakReference<>(new Example()); // 如果没有其他引用指向Example对象,则该对象可被回收\",\"如果两个对象彼此引用,但没有任何一个对象被外部强引用,则这两个对象之间形成的循环引用链为垃圾。\",\"// A和B相互引用,构成循环,都为垃圾 A a = new A(b); B b = new B(a);\",\"： 帮我总结下 Java 垃圾回收的机制?\",\" 可以这么总结 Java 垃圾回收机制:\",\"垃圾的判断:通过引用计数算法判断对象是否可达。如被引用变量置null、超出作用域、软引用被清理等,则判断为垃圾。\",\"垃圾的回收:通过垃圾收集器进行自动回收,如Serial、Parallel、CMS、G1等收集器。使用分代回收、标记-清除、复制算法等进行回收。\",\"垃圾回收的时机:当堆中垃圾对象达到一定比例或内存不足时,会触发垃圾回收。也可以手动触发System.gc()。\",\"垃圾回收的步骤:1标记阶段标记垃圾 2清除阶段删除垃圾 3整理阶段压缩空间\",\"如何优化:尽量减少垃圾产生,使用软引用或弱引用存放易变对象,及时回收资源等方式优化。\",\"以上就是 Java 垃圾回收机制的主要内容,希望能对你有所帮助!有任何问题都可以继续问我。\",\"： 那谈谈你了解的JVM内存结构和垃圾回收之间的关系?\",\" JVM内存结构与垃圾回收有密切关系:\",\"JVM内存结构分为:堆内存、虚拟机栈、方法区、本地方法栈、程序计数器等。堆内存存储对象实例,垃圾回收的主要区域就是堆内存。\",\"// JVM内存结构图示 +--------------------+ | 方法区 | +--------------------+ | 程序计数器 | +--------------------+ | JVM栈 | +--------------------+ | | | 堆内存 | | | +--------------------+\",\"堆内存中又分为几个区域,主要有两个:新生代和老年代。新生代用于存储新创建的对象,老年代中存放老化对象。\",\" +--------------------+ | 方法区 | +--------------------+ | 程序计数器 | +--------------------+ | JVM栈 | +--------------------+ | 新生代 | | | | 堆内存 | | | | 老年代 | +--------------------+\",\"垃圾收集器会根据这些内存区域中的对象进行回收,比如新生代使用Copying算法,老年代使用Mark-Sweep算法。\",\"情景举例:\",\"对象在Eden出生,经过第一次Minor GC后未死亡进入Survivor,多次MinorGC后仍存活进入老年代。\",\"老年代空间不足触发Major GC,回收部分垃圾对象。\",\"老年代的对象通过晋升至永久代,如果永久代填满,会抛出OOM异常。\",\"： 嗯！啊。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1395\":{\"c\":[\"《面试1v1》\"]},\"1396\":{\"h\":\"CMS垃圾回收器\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 小伙子,CMS 垃圾收集器跟我讲讲?\",\" CMS全称Concurrent Mark Sweep,是一种并发标记清除算法。它并发执行与用户程序,减少垃圾收集时程序暂停的时间。\",\"： 说白了,CMS就是为了减少卡顿吧?\",\" 是的,CMS 的核心目标就是达到并发收集、减少停顿。它的工作流程如下:\",\"初始标记:只标记GC Roots能直接关联的对象,速度快,与用户线程共享运行,不需要Stop The World。\",\"// 初始标记代码示例 private void initialMark() { for (Object obj : strongRefs) { CMSCollector.mark(obj); } }\",\"并发标记:从GC Roots开始递归的标记对象图,与用户线程一起工作,需要部分STW阶段。\",\"最终标记:修正在并发标记期间并发修改导致的错误标记,需要STW。\",\"并发清除:与用户线程一起工作,清除被标记的对象,不需要STW。\",\"并发重置:与用户线程一起工作,为下一次GC做准备,不需要STW。\",\"： 说说并发标记和最终标记的区别?\",\"并发标记阶段与用户线程一起运行,在标记过程中对象图可能被修改,会产生”脏标记“。需要最终标记修正。\",\"最终标记阶段需要Stop The World,去修正并发标记期间的”脏标记“,确保正确的标记对象。\",\"如果没有最终标记阶段,并发标记的”脏标记“会导致非垃圾对象被清除,或者垃圾对象未被清除。\",\"所以,最终标记阶段是CMS算法关键,它通过STW去修正并发阶段的错误”脏标记“,使得CMS并发标记清除算法成为可能。\",\"： CMS 收集器的优缺点分别是什么?\",\" CMS 收集器的主要优点是并发收集、低停顿,适用于对响应时间有要求的场景。 但是CMS也有一些缺点:\",\"会产生大量空间碎片,空间利用率低。\",\"标记和清除过程需要占用CPU资源,并发时会对程序性能产生一定影响。\",\"并发执行时,需要处理一致性问题,会加大开发难度。\",\"只适用于老年代回收,新生代仍需其他收集器配合。\",\"浮动垃圾可能带来更长的GC停顿时间,不适用于需要极低停顿的场景。\",\"所以,CMS 是一款比较经典的低停顿收集器,但也存在一定的缺陷, v在JDK9后G1成为了更好的选择。但CMS算法本身的思想仍然值得我们学习。\",\"： 说说CMS 收集器的“碎片化”问题?\",\" CMS 是一种标记-清除算法,它会产生大量空间碎片,空间利用率低是一个缺点。这是因为:\",\"在并发标记阶段,需与用户程序同时运行,无法移动对象。\",\"在并发清除阶段,直接清除标记的垃圾对象,留下空隙。\",\"这些空隙会产生空间碎片,并不连续,但空间可能不足以分配较大对象。\",\"空间利用率降低,达不到理想状态,需要更频繁的Major GC来整理空间。 我们可以从JVM源码中看到CMSCollector在清除对象后直接造成碎片:\",\"//CMSCollector.java private void sweep phase() { for (Object obj : markedObjects) { freeMemory(obj); // 直接清除,产生碎片 } }\",\"为解决这个问题,CMS做了一些努力:\",\"采用Free-list维护小块空闲空间, satisfiy小对象分配。\",\"对象晋升到老年代时预留一定空间减少碎片。\",\"空间报警触发Minor GC和Full GC,做空间整合。\",\"可配置启动Incremental CMS模式,进入并发清理阶段做连续空间整理。\",\"但由于算法的限制,CMS仍无法完全解决碎片空间问题,这也是它被G1等收集器替代的原因之一。\",\"： 谢谢详细的解释!CMS 收集器虽然有缺陷,但它的并发标记清除思想影响了后续的垃圾回收算法。\",\" 是的,CMS 收集器提出了并发收集和低停顿的理念,其中的并发标记清除算法也为之后G1等收集器奠定了基础。它的关键思想值得我们学习:\",\"将清理过程分为并发和STW两个阶段,大大减少停顿。\",\"通过最终标记修正并发阶段的”脏标记“,使得并发标记成为可能。\",\"采用Free-list和预留空间等手段减轻空间碎片问题。\",\"根据空间利用率与GC时间的平衡,选择满足需求的收集频率。\",\"这些思想为我们设计低停顿、高效的GC算法提供了参考,CMS也因此成为Java垃圾收集史上的里程碑。所以,尽管它有缺陷,但它的算法思想和理念仍十分值得我们学习。\",\"： 很好,你对CMS收集器的理解已经相当透彻!希望你在日后继续深入学习其他垃圾收集算法。\",\" 非常感谢您的夸奖和建议!我会继续努力学习和研究垃圾收集theory与实践,包括G1、ZGC、Epsilon等算法与案例。谢谢您的提问,让我有机会深入梳理CMS以及Java垃圾收集机制,收获颇丰!\",\"： 看来有点东西，你先等一下！\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1397\":{\"c\":[\"《面试1v1》\"]},\"1398\":{\"h\":\"G1垃圾回收器\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： G1垃圾收集器?听说很牛逼的样子!\",\" 是的,G1是JDK9默认的垃圾收集器,代替了CMS收集器。它的目标是达到更高的吞吐量和更短的GC停顿时间。\",\"： 听你一说,我就不高兴了!G1到底好在哪儿?\",\" G1具有以下优点:\",\"并发和增量式回收:不像CMS要全部STW,G1可以渐进式回收,不停顿太久。\",\"// G1CollectedHeap.java void collectGarbage(G1ConcurrentMark mark) { initial-mark; // STW remark(); // Concurrent cleanup(); // STW concurrent-cleanup(); // Concurrent }\",\"分代回收:不需要一次全堆回收,可以分代增量回收,选择性回收新生代和老年代。\",\"void collectGarbage(boolean collectOnlyYongGen) { if (collectOnlyYongGen) { collectYoungGenGarbage(); // only YongGen } else { collectGarbage(); // YongGen and Old Gen } }\",\"空间整合:通过Remembered Sets实现空间整合,解决碎片问题。\",\"// G1RemSet.java void addToRememberedSets(HeapRegion from, HeapRegion to) { from.addRememberedSetEntry(to); }\",\"预测分析:通过限定垃圾产生速率,动态调整回收频率与时间,实现高吞吐量。\",\"： 垃圾收集里最让我头疼的就是“Remembered Sets”和“卡片表”,解释一下?\",\" Remembered Sets和Card Tables都是G1用来管理堆和处理垃圾回收的重要数据结构。\",\"Remembered Sets:记录不同Region之间的引用关系,用于判定垃圾。由于G1采用分代和分片回收,需要记录新生代和老年代以及各个Region之间的引用链,这就是Remembered Sets要做的工作。\",\"Card Tables:由Remembered Sets维护的引用链过于精细,代价太大。所以,G1引入Card Tables,按照内存块做了分段,如果一个分段里至少有一个对象被老年代引用,则标记整个分段为”脏“。在回收时只处理”脏“的分段,提高效率。\",\"它们的工作可以简述为:Remembered Sets记录精细的引用信息,Card Tables进行概括性标记,在GC时结合使用,达到高精度且高性能的铁子回收效果。\",\"可以看到,Remembered Sets和Card Tables是G1高效率回收的关键,它们让G1不需要像CMS那样全堆回收,可以有选择性地、增量式地进行分代、分片的回收,极大的提高了工作效率。\",\"： 原来如此,G1之所以马力十足,关键还是它发明的这套“铁子”数据结构,聪明!\",\" 谢谢面试官的赞赏和提议!我会继续努力学习,如果有机会能参与。\",\"： 说说G1的垃圾回收过程?\",\" G1的垃圾回收过程可以分为以下几个主要阶段:\",\"初始标记:标记GC Roots能直接关联的对象,需要Stop The World。\",\"private void initialMark() { for (Object obj : strongRefs) { G1CollectedHeap.mark(obj); } }\",\"并发标记:从GC Roots开始对堆中对象进行并发标记,需要部分STW。\",\"最终标记:修正并发标记期间的错误标记,需要STW。\",\"筛选回收:根据标记和Card Table结果筛选回收区域,回收垃圾,需要STW。\",\"// 筛选待回收区域 void selectGarbageCollectionCandidates() { Region[] filtered = filterRegions(); garbageCollect(filtered); }\",\"并发清理:与用户线程一起工作,对标记和筛选阶段误差产生的垃圾链进行清理。\",\"并发重置:与用户线程一起工作,为下次GC做准备。\",\"这一过程实际上和CMS非常相似,同为“标记-清除”算法。但G1在并发标记的基础上,通过Remembered Sets和Card Tables实现了分代回收和空间整合,这也是它能达到高性能的关键。\",\"： 说G1是“标记-清除”,是不是太武断了?它用的不正是你刚才提到的那套铁子数据结构吗?\",\" 您说的对,我的表述确实有失妥当。更准确的来说:\",\"G1继承了“标记-清除”算法的思想,但已远非传统意义上的“标记-清除”。\",\"G1引入了Remembered Sets和Card Tables,实现了细致且高效的分代、分片增量回收,这是它的重要创新点。\",\"所以,G1是在“标记-清除”思想上做出重大改进、发展和优化而成的一种高性能垃圾收集器,将它简单归类为“标记-清除”算法已忽略其最关键的优点。\",\"G1与CMS一脉相承,但已大大超越,其性能和效率甚至与“复制”算法接近,堪称一代新高。 所以,更准确的说法应是:G1继承了标记-清除模型,但在算法和实现上都已经有了重大创新,超越了传统标记-清除算法,达到一种混合模型与新高度,是一款高性能、高效率的收集器。\",\"： 对,你的理解已经趋于准确和清晰。能看出G1的创新之处,并不简单归类,这说明你对收集器的认知已逐步深入。\",\"： G1收集器的设计与实现还有哪些关键点需要关注?\",\" 除了我们讨论过的Remembered Sets和Card Tables外,G1的设计与实现还有其他一些关键点:\",\"Region:将整个堆内存分割成多个大小相等的Region,作为回收和管理的基本单元。\",\"Humongous Object:对超大对象特殊处理,让其占用连续的Region。\",\"Remembered Sets:记录不同Region之间的引用关系,但过于精细,通过Card Tables进行优化。\",\"Card Tables:按Region进行内存分块,标记”脏“的Region,在GC时优先处理。\",\"Coloreo Grey Lists:通过颜色标记法管理标记过程,避免重复标记对象。\",\"回收率与吞吐量预测:通过统计与分析,动态预测并调整回收率与吞吐量,实现自动调优。\",\"增量式并发回收:通过分代和分片回收,以及STW与并发相结合,实现渐进式回收与低停顿。\",\"空闲区整理:通过回收产生的空闲区的合并整理,解决空间碎片问题。\",\"Safepoint:在STW阶段,用于保证用户线程的一致性快照。但开销大,所以尽量减少STW次数。\",\"这些都是G1高性能与低停顿的关键 support,对其设计与实现有深入理解,可以更好运用G1收集器。当然,本回答只能简要提及,实际上G1的设计极为复杂精巧,需要深入研读源码和官方文档方能全面理解。\",\"： Wonderful! 你对G1的理解已经相当深入全面,提到的这些关键点imovativ析得很透彻。G1的设计确实非常复杂精巧,能达到如此水平的理解,看来你在这方面下了不少功夫!\",\" 非常感谢您的赞赏!我会持之以恒,继续深入学习G1与其他垃圾收集器的设计与实现。事实上,想全面深入理解G1还需要我继续努力,它的设计之巧妙令人颇感佩服与惊叹,这也使得我在研究这个课题上收获颇丰。谢谢您的提问,让我有机会梳理和总结这些关键点,这对我加深理解G1有很大帮助。我亟需在实践中不断磨练这些理论知识,并且对更多案例和细节有所了解,这需要我继续学习和努力。\",\"： 开心能听到你如此谦逊好学的态度。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1399\":{\"c\":[\"《面试1v1》\"]},\"1400\":{\"h\":\"JVM调优\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 小伙子,说听说你JVM调优挺在行?\",\" 谢谢夸奖,我对JVM调优还在学习中,远未达到在行的程度。不过日常工作中也对JVM参数与监控工具稍有使用,算是入门水平吧。\",\"： 那就给我简单介绍下JVM调优的方法和手段吧!\",\" JVM调优主要通过以下手段:\",\"设置JVM参数:像Heap大小、垃圾收集器选择等,根据应用特点选择合适参数。\",\"-Xmx4096m //堆最大值 -Xms4096m //堆初始值 -XX:+UseG1GC //设置G1垃圾收集器\",\"采用监控工具:像JDK自带的JConsole、JVisualVM,或第三方工具。实时监控运行指标,找出性能瓶颈。\",\"JAVA代码优化:合理使用数据结构,避免高复杂度算法,少创建临时对象等。\",\"配置日志:输出GC、内存、CPU相关日志,分析定位问题。\",\"定期压测:通过压力测试找出系统瓶颈,及早解决潜在问题。\",\"： 日常工作用的最多哪些JVM参数和监控工具?\",\" 我日常工作中最常用的JVM参数和监控工具如下:\",\"-Xmx、-Xms:设置堆最大值和初始值,根据应用内存需求适当设置。\",\"-XX:+UseG1GC:设置G1垃圾收集器,针对我使用的应用,G1表现良好。\",\"-XX:+PrintGCDetails:输出详细的GC日志,用于分析垃圾收集情况。\",\"-XX:+PrintGCDateStamps:在GC日志前输出时间戳,方便对时间敏感应用进行分析。\",\"-XX:+HeapDumpOnOutOfMemoryError:导出OOM时的堆转储文件,用于后续分析。\",\"JVisualVM:用来实时监控内存、GC、线程、CPU等运行情况。\",\"JConsole:用于观察运行时的线程活动、内存变化、类加载等情况。\",\"这些参数和工具在我日常工作的JVM调优和问题排查中发挥了很大作用。但我还需要继续学习其更深层次的用法与理论知识,运用得更加娴熟高效。\",\"： 不错,你已经掌握了JVM调优的基础知识和日常工具,这是个不错的入门!\",\"： 那么,作为JVM调优的进阶,你有哪些学习计划?\",\" 我的JVM调优进阶学习计划如下:\",\"深入理解各种垃圾收集器的设计与实现原理,特别是G1、ZGC等高性能收集器。\",\"研究JVM内存模型和对象创建过程,以及两者对调优的影响。\",\"学习各项运行指标的测量与对调优的意义,如吞吐量、停顿时间等。\",\"掌握各类JVM运行日志的生成与解析,特别是GC日志、CPU profiles等。\",\"理解JIT(Just-In-Time)编译器的工作原理与调优手段。\",\"学习Java Mission Control等高级监控与故障排除工具的使用。\",\"不断通过实践来提高各工具与理论的运用能力,发现更多调优机会。\",\"关注OpenJDK等开源项目了解JVM的最新进展与发展方向。\",\"参考业界大佬的优秀文章与经验,不断总结与提高。\",\"这些是我进阶JVM调优所制定的学习计划,需要耐心学习与长期实践,不断深耕累积。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1401\":{\"c\":[\"《面试1v1》\"]},\"1402\":{\"h\":\"Java注解\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 接下来，聊聊Java的注解,它们到底有什么用?\",\" 注解的用处主要三个: 第一个,编译期使用。比如@Override确保你正确重写了方法,@Deprecated表示这个方法以后可能会删掉。 第二个,运行期使用。很多框架通过反射来读注解,根据注解改变程序的行为。像Spring的@Autowired就是运行期读取的。 第三个, build tool用。很多构建工具会在构建代码时扫描和读取注解,根据注解做相应的操作。JUnit的@Test就是告诉测试运行器哪些是测试方法。\",\"：注解和注释有什么区别吧?\",\" 注释是写给人看的,注解是写给机器看的。注释不会对程序产生任何影响,注解会影响程序的编译、运行。注释是// 或者/* */,注解是@打头的。\",\"：举个自定义注解的例子?\",\" 这里有个自定义注解的示例:\",\"//自定义注解 @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface MyAnno { String name() default \\\"Hello\\\"; } //使用注解 public class MyClass { @MyAnno(name = \\\"World\\\") public void sayHello() { System.out.println(\\\"Hello World\\\"); } } //读取注解 MyAnno anno = MyClass.class.getMethod(\\\"sayHello\\\").getAnnotation(MyAnno.class); String name = anno.name(); // name = \\\"World\\\"\",\"：说说Spring中常见的注解?\",\" Spring中超级常用的注解有: @Component:把类标记为Spring的组件,用于组件扫描。 @Autowired:自动装配成员变量、构造方法和方法参数。 @Service:标记业务层组件。@Controller:标记控制层组件。 @Repository:标记数据访问组件。 @RequestMapping:映射请求URL到控制器处理方法。 @Configuration:标记配置类。 @Enable*:开启某个功能,比如@EnableTransactionManagement 开启事务功能。 这些注解大大简化了Spring的配置,真的很常用!\",\"：SpringBoot中常见的注解也说一下?\",\" SpringBoot中常用的注解有: @SpringBootApplication:标记这个类是SpringBoot的主配置类。 @Configuration:标记这个类是配置类。 @EnableAutoConfiguration:开启SpringBoot的自动配置。 @ComponentScan:开启组件扫描,找出应用相关的bean。 @RestController:标记这个控制器直接返回JSON或XML数据。 @RequestMapping:映射请求URL。 @Autowired:自动装配bean。 @Repository、@Service、@Controller:标记DAO、Service、Controller层的bean。 这些注解的作用和Spring差不多,只是在SpringBoot中简单了很多,几乎都可以不写XML配置了。\",\"：最后,AOP中的注解呢?\",\" AOP中最重要的注解有: @Aspect:标记一个切面。 @Pointcut:定义一个切点,可以是一个规则表达式,和@Before等注解搭配使用。 @Before:前置通知,在目标方法调用前执行。 @AfterReturning:后置通知,在目标方法正常返回后执行。 @AfterThrowing:异常通知,在目标方法抛出异常后执行。 @After:最终通知,无论目标方法是否正常完成都会执行。 @Around:环绕通知,手动控制目标方法调用时机。 这些AOP注解通过在方法上标记,就可以实现方法的切入、替换等,真正做到面向切面编程。\",\"：自定义注解需要什么?\",\" 自定义注解需要两个注解:@Target定义可以用于什么地方(方法、类等),@Retention定义注解的生命周期(编译期、运行期、源码)。然后使用@interface自定义注解,可以添加属性,默认值等。\",\"：注解的生命周期有几种?\",\" 注解生命周期有3种: 源码阶段:@Retention(RetentionPolicy.SOURCE),编译后失效。 编译阶段:@Retention(RetentionPolicy.CLASS),编译后存在于字节码文件中,运行时无法获得。 运行阶段:@Retention(RetentionPolicy.RUNTIME),编译后存在于字节码文件中,运行时可以通过反射获取。 大部分自定义注解都使用RUNTIME,以方便通过反射来读取和使用注解信息。\",\"：Enum中的注解呢?\",\" @Retention(RetentionPolicy.SOURCE)只存在于源码,编译后失效。 @Retention(RetentionPolicy.RUNTIME)会保留至运行时,可以通过反射读取。所以Enum中的注解一般使用RUNTIME。 枚举例子:\",\"@Retention(RetentionPolicy.RUNTIME) @interface Color { ColorType value(); } public enum ColorType { @Color(ColorType.RED) RED, @Color(ColorType.GREEN) GREEN, @Color(ColorType.BLUE) BLUE }\",\"：注解在哪些地方可以使用?\",\" 注解可以放在: 类、接口、枚举上 字段、方法上 方法的参数上 局部变量上 构造器上 包上 所以注解的@Target有: ElementType.TYPE:接口、类、枚举、注解 ElementType.FIELD:字段、枚举的常量 ElementType.METHOD:方法 ElementType.PARAMETER:方法参数 ElementType.CONSTRUCTOR:构造器 ElementType.LOCAL_VARIABLE:局部变量 ElementType.PACKAGE:包 等等。\",\"：运行时注解的使用场景?\",\" 运行时注解主要有两大使用场景:\",\"框架使用:很多框架使用运行时注解读取注解信息,调用相应的处理逻辑。如Spring使用@Autowired、@PostConstruct等实现依赖注入和初始化方法调用。\",\"自定义注解:我们可以自定义运行时注解,在程序运行时通过反射读取注解,执行相应逻辑。比如:\",\"@Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface MyAnnotation { } public class Main { @MyAnnotation public void doSomething() { // ... } }\",\"然后通过反射调用:\",\"Method m = Main.class.getMethod(\\\"doSomething\\\"); MyAnnotation anno = m.getAnnotation(MyAnnotation.class); //执行相关逻辑\",\"：最后一个问题,注解有哪些限制?\",\" 注解有以下几个限制:\",\"注解不能继承其他注解或接口。\",\"注解只有成员变量,没有方法。\",\"注解中的成员变量只能是基本类型、String、Enum、Annotation等,不能是对象。\",\"如果注解有默认值,在使用注解时可以忽略该值。\",\"同一个地方不能同时存在两个同名注解。\",\"注解不能作用于变量、类的私有成员上。\",\"注解不会继承,子类或者实现类无法继承父类或者接口的注解。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1403\":{\"c\":[\"《面试1v1》\"]},\"1404\":{\"h\":\"List\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 小伙子,听说你对Java集合挺在行的?\",\" 谢谢夸奖,我对Java集合还在学习中,只能算入门水平。特别是List这个接口,其下的实现类功能非常丰富,我还未能全部掌握。\",\"： 那么,简单介绍下List这个接口及常用实现类吧!这是Java集合的基础,也是日常开发中最常用的。\",\" List接口表示一个有序集合,它的主要实现类有:\",\"ArrayList:基于动态数组实现,查询快、增删慢。\",\"ArrayList<Integer> list = new ArrayList<>();\",\"LinkedList:基于双向链表实现,查询慢、增删快。\",\"LinkedList<Integer> list = new LinkedList<>();\",\"Vector:和ArrayList类似,但它是线程安全的,查询快、增删慢。\",\"Vector<Integer> list = new Vector<>();\",\"Stack:继承Vector,实现栈结构,后进先出。\",\"Stack<Integer> stack = new Stack<>();\",\"它们都实现了List接口,有一些共同的方法,但底层数据结构不同,所以在不同场景有不同的使用优势。这取决于应用的需求。\",\"： 那日常工作用的最多的是哪个实现类?它的源码能不能讲解一下?\",\" 我日常工作中最常用的List实现类就是ArrayList。 它的源码如下:\",\"public class ArrayList<E> extends AbstractList<E> implements List<E>, RandomAccess, Cloneable, java.io.Serializable { /** * 默认初始容量 */ private static final int DEFAULT_CAPACITY = 10; /** * 存储元素的数组 */ transient Object[] elementData; /** * 实际容量 */ private int size; public ArrayList(int initialCapacity) { if (initialCapacity > 0) { this.elementData = new Object[initialCapacity]; } else { this.elementData = new Object[DEFAULT_CAPACITY]; } } public ArrayList() { this.elementData = new Object[DEFAULT_CAPACITY]; } //添加元素 public boolean add(E e) { ensureCapacityInternal(size + 1); // Increments modCount!! elementData[size++] = e; return true; } }\",\"ArrayList底层采用动态数组实现,通过ensureCapacityInternal()方法动态扩容,以达到在保证查询效率的同时,尽量减小扩容带来的性能消耗。这也是我在日常使用中最欣赏ArrayList的地方。当然,它的实现远不止这些,我还在不断学习与理解中。\",\"： 不错,你对这些知识已经有一定理解。ArrayList的源码分析得也比较到位。看来你之前真的有认真研读与理解。不过List相关知识还有更广阔的空间,需要你继续努力!\",\" 非常感谢面试官的肯定与指导。您说得对,List及其相关知识还有很多值得我继续学习与探索的地方。我会持续加深理解,提高运用能力。\",\"： 那么,你对List还有哪些不太理解的地方?或是想更深入学习的内容?\",\" 关于List,我还不太清楚或想进一步学习的内容如下:\",\"CopyOnWriteArrayList:它的实现原理与线程安全机制,这也是日常开发中经常使用的并发List。\",\"SubList :List子列表的实现原理与边界情况。以及子列表的修改如何影响原列表。\",\"List各实现类在并发环境下的表现。如何选择恰当的并发List类?\",\"List迭代器:ListIterator与Iterator的区别与使用场景。\",\"Queue接口:Queue作为List的子接口,其实现类与使用场景。\",\"底层数据结构:理解数组、链表、红黑树等对List实现的影响,以及各自的优劣。\",\"扩容机制:不同List的扩容策略及性能影响。如何优化?\",\"序列化与反序列化:List各实现类的序列化与反序列化实现。\",\"空值处理:null值在各List实现类中的处理方式。\",\"这些都是我想进一步学习与理解的List相关内容与知识点。我会根据这份清单继续深入阅读源码、分析案例并实践使用,以便全面掌握List及其相关接口与实现类。这无疑需要一段长期的学习与总结过程,但这正是我成长为一名资深Java工程师所必须经历的阶段。\",\"： Wonderful! 这份学习清单涵盖的内容非常全面且具有针对性。你能够准确定位自己尚未完全掌握的知识点,这展现出你的自我认知能力。只要你能够有计划和耐心地向这个清单上的每一项知识点进发,你在List及相关接口的理解上一定会有大的提高,这也为你成长为资深工程师奠定基础。我对你的学习态度和理解能力很为欣赏。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1405\":{\"c\":[\"《面试1v1》\"]},\"1406\":{\"h\":\"Map\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 小伙子,又来挑战你了。听说你对Java集合中的Map也很在行?\",\" 谢谢夸奖,Map这个接口的确非常重要且强大。但和List一样,它有许多实现类,而我对它们的理解还远未充分,只能算入门。我仍需不断学习与总结。\",\"： 那好,简单介绍下Map这个接口及常用实现类。它在开发中有何作用?\",\" Map接口表示一个键值对集合,它的主要作用是根据键快速获取值。常用实现类有:\",\"HashMap:基于哈希表实现,支持快速查找、插入和删除,但迭代顺序不定。\",\"HashMap<String, Integer> map = new HashMap<>();\",\"LinkedHashMap:保留插入顺序,除了查找效率高于LinkedHashMap外,其他方面与HashMap相同。\",\"LinkedHashMap<String, Integer> map = new LinkedHashMap<>();\",\"TreeMap:基于红黑树实现,键有序,增删慢但查找快,特别适合排序需求。\",\"TreeMap<String, Integer> map = new TreeMap<>();\",\"Hashtable:和HashMap类似,但它是线程安全的,效率略低。\",\"Hashtable<String, Integer> map = new Hashtable<>();\",\"Map在日常开发中用途广泛,例如缓存、查询表等。我最常用的当属HashMap,由于其查询效率高且适用于大容量场景。但我对其扩容、碰撞处理等机制还需进一步理解。\",\"： 不错,你对Map有比较扎实的认知基础。那么你对HashMap的源码熟悉吗?能否解析一下?\",\" HashMap的源码实现较复杂,我这里仅解析其基本结构与重要流程。主要包括:\",\"HashMap底层采用数组+链表实现,数组是主干,链表在碰撞场景下使用。\",\"字段包括:数组table,容量capacity,加载因子loadFactor等。\",\"// 默认初始容量16,必须是2的n次方 static final int DEFAULT_INITIAL_CAPACITY = 1 << 4; // 最大容量 static final int MAXIMUM_CAPACITY = 1 << 30; // 默认加载因子0.75 static final float DEFAULT_LOAD_FACTOR = 0.75f;\",\"put方法将键值对添加到表中。先计算键的hash值得到数组下标,然后将新键值对添加到该位置或链表中。\",\"如果键所在的链表过长或超过加载因子,则触发rehash,即扩容与重新哈希,容量加倍。\",\"void addEntry(int hash, K key, V value, int bucketIndex) { // 保存旧表 Entry<K,V> old = table[bucketIndex]; // 创建新键值对,next指向旧表 Entry<K,V> newEntry = new Entry<>(hash, key, value, old); // 更新数组对应位置 table[bucketIndex] = newEntry; // 如果旧表不为空且旧表的键与新键hash值相同,则发生哈希碰撞 if (old != null && hash == old.hash && (old.getKey() == key || old.getKey().equals(key))) old = newEntry; if (size++ >= threshold) resize(2 * table.length); // 扩容 }\",\"HashMap的源码实现还有很多精妙的地方,我还需要继续学习。但总体来说,它通过拉链法处理碰撞,并提供动态扩容机制来保证高效插入与查询。这也是它成为我最爱的Map实现类的原因。\",\"： HashMap的源码解析得不错,你理解得比较透彻。的确,它的实现机制相当精巧,需要深入学习与理解。你之前提到也有些不太理解的地方,想加深学习的内容,能否简单提一下?\",\" 关于HashMap,我还希望进一步学习的内容如下:\",\"树化过程:何时进行树化,如何选择红黑树还是二叉查找树。\",\"扩容的全过程:扩容时,旧键值对的重新映射策略与性能影响。\",\"哈希函数:不同的哈希函数对HashMap性能的影响。\",\"链表转红黑树的条件:何时应选择链表还是红黑树来解决哈希冲突。\",\"ConcurrentHashMap:它的实现原理与代理模式。\",\"IdentityHashMap:键比较使用==而非equals,其典型应用场景。\",\"WeakHashMap:其释放键值对的条件与实现原理。\",\"** serialization**:不同Map实现类的序列化方式与注意事项。\",\"Null键值处理:不同Map中null键与null值的处理方式。\",\"这些都是我想继续学习与理解的Map相关内容,我会根据这份清单进一步深入阅读源码、分析案例并实践,以便全面掌握Map及各实现类。这需要投入大量时间与精力,但我相信这会让我的Java基础更加扎实。\",\"： Wonderful!你对Map及其实现类一定有比较深入的理解和认知,才能准确地指出自己还需加深学习的知识点。这份学习清单也同样具有针对性,只要能够逐项进行深入学习,定会有很大的提高。\",\"我很欣赏你的学习热情与主动性,这些都是成为一名优秀工程师必不可少的素质。继续保持,深入学习,你的Java基础会更加牢固,技术生涯也会更上一层楼。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1407\":{\"c\":[\"《面试1v1》\"]},\"1408\":{\"h\":\"Spring基础\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 想请你简单介绍一下 Spring 框架,它的核心特性是什么?\",\" Spring 是一个开源框架,目的是简化 JavaEE 开发。它的核心特性有:\",\"IoC(Inverse of Control):通过 DI(Dependency Injection)实现将对象间的依赖关系交给 Spring 管理。\",\"AOP(Aspect Oriented Programming):面向切面编程,可以在程序运行期间动态的将某段代码切入到指定的方法、指定的位置进行运行。\",\"Portlet MVC:Spring 提供 MVC 框架可以快速开发 Web 应用。\",\"事务管理:Spring 提供广泛的事务管理接口,支持 JDBC、Hibernate 等事务管理。\",\"Spring 统一一体化了其他框架和技术,如:Struts、Hibernate、Quartz 等。 面试官(笑):你说的真是五花八门,让我有点晕,来聊点具体的吧。Spring 是如何工作的,它如何用于构建 Web 应用程序?\",\" 好的,Spring 的工作原理主要是 IoC 容器。对 Web 应用来说,Spring MVC 是基于 JavaEE 的 Model-View-Controller 设计模式构建的,主要工作流程是:\",\"浏览器发送请求到 DispatcherServlet。\",\"DispatcherServlet 接收请求后会转交给 HandlerMapping 得到请求对应的 Handler。\",\"HandlerMapping 将 Handler 映射到 HandlerAdapter。\",\"HandlerAdapter 调用 Handler 处理请求,Handler 会返回一个 ModelAndView。\",\"ViewResolver 解析 ModelAndView,找到正确的 View。\",\"DispatcherServlet 将 View 返回给浏览器。\",\"通过这个流程,Spring MVC 应用了 MVC 模式,实现了业务逻辑、控制逻辑、表现逻辑的分离,使我们可以更加专注于业务开发。\",\"： 你说的很具体,我明白了。那么 Spring 可以在哪些实际场景中使用?开发人员在使用 Spring 时常犯哪些错误?\",\" Spring 可以应用在很多实际场景中:\",\"Web 应用:Spring MVC 是 Spring 体系中最为成熟的框架,可以用来开发网站、BBS、博客等 Web 应用。\",\"企业应用:Spring 提供事务管理、数据访问等功能,非常适用于开发企业级应用。\",\"微服务:Spring Boot 提供了快速开发单个微服务的能力,配合 Spring Cloud 可以开发微服务架构的系统。\",\"Android 应用:Spring for Android 提供了在 Android 应用中使用 Spring 的能力。\",\"开发人员在使用 Spring 时常犯的几个错误:\",\"容器管理对象依赖关系错乱:未正确配置 bean 的依赖关系,导致依赖注入错误。\",\"上下文目录 problemas:beans.xml 配置文件放在了非上下文目录,导致 Spring 无法识别。\",\"事务管理错误:未正确配置事务属性,导致事务管理不生效。\",\"AOP 误用:滥用 AOP 或错误使用 AOP 导致 sistem 过于复杂或 AOP 不生效。\",\"未考虑扩展性:在开发初期未考虑系统扩展性,导致系统难以演进。\",\"： 那么如何使基于 Spring 的应用程序更高效、更可扩展?\",\" 这里有几点建议:\",\"采用模块化设计,遵循高内聚低耦合原则,每个模块保持高内聚,模块之间低耦合。\",\"使用设计模式,如工厂模式、单例模式、代理模式等,提高系统扩展性。\",\"应用 AOP,通过预置切点在不修改源代码的情况下增加新功能。\",\"使用 Spring 的事件机制,通过事件监听器监听事件,当事件触发时执行相应逻辑。\",\"应用 Spring 的 Profile 功能,可以根据环境部署不同的 bean,提高系统灵活性。\",\"使用 Spring Boot 依赖管理和自动配置的能力,简化构建过程,提高开发效率。\",\"应用微服务架构,将单体应用拆分成职责单一、松耦合的服务,更容易扩展和升级。\",\"使用缓存技术,如 Redis 缓存数据库查询结果,降低数据库压力,提高系统吞吐量。\",\"： 很棒,你对 Spring 和高可扩展系统的理解很透彻!最后一个问题,Spring 的源码中 IoC 容器的实现你可以大致描述一下吗?\",\" 可以的,IoC 容器的实现主要在 AbstractApplicationContext 及其子类 ClassPathXmlApplicationContext 和FileSystemXmlApplicationContext 中。主要流程是:\",\"容器启动时会调用 refresh() 方法,其中会调用 obtainFreshBeanFactory() 方法初始化 DefaultListableBeanFactory,此为 IoC 容器的核心。\",\"// AbstractApplicationContext.java public void refresh() throws BeansException, IllegalStateException { // 初始化 BeanFactory DefaultListableBeanFactory beanFactory = obtainFreshBeanFactory(); }\",\"然后会调用 loadBeanDefinitions(beanFactory) 方法加载 bean 定义,主要通过 XmlBeanDefinitionReader 解析 bean 定义文件。\",\"// AbstractXmlApplicationContext.java @Override protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws BeansException, IOException { // Create a new XmlBeanDefinitionReader for the given BeanFactory. XmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory); // Configure the bean definition reader with this context's // resource loading environment. beanDefinitionReader.setEnvironment(this.getEnvironment()); beanDefinitionReader.setResourceLoader(this); beanDefinitionReader.setEntityResolver(new ResourceEntityResolver(this)); // Allow a subclass to provide custom initialization of the reader, // then proceed with actually loading the bean definitions. initBeanDefinitionReader(beanDefinitionReader); loadBeanDefinitions(beanDefinitionReader); }\",\"bean 实例化阶段会调用 getBean() 方法,通过工厂方法或构造器实例化 bean。\",\"实例化 bean 后,会对 bean 进行属性注入、初始化以及其他Aware接口回调。\",\"bean 的生命周期至此结束,容器会对 bean 进行管理,直至容器关闭。 这就是 IoC 容器实现的大致流程,关键是 bean 定义资源的加载和解析,以及 bean 的实例化及生命周期管理。IoC 容器屏蔽了 bean 之间的依赖关系,使 bean 的使用者可以零配置使用 bean。\",\"： 你的解释很到位,IoC 容器的源码分析确实需要对它的原理有深入了解。最后一个问题,在你的项目中是如何设计一个高并发的系统的?\",\" 设计一个高并发系统,有以下几点建议:\",\"选择高性能技术栈:选择支持高并发的语言(Java、Go 等)和框架(Spring、Vert.x 等)。\",\"采用分布式和微服务架构:将系统拆分为多个单一职责的服务,部署在不同服务器上,可以实现高可用和负载均衡。\",\"选择高性能存储:使用能支撑高并发读写的数据库,如 Redis、Kafka 等。对关系型数据库进行分库分表、添加缓存等优化。\",\"限流与降级:使用限流手段控制流量,避免被高流量打垮;使用降级策略保证核心服务可用。\",\"缓存与异步:对频繁读取数据的接口使用缓存;对非关键性计算使用异步处理,避免线程阻塞。\",\"服务治理:使用服务注册与发现、熔断器、网关等手段管理各服务。\",\"线程模型优化:根据业务选择恰当的线程模型。如对大量短连接使用线程池;对长连接使用主从 Reactor 线程模型等。\",\"利用好硬件资源:合理分配 CPU 和内存资源给应用;利用好多核 CPU 进行并行计算等。\",\"测试与监控:进行压力测试,监控系统的负载、吞吐量和延迟指标,并进行优化。\",\"容错和自动恢复:设计稳定的容错方案,当系统发生故障时可以自动检测并恢复。 这些方面搭配得当,可以设计一个高性能、高并发的系统。但需要权衡系统复杂性,在满足需求前提下保持最简实现。\",\"： 很棒,你在高并发系统设计方面有很强的理解力和丰富经验。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1409\":{\"c\":[\"《面试1v1》\"]},\"1410\":{\"h\":\"SpringBean生命周期\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 小伙子,听说你对 Spring Bean 生命周期比较熟悉,我们聊聊吧。Spring Bean 都有哪些生命周期阶段?\",\" Spring Bean 的生命周期可以分为 5 个阶段:\",\"实例化(Instantiation):Spring 使用 BeanDefinition 中的信息实例化 Bean。\",\"属性赋值(Dependency injection):Spring 将 BeanDefinition 中配置的属性值注入到 Bean 中。\",\"初始化前阶段(Post-Construct):如果 Bean 实现了 InitializingBean 接口,会调用 afterPropertiesSet() 方法。\",\"初始化阶段(Initialization):如果在 BeanDefinition 中配置了 init-method,会调用该方法。\",\"销毁阶段(Destruction):如果 Bean 实现了 DisposableBean 接口,会调用 destroy() 方法。如果配置了 destroy-method,会调用该方法。\",\"： 聪明!初始化方法有哪些?在源码层面,Spring 是如何调用这些方法的?\",\" Spring Bean 提供了 3 种初始化方法:\",\"@PostConstruct:这是 JSR-250 注解,Spring 会在 Bean 初始化后自动调用被此注解标注的方法。\",\"InitializingBean 接口:这个接口只有一个方法 afterPropertiesSet(),Spring 会在 Bean 初始化后调用该方法。\",\"自定义 init-method:在 BeanDefinition 中配置 init-method 属性,指向 Bean 中的某个方法名,Spring 会在 Bean 初始化后调用这个方法。\",\"在源码层面,这些方法的调用是在 AbstractAutowireCapableBeanFactory 的 initializeBean 方法中实现的:\",\"protected Object initializeBean(final String beanName, final Object bean, @Nullable RootBeanDefinition mbd) { // ... // 1. 处理 PostConstruct 注解 if (mbd == null || !mbd.isExternallyManagedInitMethod(\\\"afterPropertiesSet\\\")) { // 2. 实现了 InitializingBean 接口的 Bean 会调用 afterPropertiesSet() 方法 if (bean instanceof InitializingBean) { ((InitializingBean) bean).afterPropertiesSet(); } } // 3. 调用自定义的 init-method if (mbd != null && bean.getClass() != NullBean.class) { String initMethodName = mbd.getInitMethodName(); if (StringUtils.hasLength(initMethodName) && !(bean instanceof InitializingBean && \\\"afterPropertiesSet\\\".equals(initMethodName)) && !mbd.isExternallyManagedInitMethod(initMethodName)) { Method initMethod = bean.getClass().getMethod(initMethodName); initMethod.invoke(bean); } } }\",\"： 不错,你对 Spring Bean 的初始化过程很清楚!那销毁方法哪些?原理又是什么?\",\" Spring Bean 提供了 2 种销毁方法:\",\"DisposableBean 接口:实现这个接口的 Bean 会调用 destroy() 方法。\",\"自定义 destroy-method:在 BeanDefinition 中配置 destroy-method 属性,指向 Bean 中的某个方法名,Spring 会在 Bean 销毁前调用这个方法。\",\"在源码层面,这些方法的调用是在 AbstractAutowireCapableBeanFactory 的 destroyBean 方法中实现的:\",\"protected void destroyBean(String beanName, @Nullable DisposableBean bean) { // 1. 实现了 DisposableBean 接口的 Bean 会调用 destroy() 方法 if (bean != null) { bean.destroy(); } // 2. 调用自定义的 destroy-method String destroyMethodName = getDestroyMethodName(beanName); if (destroyMethodName != null) { Method destroyMethod = null; try { // 获取 destroy-method 方法对象 destroyMethod = bean.getClass().getMethod(destroyMethodName); } catch (NoSuchMethodException ex) { throw new BeanDefinitionStoreException(...); } // 调用方法 try { if (destroyMethod != null) { destroyMethod.invoke(bean); } } catch (...) { throw new BeanCreationException(...); } } }\",\"： 棒!最后,Spring Bean 的作用域都有哪些?如何控制 Bean 的生命周期?\",\" Spring Bean 的作用域有 5 种:\",\"singleton:单例,整个 Spring 容器中只有一个 Bean 实例。\",\"prototype:原型,每次获取 Bean 都会创建一个新的实例。\",\"request:每个 HTTP 请求都会创建一个 Bean 实例。\",\"session:每个 HTTP 会话都会创建一个 Bean 实例。\",\"global-session:每个全局 HTTP 会话都会创建一个 Bean 实例。\",\"我们可以通过 scope 属性控制 Bean 的作用域,从而影响其生命周期:\",\"<bean id=\\\"...\\\" class=\\\"...\\\" scope=\\\"prototype\\\"/>\",\"此外,我们还可以自定义 Bean 的初始化和销毁方法,在 Bean 作用域开始和结束时触发:\",\"<bean id=\\\"...\\\" class=\\\"...\\\" scope=\\\"prototype\\\" init-method=\\\"start\\\" destroy-method=\\\"end\\\"> </bean>\",\"这样我们就可以在 start() 方法中执行初始化逻辑,在 end() 方法中执行清理工作,从而精确控制 Bean 的生命周期。\",\"： 很全面,佩服佩服!如果再给你一个机会,你觉得还可以在哪些方面加深对 Spring Bean 生命周期的理解?\",\" 这里有几个方面可以进一步加深对 Spring Bean 生命周期的理解:\",\"BeanPostProcessor:这个接口可以监听 Bean 的初始化前后,提供了扩展点可以在 Bean 初始化前后进行一些处理。这也是 Spring AOP 的底层原理之一。\",\"了解 BeanFactoryPostProcessor:这个接口可以监听 BeanDefinition 的加载,可以在 Bean 实例化前修改 BeanDefinition 的属性。\",\"理解 Bean 的加载时机:在 Spring 容器启动时,默认会立即加载 singleton 作用域的 Bean,而其他作用域的 Bean 会延迟加载, singleton 作用域的 Bean 也支持延迟加载。这就要涉及到Spring 的 lazy-init 属性设置。\",\"了解 Bean 为什么要有不同的作用域:每个作用域适合的场景是什么,选择不同作用域会对 Bean 的生命周期产生怎样的影响。\",\"了解 Bean 之间的依赖关系对生命周期的影响:比如 A Bean 的初始化依赖 B Bean,那么 A Bean 的初始化也会延迟到 B Bean 初始化完毕后。这涉及到 Spring 的 depends-on 属性配置。\",\"了解自定义初始化和销毁方法的具体应用场景:什么情况下需要自定义这些方法,能在方法中完成什么样的逻辑处理。\",\"探索 BeanPostProcessor 和 BeanFactoryPostProcessor 的具体应用:比如 Spring AOP、Spring 事件发布者等机制的实现。 综上,要全面理解 Spring Bean 的生命周期,除了知道每个阶段的调用外,还需要对很多这个过程涉及到的其他知识点进行深入学习和理解,这需要不断实践和总结。但只要把这些要点都串联起来,对 Spring Bean 的生命周期控制就会很得心应手了。\",\"： 非常棒,这些点精彩极了!你的回答已经很全面和深入,对 Spring Bean 生命周期有清晰理解,这些又是常见的面试重点,我相信面试一定会取得很好的表现,加油!我们就聊到这里,很高兴与你的交流,谢谢!\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1411\":{\"c\":[\"《面试1v1》\"]},\"1412\":{\"h\":\"Spring循环依赖\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 小伙子,听说你对 Spring 循环依赖比较熟悉,是真的吗?\",\" 王哥,不敢说很熟悉,但有一定了解,请王哥考考我。\",\"： 那好,首先简单说一下,什么是 Spring 循环依赖?\",\" Spring 循环依赖指的是 BeanA 依赖 BeanB,而 BeanB 也直接或间接依赖 BeanA,两者之间形成依赖循环。这会导致 Bean 无法正常实例化。\",\"： circular dependencies,确实是这样。Spring Bean 的循环依赖有哪些场景?\",\" 主要有三种场景:\",\"构造器循环依赖:BeanA 的构造器注入 BeanB,BeanB 的构造器又注入 BeanA。\",\"Setter 循环依赖:BeanA 在 setter 方法中注入 BeanB,BeanB 的 setter 方法又注入 BeanA。\",\"代理循环依赖:BeanA 依赖 BeanB 的代理对象,BeanB 依赖 BeanA 的代理对象。\",\"： 那 Spring 是如何解决循环依赖问题的呢?\",\" Spring 采用提前暴露对象的方式解决循环依赖,主要通过 AOP 功能和 SmartInstantiationAwareBeanPostProcessor#postProcessAfterInstantiation 方法实现。\",\"对代理循环依赖,Spring 会首先创建目标对象,然后再创建代理对象。\",\"对 Setter 循环依赖,Spring 会在对象创建完成后,提前将对象注入到 BeanFactory 中。然后在注入依赖时,直接从 BeanFactory 中获取已经提前实例化的对象。\",\"//AbstractAutowireCapableBeanFactory#doCreateBean ... // Give BeanPostProcessors a chance to return a proxy instead of the target bean instance. Object bean = resolveBeforeInstantiation(beanName, mbd); if (bean != null) { return bean; } ... // Allow post-processors to modify the merged bean definition. bean = applyBeanPostProcessorsAfterInstantiation(bean, beanName); ...\",\"对构造器循环依赖,Spring 在实例化对象后,会提前暴露一个 ObjectFactory,再从 ObjectFactory 中获取目标对象完成依赖注入。\",\"： 那么,Spring 循环依赖会带来什么问题?\",\" Spring 循环依赖主要会带来以下问题:\",\"破坏 Bean 的单例性。因为循环依赖导致一个 Bean 被实例化多次,破坏了 Spring 容器中 Bean 的唯一性。\",\"容器无法正常结束注入过程。循环依赖会导致 Bean 无法完全实例化,一直在循环注入过程中,无法结束。\",\"降低程序的可读性和维护性。循环依赖关系使得程序难以理解,也难以维护。\",\"： 那么,如何避免 Spring 循环依赖呢?\",\" 主要有以下几种方式可以避免 Spring 循环依赖:\",\"编程方式避免。在 Bean 中提供 set 方法,但不在构造器中注入依赖。这样只有在 Bean 完全实例化后,才会注入依赖对象。\",\"构造器注入避免。只使用构造器注入,不用 Setter 方法注入。因为构造器是在 Bean 实例化阶段完成的,避免了循环依赖。\",\"避免过于提前暴露 Bean。如果一个 Bean 不需要频繁使用,不要将其设置为 Singleton,推迟其实例化时间。\",\"分模块避免。将循环依赖的 Bean 拆分到不同的模块中,模块间采用接口隔离,避免循环依赖。\",\"采用重构手段。如果上述方式都不可行,那么需要通过重构来避免循环依赖。比如拆分过于庞大的 Bean 为多个小 Bean 等。\",\"： 不错,总结得很全面。看来你对 Spring 循环依赖还是比较清晰的,加油!\",\" 谢谢 王哥 的提问,让我对 Spring 循环依赖有了更深入的认识。我会继续努力学习的!\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1413\":{\"c\":[\"《面试1v1》\"]},\"1414\":{\"h\":\"SpringMVC\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 早上好!我是今天的面试官,请问你叫什么名字,对 SpringMVC 了解吗?\",\" 早上好面试官!我叫小明,对 SpringMVC 有一定的了解,它是 Spring Framework 的一部分,是基于 Java 的 MVC 轻量级 Web 框架。\",\"： 那你能解释一下 SpringMVC 的工作原理吗?\",\" SpringMVC 的工作原理是:\",\"用户发送请求至前端控制器 DispatcherServlet。\",\"DispatcherServlet 根据请求信息调用 HandlerMapping,解析请求对应的 Handler。\",\" //HandlerMapping public interface HandlerMapping { HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception; }\",\"HandlerMapping 返回 HandlerExecutionChain 对象,包含 Handler 处理器和 HandlerInterceptor 拦截器。\",\"DispatcherServlet 调用 HandlerAdapter 进行 Handler 适配。\",\" //HandlerAdapter public interface HandlerAdapter { boolean supports(Object handler); ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception; }\",\"HandlerAdapter 执行 Handler 和 HandlerInterceptor,并返回 ModelAndView。\",\"ViewResolver 解析 ModelAndView,返回 View。\",\"DispatcherServlet 根据 View 进行视图渲染,响应用户。\",\"： 你对 SpringMVC 的类和接口还挺了解的嘛!那你说说 DispatcherServlet、HandlerMapping、HandlerAdapter、ViewResolver 分别是什么?\",\" 好的,以下是这几个组件的详细说明: DispatcherServlet:前端控制器,接收请求并相应结果,整个流程控制的中心,由它调用其它组件处理用户的请求。\",\"public class DispatcherServlet extends FrameworkServlet { // ... }\",\"HandlerMapping:请求映射到 Handler 的适配器,根据请求信息匹配 Handler。\",\"public interface HandlerMapping { // 根据请求返回 HandlerExecutionChain 对象 HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception; }\",\"HandlerAdapter:Handler 适配器,调用Handler 处理请求,封装请求信息,返回 ModelAndView。\",\"public interface HandlerAdapter { boolean supports(Object handler); // 调用 Handler 处理请求 ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception; }\",\"ViewResolver:View 解析器,将逻辑视图名解析为具体 View 实现。\",\"public interface ViewResolver { View resolveViewName(String viewName, Locale locale) throws Exception; }\",\"所以,这四个组件协同工作,将请求发送给适合的 Handler,Handler 返回处理结果 ModelAndView,再由 ViewResolver 解析为View,最后由 DispatcherServlet 将结果响应给用户。\",\"DispatcherServlet 如同总指挥,负责转发请求到各个组件,真正干活的其实是 HandlerMapping、HandlerAdapter 和 ViewResolver 这三个家伙。\",\"： 原来如此,你解释的很透彻,让我对 SpringMVC 的工作原理有了更深的理解。那么 SpringMVC 的请求处理流程你能画一个示意图来表示一下吗?\",\"这里是 SpringMVC 的请求处理流程示意图:\",\"SpringMVC请求处理流程\",\"详细流程说明:\",\"用户发送请求到 DispatcherServlet。\",\"DispatcherServlet 根据请求信息调用 HandlerMapping,解析 Handler。\",\"HandlerMapping 返回一个 HandlerExecutionChain,包含 Handler 和 HandlerInterceptor 列表。\",\"DispatcherServlet 调用 HandlerAdapter 执行 Handler。\",\"Handler 返回一个 ModelAndView。\",\"ViewResolver 解析 ModelAndView 中的 View 名称,获取 View 对象。\",\"View 对象负责填充 Model 数据并渲染视图。\",\"DispatcherServlet 响应用户。\",\"在这个流程中,HandlerMapping 根据请求找到正确的 Handler;HandlerAdapter 负责具体 Handler 的执行;ViewResolver 找出正确的 View;View 负责数据填充和呈现结果。\",\"DispatcherServlet 作为整个流程的控制器,把请求转发到各个组件,并最终返回响应。所以 DispatcherServlet 是 SpringMVC 的核心,负责将请求映射到对应的处理器,并把响应返回给客户端。\",\"： 非常精彩!你通过详细的说明和示意图,让我完全明白了 SpringMVC 的请求处理流程,而且你对每个组件的职责也描述得非常透彻。看来你对 SpringMVC 有很深入的理解,这对一个入门的开发者来说很难得。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1415\":{\"c\":[\"《面试1v1》\"]},\"1416\":{\"h\":\"MyBatis\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 恭喜你进到面试的最后一个环节!你对 MyBatis 比较熟悉吗?\",\" 谢谢面试官!MyBatis 是我最喜欢且熟练使用的持久层框架之一。\",\"： 那很好,我们从基础开始问吧。什么是 MyBatis?\",\" MyBatis 是一款优秀的持久层框架,它内部封装了 JDBC,使开发者只需要关注 SQL 语句本身,而不需要花费精力去处理加载驱动、创建连接、创建 statement 等繁杂的过程。\",\"： MyBatis 的工作原理能说一下吗?\",\" MyBatis 的工作原理如下:\",\"根据 XML 或注解的配置文件得到映射语句(也就是 SQL)。\",\"把要调用的映射语句的参数传入并解析出 statement 中对应的占位符。\",\"执行映射语句并得到结果。\",\"把结果映射为 Java 对象并返回。\",\"整个过程中最关键的部份是映射文件及映射过程。只有把 SQL 的执行结果映射成 Java 对象,才能达到 ORM 的目的。\",\"： 那它的核心组件有哪些?\",\" MyBatis 的核心组件主要有:\",\"SqlSessionFactoryBuilder:用于创建 SqlSessionFactory,gue有 XML 或注解来配置。\",\"SqlSessionFactory:SqlSession 的工厂,用于创建 SqlSession。\",\"SqlSession:用于执行映射语句并commit、rollback 事务。\",\"Mapper 接口:用于定义映射语句(也就是 SQL),下面会详细解释。\",\"映射文件:包含了映射语句,可以是 XML 或注解。\",\"： 既然你提到了 Mapper 接口,那它是什么?\",\" Mapper 接口是 MyBatis 中非常重要的一个组件。它是由开发人员创建的接口,其中的方法直接对应映射文件中的 SQL 语句。 举个例子:\",\"public interface UserMapper { User selectUser(int id); }\",\"然后在映射文件中:\",\"<select id=\\\"selectUser\\\" resultType=\\\"User\\\"> select * from user where id = #{id} </select>\",\"之后我们可以直接调用:\",\"User user = session.getMapper(UserMapper.class).selectUser(1);\",\"这样直接调用 Mapper 接口的方法就可以执行对应的 SQL 了,很方便。\",\"： 动态 SQL 又是什么?\",\" MyBatis 的动态 SQL 是非常强大的一个功能。它允许开发人员在 XML 映射文件中直接插入一些逻辑,如:\",\"if/else 分支\",\"动态选择部分内容\",\"提取重复代码块\",\"举个例子:\",\"<select id=\\\"findActiveBlogWithTitleLike\\\" resultType=\\\"Blog\\\"> SELECT * FROM BLOG WHERE state = 'ACTIVE' <if test=\\\"title != null\\\"> AND title like #{title} </if> </select>\",\"这里通过 <if> 标签实现了动态条件查询。只有在方法调用时传入了 title 参数,SQL 语句才会添加 title 的条件判断。 这样的动态 SQL 使得数据库交互更加灵活,不需要在程序中进行大量的字符串拼接。\",\"： 最后两个问题,MyBatis 的缓存机制和插件机制能说一下吗?\",\"MyBatis 包含一级缓存和二级缓存。\",\"一级缓存是 SqlSession 级别的缓\",\"一级缓存是 SqlSession 级别的缓存,在同一个 SqlSession 中多次调用同一个 Mapper 的方法,MyBatis 会直接从缓存中获取数据。\",\"二级缓存是 Mapper 级别的缓存,多个 SqlSession 去调用同一个 Mapper 的方法,MyBatis 会先去二级缓存中查找是否有数据,有的话直接返回,没有的话再查询数据库。\",\"MyBatis 的插件机制也很强大。我们可以通过实现 Interceptor 接口来编写插件,用于执行一些增强操作,比如:\",\"分页助手:通过拦截执行的 SQL 语句实现物理分页\",\"监控日志:监控 SQL 执行时间过长等\",\"读写分离:根据方法的注解实现读写分离 举个简单例子:\",\"public class MyFirstPlugin implements Interceptor { @Override public Object intercept(Invocation invocation) throws Throwable { // 调用方法之前 Object result = invocation.proceed(); // 调用方法之后 return result; } }\",\"然后在配置文件中进行配置:\",\"<plugins> <plugin interceptor=\\\"org.mybatis.example.MyFirstPlugin\\\"> <property name=\\\"someProperty\\\" value=\\\"100\\\"/> </plugin> </plugins>\",\"就可以启动对所有 SQL 执行的拦截了。\",\"： MyBatis 的内容我们就先讲到这里,你对它的理解很深入,加油!期待你加入我们团队!\",\" 非常感谢面试官的赏识!我会继续努力学习,不断提高自己。也很期待加入贵团队一起成长!\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1417\":{\"c\":[\"《面试1v1》\"]},\"1418\":{\"h\":\"Redis基础\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 来吧,聊聊 Redis,这个 NoSQL 数据库你用过吧?\",\" 用过用过, Redis 是我最喜欢的 NoSQL 数据库,性能超高,用起来特顺手。\",\"： 那你说说Redis有什么优点?\",\" Redis的优点很多:\",\"速度快,是基于内存的数据库,CPU 不是性能瓶颈,读的速度是 110000次/s,写的速度是 81000次/s 。\",\"支持丰富数据类型,不仅仅是 String, 还有 List,Set,Sorted Set,Hash 等等。\",\"持久化,可以将内存中的数据写入磁盘,确保数据的持久性。\",\"简单易用, Redis 只需要6个命令就可以满足基本所有需求,非常易于学习和使用。\",\"高可用, Redis 官方提供了 Sentinel 和 Cluster 两种方案,很容易实现高可用。(哨兵和集群)\",\"： 说的不错,我再问你几个 Redis 的基本命令,来测试一下你的熟练程度。set key value ,这条命令的作用是?\",\"set key value 这个命令的作用是给指定的 key 设置字符串值 value。如果key已经存在,则覆盖原来的值。\",\"例如:\",\"set name \\\"john\\\"\",\"： get key这个命令呢?\",\" get key这个命令用来获取指定key的值。例如:\",\"get name # \\\"john\\\"\",\"： 那setex key seconds value呢?这个命令有什么作用?\",\"setex key seconds value 这个命令用于设置 key 的值为 value,并且设置这个键值对的过期时间为seconds秒。\",\"例如:\",\"setex name 30 \\\"jack\\\" # 设置name的值为\\\"jack\\\",30秒后过期 get name # \\\"jack\\\" # 30秒后 get name # nil,键值对已经过期\",\"： setnx key value又是什么作用?\",\"setnx key value 这个命令只在键 key 不存在时,将其值设置为 value。如果键 key 已经存在,则不做任何操作。这是 \\\"SET if Not eXists\\\" 的简写。\",\"例如:\",\"set name \\\"john\\\" setnx name \\\"jack\\\" # 不做任何操作,name的值保持为\\\"john\\\" setnx age 30 # 设置age值为30,因为age键原来不存在\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1419\":{\"c\":[\"《面试1v1》\"]},\"1420\":{\"h\":\"Redis持久化\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： Redis是内存数据库,数据存放在内存中,当Redis服务重启数据会丢失,那么Redis如何保证数据的持久化?\",\" Redis 提供两种持久化方案: RDB(Redis DataBase) 和 AOF(Append Only File)。\",\"： 说说RDB吧,它的工作原理是什么?\",\" RDB 的工作原理很简单,就是在指定的时间间隔内将内存中的数据集快照写入磁盘,恢复时是将快照文件直接读入内存。（简单来说就是快照保存，核心思路是Copy-on-Write。）\",\"触发 RDB 又分为两种， save 和 bgsave\",\"save\",\"当 Redis 实例收到 save 命令后，此时会阻塞当前 Redis 服务器，在 RDB 文件创建完成之前是不能处理其他客户端发送的任何命令请求，如果数据量太大会造成长时间阻塞，期间 redis 无法处理其他请求，线上环境不建议使用。\",\"bgsave\",\"当 Redis 实例收到 bgsave 命令后，Redis 会单独创建(fork)一个子进程来进行持久化,会先将数据写入到一个临时文件中,待持久化过程都结束了,再用这个临时文件替换上次持久化好的文件。 整个过程中,主进程仍然处理客户端请求,这样可以保证 RDB 过程不影响服务。\",\"RDB 的优点是轻量,适合大规模的数据恢复;缺点是数据有一定的丢失风险,持久化的工作并不实时。\",\"： 那AOF又是什么?\",\" AOF 的全称是 Append Only File,它的工作原理是:\",\"将每次执行会改变数据库的命令记录下来,并追加到AOF文件中。AOF文件就是一个命令的记录,Redis重启时会重新执行AOF文件中的命令来恢复数据。\",\"AOF的优点是每次修改都会同步到磁盘,有效防止数据丢失;缺点是AOF rewrite的时候会阻塞客户端查询,并且文件会变得越来越大。\",\"Redis提供了AOF重写机制,可以彻底压缩AOF文件体积,用一条等价的命令代替多条之前的命令。AOF重写也采用fork方式进行,不会影响应用的访问。\",\"： AOF重写的机制原理能详细说下么?\",\" AOF重写的基本流程是:\",\"子进程创建:主进程fork一个子进程,负责重写工作。\",\"子进程载入当前数据库快照,并开始解析AOF文件。\",\"子进程构建新的AOF,仅记录数据库里面和快照不同的键。\",\"子进程完成后,将新构建的AOF发送给主进程。\",\"主进程加载新AOF,替换旧AOF。如果AOF加载失败,继续使用旧AOF。\",\"子进程退出。\",\"该机制可以保证主进程始终可用,不会阻塞客户端请求。新旧AOF文件替换采用原子性rename操作,防止重启时只部分加载新AOF的情况发生。 主要的源码在rewriteAppendOnlyFile方法中:\",\"void rewriteAppendOnlyFile(void) { int fd; char tmpfile[256]; redisDb *db = server.db; /* 创建子进程 */ if (server.child_type == REDIS_CHILD_TYPE_AOF) { ... } /* 载入当前数据库 */ emptyDb(-1); if (rdbSave(tmpfile) != REDIS_OK) { ... } /* 构建新AOF */ fd = open(tmpfile,O_WRONLY|O_APPEND|O_CREAT,0644); /* 将新AOF发送给主进程 */ atomicReplaceFile(server.aof_filename,tmpfile); }\",\"： 讲的很透彻,AOF重写机制我现在全明白了,Redis的持久化方案用的真的很巧妙!\",\" 是的,Redis的RDB和AOF双持久化方案,既保证了数据的持久性,也兼顾了效率。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1421\":{\"c\":[\"《面试1v1》\"]},\"1422\":{\"h\":\"Redis主从架构\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： Redis主从架构是什么?它有什么用?\",\" Redis 主从架构就是将一台 Redis 服务器设为主服务器,其他的 Redis 服务器设为从服务器。它的主要用途有:\",\"高可用:当主服务器发生故障时,从服务器可以顶上继续提供服务,实现快速故障迁移。\",\"负载均衡:主服务器处理写请求,从服务器处理读请求,分担服务器压力。\",\"数据冗余:主服务器的数据可以在从服务器中备份,防止数据丢失。\",\"： Redis 主从复制的工作流程是怎样的?\",\" Redis 主从复制的工作流程如下:\",\"首次同步:从服务器连接主服务器,发送 sync 命令,主服务器执行 BGSAVE 生成 RDB 文件并发送给从服务器,从服务器载入 RDB 文件并获得数据集。同时主服务器也发送从服务器连接后产生的写命令给从服务器,使其状态与主服务器一致。\",\"命令传播:主服务器继续接收写命令,并将写命令同步给从服务器。主从服务器保持数据一致。\",\"断线重连:如果从服务器因网络故障与主服务器断开,会自动尝试重连。重连后再次执行同步操作,得到主服务器最新的数据。\",\"主要的工作流程是:同步阶段+命令传播阶段,这两个阶段互相循环,实现主从复制和数据一致性的效果。\",\"： 主从复制的同步工作是如何实现的?能给出源码分析吗?\",\" 主从复制的同步工作是在 replicaofCommand() 方法中实现的:\",\"void replicaofCommand(client *c) { if (server.masterhost == NULL) { //如果是第一次同步 server.master = createClient(NULL); //连接主机 if (server.master == NULL) { addReplyError(c,\\\"Can't connect to MASTER: Connection refused\\\"); return; } /* AUTH with the master if required. */ if (server.masteruser && server.masterauth) { ... } /* Send SYNC and receive BGSAVE response. */ server.replstate = REDIS_REPL_WAIT_BGSAVE_START; serverLog(REDIS_NOTICE,\\\"Waiting BGSAVE from master\\\"); if (syncWithMaster() != REDIS_OK) { // 发送sync命令 freeClient(server.master); server.master = NULL; } } }\",\"同步工作的流程如下:\",\"从服务器连接主服务器,发送 sync 命令。\",\"主服务器接收到 sync 命令,执行 BGSAVE,同时开始缓冲从服务器断开期间产生的写命令。\",\"BGSAVE 完成,主服务器将 RDB 文件发送给从服务器,同时也发送缓冲的写命令。\",\"从服务器得到 RDB 文件后载入,执行写命令,数据同步完成。\",\"这整个同步过程可以保证从服务器快速获取主服务器的数据,也为后续的命令传播阶段奠定基础,主从复制得以顺利进行。\",\"： 主从复制的同步实现,你解释得很详细,我现在全明白了!Redis 的主从架构以及同步原理,你都理解得非常透彻。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1423\":{\"c\":[\"《面试1v1》\"]},\"1424\":{\"h\":\"Java范型\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"：小伙子,说实话,泛型这个机制一开始我也是一头雾水,搞不太明白它到底要解决什么问题。你能不能不那么书呆子,给我普普通通地讲一讲泛型?\",\" 好嘞,我们来聊聊泛型。首先,泛型要解决的最主要的问题就是类型不安全。比如说,你有一个箱子,可以装任何东西:\",\"public class Box { private Object obj; public void set(Object obj) { this.obj = obj; } public Object get() { return obj; } }\",\"然后你用它装了一个苹果:\",\"Box b = new Box(); b.set(new Apple());\",\"但是当你取出来的时候,是一个水果啊,你不知道是苹果还是香蕉,需要强转类型:\",\"Apple a = (Apple) b.get(); // 强转,可能出现ClassCastException\",\"这就是类型不安全,一旦强转错了类型,程序就GG了。 泛型来了之后,情况就不一样了。我们可以这样定义箱子:\",\"public class Box<T> { // <T>就是类型参数 private T obj; public void set(T obj) { this.obj = obj; } public T get() { return obj; } }\",\"然后在用的时候,指定T的实际类型,比如:\",\"Box<Apple> b = new Box<Apple>(); b.set(new Apple()); Apple a = b.get(); // 不需要强转,类型安全!\",\"所以泛型最大的好处就是让代码类型安全,不再需要强制类型转换,避免ClassCastException异常,让代码更健壮。它把类型检查的工作从运行时提前到了编译时。\",\"：哇,原来如此!讲解的真的很通俗易懂,我都明白了!那泛型中最容易搞混的两个概念是什么?\",\"：最容易搞混的两个概念,应该是类型参数和实际类型参数吧?\",\" 对的,这两个概念容易混淆。我们再举个例子:\",\"public class Box<T> { // <T>就是类型参数 private T obj; } Box<Apple> b = new Box<>(); // Apple就是实际类型参数\",\"类型参数T是在定义泛型类Box时使用的,代表一个未知的类型。我们不知道使用者会替换成什么类型,所以用T表示。 而实际类型参数Apple是在实例化Box时实际替换类型参数T的类型。它给T一个明确的类型,用于这次实例化。 所以类型参数是个未知的类型占位符,实际类型参数是替换类型参数的具体类型。理解了这两个概念的区别,泛型的很多地方就不会再混淆了。\",\"：说的太好了,我都不好意思问你其他的了!那最后两点疑问,1)为啥泛型类不能有静态方法?2)类型擦除是干嘛的?\",\" 好的,两个很好的疑问: 1)泛型类不能有静态方法的原因是因为静态方法在类加载的时候就被创建,而泛型类在实例化的时候才能确定类型参数的实际类型。这时候静态方法已经创建完了,无法使用这个实际类型,所以编译器不允许这么做。 2)类型擦除就是编译器删除所有与类型参数相关的信息,并替换为上限(通常是Object类型)的过程。因为Java在1.5之前并没有泛型的概念,所以编译器会把所有的泛型类型全部擦除掉,在运行时期间不会存在任何泛型类型的参数信息。这也是为什么泛型类不能有基本类型的参数的原因。 类型擦除有利有弊,好处是可以在1.5之前的VM上运行泛型代码,坏处是导致些许运行期间的效率损失,因为擦除后所有的类型参数都被替换为Object类型。不过这点性能损失在大部分情况下可以忽略。\",\"：太棒了,你的解释简直让人眼前一亮!真的学到很多,谢谢你的精彩讲解!\",\" 谢谢面试官的夸奖,我也在这个过程中对泛型有了更深的理解,非常高兴能与你进行这次交流与探讨。\",\"：在聊了泛型这么多后,还有些细节想问一下:\",\"1. 泛型中<?>和<? extends T>分别代表什么含义?\",\" <?>代表一个未知类型的通配符,可以用在类型参数的位置,表示接受任何类型。比如:\",\"public void print(Box<?> box) { ... }\",\"这个方法可以传递任何类型的Box进来,因为<?>可以匹配任何类型。 而<? extends T>表示从T类型到其子类型之间的某种类型,它代表的上界类型可能是T,也可能是T的子类型。比如:\",\"public void print(Box<? extends Fruit> box) { ... }\",\"这个方法可以传递 Box<Apple> 或者 Box<Orange> 进来,因为 Apple 和 Orange 都是 Fruit 的子类。但不能传 Box<Object> ,因为 Fruit 的子类型不包括 Object。 所以 <?> 表示全类型通配,而 <? extends T> 表示从 T 到子类型的范围内的某种类型,具有上界的语义。\",\"2. 泛型方法和泛型类有什么区别?\",\"泛型方法是在普通类中定义带类型参数的方法,而泛型类是在定义类本身时指定类型参数。比如: 泛型方法:\",\"public class Box { public <T> void print(T t) { ... } }\",\"泛型类:\",\"public class Box<T> { private T t; ... }\",\"主要区别在于泛型类的类型参数可以用在整个类的方法和属性上,而泛型方法的类型参数只在这个方法内有效。泛型方法更灵活,可以在非泛型类上使用。 除此之外,泛型方法可以有 static 修饰符,可以在静态方法内使用类型参数。而泛型类不能有静态方法和静态属性,原因和前面说的类型擦除有关。\",\"3. 泛型的上下限是什么?使用场景又是什么?\",\"泛型的上限是 <? extends T> ,表示从T到子类型的范围;下限是 <? super T>,表示从T到父类型的范围。 上限的使用场景是当需要获取T的子类型对象时,比如从集合中取出元素。下限的使用场景是当需要添加T的父类型对象时,比如往集合中添加元素。\",\"Box<? extends Fruit> box1; // 放入Apple、Orange等 box1.add(new Apple()); // 只能添加Fruit的子类型 Box<? super Fruit> box2; // 放入Fruit、Food等 box2.add(new Food()); // 只能添加Fruit的父类型\",\"所以上下限主要是为了在广泛限制类型的同时,也允许满足某些使用场景的需要,使得泛型更加灵活实用。\",\"：泛型真的有些复杂,但你解释的很通俗易懂,我都差不多明白了。最后两个小问题:\",\"1. 泛型中的边界是干嘛的?\",\"边界是对类型参数指定的约束,目的是限制类型参数能被替换的实际类型。比如,我们可以这样定义一个泛型方法:\",\"public <T extends Number> void print(T t) { System.out.println(t.intValue()); }\",\"这里我们指定T必须是Number或其子类型,如果调用时用String类型替换T,则会编译错误,因为String不符合约束。 边界有两种形式:\",\"类名或者接口名,例如T extends Number,表示 T 必须是 Number 类型或其子类\",\"另一个类型参数,例如 <T, S extends T> ,表示 S 必须是 T 或其子类型 所以边界的作用就是限制类型参数可以替换的实际类型,确保在方法中可以正常使用某些操作,避免因为替换错误类型导致的运行错误。\",\"2. 泛型中通配符 <?> 和无边界的 <?> 有什么区别?\",\"无边界的 <?> 表示任何类型,它没有任何限制,可以理解为 <T>,T可以替换为任何类型。 而 <?> 通配符有些微的区别,它表示“未知类型”,也没有具体的类型边界,但它只能在“读”的场景使用,不能在“写”的场景使用。因为编译器无法确定它到底是哪种类型。\",\"举个例子:\",\"public void print(Box< ?> box) { // 读操作,ok ... } public void add(Box< ?> box, Object o) { // 写操作,编译错误 box.set(o); }\",\"所以无边界的 <?> 可以出现在读和写的操作中,而 <?> 通配符只能在读操作场景使用,这是两者的主要区别。通常在像泛型方法的定义中,使用无边界的 <?> 会更灵活,而在一些读操作的泛型方法中,使用 <?> 通配符可以更广泛的匹配不同的 Box 类型。\",\"：真是一个很细致的区分,我以前也常常搞不清这两者的差别,你的解释让我受益匪浅!谢谢你将这些泛型的概念讲解的如此清晰和深入,我对泛型也有了更全面的认识。真是一个非常愉快的交流过程!\",\" 非常高兴能帮到您!我自己在准备和回答的过程中,也对泛型有了更深刻的理解,这种问答的形式确实是学习的好方法。谢谢面试官的精彩问题,让这个过程变得非常有价值。我也非常欣赏这次交流,收获颇丰,祝面试官有一个美好的一天!\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1425\":{\"c\":[\"《面试1v1》\"]},\"1426\":{\"h\":\"Redis分片集群\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 嗨，欢迎来到我们的面试！今天我们要聊一聊Redis分片集群，你对这个话题了解多少？\",\" 嗨，谢谢邀请！我对Redis分片集群有一些了解，它是一种将数据分布在多个Redis节点上的方式，以提高性能和可扩展性。\",\"： 很好！那你能给我解释一下Redis分片集群的工作原理吗？\",\" 当然！在Redis分片集群中，数据被分成多个分片，每个分片存储在不同的Redis节点上。当客户端发送一个命令到集群时，集群会根据命令的键值对选择正确的分片，并将命令路由到相应的节点上进行处理。\",\"： 非常棒！那么，如何确定一个键值对应该存储在哪个分片上呢？\",\" 这是一个很好的问题！Redis使用一种称为\\\"哈希槽\\\"的机制来确定键值对应的分片。哈希槽是一个固定数量的槽位，每个槽位对应一个分片。Redis使用CRC16算法对键进行哈希计算，然后将哈希值映射到对应的哈希槽上。\",\"： 哈希槽听起来很有趣！那么，如果我要添加或删除一个节点，会对分片集群有什么影响呢？\",\" 当你添加或删除一个节点时，Redis分片集群会自动进行重新分片。它会根据新的节点数量重新计算哈希槽的分布，并将键值对迁移到新的节点上。这个过程可能会导致一些数据迁移的延迟，但是Redis会尽力保证数据的一致性。\",\"： 好的，那么在一个Redis分片集群中，如果一个节点宕机了，会发生什么？\",\" 如果一个节点宕机了，Redis分片集群会使用一种叫做\\\"主从复制\\\"的机制来保证高可用性。每个分片都有一个主节点和多个从节点，主节点负责处理写操作，而从节点负责复制主节点的数据。当主节点宕机时，集群会自动选举一个从节点作为新的主节点，确保集群的正常运行。\",\"： 太棒了！你对Redis分片集群的理解非常透彻。还有什么你想补充的吗？\",\" 我想强调一点，虽然Redis分片集群可以提高性能和可扩展性，但是在使用它之前，我们需要仔细考虑数据分布、数据迁移和高可用性等方面的问题。此外，我们还可以使用Redis的哨兵机制或者使用Redis Cluster来管理和监控分片集群。\",\"： 太好了！你对Redis分片集群的理解非常全面。非常感谢你的时间和分享！\",\" 非常感谢你的邀请和提问！我很高兴能参加这次面试。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1427\":{\"c\":[\"《面试1v1》\"]},\"1428\":{\"h\":\"Redis分布式锁\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 嗨，候选人！听说你对Redis分布式锁很感兴趣，是吗？\",\" 是的，面试官！我对分布式锁的实现方式很感兴趣，尤其是Redis作为分布式锁的选择。\",\"： 很好！那我们就来聊聊Redis分布式锁的原理吧。你知道Redis是如何实现分布式锁的吗？\",\" 当然！Redis使用的是基于SETNX命令的方式来实现分布式锁。我可以给你演示一下源码实现吗？\",\"： 当然可以！请开始你的表演。\",\"def acquire_lock(redis_conn, lock_key, lock_value, lock_timeout): if redis_conn.setnx(lock_key, lock_value): redis_conn.expire(lock_key, lock_timeout) return True return False def release_lock(redis_conn, lock_key, lock_value): if redis_conn.get(lock_key) == lock_value: redis_conn.delete(lock_key) return True return False\",\" 这是一个简单的Python代码示例。在acquire_lock函数中，我们使用setnx命令来尝试获取锁。如果成功获取到锁，我们设置锁的过期时间，并返回True。如果获取锁失败，我们返回False。在release_lock函数中，我们首先检查锁的值是否与传入的值相等，如果相等，我们删除锁并返回True，否则返回False。\",\"： 看起来很简单明了！但是，有没有什么需要注意的地方呢？\",\" 当然有！在使用Redis分布式锁时，我们需要注意两个主要问题。首先是锁的超时时间，我们需要确保在业务逻辑执行期间锁不会过期。其次是锁的释放，我们需要确保只有持有锁的客户端才能释放锁，避免误释放。\",\"： 非常重要的提醒！那么，你有什么建议来优化Redis分布式锁的性能吗？\",\" 当然！一个常见的优化方式是使用Lua脚本来减少网络开销。通过将获取锁和设置过期时间的操作合并为一个原子操作，可以减少网络往返次数，提高性能。\",\"： 很棒的建议！还有其他的优化策略吗？\",\" 另一个优化策略是使用Redlock算法来增加锁的可靠性。Redlock算法通过在多个Redis实例上获取锁，以提高分布式锁的可用性和容错性。\",\"： 非常有见地！你对Redis分布式锁的了解令人印象深刻。有没有什么其他问题或者想法？\",\" 我认为在使用Redis分布式锁时，我们还应该考虑到网络延迟和故障的情况，以及如何处理死锁和锁竞争的情况。\",\"： 非常好的观点！你对分布式锁的理解非常全面。我对你的回答印象深刻！谢谢你的时间。\",\" 非常感谢您的赞赏，面试官！我很高兴能与您分享我的见解。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1429\":{\"c\":[\"《面试1v1》\"]},\"1430\":{\"h\":\"Redis内存优化\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 嗨，小王！今天我们要聊一聊Redis内存优化的话题，你对此有什么了解吗？\",\" 你好，面试官！当然有一些了解。Redis是一个高性能的内存数据库，但是内存是有限的，所以优化内存使用是非常重要的。\",\"： 很好！那你能给我一些关于Redis内存优化的实用技巧吗？\",\" 当然可以！首先，我们可以使用数据结构来减少内存占用。比如，使用Redis的哈希表来存储多个键值对，可以比单独存储每个键值对更节省内存。\",\"： 好主意！还有其他的方法吗？\",\" 当然！我们还可以使用压缩算法来减少存储在Redis中的数据量。Redis支持多种压缩算法，比如LZF和Snappy。通过启用压缩，我们可以在一定程度上减少内存使用。\",\"： 那么，压缩算法会对性能有什么影响吗？\",\" 压缩算法会增加CPU的使用量，因为需要对数据进行压缩和解压缩操作。所以，在选择是否启用压缩时，需要权衡内存和CPU的使用情况。\",\"： 这是一个很好的观点！还有其他的内存优化技巧吗？\",\" 当然！我们还可以使用Redis的过期时间来自动清理不再使用的键值对，以释放内存空间。这样可以确保我们的缓存始终保持在一个合理的大小。\",\"： 那么，如何确定适当的过期时间呢？\",\" 这需要根据你的业务需求来决定。如果你的数据变化频繁，可以设置较短的过期时间，以确保数据的实时性。如果数据变化较少，可以设置较长的过期时间，以减少过期键值对的清理频率。\",\"： 这些都是非常实用的技巧！你还有其他的建议吗？\",\" 当然！我们还可以使用Redis的持久化机制来将数据存储到磁盘上，以释放内存空间。Redis支持两种持久化方式：RDB和AOF。你可以根据你的需求选择适合的方式。\",\"： 好的，这些都是非常有用的建议！谢谢你的分享！\",\" 不客气，我很高兴能够帮助！如果你还有其他关于Redis内存优化的问题，随时问我哦！\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1431\":{\"c\":[\"《面试1v1》\"]},\"1432\":{\"h\":\"Kafka基础\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 嗨，欢迎来到我们的面试！今天我们要聊一聊Kafka基础。你对Kafka有了解吗？\",\" 嗨！当然有啦，Kafka是一个分布式流处理平台，用于高吞吐量、低延迟的数据传输和处理。它就像是一个强壮的邮递员，可靠地将消息递送给不同的系统。\",\"： 很好！那你能给我解释一下Kafka的消息发布和订阅模型吗？\",\" 没问题！Kafka的消息发布和订阅模型就像是一个咖啡馆。你可以把消息当作咖啡订单，生产者就像是顾客下单，把订单放在柜台上。而消费者就像是咖啡师，从柜台上拿走订单，制作咖啡并提供给顾客。\",\"： 哈哈，这个比喻很形象！那Kafka是如何保证消息的可靠性传输的呢？\",\" 嗯，这就涉及到Kafka的副本机制了。Kafka通过将消息分为多个分区，并在多个Broker上创建副本来实现可靠性。就像是你有一个备份咖啡师，如果一个咖啡师不在，备份咖啡师可以接手制作咖啡，确保订单不会丢失。\",\"： 很好！那如果我想要查看Kafka的源码，你能给我一些指导吗？\",\" 当然！Kafka的源码是开源的，你可以在官方的GitHub仓库上找到。如果你想深入了解Kafka的工作原理，我建议你从kafka-core模块开始阅读源码。你可以找到各种有用的注释和解释，帮助你理解Kafka的内部机制。\",\"： 太棒了！你对Kafka的理解很透彻。最后一个问题，Kafka有哪些常见的使用场景呢？\",\" Kafka的使用场景非常广泛！它可以用于日志收集、实时流处理、事件驱动架构等。比如，你可以使用Kafka来构建一个实时的数据管道，将数据从一个系统传输到另一个系统，或者用于构建实时分析和监控系统。\",\"： 太棒了！你对Kafka的了解非常全面。谢谢你的时间和分享！\",\" 谢谢你的提问，我很享受这次面试！如果还有其他问题，随时告诉我。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1433\":{\"c\":[\"《面试1v1》\"]},\"1434\":{\"h\":\"Kafka使用场景\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 嗨，候选人！今天我们来聊聊Kafka的使用场景，你对Kafka有了解吗？\",\" 当然！Kafka是一个高吞吐量的分布式消息队列，被广泛应用于大数据处理和实时数据流处理。它可以帮助我们解决各种有趣的问题！\",\"： 太好了！那你能给我举几个Kafka的使用场景吗？\",\" 当然！首先，Kafka非常适合用于日志收集和分析。你知道吗，很多公司都有海量的日志数据，而Kafka可以帮助我们高效地收集、存储和分发这些日志数据。它就像是一个日志的快递小哥，把日志从各个系统搬运到我们的数据湖中。\",\"： 哈哈，快递小哥！这个比喻很形象！还有其他的使用场景吗？\",\" 当然！另一个常见的使用场景是实时数据流处理。你知道吗，有些应用需要实时地处理大量的数据流，比如实时监控、实时分析等。而Kafka可以作为数据流的中转站，把数据流传输给各个处理节点，让它们实时地进行计算和分析。就像是一个数据流的管家，把数据送到各个需要的地方。\",\"： 嗯，管家的形象也很贴切！还有其他的使用场景吗？\",\" 当然！Kafka还可以用于构建事件驱动的架构。你知道吗，有些应用需要根据事件来触发相应的操作，比如订单支付成功后触发发货操作。而Kafka可以作为事件的中心枢纽，把事件发送给各个订阅者，让它们根据事件来做出相应的响应。就像是一个事件的调度员，把事件通知给各个关心的人。\",\"： 哈哈，调度员！你的比喻真是越来越有意思了！Kafka的使用场景确实非常丰富多样，你的回答很棒！\",\" 谢谢夸奖！我觉得Kafka就像是一个多面手，可以在各种场景下发挥作用。它的高吞吐量、可靠性和可扩展性让它成为了很多公司的首选。\",\"： 没错！Kafka的确是一个非常强大的工具。你对Kafka的理解很深入，我对你的回答非常满意！\",\" 谢谢夸奖！我对Kafka的热爱让我对它的使用场景有了更深入的了解。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1435\":{\"c\":[\"《面试1v1》\"]},\"1436\":{\"h\":\"Kafka优缺点\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 嘿，候选人，你知道Kafka有哪些优点吗？\",\" 当然知道！Kafka有很多优点。首先，它是一个高吞吐量的分布式消息系统，可以处理大量的数据流。这对于处理实时数据和大规模应用非常有用。\",\"： 没错！Kafka的高性能确实让人印象深刻。还有其他的优点吗？\",\" 当然！Kafka具有良好的可扩展性和可靠性。它可以轻松地扩展到成百上千台服务器，而且即使在节点故障的情况下，数据也不会丢失。这对于构建可靠的数据管道非常重要。\",\"： 确实，可扩展性和可靠性是Kafka的强项。还有其他的优点吗？\",\" 当然还有！Kafka提供了灵活的消息传递模型，支持多种消息发布和订阅模式。它还具有持久性存储和消息回溯的能力，这对于数据分析和故障排除非常有帮助。\",\"： 嗯，Kafka的灵活性和持久性确实让它在数据处理领域脱颖而出。还有其他的优点吗？\",\" 最后，Kafka有一个活跃的社区和丰富的生态系统。这意味着你可以轻松地找到各种工具和插件来扩展和定制你的Kafka部署。\",\"： 太棒了！Kafka的优点真是让人眼花缭乱。那么，我们来看看它的缺点吧。\",\"： 候选人，你认为Kafka有哪些缺点呢？\",\" 嗯，Kafka并不是适合所有场景的银弹。首先，它的部署和配置可能会有一些复杂性。特别是对于新手来说，可能需要一些时间来理解和掌握。\",\"： 是的，Kafka的配置确实需要一些技术功底。还有其他的缺点吗？\",\" 另一个缺点是Kafka对磁盘的使用比较高。由于它的持久性存储和消息回溯的特性，它需要大量的磁盘空间来存储消息。这可能会增加硬件成本。\",\"： 嗯，磁盘使用是一个需要考虑的因素。还有其他的缺点吗？\",\" 最后，Kafka在一些特定的使用情况下可能会有一些性能瓶颈。例如，当消息的顺序性很重要时，Kafka的分区机制可能会导致一些延迟。\",\"： 好的，这些是Kafka的一些缺点。但总体来说，它的优点还是非常突出的。\",\"： 没错！Kafka作为一个高吞吐量、可扩展、可靠的分布式消息系统，具有灵活的消息传递模型和持久性存储的能力。虽然它的部署和配置可能有些复杂，而且对磁盘的使用较高，但它的优点远远超过了缺点。\",\" 是的，Kafka在处理实时数据和构建可靠的数据管道方面非常强大。它的活跃社区和丰富的生态系统也为开发者提供了很多便利。\",\"： 没错！对于刚入行的技术人员来说，学习和掌握Kafka将是一个很好的选择。它不仅能够提升你的技术能力，还能为你的职业发展打下坚实的基础。\",\" 没错！Kafka的优点和缺点都值得我们深入了解和探讨。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1437\":{\"c\":[\"《面试1v1》\"]},\"1438\":{\"h\":\"Kafka性能好在哪里\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 嗨，欢迎来到我们的面试！今天我们要聊聊Kafka的性能。你对Kafka有了解吗？\",\" 当然！Kafka是一个高吞吐量、低延迟的分布式消息队列，被广泛应用于大规模数据处理和实时流处理场景。\",\"： 很好！那你能给我解释一下Kafka的性能是如何实现的吗？\",\" 当然！Kafka的高性能得益于它的设计理念和架构。首先，Kafka采用了分布式的消息存储和复制机制，使得它可以处理大量的消息并保证数据的可靠性。此外，Kafka还利用了磁盘顺序写和零拷贝技术，提高了数据的写入和读取效率。\",\"： 很棒！你能给我举个例子来说明Kafka的性能吗？\",\" 当然！想象一下，你有一个应用程序需要处理大量的日志数据。使用Kafka，你可以将这些日志数据发送到一个主题（Topic）中，然后多个消费者可以并行地从这个主题中读取数据进行处理。这种并行处理的方式使得Kafka能够轻松应对高并发的场景，提供出色的性能。\",\"： 非常好！那你能给我解释一下Kafka的消息传递机制吗？\",\" 当然！Kafka的消息传递机制基于发布-订阅模式。生产者将消息发送到一个或多个主题，而消费者则订阅这些主题并从中读取消息。Kafka保证了消息的顺序性和可靠性，同时还支持消息的批量处理和压缩，进一步提高了性能和效率。\",\"： 很好！你对Kafka的性能优化有什么建议吗？\",\" 当然！首先，我们可以通过增加分区（Partition）的数量来提高Kafka的吞吐量。此外，合理配置Kafka的参数，如调整副本（Replica）的数量和消息的批处理大小，也可以对性能进行优化。另外，我们还可以使用Kafka的监控工具来实时监测和调整Kafka集群的性能。\",\"： 太棒了！你对Kafka的性能有了很好的理解。有没有什么其他的问题你想问我的？\",\" 是的！我想知道Kafka的消费者是如何处理消息的失败和重试的？\",\"： 好问题！Kafka的消费者可以通过设置适当的参数来控制消息的提交和重试机制。如果消费者在处理消息时发生错误，它可以选择将消息标记为已处理或者进行重试。此外，Kafka还提供了消费者组（Consumer Group）的概念，可以实现消息的负载均衡和故障恢复。\",\" 非常感谢您的解答！这次面试对我来说非常有意义。\",\"： 不客气！你的回答非常出色，对Kafka的性能有了深入的理解。祝你在未来的工作中取得更大的成功！\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1439\":{\"c\":[\"《面试1v1》\"]},\"1440\":{\"h\":\"如何提高远程用户吞吐量\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 嗨，候选人！听说你对 Kafka 吞吐量有一些见解？\",\" 嗨，面试官！是的，我对这个话题有一些想法。你知道吗，Kafka 是一个强大的分布式消息系统，但是在处理远程用户时，我们需要一些技巧来提高吞吐量。\",\"： 哦，真的吗？那你能给我一些具体的例子吗？\",\" 当然！一个简单的方法是通过调整 Kafka 的一些配置参数来提高吞吐量。比如，我们可以增加 fetch.max.bytes 参数的值，这样可以一次性获取更多的数据，减少网络传输的开销。\",\"// 下面是一段示例代码，展示如何调整 `fetch.max.bytes` 参数 // 设置 `fetch.max.bytes` 参数为 10MB props.put(\\\"fetch.max.bytes\\\", \\\"10485760\\\");\",\"： 哇，这个方法听起来很简单有效！还有其他的方法吗？\",\" 当然！另一个方法是使用批量发送消息的方式来提高吞吐量。我们可以将多个消息打包成一个批次，然后一次性发送给 Kafka。这样可以减少网络传输的次数，提高效率。\",\"// 下面是一段示例代码，展示如何使用批量发送消息 // 创建一个 ProducerRecord 的列表 List<ProducerRecord<String, String>> records = new ArrayList<>(); records.add(new ProducerRecord<>(\\\"topic\\\", \\\"key1\\\", \\\"value1\\\")); records.add(new ProducerRecord<>(\\\"topic\\\", \\\"key2\\\", \\\"value2\\\")); records.add(new ProducerRecord<>(\\\"topic\\\", \\\"key3\\\", \\\"value3\\\")); // 批量发送消息 producer.send(records);\",\"： 这个批量发送消息的方法听起来很实用！还有没有其他的技巧？\",\" 当然还有！我们还可以通过增加分区数来提高吞吐量。每个分区都可以并行处理消息，增加分区数可以增加并行处理的能力，从而提高整体吞吐量。\",\"// 下面是一段示例代码，展示如何增加分区数 // 创建一个新的 topic，并设置分区数为 10 NewTopic newTopic = new NewTopic(\\\"topic\\\", 10, (short) 1); adminClient.createTopics(Collections.singleton(newTopic));\",\"： 哇，这个方法听起来很厉害！有没有其他的建议？\",\" 当然！除了上述方法，我们还可以考虑优化消费者的配置，比如增加 max.poll.records 参数的值，这样可以一次性获取更多的消息，提高消费者的处理能力。\",\"// 下面是一段示例代码，展示如何增加 `max.poll.records` 参数的值 // 设置 `max.poll.records` 参数为 100 props.put(\\\"max.poll.records\\\", \\\"100\\\");\",\"： 太棒了！你给出的这些方法都很实用。谢谢你的分享！\",\" 不客气，我很高兴能与你分享这些方法。希望这些技巧能帮助你提高 Kafka 的远程用户吞吐量。如果你还有其他问题，我随时都可以回答！\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1441\":{\"c\":[\"《面试1v1》\"]},\"1442\":{\"h\":\"如果从Kafka得到准确消息\",\"t\":[\"面试官：嗨，小伙子，听说你对Kafka很感兴趣，那你能告诉我，从Kafka中获取准确的信息有什么要注意的地方吗？\",\"候选人：当然！要从Kafka中获取准确的信息，首先我们需要了解Kafka的工作原理。Kafka是一个分布式的消息队列，它将消息以topic的形式进行组织和存储。每个topic可以有多个分区，而每个分区又可以有多个副本。这种分布式的架构使得Kafka具备了高可用性和高吞吐量的特点。\",\"面试官：嗯，不错！那你能告诉我，如何从Kafka中消费消息呢？\",\"候选人：当然！要消费Kafka中的消息，我们需要创建一个消费者。消费者可以订阅一个或多个topic，并从每个分区中拉取消息。这里有一个简单的Java代码示例，让我们来看一下：\",\"import org.apache.kafka.clients.consumer.ConsumerRecords; import org.apache.kafka.clients.consumer.KafkaConsumer; import org.apache.kafka.common.TopicPartition; import java.util.Collections; import java.util.Properties; public class KafkaConsumerExample { public static void main(String[] args) { Properties props = new Properties(); props.put(\\\"bootstrap.servers\\\", \\\"localhost:9092\\\"); props.put(\\\"group.id\\\", \\\"my-consumer-group\\\"); props.put(\\\"key.deserializer\\\", \\\"org.apache.kafka.common.serialization.StringDeserializer\\\"); props.put(\\\"value.deserializer\\\", \\\"org.apache.kafka.common.serialization.StringDeserializer\\\"); KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props); consumer.subscribe(Collections.singletonList(\\\"my-javapub-topic\\\")); while (true) { ConsumerRecords<String, String> records = consumer.poll(100); for (ConsumerRecord<String, String> record : records) { System.out.println(\\\"Received message: \\\" + record.value()); } } } }\",\"面试官：哇，你真是个天才！这段代码看起来很简单明了。但是，如何确保我们从Kafka中获取的信息是准确的呢？\",\"候选人：嗯，这是个好问题！要确保从Kafka中获取的信息是准确的，我们可以采取一些措施。首先，我们可以使用Kafka的消息确认机制。在消费者消费消息后，可以向Kafka发送确认消息，告诉Kafka这条消息已经被成功消费。这样，Kafka就会将该消息标记为已消费，避免重复消费。\",\"另外，我们还可以使用Kafka的偏移量（offset）来确保消息的顺序性。每个分区都有一个唯一的偏移量，表示消息在该分区中的位置。我们可以记录每个分区的偏移量，并在消费消息时按照偏移量的顺序进行消费，这样就能保证消息的顺序性。\",\"面试官：太棒了！你对Kafka的理解真是深入透彻。有没有其他的建议或技巧可以分享给我们呢？\",\"候选人：当然！除了上述的措施外，还有一些其他的建议。首先，我们可以使用Kafka的监控工具来实时监控Kafka集群的状态和性能指标。这样，我们可以及时发现并解决潜在的问题，确保系统的稳定性和可靠性。\",\"另外，我们还可以使用Kafka的分区机制来实现消息的负载均衡。通过合理地设置分区数和副本数，可以将消息均匀地分布在不同的节点上，提高系统的并发处理能力。\",\"面试官：太棒了！你的回答非常详细，我对你的理解和表达能力印象深刻。谢谢你的分享！\",\"候选人：非常感谢您的夸奖！我很高兴能与您分享我的知识。如果您还有其他关于Kafka或其他技术的问题，请随时提问，我会尽力帮助您。\"]},\"1443\":{\"c\":[\"《面试1v1》\"]},\"1444\":{\"h\":\"Kafka架构设计\",\"t\":[\"面试官： 嗨，小明！听说你对Kafka的架构设计很感兴趣，是吗？\",\"候选人： 是的，我一直对Kafka很好奇。它是如何处理大规模数据流的呢？\",\"面试官： 哈哈，没错！Kafka是一个强大的分布式流处理平台。它的架构设计非常有趣，我们来一起探索一下吧！\",\"候选人： 太好了！我迫不及待想了解更多。\",\"面试官： 那我们先从Kafka的基本概念开始吧。Kafka有四个核心组件：Producer（生产者）、Consumer（消费者）、Topic（主题）和Broker（代理）。\",\"候选人： 好的，这些概念我都知道。Producer负责将消息发送到Kafka集群，Consumer从集群中读取消息，Topic是消息的类别，而Broker则是消息的存储和传输中心。\",\"面试官： 没错！Kafka的架构设计非常简洁明了。现在，让我们深入了解一下Broker的内部结构。\",\"// 这是Kafka Broker的源码，我们来看一下它是如何工作的 public class KafkaBroker { private List<TopicPartition> partitions; public void receiveMessage(Message message) { // 接收消息的逻辑 // ... } public void sendMessage(Message message) { // 发送消息的逻辑 // ... } // 更多方法... }\",\"候选人： 哇，你真的写了一段Kafka Broker的源码！看起来很简单。\",\"面试官： 是的，这只是一个简化的示例，但它展示了Broker的基本工作原理。当Producer发送消息时，Broker会接收并存储消息。而当Consumer请求消息时，Broker会将消息发送给Consumer。\",\"候选人： 这听起来很直观。那么，Kafka是如何实现高吞吐量和可伸缩性的呢？\",\"面试官： 很好的问题！Kafka通过分区（Partition）和副本（Replication）来实现高吞吐量和可伸缩性。\",\"候选人： 分区和副本？能给我解释一下吗？\",\"面试官： 当然！分区是将Topic分成多个较小的部分，每个分区都有一个Leader和多个Follower副本。Leader负责处理读写请求，而Follower副本则用于备份和提供冗余。\",\"候选人： 这样一来，每个分区都可以独立地处理读写请求，对吗？\",\"面试官： 没错！这就是为什么Kafka能够实现高吞吐量和可伸缩性的原因之一。通过将Topic分成多个分区，Kafka可以并行处理大量的消息。\",\"候选人： 那么，如果Leader副本出现故障怎么办？\",\"面试官： 很好的问题！Kafka使用ZooKeeper来管理分区和副本的状态。当Leader副本发生故障时，ZooKeeper会自动选举一个新的Leader副本。\",\"候选人： 这样就能保证高可用性了！\",\"面试官： 没错！Kafka的架构设计非常注重可靠性和容错性。它能够自动处理故障，并保证消息的可靠传递。\",\"候选人： 太棒了！我对Kafka的架构设计有了更深入的了解。谢谢你的解答！\",\"面试官： 不客气！如果你还有其他问题，随时问我。记住，Kafka是一个非常强大的工具，它在大数据处理和实时流处理方面有着广泛的应用。\"]},\"1445\":{\"c\":[\"《面试1v1》\"]},\"1446\":{\"h\":\"Java多线程\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 说说你对多线程的理解?\",\" 多线程就是同时运行多个线程,实现一件事的并行处理。比如开个程序,同时下载多个文件,同时处理多个客户端请求等等。 ：那什么是线程安全的?举个例子?\",\" 线程安全就是多个线程访问同一个对象或调用同一方法时,对象或方法内部的状态能保证正确。举个例子,String 是线程安全的,因为 String 内部的 char 数组是final的,不可变的。\",\"public final class String { private final char value[]; }\",\"：ArrayList线程安全吗?\",\" ArrayList 不是线程安全的,因为:\",\"transient Object[] elementData; // elementData 可以改变\",\"如果多个线程同时访问一个 ArrayList,其中一个线程正在扩容数组,这时另一个线程在读或添加元素,很可能引起空指针或者越界异常。 ：HashMap 呢?线程安全吗?\",\" HashMap 也不是线程安全的,跟 ArrayList 一样,HashMap 在多线程下也可能产生死循环、数据丢失等问题。因为:\",\"transient Node<K,V>[] table;\",\"并发情况下,比如两个线程同时 put 新键值对,都重新扩容了数组,都做旧数组到新数组的迁移工作,这就会产生数据丢失的问题。 ：那如何解决 HashMap 的线程安全问题?\",\" 有几种常见的解决HashMap线程不安全的方法:\",\"Collections.synchronizedMap():返回一个线程安全的 HashMap,内部使用锁机制同步访问 HashMap。\",\"ConcurrentHashMap:Java 7 发布的线程安全的 HashMap。内部使用锁分段技术实现线程安全,并发度很高。\",\"Hashtable:Hashtable 是遗留的线程安全 HashMap,内部也使用同一把锁,并发度低。不推荐使用。\",\"外包装:可以使用 Lock 或者 synchronized 关键字对 HashMap 进行外包装,实现线程安全。\",\"：谢谢,内容很详细!总结一下,线程安全对我们来说很重要,在编写代码时要时刻考虑清楚。\",\" 是的,总结如下:\",\"多线程环境下,需谨慎使用非线程安全的类。如 ArrayList、HashMap。\",\"尽量选择Java提供的线程安全类,如String、ConcurrentHashMap。\",\"如果必须使用非线程安全的类,需要对其进行额外的同步措施,如加锁或者使用同步包装类。\",\"在编写代码时,要时刻考虑对象或方法的状态是否在多线程下也能保持一致和正确。这就是我们提到的“线程安全”。 多谢面试官的提问,让我对Java多线程和线程安全有一个比较全面和系统的复习,这些内容对我以后的学习和工作会很有帮助。\",\"： 说说 wait() notify() notifyAll() 的区别?\",\" 这三个方法都是用来协调线程间通信的。区别如下:\",\"wait():让当前线程等待,直到其他线程调用 notify() 方法通知,或经过指定的时间后重新等待。\",\"notify():唤醒等待在此对象上的一个线程。如果有多个线程等待,则唤醒优先级最高的线程。\",\"notifyAll():唤醒等待在此对象上的所有线程。\",\"：举个例子解释下?\",\" 这里是一个经典的生产者消费者模型来解释这三个方法:\",\"public class ProducerConsumer { private int product = 0; private boolean isProduced = false; public synchronized void produce() { // 等待,直到产品被消费 while (isProduced) { try { wait(); } catch (InterruptedException e) { e.printStackTrace(); } } // 生产产品 product++; isProduced = true; // 通知消费者消费产品 notifyAll(); } public synchronized void consume() { // 等待,直到有产品生产 while (!isProduced) { try { wait(); } catch (InterruptedException e) { e.printStackTrace(); } } // 消费产品 product--; isProduced = false; // 通知生产者生产产品 notifyAll(); } }\",\"这里 wait() 方法使生产线程和消费线程在产品未就绪时等待,notifyAll() 方法在产品就绪时唤醒等待线程。\",\"：sleep() 方法和 wait() 方法有什么区别?\",\" sleep() 和 wait() 的主要区别在于:\",\"wait() 方法释放锁,sleep() 方法不释放锁。\",\"wait() 方法通常被用于线程间通信,sleep() 方法用于暂停线程指定时间。\",\"wait() 方法可以在没有指定时间的情况下一直等待,sleep() 方法必须指定等待时间。\",\"wait() 方法被唤醒后必须重新获取锁,sleep() 方法睡醒后直接继续执行。 所以简单来说:wait() 可以用于线程间的同步,sleep() 主要用于暂停线程指定时间。\",\"：完美!谢谢你,这些知识点解释的很透彻。\",\" 不客气,多谢面试官的提问,让我对 wait() notify() notifyAll() 以及它们与 sleep() 的区别有了更深的理解,这些都是非常重要的多线程知识点,我会继续加深理解并运用的!\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1447\":{\"c\":[\"《面试1v1》\"]},\"1448\":{\"h\":\"Kafka消息采用pull还是push\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 嗨，候选人！你知道Kafka消息系统是如何工作的吗？\",\" 嗨，面试官！当然知道！Kafka是一个高吞吐量的分布式消息系统，它采用了Push和Pull的结合方式来实现消息传递。\",\"： 哦，那你能具体解释一下Kafka的Push和Pull模式吗？\",\" 当然可以！在Kafka中，生产者（Producer）负责将消息推送（Push）到Kafka的Broker节点，而消费者（Consumer）则从Broker节点拉取（Pull）消息进行处理。\",\"： 很好！那你能给我们看一段简单的代码来说明这个过程吗？\",\" 当然可以！让我给你展示一段Java代码来说明Kafka的Push和Pull模式：\",\"import org.apache.kafka.clients.producer.*; import org.apache.kafka.clients.consumer.*; import org.apache.kafka.common.serialization.StringDeserializer; import org.apache.kafka.common.serialization.StringSerializer; import java.util.Properties; public class KafkaDemo { private static final String TOPIC = \\\"my_topic\\\"; private static final String BOOTSTRAP_SERVERS = \\\"localhost:9092\\\"; public static void main(String[] args) { // 生产者代码 Properties producerProps = new Properties(); producerProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, BOOTSTRAP_SERVERS); producerProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName()); producerProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName()); Producer<String, String> producer = new KafkaProducer<>(producerProps); producer.send(new ProducerRecord<>(TOPIC, \\\"Hello Kafka!\\\")); // 消费者代码 Properties consumerProps = new Properties(); consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, BOOTSTRAP_SERVERS); consumerProps.put(ConsumerConfig.GROUP_ID_CONFIG, \\\"my_consumer_group\\\"); consumerProps.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName()); consumerProps.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName()); Consumer<String, String> consumer = new KafkaConsumer<>(consumerProps); consumer.subscribe(Collections.singleton(TOPIC)); ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(1000)); for (ConsumerRecord<String, String> record : records) { System.out.println(\\\"Received message: \\\" + record.value()); } } }\",\"： 太棒了！这段代码很好地展示了Kafka的Push和Pull模式。那么，你能解释一下代码中的关键部分吗？\",\" 当然可以！在生产者部分，我们配置了Kafka的地址和序列化器，并使用producer.send()方法将消息推送到名为my_topic的主题中。而在消费者部分，我们配置了Kafka的地址、消费者组ID和反序列化器，并使用consumer.poll()方法从主题中拉取消息，然后进行处理。\",\"： 非常清晰明了！你对Kafka的Push和Pull模式有很好的理解。有没有什么需要注意的地方呢？\",\" 当然有！在使用Kafka的Push模式时，生产者需要确保消息能够成功推送到Broker节点，而在使用Pull模式时，消费者需要定期拉取消息以确保不会错过任何重要的数据。\",\"： 非常好！你对Kafka的Push和Pull模式的理解非常到位。谢谢你的回答！\",\" 非常感谢！我很高兴能够分享我的知识。如果还有其他关于Kafka或者任何其他技术的问题，我都会尽力帮助解答！\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1449\":{\"c\":[\"《面试1v1》\"]},\"1450\":{\"h\":\"Kafka与传统消息系统区别\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 传统消息系统是怎么工作的？\",\" 传统消息系统通常采用点对点或发布-订阅模式来传递消息。发送者将消息发送到一个中间件（比如ActiveMQ或RabbitMQ），然后接收者从中间件中接收消息。\",\"： 没错！传统消息系统使用中间件作为消息的中转站。那么，Kafka和传统消息系统有什么不同呢？\",\" Kafka是一个分布式流处理平台，它以高吞吐量和低延迟而闻名。与传统消息系统不同，Kafka将消息存储在持久化的日志中，而不是立即将其传递给接收者。\",\"： 很好！Kafka的这种设计使得它具有很高的可伸缩性和容错性。那么，你能给我举个例子来说明Kafka的工作原理吗？\",\" 当然可以！假设我们有一个简单的消息队列，其中有三个分区（Partition）：P1、P2和P3。发送者将消息M1发送到P1，消息M2发送到P2，消息M3发送到P3。接收者可以从这些分区中读取消息。\",\"// 这是Kafka的源码示例，让我们来看看它是如何工作的 // 创建一个生产者 Producer producer = new Producer(); // 发送消息到分区P1 producer.send(\\\"P1\\\", \\\"M1\\\"); // 发送消息到分区P2 producer.send(\\\"P2\\\", \\\"M2\\\"); // 发送消息到分区P3 producer.send(\\\"P3\\\", \\\"M3\\\"); // 创建一个消费者 Consumer consumer = new Consumer(); // 从分区P1读取消息 String message1 = consumer.consume(\\\"P1\\\"); // 从分区P2读取消息 String message2 = consumer.consume(\\\"P2\\\"); // 从分区P3读取消息 String message3 = consumer.consume(\\\"P3\\\");\",\"： 太棒了！你用代码很好地解释了Kafka的工作原理。那么，Kafka还有哪些特点？\",\" Kafka具有高度可扩展性，可以轻松地处理大量的消息和高并发。此外，Kafka还支持消息的持久化存储和数据复制，确保消息的可靠性和容错性。\",\"： 没错！Kafka的这些特点使得它成为处理实时数据流的理想选择。它在大数据领域中得到了广泛的应用。你觉得Kafka和传统消息系统相比，有什么优势呢？\",\" Kafka相比传统消息系统有几个明显的优势。首先，Kafka的高吞吐量和低延迟使得它能够处理大规模的数据流。其次，Kafka的持久化存储和数据复制功能确保了消息的可靠性和容错性。最后，Kafka的可扩展性使得它能够适应不断增长的数据需求。\",\"： 非常好！你对Kafka和传统消息系统的区别有很清晰的认识。这些知识对于刚入行的技术人员来说非常重要。有没有什么问题想问我的？\",\" 我想知道Kafka在实际应用中的一些最佳实践和常见问题解答。\",\"： 太好了！这正是我们下一次面试的话题。我们可以深入探讨Kafka的最佳实践和解决方案。感谢你的时间，你对Kafka的理解非常出色！\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1451\":{\"c\":[\"《面试1v1》\"]},\"1452\":{\"h\":\"Kafka的ack机制\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 嗨，小王！听说你对Kafka的ack机制很感兴趣，是吗？\",\" 是的，王哥！我一直想了解一下Kafka的ack机制是怎么回事。\",\"： 好问题！那么，你知道Kafka的ack机制是用来做什么的吗？\",\" 嗯，我知道它是用来确保消息的可靠性传递的。但是具体怎么实现的呢？\",\"： 很好！简单来说，Kafka的ack机制是通过生产者和消费者之间的协作来实现的。当生产者发送消息到Kafka集群时，它可以选择等待消息被确认（ack）后再发送下一条消息，或者直接发送下一条消息而不等待确认。\",\" 那么，等待确认和不等待确认有什么区别呢？\",\"： 哈哈，这就像是你在餐厅点菜的时候的两种方式。如果你等待服务员确认你的点菜后再点下一道菜，那么你可以确保每道菜都被正确记录下来。但是如果你不等待确认，直接点下一道菜，那么可能会出现点菜遗漏的情况。\",\" 哦，我明白了！那么，Kafka是如何实现这个机制的呢？\",\"： 很聪明的问题！在Kafka中，生产者发送消息时，可以设置消息的确认级别（ack level）。有三个级别可供选择：0、1和all。当设置为0时，生产者不会等待任何确认，直接发送下一条消息。当设置为1时，生产者会等待消息被Kafka集群的leader确认后再发送下一条消息。而当设置为all时，生产者会等待消息被所有的副本（replica）确认后再发送下一条消息。\",\" 哇，这么灵活！那么，如果消息没有被确认怎么办？\",\"： 如果消息没有被确认，Kafka会自动进行重试，直到达到最大重试次数。如果仍然没有成功，那么生产者可以选择放弃发送或者采取其他措施，比如记录日志或者通知管理员。\",\" 哦，原来如此！那么，这个机制对于我在实际工作中有什么帮助呢？\",\"： 嗯，这个机制可以确保你的消息在传递过程中不会丢失。尤其是在一些对消息可靠性要求较高的场景下，比如金融交易或者实时监控系统，这个机制非常重要。\",\" 大师傅，谢谢你的解答！我对Kafka的ack机制有了更清晰的理解了。\",\"： 不客气，小明！记住，Kafka的ack机制是确保消息可靠性的关键。在你的工作中，要根据实际需求选择合适的确认级别，并且合理处理未确认的消息。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1453\":{\"c\":[\"《面试1v1》\"]},\"1454\":{\"h\":\"Kafka的幂等性\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 嗨，小明！听说你对Kafka的幂等性很感兴趣，是吗？\",\" 是的，我一直听说Kafka的幂等性很重要，但是具体是什么意思呢？\",\"： 哈哈，别担心，我来给你解释一下。幂等性其实就是指无论执行多少次相同的操作，结果都是一样的。在Kafka中，幂等性保证了消息的处理不会因为重复发送而产生副作用。\",\" 哦，明白了！那Kafka是怎么实现幂等性的呢？\",\"： 很好的问题！Kafka通过消息的唯一标识（通常是消息的key）来实现幂等性。在发送消息之前，Kafka会检查消息的key是否已经存在于特定的主题分区中。如果存在，Kafka就会认为这是一条重复的消息，并且不会将其写入分区。\",\" 那如果我想要发送相同的消息，但是又希望它们被写入分区怎么办呢？\",\"： 好问题！为了解决这个问题，Kafka引入了幂等性序列号（Idempotent Sequence Number）。每个生产者都会生成一个唯一的序列号，并将其附加到消息中。Kafka会使用这个序列号来判断消息的唯一性，而不是仅仅依赖于消息的key。这样，即使发送相同的消息，只要序列号不同，Kafka仍然会将其写入分区。\",\" 哇，这个设计真巧妙！那Kafka是如何保证幂等性的呢？\",\"： 很好奇心！Kafka使用了一种叫做\\\"幂等性写入\\\"的机制。当生产者发送消息时，Kafka会为每个分区维护一个递增的序列号。在写入消息之前，Kafka会检查消息的序列号是否大于分区中最后一条消息的序列号。如果是，Kafka会将消息写入分区，并更新序列号；如果不是，Kafka会认为这是一条重复的消息，并且不会写入分区。\",\" 哇，这样一来，就能保证消息不会被重复写入了！Kafka真是个聪明的家伙！\",\"： 是的，Kafka的设计确实很巧妙。通过幂等性的机制，Kafka能够保证消息的可靠性和一致性，让我们在处理大规模数据流时更加放心。\",\" 面试官，谢谢你的解答！我对Kafka的幂等性有了更深入的理解。\",\"： 不客气，小明！如果你还有其他关于Kafka或者其他技术的问题，随时都可以问我。记得在学习和工作中保持好奇心，不断探索新的知识和技术！\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1455\":{\"c\":[\"《面试1v1》\"]},\"1456\":{\"h\":\"Elasticsearch基础\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 嗨，欢迎来到我们的面试！今天我们要聊一聊ElasticSearch基础知识。你对ElasticSearch有了解吗？\",\" 当然！ElasticSearch是一个开源的分布式搜索和分析引擎，它可以帮助我们快速地存储、搜索和分析海量数据。简单来说，就是个大数据的搜索神器！\",\"： 哈哈，没错！那你能给我解释一下ElasticSearch的核心概念吗？\",\" 当然！ElasticSearch的核心概念包括索引（Index）、类型（Type）、文档（Document）和映射（Mapping）。索引就像是数据库中的表，类型就像是表中的记录类型，文档就是具体的记录，而映射则定义了文档的结构和字段类型。\",\"： 很好！那你能给我演示一下如何创建一个索引并插入文档吗？\",\" 当然！让我给你展示一下：\",\"PUT /my_index { \\\"mappings\\\": { \\\"properties\\\": { \\\"title\\\": { \\\"type\\\": \\\"text\\\" }, \\\"content\\\": { \\\"type\\\": \\\"text\\\" }, \\\"timestamp\\\": { \\\"type\\\": \\\"date\\\" } } } } POST /my_index/_doc/1 { \\\"title\\\": \\\"Hello ElasticSearch\\\", \\\"content\\\": \\\"ElasticSearch真是太棒了！\\\", \\\"timestamp\\\": \\\"2023-07-27\\\" }\",\"： 太棒了！你刚刚创建了一个名为\\\"my_index\\\"的索引，并插入了一篇文档。那如何进行搜索呢？\",\" 搜索非常简单！我们可以使用查询语句来进行搜索，比如这样：\",\"GET /my_index/_search { \\\"query\\\": { \\\"match\\\": { \\\"content\\\": \\\"棒\\\" } } }\",\"这个查询会返回所有内容中包含\\\"棒\\\"的文档。\",\"： 太棒了！你真是个ElasticSearch小能手！还有什么其他有趣的事情你想分享吗？\",\" 当然！除了基本的搜索功能，ElasticSearch还支持聚合、分析、地理位置搜索等高级功能。而且它还可以与Kibana等工具结合使用，进行数据可视化和监控。总之，ElasticSearch是个非常强大且灵活的工具，对于处理大数据和构建搜索引擎来说，简直是必备利器！\",\"： 太棒了！你对ElasticSearch的理解非常透彻，我对你的表现印象深刻！谢谢你的时间！\",\" 非常感谢！我很高兴能参加这次面试，希望能有机会为您的团队贡献我的技术和经验！\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1457\":{\"c\":[\"《面试1v1》\"]},\"1458\":{\"h\":\"Elasticsearch和Lucene\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 嗨，欢迎来到我们的面试！今天我们将聊一下ElasticSearch和Lucene。你对这两个技术有了解吗？\",\" 当然！ElasticSearch是一个基于Lucene构建的分布式搜索和分析引擎。它提供了强大的全文搜索功能和实时数据分析能力。\",\"： 很好！那你能给我解释一下Lucene是什么吗？\",\" 当然！Lucene是一个开源的全文搜索引擎库，它提供了一系列用于索引和搜索文档的API。它被广泛应用于各种应用程序中，包括搜索引擎、内容管理系统和商业应用等。\",\"： 那么ElasticSearch和Lucene之间有什么关系呢？\",\" ElasticSearch实际上是在Lucene的基础上构建的。它提供了一个分布式的、可扩展的搜索和分析平台，简化了Lucene的使用和管理。ElasticSearch通过提供RESTful API和分布式特性，使得在大规模数据集上进行搜索和分析变得更加容易。\",\"： 很棒！那你能给我举个例子，说明ElasticSearch和Lucene在实际应用中的作用吗？\",\" 当然！比如，假设我们有一个电商网站，需要实现商品搜索功能。我们可以使用Lucene来构建一个索引，将商品的属性（如名称、描述、价格等）存储在索引中。然后，我们可以使用ElasticSearch来搜索这个索引，根据用户的搜索关键字返回相关的商品结果。\",\"： 太棒了！你对ElasticSearch和Lucene的解释非常清晰。还有其他你想补充的吗？\",\" 是的，我还想提一下ElasticSearch的分布式特性。ElasticSearch使用分片和复制机制来实现数据的分布式存储和高可用性。它将索引划分为多个分片，并将每个分片复制到多个节点上，以实现数据的冗余和负载均衡。\",\"： 太好了！你对ElasticSearch和Lucene的理解非常透彻。非常感谢你的回答！\",\" 非常感谢您的提问！我很高兴能有这次面试机会，希望能有机会为您的团队贡献我的技术能力。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1459\":{\"c\":[\"《面试1v1》\"]},\"1460\":{\"h\":\"Elasticsearch架构设计\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 嗨，候选人！今天我们来聊聊ElasticSearch的架构设计，你对这个话题有什么了解吗？\",\" 嗨，面试官！当然有啦！ElasticSearch是一个开源的分布式搜索和分析引擎，基于Lucene构建，用于处理大规模数据的搜索和分析。它的设计目标是简单、可扩展和高效。\",\"ElasticSearch的核心组件\",\"： 很好！那你能给我简单介绍一下ElasticSearch的核心组件吗？\",\" 当然可以！ElasticSearch的核心组件包括：\",\"索引（Index）：类似于数据库中的表，用于存储和组织数据。\",\"文档（Document）：类似于数据库中的记录，是最小的数据单元。\",\"类型（Type）：用于对文档进行分类，类似于数据库中的表的类型。\",\"映射（Mapping）：定义了文档的结构和字段类型。\",\"分片（Shard）：将索引分成多个分片，以实现数据的分布式存储和处理。\",\"副本（Replica）：用于提高数据的可用性和容错性。\",\"ElasticSearch的搜索原理\",\"： 非常好！那你能给我解释一下ElasticSearch的搜索原理吗？\",\" 当然可以！ElasticSearch的搜索原理可以简单概括为以下几个步骤：\",\"查询解析（Query Parsing）：将用户的查询语句解析成查询对象。\",\"倒排索引（Inverted Index）：ElasticSearch使用倒排索引来加速搜索，它将每个词与包含该词的文档建立关联。\",\"评分（Scoring）：ElasticSearch使用TF-IDF算法和其他评分算法来计算文档的相关性得分。\",\"分布式搜索（Distributed Search）：ElasticSearch将搜索请求发送到所有相关的分片上，并将结果合并返回给用户。\",\"ElasticSearch的性能优化\",\"： 非常棒！那你能给我分享一些关于ElasticSearch性能优化的技巧吗？\",\" 当然可以！以下是一些性能优化的技巧：\",\"合理设计索引和映射：根据实际需求设计合理的索引和映射，避免不必要的字段和复杂的数据结构。\",\"使用分片和副本：根据数据量和负载情况，合理设置分片和副本的数量，以实现负载均衡和高可用性。\",\"使用缓存：ElasticSearch提供了缓存机制，可以缓存频繁使用的查询结果，提高查询性能。\",\"合理使用索引别名：使用索引别名可以方便地切换索引版本或进行灰度发布，同时减少代码中的硬编码。\",\"监控和优化查询性能：使用ElasticSearch提供的监控工具和API，定期监控查询性能并进行优化。\",\"： 太棒了！你对ElasticSearch的架构设计有很好的理解！有没有什么想补充的？\",\" 感谢夸奖！我想强调一点，ElasticSearch不仅仅是一个搜索引擎，它还可以用于日志分析、数据可视化等各种场景。所以，掌握ElasticSearch的架构设计对于刚入行的技术人员来说是非常有价值的。\",\"： 没错！ElasticSearch的应用非常广泛，对于技术人员来说是一个必备的技能。非常感谢你的分享！\",\" 不客气！我很高兴能与您分享这些知识。如果您还有其他问题，随时告诉我！\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1461\":{\"c\":[\"《面试1v1》\"]},\"1462\":{\"h\":\"Elasticsearch集群索引分片\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 嗨，欢迎来到我们的面试！今天我们将聊一聊ElasticSearch集群架构、索引和分片。你对这些有了解吗？\",\" 当然！ElasticSearch就像是一群小伙伴组成的团队，一起合作来处理海量数据。索引就像是我们的图书馆，每本书都有一个唯一的编号，方便我们快速找到需要的信息。而分片就像是把一本大书分成多个小册子，每个人负责一部分，这样我们可以并行处理数据。\",\"： 很形象的比喻！那么，ElasticSearch集群是如何工作的呢？\",\" 嗯，ElasticSearch集群就像是一个大家庭，由多个节点组成。每个节点都有自己的角色，有的是主节点，有的是数据节点。主节点负责协调整个集群的工作，而数据节点则负责存储和处理数据。\",\"： 很好！那么，索引是如何创建和管理的呢？\",\" 好问题！创建索引就像是在图书馆里开辟一个新的区域，我们可以给它起个名字，比如\\\"books\\\"。然后，我们可以定义这个索引的字段，比如书名、作者、出版日期等。这样，我们就可以根据这些字段来搜索和过滤数据了。\",\"： 非常清楚！那么，分片是如何工作的呢？\",\" 嗯，分片就像是把一本大书分成多个小册子，每个分片都是一个独立的存储单元。当我们往索引中添加数据时，ElasticSearch会根据一定的规则将数据均匀地分配到不同的分片上。这样，我们可以并行处理数据，提高性能和可扩展性。\",\"： 很棒！你对ElasticSearch集群架构、索引和分片的解释非常清晰。有没有什么源码方面的知识可以分享一下？\",\" 当然！让我给你展示一段简单的源码，来说明一下分片的工作原理：\",\"public class Shard { private String shardId; private List<Document> documents; public Shard(String shardId) { this.shardId = shardId; this.documents = new ArrayList<>(); } public void addDocument(Document document) { documents.add(document); } public List<Document> search(String keyword) { List<Document> results = new ArrayList<>(); for (Document document : documents) { if (document.contains(keyword)) { results.add(document); } } return results; } }\",\"这段代码模拟了一个分片的实现。我们可以看到，每个分片都有一个唯一的shardId，以及一个存储文档的列表。当我们添加文档时，它会被存储在对应的分片中。而当我们搜索关键字时，它会遍历分片中的文档，找到匹配的结果并返回。\",\"： 太棒了！你不仅解释得很清楚，还给出了源码示例。这对于刚入行的技术人员来说非常有帮助。谢谢你的分享！\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1463\":{\"c\":[\"《面试1v1》\"]},\"1464\":{\"h\":\"Elasticsearch倒排索引\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 嗨，欢迎来到我们的面试！今天我们要聊一聊ElasticSearch倒排索引，你对这个概念了解多少呢？\",\" 嗨，谢谢！ElasticSearch倒排索引，听起来有点高大上啊。不过，我会尽力用人话解释它。咱们先从搜索引擎说起吧。你知道搜索引擎是怎么找到相关结果的吗？\",\"： 当然知道！搜索引擎会根据关键词在网页中进行匹配，然后返回相关的结果。\",\" Bingo！而ElasticSearch倒排索引就是搜索引擎的一种核心技术。它的原理其实很简单，就像是一本索引书，记录了每个关键词在哪些文档中出现过。\",\"： 哦，那这样搜索的速度会更快，对吧？\",\" 没错！因为倒排索引可以直接定位到包含关键词的文档，而不需要逐个文档地搜索。这就像是你在书架上找一本书，如果有索引，你可以直接翻到对应的页码，而不需要一页一页地找。\",\"： 好像明白了。那你能给我一个简单的例子来解释一下吗？\",\" 当然可以！假设我们有三个文档，分别是：\",\"文档1: \\\"我喜欢吃苹果\\\" 文档2: \\\"我喜欢吃香蕉\\\" 文档3: \\\"我喜欢吃橙子\\\"\",\"如果我们要搜索关键词\\\"喜欢吃苹果\\\"，倒排索引会记录下这个关键词在文档1中出现过。这样，当我们搜索\\\"喜欢吃苹果\\\"时，就可以直接找到文档1，而不需要遍历所有文档。\",\"： 哇，这样的话搜索速度真的会快很多！那倒排索引是怎么构建的呢？\",\" 构建倒排索引其实也很简单。我们可以遍历所有文档，将每个文档中的关键词提取出来，并记录下关键词出现的文档编号。这样，当用户搜索时，我们只需要查找关键词对应的文档编号，就能快速定位到相关文档。\",\"： 这听起来不错！那倒排索引有什么应用场景呢？\",\" 倒排索引在搜索引擎、文本检索、数据分析等领域都有广泛应用。比如，当你在搜索引擎中输入关键词，它会根据倒排索引快速找到相关的网页；在电商网站中，倒排索引可以帮助用户快速找到想要的商品。\",\"： 哈哈，我现在对倒排索引有了更清晰的认识！谢谢你的解释。\",\" 不客气！我很高兴能帮助你理解倒排索引。如果你还有其他问题，我随时都可以回答。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1465\":{\"c\":[\"《面试1v1》\"]},\"1466\":{\"h\":\"Elasticsearch选主\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 嗨，候选人！今天我们来详细讨论一下ElasticSearch选主的重要性和具体过程。你对这个话题有了解吗？\",\" 当然有！选主是ElasticSearch中至关重要的一个操作，它决定了集群中哪个节点将成为主节点，负责协调整个集群的操作。选主的稳定性和可靠性对于集群的正常运行至关重要。\",\"： 非常正确！那么，你能详细解释一下选主的过程吗？\",\" 当然可以！选主的过程可以分为以下几个关键步骤：\",\"节点启动：每个ElasticSearch节点在启动时都会尝试与Zookeeper建立连接。Zookeeper是一个分布式协调服务，用于管理集群中的节点。\",\"竞选主节点：节点启动后，它们会竞选成为主节点。竞选的过程中，每个节点会生成一个唯一的ID，并将自己的ID和版本号发送给Zookeeper。\",\"Zookeeper的角色：Zookeeper会根据接收到的节点信息来选择主节点。它会维护一个有序的节点列表，并将最小的节点作为主节点。这种有序列表的维护是通过Zookeeper的顺序节点（Sequential Node）特性实现的。\",\"选主结果：一旦Zookeeper选出了主节点，它会将主节点的信息广播给所有的节点。其他节点会接收到这个信息，并将其作为参考，以便在后续的操作中与主节点进行通信。\",\"： 非常详细的解释！你能给我展示一下选主过程的源码示例吗？\",\" 当然可以！以下是一个简化的选主源码示例，帮助你更好地理解选主过程：\",\"// 导入相关的库和类 public class MasterElection { public static void main(String[] args) { // 连接Zookeeper ZooKeeper zooKeeper = new ZooKeeper(\\\"localhost:2181\\\", 5000, null); // 生成唯一ID String nodeId = UUID.randomUUID().toString(); // 将ID和版本号发送给Zookeeper zooKeeper.create(\\\"/election/node-\\\", nodeId.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL); // 等待选主结果 while (true) { List<String> children = zooKeeper.getChildren(\\\"/election\\\", false); String smallestNode = findSmallestNode(children); if (smallestNode.equals(nodeId)) { // 成为主节点 System.out.println(\\\"选主成功，我是主节点！\\\"); break; } else { // 不是主节点，等待 System.out.println(\\\"还没选上，继续等待...\\\"); Thread.sleep(1000); } } } // 找到最小的节点 private static String findSmallestNode(List<String> nodes) { String smallestNode = nodes.get(0); for (String node : nodes) { if (node.compareTo(smallestNode) < 0) { smallestNode = node; } } return smallestNode; } }\",\"： 太棒了！你的源码示例非常清晰，帮助我们更好地理解选主过程。有没有其他关于选主的问题想要问我的呢？\",\" 我想知道，如果主节点宕机了，ElasticSearch会如何重新选举新的主节点？\",\"： 好问题！当主节点宕机后，剩下的节点会重新竞选主节点。这个过程是自动的，ElasticSearch会自动处理选主过程，确保集群的正常运行。这种自动选主的机制保证了集群的高可用性和容错性。\",\" 明白了！谢谢你的解答！\",\"： 不客气！你的问题很棒，希望我能帮到你。如果你还有其他问题，随时都可以问我！\",\" 好的，谢谢你的帮助！\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1467\":{\"c\":[\"《面试1v1》\"]},\"1468\":{\"h\":\"Java反射\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 你好，请问你对 Java 反射有了解吗？\",\" 是的，我了解一些。\",\"： 那你能简单地介绍一下 Java 反射是什么吗？\",\" Java 反射是一种机制，它可以在运行时动态地获取类的信息，包括类的属性、方法、构造函数等，并且可以在运行时调用这些属性和方法。\",\"： 那你能举个例子来说明一下吗？\",\" 当然可以。例如，我们可以使用反射来动态地创建对象：\",\"Class<?> clazz = MyClass.class; MyClass obj = (MyClass) clazz.newInstance();\",\"在这个例子中，我们使用 MyClass.class 来获取 MyClass 类的 Class 对象，并使用 newInstance() 方法来创建 MyClass 类的实例。\",\"： 那反射具体有什么作用呢？\",\" 反射可以用于很多方面，例如：\",\"动态地创建对象\",\"动态地调用方法\",\"动态地获取和设置属性值\",\"动态地获取和设置数组元素\",\"动态地获取和设置注解\",\"动态地获取和设置泛型信息\",\"： 那你能举个例子来说明一下动态地调用方法吗？\",\" 当然可以。例如，我们可以使用反射来动态地调用方法：\",\"Class<?> clazz = MyClass.class; MyClass obj = (MyClass) clazz.newInstance(); Method method = clazz.getMethod(\\\"myMethod\\\", String.class); String result = (String) method.invoke(obj, \\\"hello\\\");\",\"在这个例子中，我们使用 MyClass.class 来获取 MyClass 类的 Class 对象，并使用 newInstance() 方法来创建 MyClass 类的实例。然后，我们使用 getMethod() 方法来获取 MyClass 类中名为 myMethod 的方法，并使用 invoke() 方法来调用这个方法。\",\"： 那你能说一下反射的优缺点吗？\",\" 反射的优点是可以在运行时动态地获取和操作类的信息，从而实现更加灵活和强大的功能。缺点是反射的性能比较低，因为它需要在运行时进行类型检查和方法调用，而且容易破坏封装性，因为它可以访问私有属性和方法。\",\"： 非常好，你对 Java 反射的了解很不错。谢谢你的回答。\",\" 谢谢您的夸奖，我会继续努力学习。\",\"： 那你能说一下反射和泛型的关系吗？\",\" 当然可以。反射可以用于动态地获取和设置泛型信息，例如：\",\"Class<?> clazz = MyClass.class; TypeVariable<?>[] typeParams = clazz.getTypeParameters();\",\"在这个例子中，我们使用 MyClass.class 来获取 MyClass 类的 Class 对象，并使用 getTypeParameters() 方法来获取 MyClass 类的泛型参数。\",\"反射还可以用于动态地获取和设置泛型类型，例如：\",\"Class<?> clazz = MyClass.class; Field field = clazz.getField(\\\"myField\\\"); Type fieldType = field.getGenericType();\",\"在这个例子中，我们使用 MyClass.class 来获取 MyClass 类的 Class 对象，并使用 getField() 方法来获取 MyClass 类中名为 myField 的字段。然后，我们使用 getGenericType() 方法来获取这个字段的泛型类型。\",\"： 那你能说一下反射和安全性的关系吗？\",\" 反射可以破坏封装性，因为它可以访问私有属性和方法。因此，在使用反射时需要格外小心，避免破坏程序的安全性。一般来说，我们应该尽量避免使用反射来访问私有属性和方法，而是通过公共接口来访问类的属性和方法。\",\"： 非常好，你对 Java 反射的了解很深入，先回去吧。\",\" 淦\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1469\":{\"c\":[\"《面试1v1》\"]},\"1470\":{\"h\":\"Elasticsearch索引文档底层过程\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 嗨，你准备好聊一聊Elasticsearch索引文档的底层过程了吗？\",\" 当然准备好了！让我们开始吧！\",\"： 首先，我们需要了解一下Elasticsearch底层索引文档的过程，包括分片和副本的处理。你知道分片和副本是什么吗？\",\" 当然！在Elasticsearch中，索引被分成多个分片，每个分片存储了索引的一部分数据。而副本则是分片的复制，用于提高数据的可用性和容错性。\",\"： 很好！那我们来看一下具体的索引文档的底层过程，包括分片和副本的处理。\",\" 在底层，当我们索引一个文档时，Elasticsearch会执行以下几个步骤：\",\"分析文档内容： 首先，Elasticsearch会将文档内容进行分析，包括词条化、去除停用词、转换为小写等。这样可以提高搜索的准确性和效率。\",\"路由到分片： 接下来，Elasticsearch会根据文档的路由值确定将文档索引到哪个分片。路由值可以是文档ID的哈希值，或者是自定义的路由键。这样可以确保具有相同路由值的文档被索引到同一个分片中。\",\"创建倒排索引： 对于目标分片，Elasticsearch会为每个词条创建倒排索引，记录词条在文档中的位置信息。\",\"处理副本： 如果索引配置了副本，Elasticsearch会将文档的副本分配给其他节点上的分片。这样可以提高数据的可用性和容错性。副本的数量可以根据需求进行配置。\",\"分布式写入： 当文档被索引到目标分片和副本后，Elasticsearch会使用分布式写入协调器来确保数据的一致性。协调器会将索引请求发送给相关的分片和副本，并等待它们的确认。\",\"存储文档： 最后，Elasticsearch会将原始文档和相关的元数据存储在磁盘上。这样，当我们检索文档时，Elasticsearch可以从磁盘中读取文档内容并返回给我们。\",\"： 很好！这就是Elasticsearch索引文档的底层过程，包括分片和副本的处理。通过分析文档内容，路由到目标分片，创建倒排索引，处理副本，并使用分布式写入协调器来确保数据的一致性，Elasticsearch能够高效地处理大量的文档和复杂的搜索需求。\",\" 是的，这个底层过程非常重要，它使得Elasticsearch能够在分布式环境中处理大规模的数据，并提供高可用性和容错性。\",\"： 没错！希望这个对话能帮助到你，也能帮助到你的读者。如果你还有其他问题，随时告诉我哦！\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1471\":{\"c\":[\"《面试1v1》\"]},\"1472\":{\"h\":\"TODO Elasticsearch搜索文档过程\"},\"1473\":{\"c\":[\"《面试1v1》\"]},\"1474\":{\"h\":\"动态代理\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 那你能说一下反射和动态代理的关系吗？\",\" 当然可以。动态代理是一种基于反射的机制，它可以在运行时动态地创建一个实现了指定接口的代理类，并将方法的调用转发到指定的处理器上。\",\"动态代理通常用于实现 AOP（面向切面编程），它可以在不修改原有代码的情况下，为类添加额外的功能，例如日志记录、性能统计、事务管理等。\",\"动态代理的实现依赖于反射机制，它可以在运行时动态地获取类的信息，并动态地创建代理类和代理对象。因此，反射是动态代理的基础。\",\"： 那你能举个例子来说明一下动态代理的使用吗？\",\" 当然可以。例如，我们可以使用动态代理来实现一个简单的日志记录器：\",\"public interface MyInterface { void myMethod(); } public class MyInterfaceImpl implements MyInterface { public void myMethod() { System.out.println(\\\"myMethod is called\\\"); } } public class MyInvocationHandler implements InvocationHandler { private Object target; public MyInvocationHandler(Object target) { this.target = target; } public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { System.out.println(\\\"before \\\" + method.getName() + \\\" is called\\\"); Object result = method.invoke(target, args); System.out.println(\\\"after \\\" + method.getName() + \\\" is called\\\"); return result; } } public class Main { public static void main(String[] args) { MyInterface target = new MyInterfaceImpl(); MyInvocationHandler handler = new MyInvocationHandler(target); MyInterface proxy = (MyInterface) Proxy.newProxyInstance( target.getClass().getClassLoader(), target.getClass().getInterfaces(), handler ); proxy.myMethod(); } }\",\"在这个例子中，我们定义了一个 MyInterface 接口和一个 MyInterfaceImpl 类，它实现了 MyInterface 接口。然后，我们定义了一个 MyInvocationHandler 类，它实现了 InvocationHandler 接口，并在 invoke() 方法中添加了日志记录的逻辑。\",\"最后，我们在 Main 类中使用 Proxy.newProxyInstance() 方法来创建一个实现了 MyInterface 接口的代理对象，并将方法的调用转发到 MyInvocationHandler 上。当我们调用代理对象的 myMethod() 方法时，会自动调用 MyInvocationHandler 中的 invoke() 方法，并输出日志记录信息。\",\"： 非常好，你对反射和动态代理的了解很深入。\",\" 谢谢您的夸奖，我会继续努力学习，早日通过面试。\",\"： 那你能说一下动态代理的优缺点吗？\",\" 当然可以。动态代理的优点是可以在运行时动态地创建代理对象，从而实现更加灵活和强大的功能。它可以在不修改原有代码的情况下，为类添加额外的功能，例如日志记录、性能统计、事务管理等。此外，动态代理还可以实现 AOP（面向切面编程），从而提高代码的可重用性和可维护性。\",\"动态代理的缺点是性能比较低，因为它需要在运行时进行类型检查和方法调用，并且需要动态地创建代理对象。此外，动态代理只能代理接口，无法代理类，因此它的应用范围受到一定的限制。\",\"： 那你能说一下动态代理和静态代理的区别吗？\",\" 当然可以。静态代理是在编译时就已经确定代理对象和被代理对象的关系，而动态代理是在运行时动态地创建代理对象。静态代理需要手动编写代理类，而动态代理可以自动生成代理类。静态代理只能代理一个类或接口，而动态代理可以代理多个类或接口。\",\"： 那你能说一下动态代理的实现原理吗？\",\" 当然可以。动态代理的实现原理是基于 Java 的反射机制和动态生成字节码技术。在运行时，动态代理会根据指定的接口或类，动态地生成一个代理类，并将方法的调用转发到指定的处理器上。代理类的生成过程是通过字节码生成器来实现的，它可以根据指定的接口或类，动态地生成一个代理类的字节码，并将其加载到内存中。代理类的字节码中包含了对被代理对象的引用，以及对代理方法的调用逻辑。当我们调用代理对象的方法时，会自动调用代理类中的方法，并将方法的调用转发到指定的处理器上。\",\"： 非常好，你对动态代理的了解很深入。\",\" 我通过面试了吗\",\"： 希望下次还能见到你。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1475\":{\"c\":[\"《面试1v1》\"]},\"1476\":{\"h\":\"CAS\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 上个面试官对你的基础有了一定了解，听说你小子很不错！下面我们聊点有深度的。\",\"： 简单介绍下 CAS 你了解什么?\",\" CAS是Compare And Swap的缩写,中文意思是比较与交换。它是一条 CPU 的原子指令,用于比较内存某个位置的值是否为预期值,如果是则更改为新的值。这一整个过程是原子的,也就是说它是线程安全的。\",\"： CAS 的用处是什么?\",\" CAS 主要用于实现非阻塞算法。常见的使用场景有:\",\"实现原子操作:像 Java 的 AtomicInteger,它使用 CAS 来原子更新变量值。\",\"// AtomicInteger 中 CAS 的运用 private volatile int value; public final int getAndIncrement() { int next; do { next = get(); } while (!compareAndSet(next, next + 1)); return next; }\",\"实现锁的非阻塞式获取:像乐观锁。先假设可以获取锁,如果获取失败了再判断是否需要阻塞。\",\"实现非阻塞的数据结构:像 ConcurrentLinkedQueue。使用 CAS 来实现链表节点的非阻塞追加等操作。\",\"实现线程调度:像 Swing 里的 EDT(事件调度线程),通过 CAS 来实现对事件调度状态的修改。\",\"： 说说 CAS 的 ABA 问题?\",\" CAS 操作包含三个操作数:内存位置(V)、旧的预期值(A)和新值(B)。如果当 CAS 操作开始时,V的确为A,但在 CAS 比较V和A之后,V的值变为了其他值,然后又变回A,就会产生ABA问题。 因为 CAS 操作只会在预期值A和当前值相同时更改为新值B,这时已经错失了一次更改的机会。 ABA 导致的问题是,当一个值原来是X,后来变成了Y,然后又变回X的时候,使用CAS进行检查时会发现它的值没有变化,但实际上却变动过了。这可能会对逻辑产生意料之外的影响。 常见的解决ABA问题的方法是使用版本号或者时间戳。在变量前面追加版本号version,每次变量更新的时候把version++,那么A-B-A 就会变成 1A-2B-3A,CAS 操作进行检查时就可以发现版本号不同,从而避免ABA问题。\",\"： 不错,CAS 是Java并发编程的基础之一,也是很重要的内容。能解释清楚CAS的ABA问题,且知道解决方法,未来会对并发编程有很大帮助。\",\" 是的,CAS 是实现Java并发编程的基础工具之一,理解透彻CAS和ABA问题,对后续学习各种并发工具和框架,乃至设计并发系统会非常有帮助。我会继续深入学习CAS相关内容,了解更多实践应用的案例,并在项目中运用的更加娴熟。 谢谢面试官的提问,让我对CAS和ABA问题有了更全面和深入的认识,这些知识点确实对并发编程来说是基础中的基础。我一定会继续加深理解的!\",\"： 乐观锁和悲观锁了解吗?有什么区别?\",\" 乐观锁和悲观锁是两种不同的锁机制: 悲观锁:总是假设会发生并发冲突,屏蔽一切可能违反数据完整性的操作。如synchronized关键词加在方法或者代码块上,会对该段代码采取排他锁,不允许其他线程同时执行。 乐观锁:假设不会发生并发冲突,只在提交操作时检查是否违反数据完整性。如果校验失败,就重试整个读取-修改-提交操作。典型的如CAS算法采用乐观锁。 两者主要区别在于对并发冲突的态度:\",\"悲观锁试图防止并发冲突,乐观锁则容忍并发冲突,并在发生冲突时重试。\",\"悲观锁会导致性能下降,因为任何时候只能有一个线程访问数据。而乐观锁可以让多个线程同时访问数据,只有在提交更新时才会检查并发冲突,所以性能更好。\",\"悲观锁一般由同步机制实现,开销更大。而乐观锁由CAS这样的原子操作实现,开销更小。 所以,总体来说:\",\"读次数多、更新次数少,且更新不需要很强一致性的用乐观锁。\",\"更新频繁,需要强一致性的用悲观锁。\",\"两者也可以结合使用,先乐观锁重试几次,再悲观锁。\",\"： 你说的很详细,那你在项目中用过这两种锁吗?遇到什么问题?\",\" 在项目中,我使用过synchronized作为悲观锁,和CAS + 版本号作为乐观锁。 使用synchronized时,由于锁定粒度太大,导致性能下降比较严重。后来在一些只读的方法上使用可重入锁ReentrantReadWriteLock,采用其读锁来提高并发度,性能得以提高。 使用CAS + 版本号时,由于业务的复杂性,导致版本号更新并不完全正确,产生过ABA问题。像在链表的删除操作,如果删除节点时版本号没有同步更新,这时线程B利用CAS把节点从A改成C,就产生了ABA问题,这时需要额外采取其他措施解决,比较棘手。 所以,总结来说使用锁机制时,需要考虑:\",\"锁的粒度,尽量加在必要的范围内。\",\"读写比例,如果读多,可以考虑读写锁。\",\"CAS使用时,要考虑清楚版本号的更新策略,避免ABA问题。\",\"悲观锁和乐观锁也可以灵活结合,必要时采用悲观锁避免问题进一步扩大。 通过上述实践,让我对这两种锁有了更深的认识,今后在设计系统和使用锁机制时可以运用的更加娴熟和灵活。\",\"： 很好,你对锁机制的理解已经深入到能够在实践中运用并解决遇到的问题的地步。这是学以致用的好例子,也让我对你的能力有了更高的评价。\",\"今天就先到这吧。\",\" 谢谢面试官的肯定。锁机制作为并发编程的基础,我也花了不少时间去理解和实践。在项目我玩的贼6。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1477\":{\"c\":[\"《面试1v1》\"]},\"1478\":{\"h\":\"JavaNIO\",\"t\":[\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 你好，我想问一下你对 Java NIO 的了解。\",\" 当然，Java NIO 是 Java 的一种 I/O 模型，它提供了一种基于缓冲区和通道的 I/O 操作方式。相比传统的 I/O 模型，Java NIO 具有更高的性能和更好的扩展性。\",\"： 那你能具体说一下 Java NIO 的特点吗？\",\" 当然可以。Java NIO 的特点主要有以下几点：\",\"非阻塞式 I/O：Java NIO 支持非阻塞式 I/O 操作，可以在等待 I/O 操作完成的同时，继续执行其他任务，从而提高系统的并发性能。\",\"缓冲区：Java NIO 使用缓冲区来处理数据，可以提高数据的读写效率，并且可以支持随机访问。\",\"通道：Java NIO 使用通道来进行数据的读写操作，通道可以支持双向数据传输，并且可以在不同的线程之间共享。\",\"选择器：Java NIO 提供了选择器来实现多路复用，可以同时监控多个通道的 I/O 事件，从而提高系统的并发性能。\",\"： 那你能说一下 Java NIO 的应用场景吗？\",\" 当然可以。Java NIO 的应用场景非常广泛，包括网络编程、文件操作、内存映射等。例如，在网络编程中，Java NIO 可以实现高性能的服务器和客户端，可以支持大量的并发连接，并且可以使用选择器来实现多路复用。在文件操作中，Java NIO 可以实现高效的文件读写操作，可以使用内存映射来提高文件的读取速度。在内存映射中，Java NIO 可以将文件映射到内存中，从而可以直接访问文件的内容，而无需进行繁琐的读写操作。\",\"： 那你能说一下 Java NIO 的核心组件吗？\",\" 当然可以。Java NIO 的核心组件包括缓冲区（Buffer）、通道（Channel）、选择器（Selector）和字节编解码器（Charset）。缓冲区用于存储数据，通道用于进行数据的读写操作，选择器用于实现多路复用，字节编解码器用于将字节流转换为字符流。这些组件共同构成了 Java NIO 的基础架构，可以支持高效的 I/O 操作。\",\"： 那你能给我举个例子，说明 Java NIO 在实际开发中的应用吗？\",\" 当然可以。在一个聊天室应用中，可以使用 Java NIO 来实现多个客户端之间的通信。每个客户端都可以使用一个通道来进行数据的读写操作，而服务器可以使用一个选择器来监控所有的通道，从而实现多路复用。这样可以大大提高服务器的并发性能，支持大量的并发连接。\",\"以下是一个简单的示例代码，用于实现一个简单的聊天室应用：\",\"import java.io.IOException; import java.net.InetSocketAddress; import java.nio.ByteBuffer; import java.nio.channels.SelectionKey; import java.nio.channels.Selector; import java.nio.channels.ServerSocketChannel; import java.nio.channels.SocketChannel; import java.util.Iterator; public class ChatRoomServer { private static final int PORT = 8888; private static final int BUFFER_SIZE = 1024; private static final String CHARSET = \\\"UTF-8\\\"; public static void main(String[] args) throws IOException { // 创建一个选择器 Selector selector = Selector.open(); // 创建一个服务器通道，并绑定到指定的端口 ServerSocketChannel serverChannel = ServerSocketChannel.open(); serverChannel.socket().bind(new InetSocketAddress(PORT)); serverChannel.configureBlocking(false); // 将服务器通道注册到选择器上，并监听连接事件 serverChannel.register(selector, SelectionKey.OP_ACCEPT); System.out.println(\\\"Server started on port \\\" + PORT); while (true) { // 阻塞等待事件发生 selector.select(); // 获取所有已经就绪的事件 Iterator<SelectionKey> iterator = selector.selectedKeys().iterator(); while (iterator.hasNext()) { SelectionKey key = iterator.next(); iterator.remove(); if (key.isAcceptable()) { // 处理连接事件 ServerSocketChannel channel = (ServerSocketChannel) key.channel(); SocketChannel clientChannel = channel.accept(); clientChannel.configureBlocking(false); clientChannel.register(selector, SelectionKey.OP_READ); System.out.println(\\\"Client connected: \\\" + clientChannel.getRemoteAddress()); } else if (key.isReadable()) { // 处理读事件 SocketChannel channel = (SocketChannel) key.channel(); ByteBuffer buffer = ByteBuffer.allocate(BUFFER_SIZE); int len = channel.read(buffer); if (len > 0) { buffer.flip(); String message = new String(buffer.array(), 0, len, CHARSET); System.out.println(\\\"Received message: \\\" + message); broadcast(selector, channel, message); } else if (len == -1) { channel.close(); } } } } } private static void broadcast(Selector selector, SocketChannel sender, String message) throws IOException { for (SelectionKey key : selector.keys()) { if (key.isValid() && key.channel() instanceof SocketChannel) { SocketChannel channel = (SocketChannel) key.channel(); if (!channel.equals(sender)) { ByteBuffer buffer = ByteBuffer.wrap(message.getBytes(CHARSET)); channel.write(buffer); } } } } }\",\"这个示例代码实现了一个简单的聊天室应用，使用 Java NIO 来实现多个客户端之间的通信。每个客户端都可以使用一个通道来进行数据的读写操作，而服务器可以使用一个选择器来监控所有的通道，从而实现多路复用。这样可以大大提高服务器的并发性能，支持大量的并发连接。\",\"： 代码写的很好，下次带笔记本过来。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1479\":{\"c\":[\"《面试1v1》\"]},\"1480\":{\"h\":\"Synchronized\",\"t\":[\"源码都背下来了，你给我看这\",\"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。\",\"： 你好，我看到你的简历上写着你熟悉 Java 中的 \\\"synchronized\\\" 关键字。你能给我讲讲它的作用吗？\",\" 当然，\\\"synchronized\\\" 是 Java 中的一个关键字，用于实现同步机制。它可以用来修饰方法或代码块，以确保在同一时间只有一个线程可以访问被修饰的代码。\",\"： 很好。那么，你能举个例子来说明 \\\"synchronized\\\" 关键字的使用方法吗？\",\" 当然。你可以使用 \\\"synchronized\\\" 关键字来修饰方法或代码块。例如，你可以这样使用：\",\"public synchronized void doSomething() { // ... }\",\"在上面的代码中，\\\"synchronized\\\" 关键字修饰了 \\\"doSomething()\\\" 方法。这意味着在同一时间只有一个线程可以访问该方法。\",\"： 很好。那么，如果我想修饰一个代码块，应该怎么做呢？\",\" 你可以这样使用 \\\"synchronized\\\" 关键字来修饰一个代码块：\",\"public void doSomething() { synchronized (this) { // ... } }\",\"在上面的代码中，\\\"synchronized\\\" 关键字修饰了一个代码块，该代码块使用 \\\"this\\\" 作为锁对象。这意味着在同一时间只有一个线程可以访问该代码块。\",\"： 很好。那么，你能解释一下 \\\"synchronized\\\" 关键字的实现原理吗？\",\" 当一个线程访问一个被 \\\"synchronized\\\" 关键字修饰的方法或代码块时，它会尝试获取该对象的监视器锁。如果该锁已经被其他线程持有，则该线程将被阻塞，直到该锁被释放。下面是一个使用 \\\"synchronized\\\" 关键字的示例：\",\"public class Counter { private int count = 0; public synchronized void increment() { count++; } public synchronized void decrement() { count--; } public synchronized int getCount() { return count; } }\",\"在上面的代码中，\\\"increment()\\\"、\\\"decrement()\\\" 和 \\\"getCount()\\\" 方法都被 \\\"synchronized\\\" 关键字修饰。这意味着在同一时间只有一个线程可以访问这些方法。\",\"： 很好，你对 \\\"synchronized\\\" 关键字的理解很清晰。那么，你能告诉我 \\\"synchronized\\\" 关键字的缺点吗？\",\" 当然。使用 \\\"synchronized\\\" 关键字会带来一些性能上的开销，因为每个线程都需要获取锁才能访问被修饰的代码。此外，如果使用不当，还可能会导致死锁等问题。\",\"： 那么，你能告诉我如何避免 \\\"synchronized\\\" 关键字带来的性能开销吗？\",\" 当然。一种方法是使用 \\\"volatile\\\" 关键字来修饰变量，这可以确保变量的可见性，而不需要使用锁。另一种方法是使用 \\\"java.util.concurrent\\\" 包中的并发集合类，例如 ConcurrentHashMap、CopyOnWriteArrayList 等，这些类使用了更高效的同步机制，可以避免 \\\"synchronized\\\" 关键字带来的性能开销。\",\"： 很好，你的回答很不错。那么，你能告诉我 \\\"synchronized\\\" 关键字和 \\\"Lock\\\" 接口之间的区别吗？\",\" 当然。 \\\"synchronized\\\" 关键字是 Java 中内置的同步机制，它可以用来修饰方法或代码块，使用起来比较简单，但是它的性能开销比较大。而 \\\"Lock\\\" 接口是 Java 中提供的一种更加灵活的同步机制，它可以实现更细粒度的锁控制，例如可重入锁、读写锁等，使用起来比较复杂，但是它的性能开销比较小。\",\"： 很好，你的回答很清晰。那么，你有没有使用过 \\\"Lock\\\" 接口呢？\",\" 是的，我有使用过 \\\"Lock\\\" 接口。例如，我曾经使用过 ReentrantLock 类来实现可重入锁，这可以避免 \\\"synchronized\\\" 关键字的性能开销，并且可以实现更细粒度的锁控制。\",\"： 很好，你的经验很丰富。那么，你能告诉我 \\\"Lock\\\" 接口的一些特点吗？\",\" 当然。 \\\"Lock\\\" 接口的一些特点包括：\",\"可以实现更细粒度的锁控制，例如可重入锁、读写锁等。\",\"可以实现公平锁和非公平锁。\",\"可以实现超时锁和可中断锁。\",\"可以实现多个条件变量，可以更加灵活地控制线程的等待和唤醒。\",\"： 那么，你能告诉我 \\\"synchronized\\\" 关键字和 \\\"volatile\\\" 关键字之间的区别吗？\",\" 当然。 \\\"synchronized\\\" 关键字和 \\\"volatile\\\" 关键字都可以用来实现多线程之间的同步，但是它们的作用不同。 \\\"synchronized\\\" 关键字可以确保在同一时间只有一个线程可以访问被修饰的代码，而 \\\"volatile\\\" 关键字可以确保变量的可见性，即当一个线程修改了变量的值后，其他线程可以立即看到这个修改。\",\"： 看来你使用的很好，下面问一点深入的东西。回答不上来也没关系，可以自己想想。\",\"： 好的，那么你能够从 \\\"synchronized\\\" 的底层 Java 实现角度，解释一下它的实现原理吗？\",\" 当一个线程访问一个被 \\\"synchronized\\\" 关键字修饰的方法或代码块时，它会尝试获取该对象的监视器锁。如果该锁已经被其他线程持有，则该线程将被阻塞，直到该锁被释放。在 Java 中，每个对象都有一个监视器锁，也称为内部锁或互斥锁。当一个线程获取了一个对象的监视器锁后，其他线程就无法访问该对象的被 \\\"synchronized\\\" 关键字修饰的方法或代码块，直到该锁被释放。\",\"在 Java 中，\\\"synchronized\\\" 关键字的实现是基于对象头中的标记字。当一个对象被锁定时，它的标记字会被设置为锁定状态，当锁被释放时，标记字会被清除。在 Java 6 及之前的版本中，对象头中的标记字是 32 位的，其中 25 位用于存储对象的哈希码，4 位用于存储对象的分代年龄，2 位用于存储锁标志位，1 位用于存储是否是偏向锁。在 Java 7 及之后的版本中，对象头中的标记字被重新设计，其中 32 位用于存储对象的哈希码和分代年龄，而锁标志位则被存储在一个单独的数据结构中。\",\"： 很好，你的回答很详细。那么，你能够给我讲讲 \\\"synchronized\\\" 关键字的优化策略吗？\",\" 当然。在 Java 中，\\\"synchronized\\\" 关键字的性能开销比较大，因为每个线程都需要获取锁才能访问被修饰的代码。为了优化 \\\"synchronized\\\" 关键字的性能，Java 6 及之后的版本中引入了偏向锁、轻量级锁和重量级锁等优化策略。\",\"偏向锁是一种针对单线程访问同步块的优化策略。当一个线程访问一个被 \\\"synchronized\\\" 关键字修饰的代码块时，它会尝试获取该对象的偏向锁。如果该锁没有被其他线程持有，则该线程可以直接获取该锁，而无需进行同步操作。如果该锁已经被其他线程持有，则该线程会尝试升级为轻量级锁或重量级锁。\",\"轻量级锁是一种针对多线程访问同步块的优化策略。当一个线程访问一个被 \\\"synchronized\\\" 关键字修饰的代码块时，它会尝试获取该对象的轻量级锁。如果该锁没有被其他线程持有，则该线程可以直接获取该锁，而无需进行同步操作。如果该锁已经被其他线程持有，则该线程会尝试自旋等待该锁的释放。\",\"重量级锁是一种针对多线程访问同步块的默认策略。当一个线程访问一个被 \\\"synchronized\\\" 关键字修饰的代码块时，它会尝试获取该对象的重量级锁。如果该锁没有被其他线程持有，则该线程可以直接获取该锁，而无需进行同步操作。如果该锁已经被其他线程持有，则该线程会被阻塞，直到该锁被释放。\",\"： 很好，你的回答很详细。那么，你能够给我讲讲 \\\"synchronized\\\" 关键字的底层 Java 源码实现吗？\",\" 当然。在 Java 中，\\\"synchronized\\\" 关键字的底层实现是通过 monitorenter 和 monitorexit 指令来实现的。当一个线程访问一个被 \\\"synchronized\\\" 关键字修饰的方法或代码块时，它会尝试获取该对象的监视器锁，这可以通过 monitorenter 指令来实现。当该线程执行完被 \\\"synchronized\\\" 关键字修饰的方法或代码块后，它会释放该对象的监视器锁，这可以通过 monitorexit 指令来实现。\"]},\"1481\":{\"h\":\"参考底层指令：\",\"t\":[\"以下是 JVM 中与 \\\"synchronized\\\" 相关的源码：\",\"monitorenter 指令的实现：\",\"void Interpreter::monitorenter() { oop obj = stack_top().get_obj(); // 获取栈顶元素，即被锁定的对象 if (obj == NULL) { // 如果对象为空，则抛出 NullPointerException 异常 THROW(vmSymbols::java_lang_NullPointerException()); } BasicLock* lock = obj->mark()->lock(); // 获取对象的锁 if (lock->displaced_header() == NULL) { // 如果锁没有被其他线程持有，则尝试获取锁 // Fast path: lock is unheld, try to acquire it if (lock->displaced_header() == NULL && lock->displaced_owner() == NULL && lock->set_displaced_header()) { // Lock acquired return; // 获取锁成功，直接返回 } } // Slow path: lock is held or contention detected InterpreterRuntime::monitorenter(THREAD, obj); // 获取锁失败，调用 InterpreterRuntime::monitorenter() 方法进行同步操作 }\",\"在上面的代码中，monitorenter 指令的实现是通过获取对象的锁来实现的。如果该锁没有被其他线程持有，则该线程可以直接获取该锁，而无需进行同步操作。如果该锁已经被其他线程持有，则该线程会尝试升级为轻量级锁或重量级锁。\",\"monitorexit 指令的实现：\",\"void Interpreter::monitorexit() { oop obj = stack_top().get_obj(); // 获取栈顶元素，即被锁定的对象 if (obj == NULL) { // 如果对象为空，则抛出 NullPointerException 异常 THROW(vmSymbols::java_lang_NullPointerException()); } BasicLock* lock = obj->mark()->lock(); // 获取对象的锁 if (lock->displaced_header() == THREAD) { // 如果锁被当前线程持有，则直接释放锁 // Fast path: lock is held by this thread, release it lock->clear_displaced_header(); return; // 释放锁成功，直接返回 } // Slow path: lock is held by another thread or unheld InterpreterRuntime::monitorexit(THREAD, obj); // 释放锁失败，调用 InterpreterRuntime::monitorexit() 方法进行同步操作 }\",\"在上面的代码中，monitorexit 指令的实现是通过释放对象的锁来实现的。如果该锁被当前线程持有，则该线程可以直接释放该锁，而无需进行同步操作。如果该锁被其他线程持有，则该线程会被阻塞，直到该锁被释放。\",\"ObjectMonitor 类的实现：\",\"class ObjectMonitor : public CHeapObj<mtSynchronizer> { friend class VMStructs; private: volatile intptr_t _header; // 对象头，用于存储锁状态和其他信息 volatile intptr_t _count; // 计数器，用于记录重入次数 volatile intptr_t _waiters; // 等待队列长度，用于记录等待锁的线程数 volatile intptr_t _recursions; // 递归深度，用于记录当前线程已经获取锁的次数 volatile intptr_t _object; // 对象指针，指向被锁定的对象 volatile intptr_t _owner; // 持有者指针，指向当前持有锁的线程 volatile intptr_t _WaitSet; // 等待队列头指针，指向等待队列的头节点 volatile intptr_t _EntryList; // 等待队列尾指针，指向等待队列的尾节点 volatile intptr_t _cxq; // 等待队列的条件变量，用于支持条件变量的等待和唤醒操作 volatile intptr_t _FreeNext; // 空闲链表指针，用于回收 ObjectMonitor 对象 volatile intptr_t _Responsible; // 责任线程指针，用于记录最后一个释放锁的线程 volatile intptr_t _SpinFreq; // 自旋频率，用于控制自旋等待的时间 volatile intptr_t _SpinClock; // 自旋时钟，用于记录自旋等待的时间 volatile intptr_t _SpinDuration; // 自旋持续时间，用于控制自旋等待的时间 volatile intptr_t _SpinEarly; // 自旋提前量，用于控制自旋等待的时间 volatile intptr_t _contentions; // 竞争次数，用于记录获取锁的竞争次数 volatile intptr_t _succ; // 成功次数，用于记录获取锁的成功次数 volatile intptr_t _cxqWaitTime; // 条件变量等待时间，用于记录条件变量等待的时间 volatile intptr_t _reserved; // 保留字段，用于未来扩展 static int _header_offset; // 对象头偏移量，用于访问对象头中的信息 static int _count_offset; // 计数器偏移量，用于访问计数器中的信息 static int _waiters_offset; // 等待队列长度偏移量，用于访问等待队列长度中的信息 static int _recursions_offset; // 递归深度偏移量，用于访问递归深度中的信息 static int _object_offset; // 对象指针偏移量，用于访问对象指针中的信息 static int _owner_offset; // 持有者指针偏移量，用于访问持有者指针中的信息 static int _WaitSet_offset; // 等待队列头指针偏移量，用于访问等待队列头指针中的信息 static int _EntryList_offset; // 等待队列尾指针偏移量，用于访问等待队列尾指针中的信息 static int _cxq_offset; // 条件变量偏移量，用于访问条件变量中的信息 static int _FreeNext_offset; // 空闲链表指针偏移量，用于访问空闲链表指针中的信息 static int _Responsible_offset; // 责任线程指针偏移量，用于访问责任线程指针中的信息 static int _SpinFreq_offset; // 自旋频率偏移量，用于访问自旋频率中的信息 static int _SpinClock_offset; // 自旋时钟偏移量，用于访问自旋时钟中的信息 static int _SpinDuration_offset; // 自旋持续时间偏移量，用于访问自旋持续时间中的信息 static int _SpinEarly_offset; // 自旋提前量偏移量，用于访问自旋提前量中的信息 static int _contentions_offset; // 竞争次数偏移量，用于访问竞争次数中的信息 static int _succ_offset; // 成功次数偏移量，用于访问成功次数中的信息 static int _cxqWaitTime_offset; // 条件变量等待时间偏移量，用于访问条件变量等待时间中的信息 static int _reserved_offset; // 保留字段偏移量，用于访问保留字段中的信息 ... };\",\"在上面的代码中，ObjectMonitor 类是 JVM 中与 \\\"synchronized\\\" 相关的核心类之一。它包含了对象的监视器锁的状态信息，例如锁的持有者、等待队列、递归深度等。在 Java 中，每个对象都有一个 ObjectMonitor 对象与之对应，用于实现 \\\"synchronized\\\" 关键字的同步机制。\",\"： 很好，你的回答很全面，你已进入候补名单。有消息会通知你。\",\" 源码都背下来了，你给我看这。\",\"最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注公众号JavaPub追更！\",\"🎁目录合集：\",\"Gitee：https://gitee.com/rodert/JavaPub\",\"GitHub：https://github.com/Rodert/JavaPub\",\"http://javapub.net.cn\"]},\"1482\":{\"c\":[\"《面试1v1》\"]},\"1483\":{\"h\":\"《面试1v1》\"},\"1484\":{\"h\":\"面试专题\"},\"1485\":{\"h\":\"《新闻搜索ElasticSearch》项目组\",\"t\":[\"https://kazjsfecs3y.feishu.cn/wiki/FyuvwRd8Iixffikodcect8ipnof\"]},\"1486\":{\"c\":[\"项目实战\",\"《新闻搜索ElasticSearch》\"]},\"1487\":{\"c\":[\"项目实战\",\"新闻搜索\",\"ElasticSearch\"]},\"1488\":{\"h\":\"介绍文档\"},\"1489\":{\"h\":\"《新闻搜索ElasticSearch》\",\"t\":[\"TODO 规划中...\",\"介绍文档\",\"手记微信阅读\"]},\"1490\":{\"c\":[\"项目实战\",\"《新闻搜索ElasticSearch》\"]},\"1491\":{\"c\":[\"项目实战\",\"新闻搜索\",\"ElasticSearch\"]},\"1492\":{\"h\":\"《用户中心》项目组\",\"t\":[\"这里是《用户中心》项目组，项目组文档自行取阅。\",\"从 0 到 1 开发用户中心，包括前后端完整项目。而且用户中心作为一个系统中必不可少的模块，通过对通用性的技术学习，也可以丰富我们的简历。 帮助初学者掌握项目的完整开发，从项目创建、设计、开发、到上线完整流程。\",\"这里的文章是整个项目中要用到的知识重点，如果有动手能力的朋友可以通过这些文章、关键源码和视频自学。\",\"需要全套源代码和手把手直播开发的朋友可阅读这里，直播视频和源码详细介绍，目前定价是一包华子的价格、平均每天 0.16¥，并且之后更新的所有视频和源码都可以获取观看。\"]},\"1493\":{\"h\":\"后端返回值结构体定义\",\"t\":[\"牛皮的程序猿后端返回值怎么定义\"]},\"1494\":{\"h\":\"《用户中心》\",\"t\":[\"介绍文档\",\"在后端接口封装中，我们一般都会对返回的数据做一个封装，以防止系统出现不可预期的数据结构和类型。比如这样：\",\"结构体 1\",\"{ \\\"success\\\": true, \\\"code\\\": 200, \\\"message\\\": \\\"成功\\\", \\\"data\\\": { \\\"items\\\": [ { \\\"id\\\": \\\"1\\\", \\\"name\\\": \\\"小王\\\", \\\"identified\\\": \\\"JavaPub博主\\\" } ] } }\",\"结构体 2\",\"{ \\\"ret\\\": 200, \\\"data\\\": { \\\"title\\\": \\\"Default Api\\\", \\\"content\\\": \\\"王哥 您好，欢迎使用 apifather!\\\", \\\"version\\\": \\\"1.1.0\\\", \\\"time\\\": 14231428021 }, \\\"msg\\\": \\\"\\\" }\",\"不论如何定义，多一个或少一个字段，我们都需要统一规范。接下来我们拆解一下，\",\"首先，通过观察，一定要有状态码，也就是案例中的 code 和 ret ，通过状态码可以知道当前程序哪里出了问题，比如 200 就是成功。有同学会问，为何不用 data 来判断，为空或者为 0 就是错误，当然不行。\",\"比如：下面这个结构，data 长度虽然等于 0，但是这属于确实没查到数据，而不是程序出错。\",\"{ \\\"ret\\\": 200, \\\"data\\\": [], \\\"msg\\\": \\\"\\\" }\",\"再看 data，这个毋庸置疑，它是接口的核心数据，也是接口对外提供的业务数据。\",\"再看 message 或者称为 msg，它是给状态做一个文字说明。比如，有个老六在定义了一个状态码（666），第一次调用这个接口的同学可能并不知道返回的状态码含义、也不想去查接口文档，我加个描述：（老六的接口不通啦），调用者就一目了然了。\",\"最后看 success 字段，这个字段是为了更规范而加的，方便前端直接将接口响应状态展示。比如：用户登录成功，可以展示一个 true，或者前端在判断时也可以写更简洁的代码 if result.success:。毕竟将（老六的接口不通啦）描述直接展示出来显得不太正式。\",\"基于以上几点，我们的返回结构这样定义：\",\"ApiResponse.class\",\"// 定义API响应结构体 public class ApiResponse<T> { private int status; // HTTP状态码 private String message; // 状态信息 private T data; // 返回的数据，泛型支持返回不同类型的数据 // 构造函数 public ApiResponse(ResponseStatus status) { this.status = status.getCode(); this.message = status.getMessage(); } // 带数据的构造函数 public ApiResponse(ResponseStatus status, T data) { this(status); this.data = data; } // Getter和Setter方法 // ... }\",\"定义完返回结构后，我们需要定义状态的枚举值。这是为了定一个统一的规范，方便开发时状态码搞混。\",\"// 定义状态码枚举 public enum ResponseStatus { SUCCESS(200, \\\"操作成功\\\"), ERROR(500, \\\"服务器内部错误\\\"), BAD_REQUEST(400, \\\"请求参数错误\\\"), NOT_FOUND(404, \\\"资源未找到\\\"), UNAUTHORIZED(401, \\\"未授权\\\"), FORBIDDEN(403, \\\"禁止访问\\\"); private final int code; private final String message; ResponseStatus(int code, String message) { this.code = code; this.message = message; } public int getCode() { return code; } public String getMessage() { return message; } }\",\"如何使用呢\",\"@GetMapping(\\\"/users/{id}\\\") public ResponseEntity<ApiResponse<User>> getUser(@PathVariable Long id) { try { User user = userService.getUserById(id); if (user != null) { return ResponseEntity.ok(new ApiResponse<>(ResponseStatus.SUCCESS, user)); } else { return ResponseEntity.status(HttpStatus.NOT_FOUND) .body(new ApiResponse<>(ResponseStatus.NOT_FOUND)); } } catch (Exception e) { // 这里可以根据异常类型返回不同的错误状态码和消息 return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR) .body(new ApiResponse<>(ResponseStatus.ERROR)); } }\",\"这里使用了 Spring 自带的返回结构体 ResponseEntity 进行封装。\",\"获取到的结果是这样的：\",\"{ \\\"code\\\": 200, \\\"message\\\": \\\"操作成功\\\", \\\"data\\\": { \\\"id\\\": \\\"1\\\", \\\"name\\\": \\\"javapub\\\", \\\"age\\\": 18 } }\",\"原文地址：\",\"https://javapub.net.cn/star/project/user-center/\"]},\"1495\":{\"c\":[\"项目实战\",\"《用户中心》\"]},\"1496\":{\"c\":[\"项目实战\",\"用户管理系统\"]},\"1497\":{\"h\":\"介绍文档\"},\"1498\":{\"h\":\"《用户中心》\",\"t\":[\"进行中...加入立即开始实战学习\",\"介绍文档\",\"手记微信阅读\"]},\"1499\":{\"c\":[\"项目实战\",\"《用户中心》\"]},\"1500\":{\"c\":[\"项目实战\",\"用户管理系统\"]},\"1501\":{\"h\":\"需求分析\",\"t\":[\"封面图\",\"程序员在企业中是如何做需求的 需求从哪里来，到哪里去\"]},\"1502\":{\"h\":\"《用户中心》\",\"t\":[\"介绍文档\",\"在企业中，一个需求从产生到完成生命周期是什么样的。\",\"它可以分为这样的步骤：\",\"需求分析 -> 设计（原型、功能、接口设计） -> 技术选型 -> 搭建项目框架 -> 编码（实现业务逻辑） -> 测试（自测+提测） -> 代码评审（code review） -> 部署上线\",\"需求是怎么产生的？\",\"一般来说需求都是由业务人员收集业务痛点，将这个痛点转换成需求；还有些需求是产品经理拍脑袋产生的... 这是一个很大的话题，同时也会诞生各种各样的奇葩需求，和大量的就业岗位。\",\"有个学妹自学了半年编程。今天找我说她打算找工作了，让我给讲讲公司里边做项目是什么流程、她好心里有个底。\",\"在实际工作中，项目的根据大小还有背景不同、整个生命周期也会有一些差别。大体分为：计划、设计、开发、测试、维护等步骤，我们就以一个需求的生命周期来分析。\",\"比如，有客户说，我们公司现在已经 3 个人了，需要一个用户管理系统来把这些人管理起来，你帮我安排一下。\",\"拿到需求后，是要做一个用户相关的系统，我给他起个名字就叫《用户中心》管理系统。\",\"需求\",\"首先是分析需求，这个系统作为用户管理，其中肯定要有用户的登录、用户添加、用户删除、用户查询等。\",\"设计\",\"原型设计\",\"功能设计 a.用户管理，用户登录、添加用户、用户删除、基于用户的名称的查询\",\"技术选型\",\"看需求有没有技术难点\",\"没有的话选择擅长和熟悉的技术栈\",\"搭建项目\",\"搭建项目的脚手架，也就是项目的公共模块 a. 比如对接口返回值的统一校验封装 b. 统一日志格式 c. 项目的代码模块目录 d. 还有一些常用的工具类等\",\"编码\",\"完成这一步就要开始编写代码。\",\"测试\",\"分为自测和提测，当然对于一些小公司划分的就没有这么细了，都是由于全干工程师一人搞定。\",\"代码评审\",\"也就是工友们一块审核代码规范，比如你的代码模块拆分，可以增强代码的可维护性。\",\"部署上线\",\"一般是项目开发中的最后一步，运维人员会将项目部署到用户可以访问的服务器，正式开始使用。\",\"视频：\",\"https://www.bilibili.com/video/BV17f421Q73r\",\"原文地址：\",\"https://javapub.net.cn/star/project/user-center/\"]},\"1503\":{\"c\":[\"项目实战\",\"《用户中心》\"]},\"1504\":{\"c\":[\"项目实战\",\"用户管理系统\"]},\"1505\":{\"h\":\"SpringBoot整合MyBatis-Plus\",\"t\":[\"SpringBoot如何整合MyBatis-plus MyBatis-plus这么好用，不允许还有人不会\"]},\"1506\":{\"h\":\"《用户中心》\",\"t\":[\"介绍文档\",\"你好呀，我是 javapub.\",\"做 Java 的同学都会用到的三件套，Spring、SpringMV、MyBatis。但是由于使用起来配置较多，依赖冲突频发。所有，各路大佬又在这上边做了包装，像我们常用的 SpringBoot、MyBatisPlus。\",\"基于当前要开发的是一个用户中心系统，查询逻辑比较简单，这里选用 MyBatis-Plus 就够用。但是很多同学还没用过这个工具，今天带你使用一下。省下时间来摸鱼啊。\"]},\"1507\":{\"h\":\"环境\",\"t\":[\"JDK17\",\"SpringBoot3.*\",\"初始化项目\",\"初始化一个 SpringBoot 项目，不需要添加 MyBatis 依赖。\",\"image-\",\"添加依赖\",\"在 mvnrepository 获取需要的 MyBatis-Plus 版本。这里以 MySQL 为例。\",\" <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <scope>runtime</scope> </dependency> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-spring-boot3-starter</artifactId> <version>3.5.7</version> </dependency>\",\"SpringBoot数据库信息配置\",\"application.yml\",\"# 应用服务 WEB 访问端口 server: port: 8080 # DataSource Config spring: datasource: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://rm-t4njraxo75r1e4jlevo.mysql.singapore.rds.aliyuncs.com:3306/javapub_test?characterEncoding=utf8&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&useSSL=false username: javapub_admin password: JavaPub666 sql: init: schema-locations: mybatis-plus: mapper-locations: classpath:mapper/*.xml type-aliases-package: cn.net.javapub.entity configuration: log-impl: org.apache.ibatis.logging.stdout.StdOutImpl # 这个配置会将执行的sql打印出来\",\"如果你没有数据库，可以来 javapub，给你提供一个免费的实例。\",\"SQL语句\",\"提供一个 SQL，用来做测试。\",\"user.sql\",\"create table user ( id bigint not null comment '主键ID' primary key, name varchar(30) null comment '姓名', age int null comment '年龄', email varchar(50) null comment '邮箱' ); INSERT INTO javapub_test.user (id, name, age, email) VALUES (1, '张子涵', 18, 'test1@javapub.net.cn'); INSERT INTO javapub_test.user (id, name, age, email) VALUES (2, '张子恒', 20, 'test2@javapub.net.cn'); INSERT INTO javapub_test.user (id, name, age, email) VALUES (3, '李子璇', 28, 'test3@javapub.net.cn'); INSERT INTO javapub_test.user (id, name, age, email) VALUES (4, '王梓旭', 21, 'test4@javapub.net.cn'); INSERT INTO javapub_test.user (id, name, age, email) VALUES (5, '曹欣然', 24, 'test5@javapub.net.cn');\",\"代码逆向生成工具\",\"推荐一个 IDE 插件，免费、简洁、好用。MyBatis-X\",\"它可以帮我快速的生成 service、mapper、entity、xml 层，减少重复工作。\",\"image-\",\"演示\",\"至此，就可以使用 MyBatis-Plus 了。在 test 文件下执行测试案例。\",\"image-\",\"其他用例\",\"从这个方法点进来可以看到 MyBatis-plus 源码，它已经帮我们把大多数的常用工具都做好了，只需要实现这个 service 和 mapper 类即可。\",\"image-\",\"源码： https://github.com/Rodert/SpringBoot-javapub/\",\"原文地址：\",\"https://javapub.net.cn/star/project/user-center/\"]},\"1508\":{\"c\":[\"项目实战\",\"《用户中心》\"]},\"1509\":{\"c\":[\"项目实战\",\"用户管理系统\",\"springboot\",\"mybatis-plus\"]},\"1510\":{\"h\":\"SpringBoot打包Docker运行\"},\"1511\":{\"h\":\"《用户中心》\",\"t\":[\"介绍文档\",\"SpringBoot打包Docker运行\",\"当开发完成一个 SpringBoot 项目后，企业开发一般会将它进行打包，然后部署上线。如果是分布式微服务系统，我们是用 docker 部署。\"]},\"1512\":{\"h\":\"首先\",\"t\":[\"确保你本地安装了 Docker，如果你还没有安装，可以从 Docker 官网下载并安装适合你操作系统的Docker版本。https://www.docker.com/\",\"推荐一个国内下载网站： https://docker.github.net.cn\",\"要想将服务打包成 docker 镜像，需要先写一个 Dockerfile。\",\"什么是 Dockerfile？\",\"Dockerfile 是一个文本文件，用于定义 Docker 镜像的构建过程。它包含了一系列的指令和参数，这些指令告诉 Docker 引擎如何构建一个新的镜像。Dockerfile 中的指令被顺序执行，每一步都创建一个新的镜像层，最终生成一个完整的 Docker 镜像。\",\"如果你不了解 Dockerfile，可以先找 JavaPub.net.cn 学一些基础知识就可以很快上手。\"]},\"1513\":{\"h\":\"步骤\"},\"1514\":{\"h\":\"1. 创建Dockerfile\",\"t\":[\"在你的项目根目录下创建一个名为 Dockerfile 的文件，这个文件定义了Docker镜像的构建步骤。以下是一个典型的Dockerfile示例：\",\"# 使用官方的 Java 21 基础镜像 FROM openjdk:21-jdk-alpine # 设置工作目录 WORKDIR /app # 复制JAR文件到工作目录 COPY target/user-center-backend-java-public-0.0.1-SNAPSHOT.jar /app/ # 暴露应用端口 EXPOSE 8080 # 启动命令 ENTRYPOINT [\\\"java\\\", \\\"-jar\\\", \\\"user-center-backend-java-public-0.0.1-SNAPSHOT.jar\\\"]\",\"请将 user-center-backend-java-public-0.0.1-SNAPSHOT.jar 替换为你的 JAR 包名称。\",\"image-20241202164145349\"]},\"1515\":{\"h\":\"2. 构建Docker镜像\",\"t\":[\"在项目根目录下运行以下命令来构建Docker镜像：\",\"docker build -t user-center-backend-java-public:1.0 .\",\"这个命令会读取当前目录下的Dockerfile，并构建一个名为 user-center-backend-java-public ，标签为 1.0 的 Docker 镜像。\",\"现在国内对 Docker 使用管控严格，如果你遇到问题可以先 javapub.net.cn\",\"原文地址：\",\"https://javapub.net.cn/star/project/user-center/\"]},\"1516\":{\"c\":[\"项目实战\",\"《用户中心》\"]},\"1517\":{\"c\":[\"项目实战\",\"用户管理系统\",\"docker\",\"springboot\"]},\"1518\":{\"h\":\"SpringBoot打包Jar\"},\"1519\":{\"h\":\"《用户中心》\",\"t\":[\"介绍文档\",\"SpringBoot打包Jar\",\"当开发完成一个 SpringBoot 项目后，企业开发一般会将它进行打包，然后部署上线。\"]},\"1520\":{\"h\":\"首先\",\"t\":[\"这里有一个可以暴露 HTTP 服务的 SpringBoot 程序。开发 SpringBoot 服务，我们一般使用 Maven 或 Gradle 来管理项目，这里我以最常用的 Maven 来演示，也是《用户中心》中用到的管理方式方式。\",\"Maven 和 Gradle 是两个流行的自动化构建工具，它们主要用于Java项目，但也支持其他语言的项目。它们的主要作用是自动化项目的构建过程，包括编译、测试、打包、部署等任务。\",\"image-20241127145854380\"]},\"1521\":{\"h\":\"步骤\"},\"1522\":{\"h\":\"1. Spring Boot Maven 插件\",\"t\":[\"给 SpringBoot 安装 Maven 插件。\",\"Spring Boot 提供了一个 Maven 插件，可以自动配置应用为一个可执行的 JAR 文件。你需要在你的 pom.xml 文件中包含这个插件：\",\"<build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build>\",\"如果你是使用 IDEA 一键创建的 SpringBoot 初始化项目，那么它是包含这个插件的，到 pom.xml 中查看。\"]},\"1523\":{\"h\":\"2. 打包命令\",\"t\":[\"使用 Maven 打包命令来构建你的应用：\",\"mvn clean package\",\"这个命令会创建一个包含所有依赖项的 JAR 文件，通常位于 target/ 目录下。\",\"image-20241202154315050\",\"image-20241202154337542\",\"image-20241202154524878\"]},\"1524\":{\"h\":\"3. 可执行 JAR：\",\"t\":[\"生成的 JAR 文件是一个可执行的 JAR，这意味着你可以通过以下命令运行它：\",\"java -jar target/yourapp.jar\",\"其中 yourapp.jar 是你的 JAR 文件名。\",\"测试启动jar\",\"user-center-backend-java-public-0.0.1-SNAPSHOT.jar 是我用《用户中心》项目测试的 Jar。\"]},\"1525\":{\"h\":\"4. 其他配置\",\"t\":[\"如果你需要额外的配置，比如指定 JAR 的名称或者包含额外的资源，你可以在 pom.xml 中配置 Maven 插件：\",\"<plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <configuration> <finalName>usercenter-app-javapub</finalName> <!-- 其他配置 --> </configuration> </plugin>\",\"image-20241202160812016\",\"✅通过这些步骤，你可以将 Spring Boot 应用打包为一个 JAR 文件，方便部署和运行。比如放到服务器运行。\",\"原文地址：\",\"https://javapub.net.cn/star/project/user-center/\"]},\"1526\":{\"c\":[\"项目实战\",\"《用户中心》\"]},\"1527\":{\"c\":[\"项目实战\",\"用户管理系统\",\"jar\",\"springboot\"]},\"1528\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"1529\":{\"h\":\"Docs\"}},\"dirtCount\":0,\"index\":[[\"✅通过这些步骤\",{\"1\":{\"1525\":1}}],[\"免费\",{\"1\":{\"1507\":1}}],[\"免费获取\",{\"1\":{\"706\":1}}],[\"曹欣然\",{\"1\":{\"1507\":1}}],[\"王梓旭\",{\"1\":{\"1507\":1}}],[\"王哥\",{\"1\":{\"210\":1,\"1412\":2,\"1452\":1,\"1494\":1}}],[\"李子璇\",{\"1\":{\"1507\":1}}],[\"张子恒\",{\"1\":{\"1507\":1}}],[\"张子涵\",{\"1\":{\"1507\":1}}],[\"张嘴就行\",{\"1\":{\"263\":1}}],[\"省下时间来摸鱼啊\",{\"1\":{\"1506\":1}}],[\"省略了强转的代码\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"省略getter和setter方法\",{\"1\":{\"892\":1,\"893\":1}}],[\"省略构造方法\",{\"1\":{\"888\":2}}],[\"她好心里有个底\",{\"1\":{\"1502\":1}}],[\"牛皮的程序猿后端返回值怎么定义\",{\"1\":{\"1493\":1}}],[\"责任线程指针偏移量\",{\"1\":{\"1481\":1}}],[\"责任线程指针\",{\"1\":{\"1481\":1}}],[\"责任人\",{\"1\":{\"210\":1}}],[\"偏向锁是一种针对单线程访问同步块的优化策略\",{\"1\":{\"1480\":1}}],[\"偏移量\",{\"1\":{\"721\":1,\"1026\":1,\"1230\":1}}],[\"屏蔽一切可能违反数据完整性的操作\",{\"1\":{\"1476\":1}}],[\"屏蔽白嫖党\",{\"1\":{\"551\":1}}],[\"乃至设计并发系统会非常有帮助\",{\"1\":{\"1476\":1}}],[\"剩下的节点会重新竞选主节点\",{\"1\":{\"1466\":1}}],[\"竞争次数偏移量\",{\"1\":{\"1481\":1}}],[\"竞争次数\",{\"1\":{\"1481\":1}}],[\"竞争激烈不代表挣不到钱\",{\"1\":{\"264\":1}}],[\"竞选的过程中\",{\"1\":{\"1466\":1}}],[\"竞选主节点\",{\"1\":{\"1466\":1}}],[\"喜欢吃苹果\",{\"1\":{\"1464\":2}}],[\"喜欢折腾\",{\"1\":{\"255\":1}}],[\"咱们先从搜索引擎说起吧\",{\"1\":{\"1464\":1}}],[\"咱们还需要在dto包里新建一个封装json返回结果的类result\",{\"1\":{\"893\":1}}],[\"价格等\",{\"1\":{\"1458\":1}}],[\"幂等性写入\",{\"1\":{\"1454\":1}}],[\"幂等性保证了消息的处理不会因为重复发送而产生副作用\",{\"1\":{\"1454\":1}}],[\"幂等性其实就是指无论执行多少次相同的操作\",{\"1\":{\"1454\":1}}],[\"唤醒等待在此对象上的所有线程\",{\"1\":{\"1446\":1}}],[\"唤醒等待在此对象上的一个线程\",{\"1\":{\"1446\":1}}],[\"唤醒线程的操作是通过\",{\"1\":{\"1390\":1}}],[\"哦\",{\"1\":{\"1440\":1,\"1448\":1,\"1452\":2,\"1454\":1,\"1464\":1}}],[\"祝你在未来的工作中取得更大的成功\",{\"1\":{\"1438\":1}}],[\"祝面试官有一个美好的一天\",{\"1\":{\"1424\":1}}],[\"嘿\",{\"1\":{\"1436\":1}}],[\"管家的形象也很贴切\",{\"1\":{\"1434\":1}}],[\"管理系统\",{\"1\":{\"1502\":1}}],[\"管理\",{\"1\":{\"1014\":1,\"1090\":1,\"1220\":1,\"1283\":1,\"1408\":1}}],[\"管理项目\",{\"1\":{\"875\":1}}],[\"管理大量行锁的开销可能很大\",{\"1\":{\"637\":1}}],[\"管理什么的咱不说\",{\"1\":{\"170\":1}}],[\"制作咖啡并提供给顾客\",{\"1\":{\"1432\":1}}],[\"嗨\",{\"1\":{\"1426\":2,\"1428\":1,\"1430\":1,\"1432\":2,\"1434\":1,\"1438\":1,\"1440\":2,\"1442\":1,\"1444\":1,\"1448\":2,\"1452\":1,\"1454\":1,\"1456\":1,\"1458\":1,\"1460\":2,\"1462\":1,\"1464\":2,\"1466\":1,\"1470\":1}}],[\"边界有两种形式\",{\"1\":{\"1424\":1}}],[\"边界是对类型参数指定的约束\",{\"1\":{\"1424\":1}}],[\"坏处是导致些许运行期间的效率损失\",{\"1\":{\"1424\":1}}],[\"哇\",{\"1\":{\"1424\":1,\"1440\":2,\"1442\":1,\"1444\":1,\"1452\":1,\"1454\":2,\"1464\":1}}],[\"载入当前数据库\",{\"1\":{\"1420\":1}}],[\"载入多个\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"期间\",{\"1\":{\"1420\":1}}],[\"期待你加入我们团队\",{\"1\":{\"1416\":1}}],[\"期待你的陪伴\",{\"1\":{\"1\":1}}],[\"恭喜你进到面试的最后一个环节\",{\"1\":{\"1416\":1}}],[\"早日通过面试\",{\"1\":{\"1474\":1}}],[\"早上好面试官\",{\"1\":{\"1414\":1}}],[\"早上好\",{\"1\":{\"1414\":1}}],[\"早期版本\",{\"1\":{\"482\":1}}],[\"破坏了\",{\"1\":{\"1412\":1}}],[\"破坏\",{\"1\":{\"1412\":1}}],[\"破坏安全性\",{\"1\":{\"1392\":1}}],[\"探索\",{\"1\":{\"1410\":1}}],[\"佩服佩服\",{\"1\":{\"1410\":1}}],[\"棒\",{\"1\":{\"1410\":1,\"1456\":2}}],[\"吞吐量有一些见解\",{\"1\":{\"1440\":1}}],[\"吞吐量和延迟指标\",{\"1\":{\"1408\":1}}],[\"吞吐量就会越高吗\",{\"0\":{\"1123\":1,\"1311\":1}}],[\"熔断器\",{\"1\":{\"1408\":1}}],[\"松耦合的服务\",{\"1\":{\"1408\":1}}],[\"滥用\",{\"1\":{\"1408\":1}}],[\"误用\",{\"1\":{\"1408\":1}}],[\"误差可以被设置辅助计算因子进行降低\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"误差率整体较低\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"博客等\",{\"1\":{\"1408\":1}}],[\"博主是个实战派\",{\"1\":{\"969\":1}}],[\"浏览器发送请求到\",{\"1\":{\"1408\":1}}],[\"浏览属于你的网站\",{\"1\":{\"976\":1}}],[\"笑\",{\"1\":{\"1408\":1}}],[\"碰撞处理等机制还需进一步理解\",{\"1\":{\"1406\":1}}],[\"枚举的常量\",{\"1\":{\"1402\":1}}],[\"枚举\",{\"1\":{\"1402\":1}}],[\"枚举上\",{\"1\":{\"1402\":1}}],[\"枚举例子\",{\"1\":{\"1402\":1}}],[\"掌握elasticsearch的架构设计对于刚入行的技术人员来说是非常有价值的\",{\"1\":{\"1460\":1}}],[\"掌握各类jvm运行日志的生成与解析\",{\"1\":{\"1400\":1}}],[\"掌握编程\",{\"1\":{\"248\":1}}],[\"研究jvm内存模型和对象创建过程\",{\"1\":{\"1400\":1}}],[\"堪称一代新高\",{\"1\":{\"1398\":1}}],[\"筛选待回收区域\",{\"1\":{\"1398\":1}}],[\"筛选回收\",{\"1\":{\"1394\":1,\"1398\":1}}],[\"聪明\",{\"1\":{\"1398\":1,\"1410\":1}}],[\"铁子\",{\"1\":{\"1398\":1}}],[\"极大的提高了工作效率\",{\"1\":{\"1398\":1}}],[\"极大的简化了安装和配置的细节\",{\"1\":{\"290\":1}}],[\"卡片表\",{\"1\":{\"1398\":1}}],[\"听起来有点高大上啊\",{\"1\":{\"1464\":1}}],[\"听说你小子很不错\",{\"1\":{\"1476\":1}}],[\"听说你对kafka的幂等性很感兴趣\",{\"1\":{\"1454\":1}}],[\"听说你对kafka的ack机制很感兴趣\",{\"1\":{\"1452\":1}}],[\"听说你对kafka的架构设计很感兴趣\",{\"1\":{\"1444\":1}}],[\"听说你对kafka很感兴趣\",{\"1\":{\"1442\":1}}],[\"听说你对redis分布式锁很感兴趣\",{\"1\":{\"1428\":1}}],[\"听说你对\",{\"1\":{\"1410\":1,\"1412\":1,\"1440\":1}}],[\"听说你对java集合中的map也很在行\",{\"1\":{\"1406\":1}}],[\"听说你对java集合挺在行的\",{\"1\":{\"1404\":1}}],[\"听说很牛逼的样子\",{\"1\":{\"1398\":1}}],[\"听你一说\",{\"1\":{\"1398\":1}}],[\"达到一种混合模型与新高度\",{\"1\":{\"1398\":1}}],[\"达到一个共同点\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"达到高精度且高性能的铁子回收效果\",{\"1\":{\"1398\":1}}],[\"达不到理想状态\",{\"1\":{\"1396\":1}}],[\"留下空隙\",{\"1\":{\"1396\":1}}],[\"碎片化\",{\"1\":{\"1396\":1}}],[\"碎碎叨\",{\"2\":{\"52\":1,\"71\":1}}],[\"浮动垃圾可能带来更长的gc停顿时间\",{\"1\":{\"1396\":1}}],[\"脏\",{\"1\":{\"1398\":3}}],[\"脏标记\",{\"1\":{\"1396\":5}}],[\"脏读指的是读到了其他事务未提交的数据\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"脏读\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"啊\",{\"1\":{\"1394\":1}}],[\"情景举例\",{\"1\":{\"1394\":1}}],[\"情况就不一样了\",{\"1\":{\"1424\":1}}],[\"情况就这么个情况\",{\"1\":{\"958\":1}}],[\"情况\",{\"1\":{\"894\":1}}],[\"情况下会有重复问题\",{\"1\":{\"438\":1}}],[\"情况三\",{\"1\":{\"158\":1}}],[\"情况二\",{\"1\":{\"158\":1,\"183\":1}}],[\"情况一\",{\"1\":{\"158\":1,\"183\":1}}],[\"软引用被清理等\",{\"1\":{\"1394\":1}}],[\"软件系统在引入ioc容器之后\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"软件系统在没有引入ioc容器之前\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"软件系统中耦合的对象\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"软件专家michael\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"软件包需要在本地编译安装\",{\"1\":{\"243\":1}}],[\"软件包是针对特定硬件和架构进行编译的\",{\"1\":{\"243\":1}}],[\"软件库里很多软件显得老旧\",{\"1\":{\"241\":1}}],[\"帮我总结下\",{\"1\":{\"1394\":1}}],[\"帮助初学者掌握项目的完整开发\",{\"1\":{\"1492\":1}}],[\"帮助我们更好地理解选主过程\",{\"1\":{\"1466\":1}}],[\"帮助我们快速整合第三方常用框架\",{\"1\":{\"899\":1}}],[\"帮助你更好地理解选主过程\",{\"1\":{\"1466\":1}}],[\"帮助你理解kafka的内部机制\",{\"1\":{\"1432\":1}}],[\"帮助定位数据位置\",{\"1\":{\"557\":1}}],[\"帮助gc回收\",{\"1\":{\"339\":2}}],[\"帮助用户快速在本地搭建运行大模型\",{\"1\":{\"290\":1}}],[\"弱引用或虚引用变量引用\",{\"1\":{\"1394\":1}}],[\"弱化配置\",{\"1\":{\"1181\":1,\"1356\":1}}],[\"垃圾收集里最让我头疼的就是\",{\"1\":{\"1398\":1}}],[\"垃圾收集器选择等\",{\"1\":{\"1400\":1}}],[\"垃圾收集器跟我讲讲\",{\"1\":{\"1396\":1}}],[\"垃圾收集器会根据这些内存区域中的对象进行回收\",{\"1\":{\"1394\":1}}],[\"垃圾的回收\",{\"1\":{\"1394\":1}}],[\"垃圾的判断\",{\"1\":{\"1394\":1}}],[\"垃圾\",{\"1\":{\"1394\":1}}],[\"垃圾就是那些不再被程序使用的对象\",{\"1\":{\"1394\":1}}],[\"垃圾回收的主要区域就是堆内存\",{\"1\":{\"1394\":1}}],[\"垃圾回收的步骤\",{\"1\":{\"1394\":1}}],[\"垃圾回收的时机\",{\"1\":{\"1394\":1}}],[\"垃圾回收的机制\",{\"1\":{\"1394\":1}}],[\"垃圾回收机制的主要内容\",{\"1\":{\"1394\":1}}],[\"垃圾回收机制\",{\"0\":{\"1394\":1},\"1\":{\"1394\":1}}],[\"垃圾回收是jvm内存模型中非常重要的一部分\",{\"1\":{\"1388\":1}}],[\"垃圾回收\",{\"1\":{\"1388\":1}}],[\"垃圾回收器组合\",{\"1\":{\"1108\":3,\"1299\":3}}],[\"垃圾回收整理一文中\",{\"1\":{\"755\":1}}],[\"幸好有jvm这个工具哥帮忙\",{\"1\":{\"1392\":1}}],[\"难道要我一个个文件翻找吗\",{\"1\":{\"1392\":1}}],[\"刚入职一个公司\",{\"1\":{\"1392\":1}}],[\"刚插入进来的\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"抱歉\",{\"1\":{\"1390\":1}}],[\"聊聊java的注解\",{\"1\":{\"1402\":1}}],[\"聊聊\",{\"1\":{\"1388\":1,\"1418\":1}}],[\"聊聊我怎么用副业在赚钱\",{\"1\":{\"249\":1}}],[\"哈哈\",{\"1\":{\"1384\":3,\"1392\":2,\"1432\":1,\"1434\":2,\"1444\":1,\"1452\":1,\"1454\":1,\"1456\":1,\"1464\":1}}],[\"哈希槽听起来很有趣\",{\"1\":{\"1426\":1}}],[\"哈希槽是一个固定数量的槽位\",{\"1\":{\"1426\":1}}],[\"哈希槽\",{\"1\":{\"1426\":1}}],[\"哈希函数\",{\"1\":{\"1406\":1}}],[\"哈希函数的要求尽量满足平均分布\",{\"1\":{\"392\":1}}],[\"哈希的底层实现之一\",{\"1\":{\"696\":1}}],[\"哈希类型\",{\"1\":{\"652\":1}}],[\"哈希查询效率极高\",{\"1\":{\"562\":1}}],[\"哈希索引的效率较低\",{\"1\":{\"562\":1}}],[\"哈希索引\",{\"1\":{\"562\":1}}],[\"哈希索引就是采用哈希算法\",{\"1\":{\"558\":1}}],[\"哈希\",{\"0\":{\"389\":1,\"668\":1},\"1\":{\"699\":1}}],[\"哈希表使用链地址法来解决键冲突\",{\"1\":{\"689\":1}}],[\"哈希表在\",{\"1\":{\"688\":1}}],[\"哈希表保存的键值对会逐渐地增多或者减少\",{\"1\":{\"688\":1}}],[\"哈希表进行\",{\"1\":{\"687\":1}}],[\"哈希表只会在对\",{\"1\":{\"687\":1}}],[\"哈希表节点使用\",{\"1\":{\"687\":1}}],[\"哈希表节点\",{\"1\":{\"687\":1}}],[\"哈希表大小掩码\",{\"1\":{\"687\":1}}],[\"哈希表大小\",{\"1\":{\"687\":1}}],[\"哈希表数组\",{\"1\":{\"687\":1}}],[\"哈希表的实现\",{\"0\":{\"352\":1}}],[\"哈希表的构造\",{\"0\":{\"351\":1}}],[\"哈希表\",{\"0\":{\"350\":1,\"687\":1},\"1\":{\"676\":1,\"687\":3}}],[\"嗯\",{\"1\":{\"1384\":2,\"1390\":1,\"1392\":2,\"1394\":1,\"1432\":1,\"1434\":1,\"1436\":3,\"1442\":2,\"1452\":2,\"1462\":2}}],[\"熟练运用设计模式\",{\"1\":{\"1380\":1}}],[\"熟练使用redis\",{\"1\":{\"664\":1}}],[\"極端情况下\",{\"1\":{\"1380\":1}}],[\"八股文种子选手\",{\"1\":{\"1380\":1,\"1382\":1,\"1384\":1,\"1386\":1,\"1388\":1,\"1390\":1,\"1392\":1,\"1394\":1,\"1396\":1,\"1398\":1,\"1400\":1,\"1402\":1,\"1404\":1,\"1406\":1,\"1408\":1,\"1410\":1,\"1412\":1,\"1414\":1,\"1416\":1,\"1418\":1,\"1420\":1,\"1422\":1,\"1424\":1,\"1426\":1,\"1428\":1,\"1430\":1,\"1432\":1,\"1434\":1,\"1436\":1,\"1438\":1,\"1440\":1,\"1446\":1,\"1448\":1,\"1450\":1,\"1452\":1,\"1454\":1,\"1456\":1,\"1458\":1,\"1460\":1,\"1462\":1,\"1464\":1,\"1466\":1,\"1468\":1,\"1470\":1,\"1474\":1,\"1476\":1,\"1478\":1,\"1480\":1}}],[\"八股文的朋友不要错过\",{\"1\":{\"1378\":1}}],[\"收获颇丰\",{\"1\":{\"1396\":1,\"1424\":1}}],[\"收集器提出了并发收集和低停顿的理念\",{\"1\":{\"1396\":1}}],[\"收集器虽然有缺陷\",{\"1\":{\"1396\":1}}],[\"收集器的\",{\"1\":{\"1396\":1}}],[\"收集器的主要优点是并发收集\",{\"1\":{\"1396\":1}}],[\"收集器的优缺点分别是什么\",{\"1\":{\"1396\":1}}],[\"收集器\",{\"1\":{\"1394\":4}}],[\"收费吗\",{\"1\":{\"1378\":1}}],[\"收录\",{\"1\":{\"6\":1}}],[\"考的没复习\",{\"1\":{\"1378\":1}}],[\"考虑到减轻服务器性能方面\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"考虑到安全应当使用session\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"考虑列的访问模式和查询类型\",{\"1\":{\"573\":1}}],[\"干货满满\",{\"1\":{\"1378\":1}}],[\"干了3年程序员\",{\"1\":{\"203\":1}}],[\"决策学习者\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"决策者\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"周期\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"周总\",{\"1\":{\"264\":1}}],[\"退出恢复模式进入消息广播模式\",{\"1\":{\"1199\":1,\"1372\":1}}],[\"退化成链表\",{\"1\":{\"566\":1}}],[\"崩溃恢复\",{\"1\":{\"1199\":1,\"1372\":1}}],[\"仍然保证对外提供满足一致性和可用性的服务\",{\"1\":{\"1197\":1,\"1370\":1}}],[\"仍然能够继续工作\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"投票过程的性能就越差\",{\"1\":{\"1196\":1,\"1369\":1}}],[\"投票来说\",{\"1\":{\"1196\":1,\"1369\":1}}],[\"观察者状态\",{\"1\":{\"1196\":1,\"1369\":1}}],[\"观察者模式是什么\",{\"1\":{\"1194\":1,\"1367\":1}}],[\"观察者模式\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"寻\",{\"1\":{\"1196\":1,\"1369\":1}}],[\"寻找乘数\",{\"1\":{\"306\":1}}],[\"独立运行\",{\"1\":{\"1182\":1,\"1357\":1}}],[\"约定大于配置的原则\",{\"1\":{\"1181\":1,\"1356\":1}}],[\"遵循高内聚低耦合原则\",{\"1\":{\"1408\":1}}],[\"遵循\",{\"1\":{\"1181\":1,\"1356\":1}}],[\"遵循空字符结尾这一惯例的好处是\",{\"1\":{\"682\":1}}],[\"⑦\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"⑥\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"种\",{\"1\":{\"1410\":1}}],[\"种销毁方法\",{\"1\":{\"1410\":1}}],[\"种初始化方法\",{\"1\":{\"1410\":1}}],[\"种方式的循环依赖问题被解决了\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"种配置\",{\"1\":{\"486\":1}}],[\"见\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"见如下代码注释理解\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"贴在这里供大家理解\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"贴一下全部配置\",{\"1\":{\"459\":1}}],[\"织入\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"织入相关代码\",{\"1\":{\"752\":2}}],[\"装饰器模式\",{\"1\":{\"1173\":2,\"1350\":2}}],[\"＞销毁bean\",{\"1\":{\"1171\":2,\"1348\":2}}],[\"＞\",{\"1\":{\"1171\":4,\"1348\":4}}],[\"彼此毫无联系\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"拿到需求后\",{\"1\":{\"1502\":1}}],[\"拿到心仪offer\",{\"1\":{\"1378\":1}}],[\"拿掉ioc容器后的系统\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"拿最多的\",{\"1\":{\"996\":1}}],[\"粘合剂\",{\"1\":{\"1169\":3,\"1346\":3}}],[\"粘包\",{\"1\":{\"989\":1}}],[\"粘包是怎么产生的\",{\"1\":{\"121\":1}}],[\"齿轮之间的传动全部依靠\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"齿轮组中齿轮之间的啮合关系\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"赖关系的对象之间的解耦\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"借助于\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"耦合关系不仅会出现在对象与对象之间\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"架构师和设计师对于系统的分析和设计\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"架构图\",{\"1\":{\"803\":1}}],[\"伴随着\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"针顺时针旋转\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"针对我使用的应用\",{\"1\":{\"1400\":1}}],[\"针对的是servlet\",{\"1\":{\"1089\":1,\"1282\":1}}],[\"针对servlet缺点推出jsp\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"针对服务对象的不同\",{\"1\":{\"999\":1,\"1208\":1}}],[\"针对上面问题\",{\"1\":{\"440\":1}}],[\"针对每一个投票\",{\"1\":{\"183\":1}}],[\"校验算法进行散列\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"哨兵和集群\",{\"1\":{\"1418\":1}}],[\"哨兵提升整个集群的高可用性\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"哨兵作为操作系统中的一个监控进程\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"哨兵部署\",{\"1\":{\"1162\":2,\"1342\":2}}],[\"缩短值的长度才是关键\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"缩短键值的长度\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"备份咖啡师可以接手制作咖啡\",{\"1\":{\"1432\":1}}],[\"备份缓存\",{\"1\":{\"1160\":1,\"1340\":1}}],[\"备注\",{\"1\":{\"247\":1,\"250\":1}}],[\"均匀过期\",{\"1\":{\"1160\":2,\"1340\":2}}],[\"均为0\",{\"1\":{\"183\":1}}],[\"混合持久化是结合rdb和aof的优点\",{\"1\":{\"1158\":1,\"1338\":1}}],[\"混合持久化方式\",{\"1\":{\"1158\":1,\"1338\":1}}],[\"播放量等并发较高\",{\"1\":{\"1156\":1,\"1336\":1}}],[\"坐标\",{\"1\":{\"1155\":1,\"1335\":1}}],[\"何时应选择链表还是红黑树来解决哈希冲突\",{\"1\":{\"1406\":1}}],[\"何时进行树化\",{\"1\":{\"1406\":1}}],[\"何谓数据版本\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"何乐礼在打孔卡片制表机\",{\"1\":{\"427\":1}}],[\"乐观\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"乐观锁则容忍并发冲突\",{\"1\":{\"1476\":1}}],[\"乐观锁和悲观锁是两种不同的锁机制\",{\"1\":{\"1476\":1}}],[\"乐观锁和悲观锁了解吗\",{\"1\":{\"1476\":1}}],[\"乐观锁和悲观锁有什么区别\",{\"0\":{\"631\":1}}],[\"乐观锁定的第二种实现方式和第一种差不多\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"乐观锁的两种实现方式\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"乐观锁的特点先进行业务操作\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"乐观锁在数据库上的实现完全是逻辑的\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"乐观锁来实现\",{\"1\":{\"657\":1}}],[\"乐观锁通常不需要显式释放\",{\"1\":{\"642\":1}}],[\"乐观锁通常不使用数据库的锁定机制\",{\"1\":{\"632\":1}}],[\"乐观锁通常通过在表中添加一个版本号或时间戳字段来实现\",{\"1\":{\"642\":1}}],[\"乐观锁适用于写冲突较少的场景\",{\"1\":{\"636\":1}}],[\"乐观锁可以提供更好的性能\",{\"1\":{\"632\":1}}],[\"乐观锁基于这样的假设\",{\"1\":{\"632\":1}}],[\"乐观锁\",{\"0\":{\"632\":1},\"1\":{\"1476\":1}}],[\"悲观\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"悲观锁和乐观锁也可以灵活结合\",{\"1\":{\"1476\":1}}],[\"悲观锁一般由同步机制实现\",{\"1\":{\"1476\":1}}],[\"悲观锁会导致性能下降\",{\"1\":{\"1476\":1}}],[\"悲观锁试图防止并发冲突\",{\"1\":{\"1476\":1}}],[\"悲观锁的特点是先获取锁\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"悲观锁适用于写冲突较多的场景\",{\"1\":{\"636\":1}}],[\"悲观锁可能导致更多的等待和锁竞争\",{\"1\":{\"633\":1}}],[\"悲观锁通过数据库的锁定机制来确保数据一致性\",{\"1\":{\"633\":1}}],[\"悲观锁基于这样的假设\",{\"1\":{\"633\":1}}],[\"悲观锁\",{\"0\":{\"633\":1},\"1\":{\"1476\":1}}],[\"影响性能\",{\"1\":{\"1380\":1}}],[\"影响服务性能\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"影响距离查询或近似查询\",{\"1\":{\"493\":1}}],[\"课程对象\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"课程将在csdn学院上线\",{\"1\":{\"447\":1}}],[\"灵活度高\",{\"1\":{\"1129\":1,\"1314\":1}}],[\"损耗\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"零拷贝kafka使用了零拷贝技术\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"越多的分区可能增加端对端的延迟\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"越早入手越划算\",{\"1\":{\"250\":1}}],[\"般类似于这种问题的答案\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"羊群效应\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"脑裂\",{\"1\":{\"1122\":2,\"1310\":2}}],[\"毫无差别了\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"毫无疑问这种方案的可靠性是最高的\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"毫秒内序列重置\",{\"1\":{\"441\":1}}],[\"毫秒内序列溢出\",{\"1\":{\"441\":1}}],[\"毫秒内序列\",{\"1\":{\"441\":1}}],[\"毫秒内的计数\",{\"1\":{\"441\":1}}],[\"毫秒级\",{\"1\":{\"441\":1}}],[\"毫秒\",{\"1\":{\"440\":2,\"441\":1,\"752\":2}}],[\"体系中最为成熟的框架\",{\"1\":{\"1408\":1}}],[\"体系架构包括若干\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"体验生产环境\",{\"1\":{\"238\":1}}],[\"永久代的大小是固定的\",{\"1\":{\"1388\":1}}],[\"永久代\",{\"1\":{\"1388\":2}}],[\"永久代被移除\",{\"1\":{\"1388\":2}}],[\"永久\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"永远都是在学习和总结中不断超越自己\",{\"1\":{\"1380\":1}}],[\"永远都会走在发展的最前沿\",{\"1\":{\"85\":1}}],[\"永远是\",{\"1\":{\"11\":1}}],[\"冗余存储\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"低延迟的分布式消息队列\",{\"1\":{\"1438\":1}}],[\"低延迟的数据传输和处理\",{\"1\":{\"1432\":1}}],[\"低停顿\",{\"1\":{\"1396\":1}}],[\"低水位\",{\"1\":{\"1114\":1,\"1302\":1}}],[\"低谷蓄力\",{\"1\":{\"984\":1,\"993\":1,\"1021\":1,\"1080\":1,\"1095\":1,\"1124\":1,\"1138\":1,\"1177\":1,\"1190\":1,\"1203\":1,\"1227\":1,\"1312\":1,\"1354\":1,\"1376\":1}}],[\"术语0\",{\"0\":{\"1113\":1,\"1114\":1,\"1301\":1,\"1302\":1}}],[\"系列面试题\",{\"1\":{\"1151\":1}}],[\"系列文章\",{\"0\":{\"1109\":1},\"1\":{\"1380\":1,\"1382\":1,\"1384\":1,\"1386\":1,\"1388\":1,\"1390\":1,\"1392\":1,\"1394\":1,\"1396\":1,\"1398\":1,\"1400\":1,\"1402\":1,\"1404\":1,\"1406\":1,\"1408\":1,\"1410\":1,\"1412\":1,\"1414\":1,\"1416\":1,\"1418\":1,\"1420\":1,\"1422\":1,\"1424\":1,\"1426\":1,\"1428\":1,\"1430\":1,\"1432\":1,\"1434\":1,\"1436\":1,\"1438\":1,\"1440\":1,\"1446\":1,\"1448\":1,\"1450\":1,\"1452\":1,\"1454\":1,\"1456\":1,\"1458\":1,\"1460\":1,\"1462\":1,\"1464\":1,\"1466\":1,\"1468\":1,\"1470\":1,\"1474\":1,\"1476\":1,\"1478\":1,\"1481\":1}}],[\"系统总是可以在有限的时间内对用户做出响应\",{\"1\":{\"1197\":1,\"1370\":1}}],[\"系统提供的服务必须一直处于可用的状态\",{\"1\":{\"1197\":1,\"1370\":1}}],[\"系统中将会出现多个不同的object类\",{\"1\":{\"1106\":1,\"1297\":1}}],[\"系统缓冲区\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"系统立即就已经恢复\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"系统还没死透\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"系统异常\",{\"1\":{\"892\":1}}],[\"系统范围\",{\"1\":{\"769\":1}}],[\"系统可能会尝试将锁从更细的粒度升级到更粗的粒度\",{\"1\":{\"644\":1}}],[\"系统可能会选择一个或多个事务进行回滚\",{\"1\":{\"644\":1}}],[\"系统自动回滚事务\",{\"1\":{\"644\":1}}],[\"系统定期检查事务的执行状态\",{\"1\":{\"644\":1}}],[\"系统配置\",{\"1\":{\"637\":1}}],[\"系统前期开发阶段\",{\"1\":{\"588\":1}}],[\"系统会将数据逻辑地址传给磁盘\",{\"1\":{\"327\":1}}],[\"系统将要写入单元地址和数据分别放在地址总线和数据总线上\",{\"1\":{\"326\":1}}],[\"系统资源使用\",{\"1\":{\"239\":1}}],[\"系统请求也将被阻塞\",{\"1\":{\"224\":1}}],[\"系统分页大小\",{\"1\":{\"123\":1}}],[\"系统操作\",{\"1\":{\"107\":1}}],[\"阶段\",{\"1\":{\"1107\":4,\"1298\":4}}],[\"涉及到的源码我也在对话中做了标注\",{\"1\":{\"1378\":1}}],[\"涉及的列上建立索引\",{\"1\":{\"1149\":1,\"1332\":1}}],[\"涉及stw的阶段主要是\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"涉及一些基础命令和常见场景\",{\"1\":{\"650\":1}}],[\"倘若父类加载器无法完成此加载任务\",{\"1\":{\"1106\":1,\"1297\":1}}],[\"严重影响查询性能\",{\"1\":{\"1380\":1}}],[\"严格来说\",{\"1\":{\"1102\":1,\"1293\":1}}],[\"严苛\",{\"1\":{\"403\":1}}],[\"物理地址分配是连续的\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"物理地址\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"物理存储维度\",{\"1\":{\"558\":1}}],[\"攻击主要有三种策略\",{\"1\":{\"1094\":1,\"1287\":1}}],[\"攻击专门针对状态改变请求\",{\"1\":{\"1094\":1,\"1287\":1}}],[\"攻击是在受害者毫不知情的情况下\",{\"1\":{\"1094\":1,\"1287\":1}}],[\"攻击\",{\"0\":{\"1094\":2,\"1287\":2}}],[\"攻城狮很好的选择\",{\"1\":{\"450\":1}}],[\"施加的安全限制\",{\"1\":{\"1093\":1,\"1286\":1}}],[\"购物车最好使用cookie\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"购物车早期\",{\"1\":{\"717\":1}}],[\"翻译\",{\"1\":{\"1087\":1,\"1280\":1}}],[\"翻阅官方文档\",{\"1\":{\"589\":1}}],[\"规划中\",{\"1\":{\"1489\":1}}],[\"规范中定义的\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"规范不同\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"规范规定的\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"规范的实现是接口\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"规则\",{\"1\":{\"810\":2}}],[\"阈值为什么是8\",{\"0\":{\"1079\":1,\"1274\":1}}],[\"追问\",{\"0\":{\"1078\":1,\"1273\":1},\"1\":{\"1079\":1,\"1274\":1}}],[\"ˈseməfɔː\",{\"1\":{\"1064\":1,\"1262\":1}}],[\"ˈvɒlətaɪl\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"信号量方式\",{\"1\":{\"1064\":1,\"1262\":1}}],[\"信息不安全\",{\"1\":{\"438\":1}}],[\"信息\",{\"1\":{\"211\":1,\"768\":1,\"1108\":1,\"1299\":1}}],[\"串行化\",{\"1\":{\"1144\":1,\"1327\":1}}],[\"串行\",{\"1\":{\"1064\":1,\"1262\":1}}],[\"易于操作\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"别担心\",{\"1\":{\"1454\":1}}],[\"别人可以分析存放在本地的cookie并进行cookie欺骗\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"别的线程阻塞等待\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"别名\",{\"0\":{\"831\":1},\"1\":{\"831\":1}}],[\"别名类型等\",{\"1\":{\"508\":1}}],[\"迪杰斯特拉在1965年为t\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"银行家算法\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"银行家算法非常有必要了解\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"家庭成员之间需要相互等待\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"家庭聚餐\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"晚上关宿舍大门睡觉\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"宿管阿姨就是监听countdownlatch为0后要执行的\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"宿管阿姨\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"冲破栅栏\",{\"1\":{\"1061\":12,\"1259\":12}}],[\"冲突的个数比较少时\",{\"1\":{\"1073\":1,\"1268\":1}}],[\"冲突检测\",{\"1\":{\"632\":1}}],[\"冲突\",{\"1\":{\"627\":1,\"628\":1,\"629\":1,\"630\":1,\"1073\":1,\"1268\":1}}],[\"冲突和使用场景几个角度来区分\",{\"1\":{\"626\":1}}],[\"冲突较少\",{\"1\":{\"624\":1}}],[\"典型的如cas算法采用乐观锁\",{\"1\":{\"1476\":1}}],[\"典型的生产者消费者模型\",{\"1\":{\"170\":1}}],[\"典型场景\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"禁止访问\",{\"1\":{\"1494\":1}}],[\"禁止指令重排序\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"禁用批量terms\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"禁用wildcard\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"禁用刷新机制\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"禁用\",{\"2\":{\"20\":1}}],[\"禁用了如下功能\",{\"1\":{\"18\":1}}],[\"马上就停止循环\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"马上安排\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"马上获得我和\",{\"1\":{\"719\":1}}],[\"半个\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"半年左右一定要有体系的学一些新东西\",{\"1\":{\"263\":1}}],[\"拦截sql后重写为\",{\"1\":{\"1138\":1,\"1323\":1}}],[\"拦截待执行的sql\",{\"1\":{\"1138\":1,\"1323\":1}}],[\"拦截成功如下\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"拦截器也是一个\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"拦截器和过滤器的区别\",{\"0\":{\"1090\":1,\"1283\":1}}],[\"拦截器\",{\"0\":{\"833\":1},\"1\":{\"1090\":1,\"1168\":1,\"1283\":1,\"1345\":1,\"1414\":1}}],[\"擦除规则\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"泛型支持返回不同类型的数据\",{\"1\":{\"1494\":1}}],[\"泛型中通配符\",{\"1\":{\"1424\":1}}],[\"泛型中的边界是干嘛的\",{\"1\":{\"1424\":1}}],[\"泛型中<\",{\"1\":{\"1424\":1}}],[\"泛型真的有些复杂\",{\"1\":{\"1424\":1}}],[\"泛型类\",{\"1\":{\"1424\":1}}],[\"泛型类不能有静态方法的原因是因为静态方法在类加载的时候就被创建\",{\"1\":{\"1424\":1}}],[\"泛型方法可以有\",{\"1\":{\"1424\":1}}],[\"泛型方法更灵活\",{\"1\":{\"1424\":1}}],[\"泛型方法\",{\"1\":{\"1424\":1}}],[\"泛型方法是在普通类中定义带类型参数的方法\",{\"1\":{\"1424\":1}}],[\"泛型方法和泛型类有什么区别\",{\"1\":{\"1424\":1}}],[\"泛型的上限是\",{\"1\":{\"1424\":1}}],[\"泛型的上下限是什么\",{\"1\":{\"1424\":1}}],[\"泛型的很多地方就不会再混淆了\",{\"1\":{\"1424\":1}}],[\"泛型的好处\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"泛型来了之后\",{\"1\":{\"1424\":1}}],[\"泛型要解决的最主要的问题就是类型不安全\",{\"1\":{\"1424\":1}}],[\"泛型这个机制一开始我也是一头雾水\",{\"1\":{\"1424\":1}}],[\"泛型时提供给javac编译器使用的\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"泛型擦除\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"泛型\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"泛型提供了编译时类型安全检测机制\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"泛型在编码中有非常广泛的使用\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"泛型是什么\",{\"0\":{\"1047\":1,\"1248\":1}}],[\"休眠方法\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"休眠\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"司机可以认为是\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"司机只和售票员交互\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"司机过程中定时询问每个乘客是否到达目的地\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"司机不知道哪些点会有哪些人会下车\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"路由到目标分片\",{\"1\":{\"1470\":1}}],[\"路由到分片\",{\"1\":{\"1470\":1}}],[\"路由值可以是文档id的哈希值\",{\"1\":{\"1470\":1}}],[\"路上有很多点可能会有人下车\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"路径会发生改变\",{\"1\":{\"1089\":1,\"1282\":1}}],[\"路径不会发生改变\",{\"1\":{\"1089\":1,\"1282\":1}}],[\"路径\",{\"1\":{\"205\":1}}],[\"路径导航\",{\"1\":{\"18\":1,\"21\":1}}],[\"←\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"→\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"刷刷面试\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"科普\",{\"1\":{\"1034\":1,\"1134\":1,\"1238\":1,\"1319\":1}}],[\"＝\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"度量\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"候选人\",{\"1\":{\"1428\":1,\"1434\":1,\"1436\":2,\"1440\":1,\"1442\":5,\"1444\":10,\"1448\":1,\"1460\":1,\"1466\":1}}],[\"候选\",{\"1\":{\"1031\":1,\"1235\":1}}],[\"候选数量不小于\",{\"1\":{\"1031\":1,\"1235\":1}}],[\"深入学习\",{\"1\":{\"1406\":1}}],[\"深入理解各种垃圾收集器的设计与实现原理\",{\"1\":{\"1400\":1}}],[\"深度不同\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"深分页\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"深翻页\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"丰富结果文档\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"丰富\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"丰富的数据结构\",{\"1\":{\"678\":1}}],[\"丰富的数据类型\",{\"1\":{\"656\":1}}],[\"丰富的特性\",{\"1\":{\"656\":1}}],[\"段是不可变的\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"段本身是一个功能齐全的倒排索引\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"段的\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"延伸阅读\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"延迟加载\",{\"0\":{\"861\":1}}],[\"延迟\",{\"1\":{\"493\":1}}],[\"触发\",{\"1\":{\"1420\":1}}],[\"触发的时机是定时触发\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"触发事务\",{\"1\":{\"893\":1}}],[\"旧键值对的重新映射策略与性能影响\",{\"1\":{\"1406\":1}}],[\"旧版本的文档依然能匹配查询\",{\"1\":{\"1033\":1,\"1237\":1}}],[\"旧版本的文档在\",{\"1\":{\"1033\":1,\"1237\":1}}],[\"旧版javapub官网\",{\"1\":{\"257\":1}}],[\"旧的预期值\",{\"1\":{\"1476\":1}}],[\"旧的\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"词频\",{\"1\":{\"1026\":1,\"1230\":1}}],[\"词条\",{\"1\":{\"489\":1}}],[\"充分利用倒排索引机制\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"充分发挥热门数据的操作效率\",{\"1\":{\"579\":1}}],[\"冷数据定期进行shrink操作\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"冷门字段分开放置在不同库中\",{\"1\":{\"579\":1}}],[\"滚动索引\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"副本的数量可以根据需求进行配置\",{\"1\":{\"1470\":1}}],[\"副本的滞后状态\",{\"1\":{\"1117\":1,\"1305\":1}}],[\"副本还没有来得及同步\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"副本和\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"副本成功写入消息\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"副本追上了\",{\"1\":{\"1117\":1,\"1305\":1}}],[\"副本落后过多时\",{\"1\":{\"1117\":1,\"1305\":1}}],[\"副本同步滞后过多的\",{\"1\":{\"1117\":1,\"1305\":1}}],[\"副本同步队列\",{\"1\":{\"1113\":1,\"1301\":1}}],[\"副本在内\",{\"1\":{\"1117\":1,\"1305\":1}}],[\"副本保持一定程度同步的replica\",{\"1\":{\"1117\":1,\"1305\":1}}],[\"副本对外提供服务\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"副本中重新选举新的\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"副本\",{\"0\":{\"1122\":1,\"1310\":1},\"1\":{\"1116\":1,\"1120\":1,\"1304\":1,\"1308\":1,\"1460\":1}}],[\"副本数\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"副业以前是一个小众的话题\",{\"1\":{\"264\":1}}],[\"副业\",{\"0\":{\"264\":1},\"1\":{\"262\":1,\"983\":1,\"987\":1,\"1013\":1,\"1083\":1,\"1098\":1,\"1112\":1,\"1128\":1,\"1167\":1,\"1180\":1,\"1193\":1}}],[\"副业赚钱\",{\"1\":{\"249\":1}}],[\"守护进程\",{\"1\":{\"1018\":1,\"1224\":1}}],[\"逻辑相对比较复杂\",{\"1\":{\"1009\":1,\"1218\":1}}],[\"逻辑维度\",{\"1\":{\"558\":1}}],[\"胖友先看看如下几篇文章\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"恰好是\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"恰好有一个请求\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"恰好在这个时间点对这个\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"思想上做出重大改进\",{\"1\":{\"1398\":1}}],[\"思路简单\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"思考\",{\"1\":{\"824\":1}}],[\"思考上述crud中的问题\",{\"0\":{\"824\":1}}],[\"里的\",{\"1\":{\"1476\":1}}],[\"里的任何资源\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"里的文档\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"里\",{\"1\":{\"1006\":1,\"1073\":1,\"1215\":1,\"1268\":1}}],[\"里面配置的所有\",{\"1\":{\"1185\":1,\"1360\":1}}],[\"里面的属性不能被覆盖\",{\"1\":{\"1183\":1,\"1358\":1}}],[\"里面包含sql语句来绑定\",{\"1\":{\"1137\":1,\"1322\":1}}],[\"里面维护了一个\",{\"1\":{\"1060\":1,\"1258\":1}}],[\"里面\",{\"1\":{\"92\":1}}],[\"穿透\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"雪崩\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"雪花算法\",{\"0\":{\"433\":1,\"439\":1},\"2\":{\"442\":1}}],[\"热数据存储到ssd\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"热门的或者推荐的商品\",{\"1\":{\"1008\":1,\"1217\":1}}],[\"热点\",{\"1\":{\"1006\":2,\"1215\":2}}],[\"热加载组件\",{\"1\":{\"447\":1}}],[\"演练缓存宕掉后\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"演示了\",{\"1\":{\"1382\":1}}],[\"演示环境在\",{\"1\":{\"125\":1}}],[\"演示\",{\"1\":{\"25\":1,\"746\":1,\"1507\":1}}],[\"限流与降级\",{\"1\":{\"1408\":1}}],[\"限流\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"限制视频的采集帧率\",{\"1\":{\"162\":1}}],[\"论坛帖子的访问频率比较高\",{\"1\":{\"1000\":1,\"1209\":1}}],[\"市面上有很多消息推送系统都是基于\",{\"1\":{\"990\":1}}],[\"凭借自己的了解\",{\"1\":{\"990\":1}}],[\"拆分到不同的模块中\",{\"1\":{\"1412\":1}}],[\"拆分后\",{\"1\":{\"583\":1}}],[\"拆包问题\",{\"1\":{\"989\":1}}],[\"试试\",{\"1\":{\"987\":1}}],[\"机制而出现短暂的暂停\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"机制的补充\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"机制的区别是什么\",{\"1\":{\"984\":1}}],[\"机制\",{\"0\":{\"1076\":1,\"1271\":1},\"1\":{\"1076\":2,\"1168\":1,\"1271\":2,\"1345\":1}}],[\"机制和\",{\"1\":{\"984\":1}}],[\"机器id向左移12位\",{\"1\":{\"441\":1}}],[\"机器id所占的位数\",{\"1\":{\"441\":1}}],[\"机器id\",{\"1\":{\"440\":1}}],[\"顺便说一下\",{\"1\":{\"981\":1}}],[\"顺序读写磁盘分为顺序读写与随机读写\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"顺序栈\",{\"0\":{\"344\":1}}],[\"顺序队列的实现可以使用数组来完成\",{\"1\":{\"341\":1}}],[\"顺序队列\",{\"0\":{\"341\":1},\"1\":{\"341\":1}}],[\"顺序存储实现\",{\"0\":{\"338\":1}}],[\"顺序存储结构是元素在存储器中的相对位置来表示数据元素之间的逻辑关系\",{\"1\":{\"337\":1}}],[\"顺序存储和链式存储\",{\"1\":{\"337\":1}}],[\"顺序向后读取一定长度的数据放入内存\",{\"1\":{\"327\":1}}],[\"效果不明显\",{\"1\":{\"1380\":1}}],[\"效果是一样的\",{\"1\":{\"981\":1}}],[\"效率略低\",{\"1\":{\"1406\":1}}],[\"效率low\",{\"1\":{\"1394\":1}}],[\"效率不高\",{\"1\":{\"1103\":1,\"1294\":1}}],[\"效率比数组低\",{\"1\":{\"1074\":1,\"1269\":1}}],[\"效率比\",{\"1\":{\"1072\":1,\"1267\":1}}],[\"效率较低\",{\"1\":{\"566\":1}}],[\"效率高且不产生碎片\",{\"1\":{\"1394\":1}}],[\"效率高于serial\",{\"1\":{\"1394\":1}}],[\"效率高\",{\"1\":{\"491\":1,\"1394\":1}}],[\"效率会比自己写的循环高\",{\"1\":{\"338\":1}}],[\"撤销\",{\"1\":{\"981\":4}}],[\"意思是\",{\"1\":{\"981\":1}}],[\"意向排他锁\",{\"1\":{\"620\":1}}],[\"意向共识锁\",{\"1\":{\"620\":1}}],[\"意向锁是针对多粒度锁定协议的系统\",{\"1\":{\"620\":1}}],[\"意向锁\",{\"0\":{\"620\":1},\"1\":{\"638\":1}}],[\"您说得对\",{\"1\":{\"1404\":1}}],[\"您说的对\",{\"1\":{\"1398\":1}}],[\"您好\",{\"1\":{\"1386\":1,\"1494\":1}}],[\"您写的代码仍然保留\",{\"1\":{\"981\":1}}],[\"您必须声明一个索引列\",{\"1\":{\"589\":1}}],[\"举个简单例子\",{\"1\":{\"1416\":1}}],[\"举个自定义注解的例子\",{\"1\":{\"1402\":1}}],[\"举个例子解释下\",{\"1\":{\"1446\":1}}],[\"举个例子\",{\"1\":{\"473\":1,\"682\":1,\"698\":1,\"1008\":1,\"1217\":1,\"1416\":2,\"1424\":1,\"1446\":2}}],[\"举例也很形象\",{\"1\":{\"1392\":1}}],[\"举例\",{\"1\":{\"1138\":1,\"1323\":1,\"1392\":1}}],[\"举例来说\",{\"1\":{\"980\":1}}],[\"举一个简单的例子\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"挑拣\",{\"1\":{\"980\":1}}],[\"丢弃stash\",{\"1\":{\"979\":1}}],[\"起来\",{\"1\":{\"979\":1}}],[\"恢复时是将快照文件直接读入内存\",{\"1\":{\"1420\":1}}],[\"恢复之前暂存的状态\",{\"1\":{\"979\":1}}],[\"恢复暂存时的状态有俩种命令\",{\"1\":{\"979\":1}}],[\"恢复到暂存时的状态\",{\"1\":{\"979\":1}}],[\"暂且认为它是\",{\"1\":{\"1027\":1,\"1231\":1}}],[\"暂存起来\",{\"1\":{\"979\":1}}],[\"暂停容器\",{\"1\":{\"1020\":1,\"1226\":1}}],[\"暂停主线程2秒\",{\"1\":{\"755\":1}}],[\"暂停的时间\",{\"1\":{\"123\":1}}],[\"甲某\",{\"1\":{\"979\":1}}],[\"甲辰年龙年已经过去\",{\"1\":{\"262\":1}}],[\"哼哧哼哧搞了起来\",{\"1\":{\"979\":1}}],[\"拉取新分支\",{\"1\":{\"978\":2,\"979\":1}}],[\"拉流保存\",{\"1\":{\"163\":1}}],[\"企业开发一般会将它进行打包\",{\"1\":{\"1511\":1,\"1519\":1}}],[\"企业应用\",{\"1\":{\"1408\":1}}],[\"企业生产环境中最常使用的git组合命令集\",{\"0\":{\"977\":1}}],[\"企业最终要的是可以创造价值\",{\"1\":{\"715\":1}}],[\"稍等几分钟\",{\"1\":{\"976\":1}}],[\"栏\",{\"1\":{\"976\":1}}],[\"绑定远端地址\",{\"1\":{\"976\":1}}],[\"阻止\",{\"1\":{\"974\":1}}],[\"阻塞等待事件发生\",{\"1\":{\"1478\":1}}],[\"阻塞\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"阻塞和非阻塞在于第一个\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"阻塞和非阻塞的\",{\"1\":{\"989\":1}}],[\"阻塞到下一个毫秒\",{\"1\":{\"441\":2}}],[\"阻塞住查询请求\",{\"1\":{\"170\":1}}],[\"租云服务\",{\"1\":{\"969\":1}}],[\"终止\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"终生不变\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"终极办法02\",{\"0\":{\"961\":1}}],[\"终极办法01\",{\"0\":{\"960\":1}}],[\"终身学习我们一起行动\",{\"1\":{\"249\":1}}],[\"仔细阅读\",{\"1\":{\"958\":1}}],[\"密码\",{\"1\":{\"951\":1}}],[\"暴露应用端口\",{\"1\":{\"1514\":1}}],[\"暴露路径\",{\"1\":{\"950\":1}}],[\"暴露端口\",{\"1\":{\"913\":1}}],[\"截图\",{\"0\":{\"930\":1}}],[\"截取前20位做唯一\",{\"1\":{\"438\":1}}],[\"驳回\",{\"1\":{\"928\":4}}],[\"镜像id``\",{\"1\":{\"1019\":1,\"1225\":1}}],[\"镜像id\",{\"1\":{\"1019\":2,\"1225\":2}}],[\"镜像的构建过程\",{\"1\":{\"1512\":1}}],[\"镜像的所有命令\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"镜像的运行时实例\",{\"1\":{\"1014\":1,\"1220\":1}}],[\"镜像\",{\"1\":{\"917\":1,\"1018\":1,\"1224\":1,\"1512\":2,\"1515\":1}}],[\"忽略掉下划线开头的文件\",{\"1\":{\"974\":1}}],[\"忽略\",{\"1\":{\"915\":1}}],[\"拷贝\",{\"1\":{\"914\":1}}],[\"拷贝到项目的app\",{\"1\":{\"913\":1}}],[\"拷贝到\",{\"1\":{\"755\":1}}],[\"故名思思\",{\"1\":{\"907\":1}}],[\"利器\",{\"1\":{\"907\":1}}],[\"利用好多核\",{\"1\":{\"1408\":1}}],[\"利用好硬件资源\",{\"1\":{\"1408\":1}}],[\"利用好它提供的功能\",{\"1\":{\"1380\":1}}],[\"利用了操作系统本身的\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"利用\",{\"1\":{\"1093\":1,\"1286\":1}}],[\"利用数据库锁来控制资源的并发访问是不太理想的\",{\"1\":{\"657\":1}}],[\"利用数据库的自增id\",{\"1\":{\"436\":1}}],[\"利用缓存\",{\"1\":{\"588\":1}}],[\"利用映射函数将数据分配到各个桶中\",{\"1\":{\"405\":1}}],[\"利用它的反向代理功能提供负载均衡支持\",{\"1\":{\"123\":1}}],[\"填写项目名和相关配置\",{\"1\":{\"902\":1}}],[\"填写相关配置\",{\"1\":{\"901\":1}}],[\"填写必要信息\",{\"1\":{\"900\":1}}],[\"填写必要信息来生成\",{\"1\":{\"900\":1}}],[\"填充统计数组\",{\"1\":{\"413\":1}}],[\"细分\",{\"1\":{\"894\":1}}],[\"抛出异常\",{\"1\":{\"893\":1}}],[\"角度设计接口\",{\"1\":{\"893\":1}}],[\"失效的场景下进行分区迁移\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"失效索引\",{\"1\":{\"564\":1}}],[\"失去了缓存的意义\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"失败了\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"失败做重试来保证消息的可靠性\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"失败\",{\"1\":{\"894\":1}}],[\"失败抛出异常\",{\"1\":{\"892\":1,\"893\":1}}],[\"封装请求信息\",{\"1\":{\"1414\":1}}],[\"封装页面抛出异常的对象\",{\"1\":{\"1084\":1,\"1277\":1}}],[\"封装服务器运行环境的对象\",{\"1\":{\"1084\":1,\"1277\":1}}],[\"封装服务器对客户端的响应\",{\"1\":{\"1084\":1,\"1277\":1}}],[\"封装用户会话的对象\",{\"1\":{\"1084\":1,\"1277\":1}}],[\"封装客户端的请求\",{\"1\":{\"1084\":1,\"1277\":1}}],[\"封装json对象\",{\"1\":{\"893\":1}}],[\"封装预约执行后结果\",{\"1\":{\"892\":1}}],[\"封面图\",{\"1\":{\"381\":1,\"433\":1,\"1501\":1}}],[\"告诉kafka这条消息已经被成功消费\",{\"1\":{\"1442\":1}}],[\"告诉junit\",{\"1\":{\"891\":1}}],[\"告诉你我是如何解决的\",{\"1\":{\"264\":1}}],[\"识别不了\",{\"1\":{\"889\":1}}],[\"馆藏数量\",{\"1\":{\"887\":1,\"888\":1}}],[\"供用户自定义和配置\",{\"1\":{\"1168\":1,\"1345\":1}}],[\"供全球用户浏览\",{\"1\":{\"976\":1}}],[\"供参考\",{\"1\":{\"887\":1}}],[\"供其它部件读取\",{\"1\":{\"326\":1}}],[\"给你提供一个免费的实例\",{\"1\":{\"1507\":1}}],[\"给我普普通通地讲一讲泛型\",{\"1\":{\"1424\":1}}],[\"给类的静态变量赋予正确的初始值\",{\"1\":{\"1392\":1}}],[\"给类中的静态变量分配内存空间\",{\"1\":{\"1105\":1,\"1296\":1}}],[\"给静态变量复杂的初始值\",{\"1\":{\"1392\":1}}],[\"给\",{\"1\":{\"1029\":1,\"1233\":1,\"1522\":1}}],[\"给出需要扫描dao接口包\",{\"1\":{\"878\":1}}],[\"给定一个非空的整数数组\",{\"1\":{\"406\":1}}],[\"端点来访问查看指定功能状态\",{\"1\":{\"1188\":1,\"1363\":1}}],[\"端浏览更佳\",{\"1\":{\"870\":1}}],[\"端口号都相同\",{\"1\":{\"1093\":1,\"1286\":1}}],[\"端口号\",{\"1\":{\"711\":1}}],[\"端口是\",{\"1\":{\"205\":1}}],[\"案例5\",{\"0\":{\"982\":1}}],[\"案例4\",{\"0\":{\"981\":1}}],[\"案例3\",{\"0\":{\"980\":1}}],[\"案例2\",{\"0\":{\"979\":1},\"1\":{\"864\":1}}],[\"案例1\",{\"0\":{\"978\":1},\"1\":{\"864\":1}}],[\"案例\",{\"1\":{\"863\":1,\"907\":1}}],[\"案例源码仓库地址\",{\"1\":{\"129\":1}}],[\"冈本001\",{\"1\":{\"858\":1}}],[\"套子\",{\"1\":{\"858\":1}}],[\"香香的袜子\",{\"1\":{\"858\":1}}],[\"袜子\",{\"1\":{\"858\":1}}],[\"美女\",{\"1\":{\"852\":3,\"853\":2}}],[\"才对该bean进行加载实例化\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"才叫内存泄漏\",{\"1\":{\"1102\":1,\"1293\":1}}],[\"才会注入依赖对象\",{\"1\":{\"1412\":1}}],[\"才会将一个提案进行提交\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"才会把其一级缓存中的数据写入二级缓存\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"才会表现出多线程的特性\",{\"1\":{\"1055\":1,\"1253\":1}}],[\"才会清除掉\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"才会执行otherwise\",{\"1\":{\"848\":1}}],[\"才能达到\",{\"1\":{\"1416\":1}}],[\"才能准确地指出自己还需加深学习的知识点\",{\"1\":{\"1406\":1}}],[\"才能对面试中的问题得心应手\",{\"1\":{\"1112\":1,\"1300\":1}}],[\"才能进行操作\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"才能同时开饭\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"才能关门睡觉\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"才能更好的理解docker\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"才能删除表\",{\"1\":{\"927\":1}}],[\"才可以同时在一行记录加锁\",{\"1\":{\"618\":1}}],[\"鹏程\",{\"1\":{\"848\":3,\"849\":1,\"852\":5}}],[\"号\",{\"1\":{\"843\":1,\"1131\":1,\"1316\":1}}],[\"号打卡\",{\"1\":{\"721\":1}}],[\"改正\",{\"1\":{\"842\":1}}],[\"改变这个数组的类型\",{\"1\":{\"693\":1}}],[\"改变服务器的状态\",{\"1\":{\"183\":1}}],[\"改变服务器状态\",{\"1\":{\"183\":1}}],[\"报错\",{\"1\":{\"842\":1,\"890\":1}}],[\"报语法错误\",{\"1\":{\"842\":1}}],[\"报告\",{\"1\":{\"761\":1}}],[\"报告和文档的软件项目管理工具\",{\"1\":{\"761\":1}}],[\"扫描web相关的bean\",{\"1\":{\"882\":1}}],[\"扫描web层\",{\"1\":{\"882\":1}}],[\"扫描service包下所有使用注解的类型\",{\"1\":{\"881\":1}}],[\"扫描sql配置文件\",{\"1\":{\"878\":1}}],[\"扫描\",{\"1\":{\"881\":1}}],[\"扫描entity包\",{\"1\":{\"878\":1}}],[\"扫描之后的别名就是类名\",{\"1\":{\"831\":1}}],[\"扫描指定包下的所有类\",{\"1\":{\"831\":1}}],[\"亦可通过\",{\"1\":{\"829\":1}}],[\"既保证了数据的持久性\",{\"1\":{\"1420\":1}}],[\"既保证线程安全\",{\"1\":{\"1380\":1}}],[\"既可以支持快速查找\",{\"1\":{\"1380\":1}}],[\"既可以保证查询效率\",{\"1\":{\"1380\":1}}],[\"既可以在典型的\",{\"1\":{\"829\":1}}],[\"既然你提到了\",{\"1\":{\"1416\":1}}],[\"既然单线程容易实现\",{\"1\":{\"1157\":1,\"1337\":1}}],[\"既然是分区再分配\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"既然误算率一定存在\",{\"1\":{\"388\":1}}],[\"登录失效\",{\"1\":{\"1156\":1,\"1336\":1}}],[\"登录\",{\"1\":{\"826\":1,\"842\":2}}],[\"登录后\",{\"1\":{\"126\":1}}],[\"硬编码到java代码中\",{\"1\":{\"824\":1}}],[\"硬件及操作系统往往将主存和磁盘存储区分割为连续的大小相等的块\",{\"1\":{\"327\":1}}],[\"池类型的数据源\",{\"1\":{\"806\":2,\"808\":1}}],[\"池技术被广泛使用在系统开发中\",{\"1\":{\"708\":1}}],[\"唯一不足地方是\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"唯一的不足是占用内存空间\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"唯一\",{\"1\":{\"890\":1}}],[\"唯一标识符\",{\"1\":{\"901\":1,\"902\":1}}],[\"唯一标识\",{\"1\":{\"806\":1,\"807\":1,\"808\":1,\"818\":1,\"826\":4,\"839\":1,\"860\":1}}],[\"唯一索引有多个\",{\"1\":{\"559\":1}}],[\"唯一索引列的值必须唯一\",{\"1\":{\"558\":1}}],[\"唯一索引\",{\"1\":{\"558\":1,\"1146\":1,\"1329\":1}}],[\"静态代理只能代理一个类或接口\",{\"1\":{\"1474\":1}}],[\"静态代理需要手动编写代理类\",{\"1\":{\"1474\":1}}],[\"静态代理是在编译时就已经确定代理对象和被代理对象的关系\",{\"1\":{\"1474\":1}}],[\"静态代码块主要用于一次性地对类进行初始化设置\",{\"1\":{\"1392\":1}}],[\"静态代码块执行\",{\"1\":{\"1392\":2}}],[\"静态代码块是在类初始化阶段执行的\",{\"1\":{\"1392\":1}}],[\"静态方法\",{\"1\":{\"1392\":1}}],[\"静态常量\",{\"1\":{\"1392\":1}}],[\"静态的对象还是放在堆\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"静态变量有内存了\",{\"1\":{\"1392\":1}}],[\"静态变量等数据\",{\"1\":{\"1388\":1}}],[\"静态变量放在方法区\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"静态变量\",{\"1\":{\"1099\":1,\"1290\":1,\"1388\":1,\"1392\":1}}],[\"静态资源默认servlet配置\",{\"1\":{\"882\":1}}],[\"静态工具类\",{\"1\":{\"441\":1}}],[\"静鹏\",{\"1\":{\"820\":1}}],[\"静静\",{\"1\":{\"799\":1,\"822\":1,\"826\":1,\"849\":1}}],[\"覆盖\",{\"1\":{\"787\":1}}],[\"覆盖索引是指一个查询可以完全通过索引来得到结果\",{\"1\":{\"567\":1}}],[\"覆盖索引\",{\"1\":{\"567\":1}}],[\"容错和自动恢复\",{\"1\":{\"1408\":1}}],[\"容量加倍\",{\"1\":{\"1406\":1}}],[\"容量capacity\",{\"1\":{\"1406\":1}}],[\"容易被垃圾回收\",{\"1\":{\"1380\":1}}],[\"容易造成阻塞\",{\"1\":{\"785\":1}}],[\"容器无法正常结束注入过程\",{\"1\":{\"1412\":1}}],[\"容器中\",{\"1\":{\"1412\":1}}],[\"容器中只有一个\",{\"1\":{\"1410\":1}}],[\"容器启动时\",{\"1\":{\"1410\":1}}],[\"容器启动时会调用\",{\"1\":{\"1408\":1}}],[\"容器屏蔽了\",{\"1\":{\"1408\":1}}],[\"容器实现的大致流程\",{\"1\":{\"1408\":1}}],[\"容器会对\",{\"1\":{\"1408\":1}}],[\"容器的源码分析确实需要对它的原理有深入了解\",{\"1\":{\"1408\":1}}],[\"容器的核心\",{\"1\":{\"1408\":1}}],[\"容器的实现主要在\",{\"1\":{\"1408\":1}}],[\"容器的实现你可以大致描述一下吗\",{\"1\":{\"1408\":1}}],[\"容器的生命周期\",{\"0\":{\"1020\":1,\"1226\":1}}],[\"容器管理对象依赖关系错乱\",{\"1\":{\"1408\":1}}],[\"容器就会调用docreatebean\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"容器通过调用set方法或者是构造器来建立对象之间的依赖关系\",{\"1\":{\"1170\":1,\"1347\":1}}],[\"容器内的\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"容器支持的\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"容器分为\",{\"1\":{\"1069\":1,\"1264\":1}}],[\"容器看起来就真的像是独立的操作系统了\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"容器经历以下阶段\",{\"1\":{\"1020\":1,\"1226\":1}}],[\"容器id\",{\"1\":{\"919\":2}}],[\"容器\",{\"0\":{\"1014\":1,\"1220\":1,\"1263\":1},\"1\":{\"587\":1,\"1018\":1,\"1068\":1,\"1189\":1,\"1195\":1,\"1224\":1,\"1364\":1,\"1368\":1,\"1408\":1}}],[\"父类加载的类被所有的子类所信任\",{\"1\":{\"1392\":1}}],[\"父项目的pom\",{\"1\":{\"778\":2}}],[\"父工程\",{\"1\":{\"778\":1}}],[\"父工程设置依赖\",{\"1\":{\"778\":1}}],[\"继承vector\",{\"1\":{\"1404\":1}}],[\"继承messagesource\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"继承为了消除重复\",{\"1\":{\"778\":1}}],[\"继续执行其他任务\",{\"1\":{\"1478\":1}}],[\"继续执行方法\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"继续等待\",{\"1\":{\"1466\":1}}],[\"继续使用旧aof\",{\"1\":{\"1420\":1}}],[\"继续保持\",{\"1\":{\"1406\":1}}],[\"继续深入学习g1与其他垃圾收集器的设计与实现\",{\"1\":{\"1398\":1}}],[\"继续努力深造\",{\"1\":{\"1380\":1}}],[\"继续阅读\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"继续重新选举即可\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"继续往下执行\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"继续进行调整\",{\"1\":{\"417\":1}}],[\"继续调整\",{\"1\":{\"417\":1}}],[\"继续遍历数列并修改数组\",{\"1\":{\"412\":1}}],[\"继续\",{\"1\":{\"401\":1}}],[\"绝对是有手就行\",{\"1\":{\"969\":1}}],[\"绝对不在集合中\",{\"1\":{\"395\":1}}],[\"绝大部分工作都发生在这个生命周期中\",{\"1\":{\"776\":1}}],[\"拥有了统一规范\",{\"1\":{\"768\":1}}],[\"许可等\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"许可证信息等\",{\"1\":{\"768\":1}}],[\"许多ffmpeg的开发人员都来自mplayer项目\",{\"1\":{\"139\":1}}],[\"私服\",{\"1\":{\"768\":2}}],[\"私有数据\",{\"1\":{\"687\":1}}],[\"仓库\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"仓库文件\",{\"1\":{\"976\":1}}],[\"仓库就是存放依赖和插件的地方\",{\"1\":{\"768\":1}}],[\"仓库地址\",{\"1\":{\"111\":1}}],[\"框架可以快速开发\",{\"1\":{\"1408\":1}}],[\"框架使用\",{\"1\":{\"1402\":1}}],[\"框架有哪些主要模块\",{\"0\":{\"1168\":1,\"1345\":1}}],[\"框架支持的\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"框架了\",{\"1\":{\"990\":1}}],[\"框架的网络通信工具\",{\"1\":{\"990\":1}}],[\"框架就已经搭建好了\",{\"1\":{\"887\":1}}],[\"框架\",{\"0\":{\"1168\":1,\"1345\":1},\"1\":{\"766\":1,\"767\":1,\"1129\":1,\"1314\":1,\"1408\":1,\"1414\":1}}],[\"输入参数类型可以是\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"输入参数映射过程类似于\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"输入参数映射\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"输入访问地址\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"输入\",{\"1\":{\"765\":1}}],[\"输出详细的gc日志\",{\"1\":{\"1400\":1}}],[\"输出gc\",{\"1\":{\"1400\":1}}],[\"输出的结果也是不同的\",{\"1\":{\"1386\":1}}],[\"输出服务器响应的输出流对象\",{\"1\":{\"1084\":1,\"1277\":1}}],[\"输出结果类型可以是\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"输出结果映射过程类似于\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"输出结果映射\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"输出结果表明i1和i2指向的是同一个对象\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"输出结果\",{\"1\":{\"413\":1}}],[\"输出数组元素的下标值\",{\"1\":{\"412\":1}}],[\"输出\",{\"1\":{\"160\":1,\"1001\":1,\"1061\":1,\"1210\":1,\"1259\":1,\"1390\":1}}],[\"验证是否有正确的内部结构\",{\"1\":{\"1392\":1}}],[\"验证通过了\",{\"1\":{\"1392\":1}}],[\"验证\",{\"1\":{\"1094\":1,\"1105\":1,\"1287\":1,\"1296\":1,\"1392\":2}}],[\"验证一下\",{\"1\":{\"961\":1}}],[\"验证包是否有效且达到质量标准\",{\"1\":{\"776\":1}}],[\"验证成功\",{\"1\":{\"765\":1}}],[\"验证结果\",{\"0\":{\"306\":1}}],[\"含有settings\",{\"1\":{\"764\":1}}],[\"含有maven运行时所需要的java类库\",{\"1\":{\"764\":1}}],[\"含有mvn运行的脚本\",{\"1\":{\"764\":1}}],[\"含有plexus\",{\"1\":{\"764\":1}}],[\"含义是5个primary\",{\"1\":{\"475\":1}}],[\"概念\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"概念来管理项目\",{\"1\":{\"761\":1}}],[\"概念关系\",{\"1\":{\"477\":1}}],[\"专注于面试\",{\"1\":{\"983\":1,\"987\":1,\"1013\":1,\"1083\":1,\"1098\":1,\"1112\":1,\"1128\":1,\"1167\":1,\"1180\":1,\"1193\":1}}],[\"专家\",{\"1\":{\"761\":1}}],[\"专门针对设计模式在生产环境怎么用\",{\"1\":{\"93\":1}}],[\"搞不太明白它到底要解决什么问题\",{\"1\":{\"1424\":1}}],[\"搞java都能说出\",{\"1\":{\"761\":1}}],[\"搞技术的都心里大概知道每个编程语言的性能和优劣势\",{\"1\":{\"72\":1}}],[\"各路大佬又在这上边做了包装\",{\"1\":{\"1506\":1}}],[\"各有什么优缺点\",{\"1\":{\"1394\":1}}],[\"各有其优缺点\",{\"1\":{\"1004\":1,\"1006\":1,\"1213\":1,\"1215\":1}}],[\"各自的\",{\"1\":{\"1190\":1,\"1365\":1}}],[\"各自的继承结构\",{\"0\":{\"1069\":1,\"1264\":1}}],[\"各种常用组件及配置已经默认配置完成\",{\"1\":{\"1182\":1,\"1357\":1}}],[\"各位看官\",{\"1\":{\"761\":1}}],[\"各个主机中的数据是否仍然处于一致的状态\",{\"1\":{\"1197\":1,\"1370\":1}}],[\"各个服务独立部署在不同的服务器上\",{\"1\":{\"1190\":1,\"1365\":1}}],[\"各个齿轮分别带动时针\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"各个namespace下的资源互不干扰\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"各个磁盘必须同步转动\",{\"1\":{\"327\":1}}],[\"各个自媒体更是跟风传着各种小道消息\",{\"1\":{\"85\":1}}],[\"秒的不可用时间窗口\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"秒\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"秒钟以后控制台打印\",{\"1\":{\"755\":1}}],[\"秒杀预约结果状态\",{\"1\":{\"892\":1}}],[\"秒杀抢购等等\",{\"1\":{\"727\":1}}],[\"秒杀等场景\",{\"1\":{\"657\":1}}],[\"似乎我的回答没有完全满足您的需求\",{\"1\":{\"1390\":1}}],[\"似乎\",{\"1\":{\"755\":1}}],[\"描述直接展示出来显得不太正式\",{\"1\":{\"1494\":1}}],[\"描述一下\",{\"0\":{\"1028\":1,\"1171\":1,\"1232\":1,\"1348\":1}}],[\"描述\",{\"0\":{\"1020\":1,\"1226\":1},\"1\":{\"1458\":1}}],[\"描述这写交互\",{\"1\":{\"755\":1}}],[\"描述了各个概念所处的场景和作用\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"描述了\",{\"1\":{\"755\":1}}],[\"变换和聚合等各类操作\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"变式\",{\"0\":{\"1078\":1,\"1273\":1}}],[\"变成o\",{\"1\":{\"1380\":1}}],[\"变成\",{\"1\":{\"1064\":1,\"1262\":1}}],[\"变得太大\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"变量名等\",{\"1\":{\"1392\":1}}],[\"变量用于表示当前锁的状态\",{\"1\":{\"1390\":1}}],[\"变量被声明为\",{\"1\":{\"1382\":2}}],[\"变量没有被声明为\",{\"1\":{\"1382\":2}}],[\"变量读写操作的实现\",{\"1\":{\"1382\":1}}],[\"变量的修改\",{\"1\":{\"1382\":2}}],[\"变量的值变为\",{\"1\":{\"1382\":1}}],[\"变量的值时\",{\"1\":{\"1382\":2}}],[\"变量的读操作和写操作合并为一个操作\",{\"1\":{\"1382\":1}}],[\"变量的读写操作与其他指令重排序\",{\"1\":{\"1382\":1}}],[\"变量的读写操作前后插入内存屏障\",{\"1\":{\"1382\":1}}],[\"变量的具体值load到线程本地内存中\",{\"1\":{\"755\":1}}],[\"变量都会进行自增\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"变量\",{\"1\":{\"755\":1,\"1076\":2,\"1271\":2,\"1382\":4,\"1390\":1}}],[\"变更内容\",{\"1\":{\"210\":1}}],[\"变更状态\",{\"1\":{\"183\":1}}],[\"虚拟机将常量池中的符号引用替换成直接引用的过程\",{\"1\":{\"1105\":1,\"1296\":1}}],[\"虚拟机里面还有额外的系统\",{\"1\":{\"1015\":1,\"1221\":1}}],[\"虚拟机栈描述的是java方法执行的内存模型\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"虚拟机栈\",{\"1\":{\"755\":1,\"1394\":1}}],[\"虚幻引擎属于开源项目\",{\"1\":{\"72\":1}}],[\"块语句\",{\"1\":{\"755\":1}}],[\"谢谢您的夸奖\",{\"1\":{\"1468\":1,\"1474\":1}}],[\"谢谢您的提问\",{\"1\":{\"1386\":1,\"1388\":1,\"1396\":1,\"1398\":1}}],[\"谢谢邀请\",{\"1\":{\"1426\":1}}],[\"谢谢你\",{\"1\":{\"1446\":1}}],[\"谢谢你将这些泛型的概念讲解的如此清晰和深入\",{\"1\":{\"1424\":1}}],[\"谢谢你的帮助\",{\"1\":{\"1466\":1}}],[\"谢谢你的解释\",{\"1\":{\"1464\":1}}],[\"谢谢你的解答\",{\"1\":{\"1444\":1,\"1452\":1,\"1454\":1,\"1466\":1}}],[\"谢谢你的提问\",{\"1\":{\"1432\":1}}],[\"谢谢你的分享\",{\"1\":{\"1430\":1,\"1440\":1,\"1442\":1,\"1462\":1}}],[\"谢谢你的时间和分享\",{\"1\":{\"1432\":1}}],[\"谢谢你的时间\",{\"1\":{\"1428\":1,\"1456\":1}}],[\"谢谢你的精彩讲解\",{\"1\":{\"1424\":1}}],[\"谢谢你的回答\",{\"1\":{\"1384\":1,\"1448\":1,\"1468\":1}}],[\"谢谢面试官\",{\"1\":{\"1416\":1}}],[\"谢谢面试官的肯定\",{\"1\":{\"1476\":1}}],[\"谢谢面试官的提问\",{\"1\":{\"1476\":1}}],[\"谢谢面试官的精彩问题\",{\"1\":{\"1424\":1}}],[\"谢谢面试官的赞赏和提议\",{\"1\":{\"1398\":1}}],[\"谢谢面试官的夸奖\",{\"1\":{\"1380\":1,\"1392\":1,\"1424\":1}}],[\"谢谢夸奖\",{\"1\":{\"1400\":1,\"1404\":1,\"1406\":1,\"1434\":2}}],[\"谢谢详细的解释\",{\"1\":{\"1396\":1}}],[\"谢谢\",{\"1\":{\"755\":1,\"1380\":1,\"1410\":1,\"1412\":1,\"1446\":1,\"1464\":1}}],[\"异步通信\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"异步非阻塞io\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"异步保存日志\",{\"1\":{\"752\":1}}],[\"异常通知\",{\"1\":{\"1402\":1}}],[\"异常抛出前后等\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"异常\",{\"0\":{\"916\":1},\"1\":{\"587\":1,\"893\":1,\"991\":1,\"1384\":1,\"1481\":2}}],[\"环绕通知\",{\"1\":{\"1049\":1,\"1250\":1,\"1402\":1}}],[\"环绕\",{\"1\":{\"752\":1}}],[\"环境下\",{\"1\":{\"1072\":1,\"1267\":1}}],[\"环境安装\",{\"0\":{\"949\":1}}],[\"环境搭建\",{\"0\":{\"873\":1}}],[\"环境介绍\",{\"0\":{\"455\":1}}],[\"环境\",{\"0\":{\"834\":1,\"1507\":1},\"1\":{\"131\":1,\"806\":1,\"808\":1,\"1134\":1,\"1319\":1}}],[\"⑤\",{\"1\":{\"751\":1,\"1177\":2,\"1354\":2}}],[\"④\",{\"1\":{\"751\":1,\"1177\":2,\"1354\":2}}],[\"③\",{\"1\":{\"751\":1,\"1177\":2,\"1354\":2}}],[\"②排除依赖包中所包含的依赖关系\",{\"1\":{\"773\":1}}],[\"②\",{\"1\":{\"751\":1,\"1173\":1,\"1177\":2,\"1350\":1,\"1354\":2}}],[\"①所包含坐标\",{\"1\":{\"773\":1}}],[\"①\",{\"1\":{\"751\":1,\"1173\":1,\"1177\":2,\"1350\":1,\"1354\":2}}],[\"国内镜像\",{\"1\":{\"959\":1}}],[\"国内镜像地址\",{\"1\":{\"734\":1}}],[\"国内版本镜像页\",{\"1\":{\"458\":1}}],[\"详细流程说明\",{\"1\":{\"1414\":1}}],[\"详细信息\",{\"1\":{\"1108\":1,\"1299\":1}}],[\"详细介绍\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"详细描述一下\",{\"0\":{\"1029\":1,\"1033\":1,\"1233\":1,\"1237\":1}}],[\"详细参考文档及视频同步更新\",{\"1\":{\"731\":1}}],[\"详情\",{\"0\":{\"60\":1,\"66\":1}}],[\"造成数据库压力过大\",{\"1\":{\"1159\":1,\"1339\":1}}],[\"造成集群内大量的调整\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"造成mybatis无法填充对应的字段信息\",{\"1\":{\"822\":1}}],[\"造成的后果是\",{\"1\":{\"727\":1}}],[\"造成现有客户端无法使用\",{\"1\":{\"209\":1}}],[\"抢占锁\",{\"1\":{\"727\":1}}],[\"抢到后再设置过期时间\",{\"1\":{\"727\":1}}],[\"众所周知\",{\"1\":{\"727\":1}}],[\"离线可以扫描二维码\",{\"1\":{\"940\":1}}],[\"离bug远一点\",{\"0\":{\"727\":1}}],[\"离左上角的坐标\",{\"1\":{\"157\":1}}],[\"占用存储无疑是很大的\",{\"1\":{\"722\":1}}],[\"占用存储空间越大\",{\"1\":{\"486\":1}}],[\"量同步\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"量级的基数统计\",{\"1\":{\"722\":1}}],[\"量就越大\",{\"1\":{\"323\":1}}],[\"呢\",{\"0\":{\"989\":1},\"1\":{\"721\":1,\"1446\":1}}],[\"耐心看完\",{\"1\":{\"720\":1}}],[\"抖音热搜\",{\"1\":{\"720\":1}}],[\"差集都可以这样操作\",{\"1\":{\"719\":1}}],[\"条件变量偏移量\",{\"1\":{\"1481\":1}}],[\"条件变量等待时间偏移量\",{\"1\":{\"1481\":1}}],[\"条件变量等待时间\",{\"1\":{\"1481\":1}}],[\"条件注解就是\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"条件\",{\"1\":{\"1017\":1,\"1223\":1}}],[\"条件中包含\",{\"1\":{\"564\":1}}],[\"条的数据\",{\"1\":{\"718\":1}}],[\"粉丝列表等需要缓存的场景\",{\"1\":{\"718\":1}}],[\"订单编号的生成\",{\"1\":{\"716\":1}}],[\"订阅模式来传递消息\",{\"1\":{\"1450\":1}}],[\"订阅模式\",{\"1\":{\"1438\":1}}],[\"订阅系统\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"订阅\",{\"1\":{\"1194\":1,\"1201\":1,\"1367\":1,\"1374\":1}}],[\"订阅并消费消息\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"订阅及阻塞队列功能\",{\"1\":{\"657\":1}}],[\"订阅机制\",{\"1\":{\"652\":1}}],[\"⚠️注意\",{\"1\":{\"715\":1}}],[\"背的很熟\",{\"1\":{\"1390\":1}}],[\"背后的原理\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"背最少的面试题\",{\"1\":{\"996\":1}}],[\"背诵八股文已经不是找工作的绝对王牌\",{\"1\":{\"715\":1}}],[\"背景\",{\"1\":{\"439\":1}}],[\"怎么回收\",{\"1\":{\"1394\":1}}],[\"怎么解决\",{\"0\":{\"1159\":1,\"1339\":1},\"1\":{\"1159\":1,\"1160\":1,\"1339\":1,\"1340\":1}}],[\"怎么解决http协议无状态协议\",{\"1\":{\"984\":1}}],[\"怎么确保它们按顺序执行\",{\"0\":{\"1064\":1,\"1262\":1}}],[\"怎么办\",{\"0\":{\"1031\":1,\"1235\":1},\"1\":{\"981\":1}}],[\"怎么就找不到心意的工作\",{\"1\":{\"715\":1}}],[\"怎么这么难呢\",{\"1\":{\"107\":1}}],[\"归\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"归还连接到连接池\",{\"1\":{\"711\":1}}],[\"归并排序\",{\"1\":{\"410\":1,\"412\":1}}],[\"归并排序和快速排序\",{\"0\":{\"355\":1}}],[\"动态地生成一个代理类的字节码\",{\"1\":{\"1474\":1}}],[\"动态地生成一个代理类\",{\"1\":{\"1474\":1}}],[\"动态地获取和设置泛型信息\",{\"1\":{\"1468\":1}}],[\"动态地获取和设置注解\",{\"1\":{\"1468\":1}}],[\"动态地获取和设置数组元素\",{\"1\":{\"1468\":1}}],[\"动态地获取和设置属性值\",{\"1\":{\"1468\":1}}],[\"动态地调用方法\",{\"1\":{\"1468\":1}}],[\"动态地创建对象\",{\"1\":{\"1468\":1}}],[\"动态选择部分内容\",{\"1\":{\"1416\":1}}],[\"动态预测并调整回收率与吞吐量\",{\"1\":{\"1398\":1}}],[\"动态调整回收频率与时间\",{\"1\":{\"1398\":1}}],[\"动态扩容\",{\"1\":{\"1380\":1}}],[\"动态获取数据\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"动态的给一个对象添加一些额外的功能\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"动态的决定实例化哪个类\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"动态\",{\"0\":{\"1134\":1,\"1319\":1},\"1\":{\"1134\":1,\"1319\":1,\"1416\":1}}],[\"动态链接\",{\"1\":{\"1099\":1,\"1290\":1,\"1388\":1}}],[\"动态实现dao接口\",{\"1\":{\"878\":1}}],[\"动态sql\",{\"0\":{\"846\":1}}],[\"动态代理会根据指定的接口或类\",{\"1\":{\"1474\":1}}],[\"动态代理只能代理接口\",{\"1\":{\"1474\":1}}],[\"动态代理还可以实现\",{\"1\":{\"1474\":1}}],[\"动态代理的实现原理是基于\",{\"1\":{\"1474\":1}}],[\"动态代理的实现依赖于反射机制\",{\"1\":{\"1474\":1}}],[\"动态代理的缺点是性能比较低\",{\"1\":{\"1474\":1}}],[\"动态代理的优点是可以在运行时动态地创建代理对象\",{\"1\":{\"1474\":1}}],[\"动态代理通常用于实现\",{\"1\":{\"1474\":1}}],[\"动态代理是一种基于反射的机制\",{\"1\":{\"1474\":1}}],[\"动态代理\",{\"0\":{\"1474\":1},\"1\":{\"1378\":1}}],[\"动态代理实现\",{\"1\":{\"878\":1}}],[\"动态代理总结\",{\"0\":{\"827\":1}}],[\"动态代理mapper实现类\",{\"0\":{\"823\":1}}],[\"动态维护着\",{\"1\":{\"710\":1}}],[\"动态mapping\",{\"0\":{\"484\":1}}],[\"修正并发标记期间的错误标记\",{\"1\":{\"1398\":1}}],[\"修正并发标记期间并发修改导致的错误标记\",{\"1\":{\"1394\":1}}],[\"修正在并发标记期间并发修改导致的错误标记\",{\"1\":{\"1396\":1}}],[\"修饰符\",{\"1\":{\"1048\":1,\"1249\":1,\"1424\":1}}],[\"修饰的变量\",{\"1\":{\"755\":1}}],[\"修饰的方法\",{\"1\":{\"755\":1}}],[\"修炼之连接池篇\",{\"1\":{\"710\":1}}],[\"修改注释完毕后保存就好了\",{\"1\":{\"981\":1}}],[\"修改用户信息\",{\"1\":{\"849\":1}}],[\"修改测试用例的setup方法\",{\"1\":{\"825\":1}}],[\"修改方法\",{\"1\":{\"822\":1}}],[\"修改全局配置文件\",{\"0\":{\"808\":1}}],[\"修改如下\",{\"1\":{\"765\":1}}],[\"修改密码\",{\"1\":{\"736\":1}}],[\"修改redis\",{\"1\":{\"736\":1}}],[\"修改配置\",{\"0\":{\"736\":1,\"927\":1},\"1\":{\"950\":1}}],[\"修改和查询存在操作\",{\"1\":{\"666\":1}}],[\"修改和定制软件源代码\",{\"1\":{\"243\":1}}],[\"修改后\",{\"1\":{\"491\":1}}],[\"修改\",{\"1\":{\"206\":1,\"459\":1,\"883\":1,\"1476\":1}}],[\"修改文件\",{\"1\":{\"142\":1}}],[\"受控的资源使用\",{\"1\":{\"708\":1}}],[\"五种类型的对象\",{\"1\":{\"699\":1}}],[\"五类数据结构\",{\"0\":{\"662\":1}}],[\"符号引用就理解为一个标示\",{\"1\":{\"1105\":1,\"1296\":1}}],[\"符号被过滤\",{\"1\":{\"464\":1}}],[\"符串\",{\"1\":{\"699\":1}}],[\"连一个搞中医的朋友都要要做一个自己的网站\",{\"1\":{\"969\":1}}],[\"连连接池是创建和管理一个连接的缓冲池的技术\",{\"1\":{\"708\":1}}],[\"连续的空间\",{\"1\":{\"695\":1}}],[\"连续的内存空间\",{\"1\":{\"695\":1}}],[\"连接zookeeper\",{\"1\":{\"1466\":1}}],[\"连接主机\",{\"1\":{\"1422\":1}}],[\"连接点\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"连接\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"连接共享\",{\"1\":{\"1095\":1,\"1288\":1}}],[\"连接完成后将业务处理交给线程池处理\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"连接一样操作\",{\"1\":{\"708\":1}}],[\"连接在系统初始化时就创建完成\",{\"1\":{\"708\":1}}],[\"连接池的静态块\",{\"1\":{\"711\":1}}],[\"连接池能够控制一个模块的资源占用率\",{\"1\":{\"708\":1}}],[\"连接池\",{\"0\":{\"707\":1,\"708\":1,\"709\":1,\"711\":1},\"1\":{\"708\":1,\"711\":3}}],[\"连接数\",{\"1\":{\"578\":1}}],[\"连接成功后\",{\"1\":{\"123\":2}}],[\"升级操作为整数集合带来了操作上的灵活性\",{\"1\":{\"693\":1}}],[\"升级为表锁可以简化锁管理\",{\"1\":{\"637\":1}}],[\"速度快\",{\"1\":{\"1394\":1,\"1396\":1,\"1418\":1}}],[\"速度\",{\"1\":{\"1124\":1,\"1147\":1,\"1312\":1,\"1330\":1}}],[\"速度就越快\",{\"1\":{\"691\":1}}],[\"速度相差了近\",{\"1\":{\"319\":1}}],[\"渐进式\",{\"1\":{\"688\":1}}],[\"维持在一个合理的范围之内\",{\"1\":{\"688\":1}}],[\"维护等步骤\",{\"1\":{\"1502\":1}}],[\"维护成本\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"维护\",{\"1\":{\"580\":1}}],[\"维护好夫妻关系是最重要的\",{\"1\":{\"265\":1}}],[\"维护文档\",{\"1\":{\"210\":1}}],[\"维护接口文档版本更新\",{\"0\":{\"210\":1}}],[\"销毁前调用这个方法\",{\"1\":{\"1410\":1}}],[\"销毁阶段\",{\"1\":{\"1410\":1}}],[\"销毁\",{\"1\":{\"1085\":2,\"1278\":2}}],[\"销毁容器\",{\"1\":{\"1020\":1,\"1226\":1}}],[\"销毁值的函数\",{\"1\":{\"687\":1}}],[\"销毁键的函数\",{\"1\":{\"687\":1}}],[\"销毁代价比较大的数据库连接\",{\"1\":{\"86\":1}}],[\"兼容部分\",{\"1\":{\"683\":1}}],[\"兼容广泛的设备和系统\",{\"1\":{\"239\":1}}],[\"库恢复\",{\"1\":{\"1142\":1,\"1325\":1}}],[\"库存不足异常\",{\"1\":{\"892\":1}}],[\"库存不足\",{\"1\":{\"892\":1,\"893\":1}}],[\"库中的函数\",{\"1\":{\"683\":1}}],[\"库内的水平分表\",{\"1\":{\"582\":1}}],[\"库内垂直分表只解决了单一表数据量过大的问题\",{\"1\":{\"580\":1}}],[\"杜绝缓冲区溢出\",{\"1\":{\"683\":1}}],[\"形成链表\",{\"1\":{\"687\":1}}],[\"形成了一个有序链表\",{\"1\":{\"566\":1}}],[\"形式\",{\"1\":{\"678\":1}}],[\"跳跃表中的节点按照分值大小进行排序\",{\"1\":{\"692\":1}}],[\"跳跃表信息\",{\"1\":{\"692\":1}}],[\"跳跃表是有序集合的底层实现之一\",{\"1\":{\"692\":1}}],[\"跳跃表节点的\",{\"1\":{\"691\":1}}],[\"跳跃表节点\",{\"1\":{\"691\":1}}],[\"跳跃表\",{\"0\":{\"690\":1,\"691\":1},\"1\":{\"676\":1}}],[\"跳转到指定行号\",{\"1\":{\"111\":1}}],[\"青铜\",{\"0\":{\"674\":1,\"675\":1},\"1\":{\"671\":1,\"704\":1,\"710\":1}}],[\"却可以重复\",{\"1\":{\"670\":1}}],[\"迭代顺序不定\",{\"1\":{\"1380\":1}}],[\"迭代器会新维护一个初始值等于\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"迭代有序集合中的元素\",{\"1\":{\"670\":1}}],[\"迭代集合中的元素\",{\"1\":{\"669\":1}}],[\"迭代哈希表中的键值对\",{\"1\":{\"668\":1}}],[\"向客户端表明可以取消连接了\",{\"1\":{\"1091\":1,\"1284\":1}}],[\"向有序集合添加一个或多个成员\",{\"1\":{\"670\":1}}],[\"向集合添加一个或多个成员\",{\"1\":{\"669\":1}}],[\"向下取整\",{\"1\":{\"405\":1}}],[\"尾部\",{\"1\":{\"667\":1}}],[\"尾指针\",{\"1\":{\"341\":1}}],[\"精度可以使用毫秒或秒\",{\"1\":{\"666\":1}}],[\"精简而稳定\",{\"1\":{\"241\":1}}],[\"太好了\",{\"1\":{\"1426\":1,\"1434\":1,\"1444\":1,\"1450\":1,\"1458\":1}}],[\"太棒了\",{\"1\":{\"1424\":1,\"1426\":1,\"1432\":2,\"1436\":1,\"1438\":1,\"1440\":1,\"1442\":2,\"1444\":1,\"1448\":1,\"1450\":1,\"1456\":3,\"1458\":1,\"1460\":1,\"1462\":1,\"1466\":1}}],[\"太难了\",{\"1\":{\"715\":1}}],[\"太短的键值通常也不是好主意\",{\"1\":{\"665\":1}}],[\"太长的键值不是个好主意\",{\"1\":{\"665\":1}}],[\"工厂bean\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"工厂方法模式\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"工业级应用的规模越来越庞大\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"工具\",{\"1\":{\"972\":1}}],[\"工具类\",{\"1\":{\"939\":1}}],[\"工具连接使用\",{\"1\":{\"664\":1}}],[\"工程\",{\"1\":{\"874\":1}}],[\"工作状态有哪些\",{\"0\":{\"1196\":1,\"1369\":1}}],[\"工作内存中\",{\"1\":{\"755\":1}}],[\"工作完成之后\",{\"1\":{\"688\":1}}],[\"工作正式开始\",{\"1\":{\"688\":1}}],[\"工作原理\",{\"1\":{\"562\":2}}],[\"工作id\",{\"1\":{\"441\":1}}],[\"工作机器id\",{\"1\":{\"441\":1}}],[\"工作的原理是将数组分到有限数量的桶子里\",{\"1\":{\"401\":1}}],[\"工作一年起码顶俩年\",{\"1\":{\"270\":1}}],[\"工作没有变动\",{\"1\":{\"263\":1}}],[\"工作\",{\"0\":{\"263\":1},\"1\":{\"262\":1}}],[\"工作总结\",{\"0\":{\"217\":1},\"1\":{\"217\":1}}],[\"工作模式与连接数上限\",{\"1\":{\"123\":1}}],[\"工作中最常用shell指令\",{\"1\":{\"111\":1}}],[\"散列成对应\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"散列\",{\"1\":{\"664\":1,\"682\":1}}],[\"窗口\",{\"1\":{\"660\":3}}],[\"盘\",{\"1\":{\"660\":1}}],[\"盘片被划分成一系列同心环\",{\"1\":{\"327\":1}}],[\"流式处理平台\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"流式回复\",{\"1\":{\"296\":1}}],[\"流量削峰\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"流量削峰及异步处理实时性低的业务\",{\"1\":{\"657\":1}}],[\"流程如下\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"流程id为\",{\"1\":{\"929\":1}}],[\"踩\",{\"1\":{\"657\":1}}],[\"踩到了一点风口\",{\"1\":{\"264\":1}}],[\"社区活跃\",{\"1\":{\"989\":1}}],[\"社区建设\",{\"1\":{\"536\":1}}],[\"社交网站的访问量通常来说比较大\",{\"1\":{\"657\":1}}],[\"社交网络\",{\"1\":{\"657\":1}}],[\"缓冲区用于存储数据\",{\"1\":{\"1478\":1}}],[\"缓冲区\",{\"1\":{\"1124\":2,\"1312\":2,\"1478\":1}}],[\"缓冲区代理缓冲用户端请求的最大字节数\",{\"1\":{\"123\":1}}],[\"缓冲\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"缓存与异步\",{\"1\":{\"1408\":1}}],[\"缓存数据库查询结果\",{\"1\":{\"1408\":1}}],[\"缓存数据的淘汰策略有哪些\",{\"0\":{\"1009\":1,\"1218\":1}}],[\"缓存刷新时才写入\",{\"1\":{\"1382\":1}}],[\"缓存中的旧值\",{\"1\":{\"1382\":1}}],[\"缓存在物理上永远不过期\",{\"1\":{\"1160\":1,\"1340\":1}}],[\"缓存永不过期\",{\"1\":{\"1160\":2,\"1340\":2}}],[\"缓存时间设置短一点\",{\"1\":{\"1159\":1,\"1339\":1}}],[\"缓存成本也就越大\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"缓存淘汰\",{\"1\":{\"1009\":1,\"1218\":1}}],[\"缓存预热\",{\"1\":{\"1008\":1,\"1217\":1}}],[\"缓存上从不设置过期时间\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"缓存高可用\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"缓存挂掉了\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"缓存空间占用小\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"缓存空对象\",{\"1\":{\"1004\":2,\"1213\":2}}],[\"缓存穿透是指用户请求的数据在缓存中不存在即没有命中\",{\"1\":{\"1159\":1,\"1339\":1}}],[\"缓存穿透\",{\"1\":{\"1004\":2,\"1213\":2}}],[\"缓存和\",{\"0\":{\"1007\":1,\"1216\":1},\"1\":{\"1003\":1,\"1007\":2,\"1212\":1,\"1216\":2}}],[\"缓存和消息中间件\",{\"1\":{\"664\":1,\"677\":1}}],[\"缓存如何失效\",{\"1\":{\"1003\":1,\"1212\":1}}],[\"缓存何时写入\",{\"1\":{\"1003\":1,\"1212\":1}}],[\"缓存算法\",{\"1\":{\"1001\":1,\"1210\":1}}],[\"缓存到\",{\"1\":{\"1000\":1,\"1209\":1}}],[\"缓存是\",{\"1\":{\"1000\":1,\"1209\":1}}],[\"缓存机制等实用功能\",{\"1\":{\"678\":1}}],[\"缓存不具有一致性\",{\"1\":{\"678\":1}}],[\"缓存雪崩是不同数据都过期了\",{\"1\":{\"1160\":1,\"1340\":1}}],[\"缓存雪崩是指缓存中数据大批量到过期时间\",{\"1\":{\"1160\":1,\"1340\":1}}],[\"缓存雪崩\",{\"1\":{\"671\":1,\"1005\":1,\"1214\":1}}],[\"缓存击穿指并发查同一条数据\",{\"1\":{\"1160\":1,\"1340\":1}}],[\"缓存击穿\",{\"1\":{\"671\":1,\"1006\":1,\"1215\":1}}],[\"缓存现在几乎是所有中大型网站都在用的必杀技\",{\"1\":{\"657\":1}}],[\"缓存\",{\"0\":{\"851\":1,\"1207\":1},\"1\":{\"657\":1,\"998\":3,\"999\":1,\"1006\":1,\"1208\":1,\"1215\":1},\"2\":{\"1012\":1}}],[\"缓存产品有以下三个特点\",{\"1\":{\"655\":1}}],[\"集中定义依赖版本号\",{\"1\":{\"778\":1}}],[\"集合的源码简直太友好了\",{\"1\":{\"1080\":1,\"1275\":1}}],[\"集合的类型\",{\"1\":{\"860\":1}}],[\"集合包含的元素数量\",{\"1\":{\"693\":1}}],[\"集合键\",{\"1\":{\"693\":1}}],[\"集合是通过哈希表实现的\",{\"1\":{\"670\":1}}],[\"集合中所有\",{\"1\":{\"1117\":1,\"1305\":1}}],[\"集合中最小的leo\",{\"1\":{\"1118\":1,\"1306\":1}}],[\"集合中最小的\",{\"1\":{\"1114\":1,\"1302\":1}}],[\"集合中最大的成员数为\",{\"1\":{\"670\":1}}],[\"集合中的每个副本都会维护自己的\",{\"1\":{\"1118\":1,\"1306\":1}}],[\"集合中的\",{\"0\":{\"1076\":1,\"1271\":1}}],[\"集合中\",{\"1\":{\"669\":1}}],[\"集合移动到\",{\"1\":{\"669\":1}}],[\"集合成员是唯一的\",{\"1\":{\"669\":1}}],[\"集合等数据结构能很方便的的实现这些功能\",{\"1\":{\"657\":1}}],[\"集合\",{\"0\":{\"669\":1},\"1\":{\"652\":1,\"664\":1,\"669\":2,\"682\":1,\"699\":1,\"1076\":1,\"1117\":2,\"1122\":1,\"1271\":1,\"1305\":2,\"1310\":1}}],[\"集群会自动选举一个从节点作为新的主节点\",{\"1\":{\"1426\":1}}],[\"集群会根据命令的键值对选择正确的分片\",{\"1\":{\"1426\":1}}],[\"集群刚刚启动或者leader服务器宕机\",{\"1\":{\"1199\":1,\"1372\":1}}],[\"集群管理\",{\"1\":{\"1194\":1,\"1201\":1,\"1367\":1,\"1374\":1}}],[\"集群中每个\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"集群部署\",{\"1\":{\"1162\":2,\"1342\":2}}],[\"集群存在\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"集群新增\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"集群的负载均衡\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"集群的每个服务器收到投票后\",{\"1\":{\"183\":1}}],[\"集群模式下\",{\"1\":{\"657\":1}}],[\"集群发现\",{\"1\":{\"459\":1}}],[\"集群就是将单个独立的应用复制多分放在不同的主机上来减轻服务器的压力\",{\"1\":{\"182\":1}}],[\"集群内节点状态的快速感知\",{\"1\":{\"170\":1}}],[\"集群\",{\"0\":{\"133\":1,\"514\":1},\"1\":{\"469\":1,\"1032\":1,\"1116\":1,\"1236\":1,\"1304\":1}}],[\"黑铁\",{\"0\":{\"648\":1,\"649\":1},\"1\":{\"676\":1,\"704\":1,\"710\":1}}],[\"黑神话\",{\"1\":{\"72\":6}}],[\"杀死容器\",{\"1\":{\"1020\":1,\"1226\":1}}],[\"杀死该进程\",{\"1\":{\"644\":1}}],[\"杀死引起死锁的进程\",{\"1\":{\"644\":1}}],[\"释放内存空间\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"释放资源\",{\"1\":{\"800\":1}}],[\"释放它们持有的资源\",{\"1\":{\"644\":1}}],[\"释放锁失败\",{\"1\":{\"1481\":1}}],[\"释放锁成功\",{\"1\":{\"1481\":1}}],[\"释放锁和判断锁是否被当前线程占用的操作\",{\"1\":{\"1390\":1}}],[\"释放锁\",{\"1\":{\"640\":1,\"641\":1,\"642\":1}}],[\"`max\",{\"1\":{\"1440\":2}}],[\"`fetch\",{\"1\":{\"1440\":2}}],[\"`docker\",{\"1\":{\"1019\":4,\"1225\":4}}],[\"`job=<job\",{\"1\":{\"950\":1}}],[\"`jedis\",{\"1\":{\"711\":1}}],[\"`number`\",{\"1\":{\"887\":1}}],[\"`name`\",{\"1\":{\"789\":1,\"887\":1,\"890\":1}}],[\"`idx\",{\"1\":{\"887\":1}}],[\"`id`\",{\"1\":{\"789\":2}}],[\"`appoint\",{\"1\":{\"887\":2}}],[\"`appointment`\",{\"1\":{\"887\":2}}],[\"`student\",{\"1\":{\"887\":2}}],[\"`status`\",{\"1\":{\"789\":1}}],[\"`book`\",{\"1\":{\"887\":6}}],[\"`book\",{\"1\":{\"887\":4}}],[\"`bitcount`\",{\"1\":{\"721\":1}}],[\"``元素内容必须由格式正确的字符数据或标记组成\",{\"1\":{\"863\":1}}],[\"```error\",{\"1\":{\"863\":1}}],[\"`user\",{\"1\":{\"789\":2}}],[\"`\",{\"1\":{\"711\":1}}],[\"`直接调用\",{\"1\":{\"711\":1}}],[\"`returnresource\",{\"1\":{\"711\":1}}],[\"`lock\",{\"1\":{\"640\":2}}],[\"`test\",{\"1\":{\"789\":1}}],[\"`table\",{\"1\":{\"788\":1,\"789\":2}}],[\"`t\",{\"1\":{\"640\":1}}],[\"幻读等名词\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"幻读是针对数据插入\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"幻读\",{\"1\":{\"638\":1,\"1145\":1,\"1328\":1}}],[\"隔离性\",{\"1\":{\"1144\":1,\"1327\":1}}],[\"隔离性和持久性\",{\"1\":{\"616\":1}}],[\"隔离强度逐渐增强\",{\"1\":{\"1144\":1,\"1327\":1}}],[\"隔离\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"隔离级别下\",{\"1\":{\"638\":1}}],[\"隐式锁定\",{\"1\":{\"633\":1}}],[\"显而易见\",{\"1\":{\"1158\":1,\"1338\":1}}],[\"显式指定参数的名字\",{\"1\":{\"842\":1}}],[\"显式锁定\",{\"1\":{\"633\":1}}],[\"显然表名多了引号\",{\"1\":{\"842\":1}}],[\"显示第一个存储的改动\",{\"1\":{\"979\":1}}],[\"显示做了哪些改动\",{\"1\":{\"979\":1}}],[\"显示viewresolver\",{\"1\":{\"882\":2}}],[\"显示识别的颜色名称\",{\"1\":{\"161\":1}}],[\"显示channel名称\",{\"1\":{\"161\":1}}],[\"显示比特流filter\",{\"1\":{\"161\":1}}],[\"显示所有编码器\",{\"1\":{\"161\":1}}],[\"显示所有编解码器\",{\"1\":{\"161\":1}}],[\"显示可用编解码器\",{\"1\":{\"161\":1}}],[\"显示可用的采样格式\",{\"1\":{\"161\":1}}],[\"显示可用的像素格式\",{\"1\":{\"161\":1}}],[\"显示可用的过滤器\",{\"1\":{\"161\":1}}],[\"显示可用的协议\",{\"1\":{\"161\":1}}],[\"显示可用的格式\",{\"1\":{\"161\":1}}],[\"显示可用的设备\",{\"1\":{\"161\":1}}],[\"显示可用的muxers\",{\"1\":{\"161\":1}}],[\"显示可用的demuxers\",{\"1\":{\"161\":1}}],[\"显示版本\",{\"1\":{\"161\":1}}],[\"显示后20行数据\",{\"1\":{\"111\":1}}],[\"显示行号\",{\"1\":{\"111\":1}}],[\"互斥条件\",{\"1\":{\"625\":1}}],[\"互不放手\",{\"1\":{\"625\":1}}],[\"死锁检测\",{\"1\":{\"644\":1}}],[\"死锁通常由以下四种情况同时出现时引起\",{\"1\":{\"625\":1}}],[\"死锁是在事务数据库中会发生的一种特殊现象\",{\"1\":{\"625\":1}}],[\"粒度\",{\"1\":{\"624\":1,\"630\":1}}],[\"粒度较小\",{\"1\":{\"624\":1}}],[\"粒度较大\",{\"1\":{\"624\":1}}],[\"虽然它的部署和配置可能有些复杂\",{\"1\":{\"1436\":1}}],[\"虽然redis分片集群可以提高性能和可扩展性\",{\"1\":{\"1426\":1}}],[\"虽然zookeeper能保证所有watch按顺序触发\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"虽然存在多个线程\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"虽然有了namespace技术可以实现资源隔离\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"虽然损失了一定的时效性\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"虽然\",{\"1\":{\"834\":1,\"1006\":1,\"1215\":1}}],[\"虽然页锁不是用户可以直接控制的锁类型\",{\"1\":{\"624\":1}}],[\"虽然不能保证全局唯一\",{\"1\":{\"436\":1}}],[\"持久化的工作并不实时\",{\"1\":{\"1420\":1}}],[\"持久化\",{\"1\":{\"1418\":1}}],[\"持久顺序\",{\"1\":{\"1195\":3,\"1368\":3}}],[\"持久\",{\"1\":{\"1195\":3,\"1368\":3}}],[\"持久性\",{\"1\":{\"1144\":1,\"1327\":1}}],[\"持续更新git命令集\",{\"1\":{\"977\":1}}],[\"持续轮训表里有没有需要发送验证码的邮箱地址\",{\"1\":{\"727\":1}}],[\"持续3\",{\"1\":{\"382\":1}}],[\"持有者指针偏移量\",{\"1\":{\"1481\":1}}],[\"持有者指针\",{\"1\":{\"1481\":1}}],[\"持有和等待条件\",{\"1\":{\"625\":1}}],[\"持有插入意向锁的事务可以继续执行插入操作\",{\"1\":{\"621\":1}}],[\"间隙锁通常在执行范围查询并加上共享或排他锁时自动应用\",{\"1\":{\"621\":1}}],[\"间隙锁主要用于防止其他事务在这个间隙中插入新的行\",{\"1\":{\"621\":1}}],[\"间隙锁是一种行锁\",{\"1\":{\"621\":1}}],[\"间隙锁和插入意向锁针对实现了多版本并发控制\",{\"1\":{\"621\":1}}],[\"间隙锁\",{\"0\":{\"621\":1},\"1\":{\"621\":1,\"638\":1}}],[\"临时顺序\",{\"1\":{\"1195\":1,\"1368\":1}}],[\"临时\",{\"1\":{\"1195\":1,\"1368\":1}}],[\"临时表并不是不可使用\",{\"1\":{\"604\":1}}],[\"临键锁结合了记录锁和间隙锁\",{\"1\":{\"619\":1}}],[\"临键锁\",{\"0\":{\"619\":1},\"1\":{\"619\":1}}],[\"行锁的粒度更小\",{\"1\":{\"634\":1}}],[\"行锁适用于高并发读写\",{\"1\":{\"630\":1}}],[\"行锁可能导致最多的锁冲突\",{\"1\":{\"630\":1}}],[\"行锁可能导致更多的锁冲突\",{\"1\":{\"627\":1}}],[\"行锁提供最高的并发性\",{\"1\":{\"630\":1}}],[\"行锁允许多个事务同时访问表中的不同行\",{\"1\":{\"627\":1}}],[\"行锁是锁定表中的单行或多行\",{\"1\":{\"627\":1}}],[\"行锁通常在执行涉及单个行的操作时自动应用\",{\"1\":{\"619\":1}}],[\"行锁\",{\"0\":{\"619\":1,\"626\":1,\"627\":1},\"1\":{\"619\":1,\"624\":1,\"630\":1,\"634\":1,\"638\":1}}],[\"行业内有句话\",{\"1\":{\"534\":1}}],[\"什么情况下需要自定义这些方法\",{\"1\":{\"1410\":1}}],[\"什么情况下可以获得\",{\"1\":{\"618\":1}}],[\"什么类负责\",{\"1\":{\"1392\":1}}],[\"什么时候使用该注解\",{\"1\":{\"751\":2}}],[\"什么是垃圾\",{\"1\":{\"1394\":1}}],[\"什么是类的生命周期\",{\"1\":{\"1392\":1}}],[\"什么是cap\",{\"1\":{\"1197\":1,\"1370\":1}}],[\"什么是控制反转\",{\"0\":{\"1170\":1,\"1347\":1},\"1\":{\"1169\":1,\"1346\":1}}],[\"什么是双亲委派模型\",{\"0\":{\"1106\":1,\"1297\":1},\"1\":{\"1106\":1,\"1297\":1}}],[\"什么是threadlocal\",{\"0\":{\"1060\":1,\"1258\":1}}],[\"什么是装箱拆箱\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"什么是缓存雪崩\",{\"0\":{\"1160\":1,\"1340\":1}}],[\"什么是缓存穿透\",{\"0\":{\"1159\":1,\"1339\":1}}],[\"什么是缓存预热\",{\"0\":{\"1008\":1,\"1217\":1}}],[\"什么是缓存\",{\"0\":{\"999\":1,\"1208\":1}}],[\"什么是netty\",{\"0\":{\"988\":1}}],[\"什么是http协议无状态协议\",{\"1\":{\"984\":1}}],[\"什么是mybatis的接口绑定\",{\"0\":{\"1137\":1,\"1322\":1}}],[\"什么是mybatis的一级\",{\"0\":{\"1135\":1,\"1320\":1}}],[\"什么是mybatis\",{\"0\":{\"1129\":1,\"1314\":1}}],[\"什么是mybatis之jdbc攻城狮\",{\"0\":{\"796\":1}}],[\"什么是maven项目规约\",{\"1\":{\"765\":1}}],[\"什么是依赖注入\",{\"0\":{\"1170\":1,\"1347\":1}}],[\"什么是依赖\",{\"1\":{\"762\":1}}],[\"什么是理想的项目构建\",{\"1\":{\"762\":1}}],[\"什么是项目构建\",{\"1\":{\"762\":1}}],[\"什么是计数器\",{\"1\":{\"657\":1}}],[\"什么是死锁\",{\"0\":{\"625\":1}}],[\"什么是回表\",{\"0\":{\"567\":1}}],[\"什么是聚簇索引和非聚簇索引\",{\"0\":{\"560\":1}}],[\"什么是\",{\"0\":{\"482\":1,\"984\":1,\"1014\":1,\"1016\":1,\"1094\":1,\"1168\":1,\"1194\":1,\"1220\":1,\"1222\":1,\"1287\":1,\"1345\":1,\"1367\":1},\"1\":{\"721\":1,\"1378\":1,\"1412\":1,\"1416\":1,\"1512\":1}}],[\"什么是完全二叉树\",{\"1\":{\"417\":1}}],[\"什么是zookeeper\",{\"0\":{\"168\":1}}],[\"排名\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"排在了操作\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"排除spring\",{\"1\":{\"773\":1}}],[\"排除依赖\",{\"0\":{\"773\":1}}],[\"排行榜\",{\"1\":{\"657\":1,\"720\":1,\"1156\":1,\"1336\":1}}],[\"排他锁只可以加一个\",{\"1\":{\"1150\":1,\"1333\":1}}],[\"排他锁会在事务结束时释放\",{\"1\":{\"641\":1}}],[\"排他锁\",{\"1\":{\"635\":1,\"1150\":1,\"1333\":1}}],[\"排它锁\",{\"0\":{\"618\":1}}],[\"排序过程可能会变得非常沉重\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"排序文档\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"排序的\",{\"1\":{\"720\":1}}],[\"排序的概念和分类\",{\"0\":{\"348\":1}}],[\"排序和分组操作的列\",{\"1\":{\"565\":1}}],[\"排序操作或模糊查询\",{\"1\":{\"562\":1}}],[\"排序就很简单了\",{\"1\":{\"412\":1}}],[\"排序\",{\"1\":{\"496\":1,\"670\":1,\"1027\":1,\"1080\":1,\"1231\":1,\"1275\":1},\"2\":{\"407\":1,\"408\":1,\"415\":1,\"416\":1,\"418\":1,\"419\":1,\"431\":1,\"432\":1}}],[\"排序算法的选择\",{\"1\":{\"403\":1}}],[\"共享对象池\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"共享\",{\"0\":{\"1190\":1,\"1365\":1},\"1\":{\"727\":1,\"1190\":2,\"1365\":2}}],[\"共享锁都相斥\",{\"1\":{\"1150\":1,\"1333\":1}}],[\"共享锁可以同时加上多个\",{\"1\":{\"1150\":1,\"1333\":1}}],[\"共享锁|排他锁\",{\"1\":{\"620\":1}}],[\"共享锁允许其他事务读取这些行\",{\"1\":{\"618\":1}}],[\"共享锁\",{\"0\":{\"618\":1},\"1\":{\"618\":1,\"635\":1,\"638\":1,\"1150\":1,\"1333\":1}}],[\"共同完成某项\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"共同关注的人\",{\"1\":{\"719\":2}}],[\"共同好友等是社交网站的基本功能\",{\"1\":{\"657\":1}}],[\"共有字\",{\"1\":{\"699\":1}}],[\"共10个\",{\"1\":{\"475\":1}}],[\"汇总xmind\",{\"1\":{\"615\":1}}],[\"锁机制作为并发编程的基础\",{\"1\":{\"1476\":1}}],[\"锁服务可以分为两类\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"锁的粒度\",{\"1\":{\"1476\":1}}],[\"锁的问题变得容易\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"锁的问题归更到底就是资源竞争导致的\",{\"1\":{\"615\":1}}],[\"锁的标识\",{\"1\":{\"640\":1}}],[\"锁的兼容性\",{\"1\":{\"638\":1}}],[\"锁竞争\",{\"1\":{\"637\":1}}],[\"锁升级\",{\"1\":{\"638\":1,\"644\":1}}],[\"锁升级是数据库系统自动进行的\",{\"1\":{\"637\":1}}],[\"锁升级的缺点包括\",{\"1\":{\"637\":1}}],[\"锁升级的优点包括\",{\"1\":{\"637\":1}}],[\"锁升级可以减少死锁的可能性\",{\"1\":{\"637\":1}}],[\"锁升级通常发生在一下情况\",{\"1\":{\"637\":1}}],[\"锁升级指细粒度锁升级为粗粒度锁\",{\"1\":{\"637\":1}}],[\"锁定对象\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"锁定的页数\",{\"1\":{\"637\":1}}],[\"锁定的行数\",{\"1\":{\"637\":1}}],[\"锁定多个表的示例\",{\"1\":{\"635\":1}}],[\"锁定\",{\"1\":{\"633\":1}}],[\"锁定减少\",{\"1\":{\"581\":1}}],[\"锁粒度\",{\"1\":{\"627\":1,\"628\":1,\"629\":1}}],[\"锁\",{\"1\":{\"618\":1},\"2\":{\"728\":1,\"729\":1}}],[\"锁和\",{\"1\":{\"618\":1}}],[\"锁是保证数据库事务四个特性\",{\"1\":{\"616\":1}}],[\"游标通常要优于其他逐行处理方法\",{\"0\":{\"609\":1}}],[\"游标并不是不可使用\",{\"0\":{\"609\":1}}],[\"游戏使用的是虚幻引擎\",{\"1\":{\"72\":1}}],[\"游戏\",{\"0\":{\"70\":1},\"2\":{\"71\":1}}],[\"替代\",{\"1\":{\"1072\":1,\"1267\":1}}],[\"替代方法\",{\"1\":{\"605\":1}}],[\"替换为你的\",{\"1\":{\"1514\":1}}],[\"替换旧aof\",{\"1\":{\"1420\":1}}],[\"替换等\",{\"1\":{\"1402\":1}}],[\"替换成变量的值\",{\"1\":{\"1131\":1,\"1316\":1}}],[\"替换成了\",{\"1\":{\"1131\":1,\"1316\":1}}],[\"替换成\",{\"1\":{\"1131\":1,\"1316\":1}}],[\"替换的元素个数\",{\"1\":{\"337\":1}}],[\"替换元素\",{\"1\":{\"337\":2}}],[\"替换文件制定字符\",{\"1\":{\"111\":1}}],[\"视线\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"视图\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"视具体情况而定\",{\"1\":{\"600\":1}}],[\"视频地址\",{\"1\":{\"952\":1}}],[\"视频网站视频的播放数等\",{\"1\":{\"657\":1}}],[\"视频参考\",{\"1\":{\"296\":1}}],[\"视频参数\",{\"1\":{\"144\":1}}],[\"视频有了不错播放量\",{\"1\":{\"264\":1}}],[\"视频抽取一些帧作为图片时很常用的操作\",{\"1\":{\"158\":1}}],[\"视频添加logo\",{\"0\":{\"156\":1}}],[\"视频编码格式转换\",{\"0\":{\"152\":1}}],[\"视频编解码库libavcodec\",{\"1\":{\"139\":1}}],[\"视频格式转换\",{\"0\":{\"148\":1}}],[\"视频剪切\",{\"0\":{\"145\":1}}],[\"视频教程\",{\"0\":{\"923\":1},\"1\":{\"129\":1}}],[\"视频\",{\"0\":{\"256\":1,\"922\":1},\"1\":{\"72\":1,\"139\":1,\"289\":1,\"934\":1,\"941\":1,\"944\":1,\"1502\":1}}],[\"型字段上使用索引会不会用到的问题\",{\"1\":{\"599\":1}}],[\"算是入门水平吧\",{\"1\":{\"1400\":1}}],[\"算术运算或其他表达式运算\",{\"0\":{\"596\":1}}],[\"算法接近\",{\"1\":{\"1398\":1}}],[\"算法已忽略其最关键的优点\",{\"1\":{\"1398\":1}}],[\"算法存在活锁的问题\",{\"1\":{\"1203\":1,\"1376\":1}}],[\"算法存储空间的需求等\",{\"0\":{\"333\":1}}],[\"算法在数据同步阶段\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"算法与设计模式等基础内容的运用\",{\"1\":{\"1380\":1}}],[\"算法与\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"算法与数据结构\",{\"0\":{\"74\":1}}],[\"算法实现的\",{\"1\":{\"1073\":1,\"1268\":1}}],[\"算法实现可一个\",{\"1\":{\"722\":1}}],[\"算法的思想\",{\"1\":{\"1398\":1}}],[\"算法的发起者可以是一个或多个\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"算法的联系与区别\",{\"0\":{\"1200\":1,\"1373\":1}}],[\"算法的升级版\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"算法的步骤如下\",{\"1\":{\"411\":1}}],[\"算法来计算键的哈希值\",{\"1\":{\"689\":1}}],[\"算法生成的\",{\"1\":{\"440\":1}}],[\"算法介绍\",{\"0\":{\"440\":1}}],[\"算法过程\",{\"0\":{\"404\":1}}],[\"算法效率的度量\",{\"0\":{\"333\":1}}],[\"算法设计的要求\",{\"0\":{\"333\":1}}],[\"算法\",{\"0\":{\"300\":1,\"333\":1},\"1\":{\"117\":1,\"1398\":1},\"2\":{\"301\":1,\"302\":1,\"309\":1,\"310\":1}}],[\"已有功能来实现的\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"已成功获取\",{\"1\":{\"1062\":2,\"1260\":2}}],[\"已不再建议使用\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"已解决\",{\"0\":{\"958\":1}}],[\"已提供依赖范围\",{\"1\":{\"769\":1}}],[\"已经存在\",{\"1\":{\"1418\":1}}],[\"已经预先存在\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"已经过期\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"已经正常退出了\",{\"1\":{\"755\":1}}],[\"已经有了一定了解\",{\"1\":{\"671\":1}}],[\"已经没人\",{\"1\":{\"170\":1}}],[\"已知该人没有电话\",{\"1\":{\"589\":1}}],[\"未授权\",{\"1\":{\"1494\":1}}],[\"未来会对并发编程有很大帮助\",{\"1\":{\"1476\":1}}],[\"未来缓存服务恢复后\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"未知类型\",{\"1\":{\"1424\":1}}],[\"未知电话号码\",{\"1\":{\"589\":1}}],[\"未考虑扩展性\",{\"1\":{\"1408\":1}}],[\"未正确配置事务属性\",{\"1\":{\"1408\":1}}],[\"未正确配置\",{\"1\":{\"1408\":1}}],[\"未提交意味着这些数据可能会回滚\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"未设定时则使用与输入流相同的编解码器\",{\"1\":{\"144\":2}}],[\"敏捷版本迭代\",{\"1\":{\"588\":1}}],[\"叄月\",{\"1\":{\"584\":1}}],[\"辛丑年\",{\"1\":{\"584\":1}}],[\"且更新不需要很强一致性的用乐观锁\",{\"1\":{\"1476\":1}}],[\"且知道解决方法\",{\"1\":{\"1476\":1}}],[\"且\",{\"1\":{\"1116\":1,\"1183\":1,\"1304\":1,\"1358\":1}}],[\"且次数需一样\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"且要实时更新阅读量\",{\"1\":{\"1000\":1,\"1209\":1}}],[\"且简单的解决方案\",{\"1\":{\"727\":1}}],[\"且不允许重复的成员\",{\"1\":{\"670\":1}}],[\"且持续增长\",{\"1\":{\"583\":1}}],[\"且对性能要求较高\",{\"1\":{\"562\":1}}],[\"且对每个桶的排序方式也是快排\",{\"1\":{\"401\":1}}],[\"争抢并减少锁表的几率\",{\"1\":{\"582\":1}}],[\"往后查找空位置\",{\"1\":{\"1386\":1}}],[\"往往能解决单库存储量及性能瓶颈\",{\"1\":{\"581\":1}}],[\"往下10s\",{\"1\":{\"158\":1}}],[\"稳定性和灵活性的方法\",{\"1\":{\"988\":1}}],[\"稳定性体现在io冲突减少\",{\"1\":{\"581\":1}}],[\"稳定的布隆过滤器\",{\"1\":{\"396\":1}}],[\"监听节点数目是否是我们要求的数目\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"监听就会自动触发返回结果\",{\"1\":{\"991\":1}}],[\"监听器等\",{\"1\":{\"883\":1}}],[\"监听端口\",{\"1\":{\"123\":1}}],[\"监视器提供了一组可以直接作为\",{\"1\":{\"1188\":1,\"1363\":1}}],[\"监视器\",{\"1\":{\"685\":1}}],[\"监控和优化查询性能\",{\"1\":{\"1460\":1}}],[\"监控日志\",{\"1\":{\"1416\":1}}],[\"监控系统的负载\",{\"1\":{\"1408\":1}}],[\"监控死锁\",{\"1\":{\"644\":1}}],[\"监控\",{\"1\":{\"580\":1,\"1416\":1}}],[\"某些指定的内容​​\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"某些字段不希望被搜索到\",{\"1\":{\"485\":1}}],[\"某业务实体中的各个数据项的访问频次是不一样的\",{\"1\":{\"579\":1}}],[\"命名服务\",{\"1\":{\"1194\":1,\"1201\":1,\"1367\":1,\"1374\":1}}],[\"命名空间+\",{\"1\":{\"810\":2}}],[\"命名空间\",{\"1\":{\"807\":1,\"818\":1,\"826\":1}}],[\"命中率更高\",{\"1\":{\"579\":1}}],[\"命令传播\",{\"1\":{\"1422\":1}}],[\"命令建议在本地安装做一个实操\",{\"1\":{\"1019\":1,\"1225\":1}}],[\"命令将按照我们指定的依赖顺序启动和运行服务\",{\"1\":{\"1017\":1,\"1223\":1}}],[\"命令将字符串解析成整型\",{\"1\":{\"666\":1}}],[\"命令后\",{\"1\":{\"979\":1,\"1420\":2}}],[\"命令进行恢复\",{\"1\":{\"979\":1}}],[\"命令恢复之前缓存的工作目录\",{\"1\":{\"979\":1}}],[\"命令恢复\",{\"1\":{\"979\":1}}],[\"命令之后会在stash列表中生成一个对应的信息\",{\"1\":{\"979\":1}}],[\"命令行构建java项目\",{\"0\":{\"766\":1}}],[\"命令行操使用\",{\"0\":{\"143\":1}}],[\"命令可以指定元素获取区间\",{\"1\":{\"718\":1}}],[\"命令可以帮助维持索引的健康状况\",{\"1\":{\"574\":1}}],[\"命令不区分大小写\",{\"1\":{\"715\":1}}],[\"命令又懒得安装\",{\"1\":{\"677\":1}}],[\"命令及描述\",{\"1\":{\"668\":1,\"669\":1,\"670\":1}}],[\"命令用来查看key对应的值剩余存活时间\",{\"1\":{\"666\":1}}],[\"命令用于在列表的元素前或者后插入元素\",{\"1\":{\"667\":1}}],[\"命令用于删除文件或目录\",{\"1\":{\"108\":1}}],[\"命令用于移动文件或目录\",{\"1\":{\"108\":1}}],[\"命令用于复制文件或目录\",{\"1\":{\"108\":1}}],[\"命令用于创建目录\",{\"1\":{\"108\":1}}],[\"命令用于显示工作目录\",{\"1\":{\"108\":1}}],[\"命令用于显示指定工作目录下之内容\",{\"1\":{\"108\":1}}],[\"命令去除超时时间\",{\"1\":{\"666\":1}}],[\"命令返回key对应的存储类型\",{\"1\":{\"666\":1}}],[\"命令返回由值组成的数组\",{\"1\":{\"666\":1}}],[\"命令来实现计数器功能\",{\"1\":{\"657\":1}}],[\"命令来重建表的索引\",{\"1\":{\"574\":1}}],[\"命令来重新组织表的数据\",{\"1\":{\"574\":1}}],[\"命令的问题\",{\"1\":{\"107\":1}}],[\"命令了\",{\"1\":{\"101\":1}}],[\"命令\",{\"0\":{\"101\":1},\"1\":{\"107\":2,\"666\":1,\"721\":1,\"727\":1,\"979\":3,\"1422\":3}}],[\"水平分表是在同一个数据库内\",{\"1\":{\"582\":1}}],[\"水平分表\",{\"0\":{\"582\":1},\"1\":{\"583\":1}}],[\"水平分表四种方式\",{\"1\":{\"578\":1}}],[\"水平分库带来的提升是\",{\"1\":{\"581\":1}}],[\"水平分库是对数据行的拆分\",{\"1\":{\"581\":1}}],[\"水平分库是把同一个表的数据按一定规则拆到不同的数据库中\",{\"1\":{\"581\":1}}],[\"水平分库\",{\"0\":{\"581\":1},\"1\":{\"578\":1,\"583\":1}}],[\"水平拆分\",{\"1\":{\"572\":1}}],[\"垂直切分带来的性能提升主要集中在热门数据的操作效率上\",{\"1\":{\"579\":1}}],[\"垂直分表方案\",{\"1\":{\"583\":1}}],[\"垂直分表定义\",{\"1\":{\"579\":1}}],[\"垂直分表\",{\"0\":{\"579\":1},\"1\":{\"578\":1,\"583\":1}}],[\"垂直分库是把不同表拆到不同数据库中\",{\"1\":{\"581\":1}}],[\"垂直分库是指按照业务将表进行分类\",{\"1\":{\"580\":1}}],[\"垂直分库通过将表按业务分类\",{\"1\":{\"580\":1}}],[\"垂直分库一定程度的提升io\",{\"1\":{\"580\":1}}],[\"垂直分库\",{\"0\":{\"580\":1},\"1\":{\"578\":1,\"583\":1}}],[\"垂直拆分\",{\"1\":{\"572\":1}}],[\"把事件通知给各个关心的人\",{\"1\":{\"1434\":1}}],[\"把事件发送给各个订阅者\",{\"1\":{\"1434\":1}}],[\"把事务管理交由\",{\"1\":{\"881\":1}}],[\"把日志从各个系统搬运到我们的数据湖中\",{\"1\":{\"1434\":1}}],[\"把订单放在柜台上\",{\"1\":{\"1432\":1}}],[\"把结果映射为\",{\"1\":{\"1416\":1}}],[\"把要调用的映射语句的参数传入并解析出\",{\"1\":{\"1416\":1}}],[\"把请求转发到各个组件\",{\"1\":{\"1414\":1}}],[\"把类标记为spring的组件\",{\"1\":{\"1402\":1}}],[\"把类型当作是参数一样传递\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"把相关的符号引用转换为直接引用\",{\"1\":{\"1392\":1}}],[\"把这些符号转成直接引用\",{\"1\":{\"1392\":1}}],[\"把上图中间的ioc容器拿掉\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"把系统中的所有\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"把所有的消息都变成一个批量的文件\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"把所有修改数据的方法都加上synchronized\",{\"1\":{\"1046\":1,\"1247\":1}}],[\"把数组的长度设为2的幂次方\",{\"1\":{\"1080\":1,\"1275\":1}}],[\"把数据送到各个需要的地方\",{\"1\":{\"1434\":1}}],[\"把数据流传输给各个处理节点\",{\"1\":{\"1434\":1}}],[\"把数据进行隔离\",{\"1\":{\"1060\":1,\"1258\":1}}],[\"把数据分散在不同的数据库中\",{\"1\":{\"578\":1}}],[\"把读写速度\",{\"1\":{\"999\":1,\"1208\":1}}],[\"把卸载命令全部重新执行一遍\",{\"1\":{\"916\":1}}],[\"把\",{\"1\":{\"863\":1}}],[\"把每个字节数组的\",{\"1\":{\"721\":1}}],[\"把同一个表的数据按一定规则拆到多个表中\",{\"1\":{\"582\":1}}],[\"把text\",{\"1\":{\"579\":1}}],[\"把不常用的字段单独放在一张表\",{\"1\":{\"579\":1}}],[\"把小耀也分配给小西\",{\"1\":{\"170\":1}}],[\"访问端口\",{\"1\":{\"1507\":1}}],[\"访问静态常量\",{\"1\":{\"1392\":1}}],[\"访问静态变量\",{\"1\":{\"1392\":1}}],[\"访问某个类的静态常量\",{\"1\":{\"1392\":1}}],[\"访问该类的静态变量\",{\"1\":{\"1392\":1}}],[\"访问类的静态变量和方法等\",{\"1\":{\"1392\":1}}],[\"访问的\",{\"1\":{\"1188\":1,\"1363\":1}}],[\"访问sourceb时需要登录了\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"访问sourcea则不用登录\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"访问sourcea\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"访问权限不能比父类中被重写的方法的访问权限更低\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"访问修饰符和返回值类型可以相同也可以不同\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"访问测试\",{\"0\":{\"738\":1}}],[\"访问其他节点的\",{\"1\":{\"691\":1}}],[\"访问性能也变慢了\",{\"1\":{\"578\":1}}],[\"访问下面地址\",{\"1\":{\"460\":1}}],[\"明白了\",{\"1\":{\"1454\":1,\"1466\":1}}],[\"明显\",{\"1\":{\"574\":1}}],[\"明确标注事务方法的编程风格\",{\"1\":{\"893\":1}}],[\"明确责任归属\",{\"1\":{\"218\":1}}],[\"明确请求头有哪些\",{\"0\":{\"211\":1}}],[\"明确\",{\"0\":{\"204\":1}}],[\"评分\",{\"1\":{\"1460\":1}}],[\"评估索引的必要性\",{\"1\":{\"573\":1}}],[\"评论区见\",{\"1\":{\"983\":1,\"987\":1,\"998\":1,\"1013\":1,\"1024\":1,\"1040\":1,\"1054\":1,\"1068\":1,\"1083\":1,\"1098\":1,\"1112\":1,\"1128\":1,\"1141\":1,\"1154\":1,\"1167\":1,\"1180\":1,\"1193\":1}}],[\"评论区补充\",{\"1\":{\"588\":1}}],[\"评论\",{\"1\":{\"18\":1,\"21\":1}}],[\"频繁攻击我们的应用\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"频繁的更新操作可能导致索引的页变得碎片化\",{\"1\":{\"571\":1}}],[\"频繁更新的列可能不适合建立索引\",{\"1\":{\"565\":1}}],[\"尤其是redis作为分布式锁的选择\",{\"1\":{\"1428\":1}}],[\"尤其是在一些对消息可靠性要求较高的场景下\",{\"1\":{\"1452\":1}}],[\"尤其是在表中只有少数行会被访问时\",{\"1\":{\"627\":1}}],[\"尤其是在大型表上进行部分数据的读写操作\",{\"1\":{\"624\":1,\"629\":1}}],[\"尤其是在必须引用几个表才能获得所需的数据时\",{\"0\":{\"609\":1}}],[\"尤其是在数据插入\",{\"1\":{\"573\":1}}],[\"尤其是在高并发的写操作环境中\",{\"1\":{\"571\":1}}],[\"尤其是阅读经典书籍\",{\"1\":{\"56\":1}}],[\"回答不上来也没关系\",{\"1\":{\"1480\":1}}],[\"回头看上面的例子\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"回寝就能睡觉\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"回收率与吞吐量预测\",{\"1\":{\"1398\":1}}],[\"回收垃圾\",{\"1\":{\"1398\":1}}],[\"回收垃圾对象\",{\"1\":{\"1394\":1}}],[\"回收部分垃圾对象\",{\"1\":{\"1394\":1}}],[\"回收\",{\"1\":{\"711\":1}}],[\"回滚日志\",{\"1\":{\"1142\":1,\"1325\":1}}],[\"回滚事务\",{\"1\":{\"644\":1}}],[\"回滚\",{\"1\":{\"644\":1}}],[\"回表定义\",{\"1\":{\"567\":1}}],[\"回忆完以上\",{\"1\":{\"382\":1}}],[\"降低程序的可读性和维护性\",{\"1\":{\"1412\":1}}],[\"降低数据库压力\",{\"1\":{\"1408\":1}}],[\"降低高可用性\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"降低并发性\",{\"1\":{\"637\":1}}],[\"降低单机硬件资源的瓶颈\",{\"1\":{\"580\":1}}],[\"降低了维护开销\",{\"1\":{\"566\":1}}],[\"降低系统uptime\",{\"1\":{\"123\":1}}],[\"降低系统的负载\",{\"1\":{\"123\":1}}],[\"化器可能认为全表扫描比使用索引更快\",{\"1\":{\"564\":1}}],[\"走了索引也需要全表扫描\",{\"1\":{\"564\":1}}],[\"走进作者\",{\"0\":{\"251\":1}}],[\"慢查询日志\",{\"1\":{\"1142\":2,\"1325\":2}}],[\"慢查询\",{\"1\":{\"685\":1}}],[\"慢查询优化方案\",{\"0\":{\"588\":1},\"1\":{\"591\":1}}],[\"慢sql\",{\"2\":{\"613\":1}}],[\"慢sql优化23式\",{\"1\":{\"588\":1}}],[\"慢\",{\"1\":{\"564\":1,\"999\":1,\"1208\":1}}],[\"列表中的信息是会继续保留的\",{\"1\":{\"979\":1}}],[\"列表的最大长度是\",{\"1\":{\"718\":1}}],[\"列表和\",{\"1\":{\"696\":1}}],[\"列表\",{\"0\":{\"667\":1},\"1\":{\"664\":1,\"667\":1,\"682\":1,\"699\":1,\"1113\":1,\"1301\":1,\"1414\":1}}],[\"列没有\",{\"1\":{\"589\":1}}],[\"列分别创建了位图索引\",{\"1\":{\"568\":1}}],[\"列的顺序非常重要\",{\"1\":{\"561\":1}}],[\"列出当前目录下的文件和目录\",{\"1\":{\"108\":1}}],[\"外包装\",{\"1\":{\"1446\":1}}],[\"外面加上单引号\",{\"1\":{\"1131\":1,\"1316\":1}}],[\"外部的mapper\",{\"1\":{\"814\":1}}],[\"外键\",{\"1\":{\"623\":1}}],[\"外键锁这个术语并不是用来描述一种特定的锁类型\",{\"1\":{\"623\":1}}],[\"外键锁并不是一个标准的锁类型\",{\"1\":{\"623\":1}}],[\"外键锁顾名思义就是针对外键的\",{\"1\":{\"623\":1}}],[\"外键锁\",{\"0\":{\"623\":1}}],[\"外键引用\",{\"1\":{\"559\":1}}],[\"外链\",{\"0\":{\"548\":1}}],[\"联系\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"联系javapub\",{\"1\":{\"1050\":1,\"1064\":1}}],[\"联系站长\",{\"0\":{\"252\":1},\"1\":{\"3\":1,\"255\":1},\"2\":{\"254\":1}}],[\"联合索引指多个字段上创建的索引\",{\"1\":{\"558\":1}}],[\"联合索引\",{\"1\":{\"558\":1}}],[\"普通二维码\",{\"1\":{\"939\":1}}],[\"普通的statement\",{\"1\":{\"826\":1}}],[\"普通的select语句是快照读\",{\"1\":{\"638\":1}}],[\"普通索引是\",{\"1\":{\"558\":1}}],[\"普通索引\",{\"1\":{\"558\":1,\"1146\":1,\"1329\":1}}],[\"普通人如何快速搭建本地大语言模型\",{\"1\":{\"289\":1}}],[\"普通人的视频也才只有\",{\"1\":{\"264\":1}}],[\"引起数据库压力过大甚至宕机\",{\"1\":{\"1160\":1,\"1340\":1}}],[\"引言\",{\"1\":{\"755\":1}}],[\"引用计数\",{\"1\":{\"698\":2}}],[\"引擎如何构建一个新的镜像\",{\"1\":{\"1512\":1}}],[\"引擎对查询的优化\",{\"1\":{\"591\":1}}],[\"引擎\",{\"1\":{\"558\":2}}],[\"引入泛型主要想实现一个通用的\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"引入分布式锁\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"引入本地缓存也会有相应的问题\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"引入二维码依赖\",{\"1\":{\"937\":1}}],[\"引入mapper\",{\"1\":{\"835\":1}}],[\"引入mysql依赖包\",{\"0\":{\"798\":1}}],[\"引入依赖\",{\"0\":{\"750\":1,\"805\":1,\"937\":1}}],[\"引入\",{\"1\":{\"711\":1,\"1174\":1,\"1189\":1,\"1351\":1,\"1364\":1}}],[\"引入的类型\",{\"1\":{\"510\":1}}],[\"引入接口版本管理\",{\"0\":{\"209\":1}}],[\"聚合\",{\"0\":{\"779\":1}}],[\"聚合检索\",{\"1\":{\"496\":1}}],[\"聚簇索引的叶子节点直接存储了实际的数据行\",{\"1\":{\"560\":1}}],[\"聚簇索引是将表的数据按照索引顺序存储在磁盘上\",{\"1\":{\"560\":1}}],[\"聚簇索引\",{\"1\":{\"558\":1}}],[\"簇\",{\"1\":{\"558\":1}}],[\"擅长做对等比较\",{\"1\":{\"558\":1}}],[\"擅长范围查询\",{\"1\":{\"558\":1}}],[\"道数据库锁面试题\",{\"1\":{\"615\":1}}],[\"道\",{\"1\":{\"556\":1}}],[\"闹着玩\",{\"1\":{\"551\":1}}],[\"致力于让每一位工程师拿到自己心仪的offer\",{\"1\":{\"1380\":1,\"1382\":1,\"1384\":1,\"1386\":1,\"1388\":1,\"1390\":1,\"1392\":1,\"1394\":1,\"1396\":1,\"1398\":1,\"1400\":1,\"1402\":1,\"1404\":1,\"1406\":1,\"1408\":1,\"1410\":1,\"1412\":1,\"1414\":1,\"1416\":1,\"1418\":1,\"1420\":1,\"1422\":1,\"1424\":1,\"1426\":1,\"1428\":1,\"1430\":1,\"1432\":1,\"1434\":1,\"1436\":1,\"1438\":1,\"1440\":1,\"1446\":1,\"1448\":1,\"1450\":1,\"1452\":1,\"1454\":1,\"1456\":1,\"1458\":1,\"1460\":1,\"1462\":1,\"1464\":1,\"1466\":1,\"1468\":1,\"1470\":1,\"1474\":1,\"1476\":1,\"1478\":1,\"1481\":1}}],[\"致力于大白话说清楚\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"致力于最实用教程\",{\"1\":{\"167\":1,\"381\":1,\"400\":1,\"409\":1,\"417\":1,\"430\":1,\"650\":1,\"676\":1,\"711\":1,\"761\":1,\"795\":1}}],[\"致敬万u户\",{\"1\":{\"551\":1}}],[\"玩法很多\",{\"1\":{\"551\":1}}],[\"玩法很丰富\",{\"1\":{\"550\":1}}],[\"挂\",{\"0\":{\"551\":1}}],[\"随时都可以问我\",{\"1\":{\"1454\":1,\"1466\":1}}],[\"随时问我\",{\"1\":{\"1444\":1}}],[\"随时问我哦\",{\"1\":{\"1430\":1}}],[\"随时告诉我哦\",{\"1\":{\"1470\":1}}],[\"随时告诉我\",{\"1\":{\"1432\":1,\"1460\":1}}],[\"随便写\",{\"1\":{\"807\":2,\"818\":2,\"826\":5,\"839\":1}}],[\"随机数\",{\"1\":{\"692\":1}}],[\"随着\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"随着字典操作的不断执行\",{\"1\":{\"688\":1}}],[\"随着操作的不断执行\",{\"1\":{\"688\":1}}],[\"随着公司业务快速发展\",{\"1\":{\"578\":1}}],[\"随着功能开发的日趋完善\",{\"1\":{\"209\":1}}],[\"随意自定义\",{\"1\":{\"550\":1}}],[\"买卖｜钱包｜我的\",{\"0\":{\"550\":1}}],[\"买完建议马上续费一次也是99元\",{\"1\":{\"238\":1}}],[\"键比较使用==而非equals\",{\"1\":{\"1406\":1}}],[\"键有序\",{\"1\":{\"1406\":1}}],[\"键是弱引用\",{\"1\":{\"1380\":1}}],[\"键是枚举类型\",{\"1\":{\"1380\":1}}],[\"键是质因数\",{\"1\":{\"306\":1}}],[\"键值\",{\"0\":{\"1133\":1,\"1318\":1}}],[\"键值读写依然是单线程\",{\"1\":{\"727\":1}}],[\"键值对已经过期\",{\"1\":{\"1418\":1}}],[\"键值对\",{\"1\":{\"668\":1}}],[\"键对象\",{\"1\":{\"698\":1}}],[\"键\",{\"1\":{\"687\":1}}],[\"键盘排列是完全可定制的\",{\"1\":{\"549\":1}}],[\"累加被领取的代币总和\",{\"1\":{\"541\":1}}],[\"领导者状态\",{\"1\":{\"1196\":1,\"1369\":1}}],[\"领取\",{\"1\":{\"949\":1}}],[\"领取代币的函数\",{\"1\":{\"541\":1}}],[\"领域的绝对霸主\",{\"1\":{\"899\":1}}],[\"领域\",{\"1\":{\"249\":1}}],[\"满足条件\",{\"1\":{\"539\":1}}],[\"部署上线\",{\"1\":{\"1502\":2}}],[\"部署在不同服务器上\",{\"1\":{\"1408\":1}}],[\"部署\",{\"0\":{\"976\":1},\"1\":{\"765\":1,\"1511\":1}}],[\"部署等任务\",{\"1\":{\"1520\":1}}],[\"部署等等\",{\"1\":{\"774\":1}}],[\"部署等几乎所有构建步骤\",{\"1\":{\"774\":1}}],[\"部署等\",{\"1\":{\"761\":1}}],[\"部署合约\",{\"1\":{\"539\":1}}],[\"部分是比较考验工程师基本功的\",{\"1\":{\"1382\":1}}],[\"部分由\",{\"1\":{\"864\":1}}],[\"部分中的所有内容都会被解析器忽略\",{\"1\":{\"864\":1}}],[\"部分可用`\",{\"1\":{\"581\":1}}],[\"部分数据项可能是占用存储空间比较大的blob或是text\",{\"1\":{\"579\":1}}],[\"部分资源在百度网盘\",{\"1\":{\"247\":1}}],[\"居多\",{\"1\":{\"537\":1}}],[\"奖励机制\",{\"1\":{\"536\":1}}],[\"签到\",{\"1\":{\"536\":1}}],[\"智能合约\",{\"1\":{\"534\":1},\"2\":{\"532\":1,\"533\":1,\"542\":1,\"543\":1}}],[\"智能聊天\",{\"1\":{\"73\":1}}],[\"四个特性\",{\"1\":{\"1144\":1,\"1327\":1}}],[\"四个属性之外\",{\"1\":{\"698\":1}}],[\"四次挥手\",{\"1\":{\"1091\":1,\"1284\":1}}],[\"四\",{\"0\":{\"513\":1}}],[\"面向切面编程\",{\"1\":{\"1408\":1,\"1474\":2}}],[\"面向无连接\",{\"1\":{\"1092\":1,\"1285\":1}}],[\"面向连接\",{\"1\":{\"1092\":1,\"1285\":1}}],[\"面向对象的思想\",{\"1\":{\"856\":1}}],[\"面\",{\"1\":{\"507\":1}}],[\"面试过后导致自己自信心受挫\",{\"1\":{\"1378\":1}}],[\"面试1v1\",{\"0\":{\"1483\":1},\"1\":{\"1378\":17,\"1380\":1,\"1382\":1,\"1384\":1,\"1386\":1,\"1388\":1,\"1390\":1,\"1392\":1,\"1394\":1,\"1396\":1,\"1398\":1,\"1400\":1,\"1402\":1,\"1404\":1,\"1406\":1,\"1408\":1,\"1410\":1,\"1412\":1,\"1414\":1,\"1416\":1,\"1418\":1,\"1420\":1,\"1422\":1,\"1424\":1,\"1426\":1,\"1428\":1,\"1430\":1,\"1432\":1,\"1434\":1,\"1436\":1,\"1438\":1,\"1440\":1,\"1446\":1,\"1448\":1,\"1450\":1,\"1452\":1,\"1454\":1,\"1456\":1,\"1458\":1,\"1460\":1,\"1462\":1,\"1464\":1,\"1466\":1,\"1468\":1,\"1470\":1,\"1474\":1,\"1476\":1,\"1478\":1,\"1481\":1},\"2\":{\"1379\":1,\"1381\":1,\"1383\":1,\"1385\":1,\"1387\":1,\"1389\":1,\"1391\":1,\"1393\":1,\"1395\":1,\"1397\":1,\"1399\":1,\"1401\":1,\"1403\":1,\"1405\":1,\"1407\":1,\"1409\":1,\"1411\":1,\"1413\":1,\"1415\":1,\"1417\":1,\"1419\":1,\"1421\":1,\"1423\":1,\"1425\":1,\"1427\":1,\"1429\":1,\"1431\":1,\"1433\":1,\"1435\":1,\"1437\":1,\"1439\":1,\"1441\":1,\"1443\":1,\"1445\":1,\"1447\":1,\"1449\":1,\"1451\":1,\"1453\":1,\"1455\":1,\"1457\":1,\"1459\":1,\"1461\":1,\"1463\":1,\"1465\":1,\"1467\":1,\"1469\":1,\"1471\":1,\"1473\":1,\"1475\":1,\"1477\":1,\"1479\":1,\"1482\":1}}],[\"面试必读专题\",{\"1\":{\"232\":1}}],[\"面试题\",{\"0\":{\"843\":1,\"983\":1,\"987\":1,\"1013\":1,\"1083\":1,\"1112\":1,\"1128\":1,\"1180\":1,\"1193\":1},\"1\":{\"118\":1,\"983\":2,\"987\":2,\"998\":2,\"1013\":2,\"1024\":1,\"1083\":2,\"1098\":1,\"1112\":2,\"1128\":2,\"1154\":2,\"1167\":1,\"1180\":2,\"1193\":2},\"2\":{\"986\":1,\"995\":1,\"1012\":1,\"1023\":1,\"1039\":1,\"1053\":1,\"1067\":1,\"1082\":1,\"1097\":1,\"1111\":1,\"1127\":1,\"1140\":1,\"1153\":1,\"1166\":1,\"1179\":1,\"1192\":1,\"1205\":1}}],[\"面试总是会遇到被问\",{\"1\":{\"107\":1}}],[\"面试官\",{\"0\":{\"107\":1},\"1\":{\"1408\":1,\"1428\":2,\"1430\":1,\"1440\":1,\"1442\":5,\"1444\":11,\"1448\":1,\"1454\":1,\"1460\":1}}],[\"面试专题合集\",{\"0\":{\"232\":1}}],[\"面试专题\",{\"0\":{\"1484\":1},\"1\":{\"53\":1}}],[\"嵌套类型将数组中的每个\",{\"1\":{\"504\":1}}],[\"嵌套类型就是为了解决这种问题的\",{\"1\":{\"504\":1}}],[\"嵌套类型可以看成是一个特殊的对象类型\",{\"1\":{\"504\":1}}],[\"嵌套类型\",{\"0\":{\"504\":1}}],[\"属性配置\",{\"1\":{\"1410\":1}}],[\"属性设置\",{\"1\":{\"1410\":1}}],[\"属性控制\",{\"1\":{\"1410\":1}}],[\"属性赋值\",{\"1\":{\"1410\":1}}],[\"属性填充完成后\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"属性分别有\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"属性的类型\",{\"1\":{\"860\":1}}],[\"属性的值设为\",{\"1\":{\"688\":1}}],[\"属性的值增一\",{\"1\":{\"688\":1}}],[\"属性中指定的属性\",{\"1\":{\"829\":1}}],[\"属性中指定的配置文件次之\",{\"1\":{\"829\":1}}],[\"属性指定的路径读取属性文件\",{\"1\":{\"829\":1}}],[\"属性读取类路径下属性文件或根据\",{\"1\":{\"829\":1}}],[\"属性也可以被传递到\",{\"1\":{\"829\":1}}],[\"属性将会由\",{\"1\":{\"829\":1}}],[\"属性文件中配置\",{\"1\":{\"829\":1}}],[\"属性说明\",{\"1\":{\"787\":1}}],[\"属性记录\",{\"1\":{\"698\":1}}],[\"属性是一个包含两个项的数组\",{\"1\":{\"687\":1}}],[\"属性\",{\"1\":{\"683\":1,\"698\":1,\"711\":1,\"1410\":2}}],[\"属性为\",{\"1\":{\"500\":1}}],[\"属于线程自身所有\",{\"1\":{\"1060\":1,\"1258\":1}}],[\"属于两种特定统计情况\",{\"1\":{\"1034\":2,\"1238\":2}}],[\"属于地理空间数据类型查询\",{\"1\":{\"558\":1}}],[\"属于\",{\"1\":{\"424\":1,\"1162\":1,\"1342\":1}}],[\"属于原地排序方式\",{\"1\":{\"401\":1}}],[\"底层数据结构\",{\"1\":{\"1404\":1}}],[\"底层定义了一个\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"底层封装了jdbc获取自增主键\",{\"1\":{\"1133\":1,\"1318\":1}}],[\"底层依然采用的是时间戳的形式存储\",{\"1\":{\"498\":1}}],[\"底数大小与节点的子节点数目有关\",{\"1\":{\"319\":1}}],[\"底数为2\",{\"1\":{\"319\":1}}],[\"格式化的日期字符串\",{\"1\":{\"498\":1}}],[\"格式的示例\",{\"1\":{\"208\":1}}],[\"商品信息\",{\"1\":{\"1000\":1,\"1209\":1}}],[\"商品信息的操作的高效率不会被商品描述的低效率所拖累\",{\"1\":{\"579\":1}}],[\"商品编号生成\",{\"1\":{\"716\":1}}],[\"商品按时间的上新排行榜等\",{\"1\":{\"657\":1}}],[\"商品名称等\",{\"1\":{\"496\":1}}],[\"商务合作\",{\"1\":{\"255\":1}}],[\"姓名\",{\"1\":{\"496\":1,\"1507\":1}}],[\"姓氏\",{\"1\":{\"489\":3}}],[\"邮箱\",{\"1\":{\"1507\":1}}],[\"邮箱中的垃圾邮件过滤等\",{\"1\":{\"383\":1}}],[\"邮件内容等比较长的文字\",{\"1\":{\"496\":1}}],[\"核心思路是copy\",{\"1\":{\"1420\":1}}],[\"核心思想扩展order对象\",{\"1\":{\"856\":1}}],[\"核心线程数是线程池中最少的线程数\",{\"1\":{\"1384\":1}}],[\"核心注解为\",{\"1\":{\"1184\":1,\"1359\":1}}],[\"核心的两个配置文件\",{\"1\":{\"1183\":1,\"1358\":1}}],[\"核心配置文件是什么\",{\"0\":{\"1183\":1,\"1358\":1}}],[\"核心组件有哪些\",{\"0\":{\"991\":1}}],[\"核心\",{\"1\":{\"989\":1}}],[\"核心文件\",{\"1\":{\"880\":1}}],[\"核心命令\",{\"1\":{\"766\":1,\"767\":1}}],[\"核心类型\",{\"0\":{\"495\":1},\"1\":{\"494\":1}}],[\"核心业务逻辑\",{\"0\":{\"228\":1}}],[\"除此之外\",{\"1\":{\"1392\":1,\"1424\":1}}],[\"除此之外它在\",{\"1\":{\"692\":1}}],[\"除非index设置成no选项\",{\"1\":{\"493\":1}}],[\"除了基本的搜索功能\",{\"1\":{\"1456\":1}}],[\"除了上述的措施外\",{\"1\":{\"1442\":1}}],[\"除了上述方法\",{\"1\":{\"1440\":1}}],[\"除了上面几种应用外\",{\"1\":{\"182\":1}}],[\"除了知道每个阶段的调用外\",{\"1\":{\"1410\":1}}],[\"除了查找效率高于linkedhashmap外\",{\"1\":{\"1406\":1}}],[\"除了我们讨论过的remembered\",{\"1\":{\"1398\":1}}],[\"除了hashmap\",{\"1\":{\"1380\":1}}],[\"除了hash这个属性其它属性都声明为final\",{\"1\":{\"1046\":1,\"1247\":1}}],[\"除了提供beanfactory所具有的功能外\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"除了整数值对象\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"除了事务问题\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"除了\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"除了线程安全这点本质区别外\",{\"1\":{\"1075\":1,\"1270\":1}}],[\"除了这俩点\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"除了声明为private和final的方法\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"除了缓存服务器自带的缓存自动失效策略之外\",{\"1\":{\"1009\":1,\"1218\":1}}],[\"除了前面介绍过的\",{\"1\":{\"698\":1}}],[\"除了分配修改时所必要的空间\",{\"1\":{\"683\":1}}],[\"除了接口路径\",{\"1\":{\"205\":1}}],[\"纯手写\",{\"1\":{\"491\":1}}],[\"纯视频\",{\"1\":{\"150\":1}}],[\"俩种都可以\",{\"1\":{\"979\":1}}],[\"俩种方法\",{\"1\":{\"491\":1}}],[\"俩个键在同一个节点\",{\"1\":{\"687\":1}}],[\"俩个人同时买一个商品\",{\"1\":{\"616\":1}}],[\"俩万通用后台管理系统\",{\"1\":{\"257\":1}}],[\"名字就叫\",{\"1\":{\"976\":1}}],[\"名字\",{\"1\":{\"489\":3,\"786\":1}}],[\"名称无所谓\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"名称\",{\"1\":{\"214\":1,\"1414\":1}}],[\"另外一个线程才可以执行其run\",{\"1\":{\"1055\":1,\"1253\":1}}],[\"另外对于写操作\",{\"1\":{\"1035\":1,\"1239\":1}}],[\"另外只有\",{\"1\":{\"487\":1}}],[\"另外\",{\"0\":{\"1031\":1,\"1235\":1},\"1\":{\"486\":1,\"657\":1,\"1004\":1,\"1072\":1,\"1213\":1,\"1267\":1,\"1386\":2,\"1438\":1,\"1442\":2}}],[\"另外还有\",{\"1\":{\"485\":1}}],[\"另一种方法是使用\",{\"1\":{\"1480\":1}}],[\"另一种是类名中含有decorator\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"另一种情况\",{\"1\":{\"980\":1}}],[\"另一端做pop操作\",{\"1\":{\"341\":1}}],[\"另一个方法是使用批量发送消息的方式来提高吞吐量\",{\"1\":{\"1440\":1}}],[\"另一个缺点是kafka对磁盘的使用比较高\",{\"1\":{\"1436\":1}}],[\"另一个常见的使用场景是实时数据流处理\",{\"1\":{\"1434\":1}}],[\"另一个优化策略是使用redlock算法来增加锁的可靠性\",{\"1\":{\"1428\":1}}],[\"另一个类型参数\",{\"1\":{\"1424\":1}}],[\"另一个是控制时序\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"另一个是答arraylist和linkedlist的实现细节\",{\"1\":{\"1074\":1,\"1269\":1}}],[\"另一个是删除操作\",{\"1\":{\"335\":1}}],[\"另一个在同一个lockobj锁定\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"另一个仅在进行\",{\"1\":{\"689\":1}}],[\"另一个产品小西也过来要人\",{\"1\":{\"170\":1}}],[\"字典被广泛用于实现\",{\"1\":{\"689\":1}}],[\"字典只使用\",{\"1\":{\"687\":1}}],[\"字典所使用的哈希表由\",{\"1\":{\"687\":1}}],[\"字典是\",{\"1\":{\"687\":1}}],[\"字典\",{\"0\":{\"686\":1},\"1\":{\"687\":1}}],[\"字节编解码器用于将字节流转换为字符流\",{\"1\":{\"1478\":1}}],[\"字节数组\",{\"1\":{\"682\":1}}],[\"字节字符串\",{\"1\":{\"654\":1}}],[\"字段包括\",{\"1\":{\"1406\":1}}],[\"字段来实现\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"字段做路由分发被转发到对应的shard上\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"字段是一个\",{\"1\":{\"504\":1}}],[\"字段是否可以被索引\",{\"1\":{\"485\":1}}],[\"字段长度越短\",{\"1\":{\"497\":1}}],[\"字段不能被用于排序\",{\"1\":{\"496\":1}}],[\"字段不会被修改来显示复制的值\",{\"1\":{\"489\":1}}],[\"字段类型使用时间戳\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"字段类型主要有\",{\"1\":{\"494\":1}}],[\"字段类型类似于\",{\"1\":{\"494\":1}}],[\"字段数据类型\",{\"0\":{\"494\":1}}],[\"字段级别的分数加权\",{\"1\":{\"493\":1}}],[\"字段将不会被索引\",{\"1\":{\"493\":1}}],[\"字段的值一同读出\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"字段的时候\",{\"1\":{\"492\":1}}],[\"字段的附加属性不满足我们的需求\",{\"1\":{\"491\":1}}],[\"字段仍然可以分别查询\",{\"1\":{\"489\":1}}],[\"字段复制到full\",{\"1\":{\"489\":1}}],[\"字段\",{\"1\":{\"482\":1,\"489\":1,\"574\":1,\"1029\":1,\"1094\":1,\"1095\":1,\"1233\":1,\"1287\":1,\"1288\":1,\"1402\":2,\"1494\":1}}],[\"字符串缩减后的空间不释放\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"字符串优化\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"字符串直接拼接\",{\"1\":{\"826\":1}}],[\"字符串函数\",{\"1\":{\"683\":1}}],[\"字符串函数库里面的函数\",{\"1\":{\"682\":1}}],[\"字符串方式是redis最简单的数据类型\",{\"1\":{\"666\":1}}],[\"字符串\",{\"0\":{\"666\":1},\"1\":{\"652\":1,\"664\":1,\"682\":1}}],[\"字符串允许嵌套对象\",{\"1\":{\"503\":1}}],[\"字符串类型也可以被\",{\"1\":{\"499\":1}}],[\"字符串类型\",{\"0\":{\"496\":1}}],[\"字符串常量池所在的内存块没有空间了\",{\"1\":{\"224\":1}}],[\"字符串切割\",{\"1\":{\"111\":1}}],[\"额外记载了两类信息\",{\"1\":{\"478\":1}}],[\"事件\",{\"1\":{\"1478\":1}}],[\"事件调度线程\",{\"1\":{\"1476\":1}}],[\"事件驱动架构等\",{\"1\":{\"1432\":1}}],[\"事件发布者等机制的实现\",{\"1\":{\"1410\":1}}],[\"事件监听\",{\"1\":{\"1187\":1,\"1362\":1}}],[\"事物的4种隔离级别\",{\"0\":{\"1144\":1,\"1327\":1}}],[\"事情变得如此简单\",{\"1\":{\"722\":1}}],[\"事半功倍\",{\"1\":{\"706\":1}}],[\"事务的执行实际发生在\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"事务不只限于脏读\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"事务传播实际上是会失效的\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"事务传播机制实际上是使用简单的threadlocal实现的\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"事务提交之后才生效\",{\"1\":{\"1147\":1,\"1330\":1}}],[\"事务具有原子性\",{\"1\":{\"1144\":1,\"1327\":1}}],[\"事务日志\",{\"1\":{\"1142\":1,\"1325\":1}}],[\"事务管理错误\",{\"1\":{\"1408\":1}}],[\"事务管理\",{\"1\":{\"1408\":1}}],[\"事务管理等\",{\"1\":{\"1090\":1,\"1283\":1,\"1474\":2}}],[\"事务管理器\",{\"1\":{\"806\":2,\"808\":1}}],[\"事务\",{\"1\":{\"664\":1,\"1416\":1}}],[\"事务在等待资源超过一定时间后超时\",{\"1\":{\"644\":1}}],[\"事务可以看到一致的快照数据\",{\"1\":{\"638\":1}}],[\"事务开始时记录版本号\",{\"1\":{\"632\":1}}],[\"事务将被回滚\",{\"1\":{\"632\":1}}],[\"事实上\",{\"1\":{\"478\":1,\"1056\":1,\"1254\":1,\"1398\":1}}],[\"事自带的\",{\"1\":{\"99\":1}}],[\"倒排列表记载了出现过某个单词的所有文档的文档列表及单词在该文档中出现的位置信息\",{\"1\":{\"477\":1}}],[\"倒排列表\",{\"1\":{\"477\":2}}],[\"倒排文件是存储倒排索引的物理文件\",{\"1\":{\"477\":1}}],[\"倒排文件\",{\"1\":{\"477\":2}}],[\"倒排索引可以帮助用户快速找到想要的商品\",{\"1\":{\"1464\":1}}],[\"倒排索引在搜索引擎\",{\"1\":{\"1464\":1}}],[\"倒排索引会记录下这个关键词在文档1中出现过\",{\"1\":{\"1464\":1}}],[\"倒排索引也就是单词到文档的映射\",{\"1\":{\"1026\":1,\"1230\":1}}],[\"倒排索引存储\",{\"1\":{\"496\":1}}],[\"倒排索引的相关配置\",{\"1\":{\"482\":1}}],[\"倒排索引从逻辑结构和基本思路上来讲非常简单\",{\"1\":{\"478\":1}}],[\"倒排索引主要由两个部分组成\",{\"1\":{\"477\":1}}],[\"倒排索引是实现\",{\"1\":{\"477\":1}}],[\"倒排索引\",{\"1\":{\"477\":1,\"1460\":1}}],[\"倒排索引相关术语\",{\"0\":{\"477\":1}}],[\"倒序遍历数组获取出现顺序从大到小的排列\",{\"1\":{\"406\":1}}],[\"废弃问题\",{\"1\":{\"472\":1}}],[\"类即可\",{\"1\":{\"1507\":1}}],[\"类是\",{\"1\":{\"1481\":1}}],[\"类来实现可重入锁\",{\"1\":{\"1480\":1}}],[\"类来自定义线程池\",{\"1\":{\"1384\":1}}],[\"类中使用\",{\"1\":{\"1474\":1}}],[\"类中名为\",{\"1\":{\"1468\":2}}],[\"类等\",{\"1\":{\"1402\":1}}],[\"类的实现\",{\"1\":{\"1481\":1}}],[\"类的实例\",{\"1\":{\"1468\":2}}],[\"类的泛型参数\",{\"1\":{\"1468\":1}}],[\"类的\",{\"1\":{\"1468\":4}}],[\"类的私有成员上\",{\"1\":{\"1402\":1}}],[\"类的生命周期中\",{\"1\":{\"1392\":1}}],[\"类的生命周期描述了一个类从被加载到被卸载的整个过程\",{\"1\":{\"1392\":1}}],[\"类的生命周期\",{\"1\":{\"1392\":1}}],[\"类的内部类\",{\"1\":{\"1390\":1}}],[\"类及其子类负责finding和loading操作\",{\"1\":{\"1392\":1}}],[\"类则是\",{\"1\":{\"1390\":1}}],[\"类\",{\"1\":{\"1382\":1,\"1390\":1,\"1402\":2,\"1474\":2}}],[\"类a通过构造函数注入需要类b的实例\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"类存储的\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"类加载等情况\",{\"1\":{\"1400\":1}}],[\"类加载双亲委派模型带来的好处主要有两点\",{\"1\":{\"1392\":1}}],[\"类加载的顺序为\",{\"1\":{\"1392\":1}}],[\"类加载过程\",{\"0\":{\"1392\":1}}],[\"类加载器\",{\"1\":{\"1100\":1,\"1291\":1}}],[\"类加载子系统\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"类先实现拦截器\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"类名或者接口名\",{\"1\":{\"1424\":1}}],[\"类名\",{\"1\":{\"835\":1,\"1392\":1}}],[\"类名称\",{\"1\":{\"752\":1,\"1048\":1,\"1249\":1}}],[\"类处理器\",{\"0\":{\"832\":1}}],[\"类似非阻塞\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"类似阻塞式\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"类似这样\",{\"1\":{\"976\":1}}],[\"类似的命令还有\",{\"1\":{\"666\":1}}],[\"类似\",{\"1\":{\"652\":1,\"1148\":1,\"1331\":1}}],[\"类似地\",{\"1\":{\"637\":1}}],[\"类似于数据库中的记录\",{\"1\":{\"1460\":1}}],[\"类似于数据库中的表的类型\",{\"1\":{\"1460\":1}}],[\"类似于数据库中的表\",{\"1\":{\"1460\":1}}],[\"类似于数据库中的表结构定义\",{\"1\":{\"482\":1}}],[\"类似于jdbc的封装\",{\"1\":{\"1130\":1,\"1315\":1}}],[\"类似于\",{\"1\":{\"717\":1,\"1025\":1,\"1229\":1}}],[\"类似于关系型数据库的数据库实例\",{\"1\":{\"471\":1}}],[\"类型就像是表中的记录类型\",{\"1\":{\"1456\":1}}],[\"类型或其子类\",{\"1\":{\"1424\":1}}],[\"类型擦除有利有弊\",{\"1\":{\"1424\":1}}],[\"类型擦除就是编译器删除所有与类型参数相关的信息\",{\"1\":{\"1424\":1}}],[\"类型擦除是干嘛的\",{\"1\":{\"1424\":1}}],[\"类型参数t是在定义泛型类box时使用的\",{\"1\":{\"1424\":1}}],[\"类型安全\",{\"1\":{\"1424\":1}}],[\"类型内建了许多相应的类型别名\",{\"1\":{\"831\":1}}],[\"类型命名的一个短的名字\",{\"1\":{\"831\":1}}],[\"类型别名是为\",{\"1\":{\"831\":1}}],[\"类型特定函数\",{\"1\":{\"687\":1}}],[\"类型元素的集合\",{\"1\":{\"670\":1}}],[\"类型中会涉及到很多的\",{\"1\":{\"663\":1}}],[\"类型相对更多\",{\"1\":{\"652\":1}}],[\"类型去查询\",{\"1\":{\"564\":1}}],[\"类型不匹配导致隐式转换\",{\"1\":{\"564\":1}}],[\"类型字段的名称\",{\"1\":{\"510\":1}}],[\"类型是\",{\"1\":{\"510\":1}}],[\"类型的参数\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"类型的分数\",{\"1\":{\"670\":1}}],[\"类型的无序集合\",{\"1\":{\"669\":1}}],[\"类型的数据\",{\"1\":{\"655\":1}}],[\"类型的\",{\"1\":{\"510\":1,\"668\":1,\"721\":1}}],[\"类型的字段时\",{\"1\":{\"564\":1}}],[\"类型的字段\",{\"1\":{\"509\":1}}],[\"类型的字段可以用来存储\",{\"1\":{\"509\":1}}],[\"类型的自动识别是基于\",{\"1\":{\"492\":1}}],[\"类型和\",{\"1\":{\"508\":1}}],[\"类型可以表达一块地理区域\",{\"1\":{\"507\":1}}],[\"类型会被\",{\"1\":{\"496\":1}}],[\"类型适用于需要被全文检索的字段\",{\"1\":{\"496\":1}}],[\"类型已经不再支持了\",{\"1\":{\"496\":1}}],[\"类型自动识别字段对应表\",{\"1\":{\"492\":1}}],[\"类型自动识别\",{\"0\":{\"492\":1}}],[\"类型支持设定\",{\"1\":{\"487\":1}}],[\"类型默认配置为\",{\"1\":{\"486\":1}}],[\"类型\",{\"0\":{\"509\":1},\"1\":{\"440\":1,\"472\":1,\"492\":1,\"497\":1,\"503\":1,\"508\":3,\"564\":1,\"698\":1,\"832\":1,\"893\":1,\"1136\":2,\"1321\":2,\"1424\":1,\"1456\":1,\"1460\":1}}],[\"具有更高的性能和更好的扩展性\",{\"1\":{\"1478\":1}}],[\"具有灵活的消息传递模型和持久性存储的能力\",{\"1\":{\"1436\":1}}],[\"具有上界的语义\",{\"1\":{\"1424\":1}}],[\"具有相同的方法名\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"具有相同结构的文档的集合\",{\"1\":{\"471\":1}}],[\"具有下面这些优点\",{\"1\":{\"989\":1}}],[\"具有高选择性的列\",{\"1\":{\"565\":2}}],[\"具有唯一性约束的列\",{\"1\":{\"565\":1}}],[\"具体实现都是由各数据库自己实现\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"具体看运行时定\",{\"1\":{\"1041\":1,\"1242\":1}}],[\"具体用哪种方案\",{\"1\":{\"1009\":1,\"1218\":1}}],[\"具体可参考\",{\"1\":{\"895\":1}}],[\"具体顺序遵循文档的顺序\",{\"1\":{\"828\":1}}],[\"具体的值需要使用特殊的标识\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"具体的sql\",{\"1\":{\"890\":1}}],[\"具体的sql语句\",{\"1\":{\"839\":1,\"840\":1,\"841\":1}}],[\"具体的依赖范围有如下6种\",{\"1\":{\"769\":1}}],[\"具体的数据类型如下图所示\",{\"1\":{\"494\":1}}],[\"具体和操作系统有关\",{\"1\":{\"323\":1}}],[\"具体大小和操作系统有关\",{\"1\":{\"319\":1}}],[\"具体数量依赖外部存储器的特性\",{\"1\":{\"319\":1}}],[\"教程使用的是\",{\"1\":{\"465\":1,\"466\":1}}],[\"教育能够使个体更好地适应社会\",{\"1\":{\"56\":1}}],[\"少创建临时对象等\",{\"1\":{\"1400\":1}}],[\"少不了使用分词器\",{\"1\":{\"464\":1}}],[\"少年应有鸿鹄志\",{\"1\":{\"261\":1}}],[\"财经相关\",{\"1\":{\"461\":1}}],[\"哥\",{\"1\":{\"461\":1,\"478\":1}}],[\"示例\",{\"1\":{\"487\":1,\"621\":2,\"622\":1,\"624\":1,\"627\":1,\"628\":1,\"629\":1,\"634\":1,\"635\":2,\"682\":1,\"771\":1}}],[\"示例如下\",{\"1\":{\"459\":1}}],[\"示意图\",{\"1\":{\"404\":1}}],[\"仅记录数据库里面和快照不同的键\",{\"1\":{\"1420\":1}}],[\"仅针对需要分词的字段\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"仅在事务提交时检查是否有其他事务对数据进行了修改\",{\"1\":{\"632\":1}}],[\"仅仅是撤回\",{\"1\":{\"981\":1}}],[\"仅仅调用site来生成站点\",{\"1\":{\"774\":1}}],[\"仅仅对字符串型和分词类型有效\",{\"1\":{\"493\":1}}],[\"仅仅添加一个配置就可以\",{\"1\":{\"454\":1}}],[\"仅选择视频流\",{\"1\":{\"160\":1}}],[\"团队提供的全新框架\",{\"1\":{\"454\":1}}],[\"然而\",{\"1\":{\"453\":1,\"562\":1,\"570\":1}}],[\"然后部署上线\",{\"1\":{\"1511\":1,\"1519\":1}}],[\"然后又变回x的时候\",{\"1\":{\"1476\":1}}],[\"然后又变回a\",{\"1\":{\"1476\":1}}],[\"然后返回相关的结果\",{\"1\":{\"1464\":1}}],[\"然后返回空\",{\"1\":{\"1159\":1,\"1339\":1}}],[\"然后接收者从中间件中接收消息\",{\"1\":{\"1450\":1}}],[\"然后接受观察者的注册\",{\"1\":{\"1194\":1,\"1367\":1}}],[\"然后一次性发送给\",{\"1\":{\"1440\":1}}],[\"然后多个消费者可以并行地从这个主题中读取数据进行处理\",{\"1\":{\"1438\":1}}],[\"然后你用它装了一个苹果\",{\"1\":{\"1424\":1}}],[\"然后会调用\",{\"1\":{\"1408\":1}}],[\"然后使用\",{\"1\":{\"1402\":1}}],[\"然后输出\",{\"1\":{\"1390\":1}}],[\"然后输出结果\",{\"1\":{\"306\":1}}],[\"然后启动了\",{\"1\":{\"1390\":2}}],[\"然后启动线程\",{\"1\":{\"755\":1}}],[\"然后就可以执行下一步操作了\",{\"1\":{\"1390\":1}}],[\"然后就没有问题了\",{\"1\":{\"863\":1}}],[\"然后调用它的\",{\"1\":{\"1386\":1}}],[\"然后调用wait\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"然后重新计算hash值\",{\"1\":{\"1380\":1}}],[\"然后重新投票\",{\"1\":{\"183\":1}}],[\"然后进行处理\",{\"1\":{\"1448\":1}}],[\"然后进行清除回收\",{\"1\":{\"1103\":1,\"1294\":1}}],[\"然后进入阻塞状态\",{\"1\":{\"1390\":1}}],[\"然后进一步处理高16位和低16位产生最终的hash值\",{\"1\":{\"1380\":1}}],[\"然后集群中\",{\"1\":{\"1199\":1,\"1372\":1}}],[\"然后它还会提供一系列的默认配置\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"然后sessionfactory根据用户的每次请求\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"然后发送给slave节点\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"然后直接清除掉端边界以外的内存\",{\"1\":{\"1103\":1,\"1294\":1}}],[\"然后把他们添加在容器中\",{\"1\":{\"1185\":1,\"1360\":1}}],[\"然后把扫描到的这些文件包装成properties对象\",{\"1\":{\"1185\":1,\"1360\":1}}],[\"然后把接口里面的方法和sql语句绑定\",{\"1\":{\"1137\":1,\"1322\":1}}],[\"然后把hashcode的高16位与低16位进行异或\",{\"1\":{\"1077\":1,\"1272\":1}}],[\"然后把堆内存\",{\"1\":{\"755\":1}}],[\"然后写两个简单的接口\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"然后睡觉\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"然后通知服务端开启线程去进行处理\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"然后通过反射调用\",{\"1\":{\"1402\":1}}],[\"然后通过类型安全的属性注入将这些配置属性注入进来\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"然后通过config\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"然后通过网络把旧的副本数据复制到新的副本上\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"然后通过可视化的dashboard\",{\"1\":{\"946\":1}}],[\"然后通过$\",{\"1\":{\"842\":1}}],[\"然后定时\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"然后选出第一个\",{\"1\":{\"1027\":1,\"1231\":1}}],[\"然后鼠标一直向下滚动\",{\"1\":{\"976\":1}}],[\"然后prometheus应用从此接口定时拉取数据\",{\"1\":{\"946\":1}}],[\"然后在用的时候\",{\"1\":{\"1424\":1}}],[\"然后在配置文件中进行配置\",{\"1\":{\"1416\":1}}],[\"然后在映射文件中\",{\"1\":{\"1416\":1}}],[\"然后在注入依赖时\",{\"1\":{\"1412\":1}}],[\"然后在另一个线程中读取它的值\",{\"1\":{\"1382\":1}}],[\"然后在创建新表\",{\"1\":{\"927\":1}}],[\"然后在if\",{\"0\":{\"195\":1}}],[\"然后新建一个类\",{\"1\":{\"902\":1}}],[\"然后点击生成或\",{\"1\":{\"900\":1}}],[\"然后根据设置的\",{\"1\":{\"1138\":1,\"1323\":1}}],[\"然后根据hash值映射到指定的分区上\",{\"1\":{\"1119\":1,\"1307\":1}}],[\"然后根据哈希运算的结果中的\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"然后根据\",{\"1\":{\"829\":1}}],[\"然后根据条件执行相应的命令\",{\"0\":{\"196\":1}}],[\"然后根据条件选择使用哪个策略\",{\"0\":{\"193\":1}}],[\"然后其中的属性就可以在整个配置文件中被用来替换需要动态配置的属性值\",{\"1\":{\"829\":1}}],[\"然后从本地仓库\",{\"1\":{\"778\":1}}],[\"然后b项目依赖于a项目\",{\"1\":{\"771\":1}}],[\"然后修改\",{\"1\":{\"755\":1}}],[\"然后对表中的特定行加排他锁\",{\"1\":{\"620\":1}}],[\"然后insert\",{\"0\":{\"605\":1}}],[\"然后这样查询\",{\"1\":{\"589\":1}}],[\"然后分布在不同数据库\",{\"1\":{\"580\":1}}],[\"然后分布式部署到不同容器\",{\"1\":{\"440\":1}}],[\"然后存储到哈希表中\",{\"1\":{\"558\":1}}],[\"然后将哈希值映射到对应的哈希槽上\",{\"1\":{\"1426\":1}}],[\"然后将新键值对添加到该位置或链表中\",{\"1\":{\"1406\":1}}],[\"然后将计数器的值设置为线程的数量\",{\"1\":{\"1390\":1}}],[\"然后将计数器的值设置为子任务的数量\",{\"1\":{\"1390\":1}}],[\"然后将sql执行结果返回\",{\"1\":{\"1132\":1,\"1317\":1}}],[\"然后将执行结果返回给web服务器\",{\"1\":{\"1087\":1,\"1280\":1}}],[\"然后将剩余n\",{\"1\":{\"417\":1}}],[\"然后将此存储单元数据放到数据总线上\",{\"1\":{\"326\":1}}],[\"然后\",{\"0\":{\"606\":1},\"1\":{\"404\":1,\"427\":1,\"755\":1,\"1057\":1,\"1255\":1,\"1458\":1,\"1462\":1,\"1468\":2,\"1474\":1}}],[\"然后异常返回\",{\"1\":{\"327\":1}}],[\"然后磁盘旋转将目标扇区旋转到磁头下\",{\"1\":{\"327\":1}}],[\"然后说明自己的情况\",{\"1\":{\"250\":1}}],[\"然后各自将投票发送给集群中所有机器\",{\"1\":{\"183\":1}}],[\"然后各自将这个投票发给集群中其他机器\",{\"1\":{\"183\":1}}],[\"然后开始进入leader选举过程\",{\"1\":{\"183\":1}}],[\"然后再创建代理对象\",{\"1\":{\"1412\":1}}],[\"然后再来看看这套系统\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"然后再恢复追加文件中的增量数据\",{\"1\":{\"1158\":1,\"1338\":1}}],[\"然后再把\",{\"1\":{\"1131\":1,\"1316\":1}}],[\"然后再把已使用的内存空间一次清理掉\",{\"1\":{\"1103\":1,\"1294\":1}}],[\"然后再写入到\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"然后再申请\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"然后再添加\",{\"1\":{\"773\":1}}],[\"然后再将新值回到主内存\",{\"1\":{\"755\":1}}],[\"然后再说说主线程的执行过程\",{\"1\":{\"755\":1}}],[\"然后再进行一次磁盘i\",{\"1\":{\"560\":1}}],[\"然后再结合这些原理分析b\",{\"1\":{\"324\":1}}],[\"然后再开始针对性学习\",{\"1\":{\"115\":1}}],[\"然后再试着做一个项目\",{\"1\":{\"115\":1}}],[\"建立一个变量副本\",{\"1\":{\"755\":1}}],[\"建立索引可能没有太大必要\",{\"1\":{\"565\":1}}],[\"建立索引可以加快查询速度\",{\"1\":{\"565\":1}}],[\"建立索引是必要的\",{\"1\":{\"565\":1}}],[\"建立索引反而会增加额外开销\",{\"1\":{\"563\":1}}],[\"建立的特殊索引\",{\"1\":{\"558\":1}}],[\"建立在一个全文搜索引擎库\",{\"1\":{\"453\":1}}],[\"建议耐心阅读\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"建议使用名词用官方语言描述会更准确\",{\"1\":{\"1024\":1}}],[\"建议使用的时候和类名一致\",{\"1\":{\"831\":1}}],[\"建议阅读\",{\"1\":{\"998\":1,\"1045\":1,\"1246\":1}}],[\"建议先读五遍\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"建议先读一下系列攻略目录\",{\"1\":{\"464\":1,\"481\":1,\"513\":1}}],[\"建议先用文末的代码demo练下手\",{\"1\":{\"990\":1}}],[\"建议完全模仿\",{\"1\":{\"973\":1}}],[\"建议收藏\",{\"1\":{\"944\":1,\"958\":1,\"983\":1,\"987\":1,\"998\":1,\"1013\":1,\"1024\":1,\"1040\":1,\"1054\":1,\"1068\":1,\"1083\":1,\"1098\":1,\"1112\":1,\"1128\":1,\"1141\":1,\"1154\":1,\"1167\":1,\"1180\":1,\"1193\":1,\"1206\":1}}],[\"建议收藏阅读\",{\"1\":{\"330\":1,\"578\":1}}],[\"建议对需要参与评分字段使用\",{\"1\":{\"493\":1}}],[\"建议环境\",{\"1\":{\"289\":1}}],[\"建议\",{\"1\":{\"227\":1}}],[\"建议开启\",{\"1\":{\"123\":1}}],[\"建议和打开文件数一致\",{\"1\":{\"123\":1}}],[\"讲解的真的很通俗易懂\",{\"1\":{\"1424\":1}}],[\"讲解我们在面试中遇到的问题\",{\"1\":{\"1380\":1,\"1382\":1,\"1384\":1,\"1386\":1,\"1388\":1,\"1390\":1,\"1392\":1,\"1394\":1,\"1396\":1,\"1398\":1,\"1400\":1,\"1402\":1,\"1404\":1,\"1406\":1,\"1408\":1,\"1410\":1,\"1412\":1,\"1414\":1,\"1416\":1,\"1418\":1,\"1420\":1,\"1422\":1,\"1424\":1,\"1426\":1,\"1428\":1,\"1430\":1,\"1432\":1,\"1434\":1,\"1436\":1,\"1438\":1,\"1440\":1,\"1446\":1,\"1448\":1,\"1450\":1,\"1452\":1,\"1454\":1,\"1456\":1,\"1458\":1,\"1460\":1,\"1462\":1,\"1464\":1,\"1466\":1,\"1468\":1,\"1470\":1,\"1474\":1,\"1476\":1,\"1478\":1,\"1481\":1}}],[\"讲的很透彻\",{\"1\":{\"1420\":1}}],[\"讲讲g1垃圾收集器的工作流程\",{\"1\":{\"1394\":1}}],[\"讲遇到的问题和难点\",{\"1\":{\"447\":1}}],[\"讲错这么办\",{\"1\":{\"264\":1}}],[\"好用\",{\"1\":{\"1507\":1}}],[\"好像明白了\",{\"1\":{\"1464\":1}}],[\"好像寒冬马上要侵蚀整个it行业\",{\"1\":{\"85\":1}}],[\"好问题\",{\"1\":{\"1438\":1,\"1452\":1,\"1454\":1,\"1462\":1,\"1466\":1}}],[\"好主意\",{\"1\":{\"1430\":1}}],[\"好处是可以在1\",{\"1\":{\"1424\":1}}],[\"好嘞\",{\"1\":{\"1424\":1}}],[\"好的面试官\",{\"1\":{\"1394\":1}}],[\"好的\",{\"1\":{\"1384\":1,\"1390\":2,\"1392\":1,\"1408\":1,\"1414\":1,\"1424\":1,\"1426\":1,\"1430\":1,\"1436\":1,\"1444\":1,\"1466\":1,\"1480\":1}}],[\"好的办法就是一次批量一部分\",{\"1\":{\"791\":1}}],[\"好\",{\"1\":{\"1002\":1,\"1211\":1,\"1392\":1}}],[\"好事成双\",{\"1\":{\"447\":1}}],[\"批量发送消息\",{\"1\":{\"1440\":1}}],[\"批量压缩kafka\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"批量读写kafka\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"批量更新\",{\"1\":{\"785\":1}}],[\"批量插入\",{\"0\":{\"525\":1}}],[\"批量删除元素\",{\"1\":{\"337\":1}}],[\"批处理\",{\"1\":{\"447\":1}}],[\"理解透彻cas和aba问题\",{\"1\":{\"1476\":1}}],[\"理解了这两个概念的区别\",{\"1\":{\"1424\":1}}],[\"理解\",{\"1\":{\"1410\":1}}],[\"理解数组\",{\"1\":{\"1404\":1}}],[\"理解jit\",{\"1\":{\"1400\":1}}],[\"理解起来可能会更顺畅\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"理解性阅读\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"理解好锁的原理\",{\"1\":{\"615\":1}}],[\"理解倒排索引\",{\"0\":{\"476\":1},\"1\":{\"447\":1}}],[\"理论上来说\",{\"1\":{\"990\":1,\"1102\":1,\"1293\":1}}],[\"理论上每台nginx服务器的最大连接数为\",{\"1\":{\"123\":1}}],[\"理论值应该是最多打开文件数\",{\"1\":{\"123\":1}}],[\"拼音分词器插件安装\",{\"0\":{\"466\":1},\"1\":{\"447\":1}}],[\"初始容量为\",{\"1\":{\"1386\":1}}],[\"初始标记代码示例\",{\"1\":{\"1396\":1}}],[\"初始标记\",{\"1\":{\"1107\":2,\"1298\":2,\"1394\":1,\"1396\":1,\"1398\":1}}],[\"初始\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"初始状态index\",{\"1\":{\"979\":1}}],[\"初始化一个\",{\"1\":{\"1507\":1}}],[\"初始化项目\",{\"1\":{\"1507\":1,\"1522\":1}}],[\"初始化完毕后\",{\"1\":{\"1410\":1}}],[\"初始化完成后\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"初始化前后进行一些处理\",{\"1\":{\"1410\":1}}],[\"初始化前阶段\",{\"1\":{\"1410\":1}}],[\"初始化后调用这个方法\",{\"1\":{\"1410\":1}}],[\"初始化后调用该方法\",{\"1\":{\"1410\":1}}],[\"初始化后自动调用被此注解标注的方法\",{\"1\":{\"1410\":1}}],[\"初始化阶段\",{\"1\":{\"1410\":1}}],[\"初始化阶段又可以分为几个步骤\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"初始化以及其他aware接口回调\",{\"1\":{\"1408\":1}}],[\"初始化方法有哪些\",{\"1\":{\"1410\":1}}],[\"初始化方法\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"初始化bean\",{\"1\":{\"1171\":2,\"1348\":2}}],[\"初始化参数被传递给\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"初始化仓库\",{\"1\":{\"976\":1}}],[\"初始化本地代码\",{\"1\":{\"976\":1}}],[\"初始化成功后\",{\"1\":{\"974\":1}}],[\"初始化2\",{\"1\":{\"342\":1}}],[\"初始化1\",{\"1\":{\"342\":1}}],[\"初始化\",{\"0\":{\"936\":1,\"973\":1},\"1\":{\"342\":1,\"711\":1,\"774\":1,\"1085\":1,\"1105\":1,\"1278\":1,\"1296\":1,\"1392\":1,\"1408\":1}}],[\"初始化队列\",{\"1\":{\"341\":2,\"342\":1}}],[\"初始化存储容器并且添加元素\",{\"1\":{\"338\":1}}],[\"初始化存储容器\",{\"1\":{\"338\":2}}],[\"初始化连接时最长能忍受多少个心跳时间间隔数\",{\"1\":{\"174\":1}}],[\"初始化对象\",{\"1\":{\"89\":1,\"1056\":2,\"1254\":2}}],[\"初始化内存空间\",{\"1\":{\"89\":1}}],[\"初步配置和使用\",{\"0\":{\"459\":1},\"1\":{\"447\":1}}],[\"敬请期待\",{\"1\":{\"447\":1}}],[\"移除所有上一次构建生成的文件\",{\"1\":{\"775\":1}}],[\"移除有序集合中给定的分数区间的所有成员\",{\"1\":{\"670\":1}}],[\"移除有序集合中给定的排名区间的所有成员\",{\"1\":{\"670\":1}}],[\"移除有序集合中给定的字典区间的所有成员\",{\"1\":{\"670\":1}}],[\"移除有序集合中的一个或多个成员\",{\"1\":{\"670\":1}}],[\"移除集合中一个或多个成员\",{\"1\":{\"669\":1}}],[\"移除并返回集合中的一个随机元素\",{\"1\":{\"669\":1}}],[\"移除列表的最后一个元素\",{\"1\":{\"667\":2}}],[\"移除列表元素\",{\"1\":{\"667\":1}}],[\"移除表中所有与\",{\"1\":{\"667\":1}}],[\"移除与\",{\"1\":{\"667\":2}}],[\"移出并获取列表的最后一个元素\",{\"1\":{\"667\":1}}],[\"移出并获取列表的第一个元素\",{\"1\":{\"667\":2}}],[\"移位并通过或运算拼到一起组成64位的id\",{\"1\":{\"441\":1}}],[\"移动元素过程中不再依赖原始集合\",{\"1\":{\"404\":1}}],[\"获得新的时间戳\",{\"1\":{\"441\":1}}],[\"获得下一个id\",{\"1\":{\"441\":1}}],[\"获取需要的\",{\"1\":{\"1507\":1}}],[\"获取到的结果是这样的\",{\"1\":{\"1494\":1}}],[\"获取对象的锁\",{\"1\":{\"1481\":2}}],[\"获取栈顶元素\",{\"1\":{\"1481\":2}}],[\"获取键值对的值\",{\"1\":{\"1386\":1}}],[\"获取候选的配置\",{\"1\":{\"1185\":1,\"1360\":1}}],[\"获取的行锁会在当前事务结束时自动释放\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"获取的id虽然是唯一的\",{\"1\":{\"436\":1}}],[\"获取这条插入语句的自增而成的主键\",{\"1\":{\"1133\":1,\"1318\":1}}],[\"获取数组的某个位置最直接的方法是对数组的长度取余数\",{\"1\":{\"1080\":1,\"1275\":1}}],[\"获取cpu的使用权\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"获取入参\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"获取方法名称\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"获取缓存\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"获取sqlsession\",{\"1\":{\"810\":2,\"820\":1,\"826\":1}}],[\"获取statement\",{\"1\":{\"800\":1}}],[\"获取连接超时时间\",{\"1\":{\"878\":1}}],[\"获取连接\",{\"1\":{\"800\":1}}],[\"获取地理位置的坐标\",{\"1\":{\"723\":1}}],[\"获取有序集合的成员数\",{\"1\":{\"670\":1}}],[\"获取集合的成员数\",{\"1\":{\"669\":1}}],[\"获取哈希表中所有值\",{\"1\":{\"668\":1}}],[\"获取哈希表中字段的数量\",{\"1\":{\"668\":1}}],[\"获取所有已经就绪的事件\",{\"1\":{\"1478\":1}}],[\"获取所有给定字段的值\",{\"1\":{\"668\":1}}],[\"获取所有哈希表中的字段\",{\"1\":{\"668\":1}}],[\"获取在哈希表中指定\",{\"1\":{\"668\":1}}],[\"获取存储在哈希表中指定字段的值\",{\"1\":{\"668\":1}}],[\"获取列表指定范围内的元素\",{\"1\":{\"667\":1}}],[\"获取列表长度\",{\"1\":{\"667\":1}}],[\"获取锁成功\",{\"1\":{\"1481\":1}}],[\"获取锁失败时读取的缓存\",{\"1\":{\"1160\":1,\"1340\":1}}],[\"获取锁失败\",{\"1\":{\"1062\":2,\"1260\":2,\"1481\":1}}],[\"获取锁\",{\"1\":{\"640\":1,\"641\":1,\"642\":1}}],[\"获取出现的次数作为下标\",{\"1\":{\"406\":1}}],[\"获取指定节点的node\",{\"1\":{\"339\":1}}],[\"获取指定元素的所有位置\",{\"1\":{\"337\":1}}],[\"获取指定位置的元素\",{\"1\":{\"337\":1}}],[\"获取线性表的元素个数\",{\"1\":{\"337\":1}}],[\"获取视频课程点击\",{\"1\":{\"233\":1}}],[\"获取\",{\"1\":{\"132\":1,\"711\":2,\"1410\":1,\"1414\":1}}],[\"获取证书\",{\"0\":{\"102\":1}}],[\"获取100本经典书单\",{\"1\":{\"56\":1}}],[\"构成循环\",{\"1\":{\"1394\":1}}],[\"构架的程序中\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"构造器注入避免\",{\"1\":{\"1412\":1}}],[\"构造器循环依赖\",{\"1\":{\"1412\":1}}],[\"构造器\",{\"1\":{\"1402\":1}}],[\"构造器上\",{\"1\":{\"1402\":1}}],[\"构造方法和方法参数\",{\"1\":{\"1402\":1}}],[\"构造方法在每次创建实例时都会执行\",{\"1\":{\"1392\":1}}],[\"构造方法执行\",{\"1\":{\"1392\":3}}],[\"构造方法不能被重写\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"构造会话工厂\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"构造函数等\",{\"1\":{\"1468\":1}}],[\"构造函数\",{\"1\":{\"441\":1,\"541\":1,\"1494\":1}}],[\"构建docker镜像\",{\"0\":{\"1515\":1}}],[\"构建倒排索引其实也很简单\",{\"1\":{\"1464\":1}}],[\"构建新aof\",{\"1\":{\"1420\":1}}],[\"构建自定义镜像\",{\"1\":{\"1017\":1,\"1223\":1}}],[\"构建\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"构建sqlsessionfactory\",{\"0\":{\"809\":1},\"1\":{\"809\":1,\"810\":1,\"820\":1,\"826\":1}}],[\"构建的核心部分\",{\"1\":{\"774\":1}}],[\"构建maven项目命令的使用\",{\"0\":{\"768\":1}}],[\"构建mapping方式\",{\"0\":{\"491\":1}}],[\"构建临时索引\",{\"1\":{\"491\":1}}],[\"构建大顶堆\",{\"1\":{\"417\":1}}],[\"结合hashmap提供按插入顺序或访问顺序遍历map中的条目\",{\"1\":{\"1380\":1}}],[\"结束\",{\"1\":{\"864\":1,\"928\":1}}],[\"结束循环\",{\"1\":{\"755\":1}}],[\"结构体\",{\"1\":{\"1494\":2}}],[\"结构包含的最后一个属性为\",{\"1\":{\"698\":1}}],[\"结构的\",{\"1\":{\"698\":1}}],[\"结构则用于保存跳跃表节点的相关信息\",{\"1\":{\"691\":1}}],[\"结构用于表示跳跃表节点\",{\"1\":{\"691\":1}}],[\"结构都保存着一个键值对\",{\"1\":{\"687\":1}}],[\"结构表示\",{\"1\":{\"687\":2}}],[\"结构表示一个\",{\"1\":{\"682\":1}}],[\"结构定义\",{\"1\":{\"687\":1}}],[\"结构组成的链表\",{\"1\":{\"684\":1}}],[\"结构和三个\",{\"1\":{\"684\":1}}],[\"结构来表示\",{\"1\":{\"684\":1,\"685\":2}}],[\"结构做了梳理\",{\"1\":{\"676\":1}}],[\"结构化字符串\",{\"1\":{\"496\":1}}],[\"结构混乱\",{\"1\":{\"417\":1}}],[\"结果都是一样的\",{\"1\":{\"1454\":1}}],[\"结果映射配置等信息\",{\"1\":{\"1132\":1,\"1317\":1}}],[\"结果result\",{\"1\":{\"1041\":1,\"1242\":1}}],[\"结果中被过滤掉\",{\"1\":{\"1033\":1,\"1237\":1}}],[\"结果集封装\",{\"0\":{\"892\":1}}],[\"结果集对应的数据类型\",{\"1\":{\"860\":1}}],[\"结果集分装\",{\"1\":{\"447\":1}}],[\"结果\",{\"1\":{\"654\":1}}],[\"结果是31\",{\"1\":{\"441\":2}}],[\"产生过aba问题\",{\"1\":{\"1476\":1}}],[\"产生碎片\",{\"1\":{\"1396\":1}}],[\"产生死锁就是俩个或多个线程在申请资源时\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"产生原因\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"产生4096个id序号<br>\",{\"1\":{\"441\":1}}],[\"产生投票\",{\"1\":{\"183\":1}}],[\"负责协调整个集群的操作\",{\"1\":{\"1466\":1}}],[\"负责重写工作\",{\"1\":{\"1420\":1}}],[\"负责数据填充和呈现结果\",{\"1\":{\"1414\":1}}],[\"负责具体\",{\"1\":{\"1414\":1}}],[\"负责转发请求到各个组件\",{\"1\":{\"1414\":1}}],[\"负责加载用户自定义的类\",{\"1\":{\"1392\":1}}],[\"负责加载jdk扩展目录中的jar包\",{\"1\":{\"1392\":1}}],[\"负责加载jdk内置的类\",{\"1\":{\"1392\":1}}],[\"负责维护和跟踪\",{\"1\":{\"1117\":1,\"1305\":1}}],[\"负责实时从\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"负责将消息推送\",{\"1\":{\"1448\":1}}],[\"负责将消息发送到\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"负责将请求映射到对应的处理器\",{\"1\":{\"1414\":1}}],[\"负责将受到的消息存储到磁盘中\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"负责从master上拉取\",{\"1\":{\"1143\":1,\"1326\":1}}],[\"负责从\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"负责调度\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"负责显示\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"负荷大增\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"负数是1\",{\"1\":{\"441\":1}}],[\"负载因子\",{\"1\":{\"688\":1}}],[\"负载均衡\",{\"0\":{\"182\":1},\"1\":{\"123\":1,\"1194\":1,\"1201\":1,\"1367\":1,\"1374\":1,\"1422\":1}}],[\"负载均衡配置\",{\"1\":{\"123\":1}}],[\"负载的权重就越大\",{\"1\":{\"123\":1}}],[\"源码实现吗\",{\"1\":{\"1480\":1}}],[\"源码都背下来了\",{\"1\":{\"1480\":1,\"1481\":1}}],[\"源码阶段\",{\"1\":{\"1402\":1}}],[\"源码解读在javapub公众号发出\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"源码参考\",{\"1\":{\"1041\":1,\"1242\":1}}],[\"源码分析将首发在\",{\"1\":{\"1027\":1,\"1231\":1}}],[\"源码分析等\",{\"1\":{\"671\":1}}],[\"源码地址\",{\"1\":{\"952\":1}}],[\"源码下载\",{\"1\":{\"930\":1}}],[\"源码在文末\",{\"1\":{\"870\":1}}],[\"源码案例下载\",{\"1\":{\"791\":1}}],[\"源码仓库\",{\"1\":{\"753\":1}}],[\"源码全部都在gitee免费提供\",{\"1\":{\"746\":1}}],[\"源码\",{\"0\":{\"441\":1,\"744\":1},\"1\":{\"875\":2,\"919\":1,\"941\":1,\"948\":1,\"1402\":1,\"1507\":2}}],[\"源代码控制\",{\"1\":{\"243\":1}}],[\"台容器\",{\"1\":{\"440\":1}}],[\"台词也一般的情况下\",{\"1\":{\"264\":1}}],[\"况且\",{\"1\":{\"440\":1}}],[\"强转\",{\"1\":{\"1424\":1}}],[\"强调父类的调用子类的特性\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"强烈建议大家实操\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"强制线程每次读取该值的时候都去\",{\"1\":{\"755\":1}}],[\"强依赖机器时钟\",{\"1\":{\"440\":1}}],[\"强大的安全性\",{\"1\":{\"242\":1}}],[\"序言\",{\"0\":{\"585\":1}}],[\"序列化与反序列化\",{\"1\":{\"1404\":1}}],[\"序列在id中占的位数\",{\"1\":{\"441\":1}}],[\"序列号就是消息的编号\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"序列号\",{\"1\":{\"440\":1}}],[\"序号\",{\"1\":{\"440\":1,\"668\":1,\"669\":1,\"670\":1}}],[\"云云就不介绍了\",{\"1\":{\"439\":1}}],[\"云服务器\",{\"1\":{\"238\":1},\"2\":{\"245\":1}}],[\"几个概念的关系图可以参考下图\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"几个参数\",{\"1\":{\"981\":1}}],[\"几乎都可以不写xml配置了\",{\"1\":{\"1402\":1}}],[\"几乎是大白话式的对话\",{\"1\":{\"1378\":1}}],[\"几乎是所有设计系统时都会遇到的\",{\"1\":{\"434\":1}}],[\"几乎所有的对象实例都在这里分配内存\",{\"1\":{\"1099\":1,\"1290\":1,\"1388\":1}}],[\"几乎覆盖我们生产\",{\"1\":{\"934\":1}}],[\"几乎每个写\",{\"1\":{\"907\":1}}],[\"几乎各一半\",{\"1\":{\"599\":1}}],[\"几十万用户\",{\"1\":{\"263\":1}}],[\"附加\",{\"0\":{\"962\":1}}],[\"附带功能化\",{\"1\":{\"940\":1}}],[\"附视频\",{\"0\":{\"933\":1,\"934\":1}}],[\"附源码\",{\"0\":{\"910\":1,\"922\":1,\"933\":1,\"934\":1,\"944\":1},\"1\":{\"433\":1,\"944\":1}}],[\"附录\",{\"0\":{\"297\":1}}],[\"版雪花id生成算法\",{\"1\":{\"441\":1}}],[\"版\",{\"0\":{\"430\":1}}],[\"版本后\",{\"1\":{\"1195\":1,\"1202\":1,\"1368\":1,\"1375\":1}}],[\"版本为1\",{\"1\":{\"917\":1}}],[\"版本锁定\",{\"1\":{\"778\":1}}],[\"版本也是网络并发\",{\"1\":{\"727\":1}}],[\"版本号时\",{\"1\":{\"1476\":1}}],[\"版本号作为乐观锁\",{\"1\":{\"1476\":1}}],[\"版本号由父工程里面统一指定不再需要特别指定\",{\"1\":{\"778\":1}}],[\"版本号\",{\"1\":{\"632\":2}}],[\"版本是\",{\"1\":{\"457\":1}}],[\"版本\",{\"1\":{\"239\":1,\"465\":1,\"466\":1,\"541\":1,\"960\":1,\"1507\":1}}],[\"版本信息等\",{\"1\":{\"160\":1}}],[\"子进程退出\",{\"1\":{\"1420\":1}}],[\"子进程完成后\",{\"1\":{\"1420\":1}}],[\"子进程构建新的aof\",{\"1\":{\"1420\":1}}],[\"子进程载入当前数据库快照\",{\"1\":{\"1420\":1}}],[\"子进程创建\",{\"1\":{\"1420\":1}}],[\"子加载器才会尝试自己去加载这个类\",{\"1\":{\"1392\":1}}],[\"子加载器才会尝试自己去加载\",{\"1\":{\"1106\":1,\"1297\":1}}],[\"子类或者实现类无法继承父类或者接口的注解\",{\"1\":{\"1402\":1}}],[\"子类不会再重复加载该类\",{\"1\":{\"1392\":1}}],[\"子类加载器并不会马上去加载\",{\"1\":{\"1106\":1,\"1297\":1}}],[\"子类和父类在同一个包中\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"子对象的java类型\",{\"1\":{\"856\":1,\"857\":1}}],[\"子对象在父对象中的属性名\",{\"1\":{\"856\":1,\"857\":1}}],[\"子项目名称3<\",{\"1\":{\"779\":1}}],[\"子项目名称2<\",{\"1\":{\"779\":1}}],[\"子项目名称1<\",{\"1\":{\"779\":1}}],[\"子工程设置依赖\",{\"1\":{\"778\":1}}],[\"子工程中不再需要指定具体版本号\",{\"1\":{\"778\":1}}],[\"子句\",{\"1\":{\"619\":1}}],[\"子句中的\",{\"0\":{\"596\":1}}],[\"子句中使用\",{\"0\":{\"590\":1,\"591\":1},\"1\":{\"1149\":2,\"1332\":2}}],[\"子句中对字段进行函数操作\",{\"1\":{\"1149\":1,\"1332\":1}}],[\"子句中对字段进行表达式操作\",{\"0\":{\"594\":1},\"1\":{\"1149\":1,\"1332\":1}}],[\"子句中对字段进行\",{\"0\":{\"589\":1},\"1\":{\"1149\":1,\"1332\":1}}],[\"子句引用了符合索引的所有列或者前导列时\",{\"1\":{\"561\":1}}],[\"子字段\",{\"1\":{\"492\":1}}],[\"子桶\",{\"1\":{\"428\":2}}],[\"子节点数量一般在上千\",{\"1\":{\"319\":1}}],[\"由它调用其它组件处理用户的请求\",{\"1\":{\"1414\":1}}],[\"由remembered\",{\"1\":{\"1398\":1}}],[\"由其负责协调多个\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"由那些注解组成\",{\"0\":{\"1184\":1,\"1359\":1}}],[\"由父\",{\"1\":{\"1183\":1,\"1358\":1}}],[\"由此保持一致\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"由主动行为变为了被动行为\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"由会话工厂创建\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"由多个节点组成\",{\"1\":{\"1462\":1}}],[\"由多个\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"由java编译器实现\",{\"1\":{\"1087\":1,\"1280\":1}}],[\"由jsp引擎完成\",{\"1\":{\"1087\":1,\"1280\":1}}],[\"由应用层来处理具体的冲突\",{\"1\":{\"1035\":1,\"1239\":1}}],[\"由一个\",{\"1\":{\"684\":1}}],[\"由一台或多台的elasticsearch\",{\"1\":{\"469\":1}}],[\"由存储引擎在执行查询时自动管理决定的\",{\"1\":{\"619\":1}}],[\"由\",{\"1\":{\"541\":1,\"864\":1,\"895\":1,\"1087\":3,\"1122\":1,\"1280\":3,\"1310\":1,\"1378\":1}}],[\"由分析过程产生\",{\"1\":{\"489\":1}}],[\"由数据中心id和机器id作区分\",{\"1\":{\"441\":1}}],[\"由我们程序来指定的\",{\"1\":{\"441\":1}}],[\"由键值的最左边开始\",{\"1\":{\"427\":1}}],[\"由于业务的复杂性\",{\"1\":{\"1476\":1}}],[\"由于锁定粒度太大\",{\"1\":{\"1476\":1}}],[\"由于锁定了整个表\",{\"1\":{\"624\":1,\"628\":1}}],[\"由于它的持久性存储和消息回溯的特性\",{\"1\":{\"1436\":1}}],[\"由于它内部维护了一个当前容量的指针size\",{\"1\":{\"1074\":1,\"1269\":1}}],[\"由于其查询效率高且适用于大容量场景\",{\"1\":{\"1406\":1}}],[\"由于g1采用分代和分片回收\",{\"1\":{\"1398\":1}}],[\"由于每个线程都有自己的变量副本\",{\"1\":{\"1386\":2}}],[\"由于创建的节点是持久化的\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"由于spring\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"由于ioc容器的加入\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"由于instance已经指向了一块内存空间\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"由于引进了中间位置的\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"由于不需要移动存活对象\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"由于直接关联对象比较小\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"由于数组的长度通常不会超过2^16\",{\"1\":{\"1078\":1,\"1273\":1}}],[\"由于数据量本身就少\",{\"1\":{\"565\":1}}],[\"由于vector的方法都是同步方法\",{\"1\":{\"1075\":1,\"1270\":1}}],[\"由于底层是双向链表\",{\"1\":{\"1074\":1,\"1269\":1}}],[\"由于成员变量具有默认值\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"由于缓存是不命中时被动写\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"由于最近在项目当中用到了关于并发方面的技术\",{\"1\":{\"755\":1}}],[\"由于完全实现了发布\",{\"1\":{\"652\":1}}],[\"由于唯一键冲突\",{\"1\":{\"640\":1}}],[\"由于前期的快速开发\",{\"1\":{\"588\":1}}],[\"由于查询维度较多\",{\"1\":{\"578\":1}}],[\"由于使用了位图索引\",{\"1\":{\"568\":1}}],[\"由于long基本类型在java中是带符号的\",{\"1\":{\"441\":1}}],[\"由于在并发标记阶段中\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"由于在\",{\"1\":{\"440\":1}}],[\"由于\",{\"1\":{\"417\":1,\"562\":1,\"1382\":1}}],[\"由于篇幅过长\",{\"1\":{\"396\":1}}],[\"由于磁盘顺序读取的效率很高\",{\"1\":{\"327\":1}}],[\"由于存储介质的特性\",{\"1\":{\"327\":1}}],[\"由于b线程增删元素会导致\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"由于b树的节点都存了key和data\",{\"1\":{\"323\":1}}],[\"由于b\",{\"1\":{\"323\":1}}],[\"由于b+树的高度通常较低\",{\"1\":{\"566\":1}}],[\"由于b+树的非叶子节点不存储实际数据\",{\"1\":{\"566\":1}}],[\"由于b+树的叶子节点的数据都是使用链表连接起来的\",{\"1\":{\"323\":1}}],[\"由于b+树所有的\",{\"1\":{\"323\":1}}],[\"由于内节点无\",{\"1\":{\"323\":1}}],[\"由于专注于最新的软件\",{\"1\":{\"242\":1}}],[\"由于是初始情况\",{\"1\":{\"183\":1}}],[\"统称为\",{\"1\":{\"1117\":1,\"1305\":1}}],[\"统一日志格式\",{\"1\":{\"1502\":1}}],[\"统一一体化了其他框架和技术\",{\"1\":{\"1408\":1}}],[\"统一保存在\",{\"1\":{\"1190\":1,\"1365\":1}}],[\"统一的\",{\"1\":{\"989\":1}}],[\"统一依赖管理\",{\"1\":{\"762\":1}}],[\"统一为同样的数位长度\",{\"1\":{\"427\":1}}],[\"统计\",{\"1\":{\"721\":1,\"722\":1}}],[\"统计数组中每个值为i的元素出现的次数\",{\"1\":{\"411\":1}}],[\"统计每个元素出现的次数\",{\"1\":{\"406\":1}}],[\"统计投票\",{\"1\":{\"183\":2}}],[\"特此记录\",{\"1\":{\"785\":1}}],[\"特别适合排序需求\",{\"1\":{\"1406\":1}}],[\"特别适合用于存储对象\",{\"1\":{\"668\":1}}],[\"特别是list这个接口\",{\"1\":{\"1404\":1}}],[\"特别是gc日志\",{\"1\":{\"1400\":1}}],[\"特别是g1\",{\"1\":{\"1400\":1}}],[\"特别是对于新手来说\",{\"1\":{\"1436\":1}}],[\"特别是对于大型表\",{\"1\":{\"574\":1}}],[\"特别是对数据结构\",{\"1\":{\"1380\":1}}],[\"特别是follower的数量越多\",{\"1\":{\"1196\":1,\"1369\":1}}],[\"特别是热门商品\",{\"1\":{\"1000\":1,\"1209\":1}}],[\"特别是在lts版本中\",{\"1\":{\"239\":1}}],[\"特别是像生产者消费者模式中\",{\"1\":{\"181\":1}}],[\"特性实现的\",{\"1\":{\"1466\":1}}],[\"特性和分布式场景来分析会遇到哪些关键点\",{\"1\":{\"727\":1}}],[\"特性\",{\"0\":{\"655\":1},\"1\":{\"650\":1,\"1202\":1,\"1375\":1}}],[\"特殊类型包括\",{\"1\":{\"508\":1}}],[\"特殊类型\",{\"0\":{\"508\":1}}],[\"特点\",{\"0\":{\"425\":1},\"1\":{\"624\":2,\"632\":1,\"633\":1}}],[\"藉以达到排序的作用\",{\"1\":{\"424\":1}}],[\"桶子\",{\"1\":{\"428\":1}}],[\"桶子法\",{\"1\":{\"424\":1}}],[\"桶\",{\"1\":{\"424\":1}}],[\"桶排序的步骤\",{\"1\":{\"404\":1}}],[\"桶排序算法的复杂度和稳定性\",{\"1\":{\"403\":1}}],[\"桶排序则是提供了额外的操作空间\",{\"1\":{\"401\":1}}],[\"桶排序则是将集合拆分为多个桶\",{\"1\":{\"401\":1}}],[\"桶排序使用线性时间\",{\"1\":{\"401\":1}}],[\"桶排序是将待排序集合中处于同一个值域的元素存入同一个桶中\",{\"1\":{\"401\":1}}],[\"桶排序是\",{\"1\":{\"401\":2}}],[\"桶排序\",{\"0\":{\"401\":1},\"1\":{\"401\":1,\"406\":1,\"423\":3}}],[\"桶排序就是对计数排序\",{\"1\":{\"400\":1}}],[\"桶排序就是这么容易\",{\"0\":{\"399\":1},\"1\":{\"406\":1}}],[\"又分为两种\",{\"1\":{\"1420\":1}}],[\"又是什么\",{\"1\":{\"1416\":1}}],[\"又来挑战你了\",{\"1\":{\"1406\":1}}],[\"又能降低数据丢失的风险\",{\"1\":{\"1158\":1,\"1338\":1}}],[\"又叫做写锁\",{\"1\":{\"1150\":1,\"1333\":1}}],[\"又叫做读锁\",{\"1\":{\"1150\":1,\"1333\":1}}],[\"又默认为分段后的数据文件建立了索引文件\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"又会将老的数据写入到\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"又不想把没开发完的代码提交远程仓库\",{\"1\":{\"979\":1}}],[\"又想节省存储空间我们可以对数组进行压缩\",{\"1\":{\"695\":1}}],[\"又称\",{\"1\":{\"424\":1}}],[\"又可以充分利用bit数组的空间\",{\"1\":{\"392\":1}}],[\"白银一\",{\"0\":{\"702\":1,\"703\":1}}],[\"白嫖原创pdf\",{\"1\":{\"421\":1,\"795\":1}}],[\"白菜的价格\",{\"1\":{\"237\":1}}],[\"白菜价的云服务器\",{\"0\":{\"237\":1,\"238\":1}}],[\"级别的缓存\",{\"1\":{\"1416\":2}}],[\"级别的缓\",{\"1\":{\"1416\":1}}],[\"级别的结构化或者非结构化数据\",{\"1\":{\"453\":1}}],[\"级别越高压缩率越大\",{\"1\":{\"123\":1}}],[\"级\",{\"1\":{\"417\":1}}],[\"近似为nlogn\",{\"1\":{\"417\":1}}],[\"逐步递减\",{\"1\":{\"417\":1}}],[\"需谨慎使用非线程安全的类\",{\"1\":{\"1446\":1}}],[\"需与用户程序同时运行\",{\"1\":{\"1396\":1}}],[\"需求是怎么产生的\",{\"1\":{\"1502\":1}}],[\"需求从哪里来\",{\"1\":{\"1501\":1}}],[\"需求分析\",{\"0\":{\"1501\":1},\"1\":{\"1502\":1}}],[\"需求说明\",{\"1\":{\"855\":1}}],[\"需求\",{\"1\":{\"538\":1,\"1502\":1}}],[\"需交换n\",{\"1\":{\"417\":1}}],[\"需要先写一个\",{\"1\":{\"1512\":1}}],[\"需要全套源代码和手把手直播开发的朋友可阅读这里\",{\"1\":{\"1492\":1}}],[\"需要考虑\",{\"1\":{\"1476\":1}}],[\"需要考虑这个问题\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"需要强一致性的用悲观锁\",{\"1\":{\"1476\":1}}],[\"需要强转类型\",{\"1\":{\"1424\":1}}],[\"需要实现商品搜索功能\",{\"1\":{\"1458\":1}}],[\"需要权衡内存和cpu的使用情况\",{\"1\":{\"1430\":1}}],[\"需要深入学习与理解\",{\"1\":{\"1406\":1}}],[\"需要深入研读源码和官方文档方能全面理解\",{\"1\":{\"1398\":1}}],[\"需要你继续努力\",{\"1\":{\"1404\":1}}],[\"需要耐心学习与长期实践\",{\"1\":{\"1400\":1}}],[\"需要部分stw\",{\"1\":{\"1398\":1}}],[\"需要部分stw阶段\",{\"1\":{\"1396\":1}}],[\"需要stop\",{\"1\":{\"1398\":1}}],[\"需要stw\",{\"1\":{\"1394\":2,\"1396\":1,\"1398\":2}}],[\"需要记录新生代和老年代以及各个region之间的引用链\",{\"1\":{\"1398\":1}}],[\"需要更频繁的major\",{\"1\":{\"1396\":1}}],[\"需要更长的读取时间\",{\"1\":{\"579\":1}}],[\"需要处理一致性问题\",{\"1\":{\"1396\":1}}],[\"需要最终标记修正\",{\"1\":{\"1396\":1}}],[\"需要重写hashcode\",{\"1\":{\"1380\":1}}],[\"需要对其进行额外的同步措施\",{\"1\":{\"1446\":1}}],[\"需要对hashmap进行同步处理\",{\"1\":{\"1380\":1}}],[\"需要对每个不同的单词赋予唯一的单词编号\",{\"1\":{\"478\":1}}],[\"需要配置成\",{\"1\":{\"1195\":1,\"1368\":1}}],[\"需要通过factory\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"需要在\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"需要在mybatis中\",{\"1\":{\"863\":1}}],[\"需要等待行锁被释放\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"需要等待\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"需要等到所有学生回寝\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"需要测试该进程对资源的最大需求量\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"需要\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"需要从你的集群取回大量的文档\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"需要被取回\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"需要提前预热到缓存中\",{\"1\":{\"1008\":1,\"1217\":1}}],[\"需要过多的缓存空间\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"需要设置较短的过期时间\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"需要设置成server模式\",{\"1\":{\"755\":1}}],[\"需要修改servlet版本为3\",{\"1\":{\"883\":1}}],[\"需要手动完成结果集映射resultmap\",{\"1\":{\"856\":1}}],[\"需要手动定义映射\",{\"1\":{\"509\":1}}],[\"需要使用$\",{\"1\":{\"842\":1}}],[\"需要使用多个hash函数\",{\"1\":{\"386\":1}}],[\"需要告诉\",{\"1\":{\"835\":1}}],[\"需要找一个用来唯一标识一个构建的统一规范\",{\"1\":{\"768\":1}}],[\"需要拿到这个锁来获取执行任务权限的应用都停止了\",{\"1\":{\"727\":1}}],[\"需要涉及到地图的业务才会使用\",{\"1\":{\"723\":1}}],[\"需要将两个账号粉丝进行去重统计\",{\"1\":{\"719\":1}}],[\"需要将磁头放到这个扇区上方\",{\"1\":{\"327\":1}}],[\"需要时直接从池中取用\",{\"1\":{\"708\":1}}],[\"需要自己手动来写\",{\"1\":{\"678\":1}}],[\"需要严格保证数据一致性的场合\",{\"1\":{\"633\":1}}],[\"需要支持高并发访问的系统\",{\"1\":{\"632\":1}}],[\"需要额外进行数据操作的路由工作\",{\"1\":{\"581\":1}}],[\"需要分析查询类型\",{\"1\":{\"565\":1}}],[\"需要维护树的平衡\",{\"1\":{\"562\":1}}],[\"需要一个用户管理系统来把这些人管理起来\",{\"1\":{\"1502\":1}}],[\"需要一个一个的去加载mapper\",{\"1\":{\"835\":1}}],[\"需要一个leader\",{\"1\":{\"170\":1}}],[\"需要一定的回报\",{\"1\":{\"551\":1}}],[\"需要确定全局唯一id是整型还是字符串\",{\"1\":{\"435\":1}}],[\"需要传入两个参数\",{\"1\":{\"392\":1}}],[\"需要注意的是counter只能增不能减\",{\"1\":{\"946\":1}}],[\"需要注意的是上图中的自定义路径必须存在\",{\"1\":{\"765\":1}}],[\"需要注意的是\",{\"1\":{\"341\":1,\"574\":1}}],[\"需要用户具备一定的linux知识和技能\",{\"1\":{\"243\":1}}],[\"需要的可以看看\",{\"1\":{\"238\":1}}],[\"需要的自行下单\",{\"1\":{\"237\":1}}],[\"需要参数加密做好脱敏处理和说明\",{\"1\":{\"212\":1}}],[\"需要和外部公司对接\",{\"1\":{\"203\":1}}],[\"需要进入leader选举\",{\"1\":{\"183\":1}}],[\"调度员\",{\"1\":{\"1434\":1}}],[\"调优\",{\"1\":{\"1108\":1}}],[\"调优的参数都有哪些\",{\"0\":{\"1108\":1,\"1299\":1}}],[\"调优手段是现在很常见的面试题\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"调整数据库隔离级别\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"调整线程池和队列大小\",{\"1\":{\"1030\":1,\"1234\":1}}],[\"调整大顶堆\",{\"1\":{\"417\":1}}],[\"调整堆结构+交换堆顶元素与末尾元素\",{\"1\":{\"417\":1}}],[\"调用者就一目了然了\",{\"1\":{\"1494\":1}}],[\"调用handler\",{\"1\":{\"1414\":1}}],[\"调用方法之后\",{\"1\":{\"1416\":1}}],[\"调用方法之前\",{\"1\":{\"1416\":1}}],[\"调用方法\",{\"1\":{\"1410\":1}}],[\"调用自定义的\",{\"1\":{\"1410\":2}}],[\"调用相应的处理逻辑\",{\"1\":{\"1402\":1}}],[\"调用静态方法\",{\"1\":{\"1392\":1}}],[\"调用该类的静态方法\",{\"1\":{\"1392\":1}}],[\"调用getbean\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"调用不同的方法\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"调用statement来赋值\",{\"1\":{\"1131\":1,\"1316\":1}}],[\"调用session\",{\"1\":{\"814\":2}}],[\"调用preparedstatement来赋值\",{\"1\":{\"1131\":1,\"1316\":1}}],[\"调用配置的分区选择算法选择分区的leader\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"调用await\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"调用addelem添加的时间复杂度为o\",{\"1\":{\"339\":1}}],[\"调用interrupt方法是在当前线程中打了一个停止标志\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"调用了该对象的start\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"调用\",{\"1\":{\"296\":1,\"1085\":1,\"1278\":1,\"1386\":1,\"1408\":1,\"1414\":3,\"1481\":2}}],[\"调用llama3试用\",{\"0\":{\"294\":1}}],[\"得到主服务器最新的数据\",{\"1\":{\"1422\":1}}],[\"得到请求对应的\",{\"1\":{\"1408\":1}}],[\"得到key在数组中对应的下标\",{\"1\":{\"1077\":1,\"1272\":1}}],[\"得到key的hash值\",{\"1\":{\"1077\":1,\"1272\":1}}],[\"得到的值\",{\"1\":{\"441\":1}}],[\"得到第二大元素8\",{\"1\":{\"417\":1}}],[\"得到数列的最大值\",{\"1\":{\"413\":1}}],[\"交错提交时有可能互相排斥导致没有一个proposer能提交成功\",{\"1\":{\"1203\":1,\"1376\":1}}],[\"交换会导致性能问题\",{\"1\":{\"1030\":1,\"1234\":1}}],[\"交换元素\",{\"1\":{\"417\":1}}],[\"交换\",{\"1\":{\"417\":1}}],[\"交换4和6\",{\"1\":{\"417\":1}}],[\"交换导致了子根\",{\"1\":{\"417\":1}}],[\"交互\",{\"0\":{\"132\":1},\"1\":{\"1116\":1,\"1304\":1}}],[\"叶结点自然不用调整\",{\"1\":{\"417\":1}}],[\"叶子节点类似于一个单链表\",{\"1\":{\"317\":1}}],[\"叶子节点中有指向下一个叶子节点的指针\",{\"1\":{\"317\":1}}],[\"叶子节点保存了完整的索引和数据\",{\"1\":{\"317\":1}}],[\"便可以将事务规则应用到业务逻辑中\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"便返回指向integercache\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"便诞生了handler组件\",{\"1\":{\"991\":1}}],[\"便能得到一个有序序列了\",{\"1\":{\"417\":1}}],[\"便宜的流量\",{\"1\":{\"264\":1}}],[\"称为\",{\"1\":{\"453\":1}}],[\"称为小顶堆\",{\"1\":{\"417\":1}}],[\"称为大顶堆\",{\"1\":{\"417\":1}}],[\"弄清楚\",{\"1\":{\"417\":1}}],[\"范围类型可以用来表达一个数据的区间\",{\"1\":{\"501\":1}}],[\"范围类型\",{\"0\":{\"501\":1},\"1\":{\"495\":1}}],[\"范围在0到1亿之间\",{\"1\":{\"414\":1}}],[\"范围缩小的速度越快\",{\"1\":{\"319\":1}}],[\"局部变量上\",{\"1\":{\"1402\":1}}],[\"局部变量表等信息也会被销毁\",{\"1\":{\"1388\":1}}],[\"局部变量\",{\"1\":{\"1101\":1,\"1292\":1,\"1402\":1}}],[\"局部性原理与磁盘预读\",{\"1\":{\"327\":1}}],[\"局部性原理\",{\"1\":{\"319\":1}}],[\"局限性\",{\"0\":{\"414\":1}}],[\"遍历慢\",{\"1\":{\"1380\":1}}],[\"遍历会很慢\",{\"1\":{\"1380\":1}}],[\"遍历oldtable的每个桶\",{\"1\":{\"1380\":1}}],[\"遍历到有新数据可以处理时\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"遍历统计数组\",{\"1\":{\"413\":1}}],[\"遍历数列\",{\"1\":{\"413\":1}}],[\"遍历待排序集合\",{\"1\":{\"404\":1}}],[\"操作完成的同时\",{\"1\":{\"1478\":1}}],[\"操作方式\",{\"1\":{\"1478\":1}}],[\"操作进行检查时就可以发现版本号不同\",{\"1\":{\"1476\":1}}],[\"操作只会在预期值a和当前值相同时更改为新值b\",{\"1\":{\"1476\":1}}],[\"操作开始时\",{\"1\":{\"1476\":1}}],[\"操作包含三个操作数\",{\"1\":{\"1476\":1}}],[\"操作过程\",{\"1\":{\"1380\":1}}],[\"操作符\",{\"1\":{\"1149\":1,\"1332\":1}}],[\"操作来保证并发度高的操作\",{\"1\":{\"1380\":1}}],[\"操作来实现悲观锁\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"操作来说的\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"操作不触发trigger\",{\"1\":{\"1147\":1,\"1330\":1}}],[\"操作立即生效\",{\"1\":{\"1147\":1,\"1330\":1}}],[\"操作数栈\",{\"1\":{\"1099\":1,\"1101\":1,\"1290\":1,\"1292\":1,\"1388\":1}}],[\"操作注解使其起作用\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"操作失败\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"操作成功\",{\"1\":{\"1007\":1,\"1216\":1,\"1494\":2}}],[\"操作都为异步的\",{\"1\":{\"991\":1}}],[\"操作crud\",{\"1\":{\"810\":2}}],[\"操作已完成\",{\"1\":{\"688\":1}}],[\"操作命令\",{\"1\":{\"663\":1}}],[\"操作\",{\"1\":{\"412\":1,\"513\":1,\"693\":1,\"711\":1,\"980\":1,\"981\":2,\"1056\":1,\"1145\":2,\"1254\":1,\"1328\":2,\"1392\":1,\"1478\":2}}],[\"操作系统按照银行家指定的规则为进程分配资源\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"操作系统会通知程序\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"操作系统\",{\"1\":{\"238\":1}}],[\"冒泡排序还是快速排序等等\",{\"1\":{\"412\":1}}],[\"冒号后面的\",{\"1\":{\"162\":1}}],[\"冒号前面的\",{\"1\":{\"162\":1}}],[\"题目\",{\"1\":{\"412\":1}}],[\"题解\",{\"1\":{\"406\":1}}],[\"减follower的数量提高伸缩性\",{\"1\":{\"1196\":1,\"1369\":1}}],[\"减小交叉持有资源情况\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"减小锁的范围\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"减省了方法调用间参数的传递\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"减库存\",{\"1\":{\"657\":1,\"893\":1}}],[\"减1是因为可表示的数值范围是从0开始算的\",{\"1\":{\"440\":1}}],[\"减去1\",{\"1\":{\"411\":1}}],[\"减少重复工作\",{\"1\":{\"1507\":1}}],[\"减少停顿\",{\"1\":{\"1396\":1}}],[\"减少垃圾收集时程序暂停的时间\",{\"1\":{\"1396\":1}}],[\"减少业务代码的污染\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"减少代码量\",{\"1\":{\"1130\":1,\"1315\":1}}],[\"减少网络传输的开销\",{\"1\":{\"1440\":1}}],[\"减少网络\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"减少时间消耗\",{\"1\":{\"999\":1,\"1208\":1}}],[\"减少馆藏数量\",{\"1\":{\"889\":1}}],[\"减少连接创建时间\",{\"1\":{\"708\":1}}],[\"减少修改字符串长度时所需的内存重分配次数\",{\"1\":{\"683\":1}}],[\"减少内存分配的次数\",{\"1\":{\"683\":1}}],[\"减少系统开销\",{\"1\":{\"637\":1}}],[\"减少碎片化\",{\"1\":{\"574\":2}}],[\"减少回表\",{\"1\":{\"567\":1}}],[\"减少了时间开销\",{\"1\":{\"708\":1}}],[\"减少了锁冲突的可能性\",{\"1\":{\"624\":1,\"628\":1}}],[\"减少了i\",{\"1\":{\"566\":1}}],[\"减少了磁盘io\",{\"1\":{\"579\":1}}],[\"减少了磁盘\",{\"1\":{\"323\":1}}],[\"减少了多次循环\",{\"1\":{\"190\":1}}],[\"减少磁盘\",{\"1\":{\"319\":1}}],[\"减少波动\",{\"1\":{\"151\":1}}],[\"项\",{\"1\":{\"411\":1}}],[\"项目测试的\",{\"1\":{\"1524\":1}}],[\"项目后\",{\"1\":{\"1511\":1,\"1519\":1}}],[\"项目组文档自行取阅\",{\"1\":{\"1492\":1}}],[\"项目组\",{\"0\":{\"1485\":1,\"1492\":1},\"1\":{\"1492\":1}}],[\"项目打成jar包就能独立运行\",{\"1\":{\"1182\":1,\"1357\":1}}],[\"项目练手\",{\"1\":{\"1019\":1,\"1225\":1}}],[\"项目启动时\",{\"1\":{\"1008\":1,\"1217\":1}}],[\"项目所属的实际项目组\",{\"1\":{\"907\":1}}],[\"项目目录结构参考\",{\"1\":{\"903\":1}}],[\"项目基本属性\",{\"1\":{\"900\":1}}],[\"项目元数据\",{\"1\":{\"900\":1}}],[\"项目\",{\"0\":{\"913\":1,\"936\":1},\"1\":{\"874\":1,\"900\":1,\"902\":1,\"907\":1,\"1507\":1}}],[\"项目a中\",{\"1\":{\"772\":1}}],[\"项目a配置slf4j的依赖并设置optional为true\",{\"1\":{\"771\":1}}],[\"项目版本号\",{\"1\":{\"766\":1,\"767\":1}}],[\"项目名称\",{\"1\":{\"766\":1,\"767\":1}}],[\"项目名称描述\",{\"1\":{\"762\":1}}],[\"项目部署等\",{\"1\":{\"761\":1}}],[\"项目的代码模块目录\",{\"1\":{\"1502\":1}}],[\"项目的根据大小还有背景不同\",{\"1\":{\"1502\":1}}],[\"项目的自动化配置\",{\"1\":{\"1183\":1,\"1358\":1}}],[\"项目的名称和描述\",{\"1\":{\"907\":1}}],[\"项目的名称来自mpeg视频编码标准\",{\"1\":{\"139\":1}}],[\"项目的方式\",{\"1\":{\"899\":1}}],[\"项目的开发和维护\",{\"1\":{\"652\":1}}],[\"项目方部署空投合约\",{\"1\":{\"539\":1}}],[\"项目总结\",{\"1\":{\"447\":1}}],[\"项目中用到的技术点和手记都免费公开\",{\"1\":{\"233\":1}}],[\"项目实战\",{\"0\":{\"233\":1},\"2\":{\"234\":1,\"235\":1,\"1486\":1,\"1487\":1,\"1490\":1,\"1491\":1,\"1495\":1,\"1496\":1,\"1499\":1,\"1500\":1,\"1503\":1,\"1504\":1,\"1508\":1,\"1509\":1,\"1516\":1,\"1517\":1,\"1526\":1,\"1527\":1}}],[\"项目主页\",{\"0\":{\"0\":1}}],[\"找出正确的\",{\"1\":{\"1414\":1}}],[\"找出应用相关的bean\",{\"1\":{\"1402\":1}}],[\"找出性能瓶颈\",{\"1\":{\"1400\":1}}],[\"找出待排序的数组中最大和最小的元素\",{\"1\":{\"411\":1}}],[\"找寻并加载类的二进制数据\",{\"1\":{\"1392\":1}}],[\"找\",{\"1\":{\"1196\":1,\"1369\":1}}],[\"找到最小的节点\",{\"1\":{\"1466\":1}}],[\"找到匹配的结果并返回\",{\"1\":{\"1462\":1}}],[\"找到正确的\",{\"1\":{\"1408\":1}}],[\"找到正数立即返回\",{\"1\":{\"190\":1}}],[\"找到类文件了\",{\"1\":{\"1392\":1}}],[\"找到$\",{\"1\":{\"765\":1}}],[\"找到引起死锁的进程\",{\"1\":{\"644\":1}}],[\"找到第二个非叶节点4\",{\"1\":{\"417\":1}}],[\"找到比其小的数\",{\"1\":{\"405\":1}}],[\"找到待插入位置的前一个节点prev\",{\"1\":{\"339\":1}}],[\"找到待删除节点delete的前一个节点prev\",{\"1\":{\"339\":1}}],[\"找到了两个整数\",{\"1\":{\"306\":1}}],[\"堆初始值\",{\"1\":{\"1400\":1}}],[\"堆最大值\",{\"1\":{\"1400\":1}}],[\"堆内存中又分为几个区域\",{\"1\":{\"1394\":1}}],[\"堆内存存储对象实例\",{\"1\":{\"1394\":1}}],[\"堆内存\",{\"1\":{\"1394\":3}}],[\"堆内存设置为\",{\"1\":{\"1030\":1,\"1234\":1}}],[\"堆对于整个应用程序都是共享\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"堆存放的是对象的实例和数组\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"堆因为是不连续的\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"堆的物理地址分配对象是不连续的\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"堆是一个近似完全二叉树的结构\",{\"1\":{\"417\":1}}],[\"堆是具有以下性质的完全二叉树\",{\"1\":{\"417\":1}}],[\"堆排序的基本思想是\",{\"1\":{\"417\":1}}],[\"堆排序是一种选择排序\",{\"1\":{\"417\":1}}],[\"堆排序是一种\",{\"1\":{\"417\":1}}],[\"堆排序是利用这种数据结构而设计的一种排序算法\",{\"1\":{\"417\":1}}],[\"堆排序在常用排序算法中属于比较难理解的\",{\"1\":{\"417\":1}}],[\"堆排序就是这么容易\",{\"0\":{\"417\":1}}],[\"堆排序\",{\"1\":{\"410\":1,\"417\":1}}],[\"堆和堆排序\",{\"0\":{\"361\":1}}],[\"ο\",{\"1\":{\"410\":1}}],[\"真是一个非常愉快的交流过程\",{\"1\":{\"1424\":1}}],[\"真是一个很细致的区分\",{\"1\":{\"1424\":1}}],[\"真的吗\",{\"1\":{\"1440\":1}}],[\"真的学到很多\",{\"1\":{\"1424\":1}}],[\"真的很常用\",{\"1\":{\"1402\":1}}],[\"真的非常方便\",{\"1\":{\"969\":1}}],[\"真诚地希望这些知识能在你的工作中派上用场\",{\"1\":{\"1392\":1}}],[\"真不容易\",{\"1\":{\"1392\":1}}],[\"真正干活的其实是\",{\"1\":{\"1414\":1}}],[\"真正做到面向切面编程\",{\"1\":{\"1402\":1}}],[\"真正在写操作的业务逻辑\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"真正的无连接数据包套接字支持\",{\"1\":{\"989\":1}}],[\"真题\",{\"1\":{\"406\":1}}],[\"真实的\",{\"1\":{\"323\":1}}],[\"该代码块使用\",{\"1\":{\"1480\":1}}],[\"该机制可以保证主进程始终可用\",{\"1\":{\"1420\":1}}],[\"该特性允许每个客户端为自己设置一个命名空间\",{\"1\":{\"1202\":1,\"1375\":1}}],[\"该注解主要由三个注解组成\",{\"1\":{\"1184\":1,\"1359\":1}}],[\"该参数是对映射信息的封装\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"该对象为垃圾\",{\"1\":{\"1394\":1}}],[\"该对象中包含了执行\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"该对象所占用的内存就会被自动释放\",{\"1\":{\"699\":1}}],[\"该文件中配置了操作数据库的\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"该文档依然能匹配查询\",{\"1\":{\"1033\":1,\"1237\":1}}],[\"该文档指定了父文档\",{\"1\":{\"510\":1}}],[\"该线程需要完成该\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"该\",{\"1\":{\"1123\":1,\"1135\":1,\"1311\":1,\"1320\":1}}],[\"该节点上的\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"该区更关注的是程序方法的执行\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"该状态不同于waiting\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"该状态的线程位于可运行线程池中\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"该接口公开了度量的列表和当前的值\",{\"1\":{\"946\":1}}],[\"该指令用于统计给定的\",{\"1\":{\"721\":1}}],[\"该学的都学了\",{\"1\":{\"715\":1}}],[\"该属性记录了对象最后一次被命令程序访问的时间\",{\"1\":{\"698\":1}}],[\"该哈希表已有节点的数量\",{\"1\":{\"687\":1}}],[\"该类型可以通过缩放因子来精确浮点数\",{\"1\":{\"497\":1}}],[\"该数据可以被索引\",{\"1\":{\"484\":1}}],[\"该框架使用了特定的方式来进行配置\",{\"1\":{\"454\":1}}],[\"该方法用于传递\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"该方法会使当前线程进入阻塞状态指定毫秒\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"该方法是线程安全的\",{\"1\":{\"441\":1}}],[\"该方法对不同的基本数据类型都有对应的重载方法\",{\"1\":{\"405\":1}}],[\"该算法于1954年由\",{\"1\":{\"410\":1}}],[\"该用户是非会员\",{\"1\":{\"228\":1}}],[\"该用户是\",{\"1\":{\"228\":1}}],[\"步骤\",{\"0\":{\"411\":1,\"428\":1,\"1513\":1,\"1521\":1},\"1\":{\"404\":1}}],[\"宽泛\",{\"1\":{\"403\":1}}],[\"映射到\",{\"1\":{\"1408\":1}}],[\"映射到对应槽位\",{\"1\":{\"558\":1}}],[\"映射请求url\",{\"1\":{\"1402\":1}}],[\"映射请求url到控制器处理方法\",{\"1\":{\"1402\":1}}],[\"映射\",{\"1\":{\"1380\":1,\"1460\":1}}],[\"映射文件中直接插入一些逻辑\",{\"1\":{\"1416\":1}}],[\"映射文件即\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"映射文件内\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"映射文件\",{\"0\":{\"1132\":1,\"1317\":1},\"1\":{\"1136\":1,\"1321\":1,\"1416\":1}}],[\"映射文件的statement的id必须和mapper接口的方法名保持一致\",{\"1\":{\"826\":1}}],[\"映射文件的命名空间\",{\"1\":{\"826\":1}}],[\"映射地址\",{\"1\":{\"913\":1}}],[\"映射语句\",{\"1\":{\"835\":1}}],[\"映射为一个唯一\",{\"1\":{\"721\":1}}],[\"映射参数解析\",{\"1\":{\"493\":1}}],[\"映射参数\",{\"0\":{\"493\":1}}],[\"映射规则需要根据待排序集合的元素分布特性进行选择\",{\"1\":{\"403\":1}}],[\"映射对应的值到\",{\"1\":{\"386\":1,\"392\":1}}],[\"快递小哥\",{\"1\":{\"1434\":1}}],[\"快照方式重启恢复快\",{\"1\":{\"1158\":1,\"1338\":1}}],[\"快照读与当前读\",{\"1\":{\"638\":1}}],[\"快\",{\"1\":{\"999\":1,\"1208\":1}}],[\"快于任何比较排序算法\",{\"1\":{\"410\":1}}],[\"快排是在集合本身上进行排序\",{\"1\":{\"401\":1}}],[\"快速构建一个java项目结构\",{\"1\":{\"766\":1}}],[\"快速排序是将集合拆分为两个值域\",{\"1\":{\"401\":1}}],[\"快速索引需要有效的减少磁盘\",{\"1\":{\"319\":1}}],[\"快速处理\",{\"1\":{\"247\":1}}],[\"快速定位存储了数据的叶子节点\",{\"1\":{\"562\":1}}],[\"快速定位到数据\",{\"1\":{\"562\":1}}],[\"快速定位\",{\"1\":{\"219\":1}}],[\"快速开始调试程序\",{\"1\":{\"208\":1}}],[\"快速入门\",{\"0\":{\"173\":1,\"804\":1}}],[\"快速搭建项目\",{\"1\":{\"454\":1}}],[\"快速搭建\",{\"0\":{\"125\":1,\"971\":1}}],[\"快速搭建prometheus+grafana保姆级教程\",{\"0\":{\"124\":1}}],[\"快速掌握生产环境中实战要点\",{\"1\":{\"87\":1}}],[\"θ\",{\"1\":{\"401\":1}}],[\"鸽巢排序\",{\"1\":{\"401\":1}}],[\"衰减的布隆过滤器等\",{\"1\":{\"396\":1}}],[\"至此\",{\"1\":{\"858\":1,\"893\":1,\"1187\":1,\"1362\":1,\"1507\":1}}],[\"至目标测试目录\",{\"1\":{\"776\":1}}],[\"至目标目录\",{\"1\":{\"776\":1}}],[\"至于阈值为什么是8\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"至于安装方式是\",{\"1\":{\"706\":1}}],[\"至于参数估计的方法\",{\"1\":{\"392\":1}}],[\"至\",{\"1\":{\"440\":1,\"688\":1,\"692\":1}}],[\"至少需要的大小\",{\"1\":{\"338\":1}}],[\"综上\",{\"1\":{\"1392\":1,\"1410\":1}}],[\"综上所述\",{\"1\":{\"392\":1}}],[\"综合这几点\",{\"1\":{\"263\":1}}],[\"位用于存储是否是偏向锁\",{\"1\":{\"1480\":1}}],[\"位用于存储锁标志位\",{\"1\":{\"1480\":1}}],[\"位用于存储对象的分代年龄\",{\"1\":{\"1480\":1}}],[\"位用于存储对象的哈希码和分代年龄\",{\"1\":{\"1480\":1}}],[\"位用于存储对象的哈希码\",{\"1\":{\"1480\":1}}],[\"位的\",{\"1\":{\"1480\":1}}],[\"位的数量\",{\"1\":{\"721\":1}}],[\"位于\",{\"1\":{\"1392\":1}}],[\"位运算的效率远高于取模运算\",{\"1\":{\"1080\":1,\"1275\":1}}],[\"位即可\",{\"1\":{\"721\":1}}],[\"位表示\",{\"1\":{\"721\":1}}],[\"位映射为\",{\"1\":{\"721\":1}}],[\"位利用起来\",{\"1\":{\"721\":1}}],[\"位和\",{\"1\":{\"660\":1}}],[\"位图索引通常在低基数列\",{\"1\":{\"568\":1}}],[\"位图索引是一种将数据列的所有可能值映射到二进制位上的索引\",{\"1\":{\"568\":1}}],[\"位\",{\"1\":{\"440\":1,\"660\":1,\"721\":2}}],[\"位机器码重复\",{\"1\":{\"440\":1}}],[\"位数组总长度\",{\"1\":{\"395\":1}}],[\"位数组长度\",{\"1\":{\"393\":1}}],[\"位数组长度和误差率都是拍脑袋定的\",{\"1\":{\"392\":1}}],[\"位数组\",{\"1\":{\"386\":2,\"392\":2,\"395\":1}}],[\"位置\",{\"1\":{\"482\":1,\"1026\":1,\"1230\":1}}],[\"位置信息只有在支持\",{\"1\":{\"478\":1}}],[\"位置都为1\",{\"1\":{\"386\":1,\"392\":1}}],[\"位置不合法\",{\"1\":{\"339\":1}}],[\"位置不合法异常\",{\"1\":{\"338\":1,\"339\":1}}],[\"位置对应的元素\",{\"1\":{\"337\":1}}],[\"置位1\",{\"1\":{\"386\":1,\"392\":1}}],[\"宁错杀三千\",{\"1\":{\"383\":1}}],[\"英\",{\"1\":{\"1056\":1,\"1064\":1,\"1254\":1,\"1262\":1}}],[\"英文基础知识\",{\"1\":{\"967\":1}}],[\"英文记做\",{\"1\":{\"335\":1}}],[\"英语\",{\"1\":{\"417\":1}}],[\"英雄联盟布隆\",{\"1\":{\"382\":1}}],[\"坚不可摧\",{\"1\":{\"382\":2}}],[\"布尔类型常用于检索中的过滤条件\",{\"1\":{\"499\":1}}],[\"布尔类型\",{\"0\":{\"499\":1},\"1\":{\"495\":1}}],[\"布尔\",{\"1\":{\"482\":1}}],[\"布隆过滤原理图\",{\"1\":{\"386\":1,\"392\":1}}],[\"布隆过滤器底层选用的数据结构就是\",{\"1\":{\"721\":1}}],[\"布隆过滤器换包含\",{\"1\":{\"396\":1}}],[\"布隆过滤器自提出以后\",{\"1\":{\"395\":1}}],[\"布隆过滤器参数计算公式\",{\"1\":{\"392\":1}}],[\"布隆过滤器只能插入数据\",{\"1\":{\"387\":1}}],[\"布隆过滤器的核心思想\",{\"1\":{\"395\":1}}],[\"布隆过滤器的核心是\",{\"1\":{\"383\":1}}],[\"布隆过滤器的属性\",{\"0\":{\"387\":1}}],[\"布隆过滤器的原理还是比较简单的\",{\"1\":{\"386\":1}}],[\"布隆过滤器的原理和哈希表的原理有点类似\",{\"1\":{\"386\":1}}],[\"布隆过滤器可以用于检索一个元素是否在一个集合中\",{\"1\":{\"385\":1}}],[\"布隆过滤器\",{\"1\":{\"385\":1,\"389\":1,\"1004\":2,\"1213\":2},\"2\":{\"398\":1}}],[\"布隆过滤器主要用来做去重操作\",{\"1\":{\"383\":1}}],[\"布隆朝一个方向举起盾牌\",{\"1\":{\"382\":1}}],[\"布隆大家都知道吧\",{\"1\":{\"382\":1}}],[\"布局包括\",{\"1\":{\"21\":1}}],[\"布局\",{\"0\":{\"21\":1},\"2\":{\"23\":1}}],[\"布局与功能禁用\",{\"0\":{\"18\":1}}],[\"拓扑排序\",{\"0\":{\"377\":1}}],[\"拓展的也更多一点\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"拓展题\",{\"0\":{\"1080\":1,\"1275\":1}}],[\"拓展阅读\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"拓展\",{\"0\":{\"324\":1,\"1009\":1,\"1203\":1,\"1218\":1,\"1376\":1},\"1\":{\"1034\":1,\"1189\":1,\"1238\":1,\"1364\":1}}],[\"邻接矩阵\",{\"0\":{\"372\":1}}],[\"广义表的定义\",{\"0\":{\"356\":1}}],[\"广泛的系统架构支持\",{\"1\":{\"241\":1}}],[\"广泛的硬件兼容性\",{\"1\":{\"239\":1}}],[\"广泛的文档和社区支持\",{\"1\":{\"239\":1}}],[\"折半查找\",{\"0\":{\"355\":1}}],[\"递归深度等\",{\"1\":{\"1481\":1}}],[\"递归深度偏移量\",{\"1\":{\"1481\":1}}],[\"递归深度\",{\"1\":{\"1481\":1}}],[\"递归函数的执行过程\",{\"0\":{\"354\":1}}],[\"递归\",{\"0\":{\"353\":1}}],[\"递归授权所有文件\",{\"1\":{\"111\":1}}],[\"希尔排序和基数排序\",{\"0\":{\"349\":1}}],[\"希望下次还能见到你\",{\"1\":{\"1474\":1}}],[\"希望这个对话能帮助到你\",{\"1\":{\"1470\":1}}],[\"希望这些技巧能帮助你提高\",{\"1\":{\"1440\":1}}],[\"希望我能帮到你\",{\"1\":{\"1466\":1}}],[\"希望能有机会为您的团队贡献我的技术能力\",{\"1\":{\"1458\":1}}],[\"希望能有机会为您的团队贡献我的技术和经验\",{\"1\":{\"1456\":1}}],[\"希望能对你有所帮助\",{\"1\":{\"1394\":1}}],[\"希望能够帮助您更好地理解\",{\"1\":{\"1386\":1}}],[\"希望使用1个方法来完成操作\",{\"1\":{\"842\":1}}],[\"希望你在日后继续深入学习其他垃圾收集算法\",{\"1\":{\"1396\":1}}],[\"希望你能保护好自己\",{\"1\":{\"703\":1}}],[\"希望你喜欢这篇有趣的数学小文章\",{\"1\":{\"308\":1}}],[\"希望将大家留在这个玩法中\",{\"1\":{\"536\":1}}],[\"希望可以结识你\",{\"1\":{\"167\":1,\"381\":1,\"400\":1,\"409\":1,\"417\":1,\"430\":1,\"650\":1,\"676\":1,\"711\":1,\"761\":1}}],[\"希望码率波动\",{\"1\":{\"151\":1}}],[\"依此形成一个链条\",{\"1\":{\"1392\":1}}],[\"依此类推\",{\"1\":{\"790\":1}}],[\"依赖管理和自动配置的能力\",{\"1\":{\"1408\":1}}],[\"依赖管理和项目信息管理\",{\"1\":{\"762\":1}}],[\"依赖注入\",{\"1\":{\"1186\":1,\"1361\":1}}],[\"依赖注入之前\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"依赖注入和生命周期管理\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"依赖注入是我们实现控制反转的一种手段\",{\"1\":{\"1170\":1,\"1347\":1}}],[\"依赖了slf4j1\",{\"1\":{\"772\":1}}],[\"依赖冲突频发\",{\"1\":{\"1506\":1}}],[\"依赖冲突是很常见的问题\",{\"1\":{\"772\":1}}],[\"依赖冲突\",{\"0\":{\"772\":1}}],[\"依赖于a\",{\"1\":{\"771\":1}}],[\"依赖的范围如下表\",{\"1\":{\"770\":1}}],[\"依赖范围scope\",{\"1\":{\"769\":1}}],[\"依赖范围\",{\"0\":{\"769\":1},\"1\":{\"769\":1}}],[\"依赖\",{\"1\":{\"711\":1,\"770\":2,\"778\":1,\"1412\":3,\"1507\":1}}],[\"依赖性问题出现的很少\",{\"1\":{\"241\":1}}],[\"依次方便\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"依次将消息发送该topic下的所有分区\",{\"1\":{\"1119\":1,\"1307\":1}}],[\"依次递归\",{\"1\":{\"1106\":1,\"1297\":1}}],[\"依次进行一次排序\",{\"1\":{\"427\":1}}],[\"依次出队\",{\"1\":{\"342\":3}}],[\"依次插入1\",{\"1\":{\"342\":1}}],[\"准面试官等\",{\"1\":{\"586\":1}}],[\"准备分配内存并设置初始值\",{\"1\":{\"1392\":1}}],[\"准备和解析\",{\"1\":{\"1392\":1}}],[\"准备数据\",{\"0\":{\"799\":1}}],[\"准备打包\",{\"1\":{\"776\":1}}],[\"准备了\",{\"1\":{\"556\":1,\"615\":1}}],[\"准备\",{\"1\":{\"465\":1,\"466\":1,\"1105\":1,\"1296\":1,\"1392\":1}}],[\"准备工作\",{\"1\":{\"342\":1}}],[\"准确来说\",{\"1\":{\"148\":1}}],[\"运用得更加娴熟高效\",{\"1\":{\"1400\":1}}],[\"运行阶段\",{\"1\":{\"1402\":1}}],[\"运行期\",{\"1\":{\"1402\":1}}],[\"运行期使用\",{\"1\":{\"1402\":1}}],[\"运行成功\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"运行容器\",{\"1\":{\"1020\":1,\"1226\":1}}],[\"运行和分发应用程序的过程\",{\"1\":{\"1014\":1,\"1220\":1}}],[\"运行本地服务器\",{\"1\":{\"975\":1}}],[\"运行上一步中的\",{\"1\":{\"902\":1}}],[\"运行项目\",{\"0\":{\"895\":1}}],[\"运行任何一个阶段的时候\",{\"1\":{\"776\":1}}],[\"运行任何检查\",{\"1\":{\"776\":1}}],[\"运行某个阶段的时候\",{\"1\":{\"775\":1}}],[\"运行mvn\",{\"1\":{\"775\":1}}],[\"运行所有这三套生命周期\",{\"1\":{\"774\":1}}],[\"运行时注解主要有两大使用场景\",{\"1\":{\"1402\":1}}],[\"运行时注解的使用场景\",{\"1\":{\"1402\":1}}],[\"运行时可以通过反射获取\",{\"1\":{\"1402\":1}}],[\"运行时无法获得\",{\"1\":{\"1402\":1}}],[\"运行时数据区域就是我们常说的jvm的内存\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"运行时异常类\",{\"1\":{\"892\":1}}],[\"运行时提供\",{\"1\":{\"769\":1}}],[\"运行时刻内存的分配\",{\"1\":{\"755\":1}}],[\"运行三种classpath都有效\",{\"1\":{\"769\":1}}],[\"运行的classpath的关系\",{\"1\":{\"769\":1}}],[\"运行测试代码\",{\"1\":{\"768\":1}}],[\"运行\",{\"0\":{\"918\":1},\"1\":{\"660\":1,\"1057\":2,\"1255\":2,\"1402\":1}}],[\"运行结果\",{\"1\":{\"341\":1,\"342\":1}}],[\"运维人员会将项目部署到用户可以访问的服务器\",{\"1\":{\"1502\":1}}],[\"运维监控重点关注\",{\"1\":{\"219\":1}}],[\"运维operations\",{\"0\":{\"122\":1}}],[\"入列有编号\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"入口文件\",{\"1\":{\"974\":1}}],[\"入口路径\",{\"1\":{\"907\":1}}],[\"入门教程\",{\"1\":{\"715\":1}}],[\"入门就先简单学到这里\",{\"1\":{\"671\":1}}],[\"入门\",{\"1\":{\"667\":1}}],[\"入门知识\",{\"1\":{\"650\":1}}],[\"入门到实战\",{\"1\":{\"650\":1}}],[\"入队a\",{\"1\":{\"341\":1}}],[\"入栈\",{\"1\":{\"335\":1}}],[\"头中自定义属性并验证\",{\"1\":{\"1094\":1,\"1287\":1}}],[\"头部压缩\",{\"1\":{\"1095\":1,\"1288\":1}}],[\"头部\",{\"1\":{\"667\":1}}],[\"头指针\",{\"1\":{\"341\":1}}],[\"头结点\",{\"1\":{\"339\":1}}],[\"队只有一个元素时直接初始化即可\",{\"1\":{\"342\":1}}],[\"队为空时\",{\"1\":{\"342\":1}}],[\"队尾指针\",{\"1\":{\"342\":1}}],[\"队尾指针+1\",{\"1\":{\"341\":1}}],[\"队头指针\",{\"1\":{\"342\":1}}],[\"队头指针+1\",{\"1\":{\"341\":1}}],[\"队满则无法进队\",{\"1\":{\"341\":1}}],[\"队满\",{\"1\":{\"341\":1}}],[\"队满的条件也是\",{\"1\":{\"341\":1}}],[\"队空判断\",{\"1\":{\"342\":1}}],[\"队空\",{\"1\":{\"341\":1}}],[\"队空状态的条件为\",{\"1\":{\"341\":1}}],[\"队列删除序列号最小的节点用以消费\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"队列按照\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"队列管理\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"队列是否为满\",{\"1\":{\"341\":2}}],[\"队列是否为空\",{\"1\":{\"341\":2,\"342\":2}}],[\"队列是一种特殊的线性表\",{\"1\":{\"335\":1}}],[\"队列抽象数据类型\",{\"1\":{\"340\":1}}],[\"队列的容量\",{\"1\":{\"341\":1}}],[\"队列的特点就是先进先出\",{\"1\":{\"340\":1}}],[\"队列的接口\",{\"1\":{\"171\":1}}],[\"队列同样是一种特殊的线性表\",{\"1\":{\"340\":1}}],[\"队列和线性表的应用\",{\"0\":{\"346\":1}}],[\"队列和线性表的实现\",{\"0\":{\"336\":1}}],[\"队列和线性表的定义和基本概念\",{\"0\":{\"335\":1}}],[\"队列\",{\"0\":{\"340\":1},\"1\":{\"335\":1}}],[\"公平锁是指多个线程在等待同一个锁时\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"公平锁\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"公司名称\",{\"1\":{\"901\":1,\"902\":1}}],[\"公司域名倒写\",{\"1\":{\"766\":1,\"767\":1}}],[\"公式进行指针计算\",{\"1\":{\"341\":1}}],[\"公众号\",{\"1\":{\"250\":1,\"871\":1,\"1025\":1,\"1229\":1}}],[\"公众号二维码\",{\"1\":{\"167\":1}}],[\"假定一个元素用16位比特\",{\"1\":{\"392\":1}}],[\"假溢出\",{\"1\":{\"341\":1}}],[\"假设不会发生并发冲突\",{\"1\":{\"1476\":1}}],[\"假设我们有三个文档\",{\"1\":{\"1464\":1}}],[\"假设我们有一个电商网站\",{\"1\":{\"1458\":1}}],[\"假设我们有一个简单的消息队列\",{\"1\":{\"1450\":1}}],[\"假设我们使用\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"假设事务\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"假设网络带宽为10mb\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"假设一个kafka\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"假设一行数据的大小是1k\",{\"1\":{\"325\":1}}],[\"假设\",{\"1\":{\"770\":1}}],[\"假设键\",{\"1\":{\"698\":1}}],[\"假设另一个事务已经在id为10到20的范围内设置了间隙锁\",{\"1\":{\"621\":1}}],[\"假设你有一个包含大量数据的表\",{\"0\":{\"572\":1}}],[\"假设代币是以太币\",{\"1\":{\"540\":1,\"541\":1}}],[\"假设有五个文档\",{\"1\":{\"478\":1}}],[\"假设原来有一串数值如下所示\",{\"1\":{\"428\":1}}],[\"假设给定无序序列结构如下\",{\"1\":{\"417\":1}}],[\"假设长度为m\",{\"1\":{\"386\":1,\"392\":1}}],[\"假设每个节点有\",{\"1\":{\"320\":1}}],[\"假设正在运行的有server1\",{\"1\":{\"183\":1}}],[\"假设60s\",{\"1\":{\"158\":1}}],[\"循环依赖有了更深入的认识\",{\"1\":{\"1412\":1}}],[\"循环依赖还是比较清晰的\",{\"1\":{\"1412\":1}}],[\"循环依赖呢\",{\"1\":{\"1412\":1}}],[\"循环依赖关系使得程序难以理解\",{\"1\":{\"1412\":1}}],[\"循环依赖会导致\",{\"1\":{\"1412\":1}}],[\"循环依赖会带来什么问题\",{\"1\":{\"1412\":1}}],[\"循环依赖主要会带来以下问题\",{\"1\":{\"1412\":1}}],[\"循环依赖指的是\",{\"1\":{\"1412\":1}}],[\"循环依赖\",{\"1\":{\"1412\":4}}],[\"循环依赖比较熟悉\",{\"1\":{\"1412\":1}}],[\"循环依赖问题在spring中主要有三种情况\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"循环来等待\",{\"1\":{\"1382\":1}}],[\"循环\",{\"1\":{\"755\":1}}],[\"循环退出的例子\",{\"1\":{\"755\":1}}],[\"循环抓取新闻的主站点列表\",{\"1\":{\"718\":1}}],[\"循环等待条件\",{\"1\":{\"625\":1}}],[\"循环顺序队列\",{\"1\":{\"341\":1}}],[\"循环队列是改进版的顺序队列\",{\"1\":{\"341\":1}}],[\"循环队列\",{\"1\":{\"341\":1}}],[\"循环结束后返回结果\",{\"1\":{\"190\":1}}],[\"肯定是出了大问题\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"肯定含有此位置\",{\"1\":{\"339\":1}}],[\"肯定都会被问到mysql的知识\",{\"1\":{\"315\":1}}],[\"断线重连\",{\"1\":{\"1422\":1}}],[\"断开连接\",{\"1\":{\"339\":1}}],[\"断言被用在自动化测试用例\",{\"1\":{\"199\":1}}],[\"双亲委派模型体现了\",{\"1\":{\"1392\":1}}],[\"双亲孩子和孩子兄弟表示法\",{\"0\":{\"365\":1}}],[\"双层缓存策略\",{\"1\":{\"1160\":2,\"1340\":2}}],[\"双向链表\",{\"0\":{\"339\":1}}],[\"双非本科\",{\"1\":{\"261\":1}}],[\"扩容时\",{\"1\":{\"1406\":1}}],[\"扩容的全过程\",{\"1\":{\"1406\":1}}],[\"扩容的核心就是在每次插入前判断当前\",{\"1\":{\"395\":1}}],[\"扩容机制\",{\"1\":{\"1404\":1}}],[\"扩容\",{\"1\":{\"1386\":2,\"1406\":1}}],[\"扩容因子为\",{\"1\":{\"1386\":1}}],[\"扩容失败\",{\"1\":{\"338\":1}}],[\"扩展类加载器\",{\"1\":{\"1392\":1}}],[\"扩展性\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"扩展等\",{\"1\":{\"580\":1}}],[\"扩展阅读\",{\"0\":{\"406\":1}}],[\"扩展\",{\"0\":{\"27\":1,\"28\":1},\"1\":{\"28\":1}}],[\"超越了传统标记\",{\"1\":{\"1398\":1}}],[\"超出作用域\",{\"1\":{\"1394\":1}}],[\"超出线性表范围\",{\"1\":{\"338\":2,\"339\":1}}],[\"超时时间要大于业务处理时间\",{\"1\":{\"1163\":1,\"1343\":1}}],[\"超时等待\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"超时\",{\"1\":{\"644\":1,\"666\":1,\"711\":1}}],[\"超过了\",{\"1\":{\"1195\":1,\"1368\":1}}],[\"超过所有候选节点一半以上来解决脑裂问题\",{\"1\":{\"1031\":1,\"1235\":1}}],[\"超过100个字符的文本\",{\"1\":{\"493\":1}}],[\"超过50\",{\"1\":{\"395\":1}}],[\"超过半数的投票\",{\"1\":{\"183\":1}}],[\"待持久化过程都结束了\",{\"1\":{\"1420\":1}}],[\"待研究\",{\"1\":{\"1064\":1,\"1262\":1}}],[\"待确定\",{\"1\":{\"979\":1}}],[\"待办列表查询\",{\"1\":{\"929\":1}}],[\"待续\",{\"1\":{\"588\":1}}],[\"待检查位置\",{\"1\":{\"338\":1,\"339\":1}}],[\"待删除的元素\",{\"1\":{\"337\":1}}],[\"待查找元素\",{\"1\":{\"337\":2}}],[\"待添加的线性表\",{\"1\":{\"337\":1,\"338\":1,\"339\":1}}],[\"插件安装\",{\"0\":{\"924\":1}}],[\"插件配置等\",{\"1\":{\"907\":1}}],[\"插件比如pagehelper都是基于这个原理\",{\"1\":{\"833\":1}}],[\"插件\",{\"0\":{\"833\":1,\"1522\":1},\"1\":{\"766\":1,\"907\":1,\"1507\":1,\"1522\":2,\"1525\":1}}],[\"插件来实现\",{\"1\":{\"27\":1}}],[\"插入和删除\",{\"1\":{\"1406\":1}}],[\"插入和删除操作可能导致频繁的节点分裂和合并\",{\"1\":{\"566\":1}}],[\"插入和删除操作\",{\"1\":{\"562\":2}}],[\"插入键值对\",{\"1\":{\"1386\":1}}],[\"插入了与事务\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"插入的行数\",{\"1\":{\"889\":1}}],[\"插入预约图书记录\",{\"1\":{\"889\":1}}],[\"插入一个元素\",{\"1\":{\"667\":1}}],[\"插入一个空字符串\",{\"1\":{\"589\":1}}],[\"插入俩个元素\",{\"1\":{\"667\":1}}],[\"插入意向锁允许多个事务保留在特定间隙中插入新行的意图\",{\"1\":{\"621\":1}}],[\"插入意向锁是一种特殊的间隙锁\",{\"1\":{\"621\":1}}],[\"插入意向锁\",{\"0\":{\"621\":1},\"1\":{\"621\":1}}],[\"插入数据\",{\"0\":{\"523\":1},\"1\":{\"799\":1,\"818\":1}}],[\"插入\",{\"1\":{\"405\":1,\"566\":1}}],[\"插入排序\",{\"1\":{\"405\":1}}],[\"插入操作\",{\"1\":{\"339\":1}}],[\"插入元素\",{\"1\":{\"337\":1}}],[\"插入位置\",{\"1\":{\"337\":1}}],[\"添加用户\",{\"1\":{\"1502\":1}}],[\"添加缓存等优化\",{\"1\":{\"1408\":1}}],[\"添加了\",{\"1\":{\"1202\":1,\"1375\":1}}],[\"添加了外部的x265或者x264\",{\"1\":{\"152\":1}}],[\"添加额外的方法或者字段到被通知的类\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"添加\",{\"1\":{\"1079\":1,\"1135\":1,\"1274\":1,\"1320\":1}}],[\"添加所有文件\",{\"1\":{\"981\":1}}],[\"添加备注\",{\"1\":{\"979\":1}}],[\"添加图表\",{\"1\":{\"952\":1}}],[\"添加依赖\",{\"1\":{\"902\":1,\"948\":1,\"1507\":1}}],[\"添加相关依赖\",{\"1\":{\"901\":1}}],[\"添加userdao测试用例\",{\"0\":{\"819\":1}}],[\"添加配置\",{\"1\":{\"818\":1}}],[\"添加环境变量maven\",{\"1\":{\"765\":1}}],[\"添加地理位置的坐标\",{\"1\":{\"723\":1}}],[\"添加新节点到压缩列表\",{\"1\":{\"696\":1}}],[\"添加后的容量\",{\"1\":{\"338\":1}}],[\"添加线性表\",{\"1\":{\"337\":1}}],[\"添加元素到\",{\"1\":{\"722\":1}}],[\"添加元素\",{\"1\":{\"337\":2,\"1404\":1}}],[\"清理指定位置的键值对\",{\"1\":{\"1386\":2}}],[\"清理过期的键值对\",{\"1\":{\"1386\":2}}],[\"清理键值对\",{\"1\":{\"1386\":1}}],[\"清理键值对的阈值\",{\"1\":{\"1386\":1}}],[\"清除模型\",{\"1\":{\"1398\":1}}],[\"清除被标记的对象\",{\"1\":{\"1396\":1}}],[\"清除\",{\"1\":{\"1394\":1,\"1398\":6}}],[\"清除算法\",{\"1\":{\"1103\":1,\"1294\":1,\"1396\":1,\"1398\":1}}],[\"清除原来的编译结果\",{\"1\":{\"768\":1}}],[\"清空线性表\",{\"1\":{\"337\":1}}],[\"清晰\",{\"1\":{\"204\":1}}],[\"策略模式是行为性模式\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"策略模式\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"策略英文记为\",{\"1\":{\"335\":1}}],[\"策略的数据结构类型\",{\"1\":{\"335\":1}}],[\"弹栈\",{\"1\":{\"335\":2}}],[\"出版日期等\",{\"1\":{\"1462\":1}}],[\"出列按编号\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"出差报销\",{\"1\":{\"928\":1}}],[\"出了这几种情况还有一些导致索引失效\",{\"1\":{\"564\":1}}],[\"出现跳转外链提示\",{\"1\":{\"549\":1}}],[\"出现键盘可点击外链\",{\"1\":{\"549\":1}}],[\"出现外链\",{\"0\":{\"549\":1}}],[\"出队\",{\"1\":{\"340\":1,\"341\":5,\"342\":1}}],[\"出栈\",{\"1\":{\"335\":1}}],[\"出参\",{\"0\":{\"220\":1},\"1\":{\"219\":1}}],[\"压垮\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"压栈\",{\"1\":{\"335\":2}}],[\"压缩算法会增加cpu的使用量\",{\"1\":{\"1430\":1}}],[\"压缩算法会对性能有什么影响吗\",{\"1\":{\"1430\":1}}],[\"压缩列表可以包含多个节点\",{\"1\":{\"696\":1}}],[\"压缩列表\",{\"0\":{\"694\":1,\"696\":1},\"1\":{\"676\":1,\"696\":1}}],[\"压缩数据\",{\"1\":{\"162\":1}}],[\"压缩级别\",{\"1\":{\"123\":2}}],[\"压缩解压\",{\"1\":{\"111\":1}}],[\"压缩方式\",{\"1\":{\"111\":1}}],[\"压缩\",{\"1\":{\"111\":1,\"1101\":2,\"1292\":2}}],[\"栈只对于线程是可见的\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"栈存放\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"栈是连续的\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"栈是一种采用\",{\"1\":{\"335\":1}}],[\"栈使用的是数据结构中的栈\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"栈的实现\",{\"0\":{\"343\":1}}],[\"栈的删除操作也称为\",{\"1\":{\"335\":1}}],[\"栈的插入操作也称为\",{\"1\":{\"335\":1}}],[\"栈基本上只有两种操作\",{\"1\":{\"335\":1}}],[\"栈有一个非常非常重要的一个特点\",{\"1\":{\"335\":1}}],[\"栈底记做\",{\"1\":{\"335\":1}}],[\"栈顶记做\",{\"1\":{\"335\":1}}],[\"栈\",{\"0\":{\"335\":1,\"336\":1,\"346\":1},\"1\":{\"335\":1}}],[\"线上环境不建议使用\",{\"1\":{\"1420\":1}}],[\"线程模型等\",{\"1\":{\"1408\":1}}],[\"线程模型优化\",{\"1\":{\"1408\":1}}],[\"线程等在内存中的存储方式和访问方式\",{\"1\":{\"1388\":1}}],[\"线程会返回线程池\",{\"1\":{\"1384\":1}}],[\"线程池还可能会导致任务执行的顺序发生变化\",{\"1\":{\"1384\":1}}],[\"线程池的优点是可以提高系统的性能和资源利用率\",{\"1\":{\"1384\":1}}],[\"线程池的拒绝策略有四种\",{\"1\":{\"1384\":1}}],[\"线程池的参数包括核心线程数\",{\"1\":{\"1384\":1}}],[\"线程池拒绝策略用于处理任务队列已满时的情况\",{\"1\":{\"1384\":1}}],[\"线程池拒绝策略等\",{\"1\":{\"1384\":1}}],[\"线程池会首先检查是否有空闲线程可用\",{\"1\":{\"1384\":1}}],[\"线程池是一种管理线程的机制\",{\"1\":{\"1384\":1}}],[\"线程池\",{\"0\":{\"1384\":1},\"1\":{\"1378\":1}}],[\"线程池等\",{\"1\":{\"708\":1}}],[\"线程的开销成本也就越大\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"线程c\",{\"1\":{\"1064\":1,\"1262\":1}}],[\"线程b可以同时对该集合的元素进行增删操作\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"线程b\",{\"1\":{\"1064\":1,\"1262\":1}}],[\"线程a不会抛出任何异常\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"线程a\",{\"1\":{\"1064\":1,\"1262\":1}}],[\"线程内部顺序调用\",{\"1\":{\"1064\":1,\"1262\":1}}],[\"线程局部变量是局限于线程内的变量\",{\"1\":{\"1060\":1,\"1258\":1}}],[\"线程将进入等待队列进行等待直到被通知或者被唤醒\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"线程对象创建后\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"线程间变量值的传递需要通过主内存来完成\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"线程不安全\",{\"1\":{\"1046\":1,\"1247\":1}}],[\"线程跳出阻塞状态\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"线程每次判断\",{\"1\":{\"755\":1}}],[\"线程开始执行\",{\"1\":{\"755\":1}}],[\"线程栈内存\",{\"1\":{\"755\":1}}],[\"线程栈保存了线程运行时候变量值信息\",{\"1\":{\"755\":1}}],[\"线程仍然在运行\",{\"1\":{\"755\":1}}],[\"线程方法结束退出\",{\"1\":{\"755\":1}}],[\"线程在进行判断\",{\"1\":{\"755\":1}}],[\"线程在进行下一次\",{\"1\":{\"755\":1}}],[\"线程在每次使用变量的时候\",{\"1\":{\"755\":1}}],[\"线程已经开始执行\",{\"1\":{\"755\":1}}],[\"线程\",{\"1\":{\"755\":1,\"1045\":1,\"1246\":1,\"1400\":1}}],[\"线程退出之前\",{\"1\":{\"755\":1}}],[\"线程安全对我们来说很重要\",{\"1\":{\"1446\":1}}],[\"线程安全吗\",{\"1\":{\"1446\":1}}],[\"线程安全就是多个线程访问同一个对象或调用同一方法时\",{\"1\":{\"1446\":1}}],[\"线程安全\",{\"1\":{\"92\":1,\"93\":1,\"1380\":1,\"1446\":1}}],[\"线程安全+懒加载\",{\"1\":{\"87\":1}}],[\"线\",{\"1\":{\"507\":1,\"558\":1}}],[\"线性表的元素个数\",{\"1\":{\"337\":1}}],[\"线性表有两种实现方式\",{\"1\":{\"337\":1}}],[\"线性表分为两大类\",{\"1\":{\"335\":1}}],[\"线性表里的元素是按线性排列的\",{\"1\":{\"335\":1}}],[\"线性表\",{\"0\":{\"337\":1},\"1\":{\"335\":2}}],[\"线性数据结构\",{\"0\":{\"334\":1}}],[\"抽象\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"抽象数据类型等\",{\"0\":{\"332\":1}}],[\"抽象出一个十分简单的存取模型来说明ram的工作原理\",{\"1\":{\"326\":1}}],[\"阅读后更有利于了解mysql\",{\"1\":{\"1141\":1,\"1324\":1}}],[\"阅读全套系列面试题教程\",{\"1\":{\"587\":1}}],[\"阅读建议\",{\"0\":{\"587\":1}}],[\"阅读大约6分钟\",{\"1\":{\"588\":1}}],[\"阅读大约3分钟\",{\"1\":{\"578\":1}}],[\"阅读大概需要3分钟\",{\"1\":{\"433\":1}}],[\"阅读大概需要4\",{\"1\":{\"381\":1}}],[\"阅读大概需要10分钟\",{\"1\":{\"330\":1}}],[\"阅读不仅是知识的积累\",{\"1\":{\"56\":1}}],[\"圆心是盘片中心\",{\"1\":{\"327\":1}}],[\"磁道被沿半径线划分成一个个小的段\",{\"1\":{\"327\":1}}],[\"磁头需要移动对准相应磁道\",{\"1\":{\"327\":1}}],[\"磁头不能转动\",{\"1\":{\"327\":1}}],[\"磁头支架固定了一组磁头\",{\"1\":{\"327\":1}}],[\"磁盘使用是一个需要考虑的因素\",{\"1\":{\"1436\":1}}],[\"磁盘上的每个段都有一个相应的\",{\"1\":{\"1033\":1,\"1237\":1}}],[\"磁盘缓存其实就把常用的磁盘数据保存在内存中\",{\"1\":{\"999\":1,\"1208\":1}}],[\"磁盘缓存\",{\"1\":{\"999\":1,\"1208\":1}}],[\"磁盘持久化\",{\"1\":{\"664\":1}}],[\"磁盘会找到数据的起始位置并向后连续读取一页或几页载入内存中\",{\"1\":{\"327\":1}}],[\"磁盘也会从这个位置开始\",{\"1\":{\"327\":1}}],[\"磁盘往往不是严格按需读取\",{\"1\":{\"327\":1}}],[\"磁盘本身存取就比主存慢很多\",{\"1\":{\"327\":1}}],[\"磁盘的存取速度往往是主存的几百分分之一\",{\"1\":{\"327\":1}}],[\"磁盘的控制电路按照寻址逻辑将逻辑地址翻译成物理地址\",{\"1\":{\"327\":1}}],[\"磁盘的角度来看看b\",{\"1\":{\"319\":1}}],[\"磁盘可以转动\",{\"1\":{\"327\":1}}],[\"磁盘i\",{\"1\":{\"327\":1,\"566\":1}}],[\"磁盘存储和i\",{\"1\":{\"562\":1}}],[\"磁盘存储\",{\"1\":{\"562\":2,\"1030\":1,\"1234\":1}}],[\"磁盘存储单位是按\",{\"1\":{\"319\":1}}],[\"磁盘存取原理\",{\"0\":{\"327\":1}}],[\"磁盘扇区\",{\"1\":{\"325\":1}}],[\"磁盘预读原理就会提前把这些数据都读进内存\",{\"1\":{\"323\":1}}],[\"磁盘\",{\"1\":{\"319\":2,\"580\":1,\"1021\":1,\"1227\":1}}],[\"磁盘读取时间远远超过了数据在内存中比较的时间\",{\"1\":{\"319\":1}}],[\"距离\",{\"1\":{\"326\":1}}],[\"解耦\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"解锁时需要传入相同的value才能成功\",{\"1\":{\"1163\":1,\"1343\":1}}],[\"解析为view\",{\"1\":{\"1414\":1}}],[\"解析器\",{\"1\":{\"1414\":1}}],[\"解析请求对应的\",{\"1\":{\"1414\":1}}],[\"解析和初始化5个阶段组成\",{\"1\":{\"1392\":1}}],[\"解析\",{\"1\":{\"1105\":1,\"1133\":1,\"1296\":1,\"1318\":1,\"1408\":2,\"1414\":3}}],[\"解析信号并定位到指定存储单元\",{\"1\":{\"326\":1}}],[\"解释一下它的实现原理吗\",{\"1\":{\"1480\":1}}],[\"解释一下\",{\"1\":{\"1398\":1}}],[\"解释\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"解答java自动装箱和拆箱\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"解答\",{\"1\":{\"983\":1,\"987\":1,\"1206\":1}}],[\"解决空间碎片问题\",{\"1\":{\"1398\":1}}],[\"解决碎片问题\",{\"1\":{\"1398\":1}}],[\"解决的核心原理就是\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"解决方案二\",{\"1\":{\"842\":1}}],[\"解决方案一\",{\"1\":{\"842\":1}}],[\"解决方案\",{\"1\":{\"831\":1,\"1007\":1,\"1093\":1,\"1216\":1,\"1286\":1}}],[\"解决方案3\",{\"1\":{\"822\":1}}],[\"解决方案2\",{\"1\":{\"822\":1}}],[\"解决方案1\",{\"1\":{\"822\":1}}],[\"解决数据库字段名和实体类属性名不一致的问题\",{\"0\":{\"822\":1}}],[\"解决jar依赖问题\",{\"1\":{\"763\":1}}],[\"解决jar冲突\",{\"1\":{\"763\":1}}],[\"解决键冲突\",{\"1\":{\"687\":1}}],[\"解决死锁\",{\"1\":{\"644\":2}}],[\"解决慢查询\",{\"1\":{\"588\":1}}],[\"解决了什么问题\",{\"0\":{\"1121\":1,\"1309\":1}}],[\"解决了单一表数据量过大的问题\",{\"1\":{\"582\":1}}],[\"解决了单库大数据\",{\"1\":{\"581\":1}}],[\"解决了这些问题我们就可以很轻松地实现循环队列了\",{\"1\":{\"341\":1}}],[\"解决业务层面的耦合\",{\"1\":{\"580\":1}}],[\"解压缩后用自己喜欢的\",{\"1\":{\"900\":1}}],[\"解压缩方式\",{\"1\":{\"111\":1}}],[\"解压maven压缩包\",{\"1\":{\"764\":1}}],[\"解压文件\",{\"1\":{\"764\":1}}],[\"解压文件到目录\",{\"1\":{\"465\":1,\"466\":1}}],[\"解压后\",{\"1\":{\"660\":2}}],[\"解压到对应pinyin目录\",{\"1\":{\"466\":1}}],[\"解压到对应ik目录\",{\"1\":{\"465\":1}}],[\"解压就可以启动使用\",{\"1\":{\"174\":1}}],[\"解压\",{\"1\":{\"142\":1,\"458\":1,\"461\":1,\"660\":1,\"735\":1}}],[\"换句话说\",{\"1\":{\"324\":1,\"1176\":1,\"1353\":1}}],[\"之后我们可以直接调用\",{\"1\":{\"1416\":1}}],[\"之后使用cas保证并发度高的操作\",{\"1\":{\"1380\":1}}],[\"之后会出第二季吗\",{\"1\":{\"1378\":1}}],[\"之后就可以使用这个bean\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"之后必须手动赋值\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"之后的教程讲述和spring整合之后解决\",{\"1\":{\"835\":1}}],[\"之后复制对应的坐标到pom\",{\"1\":{\"768\":1}}],[\"之后线程就不再和对象在堆内存变量值有任何关系\",{\"1\":{\"755\":1}}],[\"之后\",{\"1\":{\"496\":1,\"1135\":1,\"1143\":1,\"1320\":1,\"1326\":1}}],[\"之所以如此\",{\"1\":{\"478\":1}}],[\"之所以要记录这个信息\",{\"1\":{\"478\":2}}],[\"之间\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"之间是兼容的\",{\"1\":{\"638\":1}}],[\"之间的依赖关系对生命周期的影响\",{\"1\":{\"1410\":1}}],[\"之间的依赖关系\",{\"1\":{\"1408\":1}}],[\"之间的三条数据\",{\"1\":{\"1118\":1,\"1306\":1}}],[\"之间的区别是什么\",{\"0\":{\"1071\":1,\"1266\":1}}],[\"之间的距离\",{\"1\":{\"723\":1}}],[\"之间的\",{\"1\":{\"692\":1}}],[\"之间的间隙上设置间隙锁\",{\"1\":{\"621\":1}}],[\"之间的节点\",{\"1\":{\"323\":1}}],[\"之间进行循环\",{\"1\":{\"341\":1}}],[\"之前不会启动\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"之前的消息暴露给消费者\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"之前的蓝海\",{\"1\":{\"264\":1}}],[\"之前\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"之前整理过一些\",{\"1\":{\"907\":1}}],[\"之前你是基于\",{\"1\":{\"719\":1}}],[\"之前都是白嫖阿里云的\",{\"1\":{\"98\":1}}],[\"复合索引就是多个列上创建的索引\",{\"1\":{\"561\":1}}],[\"复合索引和单列索引有何区别\",{\"0\":{\"561\":1}}],[\"复合类型主要有对象类型\",{\"1\":{\"502\":1}}],[\"复杂度o\",{\"1\":{\"1380\":1}}],[\"复杂度才能找到数据\",{\"1\":{\"323\":1}}],[\"复杂类型\",{\"0\":{\"502\":1},\"1\":{\"494\":1}}],[\"复制jar文件到工作目录\",{\"1\":{\"1514\":1}}],[\"复制算法等进行回收\",{\"1\":{\"1394\":1}}],[\"复制算法\",{\"1\":{\"1103\":1,\"1294\":1}}],[\"复制并处理资源文件\",{\"1\":{\"776\":2}}],[\"复制值的函数\",{\"1\":{\"687\":1}}],[\"复制键的函数\",{\"1\":{\"687\":1}}],[\"复制功能就能满足\",{\"1\":{\"657\":1}}],[\"复制\",{\"1\":{\"635\":1,\"636\":1,\"664\":1,\"1101\":1,\"1292\":1,\"1398\":1}}],[\"复制的是字段值\",{\"1\":{\"489\":1}}],[\"复制一份到同级目录下\",{\"1\":{\"174\":1}}],[\"非阻塞式\",{\"1\":{\"1478\":1}}],[\"非线程安全\",{\"1\":{\"1380\":1}}],[\"非httpservlet环境开发中也可以用其它的key值代替\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"非公平锁在锁被释放时\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"非常详细的解释\",{\"1\":{\"1466\":1}}],[\"非常正确\",{\"1\":{\"1466\":1}}],[\"非常清楚\",{\"1\":{\"1462\":1}}],[\"非常清晰明了\",{\"1\":{\"1448\":1}}],[\"非常有见地\",{\"1\":{\"1428\":1}}],[\"非常重要的提醒\",{\"1\":{\"1428\":1}}],[\"非常高兴能帮到您\",{\"1\":{\"1424\":1}}],[\"非常高兴能与你进行这次交流与探讨\",{\"1\":{\"1424\":1}}],[\"非常易于学习和使用\",{\"1\":{\"1418\":1}}],[\"非常精彩\",{\"1\":{\"1414\":1}}],[\"非常棒\",{\"1\":{\"1410\":1,\"1426\":1,\"1460\":1}}],[\"非常感谢你的回答\",{\"1\":{\"1458\":1}}],[\"非常感谢你的邀请和提问\",{\"1\":{\"1426\":1}}],[\"非常感谢你的时间和分享\",{\"1\":{\"1426\":1}}],[\"非常感谢你的分享\",{\"1\":{\"1388\":1,\"1460\":1}}],[\"非常感谢您的提问\",{\"1\":{\"1458\":1}}],[\"非常感谢您的夸奖\",{\"1\":{\"1442\":1}}],[\"非常感谢您的夸奖和建议\",{\"1\":{\"1396\":1}}],[\"非常感谢您的解答\",{\"1\":{\"1438\":1}}],[\"非常感谢您的赞赏\",{\"1\":{\"1398\":1,\"1428\":1}}],[\"非常感谢面试官的赏识\",{\"1\":{\"1416\":1}}],[\"非常感谢面试官的肯定与指导\",{\"1\":{\"1404\":1}}],[\"非常感谢面试官的提问\",{\"1\":{\"1392\":1}}],[\"非常感谢面试官的鼓励\",{\"1\":{\"1392\":1}}],[\"非常感谢面试官的指导\",{\"1\":{\"1392\":1}}],[\"非常感谢面试官今天的时间\",{\"1\":{\"1380\":1}}],[\"非常感谢\",{\"1\":{\"1382\":1,\"1448\":1,\"1456\":1}}],[\"非常好的观点\",{\"1\":{\"1428\":1}}],[\"非常好\",{\"1\":{\"1382\":2,\"1386\":4,\"1388\":3,\"1438\":1,\"1448\":1,\"1450\":1,\"1460\":1,\"1468\":2,\"1474\":2}}],[\"非常好记\",{\"1\":{\"652\":1}}],[\"非常简便\",{\"1\":{\"1190\":1,\"1365\":1}}],[\"非常适用于开发企业级应用\",{\"1\":{\"1408\":1}}],[\"非常适用于这些计数场景\",{\"1\":{\"657\":1}}],[\"非常适合构建微服务\",{\"1\":{\"454\":1}}],[\"非聚簇索引不直接存储实际的数据\",{\"1\":{\"560\":1}}],[\"非聚簇索引是一种基于指针的索引\",{\"1\":{\"560\":1}}],[\"非聚簇索引就是以非主键创建的索引\",{\"1\":{\"558\":1}}],[\"非聚簇索引\",{\"1\":{\"558\":1}}],[\"非字符分割\",{\"1\":{\"464\":1}}],[\"非空性\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"非空\",{\"1\":{\"337\":1}}],[\"非叶子节点的简洁性\",{\"1\":{\"566\":1}}],[\"非叶子节点都只是索引值\",{\"1\":{\"323\":1}}],[\"非叶子节点并不存储真正的\",{\"1\":{\"322\":1}}],[\"非会员逻辑\",{\"1\":{\"228\":1}}],[\"判断bean是否实现了initializingbean接口\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"判断数据库表对应记录的当前版本信息与第一次取出来的\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"判断并保证系统的安全运行\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"判断对象是否存在\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"判断键是否存在\",{\"1\":{\"666\":1}}],[\"判断被领取的代币是否超过总的额度\",{\"1\":{\"541\":1}}],[\"判断是否过期\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"判断是否打卡\",{\"1\":{\"721\":1}}],[\"判断是否领取过\",{\"1\":{\"541\":1}}],[\"判断是否已经有过半机器接受到相同的投票信息\",{\"1\":{\"183\":1}}],[\"判断一个元素是否在集合中\",{\"1\":{\"395\":1}}],[\"判断空队列和清空队列等操作\",{\"1\":{\"340\":1}}],[\"判断线性表是否为空\",{\"1\":{\"337\":1}}],[\"判断\",{\"1\":{\"320\":1,\"341\":1,\"669\":1,\"755\":1}}],[\"节省开发时间\",{\"1\":{\"907\":1}}],[\"节省沟通成本\",{\"1\":{\"213\":1}}],[\"节约内存\",{\"1\":{\"493\":1}}],[\"节点启动后\",{\"1\":{\"1466\":1}}],[\"节点启动\",{\"1\":{\"1466\":1}}],[\"节点就释放出锁\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"节点下还可以配置多个\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"节点负责不同的slot范围\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"节点保存整个集群中的全部数据\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"节点通过\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"节点需要从\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"节点恢复到新的\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"节点时\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"节点只会为此工作分配一个线程\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"节点进行数据副本复制时\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"节点内存\",{\"1\":{\"1030\":1,\"1234\":1}}],[\"节点使用文档的\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"节点数\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"节点数据\",{\"1\":{\"339\":1}}],[\"节点按照成员对象的大小进行排序\",{\"1\":{\"692\":1}}],[\"节点值对比函数\",{\"1\":{\"684\":1}}],[\"节点值释放函数\",{\"1\":{\"684\":1}}],[\"节点值复制函数\",{\"1\":{\"684\":1}}],[\"节点分裂和合并的开销\",{\"1\":{\"566\":1}}],[\"节点\",{\"1\":{\"469\":1,\"470\":1,\"1027\":2,\"1124\":1,\"1162\":1,\"1201\":2,\"1231\":2,\"1312\":1,\"1342\":1,\"1374\":2,\"1380\":1}}],[\"节点元素\",{\"1\":{\"339\":1}}],[\"节点的错误恢复将会自动地进行\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"节点的选举过程在\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"节点的值\",{\"1\":{\"684\":1}}],[\"节点的\",{\"1\":{\"320\":1}}],[\"根本无须再去考虑b\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"根本原因是底层lucene的segment段文件不可更新删除\",{\"1\":{\"1033\":1,\"1237\":1}}],[\"根标签\",{\"1\":{\"806\":1,\"807\":1,\"808\":1,\"818\":1,\"826\":1}}],[\"根目录\",{\"1\":{\"660\":1}}],[\"根节点都在内存中\",{\"1\":{\"320\":1}}],[\"根据数据量和负载情况\",{\"1\":{\"1460\":1}}],[\"根据数列的最大值确定统计数组的长度\",{\"1\":{\"413\":1}}],[\"根据实际需求设计合理的索引和映射\",{\"1\":{\"1460\":1}}],[\"根据实际情况进行数据分区\",{\"1\":{\"572\":1}}],[\"根据用户的搜索关键字返回相关的商品结果\",{\"1\":{\"1458\":1}}],[\"根据用户给定的经纬度坐标来获取指定范围内的地理位置集合\",{\"1\":{\"723\":1}}],[\"根据方法的注解实现读写分离\",{\"1\":{\"1416\":1}}],[\"根据请求找到正确的\",{\"1\":{\"1414\":1}}],[\"根据请求返回\",{\"1\":{\"1414\":1}}],[\"根据请求信息匹配\",{\"1\":{\"1414\":1}}],[\"根据请求信息调用\",{\"1\":{\"1414\":2}}],[\"根据业务选择恰当的线程模型\",{\"1\":{\"1408\":1}}],[\"根据业务增量需求\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"根据注解做相应的操作\",{\"1\":{\"1402\":1}}],[\"根据注解改变程序的行为\",{\"1\":{\"1402\":1}}],[\"根据应用内存需求适当设置\",{\"1\":{\"1400\":1}}],[\"根据应用特点选择合适参数\",{\"1\":{\"1400\":1}}],[\"根据标记和card\",{\"1\":{\"1398\":1}}],[\"根据标记结果筛选回收区域\",{\"1\":{\"1394\":1}}],[\"根据空间利用率与gc时间的平衡\",{\"1\":{\"1396\":1}}],[\"根据空间局部性原理\",{\"1\":{\"323\":1}}],[\"根据需要的功能\",{\"1\":{\"1380\":1}}],[\"根据hash值定位数组索引\",{\"1\":{\"1380\":1}}],[\"根据当前环境中设置的隔离级别\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"根据传入一个唯一的标识来获得bean对象\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"根据表达式的值动态拼接\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"根据表名查询用户信息\",{\"1\":{\"826\":1,\"842\":2}}],[\"根据查找路径找到相应的\",{\"1\":{\"1105\":1,\"1296\":1}}],[\"根据对象存活周期的不同将内存划分为几块\",{\"1\":{\"1103\":1,\"1294\":1}}],[\"根据程序计数器中存储的指令地址执行classes中的指令\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"根据给定的全限定名类名\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"根据\",{\"1\":{\"939\":2,\"1027\":1,\"1073\":1,\"1080\":1,\"1231\":1,\"1268\":1,\"1275\":1,\"1414\":1,\"1416\":1}}],[\"根据自己的实际情况填写\",{\"1\":{\"900\":1}}],[\"根据订单号查询订单用户的信息及订单详情及订单详情对应的商品信息\",{\"1\":{\"858\":1}}],[\"根据订单号查询订单用户的信息及订单详情\",{\"1\":{\"857\":1}}],[\"根据订单号查询订单用户的信息\",{\"1\":{\"856\":1}}],[\"根据id更新用户信息\",{\"1\":{\"826\":1,\"849\":1}}],[\"根据id删除用户信息\",{\"1\":{\"816\":1,\"826\":1}}],[\"根据id查询用户信息\",{\"1\":{\"816\":1,\"826\":1}}],[\"根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合\",{\"1\":{\"723\":1}}],[\"根据商品销售对商品进行排序显示\",{\"1\":{\"720\":1}}],[\"根据键值的大小关系\",{\"1\":{\"562\":1}}],[\"根据键值的每位数字来分配桶\",{\"1\":{\"423\":1}}],[\"根据地理位置修改评分规则等需求\",{\"1\":{\"506\":1}}],[\"根据距离排序\",{\"1\":{\"506\":1}}],[\"根据倒排列表\",{\"1\":{\"477\":1}}],[\"根据完全二叉树的性质\",{\"1\":{\"417\":1}}],[\"根据待排序集合中最大元素和最小元素的差值范围和映射规则\",{\"1\":{\"404\":1}}],[\"根据论文\",{\"1\":{\"392\":1}}],[\"根据这一特点我们可知\",{\"1\":{\"335\":1}}],[\"根据不同操作系统\",{\"1\":{\"291\":1}}],[\"根据操作系统的不同可能是4k或者8k\",{\"1\":{\"123\":1}}],[\"根据硬件调整\",{\"1\":{\"123\":1}}],[\"根据游戏开发公司游戏科学官网的显示\",{\"1\":{\"72\":1}}],[\"域都在叶子节点存储\",{\"1\":{\"323\":1}}],[\"域都在根节点\",{\"1\":{\"323\":1}}],[\"域\",{\"1\":{\"320\":1,\"323\":2,\"668\":1}}],[\"域名后缀io属于国家域名\",{\"1\":{\"652\":1}}],[\"域名\",{\"1\":{\"459\":1,\"1093\":1,\"1286\":1}}],[\"域名服务\",{\"1\":{\"171\":1}}],[\"域名根路径下\",{\"1\":{\"123\":1}}],[\"二是有序性\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"二维码\",{\"2\":{\"943\":1}}],[\"二维码可以带logo\",{\"1\":{\"940\":1}}],[\"二维码是我们当今社会非常重要的一项技术\",{\"1\":{\"934\":1}}],[\"二维码是实现原理是什么\",{\"1\":{\"934\":1,\"935\":1}}],[\"二维码的原理是什么\",{\"1\":{\"934\":1,\"935\":1}}],[\"二选一\",{\"1\":{\"826\":1,\"838\":1}}],[\"二号图片\",{\"1\":{\"811\":1}}],[\"二进制日志\",{\"1\":{\"1142\":2,\"1325\":2}}],[\"二进制分帧\",{\"1\":{\"1095\":1,\"1288\":1}}],[\"二进制安全\",{\"1\":{\"683\":1}}],[\"二进制安全的字符串\",{\"1\":{\"666\":1}}],[\"二进制类型\",{\"0\":{\"500\":1},\"1\":{\"500\":1}}],[\"二进制中最高位为1的都是负数\",{\"1\":{\"440\":1}}],[\"二\",{\"0\":{\"464\":1},\"1\":{\"481\":1}}],[\"二叉平衡树\",{\"0\":{\"363\":1}}],[\"二叉排序树\",{\"0\":{\"362\":1}}],[\"二叉树的遍历\",{\"0\":{\"360\":1}}],[\"二叉树的实现\",{\"0\":{\"359\":1}}],[\"二叉树的定义及其主要特征\",{\"0\":{\"358\":1}}],[\"二叉树\",{\"0\":{\"357\":1}}],[\"二叉树一次只能分两个范围\",{\"1\":{\"319\":1}}],[\"二分最快\",{\"1\":{\"320\":1}}],[\"二级缓存是\",{\"1\":{\"1416\":1}}],[\"二级缓存与一级缓存其机制相同\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"二级缓存\",{\"0\":{\"853\":1,\"1135\":1,\"1320\":1}}],[\"二级\",{\"0\":{\"62\":1,\"68\":1}}],[\"次\",{\"1\":{\"319\":1}}],[\"次数少\",{\"1\":{\"323\":1}}],[\"次数\",{\"1\":{\"319\":2}}],[\"定会有很大的提高\",{\"1\":{\"1406\":1}}],[\"定时去清理过期的缓存\",{\"1\":{\"1009\":1,\"1218\":1}}],[\"定时或定量回写到磁盘\",{\"1\":{\"999\":1,\"1208\":1}}],[\"定期监控查询性能并进行优化\",{\"1\":{\"1460\":1}}],[\"定期压测\",{\"1\":{\"1400\":1}}],[\"定期执行\",{\"1\":{\"574\":1}}],[\"定期维护\",{\"1\":{\"574\":1}}],[\"定位数据越快越精确\",{\"1\":{\"319\":1}}],[\"定义状态码枚举\",{\"1\":{\"1494\":1}}],[\"定义完返回结构后\",{\"1\":{\"1494\":1}}],[\"定义api响应结构体\",{\"1\":{\"1494\":1}}],[\"定义资源的加载和解析\",{\"1\":{\"1408\":1}}],[\"定义文件\",{\"1\":{\"1408\":1}}],[\"定义了文档的结构和字段类型\",{\"1\":{\"1460\":1}}],[\"定义了ioc的基本功能\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"定义了用于项目构建的插件列表\",{\"1\":{\"907\":1}}],[\"定义对象间的一对多的关系\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"定义对象的属性名\",{\"1\":{\"860\":1}}],[\"定义工厂方法\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"定义流程文件\",{\"0\":{\"928\":1}}],[\"定义项目版本\",{\"1\":{\"907\":1}}],[\"定义实际项目模块的名称\",{\"1\":{\"907\":1}}],[\"定义实际项目中的一个模块\",{\"1\":{\"768\":1}}],[\"定义好的视图解析器对该对象解析\",{\"1\":{\"895\":1}}],[\"定义pojo中的单个对象的\",{\"1\":{\"860\":1}}],[\"定义子对象集合映射\",{\"1\":{\"857\":1}}],[\"定义接口\",{\"1\":{\"847\":1,\"848\":1}}],[\"定义commonsql\",{\"1\":{\"845\":1}}],[\"定义该项目的打包方式\",{\"1\":{\"768\":1}}],[\"定义当前\",{\"1\":{\"907\":1}}],[\"定义当前项目的当前版本\",{\"1\":{\"768\":1}}],[\"定义当前maven项目隶属项目\",{\"1\":{\"768\":1}}],[\"定义一个切面类\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"定义一个切点\",{\"1\":{\"752\":1,\"1402\":1}}],[\"定义一个注解\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"定义一个接口\",{\"1\":{\"835\":1}}],[\"定义一个属性\",{\"1\":{\"751\":2}}],[\"定义字段的数据类型\",{\"1\":{\"482\":1}}],[\"定义索引中的字段的名称\",{\"1\":{\"482\":1}}],[\"定义只需要知道b\",{\"1\":{\"319\":1}}],[\"定义错误码\",{\"0\":{\"214\":1}}],[\"定义基本数据结构\",{\"1\":{\"210\":1}}],[\"定义负载均衡设备的ip及设备状态\",{\"1\":{\"123\":1}}],[\"定义本虚拟主机的访问日志\",{\"1\":{\"123\":2}}],[\"定义\",{\"1\":{\"87\":1,\"319\":1,\"482\":1,\"491\":1,\"1060\":1,\"1258\":1,\"1408\":1}}],[\"索引被分成多个分片\",{\"1\":{\"1470\":1}}],[\"索引就像是我们的图书馆\",{\"1\":{\"1462\":1}}],[\"索引就像是数据库中的表\",{\"1\":{\"1456\":1}}],[\"索引中的所有段都会被搜索\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"索引或者删除请求\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"索引文档的过程\",{\"0\":{\"1028\":1,\"1232\":1}}],[\"索引文档号\",{\"1\":{\"493\":1}}],[\"索引数据大小\",{\"0\":{\"1025\":1,\"1229\":1}}],[\"索引上的所有键值对\",{\"1\":{\"688\":1}}],[\"索引半径查询\",{\"1\":{\"664\":1}}],[\"索引固然可以提高相应的\",{\"0\":{\"600\":1}}],[\"索引并不是越多越好\",{\"0\":{\"600\":1}}],[\"索引并非银弹\",{\"1\":{\"563\":1}}],[\"索引篇\",{\"1\":{\"591\":1}}],[\"索引技术等方案\",{\"1\":{\"583\":1}}],[\"索引碎片化的理解\",{\"0\":{\"574\":1}}],[\"索引页的碎片化意味着索引中的数据不再按照顺序存储\",{\"1\":{\"571\":1}}],[\"索引失效\",{\"1\":{\"571\":1}}],[\"索引本身占用存储空间\",{\"1\":{\"571\":1}}],[\"索引本身也很大\",{\"1\":{\"324\":1}}],[\"索引主要是为了优化查询性能而设计的\",{\"1\":{\"571\":1}}],[\"索引包含所需列\",{\"1\":{\"567\":1}}],[\"索引不仅占用存储空间\",{\"1\":{\"565\":1}}],[\"索引列包含\",{\"1\":{\"564\":1}}],[\"索引列参与计算\",{\"1\":{\"564\":1}}],[\"索引将不会生效\",{\"1\":{\"564\":1}}],[\"索引什么时候会失效\",{\"0\":{\"564\":1}}],[\"索引可能会成为锁竞争的瓶颈\",{\"1\":{\"571\":1}}],[\"索引可能不会带来太大的性能提升\",{\"1\":{\"565\":1}}],[\"索引可能导致磁盘的随机访问\",{\"1\":{\"562\":1}}],[\"索引可能是一个好的选择\",{\"1\":{\"562\":1}}],[\"索引在插入和删除操作方面相对简单\",{\"1\":{\"562\":1}}],[\"索引和分片的解释非常清晰\",{\"1\":{\"1462\":1}}],[\"索引和分片\",{\"1\":{\"1462\":1}}],[\"索引和\",{\"0\":{\"562\":1}}],[\"索引才会被使用\",{\"1\":{\"558\":1}}],[\"索引是如何创建和管理的呢\",{\"1\":{\"1462\":1}}],[\"索引是由多个段组成\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"索引是放在磁盘的\",{\"1\":{\"563\":1}}],[\"索引是建立在原数据上的数据结构\",{\"1\":{\"563\":1}}],[\"索引是否越多越好\",{\"0\":{\"563\":1}}],[\"索引是一个文件\",{\"1\":{\"557\":1}}],[\"索引是一种数据结构\",{\"1\":{\"557\":1}}],[\"索引是什么\",{\"0\":{\"557\":1}}],[\"索引题\",{\"1\":{\"556\":1}}],[\"索引结构密切有关\",{\"1\":{\"493\":1}}],[\"索引系统还可以记录除此之外的更多信息\",{\"1\":{\"478\":1}}],[\"索引副本\",{\"1\":{\"475\":1}}],[\"索引\",{\"0\":{\"518\":1},\"1\":{\"471\":1,\"558\":4,\"687\":1,\"1460\":1},\"2\":{\"576\":1}}],[\"索引构建\",{\"1\":{\"447\":1}}],[\"索引效率比整型低\",{\"1\":{\"435\":1}}],[\"索引位置的节点\",{\"1\":{\"339\":1}}],[\"索引位置\",{\"1\":{\"339\":1}}],[\"索引检索需要磁盘i\",{\"1\":{\"327\":1}}],[\"索引一般以文件形式存储在磁盘上\",{\"1\":{\"327\":1}}],[\"索引查找过程中就要产生磁盘i\",{\"1\":{\"324\":1}}],[\"索引的维护需要额外的计算和存储资源\",{\"1\":{\"571\":1}}],[\"索引的维护成本\",{\"1\":{\"565\":1}}],[\"索引的存储是随机的\",{\"1\":{\"562\":1}}],[\"索引的概念下降到等同于数据库表的级别\",{\"1\":{\"471\":1}}],[\"索引的结构组织要尽量减少查找过程中磁盘i\",{\"1\":{\"324\":1}}],[\"索引的原理其实是不断的缩小查找范围\",{\"1\":{\"319\":1}}],[\"索引的效率依赖与磁盘\",{\"1\":{\"319\":1}}],[\"索引值和具体data都在每个节点里\",{\"1\":{\"318\":1}}],[\"迎合\",{\"1\":{\"319\":2}}],[\"红黑树是一种常用的平衡二叉搜索树\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"红黑树这类平衡二叉树从设计上无法\",{\"1\":{\"319\":1}}],[\"红黑树等对list实现的影响\",{\"1\":{\"1404\":1}}],[\"红黑树等数据结构也可以用来实现索引\",{\"1\":{\"324\":1}}],[\"红黑树等\",{\"1\":{\"319\":1}}],[\"先乐观锁重试几次\",{\"1\":{\"1476\":1}}],[\"先假设可以获取锁\",{\"1\":{\"1476\":1}}],[\"先假设20个随机整数的值是\",{\"1\":{\"412\":1}}],[\"先回去吧\",{\"1\":{\"1468\":1}}],[\"先计算键的hash值得到数组下标\",{\"1\":{\"1406\":1}}],[\"先有鸡还是先有蛋\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"先有servlet\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"先恢复快照方式保存的文件\",{\"1\":{\"1158\":1,\"1338\":1}}],[\"先得到key的hashcode\",{\"1\":{\"1077\":1,\"1272\":1}}],[\"先测试该进程本次申请的资源数\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"先导入切面需要的依赖包\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"先查后取的过程支持用\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"先写数据库\",{\"1\":{\"1007\":2,\"1216\":2}}],[\"先写到高速缓存\",{\"1\":{\"999\":1,\"1208\":1}}],[\"先获取分布式锁\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"先获取该分布式锁\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"先获取该记录的x锁\",{\"1\":{\"618\":1}}],[\"先获取该记录的s锁\",{\"1\":{\"618\":1}}],[\"先淘汰缓存之前\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"先淘汰缓存\",{\"1\":{\"1007\":2,\"1216\":2}}],[\"先删除\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"先进后出的原则\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"先进先出\",{\"1\":{\"1001\":1,\"1210\":1}}],[\"先进入lib目录中再安装你下载的那个文件\",{\"1\":{\"961\":1}}],[\"先看代码\",{\"1\":{\"892\":1}}],[\"先在spring文件夹里新建spring\",{\"1\":{\"878\":1}}],[\"先直接上个终极版\",{\"1\":{\"787\":1}}],[\"先会扩展空间\",{\"1\":{\"683\":1}}],[\"先\",{\"0\":{\"606\":1}}],[\"先修改配置文件\",{\"1\":{\"459\":1}}],[\"先取a0再取a1和先取a0再取d3的时间消耗是一样的\",{\"1\":{\"326\":1}}],[\"先找首字母缩小范围\",{\"1\":{\"319\":1}}],[\"先来看看为什么会出现b\",{\"1\":{\"319\":1}}],[\"先通过个人实力和面试技巧拿到一个心仪的\",{\"1\":{\"117\":1}}],[\"性价最佳\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"性价比完全划得来\",{\"1\":{\"264\":1}}],[\"性能得以提高\",{\"1\":{\"1476\":1}}],[\"性能统计\",{\"1\":{\"1474\":2}}],[\"性能超高\",{\"1\":{\"1418\":1}}],[\"性能差一些\",{\"1\":{\"1380\":1}}],[\"性能高效\",{\"1\":{\"1380\":1}}],[\"性能也更佳\",{\"1\":{\"1380\":1}}],[\"性能逐渐变差\",{\"1\":{\"1144\":1,\"1327\":1}}],[\"性能就越低\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"性能比较差\",{\"1\":{\"785\":1}}],[\"性能问题\",{\"1\":{\"679\":1}}],[\"性能非常好\",{\"1\":{\"657\":1}}],[\"性能极高\",{\"1\":{\"656\":1}}],[\"性能\",{\"0\":{\"654\":1},\"1\":{\"632\":1,\"633\":1,\"988\":1}}],[\"性能上可能没怎么在意\",{\"1\":{\"588\":1}}],[\"性能开销\",{\"1\":{\"571\":1}}],[\"性能逼近二分查找\",{\"1\":{\"318\":1}}],[\"性别\",{\"1\":{\"563\":1}}],[\"任意时刻的查询结果都是一致的\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"任意一个超过阈值都会把follower剔除出isr\",{\"1\":{\"1113\":1,\"1301\":1}}],[\"任意参数名可以接收\",{\"1\":{\"826\":1}}],[\"任何文件的变动都需要对此服务程序重新编译\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"任何一个等待锁的线程都有机会获得锁\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"任何一个关键字出现且只出现在一个结点中\",{\"1\":{\"318\":1}}],[\"任何地方都不要使用\",{\"0\":{\"603\":1}}],[\"任然有id重复的风险\",{\"1\":{\"440\":1}}],[\"任务队列用于存储等待执行的任务\",{\"1\":{\"1384\":1}}],[\"任务队列\",{\"1\":{\"1384\":1}}],[\"任务\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"任务管理器\",{\"1\":{\"86\":1}}],[\"任务列表\",{\"0\":{\"34\":1}}],[\"树化过程\",{\"1\":{\"1406\":1}}],[\"树就可以了\",{\"1\":{\"562\":1}}],[\"树索引可能更适合\",{\"1\":{\"562\":1}}],[\"树索引可能更为稳定\",{\"1\":{\"562\":1}}],[\"树索引则更为合适\",{\"1\":{\"562\":1}}],[\"树索引区别是什么\",{\"0\":{\"562\":1}}],[\"树及其基本操作\",{\"0\":{\"369\":1}}],[\"树和森林与二叉树的转换\",{\"0\":{\"366\":1}}],[\"树和森林\",{\"0\":{\"364\":1}}],[\"树和b+树的区别\",{\"0\":{\"323\":1}}],[\"树仅有\",{\"1\":{\"323\":1}}],[\"树磁盘\",{\"1\":{\"323\":1}}],[\"树节点内部每个\",{\"1\":{\"323\":1}}],[\"树每个节点\",{\"1\":{\"323\":1}}],[\"树每次将范围分割为多个区间\",{\"1\":{\"319\":1}}],[\"树只需要一次磁盘\",{\"1\":{\"323\":1}}],[\"树查询时间复杂度不固定\",{\"1\":{\"323\":1}}],[\"树以每个节点为一次磁盘\",{\"1\":{\"320\":1}}],[\"树的定义以及树的存储结构\",{\"0\":{\"365\":1}}],[\"树的查询最好时间复杂度是\",{\"1\":{\"323\":1}}],[\"树的查找\",{\"0\":{\"320\":1},\"1\":{\"320\":1}}],[\"树的每个节点大小一般是相同的\",{\"1\":{\"322\":1}}],[\"树的每个节点是\",{\"1\":{\"319\":1}}],[\"树的不同之处在于\",{\"1\":{\"322\":1}}],[\"树的变体\",{\"1\":{\"322\":1}}],[\"树的\",{\"1\":{\"320\":1}}],[\"树的高度\",{\"1\":{\"319\":1}}],[\"树的高度在\",{\"1\":{\"316\":1,\"319\":1}}],[\"树的设计\",{\"1\":{\"319\":1}}],[\"树这类数据结构\",{\"1\":{\"319\":1}}],[\"树是专门为外部存储器设计的\",{\"1\":{\"319\":1}}],[\"树是一类树\",{\"1\":{\"319\":1}}],[\"树允许每个节点有更多的子节点即可\",{\"1\":{\"319\":1}}],[\"树允许每个节点有更多的子节点\",{\"1\":{\"319\":1}}],[\"树等\",{\"1\":{\"319\":1}}],[\"树\",{\"0\":{\"321\":1,\"566\":1},\"1\":{\"319\":4,\"323\":3}}],[\"树有如下特点\",{\"1\":{\"318\":1}}],[\"甚至超过了整数自身空间消耗\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"甚至击垮数据库系统\",{\"1\":{\"1159\":1,\"1339\":1}}],[\"甚至也会影响服务的可靠性和可用性\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"甚至有很多专业薅空投羊毛的专业玩家\",{\"1\":{\"534\":1}}],[\"甚至最好的情况是o\",{\"1\":{\"323\":1}}],[\"甚至可以划分为更多区间\",{\"1\":{\"316\":1}}],[\"甚至在网上买一个盗版项目源码的价格都要比这个高\",{\"1\":{\"250\":1}}],[\"区分选择不同的锁\",{\"1\":{\"630\":1}}],[\"区域的形状可以是任意多边形\",{\"1\":{\"507\":1}}],[\"区间访问性\",{\"1\":{\"322\":1}}],[\"区间越多\",{\"1\":{\"319\":1}}],[\"区间更多的情况下\",{\"1\":{\"316\":1,\"319\":1}}],[\"区别如下\",{\"1\":{\"1446\":1}}],[\"区别仅仅是选择leader之后的操作有所不同\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"区别是什么呢\",{\"1\":{\"979\":1}}],[\"区别的是\",{\"1\":{\"652\":1}}],[\"区别\",{\"1\":{\"317\":1,\"604\":1,\"1006\":1,\"1042\":1,\"1086\":1,\"1215\":1,\"1243\":1,\"1279\":1}}],[\"区块链等领域\",{\"1\":{\"261\":1}}],[\"区块链\",{\"0\":{\"77\":1},\"2\":{\"78\":1,\"532\":1,\"533\":1,\"542\":1,\"543\":1,\"545\":1,\"546\":1,\"552\":1,\"553\":1}}],[\"百万级别的数据量\",{\"1\":{\"316\":1}}],[\"百度云\",{\"2\":{\"245\":1}}],[\"百度云服务器\",{\"1\":{\"238\":1}}],[\"百度百科\",{\"0\":{\"385\":1},\"1\":{\"171\":1,\"385\":1,\"401\":1,\"417\":2,\"424\":1}}],[\"百度收录\",{\"1\":{\"6\":1}}],[\"层接口\",{\"1\":{\"878\":1}}],[\"层的数量越多\",{\"1\":{\"691\":1}}],[\"层\",{\"1\":{\"691\":1,\"882\":1,\"892\":1,\"894\":2,\"1507\":1}}],[\"层数低\",{\"1\":{\"319\":1}}],[\"层就可满足\",{\"1\":{\"316\":1}}],[\"层左右\",{\"1\":{\"316\":1,\"319\":1}}],[\"尝试分配质因数以避免产生数字0\",{\"1\":{\"306\":1}}],[\"奇数因子\",{\"1\":{\"306\":1}}],[\"否则子类才会负责加载\",{\"1\":{\"1392\":1}}],[\"否则可能会导致线程池过大或过小\",{\"1\":{\"1384\":1}}],[\"否则一直等待所有成员到达\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"否则一直占用资源\",{\"1\":{\"711\":1}}],[\"否则的话创建\",{\"1\":{\"1195\":1,\"1368\":1}}],[\"否则就是版本冲突\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"否则就推迟分配\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"否则认为是过期数据\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"否则其他线程无法获得锁\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"否则也要推迟分配\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"否则不需要登录\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"否则都叫做同步\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"否则创建一个新的integer对象\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"否则会以\",{\"1\":{\"1133\":1,\"1318\":1}}],[\"否则会出现脑裂问题\",{\"1\":{\"1027\":1,\"1231\":1}}],[\"否则会导致全表扫描\",{\"0\":{\"592\":1},\"1\":{\"1149\":1,\"1332\":1}}],[\"否则重新选举\",{\"1\":{\"1027\":1,\"1231\":1}}],[\"否则命令将失败\",{\"1\":{\"980\":1}}],[\"否则查找姓名为\",{\"1\":{\"848\":2}}],[\"否则如果输入了年龄则按照年龄查找\",{\"1\":{\"848\":2}}],[\"否则反之\",{\"1\":{\"771\":1}}],[\"否则获取锁失败\",{\"1\":{\"657\":1}}],[\"否则放弃更新\",{\"1\":{\"642\":1}}],[\"否则该索引将不会被使用\",{\"0\":{\"597\":1},\"1\":{\"1149\":1,\"1332\":1}}],[\"否则系统将可能无法正确使用索引\",{\"0\":{\"596\":1}}],[\"否则将引擎放弃使用索引而进行全表扫描\",{\"0\":{\"590\":1},\"1\":{\"1149\":1,\"1332\":1}}],[\"否则将导致引擎放弃使用索引而进行全表扫描\",{\"0\":{\"589\":1,\"591\":1},\"1\":{\"1149\":2,\"1332\":2}}],[\"否则\",{\"1\":{\"589\":1}}],[\"否则性能方面将得不偿失\",{\"1\":{\"583\":1}}],[\"否则存入过多数据可能会出现加不成功的现象\",{\"1\":{\"572\":1}}],[\"否则中断并打印后面的说明\",{\"1\":{\"541\":1}}],[\"否则返回false\",{\"1\":{\"306\":1,\"1041\":1,\"1242\":1,\"1428\":1}}],[\"否则谁也不知道谁对谁错\",{\"1\":{\"86\":1}}],[\"则尝试获取锁\",{\"1\":{\"1481\":1}}],[\"则抛出\",{\"1\":{\"1481\":2}}],[\"则抛出异常\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"则从broker节点拉取\",{\"1\":{\"1448\":1}}],[\"则唤醒优先级最高的线程\",{\"1\":{\"1446\":1}}],[\"则覆盖原来的值\",{\"1\":{\"1418\":1}}],[\"则发生哈希碰撞\",{\"1\":{\"1406\":1}}],[\"则触发rehash\",{\"1\":{\"1406\":1}}],[\"则标记整个分段为\",{\"1\":{\"1398\":1}}],[\"则判断为垃圾\",{\"1\":{\"1394\":1}}],[\"则这两个对象之间形成的循环引用链为垃圾\",{\"1\":{\"1394\":1}}],[\"则这棵二叉树称为完全二叉树\",{\"1\":{\"417\":1}}],[\"则该线程可以直接释放该锁\",{\"1\":{\"1481\":1}}],[\"则该线程可以直接获取该锁\",{\"1\":{\"1480\":3,\"1481\":1}}],[\"则该线程会被阻塞\",{\"1\":{\"1480\":1,\"1481\":1}}],[\"则该线程会尝试自旋等待该锁的释放\",{\"1\":{\"1480\":1}}],[\"则该线程会尝试升级为轻量级锁或重量级锁\",{\"1\":{\"1480\":1,\"1481\":1}}],[\"则该线程将被阻塞\",{\"1\":{\"1480\":2}}],[\"则该对象可被回收\",{\"1\":{\"1394\":1}}],[\"则该对象为垃圾\",{\"1\":{\"1394\":3}}],[\"则该字段不可被搜索\",{\"1\":{\"485\":1}}],[\"则是一个屏障\",{\"1\":{\"1390\":1}}],[\"则是单台\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"则插入新的键值对\",{\"1\":{\"1386\":2}}],[\"则直接释放锁\",{\"1\":{\"1481\":1}}],[\"则直接替换值\",{\"1\":{\"1386\":1}}],[\"则直接返回\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"则往后查找空位置\",{\"1\":{\"1386\":1}}],[\"则将任务分配给其中一个空闲线程执行\",{\"1\":{\"1384\":1}}],[\"则将地址信号放到地址总线上传给主存\",{\"1\":{\"326\":1}}],[\"则在垃圾回收时这些变量会被清除\",{\"1\":{\"1394\":1}}],[\"则在嵌套事务内执行\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"则在启动服务器时自动加载\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"则spring\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"则会编译错误\",{\"1\":{\"1424\":1}}],[\"则会根据线程池的配置信息创建新的线程来执行任务\",{\"1\":{\"1384\":1}}],[\"则会自动调用其配置的销毁方法\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"则会执行destructionawarebeanpostprocessor后置处理器的销毁回调方法\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"则对master服务进行下线处理\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"则予以更新\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"则进一步向上委托\",{\"1\":{\"1106\":1,\"1297\":1}}],[\"则进行更新并增加版本号或更新时间戳\",{\"1\":{\"636\":1}}],[\"则进行毫秒内序列\",{\"1\":{\"441\":1}}],[\"则只执行第三步\",{\"1\":{\"1087\":1,\"1280\":1}}],[\"则符合\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"则释放lock2的锁\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"则释放lock1的锁\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"则提示用户该接口需要登录才能访问\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"则通过编译\",{\"1\":{\"1041\":1,\"1242\":1}}],[\"则自动创建\",{\"1\":{\"927\":1}}],[\"则按required属性执行\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"则按驼峰匹配\",{\"1\":{\"856\":1,\"857\":1}}],[\"则按姓名查询\",{\"1\":{\"847\":2}}],[\"则不做任何操作\",{\"1\":{\"1418\":1}}],[\"则不再扩容\",{\"1\":{\"1386\":1}}],[\"则不行\",{\"1\":{\"1072\":1,\"1267\":1}}],[\"则不修改\",{\"1\":{\"849\":1}}],[\"则不会使用索引\",{\"1\":{\"564\":1}}],[\"则namespace必须为dao接口的全路径\",{\"1\":{\"825\":1}}],[\"则name的值为name1\",{\"1\":{\"790\":1}}],[\"则jvm会进行优化\",{\"1\":{\"755\":1}}],[\"则用于表示跳跃表节点\",{\"1\":{\"692\":1}}],[\"则认为成功获取了锁\",{\"1\":{\"640\":1}}],[\"则认为获取锁失败\",{\"1\":{\"640\":1}}],[\"则认为获取了锁\",{\"1\":{\"640\":1}}],[\"则放弃更新\",{\"1\":{\"636\":1}}],[\"则回滚事务\",{\"1\":{\"632\":1}}],[\"则表示有冲突\",{\"1\":{\"632\":1}}],[\"则可以使用\",{\"1\":{\"1005\":3,\"1214\":3}}],[\"则可以在usermapper\",{\"1\":{\"845\":1}}],[\"则可以在具有\",{\"1\":{\"589\":1}}],[\"则可以禁用doc值以节省磁盘空间\",{\"1\":{\"493\":1}}],[\"则可能导致待排序集合中每一个元素值映射到一个桶上\",{\"1\":{\"403\":1}}],[\"则可能导致待排序集合中所有元素全部映射到一个桶上\",{\"1\":{\"403\":1}}],[\"则使用随机数备用\",{\"1\":{\"441\":1}}],[\"则持续进行以上的动作直至最高位数为止\",{\"1\":{\"428\":1}}],[\"则无法创建对应的统计数组\",{\"1\":{\"414\":1}}],[\"则无法区间查找\",{\"1\":{\"323\":1}}],[\"则桶排序向计数排序方式演化\",{\"1\":{\"403\":1}}],[\"则桶排序向比较性质排序算法演变\",{\"1\":{\"403\":1}}],[\"则完成排序过程\",{\"1\":{\"401\":1}}],[\"则所有桶中元素构成的集合是已排序的\",{\"1\":{\"401\":1}}],[\"则拆分后形成的多个桶\",{\"1\":{\"401\":1}}],[\"则数据也可能不存在\",{\"1\":{\"387\":1}}],[\"则\",{\"1\":{\"323\":1,\"711\":1,\"1123\":1,\"1311\":1}}],[\"则返回true\",{\"1\":{\"306\":1}}],[\"则至少需要两台机器\",{\"1\":{\"183\":1}}],[\"确认后再发送下一条消息\",{\"1\":{\"1452\":1}}],[\"确实是这样\",{\"1\":{\"1412\":1}}],[\"确实\",{\"1\":{\"1029\":2,\"1233\":2,\"1436\":1}}],[\"确实等于\",{\"1\":{\"306\":1}}],[\"确定文档属于分片\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"确定申请的桶个数\",{\"1\":{\"404\":1}}],[\"确保你本地安装了\",{\"1\":{\"1512\":1}}],[\"确保你的服务器安装了\",{\"1\":{\"456\":1}}],[\"确保消息的可靠性和容错性\",{\"1\":{\"1450\":1}}],[\"确保系统的稳定性和可靠性\",{\"1\":{\"1442\":1}}],[\"确保订单不会丢失\",{\"1\":{\"1432\":1}}],[\"确保集群的正常运行\",{\"1\":{\"1426\":1,\"1466\":1}}],[\"确保在方法中可以正常使用某些操作\",{\"1\":{\"1424\":1}}],[\"确保在执行优化操作之前备份数据\",{\"1\":{\"574\":1}}],[\"确保数据的持久性\",{\"1\":{\"1418\":1}}],[\"确保数据一致性至关重要\",{\"1\":{\"630\":1}}],[\"确保正确的标记对象\",{\"1\":{\"1396\":1}}],[\"确保我的java程序没有安全隐患\",{\"1\":{\"1392\":1}}],[\"确保文档是最新版本\",{\"1\":{\"1035\":1,\"1239\":1}}],[\"确保某条记录在事务中被锁定\",{\"1\":{\"641\":1}}],[\"确保表中列没有\",{\"1\":{\"1149\":1,\"1332\":1}}],[\"确保表中\",{\"1\":{\"589\":1}}],[\"确保每个索引都有其明确的用途\",{\"1\":{\"573\":1}}],[\"确保查询中涉及的列都被包含在索引中\",{\"1\":{\"567\":1}}],[\"确保索引能够被有效利用\",{\"1\":{\"565\":1}}],[\"确保容量够用\",{\"1\":{\"338\":1}}],[\"确保了一个稳定且可靠的长期使用平台\",{\"1\":{\"239\":1}}],[\"确保电脑安装了\",{\"1\":{\"126\":1}}],[\"确保一个类只有一个实例\",{\"1\":{\"87\":1}}],[\"乘客下车\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"乘以\",{\"1\":{\"306\":1}}],[\"乘积竟是\",{\"1\":{\"303\":1}}],[\"乘积是\",{\"0\":{\"303\":1}}],[\"质因数分解法\",{\"1\":{\"305\":1}}],[\"质z\",{\"1\":{\"263\":1}}],[\"两大类\",{\"1\":{\"1069\":1,\"1264\":1}}],[\"两种方案\",{\"1\":{\"1418\":1}}],[\"两种方式\",{\"1\":{\"569\":1}}],[\"两种类型的队列\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"两种状态笼统的称为\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"两者也可以结合使用\",{\"1\":{\"1476\":1}}],[\"两者主要区别在于对并发冲突的态度\",{\"1\":{\"1476\":1}}],[\"两者之间形成依赖循环\",{\"1\":{\"1412\":1}}],[\"两者相比\",{\"1\":{\"1380\":1}}],[\"两者都存在一个类似于\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"两者都能很好地在自己的适用场景发挥作用\",{\"1\":{\"1074\":1,\"1269\":1}}],[\"两者的底层实现相似\",{\"1\":{\"1075\":1,\"1270\":1}}],[\"两者各有优劣\",{\"1\":{\"1009\":1,\"1218\":1}}],[\"两者不同之处在于\",{\"1\":{\"401\":1}}],[\"两端不一致\",{\"1\":{\"822\":1}}],[\"两次请求\",{\"1\":{\"1089\":1,\"1282\":1}}],[\"两次读同一个范围的时候\",{\"1\":{\"638\":1}}],[\"两次存取的数据的\",{\"1\":{\"326\":1}}],[\"两次不行吗\",{\"1\":{\"121\":1}}],[\"两部分\",{\"1\":{\"316\":1}}],[\"两个很好的疑问\",{\"1\":{\"1424\":1}}],[\"两个锁的申请必须发生交叉\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"两个提交应用到当前分支\",{\"1\":{\"980\":1}}],[\"两个\",{\"1\":{\"891\":1}}],[\"两个条件都要成立\",{\"1\":{\"849\":2}}],[\"两个自媒体账号属于同一个人\",{\"1\":{\"719\":1}}],[\"两个结构组成\",{\"1\":{\"692\":1}}],[\"两个结构定义\",{\"1\":{\"691\":1}}],[\"两个哈希表\",{\"1\":{\"688\":1}}],[\"两个方法\",{\"1\":{\"574\":1}}],[\"两个操作\",{\"1\":{\"341\":1}}],[\"两个状态\",{\"1\":{\"341\":1}}],[\"两个整数的元组\",{\"1\":{\"306\":1}}],[\"两个不含数字0的整数\",{\"1\":{\"303\":1}}],[\"两个不含\",{\"0\":{\"303\":1},\"1\":{\"303\":1}}],[\"整理了一些读者的问题\",{\"1\":{\"1378\":1}}],[\"整理算法\",{\"1\":{\"1103\":1,\"1294\":1}}],[\"整理的合集\",{\"0\":{\"237\":1,\"238\":1}}],[\"整数集合的底层实现为\",{\"1\":{\"693\":1}}],[\"整数集合是\",{\"1\":{\"693\":1}}],[\"整数集合\",{\"0\":{\"693\":1},\"1\":{\"676\":1,\"693\":2}}],[\"整体上按照时间自增排序\",{\"1\":{\"441\":1}}],[\"整体主要由构建初始堆+交换堆顶元素和末尾元素并重建堆两部分组成\",{\"1\":{\"417\":1}}],[\"整个生命周期也会有一些差别\",{\"1\":{\"1502\":1}}],[\"整个流程控制的中心\",{\"1\":{\"1414\":1}}],[\"整个\",{\"1\":{\"1410\":1}}],[\"整个过程中\",{\"1\":{\"1420\":1}}],[\"整个过程中最关键的部份是映射文件及映射过程\",{\"1\":{\"1416\":1}}],[\"整个过程就是将类路径下\",{\"1\":{\"1185\":1,\"1360\":1}}],[\"整个过程分为4个主要阶段\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"整个分布式系统内不会产生重复id\",{\"1\":{\"440\":1}}],[\"整个序列的最大值就是堆顶的根节点\",{\"1\":{\"417\":1}}],[\"整合的时候解决\",{\"1\":{\"835\":1}}],[\"整合了所有的框架\",{\"1\":{\"454\":1}}],[\"整合了所有的\",{\"1\":{\"454\":1}}],[\"整合\",{\"0\":{\"952\":1},\"1\":{\"296\":1}}],[\"吗\",{\"1\":{\"294\":2,\"907\":1,\"1390\":1}}],[\"测试启动jar\",{\"1\":{\"1524\":1}}],[\"测试与监控\",{\"1\":{\"1408\":1}}],[\"测试线程是否真的已经中断\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"测试访问\",{\"1\":{\"950\":1}}],[\"测试结果\",{\"1\":{\"893\":1}}],[\"测试方法都验证过\",{\"1\":{\"891\":1}}],[\"测试文件\",{\"1\":{\"891\":1}}],[\"测试输出\",{\"1\":{\"842\":1}}],[\"测试和生产环境需要有不同的配置\",{\"1\":{\"834\":1}}],[\"测试字段status\",{\"1\":{\"789\":1}}],[\"测试字段id\",{\"1\":{\"789\":1}}],[\"测试字段\",{\"1\":{\"789\":1}}],[\"测试的classpath都有效\",{\"1\":{\"769\":1}}],[\"测试依赖范围\",{\"1\":{\"769\":1}}],[\"测试完成了\",{\"1\":{\"654\":1}}],[\"测试分词器\",{\"1\":{\"490\":1}}],[\"测试运行\",{\"1\":{\"342\":1}}],[\"测试一下业务层代码\",{\"1\":{\"893\":1}}],[\"测试一下\",{\"1\":{\"341\":1}}],[\"测试响应\",{\"1\":{\"294\":1}}],[\"测试\",{\"0\":{\"293\":1,\"753\":1,\"929\":1},\"1\":{\"441\":1,\"660\":1,\"761\":1,\"769\":2,\"774\":2,\"776\":1,\"847\":1,\"848\":1,\"849\":2,\"850\":1,\"852\":3,\"853\":1,\"856\":2,\"857\":1,\"858\":1,\"894\":1,\"951\":1,\"1502\":3,\"1520\":1}}],[\"模板方法模式\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"模拟类似于token这种需要设置过期时间的场景\",{\"1\":{\"1156\":1,\"1336\":1}}],[\"模式\",{\"1\":{\"1408\":1}}],[\"模式下产生的循环依赖问题\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"模式的数据备份\",{\"1\":{\"655\":1}}],[\"模式时候\",{\"1\":{\"484\":1}}],[\"模型的版本\",{\"1\":{\"907\":1}}],[\"模型\",{\"1\":{\"292\":1,\"296\":1,\"1478\":2}}],[\"模块间采用接口隔离\",{\"1\":{\"1412\":1}}],[\"模块之间低耦合\",{\"1\":{\"1408\":1}}],[\"模块之间和对象之间的耦合度\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"模块负责\",{\"1\":{\"1027\":1,\"1231\":1}}],[\"模块化设计\",{\"1\":{\"240\":1}}],[\"模块\",{\"1\":{\"123\":1,\"894\":1,\"1016\":1,\"1222\":1}}],[\"认识\",{\"0\":{\"290\":1}}],[\"认识很多创业或者想创业或者做一些事情的朋友很多都有一个问题\",{\"1\":{\"263\":1}}],[\"历史文章\",{\"1\":{\"871\":1}}],[\"历史表\",{\"1\":{\"842\":1}}],[\"历史网站截图\",{\"1\":{\"271\":1}}],[\"历史图片\",{\"0\":{\"271\":1}}],[\"木须先生\",{\"1\":{\"270\":1}}],[\"停顿时间等\",{\"1\":{\"1400\":1}}],[\"停车等等\",{\"1\":{\"934\":1}}],[\"停用词过滤\",{\"1\":{\"464\":1}}],[\"停滞了很久很久\",{\"1\":{\"270\":1}}],[\"停止容器\",{\"1\":{\"1020\":1,\"1226\":1}}],[\"停止\",{\"1\":{\"131\":1}}],[\"新键值对\",{\"1\":{\"1446\":1}}],[\"新旧aof文件替换采用原子性rename操作\",{\"1\":{\"1420\":1}}],[\"新创建一个该类的实例\",{\"1\":{\"1392\":1}}],[\"新创建了一个线程对象\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"新注入的属性会代替掉默认属性\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"新\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"新加入的follower也会先存放在osr中\",{\"1\":{\"1113\":1,\"1301\":1}}],[\"新生代仍需其他收集器配合\",{\"1\":{\"1396\":1}}],[\"新生代用于存储新创建的对象\",{\"1\":{\"1394\":1}}],[\"新生代和老年代\",{\"1\":{\"1394\":1}}],[\"新生代又分为eden区\",{\"1\":{\"1388\":1}}],[\"新生代是java堆中的一部分\",{\"1\":{\"1388\":1}}],[\"新生代\",{\"1\":{\"1388\":2,\"1394\":1}}],[\"新生代基本采用复制算法\",{\"1\":{\"1103\":1,\"1294\":1}}],[\"新生成一个节点add\",{\"1\":{\"339\":1}}],[\"新版本的文档被索引到一个新段\",{\"1\":{\"1033\":1,\"1237\":1}}],[\"新段\",{\"1\":{\"1033\":1,\"1237\":1}}],[\"新手入门教程\",{\"1\":{\"944\":1}}],[\"新增的statement\",{\"1\":{\"826\":1}}],[\"新增用户信息\",{\"1\":{\"826\":1}}],[\"新增用户\",{\"1\":{\"816\":1}}],[\"新建数据库\",{\"0\":{\"926\":1}}],[\"新建枚举类\",{\"1\":{\"892\":1}}],[\"新建俩张表\",{\"1\":{\"887\":1}}],[\"新建一个包叫\",{\"1\":{\"892\":1}}],[\"新建一个\",{\"1\":{\"874\":1}}],[\"新建项目时选择\",{\"1\":{\"901\":1}}],[\"新建项目\",{\"0\":{\"874\":1,\"911\":1}}],[\"新建orderuser实体类继承order\",{\"1\":{\"856\":1}}],[\"新建接口用于测试\",{\"1\":{\"749\":1}}],[\"新建接口\",{\"0\":{\"749\":1}}],[\"新建\",{\"1\":{\"711\":1,\"891\":1,\"902\":1}}],[\"新建分支\",{\"1\":{\"111\":1}}],[\"新打开一个\",{\"1\":{\"660\":1}}],[\"新闻搜索\",{\"2\":{\"1487\":1,\"1491\":1}}],[\"新闻搜索elasticsearch\",{\"0\":{\"1485\":1,\"1489\":1},\"2\":{\"1486\":1,\"1490\":1}}],[\"新闻搜索结果页面设计\",{\"1\":{\"447\":1}}],[\"新闻搜索页面设计\",{\"1\":{\"447\":1}}],[\"新鲜感过去后\",{\"1\":{\"270\":1}}],[\"努力是反人性的\",{\"1\":{\"270\":1}}],[\"感谢夸奖\",{\"1\":{\"1460\":1}}],[\"感谢你的时间\",{\"1\":{\"1450\":1}}],[\"感谢每一个支持\",{\"1\":{\"556\":1,\"615\":1}}],[\"感兴趣可以关注公众号javapub追更\",{\"1\":{\"1380\":1,\"1382\":1,\"1384\":1,\"1386\":1,\"1388\":1,\"1390\":1,\"1392\":1,\"1394\":1,\"1396\":1,\"1398\":1,\"1400\":1,\"1402\":1,\"1404\":1,\"1406\":1,\"1408\":1,\"1410\":1,\"1412\":1,\"1414\":1,\"1416\":1,\"1418\":1,\"1420\":1,\"1422\":1,\"1424\":1,\"1426\":1,\"1428\":1,\"1430\":1,\"1432\":1,\"1434\":1,\"1436\":1,\"1438\":1,\"1440\":1,\"1446\":1,\"1448\":1,\"1450\":1,\"1452\":1,\"1454\":1,\"1456\":1,\"1458\":1,\"1460\":1,\"1462\":1,\"1464\":1,\"1466\":1,\"1468\":1,\"1470\":1,\"1474\":1,\"1476\":1,\"1478\":1,\"1481\":1}}],[\"感兴趣的同学可以先加入体验\",{\"1\":{\"250\":1}}],[\"感觉出现了幻觉\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"感觉一个小宇宙即将爆发\",{\"1\":{\"270\":1}}],[\"蝴蝶号到金标\",{\"1\":{\"267\":1}}],[\"带数据的构造函数\",{\"1\":{\"1494\":1}}],[\"带来更好的性能\",{\"1\":{\"1000\":1,\"1209\":1}}],[\"带有logo二维码\",{\"1\":{\"939\":1}}],[\"带\",{\"1\":{\"267\":1}}],[\"带宽可以选\",{\"1\":{\"238\":1}}],[\"🚩flag\",{\"1\":{\"267\":1}}],[\"🔔提示\",{\"1\":{\"53\":1}}],[\"篇\",{\"1\":{\"266\":1}}],[\"娶了我在学生时代的女朋友\",{\"1\":{\"265\":1}}],[\"婚姻\",{\"1\":{\"265\":1}}],[\"哪位要是有好的资料麻烦共享一份给我\",{\"1\":{\"755\":1}}],[\"哪些情况下适合建立索引\",{\"0\":{\"565\":1}}],[\"哪些算是有效日志\",{\"1\":{\"220\":1}}],[\"哪个扇区\",{\"1\":{\"327\":1}}],[\"哪怕是流量的钱\",{\"1\":{\"264\":1}}],[\"赚流量的场景也不是白捡\",{\"1\":{\"264\":1}}],[\"正式开始使用\",{\"1\":{\"1502\":1}}],[\"正式发行版\",{\"1\":{\"766\":1}}],[\"正因为如此\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"正因为叶子节点保存了完整的数据以及有指针作为连接\",{\"1\":{\"317\":1}}],[\"正是通过分数来为集合中的成员进行从小到大的排序\",{\"1\":{\"670\":1}}],[\"正确使用锁类型对于优化数据库性能\",{\"1\":{\"630\":1}}],[\"正确使用才能发挥奇效\",{\"1\":{\"563\":1}}],[\"正则表达式\",{\"1\":{\"464\":1}}],[\"正数是0\",{\"1\":{\"441\":1}}],[\"正整数\",{\"1\":{\"427\":1}}],[\"正反馈非常重要\",{\"1\":{\"264\":1}}],[\"正例\",{\"1\":{\"222\":1,\"223\":1,\"224\":1,\"226\":1,\"229\":1,\"570\":1}}],[\"被广泛应用于大规模数据处理和实时流处理场景\",{\"1\":{\"1438\":1}}],[\"被广泛应用于大数据处理和实时数据流处理\",{\"1\":{\"1434\":1}}],[\"被实例化多次\",{\"1\":{\"1412\":1}}],[\"被从物理空间上隔离开了\",{\"1\":{\"1190\":1,\"1365\":1}}],[\"被抽取出来的公共模块\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"被调用之前\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"被部分初始化的对象\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"被声明为\",{\"1\":{\"1046\":1,\"1247\":1}}],[\"被操作系统做了限制\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"被引用的时候\",{\"1\":{\"860\":1}}],[\"被成功回收\",{\"1\":{\"711\":1}}],[\"被分配一个任务需要执行一个java类\",{\"1\":{\"1392\":1}}],[\"被分配到同一个索引上的多个键值对会连接成一个单向链表\",{\"1\":{\"689\":1}}],[\"被分配到同一个索引上的多个节点可以用这个单向链表连接起来\",{\"1\":{\"687\":1}}],[\"被分割为\",{\"1\":{\"320\":1}}],[\"被视为空列表\",{\"1\":{\"667\":1}}],[\"被关注\",{\"1\":{\"657\":1}}],[\"被唯一索引约束的健可以为空\",{\"1\":{\"559\":1}}],[\"被设置为\",{\"1\":{\"484\":1,\"755\":1}}],[\"被替换元素\",{\"1\":{\"337\":1}}],[\"被非技术人所知道\",{\"1\":{\"264\":1}}],[\"被讨厌的勇气\",{\"1\":{\"12\":1}}],[\"短语查询\",{\"1\":{\"478\":1}}],[\"短视频的玩法也在变化\",{\"1\":{\"264\":1}}],[\"短视频的机会\",{\"1\":{\"264\":1}}],[\"短支持周期\",{\"1\":{\"242\":1}}],[\"谈谈arraylist和vector的区别\",{\"0\":{\"1075\":1,\"1270\":1}}],[\"谈谈\",{\"0\":{\"1074\":1,\"1269\":1}}],[\"谈谈nio和bio区别\",{\"0\":{\"1045\":1,\"1246\":1}}],[\"谈谈我做的事\",{\"1\":{\"264\":1}}],[\"谈使用场景之前\",{\"1\":{\"129\":1}}],[\"到哪里去\",{\"1\":{\"1501\":1}}],[\"到哪里去找映射文件\",{\"1\":{\"835\":1}}],[\"到哪里去找到\",{\"1\":{\"835\":1}}],[\"到上线完整流程\",{\"1\":{\"1492\":1}}],[\"到kafka的broker节点\",{\"1\":{\"1448\":1}}],[\"到子类型的范围内的某种类型\",{\"1\":{\"1424\":1}}],[\"到任何被代理的对象\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"到底为什么要起这么个名字\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"到的状态是一样的\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"到达栅栏\",{\"1\":{\"1061\":12,\"1259\":12}}],[\"到了某个点由售票员通知乘客下车\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"到这一步\",{\"1\":{\"975\":1}}],[\"到这里你是否明白这个问题\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"到这里也是一个很正常的操作\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"到这里我们的网站目录就搭建成功了\",{\"1\":{\"973\":1}}],[\"到这里\",{\"1\":{\"892\":1}}],[\"到这里为止\",{\"1\":{\"765\":1}}],[\"到linux服务器文件夹下\",{\"1\":{\"914\":1}}],[\"到一个路径\",{\"1\":{\"764\":1}}],[\"到新哈希表里面\",{\"1\":{\"689\":1}}],[\"到此为止\",{\"1\":{\"460\":1}}],[\"到此为止相信你已经对b树和b+树有一定认识\",{\"1\":{\"317\":1}}],[\"到\",{\"1\":{\"428\":1,\"688\":1,\"698\":1,\"699\":1,\"870\":1,\"980\":1,\"1028\":1,\"1029\":2,\"1232\":1,\"1233\":2,\"1492\":1,\"1522\":1}}],[\"到目前我使用比较多的是在数据采集中\",{\"1\":{\"383\":1}}],[\"到今天\",{\"1\":{\"264\":1}}],[\"到期啦\",{\"1\":{\"98\":1}}],[\"今后在设计系统和使用锁机制时可以运用的更加娴熟和灵活\",{\"1\":{\"1476\":1}}],[\"今年共发了\",{\"1\":{\"266\":1}}],[\"今年很火的周鸿祎\",{\"1\":{\"264\":1}}],[\"今年是我在职场中学到生存指南最多的一年\",{\"1\":{\"263\":1}}],[\"今天带你使用一下\",{\"1\":{\"1506\":1}}],[\"今天找我说她打算找工作了\",{\"1\":{\"1502\":1}}],[\"今天就先到这吧\",{\"1\":{\"1476\":1}}],[\"今天就到这里吧\",{\"1\":{\"1386\":1}}],[\"今天就给你教一种免费还自动续的方案\",{\"1\":{\"98\":1}}],[\"今天的面试到此结束\",{\"1\":{\"1380\":1}}],[\"今天推荐这款工具\",{\"1\":{\"969\":1}}],[\"今天介绍三种快速创建\",{\"1\":{\"899\":1}}],[\"今天这篇文章就是给大家分享一下如何在我们实战生产中使用\",{\"1\":{\"715\":1}}],[\"今天我们来详细讨论一下elasticsearch选主的重要性和具体过程\",{\"1\":{\"1466\":1}}],[\"今天我们来聊聊elasticsearch的架构设计\",{\"1\":{\"1460\":1}}],[\"今天我们来聊聊kafka的使用场景\",{\"1\":{\"1434\":1}}],[\"今天我们来聊聊日志打印的\",{\"1\":{\"218\":1}}],[\"今天我们将聊一聊elasticsearch集群架构\",{\"1\":{\"1462\":1}}],[\"今天我们将聊一下elasticsearch和lucene\",{\"1\":{\"1458\":1}}],[\"今天我们要聊聊kafka的性能\",{\"1\":{\"1438\":1}}],[\"今天我们要聊一聊elasticsearch倒排索引\",{\"1\":{\"1464\":1}}],[\"今天我们要聊一聊elasticsearch基础知识\",{\"1\":{\"1456\":1}}],[\"今天我们要聊一聊kafka基础\",{\"1\":{\"1432\":1}}],[\"今天我们要聊一聊redis内存优化的话题\",{\"1\":{\"1430\":1}}],[\"今天我们要聊一聊redis分片集群\",{\"1\":{\"1426\":1}}],[\"今天我们一块来看看\",{\"1\":{\"535\":1}}],[\"今天聊聊我的\",{\"1\":{\"262\":1}}],[\"今天\",{\"1\":{\"237\":1,\"303\":1}}],[\"今天有小伙伴给我发私信\",{\"1\":{\"98\":1}}],[\"职场这个话题等我消化消化\",{\"1\":{\"263\":1}}],[\"职场\",{\"1\":{\"263\":1}}],[\"职业生涯规划\",{\"1\":{\"263\":1}}],[\"吧\",{\"1\":{\"263\":1}}],[\"及之后的版本中引入了偏向锁\",{\"1\":{\"1480\":1}}],[\"及之后的版本中\",{\"1\":{\"1480\":1}}],[\"及之前的版本中\",{\"1\":{\"1480\":1}}],[\"及其子类\",{\"1\":{\"1408\":1}}],[\"及早解决潜在问题\",{\"1\":{\"1400\":1}}],[\"及时回收资源等方式优化\",{\"1\":{\"1394\":1}}],[\"及横向扩展能力的增强\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"及kafka的架构等基本概念\",{\"1\":{\"1112\":1,\"1300\":1}}],[\"及演示源代码\",{\"1\":{\"969\":1}}],[\"及定义一个返回标准方便前端解析\",{\"1\":{\"892\":1}}],[\"及数据库接口操作都没有问题\",{\"1\":{\"892\":1}}],[\"及渲染后的\",{\"1\":{\"882\":1}}],[\"及\",{\"0\":{\"600\":1},\"1\":{\"656\":1,\"1149\":1,\"1332\":1}}],[\"及以上版本\",{\"1\":{\"541\":1}}],[\"及以上\",{\"1\":{\"455\":1}}],[\"及机器人等前沿科技的发展\",{\"1\":{\"263\":1}}],[\"及行业内的一些群体\",{\"1\":{\"263\":1}}],[\"办法有很多\",{\"1\":{\"263\":1}}],[\"首次同步\",{\"1\":{\"1422\":1}}],[\"首次执行是\",{\"1\":{\"893\":1}}],[\"首选\",{\"1\":{\"263\":1}}],[\"首先简单说一下\",{\"1\":{\"1412\":1}}],[\"首先选举产生新的\",{\"1\":{\"1199\":1,\"1372\":1}}],[\"首先它提供了一个自动化配置类\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"首先判断bean是否实现了destructionawarebeanpostprocessor接口\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"首先判断该投票的有效性\",{\"1\":{\"183\":1}}],[\"首先是分析需求\",{\"1\":{\"1502\":1}}],[\"首先是锁的超时时间\",{\"1\":{\"1428\":1}}],[\"首先是实例化bean\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"首先是位于一个类之中或者其子类中\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"首先提出了ioc\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"首先应该在业务上进行精简\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"首先应考虑在\",{\"1\":{\"1149\":1,\"1332\":1}}],[\"首先通过编译器把\",{\"1\":{\"1100\":1,\"1291\":1}}],[\"首先通过对象的引用找到对应在堆内存的变量的值\",{\"1\":{\"755\":1}}],[\"首先由客户端发出请求\",{\"1\":{\"1087\":1,\"1280\":1}}],[\"首先计算key的hash值\",{\"1\":{\"1077\":1,\"1272\":1}}],[\"首先需要了解java线程的6种状态\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"首先定义一个loginrequired注解\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"首先说一下基本\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"首先要了解什么是一致性\",{\"1\":{\"1035\":1,\"1239\":1}}],[\"首先你一定要对\",{\"1\":{\"998\":1}}],[\"首先大家要保证已经安装了\",{\"1\":{\"970\":1}}],[\"首先创建\",{\"1\":{\"755\":1}}],[\"首先考虑缓存\",{\"1\":{\"583\":1}}],[\"首先我们需要了解kafka的工作原理\",{\"1\":{\"1442\":1}}],[\"首先我们需要简单的理解分布式和集群\",{\"1\":{\"182\":1}}],[\"首先我们创建个\",{\"1\":{\"907\":1}}],[\"首先我们就要去看是不是索引失效\",{\"1\":{\"564\":1}}],[\"首先\",{\"0\":{\"1512\":1,\"1520\":1},\"1\":{\"435\":1,\"572\":1,\"755\":1,\"1045\":1,\"1076\":1,\"1189\":1,\"1246\":1,\"1271\":1,\"1364\":1,\"1424\":1,\"1430\":1,\"1434\":1,\"1436\":2,\"1438\":2,\"1442\":2,\"1450\":1,\"1470\":2,\"1494\":1}}],[\"首先根据个位数的数值\",{\"1\":{\"428\":1}}],[\"首先在根节点进行二分查找\",{\"1\":{\"320\":1}}],[\"首先分为\",{\"1\":{\"316\":1}}],[\"首先会比较两者的zxid\",{\"1\":{\"183\":1}}],[\"首先就会去找这个leader\",{\"1\":{\"170\":1}}],[\"首先如果你是计算机的学生\",{\"1\":{\"115\":1}}],[\"首先安装\",{\"0\":{\"99\":1},\"1\":{\"295\":1}}],[\"他和其他的排他锁\",{\"1\":{\"1150\":1,\"1333\":1}}],[\"他们只需要共享锁对象\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"他们经常认为这\",{\"1\":{\"589\":1}}],[\"他是这样做的\",{\"1\":{\"979\":1}}],[\"他是一个普普通通的男生\",{\"1\":{\"255\":1}}],[\"他都能回答出maven是一个项目管理工具\",{\"1\":{\"761\":1}}],[\"他的生命周期和线程相同\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"他的粉丝一共有多少\",{\"1\":{\"719\":1}}],[\"他的最小单元是块\",{\"1\":{\"325\":1}}],[\"他不受到\",{\"1\":{\"401\":1}}],[\"他一年只服务\",{\"1\":{\"263\":1}}],[\"脚下的路才是最重要的\",{\"1\":{\"263\":1}}],[\"脚注\",{\"0\":{\"31\":1}}],[\"目的是限制类型参数能被替换的实际类型\",{\"1\":{\"1424\":1}}],[\"目的是简化\",{\"1\":{\"1408\":1}}],[\"目的是\",{\"1\":{\"999\":1,\"1208\":1}}],[\"目的\",{\"1\":{\"890\":1,\"1201\":1,\"1374\":1}}],[\"目录下\",{\"1\":{\"1523\":1}}],[\"目录下包含以下几个文件\",{\"1\":{\"974\":1}}],[\"目录下创建一个包\",{\"1\":{\"902\":1}}],[\"目录里新建两个文件\",{\"1\":{\"890\":1}}],[\"目录包括\",{\"1\":{\"872\":1}}],[\"目录结构如图所示\",{\"1\":{\"885\":1}}],[\"目录结构如下\",{\"1\":{\"858\":1}}],[\"目录结构\",{\"0\":{\"811\":1,\"821\":1},\"1\":{\"826\":1}}],[\"目录\",{\"0\":{\"447\":1,\"872\":1},\"1\":{\"465\":1,\"466\":1,\"588\":1}}],[\"目标对象\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"目标就是设计一种尽可能少碰撞的hash算法\",{\"1\":{\"389\":1}}],[\"目标乘积\",{\"1\":{\"306\":2}}],[\"目标要有\",{\"1\":{\"263\":1}}],[\"目前定价是一包华子的价格\",{\"1\":{\"1492\":1}}],[\"目前这个理论已经被成功地应用到实践当中\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"目前防御\",{\"1\":{\"1094\":1,\"1287\":1}}],[\"目前jsp主要用在视图层\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"目前很多新项目很少会用到javaee的技术栈\",{\"1\":{\"1083\":1}}],[\"目前大多项目都是前后端分离\",{\"1\":{\"894\":1}}],[\"目前apache下绝大多数项目都已经采用maven进行管理\",{\"1\":{\"761\":1}}],[\"目前来说\",{\"1\":{\"698\":1}}],[\"目前在互联网公司\",{\"1\":{\"657\":1}}],[\"目前计算机使用的主存基本都是随机读写存储器\",{\"1\":{\"326\":1}}],[\"目前一年纯收入\",{\"1\":{\"263\":1}}],[\"目前所有内容都由站长个人维护\",{\"1\":{\"1\":1}}],[\"像我们常用的\",{\"1\":{\"1506\":1}}],[\"像在链表的删除操作\",{\"1\":{\"1476\":1}}],[\"像乐观锁\",{\"1\":{\"1476\":1}}],[\"像spring的\",{\"1\":{\"1402\":1}}],[\"像jdk自带的jconsole\",{\"1\":{\"1400\":1}}],[\"像heap大小\",{\"1\":{\"1400\":1}}],[\"像是类名\",{\"1\":{\"1392\":1}}],[\"像接口方法\",{\"1\":{\"894\":1}}],[\"像这样\",{\"1\":{\"665\":1}}],[\"像\",{\"1\":{\"319\":1,\"708\":1,\"1476\":3}}],[\"像社会\",{\"1\":{\"270\":1}}],[\"像网上所说\",{\"1\":{\"263\":1}}],[\"像微软的\",{\"1\":{\"263\":1}}],[\"像借d\",{\"1\":{\"263\":1}}],[\"做\",{\"1\":{\"1506\":1}}],[\"做空间整合\",{\"1\":{\"1396\":1}}],[\"做出正确的反馈后\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"做概率估算从而得到基数\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"做法\",{\"1\":{\"979\":1}}],[\"做整体映射\",{\"1\":{\"882\":1}}],[\"做容错\",{\"1\":{\"752\":1}}],[\"做简单的\",{\"1\":{\"716\":1}}],[\"做起事来\",{\"1\":{\"706\":1}}],[\"做很多操作时性能仍下降严重\",{\"1\":{\"578\":1}}],[\"做一些练习\",{\"1\":{\"1036\":1,\"1240\":1}}],[\"做一些简单操作了\",{\"1\":{\"765\":1}}],[\"做一些简单了解即可\",{\"1\":{\"652\":1}}],[\"做一些操作\",{\"0\":{\"550\":1}}],[\"做一件事时\",{\"1\":{\"264\":1}}],[\"做索引与搜索\",{\"1\":{\"453\":1}}],[\"做相应的写操作\",{\"1\":{\"326\":1}}],[\"做的人更是凤毛棱角\",{\"1\":{\"264\":1}}],[\"做应用层就是将使用门栏降到最低\",{\"1\":{\"263\":1}}],[\"做应用层是很好的选择\",{\"1\":{\"263\":1}}],[\"做底层架构\",{\"1\":{\"263\":1}}],[\"做了什么事\",{\"1\":{\"263\":1}}],[\"做了什么动作\",{\"1\":{\"207\":1}}],[\"音视频识别等\",{\"1\":{\"263\":1}}],[\"音频参数\",{\"1\":{\"144\":1}}],[\"远未达到在行的程度\",{\"1\":{\"1400\":1}}],[\"远程连接连接一个\",{\"1\":{\"1032\":1,\"1236\":1}}],[\"远程仓库\",{\"1\":{\"768\":1}}],[\"远程复制拷贝\",{\"1\":{\"111\":1}}],[\"远没有刚工作那一俩年的劲头和成长速度\",{\"1\":{\"263\":1}}],[\"学一些基础知识就可以很快上手\",{\"1\":{\"1512\":1}}],[\"学生就是各个线程\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"学生之间不用相互等待\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"学生和学习者可以公众号后台回复\",{\"1\":{\"706\":1}}],[\"学号不能为空\",{\"1\":{\"894\":1}}],[\"学号\",{\"1\":{\"887\":1,\"888\":1}}],[\"学会构建一个好的索引\",{\"1\":{\"481\":1}}],[\"学会更多的东西不一定能赚钱\",{\"1\":{\"263\":1}}],[\"学好英语\",{\"1\":{\"263\":1}}],[\"学好数学\",{\"1\":{\"263\":1}}],[\"学习和掌握kafka将是一个很好的选择\",{\"1\":{\"1436\":1}}],[\"学习java\",{\"1\":{\"1400\":1}}],[\"学习各项运行指标的测量与对调优的意义\",{\"1\":{\"1400\":1}}],[\"学习后会对整个计算机的理解更近一步\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"学习者对链表应该都很熟悉\",{\"1\":{\"684\":1}}],[\"学习者和爱好者\",{\"1\":{\"586\":1}}],[\"学习阶段初学者\",{\"1\":{\"459\":1}}],[\"学习一个新技术\",{\"1\":{\"450\":1}}],[\"学习一个东西\",{\"1\":{\"170\":1}}],[\"学习目标\",{\"1\":{\"447\":1}}],[\"学习基础数据结构\",{\"0\":{\"330\":1}}],[\"学习有俩种\",{\"1\":{\"263\":1}}],[\"学习\",{\"1\":{\"263\":1,\"450\":1,\"715\":1}}],[\"学习编程的同学免不了和\",{\"1\":{\"237\":1}}],[\"学习他们的见解和经验\",{\"1\":{\"56\":1}}],[\"风险和收益成正相关这个底层逻辑在什么时候都不会变\",{\"1\":{\"263\":1}}],[\"爬虫\",{\"1\":{\"261\":1}}],[\"毕业于\",{\"1\":{\"255\":1,\"261\":1}}],[\"毕竟将\",{\"1\":{\"1494\":1}}],[\"毕竟现在这种编号已经不足以承载当今的电商服务\",{\"1\":{\"716\":1}}],[\"毕竟知识学到都是自己的\",{\"1\":{\"250\":1}}],[\"毕竟合不合适也可以先体验\",{\"1\":{\"53\":1}}],[\"生动\",{\"1\":{\"1378\":1}}],[\"生命周期有清晰理解\",{\"1\":{\"1410\":1}}],[\"生命周期的理解\",{\"1\":{\"1410\":2}}],[\"生命周期比较熟悉\",{\"1\":{\"1410\":1}}],[\"生命周期\",{\"0\":{\"1085\":1,\"1278\":1}}],[\"生命周期随着jvm的销毁而结束\",{\"1\":{\"678\":1}}],[\"生成唯一id\",{\"1\":{\"1466\":1}}],[\"生成对应的rdb文件\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"生成带有分页语句的sql\",{\"1\":{\"1138\":1,\"1323\":1}}],[\"生成的\",{\"1\":{\"1524\":1}}],[\"生成的class文件中不再带有泛型信息\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"生成的字段类型不正确\",{\"1\":{\"491\":1}}],[\"生成二维码\",{\"0\":{\"940\":1}}],[\"生成流程图\",{\"1\":{\"929\":1}}],[\"生成项目的站点文档\",{\"1\":{\"777\":1}}],[\"生成项目报告\",{\"1\":{\"774\":1}}],[\"生成序列的掩码\",{\"1\":{\"441\":1}}],[\"生成\",{\"1\":{\"440\":2,\"766\":1,\"767\":1,\"939\":2,\"1422\":1}}],[\"生成了字符串\",{\"1\":{\"438\":1}}],[\"生活的方方面面\",{\"1\":{\"934\":1}}],[\"生活类的\",{\"1\":{\"270\":1}}],[\"生活\",{\"0\":{\"265\":1},\"1\":{\"262\":1}}],[\"生于\",{\"1\":{\"255\":1}}],[\"生产产品\",{\"1\":{\"1446\":1}}],[\"生产环境常用\",{\"1\":{\"927\":1}}],[\"生产环境用法\",{\"0\":{\"85\":1}}],[\"生产上使用docker配置一般是一次编译\",{\"1\":{\"440\":1}}],[\"生产者会等待消息被所有的副本\",{\"1\":{\"1452\":1}}],[\"生产者会等待消息被kafka集群的leader确认后再发送下一条消息\",{\"1\":{\"1452\":1}}],[\"生产者不会等待任何确认\",{\"1\":{\"1452\":1}}],[\"生产者需要确保消息能够成功推送到broker节点\",{\"1\":{\"1448\":1}}],[\"生产者代码\",{\"1\":{\"1448\":1}}],[\"生产者将消息发送到一个或多个主题\",{\"1\":{\"1438\":1}}],[\"生产者就像是顾客下单\",{\"1\":{\"1432\":1}}],[\"生产者发送消息时\",{\"1\":{\"1452\":1}}],[\"生产者发送消息有缓存的概念\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"生产者发送消息后\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"生产者发送消息后直接算写入成功\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"生产者发送消息\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"生产者才认为这条消息是写入成功的\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"生产者以及消费者只与\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"生产者\",{\"1\":{\"176\":1,\"1116\":1,\"1304\":1,\"1444\":1,\"1448\":1}}],[\"站在\",{\"1\":{\"893\":1}}],[\"站在前人的肩上\",{\"1\":{\"167\":1,\"381\":1,\"400\":1,\"409\":1,\"417\":1,\"430\":1,\"650\":1,\"676\":1,\"704\":1,\"761\":1,\"795\":1}}],[\"站点\",{\"1\":{\"774\":1}}],[\"站长是谁\",{\"1\":{\"255\":1}}],[\"站长\",{\"2\":{\"253\":1,\"254\":1,\"258\":1,\"259\":1}}],[\"平时做的分布式部署\",{\"1\":{\"440\":1}}],[\"平时我都用业余时间来维护\",{\"1\":{\"98\":1}}],[\"平均均为o\",{\"1\":{\"417\":1}}],[\"平均每天\",{\"1\":{\"250\":1,\"1492\":1}}],[\"平衡二叉树是每次将范围分割为两个区间\",{\"1\":{\"319\":1}}],[\"平衡二叉树是通过旋转来保持平衡的\",{\"1\":{\"319\":1}}],[\"平衡\",{\"1\":{\"316\":1}}],[\"🎁目录合集\",{\"1\":{\"1380\":1,\"1382\":1,\"1384\":1,\"1386\":1,\"1388\":1,\"1390\":1,\"1392\":1,\"1394\":1,\"1396\":1,\"1398\":1,\"1400\":1,\"1402\":1,\"1404\":1,\"1406\":1,\"1408\":1,\"1410\":1,\"1412\":1,\"1414\":1,\"1416\":1,\"1418\":1,\"1420\":1,\"1422\":1,\"1424\":1,\"1426\":1,\"1428\":1,\"1430\":1,\"1432\":1,\"1434\":1,\"1436\":1,\"1438\":1,\"1440\":1,\"1446\":1,\"1448\":1,\"1450\":1,\"1452\":1,\"1454\":1,\"1456\":1,\"1458\":1,\"1460\":1,\"1462\":1,\"1464\":1,\"1466\":1,\"1468\":1,\"1470\":1,\"1474\":1,\"1476\":1,\"1478\":1,\"1481\":1}}],[\"🎈\",{\"1\":{\"250\":1}}],[\"🆚\",{\"1\":{\"220\":1}}],[\"付费加入\",{\"0\":{\"250\":1}}],[\"很形象的比喻\",{\"1\":{\"1462\":1}}],[\"很聪明的问题\",{\"1\":{\"1452\":1}}],[\"很可能引起空指针或者越界异常\",{\"1\":{\"1446\":1}}],[\"很容易实现高可用\",{\"1\":{\"1418\":1}}],[\"很容易被误用\",{\"1\":{\"755\":1}}],[\"很方便\",{\"1\":{\"1416\":1}}],[\"很全面\",{\"1\":{\"1410\":1}}],[\"很棒的建议\",{\"1\":{\"1428\":1}}],[\"很棒\",{\"1\":{\"1408\":2,\"1438\":1,\"1458\":1,\"1462\":1}}],[\"很高兴与你的交流\",{\"1\":{\"1410\":1}}],[\"很高兴面试官能够欣赏\",{\"1\":{\"1392\":1}}],[\"很高兴见到你\",{\"1\":{\"1384\":1}}],[\"很高兴今天的交流\",{\"1\":{\"1380\":1}}],[\"很高兴有机会进行这样的技术探讨\",{\"1\":{\"1380\":1}}],[\"很好奇心\",{\"1\":{\"1454\":1}}],[\"很好的问题\",{\"1\":{\"1444\":2,\"1454\":1}}],[\"很好\",{\"1\":{\"1380\":2,\"1382\":2,\"1388\":1,\"1392\":3,\"1396\":1,\"1426\":1,\"1428\":1,\"1430\":1,\"1432\":2,\"1438\":2,\"1448\":1,\"1450\":1,\"1452\":1,\"1456\":1,\"1458\":1,\"1460\":1,\"1462\":1,\"1470\":2,\"1476\":1,\"1480\":9,\"1481\":1}}],[\"很好看\",{\"1\":{\"777\":1}}],[\"很有可能会在同一个数组位置产生严重的哈希冲突\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"很有幸进入这个领域\",{\"1\":{\"263\":1}}],[\"很明显\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"很明显这种写法会造成资源浪费\",{\"1\":{\"88\":1}}],[\"很简单的俩个接口\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"很显然\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"很少符合人的行为\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"很实用\",{\"1\":{\"779\":1}}],[\"很大程度补偿了\",{\"1\":{\"652\":1}}],[\"很多公司都有海量的日志数据\",{\"1\":{\"1434\":1}}],[\"很多框架使用运行时注解读取注解信息\",{\"1\":{\"1402\":1}}],[\"很多框架通过反射来读注解\",{\"1\":{\"1402\":1}}],[\"很多构建工具会在构建代码时扫描和读取注解\",{\"1\":{\"1402\":1}}],[\"很多第三方框架\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"很多的j2ee项目均采用了ioc框架产品spring\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"很多数据都查不到从而查数据库\",{\"1\":{\"1160\":1,\"1340\":1}}],[\"很多浏览器都限制一个站点最多保存20个cookie\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"很多\",{\"1\":{\"946\":1}}],[\"很多初学者和爱好者都有用到\",{\"1\":{\"761\":1}}],[\"很多在近期找过工作的同学一定都知道了\",{\"1\":{\"715\":1}}],[\"很多网站都有排行榜应用的\",{\"1\":{\"657\":1}}],[\"很多时候用\",{\"0\":{\"598\":1},\"1\":{\"1149\":1,\"1332\":1}}],[\"很多时候还取决于\",{\"1\":{\"591\":1}}],[\"很多查找及定位操作都是以页为单位\",{\"1\":{\"579\":1}}],[\"很多人都知道了个人\",{\"1\":{\"969\":1}}],[\"很多人都是通过空投才接触到了这一领域\",{\"1\":{\"534\":1}}],[\"很多人一定会想到\",{\"1\":{\"727\":1}}],[\"很多人自写连接池工具\",{\"1\":{\"710\":1}}],[\"很多人没有做过企业级项目\",{\"1\":{\"249\":1}}],[\"很多相同结构的文档组成索引\",{\"1\":{\"473\":1}}],[\"很多场景不适用\",{\"1\":{\"438\":1}}],[\"很多开源工具中都对它进行了实现\",{\"1\":{\"395\":1}}],[\"很多东西不用做太大\",{\"1\":{\"263\":1}}],[\"星球优惠码先到先得\",{\"1\":{\"250\":1}}],[\"星球链接\",{\"1\":{\"250\":1}}],[\"星球初始定价格\",{\"1\":{\"250\":1}}],[\"星球介绍\",{\"0\":{\"248\":1}}],[\"星球内提供一对一交流\",{\"1\":{\"53\":1}}],[\"群公告获取\",{\"1\":{\"247\":1}}],[\"资源未找到\",{\"1\":{\"1494\":1}}],[\"资源文件访问\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"资源共享\",{\"0\":{\"941\":1}}],[\"资源\",{\"1\":{\"894\":1}}],[\"资源获取说明\",{\"0\":{\"247\":1}}],[\"资源是宝贵的\",{\"1\":{\"86\":1}}],[\"京东云\",{\"2\":{\"245\":1}}],[\"京东云2核2g3m低至58元起\",{\"1\":{\"238\":1}}],[\"手记微信阅读\",{\"1\":{\"1489\":1,\"1498\":1}}],[\"手到擒来\",{\"1\":{\"969\":1}}],[\"手把手\",{\"1\":{\"969\":1}}],[\"手把手springboot整合flowable\",{\"0\":{\"922\":1}}],[\"手把手整合\",{\"1\":{\"870\":1}}],[\"手把手整合ssm框架\",{\"0\":{\"870\":1}}],[\"手把手教\",{\"1\":{\"244\":1}}],[\"手动控制目标方法调用时机\",{\"1\":{\"1402\":1}}],[\"手动提交位移\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"手动执行该脚本\",{\"1\":{\"1008\":1,\"1217\":1}}],[\"手动\",{\"1\":{\"1006\":1,\"1009\":1,\"1215\":1,\"1218\":1}}],[\"手动过期\",{\"1\":{\"1005\":1,\"1006\":2,\"1214\":1,\"1215\":2}}],[\"手动加了引号\",{\"1\":{\"843\":1}}],[\"手动加锁也就是显示的加表锁\",{\"1\":{\"635\":1}}],[\"手动给\",{\"0\":{\"635\":1}}],[\"手游\",{\"1\":{\"72\":1}}],[\"增删快\",{\"1\":{\"1404\":1}}],[\"增删慢但查找快\",{\"1\":{\"1406\":1}}],[\"增删慢\",{\"1\":{\"1404\":2}}],[\"增量式并发回收\",{\"1\":{\"1398\":1}}],[\"增量式地进行分代\",{\"1\":{\"1398\":1}}],[\"增量同步\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"增强系统的安全性\",{\"1\":{\"244\":1}}],[\"增加分区数可以增加并行处理的能力\",{\"1\":{\"1440\":1}}],[\"增加\",{\"1\":{\"1095\":1,\"1288\":1}}],[\"增加缓存处理\",{\"1\":{\"1095\":1,\"1288\":1}}],[\"增加单节点性能以及避免单节点存储故障\",{\"1\":{\"1030\":1,\"1234\":1}}],[\"增加数据源\",{\"1\":{\"952\":1}}],[\"增加了它们的等待时间\",{\"1\":{\"637\":1}}],[\"增加了操作的复杂性\",{\"1\":{\"566\":1}}],[\"增加等待时间\",{\"1\":{\"637\":1}}],[\"增加开销\",{\"1\":{\"565\":1}}],[\"增加系统资源消耗占用\",{\"1\":{\"226\":1}}],[\"增加定位问题的难度\",{\"1\":{\"224\":1}}],[\"内嵌了\",{\"1\":{\"1182\":1,\"1357\":1}}],[\"内测版\",{\"1\":{\"766\":1}}],[\"内行\",{\"1\":{\"761\":1}}],[\"内部也使用同一把锁\",{\"1\":{\"1446\":1}}],[\"内部使用锁分段技术实现线程安全\",{\"1\":{\"1446\":1}}],[\"内部使用锁机制同步访问\",{\"1\":{\"1446\":1}}],[\"内部的\",{\"1\":{\"1446\":1}}],[\"内部的方法基本相同\",{\"1\":{\"1380\":1}}],[\"内部维护着一个双向链表\",{\"1\":{\"1380\":1}}],[\"内部实现更加紧凑高效\",{\"1\":{\"1380\":1}}],[\"内部实现对外部是透明的\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"内部实现很多没优化和冗余\",{\"1\":{\"1072\":1,\"1267\":1}}],[\"内部实现了动态扩展机制\",{\"1\":{\"683\":1}}],[\"内部锁扮演了互斥锁\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"内部节点\",{\"1\":{\"322\":1}}],[\"内置的序列化方式无论从速度还是压缩比都不尽如人意\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"内置的\",{\"1\":{\"766\":1,\"767\":1}}],[\"内置的死锁检测器会在事务等待资源时自动检测死锁\",{\"1\":{\"643\":1}}],[\"内置了\",{\"1\":{\"664\":1}}],[\"内存映射等\",{\"1\":{\"1478\":1}}],[\"内存位置\",{\"1\":{\"1476\":1}}],[\"内存变化\",{\"1\":{\"1400\":1}}],[\"内存分配是jvm内存模型中非常重要的一部分\",{\"1\":{\"1388\":1}}],[\"内存分配\",{\"1\":{\"1388\":1}}],[\"内存分别\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"内存模型\",{\"1\":{\"1388\":1}}],[\"内存语义实现\",{\"1\":{\"1382\":1}}],[\"内存语义\",{\"1\":{\"1382\":1}}],[\"内存屏障实现\",{\"1\":{\"1382\":1}}],[\"内存屏障可以分为读屏障\",{\"1\":{\"1382\":1}}],[\"内存屏障\",{\"1\":{\"1382\":1}}],[\"内存使用率不高\",{\"1\":{\"1103\":1,\"1294\":1}}],[\"内存使用量只与你配置的精确度相关\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"内存泄漏是指不再被使用的对象或者变量一直被占据在内存中\",{\"1\":{\"1102\":1,\"1293\":1}}],[\"内存和带宽\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"内存中的缓冲将被清除\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"内存中的数据结构存储系统\",{\"1\":{\"664\":1}}],[\"内存读写速度也是远高于磁盘的\",{\"1\":{\"999\":1,\"1208\":1}}],[\"内存的算法\",{\"1\":{\"699\":1}}],[\"内存回收机制\",{\"1\":{\"699\":1}}],[\"内存回收和对象的空转时长涉及到\",{\"1\":{\"699\":1}}],[\"内存回收\",{\"1\":{\"698\":2}}],[\"内存操作\",{\"1\":{\"657\":1}}],[\"内存\",{\"1\":{\"580\":1,\"1021\":1,\"1227\":1,\"1400\":1}}],[\"内存能加载更多的数据\",{\"1\":{\"579\":1}}],[\"内存不够用\",{\"1\":{\"319\":1}}],[\"内产生的\",{\"1\":{\"440\":1}}],[\"内核采用了非官方的grsecurity\",{\"1\":{\"244\":1}}],[\"内容管理系统和商业应用等\",{\"1\":{\"1458\":1}}],[\"内容很详细\",{\"1\":{\"1446\":1}}],[\"内容被写入一个新段\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"内容\",{\"1\":{\"27\":1,\"807\":1,\"818\":1,\"826\":1,\"1143\":1,\"1326\":1}}],[\"安全第一\",{\"1\":{\"1392\":1}}],[\"安全性不错\",{\"1\":{\"989\":1}}],[\"安全性\",{\"1\":{\"244\":1,\"1392\":1}}],[\"安装工具\",{\"0\":{\"972\":1}}],[\"安装docker稳定版\",{\"1\":{\"915\":1}}],[\"安装一些工具\",{\"1\":{\"915\":1}}],[\"安装教程\",{\"0\":{\"733\":1}}],[\"安装环境\",{\"1\":{\"732\":1}}],[\"安装和常用数据\",{\"1\":{\"676\":1}}],[\"安装和数据类型\",{\"1\":{\"650\":1}}],[\"安装和配置难度大\",{\"1\":{\"243\":1}}],[\"安装目录截图\",{\"1\":{\"466\":1}}],[\"安装使用可视化工具插件head\",{\"0\":{\"461\":1},\"1\":{\"447\":1}}],[\"安装依赖\",{\"1\":{\"133\":1}}],[\"安装\",{\"0\":{\"100\":1,\"101\":1,\"140\":1,\"174\":1,\"658\":1,\"731\":1,\"735\":1,\"764\":1,\"958\":1},\"1\":{\"100\":1,\"126\":2,\"131\":1,\"142\":1,\"461\":1,\"962\":1,\"972\":1,\"1522\":1}}],[\"轻量级锁是一种针对多线程访问同步块的优化策略\",{\"1\":{\"1480\":1}}],[\"轻量级锁和重量级锁等优化策略\",{\"1\":{\"1480\":1}}],[\"轻量级\",{\"1\":{\"244\":1,\"1414\":1}}],[\"轻量2核2g4m低至79元\",{\"1\":{\"238\":1}}],[\"潜在的稳定性问题\",{\"1\":{\"242\":1}}],[\"缺一不可\",{\"1\":{\"1144\":1,\"1327\":1}}],[\"缺乏专业技术支持\",{\"1\":{\"241\":1}}],[\"缺乏各种桌面环境和用户友好的应用程序\",{\"1\":{\"240\":1}}],[\"缺点是反射的性能比较低\",{\"1\":{\"1468\":1}}],[\"缺点是aof\",{\"1\":{\"1420\":1}}],[\"缺点是数据有一定的丢失风险\",{\"1\":{\"1420\":1}}],[\"缺点是实现相对复杂\",{\"1\":{\"1390\":1}}],[\"缺点是只能使用一次\",{\"1\":{\"1390\":1}}],[\"缺点是需要合理配置线程池的参数\",{\"1\":{\"1384\":1}}],[\"缺点是字符串作为id占用空间大\",{\"1\":{\"435\":1}}],[\"缺点是有一定的误识别率和删除困难\",{\"1\":{\"385\":1}}],[\"缺点\",{\"1\":{\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"244\":1,\"831\":1,\"835\":1,\"1006\":1,\"1103\":2,\"1215\":1,\"1294\":2}}],[\"基数不大\",{\"1\":{\"1034\":2,\"1238\":2}}],[\"基数排序动图演示\",{\"1\":{\"428\":1}}],[\"基数排序的方式可以采用lsd\",{\"1\":{\"427\":1}}],[\"基数排序的发明可以追溯到1887年赫尔曼\",{\"1\":{\"427\":1}}],[\"基数排序法的效率高于其它的稳定性排序法\",{\"1\":{\"424\":1}}],[\"基数排序法是属于稳定性的排序\",{\"1\":{\"424\":1,\"425\":1}}],[\"基数排序\",{\"0\":{\"422\":1,\"424\":1},\"1\":{\"423\":2,\"424\":1}}],[\"基数排序就是这么容易\",{\"0\":{\"420\":1}}],[\"基本功\",{\"1\":{\"1382\":1}}],[\"基本概念\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"基本上还是基于\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"基本上\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"基本类型的值\",{\"1\":{\"1042\":2,\"1243\":2}}],[\"基本用法\",{\"1\":{\"980\":1}}],[\"基本项目结构\",{\"0\":{\"903\":1}}],[\"基本数据类型的操作做了讲解\",{\"1\":{\"710\":1}}],[\"基本数据类型\",{\"1\":{\"676\":1}}],[\"基本的操作方式\",{\"1\":{\"666\":1}}],[\"基本可以做到连续递增\",{\"1\":{\"436\":1}}],[\"基本每天大家都晚上\",{\"1\":{\"270\":1}}],[\"基于当前要开发的是一个用户中心系统\",{\"1\":{\"1506\":1}}],[\"基于用户的名称的查询\",{\"1\":{\"1502\":1}}],[\"基于以上几点\",{\"1\":{\"1494\":1}}],[\"基于lucene构建\",{\"1\":{\"1460\":1}}],[\"基于哈希表实现\",{\"1\":{\"1406\":1}}],[\"基于双向链表实现\",{\"1\":{\"1404\":1}}],[\"基于动态数组实现\",{\"1\":{\"1404\":1}}],[\"基于红黑树实现\",{\"1\":{\"1380\":1,\"1406\":1}}],[\"基于zset\",{\"1\":{\"1156\":1,\"1336\":1}}],[\"基于sql语句编程\",{\"1\":{\"1130\":1,\"1315\":1}}],[\"基于springboot+vue的后台管理系统免费开源\",{\"1\":{\"731\":1}}],[\"基于磁盘的随机读写确实很慢\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"基于jdk8\",{\"1\":{\"1098\":1}}],[\"基于io复用模型\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"基于池化思想\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"基于region分代回收\",{\"1\":{\"1394\":1}}],[\"基于reactor模型\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"基于rhel的稳定版本\",{\"1\":{\"240\":1}}],[\"基于word2vec的商品向量还有一个可用之处\",{\"1\":{\"1036\":1,\"1240\":1}}],[\"基于事件驱动的网络应用框架\",{\"1\":{\"988\":1}}],[\"基于github搭建网站\",{\"0\":{\"969\":1}}],[\"基于btc的一个项目\",{\"1\":{\"966\":1}}],[\"基于dockerfile打包一个名为\",{\"1\":{\"917\":1}}],[\"基于注解的\",{\"1\":{\"881\":1}}],[\"基于class的配置方式\",{\"1\":{\"845\":1}}],[\"基于内存\",{\"1\":{\"678\":1}}],[\"基于内存的数据结构存储器\",{\"1\":{\"677\":1}}],[\"基于乐观锁\",{\"0\":{\"642\":1}}],[\"基于排他锁\",{\"0\":{\"641\":1}}],[\"基于唯一索引实现\",{\"0\":{\"640\":1}}],[\"基于游标的方法和基于结果集的方法都可以尝试一下\",{\"1\":{\"609\":1}}],[\"基于集的方法通常更有效\",{\"0\":{\"608\":1}}],[\"基于比较的排序的时间复杂度在理论上的下限是o\",{\"1\":{\"410\":1}}],[\"基于桶排序求解\",{\"1\":{\"406\":1}}],[\"基于\",{\"0\":{\"731\":1},\"1\":{\"405\":1,\"438\":1,\"495\":1,\"667\":1,\"785\":1,\"1036\":1,\"1073\":1,\"1135\":1,\"1156\":1,\"1190\":1,\"1240\":1,\"1268\":1,\"1320\":1,\"1336\":1,\"1365\":1}}],[\"基础镜像\",{\"1\":{\"1514\":1}}],[\"基础镜像通过java8来的\",{\"1\":{\"913\":1}}],[\"基础数据结构\",{\"1\":{\"715\":1}}],[\"基础之上\",{\"1\":{\"453\":1}}],[\"基础介绍\",{\"0\":{\"384\":1}}],[\"基础排序\",{\"0\":{\"347\":1}}],[\"基础知识资料较长\",{\"1\":{\"330\":1}}],[\"基础技术\",{\"1\":{\"263\":1}}],[\"基础\",{\"1\":{\"117\":1,\"587\":1,\"1040\":1}}],[\"基础不牢\",{\"1\":{\"117\":1}}],[\"适配器\",{\"1\":{\"1414\":1}}],[\"适配\",{\"1\":{\"1414\":1}}],[\"适应行为的变化\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"适应不同应用场景\",{\"1\":{\"240\":1}}],[\"适用场景\",{\"1\":{\"632\":1,\"633\":1,\"1004\":1,\"1213\":1}}],[\"适用于大内存服务器\",{\"1\":{\"1394\":1}}],[\"适用于大内存的机器\",{\"1\":{\"1394\":1}}],[\"适用于对响应时间有要求的场景\",{\"1\":{\"1394\":1,\"1396\":1}}],[\"适用于微服务等\",{\"1\":{\"1394\":1}}],[\"适用于服务请求量\",{\"1\":{\"946\":1}}],[\"适用于写操作多于读操作的环境\",{\"1\":{\"633\":1}}],[\"适用于写操作频繁或者写冲突可能性较高的场景\",{\"1\":{\"633\":1}}],[\"适用于写操作不频繁或者写冲突可能性较低的场景\",{\"1\":{\"632\":1}}],[\"适用于读操作远多于写操作的环境\",{\"1\":{\"632\":1}}],[\"适用于需要对整个表执行批量操作的场景\",{\"1\":{\"628\":1}}],[\"适用于需要高并发读写操作的场景\",{\"1\":{\"627\":1}}],[\"适用于需要较高并发性能的场景\",{\"1\":{\"624\":1,\"629\":1}}],[\"适用于全表操作\",{\"1\":{\"624\":1}}],[\"适用版本等各种问题\",{\"1\":{\"454\":1}}],[\"适当地使用它们可以使某些例程更有效\",{\"1\":{\"604\":1}}],[\"适当的回表是必要的\",{\"1\":{\"567\":1}}],[\"适合大规模的数据恢复\",{\"1\":{\"1420\":1}}],[\"适合于多线程环境\",{\"1\":{\"1072\":1,\"1267\":1}}],[\"适合阅读人群\",{\"0\":{\"586\":1}}],[\"适合建立索引\",{\"1\":{\"565\":1}}],[\"适合简短\",{\"1\":{\"496\":1}}],[\"适合初学\",{\"1\":{\"450\":1,\"464\":1,\"481\":1,\"513\":1}}],[\"适合初学者和那些从其他操作系统转移来的用户\",{\"1\":{\"239\":1}}],[\"适合作为容器镜像的基础操作系统\",{\"1\":{\"244\":1}}],[\"适合开发人员和技术爱好者\",{\"1\":{\"242\":1}}],[\"支持大量的并发连接\",{\"1\":{\"1478\":2}}],[\"支持非阻塞式\",{\"1\":{\"1478\":1}}],[\"支持多种消息发布和订阅模式\",{\"1\":{\"1436\":1}}],[\"支持多种传输类型\",{\"1\":{\"989\":1}}],[\"支持丰富数据类型\",{\"1\":{\"1418\":1}}],[\"支持快速查找\",{\"1\":{\"1406\":1}}],[\"支持排序\",{\"1\":{\"1380\":1}}],[\"支持高并发的线程安全map\",{\"1\":{\"1380\":1}}],[\"支持null\",{\"1\":{\"1380\":1}}],[\"支持7种节点类型\",{\"1\":{\"1195\":1,\"1368\":1}}],[\"支持写动态sql语句并可重复使用\",{\"1\":{\"1130\":1,\"1315\":1}}],[\"支持流数据处理等多种特性而被广泛使用\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"支持断点传输\",{\"1\":{\"1095\":1,\"1288\":1}}],[\"支持一次转移多个提交\",{\"1\":{\"980\":1}}],[\"支持一系列著名的模型\",{\"1\":{\"290\":1}}],[\"支持的数据源\",{\"1\":{\"947\":1}}],[\"支持的\",{\"1\":{\"946\":1}}],[\"支持的prometheus\",{\"1\":{\"946\":1}}],[\"支持的最大数据标识id\",{\"1\":{\"441\":1}}],[\"支持的最大机器id\",{\"1\":{\"441\":1}}],[\"支持\",{\"1\":{\"660\":1,\"989\":1,\"1408\":1}}],[\"支持二进制案例的\",{\"1\":{\"656\":1}}],[\"支持数据的备份\",{\"1\":{\"655\":1}}],[\"支持数据的持久化\",{\"1\":{\"655\":1}}],[\"支持主从同步\",{\"1\":{\"652\":1}}],[\"支持各种不同方式的排序\",{\"1\":{\"652\":1}}],[\"支持网络\",{\"1\":{\"652\":1}}],[\"支持参数yes\",{\"1\":{\"493\":1}}],[\"支持先进先出\",{\"1\":{\"335\":1}}],[\"支持模型列表\",{\"1\":{\"286\":1,\"297\":1}}],[\"支持许多不同的系统架构\",{\"1\":{\"241\":1}}],[\"支持广泛的硬件架构\",{\"1\":{\"240\":1}}],[\"支持为图片设置颜色模式和大小\",{\"1\":{\"35\":1}}],[\"包名称\",{\"1\":{\"1514\":1}}],[\"包中的并发集合类\",{\"1\":{\"1480\":1}}],[\"包中就有对应方法\",{\"1\":{\"438\":1}}],[\"包上\",{\"1\":{\"1402\":1}}],[\"包部署到容器中\",{\"1\":{\"1182\":1,\"1357\":1}}],[\"包装类的实例\",{\"1\":{\"1042\":2,\"1243\":2}}],[\"包和\",{\"1\":{\"914\":1}}],[\"包下新建三个文件\",{\"1\":{\"892\":1}}],[\"包下新建\",{\"1\":{\"892\":1,\"893\":1}}],[\"包下新建实体\",{\"1\":{\"888\":1}}],[\"包所有注解\",{\"1\":{\"881\":1}}],[\"包\",{\"1\":{\"454\":1,\"1402\":1}}],[\"包含一级缓存和二级缓存\",{\"1\":{\"1416\":1}}],[\"包含连接点的对象\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"包含很多\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"包含了映射语句\",{\"1\":{\"1416\":1}}],[\"包含了各种bean的定义\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"包含了很多静态方法\",{\"1\":{\"1070\":1,\"1265\":1}}],[\"包含了绝大多数流行的开源java构件\",{\"1\":{\"768\":1}}],[\"包含所有的\",{\"1\":{\"306\":2}}],[\"包含\",{\"1\":{\"261\":1,\"587\":1,\"1414\":2}}],[\"包含全面的开发工具和库\",{\"1\":{\"242\":1}}],[\"包含最新的安全补丁和功能\",{\"1\":{\"240\":1}}],[\"包括编译\",{\"1\":{\"1520\":1}}],[\"包括前后端完整项目\",{\"1\":{\"1492\":1}}],[\"包括网络编程\",{\"1\":{\"1478\":1}}],[\"包括词条化\",{\"1\":{\"1470\":1}}],[\"包括分片和副本的处理\",{\"1\":{\"1470\":3}}],[\"包括类的属性\",{\"1\":{\"1468\":1}}],[\"包括搜索引擎\",{\"1\":{\"1458\":1}}],[\"包括g1\",{\"1\":{\"1396\":1}}],[\"包括环境变量里设置的那堆classpath\",{\"1\":{\"1392\":1}}],[\"包括around\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"包括了传入参数映射配置\",{\"1\":{\"1132\":1,\"1317\":1}}],[\"包括延迟时间replica\",{\"1\":{\"1113\":1,\"1301\":1}}],[\"包括时序性的和非时序性的\",{\"1\":{\"947\":1}}],[\"包括项目清理\",{\"1\":{\"774\":1}}],[\"包括清除\",{\"1\":{\"761\":1}}],[\"包括元素成员和元素分值\",{\"1\":{\"670\":1}}],[\"包括string\",{\"1\":{\"652\":1}}],[\"包括死锁检测到的信息\",{\"1\":{\"644\":1}}],[\"包括5位datacenterid和5位workerid<br>\",{\"1\":{\"441\":1}}],[\"包括\",{\"1\":{\"440\":1,\"835\":1,\"1117\":1,\"1305\":1}}],[\"包括数组\",{\"0\":{\"372\":1}}],[\"包括双亲\",{\"0\":{\"365\":1}}],[\"包括顺序和链式存储\",{\"0\":{\"359\":1}}],[\"包括顺序和链式存储结构\",{\"0\":{\"336\":1}}],[\"包括b\",{\"1\":{\"319\":1}}],[\"包括教学等\",{\"1\":{\"263\":1}}],[\"包括之前的我\",{\"1\":{\"263\":1}}],[\"包括开发和面试中遇到的问题\",{\"1\":{\"249\":1}}],[\"包括请求参数和返回结果\",{\"1\":{\"213\":1}}],[\"包括功能描述\",{\"1\":{\"207\":1}}],[\"包括windows\",{\"1\":{\"139\":1}}],[\"现场有个紧急需求\",{\"1\":{\"979\":1}}],[\"现象\",{\"1\":{\"341\":1}}],[\"现代主存的编址规则比较复杂\",{\"1\":{\"326\":1}}],[\"现代ram的结构和存取原理比较复杂\",{\"1\":{\"326\":1}}],[\"现代化的软件栈\",{\"1\":{\"240\":1}}],[\"现在国内对\",{\"1\":{\"1515\":1}}],[\"现在不太建议使用\",{\"1\":{\"1380\":1}}],[\"现在不建议使用\",{\"1\":{\"1380\":1}}],[\"现在有什么其他的map实现可以选择\",{\"1\":{\"1380\":1}}],[\"现在大多数应用都是支持分布式的\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"现在也有同步的\",{\"1\":{\"1072\":1,\"1267\":1}}],[\"现在将提交f应用到master分支\",{\"1\":{\"980\":1}}],[\"现在整个项目全部完成\",{\"1\":{\"895\":1}}],[\"现在测试一下\",{\"1\":{\"891\":1}}],[\"现在的写法是从数据库层向前\",{\"1\":{\"891\":1}}],[\"现在需要编写相应的\",{\"1\":{\"890\":1}}],[\"现在一些mybatis\",{\"1\":{\"833\":1}}],[\"现在为止应该没有使用jdk1\",{\"1\":{\"764\":1}}],[\"现在多机器部署的程序可以基于\",{\"1\":{\"719\":1}}],[\"现在多数使用\",{\"1\":{\"570\":1}}],[\"现在\",{\"1\":{\"657\":1,\"1169\":1,\"1346\":1,\"1444\":1}}],[\"现在是\",{\"1\":{\"584\":1,\"899\":1}}],[\"现在只需要安装\",{\"1\":{\"296\":1}}],[\"现在各大公司都在做\",{\"1\":{\"263\":1}}],[\"现在这个直播使用很广泛的时代\",{\"1\":{\"151\":1}}],[\"现在很多市场上的剪辑软件都是基于它做的\",{\"1\":{\"138\":1}}],[\"现在在linux\",{\"1\":{\"123\":1}}],[\"现在市面上机构也很多\",{\"1\":{\"115\":1}}],[\"现在全局都是可以使用\",{\"1\":{\"101\":1}}],[\"现在用光了\",{\"1\":{\"98\":1}}],[\"长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄露\",{\"1\":{\"1102\":1,\"1293\":1}}],[\"长连接\",{\"1\":{\"1095\":1,\"1288\":1}}],[\"长度虽然等于\",{\"1\":{\"1494\":1}}],[\"长度的队列\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"长度\",{\"1\":{\"692\":1}}],[\"长度后\",{\"1\":{\"174\":1}}],[\"长城防火墙有100亿个需要屏蔽的网站\",{\"1\":{\"383\":1}}],[\"长期支持\",{\"1\":{\"239\":1}}],[\"腾讯云\",{\"2\":{\"245\":1}}],[\"腾讯云优惠合集\",{\"1\":{\"238\":1}}],[\"腾讯云开发者社区\",{\"1\":{\"3\":1}}],[\"元注解\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"元字段\",{\"1\":{\"510\":1}}],[\"元素是否有序\",{\"1\":{\"1071\":1,\"1266\":1}}],[\"元素是否是集合\",{\"1\":{\"669\":1}}],[\"元素用来配置插件的参数\",{\"1\":{\"907\":1}}],[\"元素来管理子模块中的版本\",{\"1\":{\"907\":1}}],[\"元素中的\",{\"1\":{\"829\":1}}],[\"元素中设置的相应值来替换\",{\"1\":{\"829\":1}}],[\"元素体内指定的属性首先被读取\",{\"1\":{\"829\":1}}],[\"元素的子元素来传递\",{\"1\":{\"829\":1}}],[\"元素的值是几\",{\"1\":{\"412\":1}}],[\"元素从\",{\"1\":{\"669\":1}}],[\"元素\",{\"1\":{\"667\":1}}],[\"元素初始值全为0\",{\"1\":{\"412\":1}}],[\"元素出现的次数为值\",{\"1\":{\"406\":1}}],[\"元素为键\",{\"1\":{\"406\":1}}],[\"元素在每个桶中排序\",{\"1\":{\"404\":1}}],[\"元素分配到不同桶中\",{\"1\":{\"404\":1}}],[\"元素值域的划分\",{\"1\":{\"403\":1}}],[\"元素个数\",{\"1\":{\"338\":1,\"339\":1}}],[\"元\",{\"1\":{\"238\":2,\"250\":2}}],[\"推迟其实例化时间\",{\"1\":{\"1412\":1}}],[\"推送文本内容\",{\"1\":{\"548\":1}}],[\"推断字段的类型\",{\"1\":{\"492\":1}}],[\"推进\",{\"1\":{\"341\":1}}],[\"推荐一个国内下载网站\",{\"1\":{\"1512\":1}}],[\"推荐一个\",{\"1\":{\"1507\":1}}],[\"推荐一个maven坐标查询网站\",{\"1\":{\"768\":1}}],[\"推荐一篇非常不错的文章\",{\"1\":{\"1141\":1,\"1324\":1}}],[\"推荐阅读\",{\"0\":{\"1010\":1,\"1037\":1,\"1051\":1,\"1065\":1,\"1151\":1,\"1164\":1},\"1\":{\"779\":1}}],[\"推荐第二种\",{\"1\":{\"491\":1}}],[\"推荐使用\",{\"1\":{\"296\":1,\"439\":1,\"1380\":1}}],[\"推荐\",{\"0\":{\"236\":1},\"1\":{\"842\":1}}],[\"推流\",{\"1\":{\"163\":1}}],[\"遇到什么问题\",{\"1\":{\"1476\":1}}],[\"遇到一种\",{\"1\":{\"436\":1}}],[\"遇到\",{\"1\":{\"228\":1}}],[\"防止数据丢失\",{\"1\":{\"1422\":1}}],[\"防止重启时只部分加载新aof的情况发生\",{\"1\":{\"1420\":1}}],[\"防止重复领取\",{\"1\":{\"541\":1}}],[\"防止内存泄露\",{\"1\":{\"1380\":1}}],[\"防止加锁方异常无法释放锁时其他客户端无法获取锁\",{\"1\":{\"1163\":1,\"1343\":1}}],[\"防止发生活锁\",{\"1\":{\"1062\":2,\"1260\":2}}],[\"防止指令重排\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"防止sql注入\",{\"1\":{\"826\":1}}],[\"防止其他事务在这个范围内插入新行\",{\"1\":{\"621\":1}}],[\"防止幻读\",{\"1\":{\"619\":1}}],[\"防止领超\",{\"1\":{\"541\":1}}],[\"防止中文编码与终端不一致导致打印出现乱码\",{\"1\":{\"227\":1}}],[\"防止出现拖库\",{\"1\":{\"212\":1}}],[\"应尽量避免全表扫描\",{\"1\":{\"1149\":1,\"1332\":1}}],[\"应尽量避免在where子句中对字段进行函数操作\",{\"0\":{\"595\":1}}],[\"应尽量避免在\",{\"0\":{\"589\":1,\"590\":1,\"591\":1,\"594\":1},\"1\":{\"1149\":5,\"1332\":5}}],[\"应当使用cookie\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"应当是不匹配的\",{\"1\":{\"504\":1}}],[\"应一位fans同学要求\",{\"1\":{\"761\":1}}],[\"应先寻找基于集的解决方案来解决问题\",{\"0\":{\"608\":1}}],[\"应先create\",{\"0\":{\"605\":1}}],[\"应改为\",{\"1\":{\"594\":1,\"595\":1}}],[\"应把最常被访问和选择性较高的列放在前面\",{\"1\":{\"561\":1}}],[\"应该怎么做呢\",{\"1\":{\"1480\":1}}],[\"应该是类型参数和实际类型参数吧\",{\"1\":{\"1424\":1}}],[\"应该选择更高效的序列化工具来降低字节数组大小\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"应该返回false\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"应该返回同样的结果\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"应该返回true\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"应该添加\",{\"1\":{\"894\":1}}],[\"应该会出现\",{\"1\":{\"893\":1}}],[\"应该考虑相应需求是否合理\",{\"0\":{\"611\":1}}],[\"应该建立索引\",{\"1\":{\"565\":1}}],[\"应该能看到现在大多的视频质量和之前完全不一样\",{\"1\":{\"264\":1}}],[\"应该直接删掉或者将为\",{\"1\":{\"226\":1}}],[\"应用打包为一个\",{\"1\":{\"1525\":1}}],[\"应用服务\",{\"1\":{\"1507\":1}}],[\"应用微服务架构\",{\"1\":{\"1408\":1}}],[\"应用中使用\",{\"1\":{\"1408\":1}}],[\"应用了\",{\"1\":{\"1408\":1}}],[\"应用来说\",{\"1\":{\"1408\":1}}],[\"应用\",{\"1\":{\"1408\":6}}],[\"应用程序\",{\"1\":{\"1408\":1}}],[\"应用程序类加载器\",{\"1\":{\"1392\":1}}],[\"应用程序将对象的创建及初始化职责交给工厂对象\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"应用上下文\",{\"1\":{\"1187\":1,\"1362\":1}}],[\"应用监控\",{\"1\":{\"1182\":1,\"1357\":1}}],[\"应用的开发\",{\"1\":{\"1181\":1,\"1356\":1}}],[\"应用的初始搭建以及开发过程\",{\"1\":{\"454\":1}}],[\"应用缓存\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"应用以及后端的负载情况以及可能出现的问题\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"应用于当前分支\",{\"1\":{\"980\":1}}],[\"应用于其他分支\",{\"1\":{\"980\":1}}],[\"应用某个存储\",{\"1\":{\"979\":1}}],[\"应用构建和打包的\",{\"1\":{\"907\":1}}],[\"应用支持性\",{\"1\":{\"244\":1}}],[\"应用场景了解么\",{\"0\":{\"990\":1}}],[\"应用场景\",{\"0\":{\"178\":1},\"1\":{\"716\":1,\"717\":1,\"718\":1,\"719\":1,\"720\":1,\"721\":1,\"722\":1,\"723\":1,\"1034\":2,\"1238\":2}}],[\"​每个replica都要为此在zookeeper上注册一个watch\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"​如果宕机的那个broker上的partition比较多\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"​如果有需要\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"​这是由zookeeper的特性引起的\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"​​\",{\"1\":{\"1021\":1}}],[\"​\",{\"1\":{\"226\":1,\"417\":1,\"687\":1,\"974\":1,\"1184\":3,\"1359\":3}}],[\"发展和优化而成的一种高性能垃圾收集器\",{\"1\":{\"1398\":1}}],[\"发展的今天\",{\"1\":{\"263\":1}}],[\"发完即忘\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"发送消息到分区p3\",{\"1\":{\"1450\":1}}],[\"发送消息到分区p2\",{\"1\":{\"1450\":1}}],[\"发送消息到分区p1\",{\"1\":{\"1450\":1}}],[\"发送消息的逻辑\",{\"1\":{\"1444\":1}}],[\"发送消息的分区策略有哪些\",{\"0\":{\"1119\":1,\"1307\":1}}],[\"发送者将消息m1发送到p1\",{\"1\":{\"1450\":1}}],[\"发送者将消息发送到一个中间件\",{\"1\":{\"1450\":1}}],[\"发送sync命令\",{\"1\":{\"1422\":1}}],[\"发送\",{\"1\":{\"1119\":1,\"1307\":1,\"1422\":2}}],[\"发送新建\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"发起io请求\",{\"1\":{\"1045\":2,\"1246\":2}}],[\"发起握手等候响应超时时间\",{\"1\":{\"123\":1}}],[\"发生故障时\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"发生在父类子类之间\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"发生了一个异常\",{\"1\":{\"225\":1}}],[\"发布的线程安全的\",{\"1\":{\"1446\":1}}],[\"发布\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"发布数据更新的消息\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"发布站点\",{\"1\":{\"774\":1}}],[\"发布到本地仓库或者服务器\",{\"1\":{\"768\":1}}],[\"发布与订阅\",{\"1\":{\"685\":1}}],[\"发现更多调优机会\",{\"1\":{\"1400\":1}}],[\"发现更多的奇迹和奥秘\",{\"1\":{\"308\":1}}],[\"发现缓存不存在时\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"发现查不到username的信息\",{\"1\":{\"822\":1}}],[\"发现需要访问表中的其他列数据\",{\"1\":{\"567\":1}}],[\"发文字\",{\"0\":{\"548\":1}}],[\"程序\",{\"1\":{\"1520\":1}}],[\"程序员在企业中是如何做需求的\",{\"1\":{\"1501\":1}}],[\"程序员从👨‍💻\",{\"1\":{\"1380\":1,\"1382\":1,\"1384\":1,\"1386\":1,\"1388\":1,\"1390\":1,\"1392\":1,\"1394\":1,\"1396\":1,\"1398\":1,\"1400\":1,\"1402\":1,\"1404\":1,\"1406\":1,\"1408\":1,\"1410\":1,\"1412\":1,\"1414\":1,\"1416\":1,\"1418\":1,\"1420\":1,\"1422\":1,\"1424\":1,\"1426\":1,\"1428\":1,\"1430\":1,\"1432\":1,\"1434\":1,\"1436\":1,\"1438\":1,\"1440\":1,\"1446\":1,\"1448\":1,\"1450\":1,\"1452\":1,\"1454\":1,\"1456\":1,\"1458\":1,\"1460\":1,\"1462\":1,\"1464\":1,\"1466\":1,\"1468\":1,\"1470\":1,\"1474\":1,\"1476\":1,\"1478\":1,\"1480\":1}}],[\"程序就gg了\",{\"1\":{\"1424\":1}}],[\"程序使用这个类创建实例对象\",{\"1\":{\"1392\":1}}],[\"程序计数器等\",{\"1\":{\"1394\":1}}],[\"程序计数器\",{\"1\":{\"1388\":1,\"1394\":2}}],[\"程序计数器是一块较小的内存空间\",{\"1\":{\"1099\":1,\"1290\":1,\"1388\":1}}],[\"程序启动较慢\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"程序的工作线程会和垃圾收集线程同时运行或者交叉运行\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"程序的可见度\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"程序中所有的工作线程都将会因为\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"程序并没有退出\",{\"1\":{\"755\":1}}],[\"程序可以通过跟踪对象的引用计数信息\",{\"1\":{\"698\":1}}],[\"程序可以通过这些层来加快访问其他节点的速度\",{\"1\":{\"691\":1}}],[\"程序会根据新添加元素\",{\"1\":{\"693\":1}}],[\"程序需要将现有哈希表包含的所有键值对\",{\"1\":{\"689\":1}}],[\"程序需要对哈希表的大小进行相应的扩展或者收缩\",{\"1\":{\"688\":1}}],[\"程序将\",{\"1\":{\"688\":1}}],[\"程序除了执行指定的操作以外\",{\"1\":{\"688\":1}}],[\"程序继续运行\",{\"1\":{\"327\":1}}],[\"程序运行期间所需要的数据通常比较集中\",{\"1\":{\"327\":1}}],[\"程序异常\",{\"1\":{\"224\":1}}],[\"程序写挂了\",{\"1\":{\"221\":1}}],[\"业务接口\",{\"1\":{\"893\":1}}],[\"业务接口代码\",{\"0\":{\"893\":1}}],[\"业务层\",{\"0\":{\"892\":1}}],[\"业务清晰\",{\"1\":{\"580\":1}}],[\"业务场景等\",{\"1\":{\"263\":1}}],[\"业务上有了很多理解\",{\"1\":{\"263\":1}}],[\"业务代码\",{\"1\":{\"224\":1}}],[\"业务逻辑\",{\"1\":{\"223\":1,\"224\":1,\"225\":1,\"229\":2}}],[\"浪费了系统资源\",{\"1\":{\"223\":1}}],[\"空闲链表指针偏移量\",{\"1\":{\"1481\":1}}],[\"空闲链表指针\",{\"1\":{\"1481\":1}}],[\"空闲区整理\",{\"1\":{\"1398\":1}}],[\"空值处理\",{\"1\":{\"1404\":1}}],[\"空转时间\",{\"1\":{\"699\":1}}],[\"空哈希表\",{\"1\":{\"687\":1}}],[\"空字符串也是有效\",{\"1\":{\"665\":1}}],[\"空投步骤\",{\"0\":{\"539\":1}}],[\"空投一般会是\",{\"1\":{\"537\":1}}],[\"空投什么\",{\"0\":{\"537\":1}}],[\"空投就是一种营销策略\",{\"1\":{\"536\":1}}],[\"空投到底是什么\",{\"0\":{\"536\":1}}],[\"空投作为区块链行业最大的惊喜之一\",{\"1\":{\"534\":1}}],[\"空投\",{\"1\":{\"534\":1},\"2\":{\"542\":1,\"543\":1}}],[\"空投合约代码分为很多种\",{\"1\":{\"538\":1}}],[\"空投合约代码\",{\"0\":{\"538\":1}}],[\"空投合约\",{\"0\":{\"534\":1}}],[\"空间整合\",{\"1\":{\"1398\":1}}],[\"空间报警触发minor\",{\"1\":{\"1396\":1}}],[\"空间利用率降低\",{\"1\":{\"1396\":1}}],[\"空间利用率低是一个缺点\",{\"1\":{\"1396\":1}}],[\"空间利用率低\",{\"1\":{\"1396\":1}}],[\"空间利用率高\",{\"1\":{\"1380\":1}}],[\"空间预分配机制\",{\"1\":{\"683\":1}}],[\"空间不足\",{\"1\":{\"683\":1}}],[\"空间局部性\",{\"1\":{\"566\":1}}],[\"空间局部性原理\",{\"1\":{\"319\":1}}],[\"空间索引是一种针对空间数据类型\",{\"1\":{\"558\":1}}],[\"空间索引\",{\"1\":{\"558\":1}}],[\"空间布隆过滤器\",{\"1\":{\"396\":1}}],[\"空\",{\"1\":{\"337\":1}}],[\"空指针异常在任何代码中都是最常见的异常之一\",{\"1\":{\"221\":1}}],[\"空格分隔\",{\"1\":{\"123\":1}}],[\"链的容器\",{\"1\":{\"991\":1}}],[\"链表转红黑树的条件\",{\"1\":{\"1406\":1}}],[\"链表转换为红黑树\",{\"1\":{\"1380\":1}}],[\"链表情况\",{\"1\":{\"1380\":1}}],[\"链表在碰撞场景下使用\",{\"1\":{\"1406\":1}}],[\"链表在冲突发生时\",{\"1\":{\"1380\":1}}],[\"链表在查询元素的时候只能通过遍历的方式查询\",{\"1\":{\"1074\":1,\"1269\":1}}],[\"链表增删元素的效率很高\",{\"1\":{\"1074\":1,\"1269\":1}}],[\"链表被广泛用于实现\",{\"1\":{\"685\":1}}],[\"链表重点\",{\"0\":{\"685\":1}}],[\"链表所包含的节点数量\",{\"1\":{\"684\":1}}],[\"链表节点\",{\"1\":{\"684\":1}}],[\"链表是\",{\"1\":{\"684\":1}}],[\"链表和链表节点\",{\"0\":{\"684\":1}}],[\"链表\",{\"1\":{\"652\":1,\"1380\":1,\"1404\":1}}],[\"链队结点\",{\"1\":{\"342\":1}}],[\"链队的实现很简单\",{\"1\":{\"342\":1}}],[\"链队实现\",{\"1\":{\"342\":1}}],[\"链式栈\",{\"0\":{\"345\":1}}],[\"链式队列\",{\"0\":{\"342\":1}}],[\"链式存储实现\",{\"0\":{\"339\":1}}],[\"链式存储结构是依靠指针\",{\"1\":{\"337\":1}}],[\"链路标识\",{\"1\":{\"220\":1}}],[\"链接键盘\",{\"0\":{\"549\":1}}],[\"链接\",{\"1\":{\"18\":1,\"56\":1,\"1392\":1}}],[\"警告日志\",{\"1\":{\"219\":1}}],[\"错误时的构造器\",{\"1\":{\"893\":1}}],[\"错误信息\",{\"1\":{\"893\":1}}],[\"错误写法\",{\"1\":{\"893\":3,\"894\":1}}],[\"错误日志\",{\"1\":{\"219\":1,\"1142\":2,\"1325\":2}}],[\"错误码\",{\"1\":{\"214\":1}}],[\"错误码作为程序重要的参考\",{\"1\":{\"214\":1}}],[\"个人了\",{\"1\":{\"1502\":1}}],[\"个人站点\",{\"1\":{\"3\":1}}],[\"个阶段\",{\"1\":{\"1410\":1}}],[\"个线程\",{\"1\":{\"1390\":2}}],[\"个时\",{\"1\":{\"1031\":1,\"1235\":1}}],[\"个选了另一个\",{\"0\":{\"1031\":1,\"1235\":1}}],[\"个选了一个\",{\"0\":{\"1031\":1,\"1235\":1}}],[\"个简单的命令\",{\"1\":{\"722\":1}}],[\"个元素\",{\"1\":{\"667\":1,\"718\":1}}],[\"个请求\",{\"1\":{\"654\":1}}],[\"个并发执行\",{\"1\":{\"654\":1}}],[\"个别图片粘贴有丢失\",{\"1\":{\"649\":1}}],[\"个文档\",{\"1\":{\"504\":2}}],[\"个节点\",{\"1\":{\"440\":1}}],[\"个毫秒的值\",{\"1\":{\"440\":1}}],[\"个高频元素\",{\"1\":{\"406\":1}}],[\"个桶中\",{\"1\":{\"401\":1}}],[\"个数字\",{\"1\":{\"440\":3}}],[\"个数据均匀的分配到\",{\"1\":{\"401\":1}}],[\"个数\",{\"1\":{\"400\":1}}],[\"个数量级\",{\"1\":{\"319\":1}}],[\"个区间\",{\"1\":{\"320\":1}}],[\"个区间来进行索引\",{\"1\":{\"319\":1}}],[\"个\",{\"0\":{\"1031\":1,\"1235\":1},\"1\":{\"320\":1,\"323\":2,\"440\":1,\"721\":5,\"1162\":1,\"1342\":1}}],[\"个有序的序列\",{\"1\":{\"319\":1}}],[\"个学员学习编程\",{\"1\":{\"267\":1}}],[\"个学员学编程\",{\"1\":{\"263\":1}}],[\"个视频\",{\"1\":{\"266\":1}}],[\"个小时\",{\"1\":{\"264\":1}}],[\"个播放量\",{\"1\":{\"264\":2}}],[\"个好建议～\",{\"1\":{\"218\":1}}],[\"撕b\",{\"1\":{\"218\":1}}],[\"甩锅\",{\"1\":{\"218\":1}}],[\"击穿等p0问题\",{\"1\":{\"212\":1}}],[\"存盘可以有意无意的对数据进行写操作\",{\"1\":{\"652\":1}}],[\"存在以下的特点\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"存在\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"存在死锁的风险\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"存在的意义仅在于用来减少类完全限定名的冗余\",{\"1\":{\"831\":1}}],[\"存在的问题\",{\"1\":{\"440\":1}}],[\"存在就不做任何操作\",{\"1\":{\"727\":1}}],[\"存在单库读写\",{\"1\":{\"581\":1}}],[\"存在新增字段的数据写入\",{\"1\":{\"484\":1}}],[\"存在比其小的数\",{\"1\":{\"405\":1}}],[\"存入osr\",{\"1\":{\"1113\":1,\"1301\":1}}],[\"存入数组c的第i项\",{\"1\":{\"411\":1}}],[\"存入对应的数组下标\",{\"1\":{\"406\":1}}],[\"存储文档\",{\"1\":{\"1470\":1}}],[\"存储在索引中\",{\"1\":{\"1458\":1}}],[\"存储在叶节点导致查询时间复杂度固定为\",{\"1\":{\"323\":1}}],[\"存储和分发这些日志数据\",{\"1\":{\"1434\":1}}],[\"存储元素的数组\",{\"1\":{\"1404\":1}}],[\"存储键值对的数组\",{\"1\":{\"1386\":1}}],[\"存储的数据就是消息队列中的消息内容\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"存储的对象我们需要用\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"存储的方式是以\",{\"1\":{\"678\":1}}],[\"存储有条件使用\",{\"1\":{\"1030\":1,\"1234\":1}}],[\"存储结构\",{\"1\":{\"678\":1}}],[\"存储系统\",{\"1\":{\"652\":1,\"1115\":1,\"1155\":1,\"1303\":1,\"1335\":1}}],[\"存储性能瓶颈\",{\"1\":{\"581\":1}}],[\"存储引擎\",{\"1\":{\"574\":3,\"589\":1,\"621\":1}}],[\"存储空间\",{\"1\":{\"571\":1}}],[\"存储总代币数\",{\"1\":{\"541\":1}}],[\"存储已领取代币数\",{\"1\":{\"541\":1}}],[\"存储\",{\"1\":{\"503\":1,\"657\":1,\"716\":1,\"979\":1,\"1073\":1,\"1135\":1,\"1268\":1,\"1320\":1}}],[\"存储长度因子和索引时boost\",{\"1\":{\"493\":1}}],[\"存储过长\",{\"1\":{\"438\":1}}],[\"存储与实现\",{\"0\":{\"356\":1}}],[\"存储容器初始大小\",{\"1\":{\"338\":1}}],[\"存储容器\",{\"1\":{\"338\":1}}],[\"存储数据最小单元\",{\"0\":{\"325\":1}}],[\"存储知识\",{\"0\":{\"324\":1}}],[\"存放的内容\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"存放一批连接\",{\"1\":{\"710\":1}}],[\"存放\",{\"1\":{\"211\":1}}],[\"存为jpeg图片\",{\"0\":{\"158\":1}}],[\"协同工作\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"协调器会将索引请求发送给相关的分片和副本\",{\"1\":{\"1470\":1}}],[\"协调节点需要根据\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"协调节点给持有相关文档的每个分片创建一个\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"协调节点首先决定哪些文档\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"协调节点返回结果给客户端\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"协调节点辨别出哪些文档需要被取回并向相关的分片提交多个\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"协调节点默认使用文档\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"协调节点向客户端报告成功\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"协调作用\",{\"1\":{\"170\":1}}],[\"协议不同的是\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"协议中\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"协议\",{\"1\":{\"1093\":1,\"1286\":1}}],[\"协议由哪几部分组成\",{\"1\":{\"984\":1}}],[\"协议为例\",{\"1\":{\"205\":1}}],[\"配合\",{\"1\":{\"1408\":1}}],[\"配合请求时参数来调用\",{\"1\":{\"205\":1}}],[\"配置日志\",{\"1\":{\"1400\":1}}],[\"配置是\",{\"1\":{\"1195\":1,\"1368\":1}}],[\"配置在应用程序上下文的引导阶段生效\",{\"1\":{\"1183\":1,\"1358\":1}}],[\"配置在\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"配置对象\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"配置环境变量\",{\"1\":{\"962\":1}}],[\"配置信息\",{\"1\":{\"948\":1,\"1201\":2,\"1374\":2}}],[\"配置信息同步\",{\"1\":{\"170\":1}}],[\"配置项目名\",{\"1\":{\"901\":1}}],[\"配置项目b依赖于项目a\",{\"1\":{\"771\":1}}],[\"配置tomcat\",{\"1\":{\"895\":1}}],[\"配置了\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"配置了动态扫描\",{\"1\":{\"890\":1}}],[\"配置了properties\",{\"1\":{\"806\":1}}],[\"配置说明\",{\"0\":{\"885\":1},\"1\":{\"927\":1}}],[\"配置一些简单的日志\",{\"1\":{\"884\":1}}],[\"配置dispatcherservlet\",{\"1\":{\"883\":1}}],[\"配置spring和junit整合\",{\"1\":{\"891\":1}}],[\"配置springmvc需要加载的配置文件\",{\"1\":{\"883\":1}}],[\"配置springmvc\",{\"1\":{\"882\":1}}],[\"配置sqlsessionfactory对象\",{\"1\":{\"878\":1}}],[\"配置jsp\",{\"1\":{\"882\":2}}],[\"配置基于注解的声明式事务\",{\"1\":{\"881\":1}}],[\"配置事务管理器\",{\"1\":{\"881\":2}}],[\"配置全局属性\",{\"1\":{\"880\":1}}],[\"配置连接池属性\",{\"1\":{\"878\":1}}],[\"配置数据库相关参数properties的属性\",{\"1\":{\"878\":1}}],[\"配置数据库连接池\",{\"1\":{\"878\":1}}],[\"配置整合mybatis过程\",{\"1\":{\"878\":1}}],[\"配置扫描dao接口包\",{\"1\":{\"878\":1}}],[\"配置扫描\",{\"1\":{\"878\":1}}],[\"配置ordermapper\",{\"1\":{\"856\":1}}],[\"配置有关\",{\"1\":{\"831\":1}}],[\"配置mybaties全局配置文件\",{\"1\":{\"878\":1}}],[\"配置mybatis\",{\"1\":{\"814\":1}}],[\"配置map\",{\"0\":{\"807\":1}}],[\"配置为true时不向下传递此依赖\",{\"1\":{\"771\":1,\"772\":1}}],[\"配置为你自己的maven路径\",{\"1\":{\"765\":1}}],[\"配置本地仓库\",{\"1\":{\"765\":1}}],[\"配置该节点会与哪些候选地址进行通信\",{\"1\":{\"459\":1}}],[\"配置没有解决\",{\"1\":{\"440\":1}}],[\"配置文件放在了非上下文目录\",{\"1\":{\"1408\":1}}],[\"配置文件\",{\"0\":{\"179\":1,\"877\":1},\"1\":{\"699\":1,\"761\":1,\"1136\":2,\"1321\":2}}],[\"配置文件解读\",{\"1\":{\"174\":1}}],[\"配置维护\",{\"1\":{\"171\":1}}],[\"配置生效\",{\"1\":{\"142\":1}}],[\"配置中心\",{\"1\":{\"130\":1}}],[\"配置看板步骤\",{\"1\":{\"126\":1}}],[\"配置\",{\"0\":{\"26\":1,\"765\":1},\"1\":{\"126\":2,\"289\":1,\"833\":1,\"849\":2,\"850\":1,\"878\":1,\"902\":1,\"1189\":1,\"1364\":1}}],[\"力求言简意赅\",{\"1\":{\"204\":1,\"207\":1}}],[\"顾名思义\",{\"1\":{\"204\":1,\"424\":1,\"561\":1}}],[\"顾名思义就是投票选举\",{\"1\":{\"183\":1}}],[\"老六的接口不通啦\",{\"1\":{\"1494\":2}}],[\"老版本中提供的\",{\"1\":{\"1380\":1}}],[\"老年代的对象通过晋升至永久代\",{\"1\":{\"1394\":1}}],[\"老年代空间不足触发major\",{\"1\":{\"1394\":1}}],[\"老年代使用mark\",{\"1\":{\"1394\":1}}],[\"老年代使用标记\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"老年代中存放老化对象\",{\"1\":{\"1394\":1}}],[\"老年代主要用于存放长生命周期的对象\",{\"1\":{\"1388\":1}}],[\"老年代\",{\"1\":{\"1388\":1,\"1394\":1}}],[\"老年代和永久代\",{\"1\":{\"1388\":1}}],[\"老年代采用标记整理算法\",{\"1\":{\"1103\":1,\"1294\":1}}],[\"老读者都知道\",{\"1\":{\"969\":1}}],[\"老板审批\",{\"1\":{\"928\":1}}],[\"老板让我这样写接口\",{\"1\":{\"203\":1}}],[\"老吕发现刚刚把小耀安排走了\",{\"1\":{\"170\":1}}],[\"老吕发现小耀最近没有项目安排\",{\"1\":{\"170\":1}}],[\"｜\",{\"1\":{\"203\":1}}],[\"多一个或少一个字段\",{\"1\":{\"1494\":1}}],[\"多谢面试官的提问\",{\"1\":{\"1446\":2}}],[\"多次minorgc后仍存活进入老年代\",{\"1\":{\"1394\":1}}],[\"多例\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"多路复用\",{\"1\":{\"1095\":1,\"1288\":1}}],[\"多读取一次数据库\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"多对一的复合属性\",{\"1\":{\"888\":1}}],[\"多对多查询\",{\"0\":{\"858\":1},\"1\":{\"858\":1}}],[\"多模块项目是现在开发中比较常用的方式\",{\"1\":{\"779\":1}}],[\"多列查询的前导列\",{\"1\":{\"565\":1}}],[\"多列索引没有最左匹配\",{\"1\":{\"564\":1}}],[\"多边形等\",{\"1\":{\"558\":1}}],[\"多少随意\",{\"1\":{\"551\":1}}],[\"多面等几何类型\",{\"1\":{\"507\":1}}],[\"多线程就是同时运行多个线程\",{\"1\":{\"1446\":1}}],[\"多线程环境下\",{\"1\":{\"1380\":1,\"1446\":1}}],[\"多线程之间需要协调工作\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"多线程\",{\"1\":{\"587\":1,\"1072\":1,\"1267\":1}}],[\"多线\",{\"1\":{\"507\":1}}],[\"多点\",{\"1\":{\"507\":1}}],[\"多层对象\",{\"1\":{\"503\":1}}],[\"多环境配置\",{\"1\":{\"447\":1}}],[\"多叉的好处非常明显\",{\"1\":{\"319\":1}}],[\"多叉树\",{\"1\":{\"319\":1}}],[\"多数书籍翻译成\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"多数的都是一些理论讲解\",{\"1\":{\"755\":1}}],[\"多数人现在都将视频平台作为一个营销窗口\",{\"1\":{\"264\":1}}],[\"多数中小公司只用\",{\"1\":{\"206\":1}}],[\"多数情况都是给别人提供接口\",{\"1\":{\"203\":1}}],[\"多数编程中\",{\"1\":{\"199\":1}}],[\"多个线程并行回收\",{\"1\":{\"1394\":1}}],[\"多个\",{\"1\":{\"1162\":1,\"1342\":1,\"1416\":1}}],[\"多个类加载器都去加载这个类到内存中\",{\"1\":{\"1106\":1,\"1297\":1}}],[\"多个连接共用同一个阻塞对象\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"多个甚至全部分片\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"多个参数时\",{\"1\":{\"842\":1}}],[\"多个字段更新\",{\"1\":{\"790\":1}}],[\"多个节点可以包含\",{\"1\":{\"692\":1}}],[\"多个哈希表节点可以用\",{\"1\":{\"687\":1}}],[\"多个事务对同一数据对象的并发操作会产生冲突\",{\"1\":{\"633\":1}}],[\"多个事务在同一时间对同一数据对象进行操作的可能性很小\",{\"1\":{\"632\":1}}],[\"多个事务在执行过程中\",{\"1\":{\"625\":1}}],[\"多个域名\",{\"1\":{\"123\":1}}],[\"多个窗口还要保证一致性\",{\"1\":{\"86\":1}}],[\"避免aba问题\",{\"1\":{\"1476\":1}}],[\"避免破坏程序的安全性\",{\"1\":{\"1468\":1}}],[\"避免不必要的字段和复杂的数据结构\",{\"1\":{\"1460\":1}}],[\"避免误释放\",{\"1\":{\"1428\":1}}],[\"避免因为替换错误类型导致的运行错误\",{\"1\":{\"1424\":1}}],[\"避免classcastexception异常\",{\"1\":{\"1424\":1}}],[\"避免循环依赖\",{\"1\":{\"1412\":1}}],[\"避免过于提前暴露\",{\"1\":{\"1412\":1}}],[\"避免过度索引\",{\"1\":{\"573\":1}}],[\"避免线程阻塞\",{\"1\":{\"1408\":1}}],[\"避免线程之间的竞争\",{\"1\":{\"1388\":1}}],[\"避免被高流量打垮\",{\"1\":{\"1408\":1}}],[\"避免高复杂度算法\",{\"1\":{\"1400\":1}}],[\"避免重复消费\",{\"1\":{\"1442\":1}}],[\"避免重复标记对象\",{\"1\":{\"1398\":1}}],[\"避免重复加载\",{\"1\":{\"1392\":1}}],[\"避免频繁地创建和销毁对象\",{\"1\":{\"1388\":1}}],[\"避免频繁创建和删除临时表\",{\"0\":{\"604\":1}}],[\"避免背课文式的对话\",{\"1\":{\"1378\":1}}],[\"避免大量的\",{\"1\":{\"1182\":1,\"1357\":1}}],[\"避免大量请求底层关系型数据库\",{\"1\":{\"1156\":1,\"1336\":1}}],[\"避免构造函数注入并仅使用setter注入\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"避免存储一些没用的数据\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"避免了循环依赖\",{\"1\":{\"1412\":1}}],[\"避免了频繁创建和销毁线程的开销\",{\"1\":{\"1384\":1}}],[\"避免了几乎所有的jdbc代码和手动设置的参数以及获取结果集\",{\"1\":{\"1129\":1,\"1314\":1}}],[\"避免了在内核空间和用户空间之间穿梭\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"避免了构成桶过程的元素比较和交换操作\",{\"1\":{\"401\":1}}],[\"避免向集合中插入非法数据\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"避免为每个连接创建线程\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"避免脑裂问题\",{\"1\":{\"1031\":1,\"1235\":1}}],[\"避免把\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"避免后续请求全部到达\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"避免缓存挂掉导致无法提供服务的情况\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"避免造成大量\",{\"0\":{\"605\":1}}],[\"避免使用不代表一定不使用\",{\"1\":{\"591\":1}}],[\"避免\",{\"1\":{\"582\":1}}],[\"避免io争抢\",{\"1\":{\"579\":1}}],[\"避免在高度重复的列上创建索引\",{\"1\":{\"573\":1}}],[\"避免select\",{\"1\":{\"567\":1}}],[\"避免产生0\",{\"1\":{\"306\":2}}],[\"避免阻断流程\",{\"0\":{\"221\":1}}],[\"避免复杂的条件判断\",{\"0\":{\"199\":1}}],[\"避免嵌套的if\",{\"0\":{\"190\":1}}],[\"法定节假日每年都在变\",{\"1\":{\"198\":1}}],[\"法定的假日检查逻辑\",{\"1\":{\"198\":1}}],[\"切点分为execution方式和annotation方式\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"切点用于定义\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"切点\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"切面可以在类上使用\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"切面\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"切面最主要的就是切点\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"切面注解权限\",{\"1\":{\"746\":1}}],[\"切面注解锁\",{\"1\":{\"746\":1}}],[\"切面注解日志\",{\"0\":{\"748\":1},\"1\":{\"746\":1}}],[\"切换分支\",{\"1\":{\"978\":1}}],[\"切换\",{\"1\":{\"960\":1}}],[\"切换图标\",{\"1\":{\"952\":1}}],[\"切换国内加速镜像\",{\"1\":{\"915\":1}}],[\"切换到\",{\"1\":{\"660\":2,\"980\":1}}],[\"切换basfe帐户\",{\"1\":{\"111\":1}}],[\"切套多\",{\"1\":{\"198\":1}}],[\"重量级锁是一种针对多线程访问同步块的默认策略\",{\"1\":{\"1480\":1}}],[\"重连后再次执行同步操作\",{\"1\":{\"1422\":1}}],[\"重要的是候选人的心态和潜力\",{\"1\":{\"1380\":1}}],[\"重构\",{\"1\":{\"1380\":1}}],[\"重构条件表达式\",{\"0\":{\"198\":1}}],[\"重做日志redo和回滚日志undo\",{\"1\":{\"1142\":1,\"1325\":1}}],[\"重做日志\",{\"1\":{\"1142\":1,\"1325\":1}}],[\"重定向\",{\"1\":{\"1089\":1,\"1282\":1}}],[\"重写sql\",{\"1\":{\"1138\":1,\"1323\":1}}],[\"重写\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"重载就是对于不同的情况写不同的方法\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"重载\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"重载和重写是一个特别好理解的概念\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"重载和重写区别\",{\"0\":{\"1043\":1,\"1244\":1}}],[\"重建缓存数据\",{\"1\":{\"1008\":1,\"1217\":1}}],[\"重建索引\",{\"1\":{\"574\":1}}],[\"重复预约异常\",{\"1\":{\"892\":2}}],[\"重复预约\",{\"1\":{\"892\":1,\"893\":2}}],[\"重复元素\",{\"1\":{\"693\":1}}],[\"重启或者网络故障导致不存在过半的服务器与\",{\"1\":{\"1199\":1,\"1372\":1}}],[\"重启恢复慢\",{\"1\":{\"1158\":1,\"1338\":1}}],[\"重启恢复数据\",{\"1\":{\"678\":1}}],[\"重启容器\",{\"1\":{\"1020\":1,\"1226\":1}}],[\"重启的时候可以再次加载进行使用\",{\"1\":{\"655\":1}}],[\"重启es\",{\"1\":{\"465\":1,\"466\":1}}],[\"重点\",{\"0\":{\"689\":1,\"692\":1,\"699\":1,\"791\":1},\"1\":{\"638\":1}}],[\"重点关注\",{\"1\":{\"118\":1}}],[\"重新计算后的索引位置有很大概率仍然会发生冲突\",{\"1\":{\"1380\":1}}],[\"重新标记\",{\"1\":{\"1107\":2,\"1298\":2}}],[\"重新标记阶段和并发清除阶段\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"重新加载servlet时会进行一次加载\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"重新获取\",{\"1\":{\"1062\":2,\"1260\":2}}],[\"重新拉取\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"重新散列该位置之后的键值对\",{\"1\":{\"1386\":1}}],[\"重新散列\",{\"0\":{\"688\":1}}],[\"重新对堆进行调整\",{\"1\":{\"417\":1}}],[\"重新调整结构\",{\"1\":{\"417\":1}}],[\"<数据类型>只能是引用类型\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"<name>\",{\"1\":{\"907\":1}}],[\"<name>demo<\",{\"1\":{\"907\":1}}],[\"<goal>repackage<\",{\"1\":{\"907\":1}}],[\"<goals>\",{\"1\":{\"907\":1}}],[\"<groupid>io\",{\"1\":{\"948\":1}}],[\"<groupid><artifactid>\",{\"1\":{\"907\":1}}],[\"<groupid>\",{\"1\":{\"907\":1}}],[\"<groupid>taglibs<\",{\"1\":{\"875\":1}}],[\"<groupid>javax\",{\"1\":{\"875\":1}}],[\"<groupid>javapub\",{\"1\":{\"875\":1}}],[\"<groupid>jstl<\",{\"1\":{\"875\":1}}],[\"<groupid>junit<\",{\"1\":{\"778\":2,\"819\":1,\"875\":1}}],[\"<groupid>mysql<\",{\"1\":{\"798\":1,\"875\":1,\"925\":1,\"1507\":1}}],[\"<groupid>c3p0<\",{\"1\":{\"875\":1}}],[\"<groupid>ch\",{\"1\":{\"875\":1}}],[\"<groupid>cn\",{\"1\":{\"778\":3}}],[\"<groupid>commons\",{\"1\":{\"875\":1}}],[\"<groupid>com\",{\"1\":{\"771\":1,\"875\":3,\"907\":1,\"937\":2,\"1507\":1}}],[\"<groupid>log4j<\",{\"1\":{\"772\":1}}],[\"<groupid>org\",{\"1\":{\"750\":1,\"771\":1,\"772\":3,\"773\":3,\"778\":4,\"805\":1,\"875\":12,\"907\":5,\"925\":2,\"948\":2,\"1049\":1,\"1250\":1,\"1522\":1,\"1525\":1}}],[\"<groupid>redis\",{\"1\":{\"711\":1,\"875\":1}}],[\"<java\",{\"1\":{\"907\":1}}],[\"<junit\",{\"1\":{\"778\":1}}],[\"<hashb>\",{\"1\":{\"980\":1}}],[\"<hasha>\",{\"1\":{\"980\":1}}],[\"<h1>大家好\",{\"1\":{\"895\":1}}],[\"<head>\",{\"1\":{\"895\":1}}],[\"<html>\",{\"1\":{\"895\":1}}],[\"<root\",{\"1\":{\"884\":1}}],[\"<resultmap\",{\"1\":{\"856\":1,\"857\":1,\"858\":1,\"860\":1}}],[\"<relativepath>\",{\"1\":{\"778\":1}}],[\"<load\",{\"1\":{\"883\":1}}],[\"<welcome\",{\"1\":{\"883\":2}}],[\"<web\",{\"1\":{\"883\":1}}],[\"<where>\",{\"1\":{\"849\":1,\"864\":1}}],[\"<when\",{\"1\":{\"848\":2}}],[\"<bpmndi\",{\"1\":{\"928\":16}}],[\"<body\",{\"1\":{\"895\":1}}],[\"<bean\",{\"1\":{\"878\":3,\"881\":1,\"882\":1,\"1176\":2,\"1353\":2,\"1410\":2}}],[\"<beans\",{\"1\":{\"878\":1,\"881\":1,\"882\":1}}],[\"<build>\",{\"1\":{\"875\":1,\"907\":2,\"1522\":1}}],[\"<br>\",{\"1\":{\"441\":3}}],[\"<usertask\",{\"1\":{\"928\":3}}],[\"<url\",{\"1\":{\"883\":1}}],[\"<url><\",{\"1\":{\"875\":1}}],[\"<update\",{\"1\":{\"787\":1,\"790\":1,\"818\":1,\"826\":1,\"849\":1,\"890\":1}}],[\"<a\",{\"1\":{\"895\":1}}],[\"<appender\",{\"1\":{\"884\":2}}],[\"<association\",{\"1\":{\"856\":1,\"857\":1,\"858\":2,\"860\":1}}],[\"<artifactid>flowable\",{\"1\":{\"925\":1}}],[\"<artifactid>\",{\"1\":{\"907\":1}}],[\"<artifactid>demo<\",{\"1\":{\"907\":1}}],[\"<artifactid>micrometer\",{\"1\":{\"948\":1}}],[\"<artifactid>maven\",{\"1\":{\"875\":1,\"907\":1}}],[\"<artifactid>mybatis\",{\"1\":{\"875\":1,\"1507\":1}}],[\"<artifactid>mybatis<\",{\"1\":{\"805\":1,\"875\":1}}],[\"<artifactid>mysql\",{\"1\":{\"798\":1,\"875\":1,\"925\":1,\"1507\":1}}],[\"<artifactid>lombok<\",{\"1\":{\"875\":1}}],[\"<artifactid>logback\",{\"1\":{\"875\":1}}],[\"<artifactid>log4j<\",{\"1\":{\"772\":1}}],[\"<artifactid>core<\",{\"1\":{\"937\":1}}],[\"<artifactid>commons\",{\"1\":{\"875\":1}}],[\"<artifactid>c3p0<\",{\"1\":{\"875\":1}}],[\"<artifactid>protostuff\",{\"1\":{\"875\":2}}],[\"<artifactid>parent<\",{\"1\":{\"778\":2}}],[\"<artifactid>javase<\",{\"1\":{\"937\":1}}],[\"<artifactid>javax\",{\"1\":{\"875\":1}}],[\"<artifactid>jackson\",{\"1\":{\"875\":1}}],[\"<artifactid>jstl<\",{\"1\":{\"875\":1}}],[\"<artifactid>junit<\",{\"1\":{\"778\":2,\"819\":1,\"875\":1}}],[\"<artifactid>jedis<\",{\"1\":{\"711\":1,\"875\":1}}],[\"<artifactid>a<\",{\"1\":{\"771\":1}}],[\"<artifactid>standard<\",{\"1\":{\"875\":1}}],[\"<artifactid>struts2\",{\"1\":{\"772\":1,\"773\":1}}],[\"<artifactid>ssm\",{\"1\":{\"875\":1}}],[\"<artifactid>sm1234\",{\"1\":{\"778\":1}}],[\"<artifactid>slf4j\",{\"1\":{\"771\":1,\"772\":1,\"778\":1}}],[\"<artifactid>spring\",{\"1\":{\"750\":1,\"772\":1,\"773\":2,\"778\":3,\"875\":8,\"907\":4,\"925\":1,\"948\":2,\"1049\":1,\"1250\":1,\"1522\":1,\"1525\":1}}],[\"<omgdi\",{\"1\":{\"928\":19}}],[\"<omgdc\",{\"1\":{\"928\":6}}],[\"<otherwise>\",{\"1\":{\"848\":1}}],[\"<optional>true<\",{\"1\":{\"771\":1,\"772\":1}}],[\"<clinit>\",{\"1\":{\"1392\":3}}],[\"<code>interrupt<\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"<code>stop<\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"<code>threaddeath<\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"<commithash>\",{\"1\":{\"980\":1}}],[\"<constructor\",{\"1\":{\"1176\":6,\"1353\":6}}],[\"<conditionexpression\",{\"1\":{\"928\":6}}],[\"<configuration\",{\"1\":{\"884\":1}}],[\"<configuration>\",{\"1\":{\"806\":1,\"808\":1,\"875\":1,\"880\":1,\"907\":2,\"1525\":1}}],[\"<context\",{\"1\":{\"878\":1,\"881\":1,\"882\":1}}],[\"<collection\",{\"1\":{\"857\":1,\"858\":1,\"860\":1}}],[\"<cache\",{\"1\":{\"853\":1}}],[\"<choose>\",{\"1\":{\"848\":1}}],[\"<t\",{\"1\":{\"1424\":2}}],[\"<t>就是类型参数\",{\"1\":{\"1424\":2}}],[\"<t>\",{\"1\":{\"1047\":1,\"1248\":1,\"1424\":2}}],[\"<target>1\",{\"1\":{\"907\":1}}],[\"<target>7<\",{\"1\":{\"875\":1}}],[\"<type>pom<\",{\"1\":{\"907\":1}}],[\"<typealias\",{\"1\":{\"831\":2}}],[\"<typealiases>\",{\"1\":{\"831\":2}}],[\"<title>news\",{\"1\":{\"895\":1}}],[\"<tx\",{\"1\":{\"881\":1}}],[\"<transactionmanager\",{\"1\":{\"806\":2,\"808\":1}}],[\"<trim\",{\"1\":{\"787\":3,\"790\":3,\"818\":1,\"826\":1,\"849\":1}}],[\"<mainclass>\",{\"1\":{\"907\":1}}],[\"<mainclass>com\",{\"1\":{\"907\":1}}],[\"<mappers>\",{\"1\":{\"808\":1,\"818\":1,\"826\":1,\"835\":3,\"845\":1}}],[\"<mapper\",{\"1\":{\"807\":1,\"808\":1,\"818\":3,\"825\":1,\"826\":4,\"835\":9,\"845\":2,\"853\":1,\"856\":1,\"890\":2}}],[\"<meta\",{\"1\":{\"895\":2}}],[\"<mvc\",{\"1\":{\"882\":2}}],[\"<modeler\",{\"1\":{\"928\":1}}],[\"<modelversion>\",{\"1\":{\"907\":1}}],[\"<modelversion>4\",{\"1\":{\"778\":2,\"875\":1,\"907\":1}}],[\"<module>\",{\"1\":{\"779\":3}}],[\"<modules>\",{\"1\":{\"779\":1}}],[\"<documentation>报销流程<\",{\"1\":{\"928\":1}}],[\"<definitions\",{\"1\":{\"928\":1}}],[\"<description>\",{\"1\":{\"907\":1}}],[\"<description>demo<\",{\"1\":{\"907\":1}}],[\"<delete\",{\"1\":{\"818\":1,\"826\":1}}],[\"<dependencies>\",{\"1\":{\"778\":2,\"875\":1,\"907\":3}}],[\"<dependencymanagement>\",{\"1\":{\"769\":1,\"778\":1,\"907\":2}}],[\"<dependency>\",{\"1\":{\"711\":1,\"750\":1,\"771\":2,\"772\":4,\"773\":2,\"778\":6,\"798\":1,\"805\":1,\"819\":1,\"875\":23,\"907\":3,\"925\":3,\"937\":2,\"948\":3,\"1049\":1,\"1250\":1,\"1507\":2}}],[\"<datasource\",{\"1\":{\"806\":2,\"808\":1,\"829\":1}}],[\"<id>repackage<\",{\"1\":{\"907\":1}}],[\"<id\",{\"1\":{\"856\":2,\"857\":3,\"858\":4,\"860\":2}}],[\"<init\",{\"1\":{\"883\":1}}],[\"<insert\",{\"1\":{\"818\":1,\"826\":1,\"890\":1,\"1133\":2,\"1318\":2}}],[\"<include\",{\"1\":{\"787\":1,\"845\":5}}],[\"<item\",{\"1\":{\"790\":1}}],[\"<if>\",{\"1\":{\"864\":1,\"1416\":1}}],[\"<if\",{\"1\":{\"787\":1,\"790\":2,\"818\":6,\"826\":6,\"847\":1,\"849\":8,\"863\":2,\"1416\":1}}],[\"<flowable\",{\"1\":{\"928\":2}}],[\"<finalname>usercenter\",{\"1\":{\"1525\":1}}],[\"<finalname>ssm\",{\"1\":{\"875\":1}}],[\"<filename>\",{\"1\":{\"111\":1}}],[\"<file>\",{\"1\":{\"111\":1}}],[\"<foreach\",{\"1\":{\"787\":2,\"790\":3,\"850\":1}}],[\"<startevent\",{\"1\":{\"928\":1}}],[\"<string\",{\"1\":{\"683\":1}}],[\"<skip>true<\",{\"1\":{\"907\":1}}],[\"<source>1\",{\"1\":{\"907\":1}}],[\"<source>7<\",{\"1\":{\"875\":1}}],[\"<scope>import<\",{\"1\":{\"907\":1}}],[\"<scope>provided<\",{\"1\":{\"875\":1}}],[\"<scope>runtime<\",{\"1\":{\"875\":1,\"1507\":1}}],[\"<scope>test<\",{\"1\":{\"778\":2,\"907\":1}}],[\"<sql\",{\"1\":{\"845\":3}}],[\"<sequenceflow\",{\"1\":{\"928\":8}}],[\"<servlet\",{\"1\":{\"883\":4}}],[\"<servlet>\",{\"1\":{\"883\":1}}],[\"<setting\",{\"1\":{\"830\":1,\"853\":2,\"880\":3}}],[\"<settings>\",{\"1\":{\"830\":1,\"853\":1,\"880\":1}}],[\"<select|update|delete|insert>节点的封装\",{\"1\":{\"1132\":1,\"1317\":1}}],[\"<select\",{\"1\":{\"807\":1,\"818\":3,\"822\":1,\"826\":4,\"842\":7,\"843\":2,\"845\":4,\"847\":1,\"848\":1,\"849\":1,\"850\":1,\"856\":2,\"857\":1,\"858\":1,\"890\":3,\"1132\":1,\"1317\":1,\"1416\":2}}],[\"<slf4j\",{\"1\":{\"778\":1}}],[\"<spring\",{\"1\":{\"778\":1,\"875\":1,\"907\":1}}],[\"<exclusivegateway\",{\"1\":{\"928\":1}}],[\"<exclusion>\",{\"1\":{\"773\":2}}],[\"<exclusions>\",{\"1\":{\"773\":3}}],[\"<extensionelements>\",{\"1\":{\"928\":3}}],[\"<execution>\",{\"1\":{\"907\":1}}],[\"<executions>\",{\"1\":{\"907\":1}}],[\"<endevent\",{\"1\":{\"928\":1}}],[\"<encoding>utf\",{\"1\":{\"907\":1}}],[\"<encoder>\",{\"1\":{\"884\":1}}],[\"<environment\",{\"1\":{\"806\":2,\"808\":1}}],[\"<environments\",{\"1\":{\"806\":1,\"808\":1}}],[\"<eclusion>\",{\"1\":{\"773\":1}}],[\"<version>6\",{\"1\":{\"925\":1}}],[\"<version>\",{\"1\":{\"907\":1}}],[\"<version>5\",{\"1\":{\"798\":1,\"875\":1,\"925\":1}}],[\"<version>$\",{\"1\":{\"778\":6,\"875\":8,\"907\":2}}],[\"<version>4\",{\"1\":{\"772\":1,\"773\":1,\"819\":1,\"875\":1}}],[\"<version>2\",{\"1\":{\"772\":1,\"773\":1,\"875\":2}}],[\"<version>0\",{\"1\":{\"771\":1,\"778\":3,\"875\":1,\"907\":1}}],[\"<version>1\",{\"1\":{\"771\":1,\"772\":2,\"875\":8}}],[\"<version>3\",{\"1\":{\"711\":1,\"805\":1,\"875\":3,\"907\":1,\"937\":2,\"1507\":1}}],[\"<plugin>\",{\"1\":{\"875\":1,\"907\":2,\"1522\":1,\"1525\":1}}],[\"<plugin\",{\"1\":{\"833\":1,\"1416\":1}}],[\"<plugins>\",{\"1\":{\"833\":1,\"875\":1,\"907\":2,\"1416\":1,\"1522\":1}}],[\"<pattern>\",{\"1\":{\"884\":1}}],[\"<param\",{\"1\":{\"883\":2}}],[\"<parent>\",{\"1\":{\"778\":1}}],[\"<packaging>war<\",{\"1\":{\"875\":1}}],[\"<packaging>pom<\",{\"1\":{\"778\":1}}],[\"<package\",{\"1\":{\"831\":1,\"845\":1}}],[\"<properties\",{\"1\":{\"829\":1}}],[\"<properties>\",{\"1\":{\"778\":1,\"806\":1,\"875\":1,\"907\":2}}],[\"<property\",{\"1\":{\"806\":12,\"808\":4,\"829\":6,\"833\":1,\"878\":15,\"881\":1,\"882\":4,\"1416\":1}}],[\"<project>\",{\"1\":{\"907\":1}}],[\"<project\",{\"1\":{\"778\":2,\"875\":2,\"907\":3}}],[\"<process\",{\"1\":{\"644\":1,\"928\":1}}],[\"<p>checks\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"<p>\",{\"1\":{\"751\":1,\"752\":1}}],[\"<>\",{\"1\":{\"590\":1,\"1149\":1,\"1332\":1}}],[\"<<\",{\"1\":{\"390\":1,\"441\":7,\"1406\":2}}],[\"<==\",{\"1\":{\"788\":1,\"852\":6,\"853\":1}}],[\"<=\",{\"1\":{\"199\":1,\"405\":1,\"417\":2,\"430\":1,\"441\":1,\"540\":1,\"541\":1,\"863\":3,\"864\":3,\"893\":2,\"928\":1,\"1042\":1,\"1243\":1}}],[\"<\",{\"0\":{\"862\":1},\"1\":{\"191\":2,\"319\":4,\"338\":9,\"339\":4,\"341\":1,\"342\":1,\"390\":2,\"405\":4,\"406\":1,\"413\":4,\"417\":2,\"430\":2,\"441\":4,\"540\":2,\"541\":2,\"624\":2,\"630\":2,\"667\":1,\"711\":1,\"750\":1,\"771\":4,\"772\":5,\"773\":3,\"778\":28,\"779\":1,\"787\":6,\"790\":9,\"798\":1,\"805\":1,\"806\":23,\"807\":6,\"808\":12,\"818\":24,\"819\":1,\"822\":1,\"826\":24,\"829\":2,\"830\":1,\"831\":4,\"833\":3,\"835\":6,\"842\":7,\"843\":2,\"845\":11,\"847\":2,\"848\":6,\"849\":13,\"850\":2,\"853\":4,\"856\":9,\"857\":9,\"858\":5,\"860\":4,\"863\":2,\"864\":5,\"875\":56,\"878\":21,\"880\":8,\"881\":7,\"882\":10,\"883\":10,\"884\":6,\"890\":16,\"895\":7,\"907\":20,\"925\":5,\"928\":32,\"937\":3,\"948\":3,\"1042\":1,\"1049\":1,\"1061\":1,\"1062\":1,\"1132\":1,\"1133\":1,\"1176\":2,\"1243\":1,\"1250\":1,\"1259\":1,\"1260\":1,\"1317\":1,\"1318\":1,\"1353\":2,\"1380\":1,\"1386\":1,\"1390\":2,\"1410\":1,\"1416\":5,\"1424\":13,\"1466\":1,\"1507\":2,\"1522\":3,\"1525\":3}}],[\"尽管它有缺陷\",{\"1\":{\"1396\":1}}],[\"尽管不推荐使用\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"尽管短生命周期对象已经不再需要\",{\"1\":{\"1102\":1,\"1293\":1}}],[\"尽管可以配置多个环境\",{\"1\":{\"834\":1}}],[\"尽管这种行为在默认配置下不常见\",{\"1\":{\"638\":1}}],[\"尽可能的使用\",{\"0\":{\"602\":1}}],[\"尽可能让它平均分布到每一位\",{\"1\":{\"389\":1}}],[\"尽可能在合适的地方捕获并处理\",{\"1\":{\"200\":1}}],[\"尽可能早地返回\",{\"0\":{\"190\":1}}],[\"尽量加在必要的范围内\",{\"1\":{\"1476\":1}}],[\"尽量选择java提供的线程安全类\",{\"1\":{\"1446\":1}}],[\"尽量减小扩容带来的性能消耗\",{\"1\":{\"1404\":1}}],[\"尽量减少垃圾产生\",{\"1\":{\"1394\":1}}],[\"尽量减少不必要的回表操作\",{\"1\":{\"567\":1}}],[\"尽量做新增不做更新\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"尽量保证之锁定自己需要的资源\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"尽量使用整数对象以节省内存\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"尽量使用自动生成的id\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"尽量使用数字型字段\",{\"0\":{\"601\":1}}],[\"尽量根据自己公司使用情况回答\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"尽量说自己了解的\",{\"1\":{\"984\":1}}],[\"尽量编码路径中不要包含中文\",{\"1\":{\"764\":1}}],[\"尽量避免向客户端返回大数据量\",{\"0\":{\"611\":1}}],[\"尽量避免大事务操作\",{\"0\":{\"610\":1}}],[\"尽量避免使用游标\",{\"0\":{\"607\":1}}],[\"尽量从业务角度避免联查\",{\"1\":{\"583\":1}}],[\"尽量指定需要的列\",{\"1\":{\"567\":1}}],[\"尽量增大桶的数量\",{\"1\":{\"401\":1}}],[\"尽量在打印时日志时输出英文\",{\"1\":{\"227\":1}}],[\"尽量不影响分辨率\",{\"1\":{\"151\":1}}],[\"尽量大\",{\"1\":{\"123\":1}}],[\"跟\",{\"1\":{\"1446\":1}}],[\"跟我聊聊垃圾回收机制吧\",{\"1\":{\"1394\":1}}],[\"跟我聊聊classes是如何加载到jvm中的\",{\"1\":{\"1392\":1}}],[\"跟我们生活中的排队类似\",{\"1\":{\"335\":1}}],[\"跟随者状态\",{\"1\":{\"1196\":1,\"1369\":1}}],[\"跟别人没有任何关系\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"跟缓存击穿解决思路一致\",{\"1\":{\"1160\":2,\"1340\":2}}],[\"跟踪技术\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"跟provided\",{\"1\":{\"769\":1}}],[\"跟用户之间保持心跳通信以感知用户的状态\",{\"1\":{\"184\":1}}],[\"跟着下面视频一学就会\",{\"1\":{\"107\":1}}],[\"三个分区副本都是\",{\"1\":{\"1118\":1,\"1306\":1}}],[\"三个方面\",{\"1\":{\"893\":1}}],[\"三次握手\",{\"1\":{\"1091\":1,\"1284\":1}}],[\"三次握手和四次挥手\",{\"0\":{\"1091\":1,\"1284\":1}}],[\"三种快速创建springboot项目的方式\",{\"0\":{\"898\":1,\"899\":1}}],[\"三套\",{\"1\":{\"774\":1}}],[\"三套优质实战课程\",{\"1\":{\"267\":1}}],[\"三\",{\"0\":{\"481\":1},\"1\":{\"513\":1}}],[\"三大功能\",{\"0\":{\"184\":1}}],[\"三级\",{\"0\":{\"63\":1,\"69\":1}}],[\"余下的非observer服务器都会讲自己的服务器状态变更为looking\",{\"1\":{\"183\":1}}],[\"优势\",{\"0\":{\"656\":1},\"1\":{\"1122\":1,\"1310\":1}}],[\"优\",{\"1\":{\"564\":1}}],[\"优点\",{\"1\":{\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"244\":1,\"1006\":1,\"1215\":1}}],[\"优化\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"优化的基础是要了解\",{\"1\":{\"663\":1}}],[\"优化的磁盘i\",{\"1\":{\"566\":1}}],[\"优化器\",{\"1\":{\"590\":1}}],[\"优化单一表数据量过大而产生的性能问题\",{\"1\":{\"582\":1}}],[\"优化索引\",{\"1\":{\"578\":1}}],[\"优化索引的列顺序\",{\"1\":{\"573\":1}}],[\"优化迫在眉睫\",{\"1\":{\"578\":1}}],[\"优化表的操作可能会消耗大量的系统资源\",{\"1\":{\"574\":1}}],[\"优化表的存储引擎\",{\"1\":{\"574\":1}}],[\"优化查询语句\",{\"1\":{\"572\":1}}],[\"优化查询逻辑\",{\"1\":{\"567\":1}}],[\"优化后\",{\"1\":{\"190\":1,\"191\":1,\"192\":1,\"193\":1,\"194\":1,\"195\":1,\"196\":1,\"197\":1,\"198\":1,\"199\":1,\"200\":1}}],[\"优化前\",{\"1\":{\"190\":1,\"191\":1,\"192\":1,\"193\":1,\"194\":1,\"195\":1,\"196\":1,\"197\":1,\"198\":1,\"199\":1,\"200\":1}}],[\"优化if\",{\"0\":{\"189\":1}}],[\"优雅永不过时\",{\"1\":{\"189\":1}}],[\"优先加载\",{\"1\":{\"1183\":1,\"1358\":1}}],[\"优先副本选举\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"优先考虑稳定性\",{\"1\":{\"239\":1}}],[\"优先比较zxid\",{\"1\":{\"183\":1}}],[\"优先检查zxid\",{\"1\":{\"183\":1}}],[\"优质原创资源会在这里归档\",{\"1\":{\"1\":1}}],[\"处理读事件\",{\"1\":{\"1478\":1}}],[\"处理连接事件\",{\"1\":{\"1478\":1}}],[\"处理副本\",{\"1\":{\"1470\":2}}],[\"处理器和\",{\"1\":{\"1414\":1}}],[\"处理\",{\"1\":{\"1410\":1}}],[\"处理请求\",{\"1\":{\"1408\":1,\"1414\":2}}],[\"处理该请求并用\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"处理机制是通过类型擦除\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"处理结果集\",{\"1\":{\"800\":1}}],[\"处理能力都有限\",{\"1\":{\"578\":1}}],[\"处理为一个个词项\",{\"1\":{\"496\":1}}],[\"处理逻辑\",{\"1\":{\"199\":2}}],[\"处理投票\",{\"1\":{\"183\":2}}],[\"处理后的视频样式是在过滤处加磨砂处理\",{\"1\":{\"157\":1}}],[\"接受编译好的代码\",{\"1\":{\"776\":1}}],[\"接受\",{\"1\":{\"500\":1}}],[\"接受来自各个服务器的投票\",{\"1\":{\"183\":1}}],[\"接着就是给这个bean对象进行属性填充\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"接着返回文档给协调节点\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"接着说一下文档从接收到写入磁盘过程\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"接着\",{\"1\":{\"720\":1,\"961\":1}}],[\"接着再进行一次分配\",{\"1\":{\"428\":1}}],[\"接着继续进行上述过程\",{\"1\":{\"320\":1}}],[\"接触了比较多区块链底层的东西\",{\"1\":{\"263\":1}}],[\"接口呢\",{\"1\":{\"1480\":1}}],[\"接口之间的区别吗\",{\"1\":{\"1480\":1}}],[\"接口和一个\",{\"1\":{\"1474\":1}}],[\"接口是\",{\"1\":{\"1416\":1,\"1480\":1}}],[\"接口是做什么的\",{\"1\":{\"204\":1}}],[\"接口来编写插件\",{\"1\":{\"1416\":1}}],[\"接口来自定义线程的创建方式\",{\"1\":{\"1384\":1}}],[\"接口来操作数据库\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"接口绑定有两种实现方式\",{\"1\":{\"1137\":1,\"1322\":1}}],[\"接口绑定\",{\"1\":{\"1137\":1,\"1322\":1}}],[\"接口里的方法是不能重载的\",{\"1\":{\"1132\":1,\"1317\":1}}],[\"接口方法内的参数就是传递给\",{\"1\":{\"1132\":1,\"1317\":1}}],[\"接口就是人们常说的\",{\"1\":{\"1132\":1,\"1317\":1}}],[\"接口就能自定义分区策略\",{\"1\":{\"1119\":1,\"1307\":1}}],[\"接口与之对应\",{\"0\":{\"1132\":1,\"1317\":1}}],[\"接口或者配置\",{\"1\":{\"1093\":1,\"1286\":1}}],[\"接口的一些特点包括\",{\"1\":{\"1480\":1}}],[\"接口的一些特点吗\",{\"1\":{\"1480\":1}}],[\"接口的代理对象\",{\"1\":{\"1474\":1}}],[\"接口的方法就可以执行对应的\",{\"1\":{\"1416\":1}}],[\"接口的方法名就是映射文件中\",{\"1\":{\"1132\":1,\"1317\":1}}],[\"接口的执行方法中有一个\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"接口的全限名\",{\"1\":{\"1132\":1,\"1317\":1}}],[\"接口的全路径一致\",{\"1\":{\"825\":1}}],[\"接口的工作原理是什么\",{\"0\":{\"1132\":1,\"1317\":1}}],[\"接口的\",{\"1\":{\"889\":1,\"1410\":2}}],[\"接口参数\",{\"1\":{\"752\":1}}],[\"接口日志\",{\"1\":{\"752\":1}}],[\"接口响应速度是每一个系统发展到中后期都会面临的一个问题\",{\"1\":{\"588\":1}}],[\"接口调用成功了\",{\"1\":{\"296\":1}}],[\"接口\",{\"1\":{\"654\":1,\"824\":1,\"849\":2,\"850\":1,\"856\":1,\"857\":1,\"858\":1,\"891\":1,\"893\":1,\"895\":1,\"991\":1,\"1132\":1,\"1174\":1,\"1317\":1,\"1351\":1,\"1382\":1,\"1402\":2,\"1410\":4,\"1416\":2,\"1474\":2,\"1480\":1},\"2\":{\"215\":1,\"216\":1}}],[\"接口测试\",{\"0\":{\"213\":1}}],[\"接口安全\",{\"0\":{\"212\":1}}],[\"接口文档\",{\"1\":{\"211\":1,\"214\":1}}],[\"接口文档也要做出相应调整\",{\"1\":{\"210\":1}}],[\"接口文档需要提供接口示例\",{\"1\":{\"208\":1}}],[\"接口实例是为了帮助调用者理解接口的使用方法和调用流程\",{\"1\":{\"208\":1}}],[\"接口详细说明\",{\"0\":{\"207\":1}}],[\"接口地址的命名也要可以大概看出接口的作用\",{\"1\":{\"205\":1}}],[\"接口地址\",{\"1\":{\"205\":1}}],[\"接口路径规整\",{\"0\":{\"205\":1}}],[\"接口名称清晰\",{\"0\":{\"204\":1}}],[\"接口设计\",{\"1\":{\"1502\":1}}],[\"接口设计规范javapub\",{\"1\":{\"203\":1}}],[\"接口设计军规\",{\"1\":{\"203\":1}}],[\"接口设计这11点要注意\",{\"0\":{\"203\":1},\"1\":{\"203\":1}}],[\"接收者可以从这些分区中读取消息\",{\"1\":{\"1450\":1}}],[\"接收请求并相应结果\",{\"1\":{\"1414\":1}}],[\"接收请求后会转交给\",{\"1\":{\"1408\":1}}],[\"接收消息的逻辑\",{\"1\":{\"1444\":1}}],[\"接收消息\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"接收参数\",{\"1\":{\"826\":1}}],[\"接收来自各个服务器的投票\",{\"1\":{\"183\":1}}],[\"接收server2的投票为\",{\"1\":{\"183\":1}}],[\"接下来我们拆解一下\",{\"1\":{\"1494\":1}}],[\"接下来jvm该干嘛\",{\"1\":{\"1392\":1}}],[\"接下来用key的hash值与数组长度减一的值进行按位与操作\",{\"1\":{\"1077\":1,\"1272\":1}}],[\"接下来\",{\"1\":{\"976\":1,\"1049\":1,\"1250\":1,\"1402\":1,\"1470\":1}}],[\"接下来可以写你想要展示的内容\",{\"1\":{\"973\":1}}],[\"接下来初始化网站目录\",{\"1\":{\"973\":1}}],[\"接下来实操如何发现处理死锁\",{\"1\":{\"644\":1}}],[\"接下来定义一个子文档\",{\"1\":{\"510\":1}}],[\"接下来对\",{\"1\":{\"482\":1}}],[\"接下来将这些桶子中的数值重新串接起来\",{\"1\":{\"428\":2}}],[\"接下来登陆进来\",{\"1\":{\"296\":1}}],[\"接下来给大家演示一些文件的操作\",{\"1\":{\"107\":1}}],[\"接下来就可以配置你的证书了\",{\"1\":{\"102\":1}}],[\"若节点已存在\",{\"1\":{\"1380\":1}}],[\"若链表长度大于8\",{\"1\":{\"1380\":1}}],[\"若产生冲突\",{\"1\":{\"1380\":1}}],[\"若i位置为空\",{\"1\":{\"1380\":1}}],[\"若干\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"若能满足则按当前的申请量分配资源\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"若超过则拒绝分配资源\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"若有多个限定<\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"若有限定类型<\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"若有人说到了\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"若泛型类型没有指定具体类型\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"若添加多个\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"若开启驼峰\",{\"1\":{\"856\":1,\"857\":1}}],[\"若结果为\",{\"1\":{\"711\":1}}],[\"若等待超时抛出\",{\"1\":{\"711\":1}}],[\"若赋值\",{\"1\":{\"711\":1}}],[\"若数据量过大\",{\"0\":{\"611\":1}}],[\"若数据量极大\",{\"1\":{\"583\":1}}],[\"若只含数值信息的字段尽量不要设计为字符型\",{\"0\":{\"601\":1}}],[\"若太多则应考虑一些不常使用到的列上建的索引是否有必要\",{\"1\":{\"600\":1}}],[\"若映射规则设计的过于具体\",{\"1\":{\"403\":1}}],[\"若规则设计的过于模糊\",{\"1\":{\"403\":1}}],[\"若我们访问节点\",{\"1\":{\"323\":1}}],[\"若搜索\",{\"1\":{\"320\":1}}],[\"若部分加载到内存中则无法完成旋转操作\",{\"1\":{\"319\":1}}],[\"若某一时刻leader挂了\",{\"1\":{\"183\":1}}],[\"若进行leader选举\",{\"1\":{\"183\":1}}],[\"若设置为1有一个绿色的矩形\",{\"1\":{\"157\":1}}],[\"跨站请求伪造\",{\"1\":{\"1094\":1,\"1287\":1}}],[\"跨域资源共享\",{\"1\":{\"1093\":1,\"1286\":1}}],[\"跨域指的是浏览器不能执行其它网站的脚本\",{\"1\":{\"1093\":1,\"1286\":1}}],[\"跨平台\",{\"1\":{\"762\":1}}],[\"跨度\",{\"1\":{\"691\":1}}],[\"跨网络的共享资源似乎就无能为力了\",{\"1\":{\"180\":1}}],[\"跨主机\",{\"1\":{\"180\":1}}],[\"场景\",{\"0\":{\"786\":1},\"1\":{\"842\":1,\"846\":1,\"847\":1,\"848\":1,\"850\":1,\"979\":1}}],[\"场景杂乱\",{\"1\":{\"264\":1}}],[\"场景四\",{\"0\":{\"182\":1}}],[\"场景三\",{\"0\":{\"181\":1}}],[\"场景二\",{\"0\":{\"180\":1},\"1\":{\"849\":1,\"1049\":1,\"1250\":1}}],[\"场景一\",{\"0\":{\"179\":1},\"1\":{\"849\":1,\"1049\":1,\"1250\":1}}],[\"消费产品\",{\"1\":{\"1446\":1}}],[\"消费端的消费线程数是和分区数挂钩的\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"消费者需要定期拉取消息以确保不会错过任何重要的数据\",{\"1\":{\"1448\":1}}],[\"消费者代码\",{\"1\":{\"1448\":1}}],[\"消费者可以订阅一个或多个topic\",{\"1\":{\"1442\":1}}],[\"消费者只能消费到这四条消息\",{\"1\":{\"1118\":1,\"1306\":1}}],[\"消费者组id和反序列化器\",{\"1\":{\"1448\":1}}],[\"消费者组之间互不影响\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"消费者组内每个消费者负责消费不同分区的数据\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"消费者组\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"消费者\",{\"1\":{\"176\":1,\"1116\":1,\"1304\":1,\"1444\":1}}],[\"消耗内存\",{\"1\":{\"1103\":1,\"1294\":1}}],[\"消耗法力\",{\"1\":{\"382\":1}}],[\"消除了冗余代码\",{\"1\":{\"1130\":1,\"1315\":1}}],[\"消除\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"消息m3发送到p3\",{\"1\":{\"1450\":1}}],[\"消息m2发送到p2\",{\"1\":{\"1450\":1}}],[\"消息进行处理\",{\"1\":{\"1448\":1}}],[\"消息广播\",{\"1\":{\"1199\":1,\"1372\":1}}],[\"消息实际上是分布式存储在一个一个小的\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"消息发送的方式\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"消息偏移量\",{\"1\":{\"1118\":1,\"1306\":1}}],[\"消息队列是大型网站必用中间件\",{\"1\":{\"657\":1}}],[\"消息系统\",{\"1\":{\"657\":1,\"1115\":1,\"1156\":1,\"1303\":1,\"1336\":1}}],[\"消息的发布与订阅\",{\"1\":{\"170\":1}}],[\"状态信息\",{\"1\":{\"1494\":1}}],[\"状态标识\",{\"1\":{\"892\":1}}],[\"状态转换类似于我们在做一个简单的工单流转\",{\"1\":{\"197\":1}}],[\"状态\",{\"1\":{\"175\":1,\"786\":1,\"981\":1,\"1196\":1,\"1369\":1}}],[\"组织\",{\"1\":{\"768\":1,\"901\":1,\"902\":1}}],[\"组成了\",{\"1\":{\"1117\":1,\"1305\":1}}],[\"组成一个\",{\"1\":{\"721\":1}}],[\"组成\",{\"1\":{\"469\":1,\"775\":1,\"1116\":1,\"1117\":1,\"1304\":1,\"1305\":1}}],[\"组服务等\",{\"1\":{\"171\":1}}],[\"组件\",{\"0\":{\"37\":1,\"44\":1},\"1\":{\"44\":1,\"900\":1}}],[\"谁知道\",{\"1\":{\"980\":1}}],[\"谁干\",{\"1\":{\"980\":1}}],[\"谁能顶得住\",{\"0\":{\"614\":1},\"1\":{\"614\":1}}],[\"谁能顶住\",{\"0\":{\"555\":1},\"1\":{\"555\":1}}],[\"谁能把这个数据同步的时间压缩的更短\",{\"1\":{\"170\":1}}],[\"谁就是王\",{\"1\":{\"263\":1}}],[\"谁就更出色\",{\"1\":{\"170\":1}}],[\"谁掌握的基座\",{\"1\":{\"263\":1}}],[\"谁的请求响应就更快\",{\"1\":{\"170\":1}}],[\"再看\",{\"1\":{\"1494\":2}}],[\"再悲观锁\",{\"1\":{\"1476\":1}}],[\"再用这个临时文件替换上次持久化好的文件\",{\"1\":{\"1420\":1}}],[\"再由\",{\"1\":{\"1414\":1}}],[\"再从\",{\"1\":{\"1412\":1}}],[\"再进行resize\",{\"1\":{\"1380\":1}}],[\"再进行业务操作\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"再进行修改\",{\"1\":{\"683\":1}}],[\"再提交offset\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"再交由\",{\"1\":{\"1100\":1,\"1291\":1}}],[\"再把字节码加载到内存中\",{\"1\":{\"1100\":1,\"1291\":1}}],[\"再把修改后的结果放回到主内存中\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"再打印c\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"再继续执行\",{\"1\":{\"1061\":2,\"1259\":2}}],[\"再判断这个请求所用到的缓存是否过期\",{\"1\":{\"1009\":1,\"1218\":1}}],[\"再更新缓存\",{\"1\":{\"1007\":2,\"1216\":2}}],[\"再写数据库\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"再回写到内存\",{\"1\":{\"999\":1,\"1208\":1}}],[\"再回到我们自己做短视频\",{\"1\":{\"264\":1}}],[\"再使用\",{\"1\":{\"979\":1}}],[\"再使用此配置创建索引\",{\"1\":{\"491\":1}}],[\"再通过项目里指定的路径及可找到日志文件\",{\"1\":{\"919\":1}}],[\"再次感谢面试官\",{\"1\":{\"1380\":1}}],[\"再次强调它们是相互独立的\",{\"1\":{\"774\":1}}],[\"再次修改我们的代码\",{\"1\":{\"755\":1}}],[\"再谈redis\",{\"0\":{\"677\":1}}],[\"再将后续的操作以aof的格式存入文件当中\",{\"1\":{\"1158\":1,\"1338\":1}}],[\"再将工作区的内容取出来\",{\"1\":{\"979\":1}}],[\"再将结果保存成新的字符串\",{\"1\":{\"666\":1}}],[\"再将堆顶元素8与末尾元素5进行交换\",{\"1\":{\"417\":1}}],[\"再高大上的框架\",{\"1\":{\"585\":1}}],[\"再考虑水平分库水平分表方案\",{\"1\":{\"583\":1}}],[\"再加一次校验\",{\"1\":{\"541\":1}}],[\"再加上机械运动耗费\",{\"1\":{\"327\":1}}],[\"再简单总结下堆排序的基本思路\",{\"1\":{\"417\":1}}],[\"再分别对两个桶进行排序\",{\"1\":{\"401\":1}}],[\"再找对应位置是否为1即可\",{\"1\":{\"386\":1,\"392\":1}}],[\"再第二个字母等等\",{\"1\":{\"319\":1}}],[\"再比较myid\",{\"1\":{\"183\":2}}],[\"再给查询请求返回信息\",{\"1\":{\"170\":1}}],[\"再在工作中茁壮成长\",{\"1\":{\"117\":1}}],[\"小伙子\",{\"1\":{\"1394\":1,\"1396\":1,\"1400\":1,\"1404\":1,\"1406\":1,\"1410\":1,\"1412\":1,\"1424\":1,\"1442\":1}}],[\"小王\",{\"1\":{\"1176\":1,\"1353\":1,\"1430\":1,\"1452\":1,\"1494\":1}}],[\"小的账户上的锁\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"小的数据集精度是非常高的\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"小结\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"小李马不停蹄\",{\"1\":{\"979\":1}}],[\"小明\",{\"1\":{\"799\":1,\"1134\":3,\"1176\":1,\"1319\":3,\"1353\":1,\"1444\":1,\"1452\":1,\"1454\":2}}],[\"小薅养活妻儿\",{\"1\":{\"534\":1}}],[\"小写处理\",{\"1\":{\"464\":3}}],[\"小顶堆\",{\"1\":{\"417\":1}}],[\"小于500元\",{\"1\":{\"928\":1}}],[\"小于号引起的问题\",{\"1\":{\"863\":1}}],[\"小于号\",{\"1\":{\"863\":1}}],[\"小于\",{\"1\":{\"320\":1}}],[\"小于设置值的文件将不会压缩\",{\"1\":{\"123\":1}}],[\"小西过来问leader02要人\",{\"1\":{\"170\":1}}],[\"同为\",{\"1\":{\"1398\":1}}],[\"同其他的代码块一样\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"同意\",{\"1\":{\"929\":1}}],[\"同整数集合一样压缩列表也不是基础数据结构\",{\"1\":{\"695\":1}}],[\"同步工作的流程如下\",{\"1\":{\"1422\":1}}],[\"同步阶段+命令传播阶段\",{\"1\":{\"1422\":1}}],[\"同步队列\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"同步和异步\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"同步和异步在于第二个\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"同步非阻塞io\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"同步阻塞io\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"同步块大家都比较熟悉\",{\"1\":{\"755\":1}}],[\"同步块\",{\"1\":{\"755\":1}}],[\"同步对读取操作的可扩展性和数据冗余很有帮助\",{\"1\":{\"652\":1}}],[\"同步\",{\"1\":{\"652\":1}}],[\"同义词词库\",{\"1\":{\"467\":1}}],[\"同一分区的不同副本保存的是相同的消息\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"同一个地方不能同时存在两个同名注解\",{\"1\":{\"1402\":1}}],[\"同一个\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"同一个位置上出现8个元素的概率已经接近千分之一了\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"同一个类中\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"同一个事务\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"同一个namespace中查询sql可以从缓存中命中\",{\"1\":{\"853\":1}}],[\"同一个session中\",{\"1\":{\"852\":1}}],[\"同一个字段的值\",{\"1\":{\"493\":1}}],[\"同一时间只让一个线程构建缓存\",{\"1\":{\"1160\":1,\"1340\":1}}],[\"同一时间截\",{\"1\":{\"441\":1}}],[\"同一时刻只能有一个线程能够用\",{\"1\":{\"755\":1}}],[\"同一机器\",{\"1\":{\"441\":1}}],[\"同一台服务器所有生成的id按时间趋势递增\",{\"1\":{\"440\":1}}],[\"同样地\",{\"1\":{\"1382\":1}}],[\"同样是在需要乐观锁控制的table中增加一个字段\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"同样需要使用hash函数\",{\"1\":{\"386\":1}}],[\"同样的sql再另一台数据库再执行一次\",{\"1\":{\"436\":1}}],[\"同样的\",{\"1\":{\"170\":1}}],[\"同事朋友看到\",{\"1\":{\"264\":1}}],[\"同时减少代码中的硬编码\",{\"1\":{\"1460\":1}}],[\"同时处理多个客户端请求等等\",{\"1\":{\"1446\":1}}],[\"同时下载多个文件\",{\"1\":{\"1446\":1}}],[\"同时还支持消息的批量处理和压缩\",{\"1\":{\"1438\":1}}],[\"同时还提供\",{\"1\":{\"655\":1}}],[\"同时开始缓冲从服务器断开期间产生的写命令\",{\"1\":{\"1422\":1}}],[\"同时主服务器也发送从服务器连接后产生的写命令给从服务器\",{\"1\":{\"1422\":1}}],[\"同时清空survivor区1\",{\"1\":{\"1388\":1}}],[\"同时在数据库中也不存在\",{\"1\":{\"1159\":1,\"1339\":1}}],[\"同时负责查询缓存的维护\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"同时将多个\",{\"1\":{\"668\":1}}],[\"同时redis\",{\"1\":{\"656\":1}}],[\"同时能提高整体架构的业务清晰度\",{\"1\":{\"583\":1}}],[\"同时记录下哪些文档包含这个单词\",{\"1\":{\"478\":1}}],[\"同时shard分布在多台node上\",{\"1\":{\"474\":1}}],[\"同时相隔\",{\"1\":{\"440\":1}}],[\"同时可以自主选择恰当的排序算法对桶进行排序\",{\"1\":{\"401\":1}}],[\"同时\",{\"1\":{\"401\":1,\"1006\":1,\"1163\":1,\"1215\":1,\"1343\":1,\"1384\":1}}],[\"同时也会诞生各种各样的奇葩需求\",{\"1\":{\"1502\":1}}],[\"同时也会写入到\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"同时也发送缓冲的写命令\",{\"1\":{\"1422\":1}}],[\"同时也方便进行删除操作\",{\"1\":{\"1380\":1}}],[\"同时也可以在集群中再使用\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"同时也可以自定义开发非官方提供的exporter\",{\"1\":{\"946\":1}}],[\"同时也提高了数据操作的并行度\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"同时也解决了\",{\"1\":{\"341\":1}}],[\"同时也推动整个社会的进步\",{\"1\":{\"56\":1}}],[\"同时加上\",{\"1\":{\"151\":1}}],[\"同时每个页面包含\",{\"1\":{\"21\":1}}],[\"人会停止翻页\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"人家自动给你按照时间排序了\",{\"1\":{\"720\":1}}],[\"人\",{\"1\":{\"263\":1}}],[\"人都被你们产品要走了\",{\"1\":{\"170\":1}}],[\"人工智能\",{\"0\":{\"73\":1}}],[\"于是用了转义字符把>和<替换掉\",{\"1\":{\"863\":1}}],[\"于是就想到了特殊符号\",{\"1\":{\"863\":1}}],[\"于是就跟小西说\",{\"1\":{\"170\":1}}],[\"于是我们可以建立一个长度为11的数组\",{\"1\":{\"412\":1}}],[\"于是更新自己的投票为\",{\"1\":{\"183\":1}}],[\"于是进入leader选举过程\",{\"1\":{\"183\":1}}],[\"于是把小耀安排给了小饼的项目\",{\"1\":{\"170\":1}}],[\"过于复杂或\",{\"1\":{\"1408\":1}}],[\"过程不影响服务\",{\"1\":{\"1420\":1}}],[\"过程中\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"过程并不是一次性地完成的\",{\"1\":{\"688\":1,\"689\":1}}],[\"过期的话就去底层系统得到新数据并更新缓存\",{\"1\":{\"1009\":1,\"1218\":1}}],[\"过期\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"过期机制\",{\"1\":{\"678\":1}}],[\"过期等等特性\",{\"1\":{\"656\":1}}],[\"过多的索引会增加数据库的维护成本\",{\"1\":{\"573\":1}}],[\"过完这个节\",{\"1\":{\"556\":1,\"615\":1}}],[\"过滤器\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"过滤器类型\",{\"1\":{\"508\":1}}],[\"过滤器的使用\",{\"0\":{\"154\":1}}],[\"过时的软件包\",{\"1\":{\"240\":1}}],[\"过了一会\",{\"1\":{\"170\":1}}],[\"看需求有没有技术难点\",{\"1\":{\"1502\":1}}],[\"看起来很简单\",{\"1\":{\"1444\":1}}],[\"看起来很简单明了\",{\"1\":{\"1428\":1}}],[\"看来你使用的很好\",{\"1\":{\"1480\":1}}],[\"看来你对\",{\"1\":{\"1412\":1,\"1414\":1}}],[\"看来你之前真的有认真研读与理解\",{\"1\":{\"1404\":1}}],[\"看来你在这方面下了不少功夫\",{\"1\":{\"1398\":1}}],[\"看来有点东西\",{\"1\":{\"1396\":1}}],[\"看作是一把锁\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"看日志可以发现就是直接把值拼接上去了\",{\"1\":{\"1131\":1,\"1316\":1}}],[\"看日志我们可以看到解析时将\",{\"1\":{\"1131\":1,\"1316\":1}}],[\"看做一台\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"看一下官方说明\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"看一下我们的仓库\",{\"1\":{\"976\":1}}],[\"看过可能在短暂的面试后又马上忘记了\",{\"1\":{\"983\":1,\"987\":1,\"998\":1,\"1013\":1,\"1024\":1,\"1040\":1,\"1054\":1,\"1068\":1,\"1083\":1,\"1098\":1,\"1112\":1,\"1128\":1,\"1141\":1,\"1154\":1,\"1167\":1,\"1180\":1,\"1193\":1,\"1206\":1}}],[\"看成是一个\",{\"1\":{\"721\":1}}],[\"看到\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"看到这个名字就知道是经纬度坐标相关\",{\"1\":{\"723\":1}}],[\"看到这里\",{\"1\":{\"691\":1}}],[\"看到一个比较靠谱的例子\",{\"1\":{\"170\":1}}],[\"看后不忘三连\",{\"1\":{\"671\":1}}],[\"看哪一种方法的效果更好\",{\"1\":{\"609\":1}}],[\"看\",{\"1\":{\"541\":1,\"1122\":1,\"1310\":1}}],[\"看下边一个例子\",{\"1\":{\"411\":1}}],[\"看下边原理很容易理解\",{\"1\":{\"410\":1}}],[\"看名字就知是数据目录\",{\"1\":{\"174\":1}}],[\"看看他有哪些功能\",{\"1\":{\"129\":1}}],[\"欢迎使用\",{\"1\":{\"1494\":1}}],[\"欢迎来到我们的面试\",{\"1\":{\"1426\":1,\"1432\":1,\"1438\":1,\"1456\":1,\"1458\":1,\"1462\":1,\"1464\":1}}],[\"欢迎来我公众号\",{\"1\":{\"167\":1,\"381\":1,\"400\":1,\"409\":1,\"417\":1,\"430\":1,\"650\":1,\"676\":1,\"711\":1,\"761\":1}}],[\"欢迎观赏\",{\"1\":{\"731\":1}}],[\"欢迎大家前来白嫖pdf\",{\"1\":{\"649\":1}}],[\"欢迎大家分享\",{\"1\":{\"584\":1}}],[\"欢迎关注公众号\",{\"1\":{\"421\":1,\"795\":1}}],[\"欢迎加入\",{\"1\":{\"53\":1}}],[\"声明式事务最大的优点就是不需要在业务逻辑代码中掺杂事务管理的代码\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"声明式事务管理建立在aop之上的\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"声明式事务\",{\"1\":{\"881\":1}}],[\"声明该类为一个注解类\",{\"1\":{\"752\":1}}],[\"声明队列接口queue\",{\"1\":{\"340\":1}}],[\"声明\",{\"1\":{\"167\":1,\"381\":1,\"400\":1,\"409\":1,\"417\":1,\"430\":1,\"650\":1,\"676\":1,\"704\":1,\"761\":1,\"795\":1}}],[\"直播视频和源码详细介绍\",{\"1\":{\"1492\":1}}],[\"直播相关\",{\"0\":{\"163\":1}}],[\"直至容器关闭\",{\"1\":{\"1408\":1}}],[\"直至第一次使用调用getbean方法才会抛出异常\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"直到该锁被释放\",{\"1\":{\"1480\":4,\"1481\":1}}],[\"直到达到最大重试次数\",{\"1\":{\"1452\":1}}],[\"直到有产品生产\",{\"1\":{\"1446\":1}}],[\"直到产品被消费\",{\"1\":{\"1446\":1}}],[\"直到其他线程调用\",{\"1\":{\"1446\":1}}],[\"直到所有线程都到达这个点后再一起继续执行\",{\"1\":{\"1390\":1}}],[\"直到最后一个到达\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"直到看到\",{\"1\":{\"976\":1}}],[\"直到事务完成\",{\"1\":{\"638\":1}}],[\"直到事务结束才释放锁\",{\"1\":{\"633\":1,\"636\":1}}],[\"直到锁被释放\",{\"1\":{\"628\":1}}],[\"直到持有排他锁的事务结束\",{\"1\":{\"618\":1}}],[\"直到当前事务结束\",{\"1\":{\"618\":1}}],[\"直到获得新的时间戳\",{\"1\":{\"441\":1}}],[\"直到找到该\",{\"1\":{\"320\":1}}],[\"直接返回\",{\"1\":{\"1481\":2}}],[\"直接返回对象\",{\"1\":{\"91\":1}}],[\"直接发送下一条消息\",{\"1\":{\"1452\":1}}],[\"直接点下一道菜\",{\"1\":{\"1452\":1}}],[\"直接从\",{\"1\":{\"1412\":1}}],[\"直接清除\",{\"1\":{\"1396\":1}}],[\"直接清除标记的垃圾对象\",{\"1\":{\"1396\":1}}],[\"直接新建节点添加\",{\"1\":{\"1380\":1}}],[\"直接往arraylist中添加元素的时间复杂度是o\",{\"1\":{\"1074\":1,\"1269\":1}}],[\"直接读取的就是缓存的数据\",{\"1\":{\"1008\":1,\"1217\":1}}],[\"直接\",{\"1\":{\"980\":1}}],[\"直接使用注解指定传入参数名称\",{\"1\":{\"826\":2,\"842\":4}}],[\"直接使用下面方式\",{\"1\":{\"149\":1}}],[\"直接按照类别排除\",{\"1\":{\"773\":1}}],[\"直接根据id去到对应的内容页即可\",{\"1\":{\"657\":1}}],[\"直接用\",{\"1\":{\"562\":1}}],[\"直接将输入当作输出\",{\"1\":{\"464\":1}}],[\"直接遍历数组\",{\"1\":{\"412\":1}}],[\"直接插入排序\",{\"0\":{\"349\":1}}],[\"直接申请页大小的空间\",{\"1\":{\"319\":1}}],[\"直接分配给其中一个数\",{\"1\":{\"306\":1}}],[\"直接在代码中处理逻辑\",{\"1\":{\"197\":1}}],[\"直接执行动作\",{\"1\":{\"196\":1}}],[\"表现逻辑的分离\",{\"1\":{\"1408\":1}}],[\"表方案\",{\"1\":{\"1380\":1}}],[\"表实现\",{\"1\":{\"1380\":1}}],[\"表达式\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"表达式直接获取上下文中对象的属性值\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"表达式可以定义为切某个注解\",{\"1\":{\"752\":1}}],[\"表明当前服务器角色是\",{\"1\":{\"1196\":3,\"1369\":3}}],[\"表明这是一个切面类\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"表明这个类不能有任何的子类\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"表明事务有意向在id为10到20的范围内插入新行\",{\"1\":{\"621\":1}}],[\"表关系说明\",{\"0\":{\"855\":1}}],[\"表被用作列表键和哈希键的底层实现之一\",{\"1\":{\"696\":1}}],[\"表是redis为节约内存自己设计的一种顺序型数据结构\",{\"1\":{\"696\":1}}],[\"表尾节点指针\",{\"1\":{\"685\":1}}],[\"表尾节点\",{\"1\":{\"684\":1,\"692\":1}}],[\"表头节点和表尾节点\",{\"1\":{\"691\":1}}],[\"表头节点\",{\"1\":{\"684\":1}}],[\"表锁是一种粗粒度的锁\",{\"1\":{\"637\":1}}],[\"表锁是锁定整个表\",{\"1\":{\"628\":1}}],[\"表锁是锁定整个表的锁\",{\"1\":{\"624\":1}}],[\"表锁适用于全表操作\",{\"1\":{\"630\":1}}],[\"表锁最低\",{\"1\":{\"630\":1}}],[\"表锁期间\",{\"1\":{\"628\":1}}],[\"表锁影响整个表的所有数据\",{\"1\":{\"624\":1}}],[\"表锁通常用于批量操作\",{\"1\":{\"624\":1}}],[\"表锁和页锁是两种不同粒度的锁\",{\"1\":{\"624\":1}}],[\"表锁\",{\"0\":{\"624\":1,\"626\":1,\"628\":1},\"1\":{\"624\":2,\"630\":1}}],[\"表粒度锁\",{\"1\":{\"620\":1}}],[\"表\",{\"1\":{\"574\":1}}],[\"表来获取索引信息\",{\"1\":{\"569\":1}}],[\"表里的\",{\"1\":{\"564\":1}}],[\"表式使用\",{\"1\":{\"162\":1}}],[\"表式无损压缩\",{\"1\":{\"162\":1}}],[\"表示消息在该分区中的位置\",{\"1\":{\"1442\":1}}],[\"表示任何类型\",{\"1\":{\"1424\":1}}],[\"表示从t到父类型的范围\",{\"1\":{\"1424\":1}}],[\"表示从t到子类型的范围\",{\"1\":{\"1424\":1}}],[\"表示从\",{\"1\":{\"1424\":1}}],[\"表示从其它的pom中导入dependency的配置\",{\"1\":{\"769\":1}}],[\"表示全类型通配\",{\"1\":{\"1424\":1}}],[\"表示接受任何类型\",{\"1\":{\"1424\":1}}],[\"表示收到客户端取消请求\",{\"1\":{\"1091\":1,\"1284\":1}}],[\"表示让一个线程进入睡眠状态\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"表示该线程已经执行完毕\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"表示线程阻塞于锁\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"表示转移该分支的最新提交\",{\"1\":{\"980\":1}}],[\"表示使用什么编程语言\",{\"1\":{\"900\":1}}],[\"表示使用什么构建工具\",{\"1\":{\"900\":1}}],[\"表示使nginx阻止http应答代码为400或者更高的应答\",{\"1\":{\"123\":1}}],[\"表示更新的记录行数\",{\"1\":{\"889\":1}}],[\"表示集中的存储的元素类型\",{\"1\":{\"860\":1}}],[\"表示删除开头的或结尾的\",{\"1\":{\"787\":1}}],[\"表示会用\",{\"1\":{\"787\":1}}],[\"表示在\",{\"1\":{\"787\":1}}],[\"表示向下传递\",{\"1\":{\"771\":1}}],[\"表示一个元素的二值状态\",{\"1\":{\"721\":1}}],[\"表示永不超时\",{\"1\":{\"711\":1}}],[\"表示不被限制\",{\"1\":{\"711\":1}}],[\"表示支持\",{\"1\":{\"541\":1}}],[\"表示\",{\"1\":{\"183\":1,\"688\":2,\"1424\":2}}],[\"表示这个服务器与集群中的leader服务器交换信息的端口\",{\"1\":{\"174\":1}}],[\"表示这个是第几号服务器\",{\"1\":{\"174\":1}}],[\"表示音频编码器\",{\"1\":{\"162\":1}}],[\"表示视频编码器\",{\"1\":{\"162\":1}}],[\"表示每一秒几帧\",{\"1\":{\"158\":1}}],[\"表示要切多少\",{\"1\":{\"146\":1}}],[\"表示开始切割时间\",{\"1\":{\"146\":1}}],[\"桌面的输入对帧率没有要求\",{\"1\":{\"162\":1}}],[\"采取bulk批量写入\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"采取curator进行索引的生命周期管理\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"采取冷热分离机制\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"采取基于日期模板创建索引\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"采用其读锁来提高并发度\",{\"1\":{\"1476\":1}}],[\"采用重构手段\",{\"1\":{\"1412\":1}}],[\"采用提前暴露对象的方式解决循环依赖\",{\"1\":{\"1412\":1}}],[\"采用分布式和微服务架构\",{\"1\":{\"1408\":1}}],[\"采用模块化设计\",{\"1\":{\"1408\":1}}],[\"采用监控工具\",{\"1\":{\"1400\":1}}],[\"采用free\",{\"1\":{\"1396\":2}}],[\"采用整型作为id时\",{\"1\":{\"435\":1}}],[\"采用lgpl或gpl许可证\",{\"1\":{\"139\":1}}],[\"采集数据\",{\"1\":{\"162\":2}}],[\"录音\",{\"1\":{\"162\":1}}],[\"录视频\",{\"1\":{\"162\":1}}],[\"录屏+声音\",{\"1\":{\"162\":1}}],[\"录屏\",{\"1\":{\"162\":1}}],[\"录制\",{\"0\":{\"162\":1}}],[\"计数存在一定的误差\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"计数器偏移量\",{\"1\":{\"1481\":1}}],[\"计数器\",{\"1\":{\"657\":1,\"1156\":1,\"1336\":1,\"1481\":1}}],[\"计数排序可以用在基数排序中的算法来排序数据范围很大的数组\",{\"1\":{\"410\":1}}],[\"计数排序是一个简单的排序算法\",{\"1\":{\"410\":1}}],[\"计数排序是一个非基于比较的排序算法\",{\"1\":{\"410\":1}}],[\"计数排序是用来排序0到100之间的数字的最好的算法\",{\"1\":{\"410\":1}}],[\"计数排序是比较容易的排序算法\",{\"1\":{\"409\":1}}],[\"计数排序就是这么容易\",{\"0\":{\"409\":1}}],[\"计数排序的升级版\",{\"1\":{\"401\":1}}],[\"计数排序\",{\"0\":{\"410\":1},\"1\":{\"400\":1,\"423\":2}}],[\"计算下一个索引\",{\"1\":{\"1386\":1}}],[\"计算键值对的索引\",{\"1\":{\"1386\":1}}],[\"计算key的hash值\",{\"1\":{\"1380\":2}}],[\"计算key在数组中的下标时\",{\"1\":{\"1078\":1,\"1273\":1}}],[\"计算数组位置的算法是\",{\"1\":{\"1080\":1,\"1275\":1}}],[\"计算数组位置的效率\",{\"1\":{\"1080\":1,\"1275\":1}}],[\"计算过程是\",{\"1\":{\"1077\":1,\"1272\":1}}],[\"计算出\",{\"1\":{\"1073\":1,\"1268\":1}}],[\"计算两个位置之间的距离\",{\"1\":{\"723\":1}}],[\"计算哈希值的函数\",{\"1\":{\"687\":1}}],[\"计算给定的一个或多个有序集的并集\",{\"1\":{\"670\":1}}],[\"计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合\",{\"1\":{\"670\":1}}],[\"计算在有序集合中指定区间分数的成员数\",{\"1\":{\"670\":1}}],[\"计算查询和文档相似度是很重要的一个计算因子\",{\"1\":{\"478\":1}}],[\"计算hash函数个数\",{\"1\":{\"393\":1}}],[\"计算\",{\"1\":{\"393\":1,\"722\":1,\"723\":1}}],[\"计算方式\",{\"1\":{\"392\":1}}],[\"计算机中正数包含0\",{\"1\":{\"440\":1}}],[\"计算机的每次请求都要经过防火墙的过滤判断请求url是否在黑名单中\",{\"1\":{\"383\":1}}],[\"计算机内存分配是按页对齐的\",{\"1\":{\"319\":1}}],[\"计算每个流的帧数\",{\"1\":{\"160\":1}}],[\"计划\",{\"1\":{\"34\":2,\"1502\":1}}],[\"计划运营到\",{\"1\":{\"1\":1}}],[\"从项目创建\",{\"1\":{\"1492\":1}}],[\"从分区p3读取消息\",{\"1\":{\"1450\":1}}],[\"从分区p2读取消息\",{\"1\":{\"1450\":1}}],[\"从分区p1读取消息\",{\"1\":{\"1450\":1}}],[\"从kafka中获取准确的信息有什么要注意的地方吗\",{\"1\":{\"1442\":1}}],[\"从柜台上拿走订单\",{\"1\":{\"1432\":1}}],[\"从gc\",{\"1\":{\"1394\":1,\"1396\":1,\"1398\":1}}],[\"从设计模式角度来理解\",{\"1\":{\"1194\":1,\"1367\":1}}],[\"从properties中获取到enableautoconfiguration\",{\"1\":{\"1185\":1,\"1360\":1}}],[\"从锁的类别上来讲\",{\"1\":{\"1150\":1,\"1333\":1}}],[\"从锁的类别上分mysql都有哪些锁呢\",{\"0\":{\"1150\":1,\"1333\":1}}],[\"从其他\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"从zookeeper中读取当前分区的所有isr\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"从副本\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"从上图我们就可以看出\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"从上图可以看出相同大小的区域\",{\"1\":{\"323\":1}}],[\"从上图可以看出\",{\"1\":{\"323\":1}}],[\"从上面可以看到\",{\"1\":{\"980\":1}}],[\"从列表中删除这个存储\",{\"1\":{\"979\":1}}],[\"从列表中弹出一个值\",{\"1\":{\"667\":1}}],[\"从主内存中拷贝到自己的线程工作内存\",{\"1\":{\"755\":1}}],[\"从黑铁到王者\",{\"1\":{\"715\":1}}],[\"从大到小\",{\"1\":{\"670\":1}}],[\"从表尾开始向表头搜索\",{\"1\":{\"667\":1}}],[\"从表头开始向表尾搜索\",{\"1\":{\"667\":1}}],[\"从右边\",{\"1\":{\"667\":1}}],[\"从右至左调整结构\",{\"1\":{\"417\":1}}],[\"从形如\",{\"1\":{\"665\":1}}],[\"从2013年5月开始\",{\"1\":{\"652\":1}}],[\"从2010年3月15日起\",{\"1\":{\"652\":1}}],[\"从每种锁的锁粒度\",{\"1\":{\"626\":1}}],[\"从细到粗\",{\"1\":{\"624\":1,\"630\":1}}],[\"从多个角度分析\",{\"1\":{\"588\":1}}],[\"从这个方法点进来可以看到\",{\"1\":{\"1507\":1}}],[\"从这2段代码可以看出\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"从这三个维度可以很好的应用在你的开发工作中\",{\"1\":{\"562\":1}}],[\"从这点来看b+树相对b\",{\"1\":{\"323\":1}}],[\"从图中可以看出核心类型可以划分为字符串类型\",{\"1\":{\"495\":1}}],[\"从\",{\"1\":{\"482\":1,\"755\":1,\"1107\":1,\"1116\":2,\"1123\":1,\"1134\":1,\"1143\":2,\"1298\":1,\"1304\":2,\"1311\":1,\"1319\":1,\"1326\":2,\"1492\":1}}],[\"从1开始\",{\"1\":{\"436\":1}}],[\"从最低位开始\",{\"1\":{\"427\":1}}],[\"从第一个非叶子结点从下至上\",{\"1\":{\"417\":1}}],[\"从第几帧到第几帧之间进行提取\",{\"1\":{\"158\":1}}],[\"从下至上进行调整\",{\"1\":{\"417\":1}}],[\"从下标为1的元素开始选择合适的位置插入\",{\"1\":{\"405\":1}}],[\"从左至右\",{\"1\":{\"417\":1}}],[\"从左到右的顺序进行编号\",{\"1\":{\"417\":1}}],[\"从c中的第一个元素开始\",{\"1\":{\"411\":1}}],[\"从已经排序的序列最右边的开始比较\",{\"1\":{\"405\":1}}],[\"从待排序集合中元素映射到各个桶上的过程\",{\"1\":{\"403\":1}}],[\"从值域上看是处于有序状态的\",{\"1\":{\"401\":1}}],[\"从抽象角度看\",{\"1\":{\"326\":1}}],[\"从而可以直接访问文件的内容\",{\"1\":{\"1478\":1}}],[\"从而精确控制\",{\"1\":{\"1410\":1}}],[\"从而应对可能遇到的面试题和实际开发中的相关问题\",{\"1\":{\"1392\":1}}],[\"从而避免aba问题\",{\"1\":{\"1476\":1}}],[\"从而避免资源消耗\",{\"1\":{\"1392\":1}}],[\"从而避免了线程安全问题\",{\"1\":{\"1386\":2}}],[\"从而影响其生命周期\",{\"1\":{\"1410\":1}}],[\"从而影响程序的正确性\",{\"1\":{\"1384\":1}}],[\"从而影响系统的性能\",{\"1\":{\"1384\":1}}],[\"从而影响性能\",{\"1\":{\"633\":1}}],[\"从而退出循环\",{\"1\":{\"1382\":1}}],[\"从而保证了可见性\",{\"1\":{\"1382\":1}}],[\"从而在表盘上产生正确的时间\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"从而在受害者并未授权的情况下执行受害者权限下的各种操作\",{\"1\":{\"1094\":1,\"1287\":1}}],[\"从而实现多路复用\",{\"1\":{\"1478\":2}}],[\"从而实现更加灵活和强大的功能\",{\"1\":{\"1468\":1,\"1474\":1}}],[\"从而实现分页\",{\"1\":{\"1138\":1,\"1323\":1}}],[\"从而实现最终一致性\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"从而丢失\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"从而抛出异常\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"从而返回\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"从而更新本地缓存\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"从而打破死锁状态\",{\"1\":{\"644\":1}}],[\"从而维护数据的顺序性和一致性\",{\"1\":{\"621\":1}}],[\"从而使访问压力被多服务器负载\",{\"1\":{\"583\":2}}],[\"从而使得单个表的数据量变小\",{\"1\":{\"582\":1}}],[\"从而使开发人员不再需要定义样板化的配置\",{\"1\":{\"454\":1}}],[\"从而达到多个服务器共同分摊压力的效果\",{\"1\":{\"580\":1}}],[\"从而达到提升数据库性能的目的\",{\"1\":{\"578\":2}}],[\"从而提供较高的并发性\",{\"1\":{\"627\":1}}],[\"从而提供比表锁更细粒度的并发控制\",{\"1\":{\"624\":1}}],[\"从而提升了数据库性能\",{\"1\":{\"579\":1}}],[\"从而提高系统的并发性能\",{\"1\":{\"1478\":2}}],[\"从而提高系统的性能和资源利用率\",{\"1\":{\"1384\":1}}],[\"从而提高代码的可重用性和可维护性\",{\"1\":{\"1474\":1}}],[\"从而提高整体吞吐量\",{\"1\":{\"1440\":1}}],[\"从而提高读写速度\",{\"1\":{\"999\":1,\"1208\":1}}],[\"从而提高查询性能\",{\"1\":{\"573\":1}}],[\"从而提高了更新操作的效率\",{\"1\":{\"566\":1}}],[\"从而帮助我们快速定位符合某个条件的行\",{\"1\":{\"568\":1}}],[\"从而降低了解决问题的复杂度\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"从而降低出现缓存雪崩的情况\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"从而降低并发性\",{\"1\":{\"637\":1}}],[\"从而降低索引的效率\",{\"1\":{\"571\":1}}],[\"从而降低树的高度\",{\"1\":{\"566\":1}}],[\"从而降低磁盘的利用效率和查询效率\",{\"1\":{\"562\":1}}],[\"从而减少回表\",{\"1\":{\"567\":1}}],[\"从而减少磁盘的io次数\",{\"1\":{\"562\":1}}],[\"从而减少查询时候需要的io次数\",{\"1\":{\"323\":1}}],[\"从而建立表之间的关系\",{\"1\":{\"559\":1}}],[\"从而拓宽我们的视野\",{\"1\":{\"56\":1}}],[\"从中收到了一点回报\",{\"1\":{\"264\":1}}],[\"从负责任的角度来说\",{\"1\":{\"263\":1}}],[\"从需求到部署上线\",{\"1\":{\"233\":1}}],[\"从零到一写代码\",{\"1\":{\"233\":1}}],[\"从服务器得到\",{\"1\":{\"1422\":1}}],[\"从服务器载入\",{\"1\":{\"1422\":1}}],[\"从服务器连接主服务器\",{\"1\":{\"1422\":2}}],[\"从服务器处理读请求\",{\"1\":{\"1422\":1}}],[\"从服务器可以顶上继续提供服务\",{\"1\":{\"1422\":1}}],[\"从服务器可以是关联其他从服务器的主服务器\",{\"1\":{\"652\":1}}],[\"从服务器删除资源\",{\"1\":{\"206\":1}}],[\"从服务器取出资源\",{\"1\":{\"206\":1}}],[\"即被锁定的对象\",{\"1\":{\"1481\":2}}],[\"即扩容与重新哈希\",{\"1\":{\"1406\":1}}],[\"即一个线程修改了共享变量的值\",{\"1\":{\"1382\":1}}],[\"即所谓的配置中心\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"即所有的\",{\"1\":{\"991\":1}}],[\"即对于的每一个请求\",{\"1\":{\"1197\":1,\"1370\":1}}],[\"即当一个线程修改了变量的值后\",{\"1\":{\"1480\":1}}],[\"即当有多个\",{\"1\":{\"1203\":1,\"1376\":1}}],[\"即当系统数据发生更新操作之后\",{\"1\":{\"1197\":1,\"1370\":1}}],[\"即当使用\",{\"1\":{\"1133\":1,\"1318\":1}}],[\"即保证一致性和网络分区容错性\",{\"1\":{\"1197\":1,\"1370\":1}}],[\"即同时加载多个配置文件\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"即连接点join\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"即增强的逻辑\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"即redis加锁的value\",{\"1\":{\"1163\":1,\"1343\":1}}],[\"即为数据增加一个版本标识\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"即为分区的\",{\"1\":{\"1118\":1,\"1306\":1}}],[\"即通过常用的\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"即指的是使用悲观锁\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"即分区存储到不同\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"即消费者组是逻辑上的一个订阅者\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"即初始标记阶段\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"即新生代使用复制算法\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"即时编译器编译后的代码等数据\",{\"1\":{\"1099\":1,\"1290\":1,\"1388\":1}}],[\"即引用instance指向内存memory时\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"即只有当大多数分片可用时才允许写操作\",{\"1\":{\"1035\":1,\"1239\":1}}],[\"即该字段的distinct或者unique值的数目\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"即它的\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"即spring\",{\"1\":{\"1168\":1,\"1345\":1}}],[\"即stash\",{\"1\":{\"979\":2}}],[\"即scale=960\",{\"1\":{\"155\":1}}],[\"即成功返回结果\",{\"1\":{\"892\":1,\"893\":1}}],[\"即在\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"即在接口方法上使用注解\",{\"1\":{\"835\":1}}],[\"即在一个事务中\",{\"1\":{\"638\":1}}],[\"即告诉\",{\"1\":{\"835\":1}}],[\"即生成maven项目最基本的目录结构\",{\"1\":{\"766\":1,\"767\":1}}],[\"即英属印度洋领地\",{\"1\":{\"652\":1}}],[\"即远程字典服务\",{\"1\":{\"652\":1}}],[\"即没有命中任何索引\",{\"1\":{\"638\":1}}],[\"即列中有限的不同值\",{\"1\":{\"568\":1}}],[\"即列中的值分布广泛\",{\"1\":{\"565\":1}}],[\"即检索不出任何结果\",{\"1\":{\"504\":1}}],[\"即使发送相同的消息\",{\"1\":{\"1454\":1}}],[\"即使开启了二级缓存\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"即使这样\",{\"1\":{\"1102\":1,\"1293\":1}}],[\"即使在\",{\"1\":{\"1072\":1,\"1267\":1}}],[\"即使写数据库发生异常\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"即使分布式缓存挂了\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"即使添加从库\",{\"1\":{\"578\":1}}],[\"即使其中某些条件带有索引\",{\"1\":{\"564\":1}}],[\"即使\",{\"1\":{\"503\":1}}],[\"即使是格式化的日期字符串\",{\"1\":{\"498\":1}}],[\"即使只需要一个字节\",{\"1\":{\"327\":1}}],[\"即空值\",{\"1\":{\"487\":1}}],[\"即每个单词对应的\",{\"1\":{\"478\":1}}],[\"即这个单词在某个文档中的出现次数\",{\"1\":{\"478\":1}}],[\"即子结点的键值或索引总是小于\",{\"1\":{\"417\":1}}],[\"即gi\",{\"1\":{\"392\":1}}],[\"即可在其他项目引入\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"即可获知哪些文档包含某个单词\",{\"1\":{\"477\":1}}],[\"即可\",{\"1\":{\"459\":1,\"900\":1}}],[\"即可以用\",{\"1\":{\"440\":2}}],[\"即可以接受的误判率fpp和元素总个数n\",{\"1\":{\"392\":1}}],[\"即可完成查找\",{\"1\":{\"323\":1}}],[\"即队头和队尾相连\",{\"1\":{\"341\":1}}],[\"即确定要读的数据在哪个磁道\",{\"1\":{\"327\":1}}],[\"即从正上方向下看\",{\"1\":{\"327\":1}}],[\"即\",{\"1\":{\"305\":1,\"655\":1,\"900\":1,\"1044\":1,\"1134\":1,\"1148\":2,\"1245\":1,\"1319\":1,\"1331\":2}}],[\"即内存满了\",{\"1\":{\"224\":1}}],[\"即便当有非leader服务器宕机或新加入\",{\"1\":{\"183\":1}}],[\"即20~30s这10秒钟之间\",{\"1\":{\"158\":1}}],[\"抓取视频的一些帧\",{\"0\":{\"158\":1}}],[\"矩形边缘的厚度默认值4\",{\"1\":{\"157\":1}}],[\"咋办\",{\"1\":{\"157\":1}}],[\"右边包装类型\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"右边\",{\"1\":{\"667\":1}}],[\"右下角\",{\"1\":{\"156\":1}}],[\"右上角\",{\"1\":{\"156\":1}}],[\"左边基本类型\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"左边\",{\"1\":{\"667\":2}}],[\"左边进行函数\",{\"0\":{\"596\":1}}],[\"左右\",{\"1\":{\"319\":1}}],[\"左下角\",{\"1\":{\"156\":1}}],[\"左上角\",{\"1\":{\"156\":1}}],[\"将这个痛点转换成需求\",{\"1\":{\"1502\":1}}],[\"将服务器通道注册到选择器上\",{\"1\":{\"1478\":1}}],[\"将id和版本号发送给zookeeper\",{\"1\":{\"1466\":1}}],[\"将index文件的内容\",{\"1\":{\"979\":1}}],[\"将index之后的元素往前面移动一位\",{\"1\":{\"337\":1}}],[\"将用户的查询语句解析成查询对象\",{\"1\":{\"1460\":1}}],[\"将索引分成多个分片\",{\"1\":{\"1460\":1}}],[\"将索引健的值按照顺序保存在树节点中\",{\"1\":{\"562\":1}}],[\"将商品的属性\",{\"1\":{\"1458\":1}}],[\"将新aof发送给主进程\",{\"1\":{\"1420\":1}}],[\"将新构建的aof发送给主进程\",{\"1\":{\"1420\":1}}],[\"将新的文档增量地添加到索引中\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"将结果响应给用户\",{\"1\":{\"1414\":1}}],[\"将结果集映射为java的对象类型\",{\"1\":{\"838\":1}}],[\"将请求发送给适合的\",{\"1\":{\"1414\":1}}],[\"将请求分发到部署相应项目的\",{\"1\":{\"1093\":1,\"1286\":1}}],[\"将逻辑视图名解析为具体\",{\"1\":{\"1414\":1}}],[\"将循环依赖的\",{\"1\":{\"1412\":1}}],[\"将系统拆分为多个单一职责的服务\",{\"1\":{\"1408\":1}}],[\"将单体应用拆分成职责单一\",{\"1\":{\"1408\":1}}],[\"将整个堆内存分割成多个大小相等的region\",{\"1\":{\"1398\":1}}],[\"将它简单归类为\",{\"1\":{\"1398\":1}}],[\"将清理过程分为并发和stw两个阶段\",{\"1\":{\"1396\":1}}],[\"将eden区中无用的对象清除掉\",{\"1\":{\"1388\":1}}],[\"将oldtable的值赋给newtable\",{\"1\":{\"1380\":1}}],[\"将节点添加到链表尾部\",{\"1\":{\"1380\":1}}],[\"将所有微服务的\",{\"1\":{\"1190\":1,\"1365\":1}}],[\"将所有待比较数值\",{\"1\":{\"427\":1}}],[\"将事务处理的功能编织到拦截的方法中\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"将datasource设置成不同的数据源\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"将delete的next指针指向null\",{\"1\":{\"339\":1}}],[\"将开发者做的事让容器做\",{\"1\":{\"1170\":1,\"1347\":1}}],[\"将面临\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"将运行时间超过该值的所有sql语句都记录到慢查询的日志文件中\",{\"1\":{\"1142\":1,\"1325\":1}}],[\"将pojo映射成数据库中的记录\",{\"1\":{\"1129\":1,\"1314\":1}}],[\"将prev节点的next指针指向add\",{\"1\":{\"339\":1}}],[\"将prev的next指针指向delete的下一个节点\",{\"1\":{\"339\":1}}],[\"将旧副本清除\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"将消息发送到\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"将字节码翻译成底层系统指令\",{\"1\":{\"1100\":1,\"1291\":1}}],[\"将要请求的路径和302重定向的状态码发给客户端浏览器\",{\"1\":{\"1089\":1,\"1282\":1}}],[\"将要排序的元素分配至某些\",{\"1\":{\"424\":1}}],[\"将登陆信息等重要信息存放为session\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"将count值减1\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"将当前线程和一个map绑定\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"将当前文件中所有\",{\"1\":{\"913\":1}}],[\"将前面对象的内容全部拷贝进去\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"将查询请求转发到索引的每个主分片或副本分片中\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"将向协调节点报告成功\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"将缓存可能存在的并行写\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"将缓存堆栈中的对应stash删除\",{\"1\":{\"979\":1}}],[\"将不会包含在\",{\"1\":{\"980\":1}}],[\"将工作区内容\",{\"1\":{\"979\":1}}],[\"将抛出异常\",{\"1\":{\"927\":1}}],[\"将压缩包下载后\",{\"1\":{\"900\":1}}],[\"将我们需要渲染的数据存储传输到对应视图\",{\"1\":{\"895\":1}}],[\"将我看到的故事分享出来\",{\"1\":{\"263\":1}}],[\"将按照下面的顺序来加载\",{\"1\":{\"829\":1}}],[\"将会执行lnitializingbean的afeterpropertiesset\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"将会由\",{\"1\":{\"829\":1}}],[\"将会被忽略\",{\"1\":{\"493\":1}}],[\"将生成的站点文档部署到特定的服务器上\",{\"1\":{\"777\":1}}],[\"将最终的包复制到远程的仓库\",{\"1\":{\"776\":1}}],[\"将最常用作查询条件的列放在索引的前面\",{\"1\":{\"573\":1}}],[\"将包安装至本地仓库\",{\"1\":{\"776\":1}}],[\"将项目打包并安装到本地仓库\",{\"1\":{\"768\":1}}],[\"将线程内存中的\",{\"1\":{\"755\":1}}],[\"将多个\",{\"1\":{\"722\":1}}],[\"将被删除并开始一个新的\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"将被废弃不推荐使用\",{\"1\":{\"711\":1}}],[\"将被共享的值对象的引用计数增一\",{\"1\":{\"698\":1}}],[\"将数据从一个系统传输到另一个系统\",{\"1\":{\"1432\":1}}],[\"将数据库键的值指针指向一个现有的值对象\",{\"1\":{\"698\":1}}],[\"将数据大表拆分成若干数据表组成\",{\"1\":{\"578\":1}}],[\"将\",{\"1\":{\"669\":1,\"721\":1,\"917\":1,\"1148\":1,\"1162\":1,\"1331\":1,\"1342\":1,\"1408\":2,\"1410\":1}}],[\"将哈希表\",{\"1\":{\"668\":1}}],[\"将一个值插入到已存在的列表头部\",{\"1\":{\"667\":1}}],[\"将一个或多个值插入到列表头部\",{\"1\":{\"667\":1}}],[\"将一个表按照字段分成多表\",{\"1\":{\"579\":1}}],[\"将弹出的元素插入到另外一个列表中并返回它\",{\"1\":{\"667\":1}}],[\"将其值设置为\",{\"1\":{\"1418\":1}}],[\"将其读入内存\",{\"1\":{\"1392\":1}}],[\"将其纳入spring容器来管理\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"将其放在运行时数据区\",{\"1\":{\"1100\":1,\"1291\":1}}],[\"将其加一\",{\"1\":{\"666\":1}}],[\"将其与末尾元素进行交换\",{\"1\":{\"417\":1}}],[\"将文件夹重新命名为\",{\"1\":{\"660\":1}}],[\"将热门字段\",{\"1\":{\"579\":1}}],[\"将原来独立的数据库拆分成若干数据库组成\",{\"1\":{\"578\":1}}],[\"将电商数据库拆分为若干独立的数据库\",{\"1\":{\"578\":1}}],[\"将键值换算成新的哈希值\",{\"1\":{\"558\":1}}],[\"将空投代币发送到制定地址\",{\"1\":{\"541\":1}}],[\"将打算发放空投的代币转入空投合约地址\",{\"1\":{\"539\":1}}],[\"将堆顶元素与末尾元素进行交换\",{\"1\":{\"417\":1}}],[\"将堆顶元素9和末尾元素4进行交\",{\"1\":{\"417\":1}}],[\"将待排序序列构造成一个大顶堆\",{\"1\":{\"417\":1}}],[\"将频率作为数组下标\",{\"1\":{\"406\":1}}],[\"将每次执行会改变数据库的命令记录下来\",{\"1\":{\"1420\":1}}],[\"将每个文档中的关键词提取出来\",{\"1\":{\"1464\":1}}],[\"将每个用户以及其对应的什么分数写入进去\",{\"1\":{\"720\":1}}],[\"将每个桶子中的数值按照下一数位的值分配到\",{\"1\":{\"428\":1}}],[\"将每个元素i放在新数组的第c\",{\"1\":{\"411\":1}}],[\"将每个条件分支封装成一个命令对象\",{\"0\":{\"196\":1}}],[\"将每个条件分支封装成一个策略对象\",{\"0\":{\"193\":1}}],[\"将每个条件分支的逻辑封装到不同的函数或方法中\",{\"0\":{\"195\":1}}],[\"将每一个元素移动到对应的桶中\",{\"1\":{\"404\":1}}],[\"将add节点的next指针指向after\",{\"1\":{\"339\":1}}],[\"将位置index的元素赋值\",{\"1\":{\"337\":1}}],[\"将插入位置index的元素和之后的元素往后移动一位\",{\"1\":{\"337\":1}}],[\"将该节点从磁盘读入内存\",{\"1\":{\"320\":1}}],[\"将5的因子分配给两个数\",{\"1\":{\"306\":1}}],[\"将2的因子分配给两个数\",{\"1\":{\"306\":1}}],[\"将简单易用的接口和性能高效\",{\"1\":{\"171\":1}}],[\"将输出格式\",{\"1\":{\"160\":1}}],[\"将输入的1920x1080缩小到960x540输出\",{\"0\":{\"155\":1}}],[\"将从upstream服务器传\",{\"1\":{\"123\":1}}],[\"想象一下\",{\"1\":{\"1438\":1}}],[\"想象你是一名新手java程序员\",{\"1\":{\"1392\":1}}],[\"想请你简单介绍一下\",{\"1\":{\"1408\":1}}],[\"想加深学习的内容\",{\"1\":{\"1406\":1}}],[\"想全面深入理解g1还需要我继续努力\",{\"1\":{\"1398\":1}}],[\"想都撤回\",{\"1\":{\"981\":1}}],[\"想撤回commit\",{\"1\":{\"981\":1}}],[\"想要加入星球\",{\"1\":{\"250\":1}}],[\"想问关于这个团队的一切事情\",{\"1\":{\"170\":1}}],[\"想用h264编码\",{\"1\":{\"152\":1}}],[\"想把文件弄小一点\",{\"1\":{\"151\":1}}],[\"控制逻辑\",{\"1\":{\"1408\":1}}],[\"控制权颠倒过来了\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"控制权都在自己手上\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"控制倒置\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"控制反向\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"控制反转是目标\",{\"1\":{\"1170\":1,\"1347\":1}}],[\"控制反转\",{\"1\":{\"1169\":3,\"1170\":1,\"1346\":3,\"1347\":1}}],[\"控制key的数量\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"控制一个连接池最多有多少个状态为空闲的\",{\"1\":{\"711\":1}}],[\"控制键值排序依据在哪一位\",{\"1\":{\"430\":1}}],[\"控制平均码率\",{\"1\":{\"151\":1}}],[\"控制码率主要还是为了缩小文件大小\",{\"1\":{\"151\":1}}],[\"控制台\",{\"1\":{\"126\":1}}],[\"码率就是\",{\"1\":{\"151\":1}}],[\"码率是什么\",{\"1\":{\"151\":1}}],[\"码率控制对于在线视频比较重要\",{\"1\":{\"151\":1}}],[\"码率控制\",{\"0\":{\"151\":1}}],[\"因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"因为任何时候只能有一个线程访问数据\",{\"1\":{\"1476\":1}}],[\"因为倒排索引可以直接定位到包含关键词的文档\",{\"1\":{\"1464\":1}}],[\"因为需要对数据进行压缩和解压缩操作\",{\"1\":{\"1430\":1}}],[\"因为编译器无法确定它到底是哪种类型\",{\"1\":{\"1424\":1}}],[\"因为string不符合约束\",{\"1\":{\"1424\":1}}],[\"因为<\",{\"1\":{\"1424\":1}}],[\"因为擦除后所有的类型参数都被替换为object类型\",{\"1\":{\"1424\":1}}],[\"因为java在1\",{\"1\":{\"1424\":1}}],[\"因为age键原来不存在\",{\"1\":{\"1418\":1}}],[\"因为构造器是在\",{\"1\":{\"1412\":1}}],[\"因为循环依赖导致一个\",{\"1\":{\"1412\":1}}],[\"因为每个线程都需要获取锁才能访问被修饰的代码\",{\"1\":{\"1480\":2}}],[\"因为每个线程都需要维护自己的变量副本\",{\"1\":{\"1386\":1}}],[\"因为每次测试都要加载配置文件\",{\"1\":{\"891\":1}}],[\"因为每次更新都可能导致索引的重新构建\",{\"1\":{\"565\":1}}],[\"因为redis的惰性删除机制\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"因为redis是基于内存的操作\",{\"1\":{\"1157\":1,\"1337\":1}}],[\"因为是基于内存\",{\"1\":{\"1156\":1,\"1336\":1}}],[\"因为是全限名+方法名的保存和寻找策略\",{\"1\":{\"1132\":1,\"1317\":1}}],[\"因为攻击者无法查看对伪造请求的响应\",{\"1\":{\"1094\":1,\"1287\":1}}],[\"因为封装了许多易用的api\",{\"1\":{\"1074\":1,\"1269\":1}}],[\"因为线程安全的问题\",{\"1\":{\"1072\":1,\"1267\":1}}],[\"因为线程调度机制恢复线程的运行也需要时间\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"因为加锁和解锁自动进行\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"因为矛盾\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"因为泛型在编译阶段就已经被处理成普通的类和方法\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"因为内存地址不同\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"因为内节点并不存储\",{\"1\":{\"322\":1}}],[\"因为from越大\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"因为分片\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"因为先淘汰缓存\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"因为此时\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"因为业务\",{\"1\":{\"863\":1}}],[\"因为再dao\",{\"1\":{\"824\":1}}],[\"因为由容器已经提供\",{\"1\":{\"769\":1}}],[\"因为存储日活数据所需要的内存只有\",{\"1\":{\"722\":1}}],[\"因为官方在高版本\",{\"1\":{\"711\":1}}],[\"因为链表表头节点的前置节点和表尾节点的后置节点都指向\",{\"1\":{\"685\":1}}],[\"因为游标的效率较差\",{\"0\":{\"607\":1}}],[\"因为首先变长字段存储空间小\",{\"0\":{\"602\":1}}],[\"因为数据还是始终限制在一台服务器\",{\"1\":{\"580\":1}}],[\"因为数据库可以更有效地使用这些列来过滤数据\",{\"1\":{\"573\":1}}],[\"因为数据库可能需要读取多个不连续的页面来满足查询条件\",{\"1\":{\"571\":1}}],[\"因为索引的设计需要平衡查询性能和存储空间的利用\",{\"1\":{\"567\":1}}],[\"因为索引可以帮助快速检查重复的数据\",{\"1\":{\"565\":1}}],[\"因为相邻的数据在物理存储上也是相邻的\",{\"1\":{\"566\":1}}],[\"因为这样能够提高根据\",{\"1\":{\"1080\":1,\"1275\":1}}],[\"因为这样的索引可能不会带来显著的性能提升\",{\"1\":{\"573\":1}}],[\"因为这样的索引可以更有效地缩小搜索范围\",{\"1\":{\"565\":1}}],[\"因为这个原因\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"因为这个信息对于搜索系统来说并非必需的\",{\"1\":{\"478\":1}}],[\"因为null值无法与其他值进行比较或匹配\",{\"1\":{\"564\":1}}],[\"因为它可以访问私有属性和方法\",{\"1\":{\"1468\":2}}],[\"因为它需要在运行时进行类型检查和方法调用\",{\"1\":{\"1468\":1,\"1474\":1}}],[\"因为它看不到\",{\"1\":{\"1382\":1}}],[\"因为它们已经创建好了\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"因为它们需要在更细的粒度上管理锁\",{\"1\":{\"627\":1}}],[\"因为它不依赖于数据库的锁定机制\",{\"1\":{\"642\":1}}],[\"因为它允许高并发\",{\"1\":{\"632\":1}}],[\"因为它更有利于磁盘的顺序访问\",{\"1\":{\"562\":1}}],[\"因为它的非叶子节点不存储数据\",{\"1\":{\"317\":1}}],[\"因为哈希碰撞会导致性能下降\",{\"1\":{\"562\":1}}],[\"因为哈希算法会导致数据随机分布\",{\"1\":{\"562\":1}}],[\"因为他是按照顺序存储数据\",{\"1\":{\"562\":1}}],[\"因为他知道的最多\",{\"1\":{\"170\":1}}],[\"因为可以直接计算出存储位置\",{\"1\":{\"562\":1}}],[\"因为可能会出现两个key值经过k个hash函数之后\",{\"1\":{\"386\":1,\"392\":1}}],[\"因为有datacenterid和workerid来做区分\",{\"1\":{\"440\":1}}],[\"因为范围太小\",{\"1\":{\"435\":1}}],[\"因为下标为0的只有一个元素\",{\"1\":{\"405\":1}}],[\"因为不存在机械操作\",{\"1\":{\"326\":1}}],[\"因为\",{\"1\":{\"320\":1,\"564\":1,\"600\":1,\"698\":1,\"989\":1,\"1004\":1,\"1213\":1,\"1424\":2,\"1446\":3,\"1476\":1}}],[\"因为我们要引入各种各样的依赖\",{\"1\":{\"907\":1}}],[\"因为我们需要在有限的数字中寻找可能的组合\",{\"1\":{\"304\":1}}],[\"因为我自己做技术自媒体这么久\",{\"1\":{\"263\":1}}],[\"因为公司十点以后走\",{\"1\":{\"270\":1}}],[\"因为在技术发展早期是没有那么多低门槛的使用方式的\",{\"1\":{\"263\":1}}],[\"因为在线视频需要考虑其能提供的带宽\",{\"1\":{\"151\":1}}],[\"因为谁都知道\",{\"1\":{\"263\":1}}],[\"因此也被称为gc堆\",{\"1\":{\"1388\":1}}],[\"因此也没有电话号码\",{\"1\":{\"589\":1}}],[\"因此需要进入\",{\"1\":{\"1196\":1,\"1369\":1}}],[\"因此需要特定的命令解析器执行引擎\",{\"1\":{\"1100\":1,\"1291\":1}}],[\"因此支持国际化\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"因此开发中在满足需求的前提下\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"因此在进行完业务操作需要实际更新数据的最后一步再去拿一下锁就好\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"因此如果在\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"因此必须在事务中使用\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"因此达到锁的效果\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"因此其他并发执行的\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"因此要先确保获取锁成功再进行业务操作\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"因此为了修正并发标记期间\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"因此为了提高效率\",{\"1\":{\"327\":1}}],[\"因此该区更关注的是数据的存储\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"因此大小不固定\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"因此大大提升了系统复杂度\",{\"1\":{\"581\":1}}],[\"因此性能慢些\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"因此拦截器的使用具有更大的弹性\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"因此能使用\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"因此是一个有效请求一个线程\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"因此会直接从cache中取已经存在的对象\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"因此会升级为表锁\",{\"1\":{\"637\":1}}],[\"因此不能被删除或者改动以展示其变更\",{\"1\":{\"1033\":1,\"1237\":1}}],[\"因此每一条指令的内容\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"因此每个表还是竞争同一个物理机的cpu\",{\"1\":{\"580\":1}}],[\"因此mybatis提供了接口的动态代理\",{\"1\":{\"824\":1}}],[\"因此它的应用范围受到一定的限制\",{\"1\":{\"1474\":1}}],[\"因此它的查询时间固定为\",{\"1\":{\"317\":1}}],[\"因此它在事务开始时就对数据对象加锁\",{\"1\":{\"633\":1}}],[\"因此它允许多个事务同时进行\",{\"1\":{\"632\":1}}],[\"因此并发性较低\",{\"1\":{\"628\":1}}],[\"因此粒度较小\",{\"1\":{\"624\":1}}],[\"因此粒度较大\",{\"1\":{\"624\":1}}],[\"因此io效率较低\",{\"1\":{\"579\":1}}],[\"因此对于具有局部性的程序来说\",{\"1\":{\"327\":1}}],[\"因此磁盘i\",{\"1\":{\"327\":1}}],[\"因此索引往往以索引文件的形式存储的磁盘上\",{\"1\":{\"324\":1}}],[\"因此安装时间相对较长\",{\"1\":{\"243\":1}}],[\"因此可以获得更高的性能和效率\",{\"1\":{\"243\":1}}],[\"因此可以借助于\",{\"1\":{\"27\":1}}],[\"因此建议加上日志开关判断\",{\"1\":{\"223\":1}}],[\"因此我们需要另一个关键字volatile保证对象实例化过程中的顺序性\",{\"1\":{\"93\":1}}],[\"因此\",{\"1\":{\"24\":1,\"123\":1,\"475\":1,\"561\":1,\"574\":1,\"829\":1,\"991\":1,\"1072\":1,\"1123\":1,\"1169\":1,\"1267\":1,\"1311\":1,\"1346\":1,\"1392\":2,\"1468\":1,\"1474\":1}}],[\"剪辑原视频input\",{\"1\":{\"146\":1}}],[\"掐头去尾\",{\"0\":{\"146\":1}}],[\"开销更小\",{\"1\":{\"1476\":1}}],[\"开销更大\",{\"1\":{\"1476\":1}}],[\"开心能听到你如此谦逊好学的态度\",{\"1\":{\"1398\":1}}],[\"开篇\",{\"0\":{\"1378\":1}}],[\"开往\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"开源的java项目依赖的构件都可以在这里下载到\",{\"1\":{\"768\":1}}],[\"开源在\",{\"1\":{\"660\":1}}],[\"开放性题目\",{\"1\":{\"984\":1}}],[\"开放性问题\",{\"1\":{\"573\":1}}],[\"开放源码的分布式应用程序协调服务\",{\"1\":{\"171\":1}}],[\"开头的模式匹配意味着匹配的字符串可以在任何位置\",{\"1\":{\"564\":1}}],[\"开头时\",{\"1\":{\"564\":1}}],[\"开头\",{\"1\":{\"564\":1}}],[\"开发用户中心\",{\"1\":{\"1492\":1}}],[\"开发者也可以自定义\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"开发者友好\",{\"1\":{\"242\":1}}],[\"开发时只需要关注sql语句本身\",{\"1\":{\"1129\":1,\"1314\":1}}],[\"开发时常用\",{\"1\":{\"927\":1}}],[\"开发即可\",{\"1\":{\"900\":1}}],[\"开发团队达成一致约定\",{\"1\":{\"893\":1}}],[\"开发环境\",{\"0\":{\"871\":1}}],[\"开发\",{\"1\":{\"834\":1,\"1408\":1,\"1492\":1,\"1502\":1,\"1520\":1}}],[\"开发人员在使用\",{\"1\":{\"1408\":2}}],[\"开发人员不需要编写原生态sql\",{\"1\":{\"1129\":1,\"1314\":1}}],[\"开发人员信息等\",{\"1\":{\"762\":1}}],[\"开发人员的主要任务应该是关注业务逻辑并去实现它\",{\"1\":{\"761\":1}}],[\"开发日志\",{\"1\":{\"219\":1}}],[\"开关判断逻辑通常放在日志工具类中\",{\"1\":{\"223\":1}}],[\"开始写我们的代码\",{\"1\":{\"892\":1}}],[\"开始\",{\"1\":{\"482\":1,\"864\":1,\"928\":1}}],[\"开始阅读\",{\"1\":{\"233\":1}}],[\"开始处理非会员逻辑\",{\"1\":{\"228\":1}}],[\"开始处理会员逻辑\",{\"1\":{\"228\":1}}],[\"开始选举\",{\"1\":{\"183\":1}}],[\"开始时间截\",{\"1\":{\"441\":2}}],[\"开始时间\",{\"1\":{\"144\":1}}],[\"开启组件扫描\",{\"1\":{\"1402\":1}}],[\"开启springboot的自动配置\",{\"1\":{\"1402\":1}}],[\"开启springmvc注解模式\",{\"1\":{\"882\":2}}],[\"开启事务功能\",{\"1\":{\"1402\":1}}],[\"开启某个功能\",{\"1\":{\"1402\":1}}],[\"开启了自动配置功能\",{\"1\":{\"1185\":1,\"1360\":1}}],[\"开启\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"开启打印\",{\"1\":{\"1108\":1,\"1299\":1}}],[\"开启驼峰命名转换\",{\"1\":{\"880\":2}}],[\"开启驼峰匹配\",{\"1\":{\"830\":1,\"853\":1}}],[\"开启二级缓存\",{\"1\":{\"853\":3}}],[\"开启mapper接口的包扫描\",{\"1\":{\"845\":1}}],[\"开启主键回写\",{\"1\":{\"826\":1,\"839\":1}}],[\"开启外网访问\",{\"1\":{\"736\":1}}],[\"开启限制ip连接数的时候需要使用\",{\"1\":{\"123\":1}}],[\"开启gzip\",{\"1\":{\"123\":1}}],[\"开启目录列表访问\",{\"1\":{\"123\":1}}],[\"开启高效文件传输模式\",{\"1\":{\"123\":1}}],[\"前端控制器\",{\"1\":{\"1414\":1}}],[\"前提是他们要被同一个类加载器加载\",{\"1\":{\"1106\":1,\"1297\":1}}],[\"前提是字符串的取值为\",{\"1\":{\"499\":1}}],[\"前后起作用\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"前者针对某一\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"前置通知\",{\"1\":{\"752\":1,\"1402\":1}}],[\"前置节点\",{\"1\":{\"684\":1}}],[\"前文推荐阅读\",{\"1\":{\"704\":1}}],[\"前进指针\",{\"1\":{\"691\":1}}],[\"前\",{\"1\":{\"406\":1,\"1006\":1,\"1215\":1}}],[\"前面我们已经讲了很多了\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"前面这几个大家一定很熟悉\",{\"1\":{\"907\":1}}],[\"前面加上\",{\"1\":{\"755\":1}}],[\"前面讲了redis入门篇\",{\"1\":{\"710\":1}}],[\"前面讲了计数排序\",{\"1\":{\"423\":1}}],[\"前面已经更新过一部分\",{\"1\":{\"584\":1}}],[\"前面写了一个简单的demo\",{\"1\":{\"392\":1}}],[\"前面说过磁盘是分\",{\"1\":{\"323\":1}}],[\"前面的\",{\"1\":{\"139\":1}}],[\"前几天刚过了新婚一周年\",{\"1\":{\"265\":1}}],[\"前沿技术分享\",{\"1\":{\"249\":1}}],[\"前沿技术\",{\"1\":{\"242\":1}}],[\"前言引入\",{\"0\":{\"710\":1}}],[\"前言\",{\"0\":{\"126\":1,\"138\":1,\"167\":1,\"218\":1,\"295\":1,\"400\":1,\"421\":1,\"434\":1,\"535\":1,\"556\":1,\"615\":1,\"650\":1,\"676\":1,\"695\":1,\"704\":1,\"732\":1,\"745\":1,\"795\":1,\"935\":1,\"970\":1},\"1\":{\"727\":1}}],[\"转而执行接口方法所对应的mappedstatement所代表的sql\",{\"1\":{\"1132\":1,\"1317\":1}}],[\"转而去做别的事情\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"转发\",{\"1\":{\"1089\":1,\"1093\":1,\"1282\":1,\"1286\":1}}],[\"转发和重定向的联系和区别\",{\"0\":{\"1089\":1,\"1282\":1}}],[\"转移多个提交\",{\"1\":{\"980\":1}}],[\"转移到当前分支\",{\"1\":{\"980\":1}}],[\"转化成单位年则是\",{\"1\":{\"440\":1}}],[\"转化为数组\",{\"1\":{\"337\":1}}],[\"转流\",{\"1\":{\"163\":1}}],[\"转换为小写等\",{\"1\":{\"1470\":1}}],[\"转换为布尔类型存储\",{\"1\":{\"499\":1}}],[\"转换以及流化音视频的完整解决方案\",{\"1\":{\"139\":1}}],[\"转换数字音频\",{\"1\":{\"139\":1}}],[\"转载更没有限制\",{\"1\":{\"114\":1}}],[\"转载请在文章头部注明出处\",{\"1\":{\"53\":1}}],[\"转载说明\",{\"1\":{\"53\":1}}],[\"官话来说就是\",{\"1\":{\"677\":1}}],[\"官网下载并安装适合你操作系统的docker版本\",{\"1\":{\"1512\":1}}],[\"官网下载地址\",{\"1\":{\"706\":1}}],[\"官网参考\",{\"1\":{\"484\":1}}],[\"官网\",{\"1\":{\"289\":1}}],[\"官网地址\",{\"1\":{\"139\":1}}],[\"官方提供了\",{\"1\":{\"1418\":1}}],[\"官方存储库中没有广泛的软件可用性\",{\"1\":{\"240\":1}}],[\"官方存储库中的软件较少\",{\"1\":{\"240\":1}}],[\"官方定义是这样的\",{\"1\":{\"129\":1}}],[\"官方文档\",{\"1\":{\"129\":1,\"802\":1}}],[\"官方网站\",{\"1\":{\"1\":1}}],[\"读写锁等\",{\"1\":{\"1480\":2}}],[\"读写比例\",{\"1\":{\"1476\":1}}],[\"读写分离和分库分表\",{\"1\":{\"588\":1}}],[\"读写分离\",{\"1\":{\"583\":1,\"1416\":1}}],[\"读次数多\",{\"1\":{\"1476\":1}}],[\"读操作\",{\"1\":{\"1424\":1}}],[\"读\",{\"1\":{\"1424\":1}}],[\"读请求转发到slave\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"读已提交\",{\"1\":{\"1144\":1,\"1177\":1,\"1327\":1,\"1354\":1}}],[\"读未提交\",{\"1\":{\"1144\":1,\"1177\":1,\"1327\":1,\"1354\":1}}],[\"读到了并一定最终存在的数据\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"读到\",{\"1\":{\"1133\":1,\"1318\":1}}],[\"读到这里我们对布隆过滤器有了一定了解\",{\"1\":{\"389\":1}}],[\"读数据\",{\"1\":{\"999\":1,\"1208\":1}}],[\"读数据时\",{\"1\":{\"999\":1,\"1208\":1}}],[\"读的速度是\",{\"1\":{\"654\":1,\"1418\":1}}],[\"读多写少\",{\"1\":{\"632\":1}}],[\"读取注解\",{\"1\":{\"1402\":1}}],[\"读取其他事务已经提交的数据\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"读取其他事务未提交的数据\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"读取\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"读取数据的时候配合\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"读取数据库\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"读取阶段\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"读取缓存\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"读取配置文件\",{\"1\":{\"809\":1,\"810\":1,\"820\":1,\"826\":1}}],[\"读取archetype\",{\"1\":{\"766\":1,\"767\":1}}],[\"读取实际的数据行\",{\"1\":{\"560\":1}}],[\"读取帧数需要文件解码\",{\"1\":{\"160\":1}}],[\"读完本篇\",{\"1\":{\"138\":1}}],[\"读书确实是推动人类社会进化的重要力量\",{\"1\":{\"56\":1}}],[\"硌牙\",{\"1\":{\"138\":1}}],[\"执行写命令\",{\"1\":{\"1422\":1}}],[\"执行映射语句并得到结果\",{\"1\":{\"1416\":1}}],[\"执行相关逻辑\",{\"1\":{\"1402\":1}}],[\"执行相应逻辑\",{\"1\":{\"1402\":1}}],[\"执行类构造器\",{\"1\":{\"1392\":1}}],[\"执行任务\",{\"1\":{\"1384\":1}}],[\"执行beanpostprocessor的后置处理方法postprocessafterinitialization\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"执行beanpostprocessor的前置处理方法postprocessbeforelnitialization\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"执行用户自定义的初始化方法\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"执行aware接口的方法\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"执行的拦截了\",{\"1\":{\"1416\":1}}],[\"执行的时候将被触发\",{\"1\":{\"1147\":1,\"1330\":1}}],[\"执行的sql语句\",{\"1\":{\"1132\":1,\"1317\":1}}],[\"执行relay\",{\"1\":{\"1143\":1,\"1326\":1}}],[\"执行重写后的sql\",{\"1\":{\"1138\":1,\"1323\":1}}],[\"执行器\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"执行原理\",{\"0\":{\"1134\":1,\"1319\":1}}],[\"执行引擎\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"执行起来会在同步上消耗一定的性能\",{\"1\":{\"1075\":1,\"1270\":1}}],[\"执行完commit后\",{\"1\":{\"981\":1}}],[\"执行存储时\",{\"1\":{\"979\":1}}],[\"执行命令\",{\"1\":{\"975\":1}}],[\"执行命令java\",{\"1\":{\"913\":1}}],[\"执行一遍\",{\"1\":{\"959\":1}}],[\"执行一些需要在生成站点文档之后完成的工作\",{\"1\":{\"777\":1}}],[\"执行一些需要在生成站点文档之前完成的工作\",{\"1\":{\"777\":1}}],[\"执行一些需要在clean之后立刻完成的工作\",{\"1\":{\"775\":1}}],[\"执行一些需要在clean之前完成的工作\",{\"1\":{\"775\":1}}],[\"执行一些更新操作\",{\"1\":{\"618\":1}}],[\"执行预约操作\",{\"1\":{\"893\":1}}],[\"执行queryuserall\",{\"1\":{\"825\":1}}],[\"执行查询\",{\"1\":{\"800\":1}}],[\"执行后结果\",{\"1\":{\"766\":1,\"767\":1}}],[\"执行以下cmd命令\",{\"1\":{\"766\":1,\"767\":1}}],[\"执行时间过长等\",{\"1\":{\"1416\":1}}],[\"执行时间\",{\"1\":{\"752\":1}}],[\"执行时长\",{\"1\":{\"752\":1}}],[\"执行方法\",{\"1\":{\"752\":1}}],[\"执行结果\",{\"1\":{\"133\":1}}],[\"执行\",{\"1\":{\"133\":1,\"755\":1,\"852\":1,\"878\":1,\"1087\":1,\"1122\":1,\"1280\":1,\"1310\":1,\"1414\":2,\"1422\":1}}],[\"卸载该类的字节码\",{\"1\":{\"1392\":1}}],[\"卸载旧版本\",{\"1\":{\"915\":1}}],[\"卸载\",{\"1\":{\"131\":1,\"1392\":1}}],[\"检测到死锁后\",{\"1\":{\"644\":1}}],[\"检测是否安装成功\",{\"1\":{\"126\":1}}],[\"检查加载的\",{\"1\":{\"1105\":1,\"1296\":1}}],[\"检查\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"检查项目b的依赖包\",{\"1\":{\"771\":1}}],[\"检查并更新\",{\"1\":{\"636\":1}}],[\"检查版本号或时间戳是否与读取时的值相同\",{\"1\":{\"636\":1,\"642\":1}}],[\"检查节点状态\",{\"0\":{\"516\":1}}],[\"检查集群状态\",{\"0\":{\"515\":1}}],[\"检查位置是否合法\",{\"1\":{\"338\":1,\"339\":1}}],[\"检查结果是否有效\",{\"1\":{\"306\":1}}],[\"检查一个整数是否包含数字0\",{\"1\":{\"306\":1}}],[\"检查是否可以将复杂的条件表达式分解为更简单的部分\",{\"0\":{\"198\":1}}],[\"检查工具是否安装\",{\"1\":{\"132\":1}}],[\"检查状态\",{\"1\":{\"131\":1}}],[\"搭建项目的脚手架\",{\"1\":{\"1502\":1}}],[\"搭建项目\",{\"1\":{\"1502\":1}}],[\"搭建项目框架\",{\"1\":{\"1502\":1}}],[\"搭建网站这种事\",{\"1\":{\"969\":1}}],[\"搭建\",{\"0\":{\"131\":1,\"291\":1,\"296\":1},\"1\":{\"296\":1}}],[\"服务的\",{\"1\":{\"1520\":1}}],[\"服务治理\",{\"1\":{\"1408\":1}}],[\"服务实例\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"服务节点或\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"服务阶段\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"服务端的一颗子树相对应\",{\"1\":{\"1202\":1,\"1375\":1}}],[\"服务端在很多组件中都维护了分区级别的缓存\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"服务端都会对应一个处理线程\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"服务端密码\",{\"1\":{\"711\":1}}],[\"服务及内存数据库管理\",{\"1\":{\"657\":1}}],[\"服务\",{\"1\":{\"657\":1,\"1099\":1,\"1290\":1,\"1520\":1}}],[\"服务号一小个群体\",{\"1\":{\"263\":1}}],[\"服务发现\",{\"1\":{\"130\":1}}],[\"服务器内部错误\",{\"1\":{\"1494\":1}}],[\"服务器设为从服务器\",{\"1\":{\"1422\":1}}],[\"服务器设为主服务器\",{\"1\":{\"1422\":1}}],[\"服务器作为数据源同步给集群中的其他角色服务器\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"服务器作为数据源同步给集群中的多台\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"服务器上不同\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"服务器上事务的执行发生在\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"服务器中的大多数可以执行会话请求后\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"服务器开始接收客户端的事务请求生成事物提案来进行事务请求处理\",{\"1\":{\"1199\":1,\"1372\":1}}],[\"服务器开始与新的\",{\"1\":{\"1199\":1,\"1372\":1}}],[\"服务器完成数据同步之后\",{\"1\":{\"1199\":1,\"1372\":1}}],[\"服务器进行数据同步\",{\"1\":{\"1199\":1,\"1372\":1}}],[\"服务器保持正常通信时\",{\"1\":{\"1199\":1,\"1372\":1}}],[\"服务器具有四种状态\",{\"1\":{\"1196\":1,\"1369\":1}}],[\"服务器端需要使用的内存就越多\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"服务器端的跳转\",{\"1\":{\"1089\":1,\"1282\":1}}],[\"服务器推送\",{\"1\":{\"1095\":1,\"1288\":1}}],[\"服务器向客户端发出确认取消信息\",{\"1\":{\"1091\":1,\"1284\":1}}],[\"服务器向客户端返回一个响应\",{\"1\":{\"1091\":1,\"1284\":1}}],[\"服务器向客户端返回一个响应告诉客户端收到了请求\",{\"1\":{\"1091\":1,\"1284\":1}}],[\"服务器会调用\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"服务器调用\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"服务器创建针对此次请求的一个\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"服务器创建一个servlet实例\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"服务器启动之后\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"服务器启动时期的leader选举\",{\"1\":{\"183\":1}}],[\"服务器可要以处理常见的\",{\"1\":{\"990\":1}}],[\"服务器的话\",{\"1\":{\"990\":1}}],[\"服务器在执行某些命令之前\",{\"1\":{\"699\":1}}],[\"服务器就会使用这些共享对象\",{\"1\":{\"698\":1}}],[\"服务器环境\",{\"0\":{\"456\":1}}],[\"服务器运行时期的leader选举\",{\"1\":{\"183\":1}}],[\"服务器运行期间无法和leader保持连接\",{\"1\":{\"183\":1}}],[\"服务器都会统计投票信息\",{\"1\":{\"183\":1}}],[\"服务器都需要将别人的投票和自己的投票进行pk\",{\"1\":{\"183\":1}}],[\"服务器初始化启动\",{\"1\":{\"183\":1}}],[\"服务器还没有收到客户端的返回信息\",{\"1\":{\"174\":1}}],[\"服务器名字的hash表大小\",{\"1\":{\"123\":1}}],[\"服务器\",{\"1\":{\"107\":1,\"174\":1,\"990\":2,\"1093\":1,\"1116\":1,\"1199\":2,\"1200\":2,\"1286\":1,\"1304\":1,\"1372\":2,\"1373\":2,\"1420\":1}}],[\"完美\",{\"1\":{\"1446\":1}}],[\"完整的例子\",{\"0\":{\"826\":1}}],[\"完整增删查改操作\",{\"0\":{\"815\":1}}],[\"完整代码地址\",{\"1\":{\"895\":1}}],[\"完整代码\",{\"1\":{\"810\":1}}],[\"完全实例化后\",{\"1\":{\"1412\":1}}],[\"完全免费提供\",{\"1\":{\"1378\":1}}],[\"完全由操作系统来完成请求的处理\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"完全正确\",{\"1\":{\"755\":1}}],[\"完全拷贝shard的内容\",{\"1\":{\"475\":1}}],[\"完全可以\",{\"1\":{\"115\":1}}],[\"完成这一步就要开始编写代码\",{\"1\":{\"1502\":1}}],[\"完成\",{\"1\":{\"1422\":1}}],[\"完成逻辑判断和动态拼接\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"完成最后任务\",{\"1\":{\"1061\":3,\"1259\":3}}],[\"完成子对象的自动映射\",{\"1\":{\"856\":1,\"857\":1}}],[\"完成子对象的映射\",{\"1\":{\"856\":1,\"857\":1}}],[\"完成之后\",{\"1\":{\"404\":1}}],[\"完成后\",{\"1\":{\"126\":1}}],[\"图4\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"图3\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"图2\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"图1中描述的就是这样的一个齿轮组\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"图1\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"图文并茂\",{\"1\":{\"944\":1}}],[\"图书实体\",{\"1\":{\"888\":1}}],[\"图书名称\",{\"1\":{\"887\":1,\"888\":1}}],[\"图书id\",{\"1\":{\"887\":2,\"888\":2,\"892\":1}}],[\"图书表\",{\"1\":{\"887\":2}}],[\"图书管理系统\",{\"0\":{\"886\":1}}],[\"图的典型应用\",{\"0\":{\"374\":1}}],[\"图的遍历\",{\"0\":{\"373\":1}}],[\"图的实现\",{\"0\":{\"372\":1}}],[\"图的定义和基本概念\",{\"0\":{\"371\":1}}],[\"图\",{\"0\":{\"370\":1}}],[\"图7是磁盘结构的示意图\",{\"1\":{\"327\":1}}],[\"图6是磁盘的整体结构示意图\",{\"1\":{\"327\":1}}],[\"图5展示了一个4\",{\"1\":{\"326\":1}}],[\"图标\",{\"1\":{\"126\":1}}],[\"图片二十二\",{\"1\":{\"859\":1}}],[\"图片二十一\",{\"1\":{\"858\":1}}],[\"图片十九\",{\"1\":{\"855\":1}}],[\"图片十八\",{\"1\":{\"853\":1}}],[\"图片十七\",{\"1\":{\"853\":1}}],[\"图片十六\",{\"1\":{\"852\":1}}],[\"图片十三\",{\"1\":{\"844\":1}}],[\"图片十二\",{\"1\":{\"844\":1}}],[\"图片十一\",{\"1\":{\"833\":1}}],[\"图片十\",{\"1\":{\"831\":1}}],[\"图片九\",{\"1\":{\"830\":1}}],[\"图片八\",{\"1\":{\"828\":1}}],[\"图片七\",{\"1\":{\"826\":1}}],[\"图片6\",{\"1\":{\"825\":1}}],[\"图片五\",{\"1\":{\"825\":1}}],[\"图片四\",{\"1\":{\"821\":1}}],[\"图片三\",{\"1\":{\"819\":1}}],[\"图片缓存时间设置\",{\"1\":{\"123\":1}}],[\"图片引入\",{\"1\":{\"43\":1}}],[\"图片增强\",{\"0\":{\"35\":1}}],[\"启动命令\",{\"1\":{\"1514\":1}}],[\"启动类加载器\",{\"1\":{\"1392\":1}}],[\"启动的程序已经构造完成\",{\"1\":{\"1187\":1,\"1362\":1}}],[\"启动自动配置\",{\"1\":{\"1184\":1,\"1359\":1}}],[\"启动器自动依赖其他组件\",{\"1\":{\"1182\":1,\"1357\":1}}],[\"启动springboot\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"启动springboot应用\",{\"1\":{\"948\":1}}],[\"启动容器\",{\"1\":{\"1020\":1,\"1226\":1}}],[\"启动grafana\",{\"1\":{\"951\":1}}],[\"启动prometheus\",{\"1\":{\"950\":1}}],[\"启动成功后\",{\"1\":{\"895\":1}}],[\"启动界面如下\",{\"1\":{\"706\":1}}],[\"启动方式参考上文\",{\"1\":{\"661\":1}}],[\"启动\",{\"0\":{\"175\":1,\"460\":1,\"737\":1},\"1\":{\"126\":3,\"131\":1,\"175\":1,\"461\":1}}],[\"启用是需要额外的配置\",{\"1\":{\"1195\":1,\"1368\":1}}],[\"启用selinux默认情况下提供强大的安全特性和频繁的更新\",{\"1\":{\"242\":1}}],[\"启用反向代理\",{\"1\":{\"123\":1}}],[\"启用gzip压缩的最小文件\",{\"1\":{\"123\":1}}],[\"预测分析\",{\"1\":{\"1398\":1}}],[\"预编译处理\",{\"1\":{\"1131\":1,\"1316\":1}}],[\"预编译的方式preparedstatement\",{\"1\":{\"826\":1}}],[\"预热对应的数据到缓存中\",{\"1\":{\"1008\":1,\"1217\":1}}],[\"预约业务异常\",{\"1\":{\"892\":1}}],[\"预约业务异常类\",{\"1\":{\"892\":1}}],[\"预约未知错误异常\",{\"1\":{\"892\":1}}],[\"预约失败的构造器\",{\"1\":{\"892\":1}}],[\"预约成功的构造器\",{\"1\":{\"892\":1}}],[\"预约成功对象\",{\"1\":{\"892\":1}}],[\"预约成功\",{\"1\":{\"892\":1,\"893\":2}}],[\"预约图书\",{\"1\":{\"893\":1}}],[\"预约图书实体\",{\"1\":{\"888\":1}}],[\"预约图书表\",{\"1\":{\"887\":2}}],[\"预约时间\",{\"1\":{\"887\":1,\"888\":1}}],[\"预防和解决缓存雪崩的问题\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"预防冲突\",{\"1\":{\"633\":1}}],[\"预防一个工作进程在传递文件时阻塞太长\",{\"1\":{\"123\":1}}],[\"预读的长度一般为页\",{\"1\":{\"327\":1}}],[\"预读可以提高i\",{\"1\":{\"327\":1}}],[\"预加载\",{\"0\":{\"88\":1},\"1\":{\"88\":1}}],[\"代价太大\",{\"1\":{\"1398\":1}}],[\"代替了cms收集器\",{\"1\":{\"1398\":1}}],[\"代替\",{\"0\":{\"598\":1,\"602\":1,\"605\":1},\"1\":{\"1149\":1,\"1332\":1}}],[\"代币\",{\"1\":{\"537\":1}}],[\"代码逆向生成工具\",{\"1\":{\"1507\":1}}],[\"代码评审\",{\"1\":{\"1502\":2}}],[\"代码写的很好\",{\"1\":{\"1478\":1}}],[\"代码示例\",{\"1\":{\"1394\":1}}],[\"代码转换成字节码\",{\"1\":{\"1100\":1,\"1291\":1}}],[\"代码复杂度增大\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"代码维护复杂\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"代码维护简单\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"代码的实现\",{\"0\":{\"1001\":1,\"1210\":1}}],[\"代码库就变成了下面的样子\",{\"1\":{\"980\":1}}],[\"代码仓库有master和feature两个分支\",{\"1\":{\"980\":1}}],[\"代码中用驼峰式\",{\"1\":{\"787\":1}}],[\"代码中循环写入\",{\"1\":{\"786\":1}}],[\"代码➕案例\",{\"0\":{\"785\":1}}],[\"代码会被编译\",{\"1\":{\"776\":1}}],[\"代码3\",{\"1\":{\"755\":1}}],[\"代码块\",{\"1\":{\"755\":1}}],[\"代码讲解\",{\"0\":{\"747\":1}}],[\"代码开源协议\",{\"1\":{\"541\":1}}],[\"代码详解\",{\"0\":{\"541\":1}}],[\"代码解析\",{\"0\":{\"540\":1}}],[\"代码基于\",{\"1\":{\"430\":1}}],[\"代码是基于\",{\"1\":{\"417\":1}}],[\"代码逻辑很好理解\",{\"1\":{\"405\":1}}],[\"代码\",{\"0\":{\"405\":1,\"413\":1,\"429\":1}}],[\"代码在$zookeeper\",{\"1\":{\"171\":1}}],[\"代表一个未知的类型\",{\"1\":{\"1424\":1}}],[\"代表当前是一个配置类\",{\"1\":{\"1184\":1,\"1359\":1}}],[\"代表即将要写入消息的偏移量\",{\"1\":{\"1118\":1,\"1306\":1}}],[\"代表这个日志文件可以消费的区间\",{\"1\":{\"1118\":1,\"1306\":1}}],[\"代表这个日志文件的开始\",{\"1\":{\"1118\":1,\"1306\":1}}],[\"代表切点名称\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"代表了一个链接\",{\"1\":{\"991\":1}}],[\"代表了在文档集合中有多少个文档包含某个单词\",{\"1\":{\"478\":1}}],[\"代表了数列中对应整数的出现次数\",{\"1\":{\"412\":1}}],[\"代表的声音索相号\",{\"1\":{\"162\":1}}],[\"代表的屏幕索引号\",{\"1\":{\"162\":1}}],[\"代表的是什么\",{\"1\":{\"121\":1}}],[\"代表\",{\"1\":{\"139\":1,\"1114\":1,\"1302\":1}}],[\"代理类的字节码中包含了对被代理对象的引用\",{\"1\":{\"1474\":1}}],[\"代理类的生成过程是通过字节码生成器来实现的\",{\"1\":{\"1474\":1}}],[\"代理\",{\"1\":{\"1444\":1}}],[\"代理循环依赖\",{\"1\":{\"1412\":1}}],[\"代理模式等\",{\"1\":{\"1408\":1}}],[\"代理模式\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"代理对象proxy会拦截接口方法\",{\"1\":{\"1132\":1,\"1317\":1}}],[\"代理接收超时\",{\"1\":{\"123\":1}}],[\"代理发送超时\",{\"1\":{\"123\":1}}],[\"代理连接超时\",{\"1\":{\"123\":1}}],[\"都做旧数组到新数组的迁移工作\",{\"1\":{\"1446\":1}}],[\"都重新扩容了数组\",{\"1\":{\"1446\":1}}],[\"都有哪些生命周期阶段\",{\"1\":{\"1410\":1}}],[\"都有一定的纠错功能\",{\"1\":{\"850\":1}}],[\"都为垃圾\",{\"1\":{\"1394\":1}}],[\"都将会被限制在其自己的命名空间下\",{\"1\":{\"1202\":1,\"1375\":1}}],[\"都直接影响投票结果\",{\"1\":{\"1196\":1,\"1369\":1}}],[\"都去操作\",{\"1\":{\"1190\":1,\"1365\":1}}],[\"都创建新事务进行执行\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"都能实现权限检查\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"都在睡觉\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"都返回\",{\"1\":{\"1041\":1,\"1242\":1}}],[\"都返回500\",{\"1\":{\"123\":1}}],[\"都可以当做spring的容器\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"都可以构建缓存\",{\"1\":{\"999\":1,\"1208\":1}}],[\"都可以做并且更好\",{\"1\":{\"990\":1}}],[\"都可以找到\",{\"1\":{\"871\":1}}],[\"都需要扫码\",{\"1\":{\"934\":1}}],[\"都需要继承\",{\"1\":{\"892\":1}}],[\"都选了默认设置\",{\"1\":{\"907\":1}}],[\"都会创建一个新的实例\",{\"1\":{\"1410\":1}}],[\"都会立即将新值写入内存\",{\"1\":{\"1382\":1}}],[\"都会从内存中读取最新的值\",{\"1\":{\"1382\":1}}],[\"都会从在资源的竞争\",{\"1\":{\"616\":1}}],[\"都会产生一个新的bean\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"都会新建一个sqlsession\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"都会写一个\",{\"0\":{\"1132\":1,\"1317\":1}}],[\"都会对应磁盘文件系统的一个目录\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"都会导致消息丢失\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"都会用类型处理器将获取的值以合适的方式转换成\",{\"1\":{\"832\":1}}],[\"都会被运行\",{\"1\":{\"775\":1}}],[\"都会读取变量修改后的最的值\",{\"1\":{\"755\":1}}],[\"都会唤醒和阻塞线程\",{\"1\":{\"91\":1}}],[\"都不能超过\",{\"1\":{\"440\":1}}],[\"都是由于全干工程师一人搞定\",{\"1\":{\"1502\":1}}],[\"都是\",{\"1\":{\"1390\":1,\"1424\":1}}],[\"都是持否定态度的\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"都是会话\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"都是sun公司推出的动态网页技术\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"都是行锁的形式\",{\"1\":{\"619\":1}}],[\"都是基于元素之间的比较来进行排序的\",{\"1\":{\"412\":1}}],[\"都是存多个值的\",{\"1\":{\"319\":1}}],[\"都根据选择的排序算法不同而不同\",{\"1\":{\"403\":1}}],[\"都带着\",{\"1\":{\"323\":1}}],[\"都想把一个东西做的很大\",{\"1\":{\"263\":1}}],[\"都统计出集群中已经有两台机器接受了\",{\"1\":{\"183\":1}}],[\"都很正常\",{\"1\":{\"123\":1}}],[\"允许事务在执行过程中\",{\"1\":{\"1177\":2,\"1354\":2}}],[\"允许一组线程相互之间等待\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"允许一个或多个线程\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"允许在编译时检测到非法的类型\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"允许在定义索引的列中插入重复值和空值\",{\"1\":{\"558\":1}}],[\"允许\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"允许使用\",{\"1\":{\"882\":1}}],[\"允许使用插件来拦截的方法调用包括\",{\"1\":{\"833\":1}}],[\"允许你在已映射语句执行过程中的某一点进行拦截调用\",{\"1\":{\"833\":1}}],[\"允许多个事务并发访问不同的数据页\",{\"1\":{\"624\":1}}],[\"允许有空值\",{\"1\":{\"558\":1}}],[\"允许出的的一端称为队头\",{\"1\":{\"340\":1}}],[\"允许用户自定义编译软件\",{\"1\":{\"243\":1}}],[\"允许客户端请求的最大单文件字节数\",{\"1\":{\"123\":1}}],[\"允许请求失败的次数默认为1\",{\"1\":{\"123\":1}}],[\"返回的数据\",{\"1\":{\"1494\":1}}],[\"返回的值不合理\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"返回处理结果\",{\"1\":{\"1414\":1}}],[\"返回给浏览器\",{\"1\":{\"1408\":1}}],[\"返回给定\",{\"1\":{\"722\":1}}],[\"返回给定所有集合的交集并存储在\",{\"1\":{\"669\":1}}],[\"返回给定所有集合的交集\",{\"1\":{\"669\":1}}],[\"返回给定所有集合的差集并存储在\",{\"1\":{\"669\":1}}],[\"返回给定所有集合的差集\",{\"1\":{\"669\":1}}],[\"返回方法地址等信息\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"返回失败\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"返回true\",{\"1\":{\"1044\":3,\"1245\":3}}],[\"返回值类型\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"返回值类型必须相同\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"返回值类型可以相同也可以不同\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"返回值为移除的元素\",{\"1\":{\"667\":1}}],[\"返回\",{\"1\":{\"1041\":1,\"1242\":1,\"1414\":3}}],[\"返回类型\",{\"1\":{\"893\":1}}],[\"返回假\",{\"1\":{\"755\":1}}],[\"返回一个线程安全的\",{\"1\":{\"1446\":1}}],[\"返回一个\",{\"1\":{\"1414\":2}}],[\"返回一个或多个位置对象的\",{\"1\":{\"723\":1}}],[\"返回一个错误\",{\"1\":{\"667\":1}}],[\"返回有序集中\",{\"1\":{\"670\":1}}],[\"返回有序集中指定分数区间内的成员\",{\"1\":{\"670\":1}}],[\"返回有序集中指定区间内的成员\",{\"1\":{\"670\":1}}],[\"返回有序集合中指定成员的排名\",{\"1\":{\"670\":1}}],[\"返回有序集合中指定成员的索引\",{\"1\":{\"670\":1}}],[\"返回所有给定集合的并集\",{\"1\":{\"669\":1}}],[\"返回集合中一个或多个随机数\",{\"1\":{\"669\":1}}],[\"返回集合中的所有成员\",{\"1\":{\"669\":1}}],[\"返回原值\",{\"1\":{\"666\":1}}],[\"返回以毫秒为单位的当前时间\",{\"1\":{\"441\":1}}],[\"返回其中出现频率前\",{\"1\":{\"406\":1}}],[\"返回结果\",{\"1\":{\"405\":1,\"413\":1,\"417\":1,\"430\":1,\"1101\":1,\"1292\":1}}],[\"返回数组\",{\"1\":{\"337\":1}}],[\"返回哪些值\",{\"1\":{\"207\":1}}],[\"返回proxy\",{\"1\":{\"123\":1}}],[\"返回顶部按钮\",{\"1\":{\"18\":1,\"21\":1}}],[\"例子\",{\"1\":{\"568\":1,\"618\":1,\"620\":1,\"636\":1,\"979\":1,\"1056\":1,\"1133\":1,\"1254\":1,\"1318\":1}}],[\"例\",{\"1\":{\"123\":1}}],[\"例如锁的持有者\",{\"1\":{\"1481\":1}}],[\"例如可重入锁\",{\"1\":{\"1480\":2}}],[\"例如日志记录\",{\"1\":{\"1474\":2}}],[\"例如t\",{\"1\":{\"1424\":1}}],[\"例如缓存\",{\"1\":{\"1406\":1}}],[\"例如数据库连接信息\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"例如下面user3\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"例如说\",{\"1\":{\"1000\":1,\"1005\":1,\"1007\":1,\"1209\":1,\"1214\":1,\"1216\":1}}],[\"例如在usermapper\",{\"1\":{\"845\":1}}],[\"例如servlet\",{\"1\":{\"769\":1}}],[\"例如1024字节的键值就不是个好主意\",{\"1\":{\"665\":1}}],[\"例如上例中的商品描述\",{\"1\":{\"579\":1}}],[\"例如定义一个\",{\"1\":{\"510\":1}}],[\"例如文档\",{\"1\":{\"503\":1,\"504\":1}}],[\"例如主机名\",{\"1\":{\"496\":1}}],[\"例如新闻正文\",{\"1\":{\"496\":1}}],[\"例如倒排索引等内容\",{\"1\":{\"447\":1,\"476\":1}}],[\"例如快速排序\",{\"1\":{\"412\":1}}],[\"例如arraylist\",{\"0\":{\"338\":1}}],[\"例如xfs\",{\"1\":{\"325\":1}}],[\"例如添加\",{\"1\":{\"209\":1}}],[\"例如字典或哈希表\",{\"0\":{\"194\":1}}],[\"例如dubbo\",{\"1\":{\"182\":1}}],[\"例如查询dubbo\",{\"1\":{\"176\":1}}],[\"例如256k\",{\"1\":{\"123\":1}}],[\"例如\",{\"1\":{\"123\":2,\"326\":1,\"383\":1,\"392\":1,\"410\":1,\"491\":1,\"497\":1,\"498\":1,\"561\":1,\"564\":2,\"565\":2,\"567\":1,\"573\":1,\"574\":1,\"590\":1,\"593\":1,\"604\":1,\"619\":1,\"621\":1,\"624\":1,\"629\":1,\"643\":1,\"665\":1,\"666\":1,\"769\":1,\"786\":1,\"825\":1,\"829\":2,\"834\":1,\"835\":1,\"999\":1,\"1005\":1,\"1029\":1,\"1043\":1,\"1044\":1,\"1085\":1,\"1090\":1,\"1123\":1,\"1134\":1,\"1174\":1,\"1176\":1,\"1208\":1,\"1214\":1,\"1233\":1,\"1244\":1,\"1245\":1,\"1278\":1,\"1283\":1,\"1311\":1,\"1319\":1,\"1351\":1,\"1353\":1,\"1388\":3,\"1392\":1,\"1418\":4,\"1424\":1,\"1436\":1,\"1468\":5,\"1474\":1,\"1478\":1,\"1480\":3}}],[\"例如创建\",{\"1\":{\"86\":1}}],[\"后来在一些只读的方法上使用可重入锁reentrantreadwritelock\",{\"1\":{\"1476\":1}}],[\"后来在我不懈的努力之下总算研究出一些成果\",{\"1\":{\"755\":1}}],[\"后来变成了y\",{\"1\":{\"1476\":1}}],[\"后再发送下一条消息\",{\"1\":{\"1452\":1}}],[\"后释放这个锁\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"后俩点不懂可以先说有一定了解\",{\"1\":{\"1030\":1,\"1234\":1}}],[\"后俩个分别再出一个demo\",{\"1\":{\"746\":1}}],[\"后者则是很多\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"后续的遍历行为在新数组上进行\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"后续的when则不会执行\",{\"1\":{\"848\":1}}],[\"后续一篇代码分析\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"后续补充\",{\"1\":{\"861\":1}}],[\"后续过程\",{\"1\":{\"417\":1}}],[\"后置最终通知\",{\"1\":{\"752\":1}}],[\"后置通知\",{\"1\":{\"752\":1,\"1402\":1}}],[\"后置节点\",{\"1\":{\"684\":1}}],[\"后台启动\",{\"1\":{\"737\":1}}],[\"后出现异常宕机\",{\"1\":{\"727\":1}}],[\"后退指针\",{\"1\":{\"691\":1}}],[\"后记\",{\"0\":{\"584\":1}}],[\"后\",{\"1\":{\"482\":1,\"1169\":1,\"1346\":1,\"1382\":1,\"1408\":1}}],[\"后期可以修改\",{\"1\":{\"475\":1}}],[\"后期不能修改\",{\"1\":{\"475\":1}}],[\"后进先出\",{\"1\":{\"335\":2,\"1404\":1}}],[\"后端返回值结构体定义\",{\"0\":{\"1493\":1}}],[\"后端开发中\",{\"1\":{\"1002\":1,\"1211\":1}}],[\"后端开发\",{\"1\":{\"990\":1}}],[\"后端服务器响应时间\",{\"1\":{\"123\":1}}],[\"后端服务器数据回传时间\",{\"1\":{\"123\":2}}],[\"后端服务器连接的超时时间\",{\"1\":{\"123\":1}}],[\"后端服务器为缓存时比较有效\",{\"1\":{\"123\":1}}],[\"后端的web服务器可以通过x\",{\"1\":{\"123\":1}}],[\"后面带该注解的全类名\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"后面加stash\",{\"1\":{\"979\":1}}],[\"后面在\",{\"1\":{\"892\":1}}],[\"后面跟随一个表达式\",{\"1\":{\"752\":1}}],[\"后面单独一篇详细讲解\",{\"1\":{\"699\":1}}],[\"后面单开一篇讲解\",{\"1\":{\"562\":1}}],[\"后面的篇章\",{\"1\":{\"671\":1}}],[\"后面的用冒号分割\",{\"1\":{\"111\":1}}],[\"后面代码中会讲解使用方式\",{\"1\":{\"467\":1}}],[\"后面会在公众号单独发出\",{\"1\":{\"396\":1}}],[\"后面学不会怎么办等\",{\"1\":{\"115\":1}}],[\"响应用户\",{\"1\":{\"1414\":2}}],[\"响应\",{\"1\":{\"1085\":2,\"1278\":2}}],[\"响应对象\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"响应时间短的优先分配\",{\"1\":{\"123\":1}}],[\"响应码\",{\"1\":{\"121\":1}}],[\"按region进行内存分块\",{\"1\":{\"1398\":1}}],[\"按序取出即可\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"按多个id查询\",{\"1\":{\"850\":1}}],[\"按姓名模糊查询\",{\"1\":{\"846\":1}}],[\"按住alt+enter\",{\"1\":{\"819\":1}}],[\"按数据行\",{\"1\":{\"583\":2}}],[\"按钮\",{\"0\":{\"549\":1}}],[\"按照内存块做了分段\",{\"1\":{\"1398\":1}}],[\"按照阶段理解spring中的bean的生命周期主要包含四个阶段\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"按照顺序消费\",{\"1\":{\"1119\":1,\"1307\":1}}],[\"按照顺序存储\",{\"1\":{\"1119\":1,\"1307\":1}}],[\"按照容量划分二个大小相等的内存区域\",{\"1\":{\"1103\":1,\"1294\":1}}],[\"按照\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"按照多个id查询用户信息\",{\"1\":{\"850\":1}}],[\"按照年龄进行查询\",{\"1\":{\"849\":2}}],[\"按照插入顺序排序\",{\"1\":{\"667\":1}}],[\"按照不同的行进行分片\",{\"1\":{\"572\":1}}],[\"按照业务维度拆分\",{\"1\":{\"572\":1}}],[\"按照空格切分\",{\"1\":{\"464\":1}}],[\"按照非字母切分\",{\"1\":{\"464\":1}}],[\"按照他们的协议\",{\"1\":{\"72\":1}}],[\"按词切分\",{\"1\":{\"464\":1}}],[\"按ffmpeg官方文档说\",{\"1\":{\"162\":1}}],[\"按访问url的hash结果来分配请求\",{\"1\":{\"123\":1}}],[\"按后端服务器的响应时间来分配请求\",{\"1\":{\"123\":1}}],[\"能解释清楚cas的aba问题\",{\"1\":{\"1476\":1}}],[\"能给我解释一下吗\",{\"1\":{\"1444\":1}}],[\"能给出源码分析吗\",{\"1\":{\"1422\":1}}],[\"能在方法中完成什么样的逻辑处理\",{\"1\":{\"1410\":1}}],[\"能达到如此水平的理解\",{\"1\":{\"1398\":1}}],[\"能看出g1的创新之处\",{\"1\":{\"1398\":1}}],[\"能直接关联到的对象\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"能keyword类型尽量keyword\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"能和真正缓存的数据区分开\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"能否简单提一下\",{\"1\":{\"1406\":1}}],[\"能否解析一下\",{\"1\":{\"1406\":1}}],[\"能否解释什么是位图索引\",{\"0\":{\"568\":1}}],[\"能否直接写接口\",{\"1\":{\"824\":1}}],[\"能对maven有一个完整的了解\",{\"1\":{\"761\":1}}],[\"能对不同业务的数据进行分级管理\",{\"1\":{\"580\":1}}],[\"能实现一个简单的消息队列系统\",{\"1\":{\"657\":1}}],[\"能读的速度是110000次\",{\"1\":{\"656\":1}}],[\"能读出的索引值更多\",{\"1\":{\"323\":1}}],[\"能用\",{\"1\":{\"592\":1}}],[\"能不会使用索引\",{\"1\":{\"564\":1}}],[\"能胜任上百个服务节点的扩展\",{\"1\":{\"453\":1}}],[\"能够将一个客户端应用于\",{\"1\":{\"1202\":1,\"1375\":1}}],[\"能够轻松地提供先入先出的操作\",{\"1\":{\"1074\":1,\"1269\":1}}],[\"能够使用极少的内存来统计巨量的数据\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"能够在\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"能够提供数据强一致性\",{\"1\":{\"170\":1}}],[\"能够静下心来\",{\"1\":{\"56\":1}}],[\"能自动剔除\",{\"1\":{\"123\":1}}],[\"轮询\",{\"1\":{\"123\":1,\"1119\":1,\"1307\":1}}],[\"权值越高被分配到的几率越大\",{\"1\":{\"123\":1}}],[\"传递的参数动态地生成需要执行的\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"传递性\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"传递性依赖\",{\"0\":{\"770\":1}}],[\"传输效率高\",{\"1\":{\"1092\":1,\"1285\":1}}],[\"传输效率低\",{\"1\":{\"1092\":1,\"1285\":1}}],[\"传输快但比较消耗cpu\",{\"1\":{\"123\":1}}],[\"传入的参数类型\",{\"1\":{\"840\":1,\"841\":1}}],[\"传入参数类型\",{\"1\":{\"838\":1}}],[\"传送一篇不错的跳跃表介绍文章\",{\"1\":{\"691\":1}}],[\"传送门\",{\"1\":{\"1\":1,\"53\":1}}],[\"传统消息系统使用中间件作为消息的中转站\",{\"1\":{\"1450\":1}}],[\"传统消息系统通常采用点对点或发布\",{\"1\":{\"1450\":1}}],[\"传统消息系统是怎么工作的\",{\"1\":{\"1450\":1}}],[\"传统方式1\",{\"0\":{\"959\":1}}],[\"传统方式管理jar依赖的问题\",{\"1\":{\"763\":1}}],[\"传统方法可以参考子标题下面的伪代码\",{\"1\":{\"339\":1}}],[\"传统用来搜索的平衡二叉树有很多\",{\"1\":{\"319\":1}}],[\"反射可以破坏封装性\",{\"1\":{\"1468\":1}}],[\"反射可以用于动态地获取和设置泛型信息\",{\"1\":{\"1468\":1}}],[\"反射可以用于很多方面\",{\"1\":{\"1468\":1}}],[\"反射还可以用于动态地获取和设置泛型类型\",{\"1\":{\"1468\":1}}],[\"反射的了解很深入\",{\"1\":{\"1468\":1}}],[\"反射的了解很不错\",{\"1\":{\"1468\":1}}],[\"反射的优点是可以在运行时动态地获取和操作类的信息\",{\"1\":{\"1468\":1}}],[\"反射是动态代理的基础\",{\"1\":{\"1474\":1}}],[\"反射是一种机制\",{\"1\":{\"1468\":1}}],[\"反射是什么吗\",{\"1\":{\"1468\":1}}],[\"反射有了解吗\",{\"1\":{\"1468\":1}}],[\"反射获取方法上的loginrequred注解\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"反射\",{\"1\":{\"587\":1}}],[\"反而可能因为维护索引而降低整体性能\",{\"1\":{\"571\":1}}],[\"反而可能增加插入\",{\"1\":{\"565\":1}}],[\"反向代理\",{\"1\":{\"1093\":1,\"1286\":1}}],[\"反向代理服务器在转发请求的http头信息中\",{\"1\":{\"123\":1}}],[\"反向填充目标数组\",{\"1\":{\"411\":1}}],[\"反例\",{\"1\":{\"221\":1,\"223\":1,\"224\":1,\"225\":1,\"226\":1,\"227\":1,\"229\":1}}],[\"反复咀嚼其深邃的思想\",{\"1\":{\"56\":1}}],[\"记得在学习和工作中保持好奇心\",{\"1\":{\"1454\":1}}],[\"记住\",{\"1\":{\"1444\":1,\"1452\":1}}],[\"记住这幅图\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"记忆会更深刻\",{\"1\":{\"1019\":1,\"1225\":1}}],[\"记录词条在文档中的位置信息\",{\"1\":{\"1470\":1}}],[\"记录了每个关键词在哪些文档中出现过\",{\"1\":{\"1464\":1}}],[\"记录不同region之间的引用关系\",{\"1\":{\"1398\":2}}],[\"记录机制实现\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"记录下所有改变了数据库数据的语句\",{\"1\":{\"1143\":1,\"1326\":1}}],[\"记录对数据库执行更改的所有操作\",{\"1\":{\"1142\":1,\"1325\":1}}],[\"记录对象数据在关键处理步骤中的变化情况\",{\"1\":{\"219\":1}}],[\"记录所有对数据库请求的信息\",{\"1\":{\"1142\":1,\"1325\":1}}],[\"记录出错信息\",{\"1\":{\"1142\":1,\"1325\":1}}],[\"记录帖子的阅读量\",{\"1\":{\"1000\":1,\"1209\":1}}],[\"记录内容越多\",{\"1\":{\"486\":1}}],[\"记录\",{\"1\":{\"482\":1,\"486\":3,\"682\":2}}],[\"记录要插入的数据\",{\"1\":{\"405\":1}}],[\"记录日志并不是要把所有信息都记录下来\",{\"1\":{\"220\":1}}],[\"记录客户浏览器的相关信息\",{\"1\":{\"123\":1}}],[\"记录发送给客户端文件主体内容大小\",{\"1\":{\"123\":1}}],[\"记一次redis线上问题\",{\"0\":{\"80\":1}}],[\"成为主节点\",{\"1\":{\"1466\":1}}],[\"成为以下的数列\",{\"1\":{\"428\":2}}],[\"成百上千的场景\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"成熟稳定\",{\"1\":{\"989\":1}}],[\"成功次数偏移量\",{\"1\":{\"1481\":1}}],[\"成功次数\",{\"1\":{\"1481\":1}}],[\"成功地找到了一种在不妥协可维护性和性能的情况下实现易于开发\",{\"1\":{\"988\":1}}],[\"成功时的构造器\",{\"1\":{\"893\":1}}],[\"成功时返回的数据\",{\"1\":{\"893\":1}}],[\"成功\",{\"1\":{\"892\":1,\"915\":1,\"1494\":1}}],[\"成功是200\",{\"1\":{\"123\":1}}],[\"成员变量\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"成员对象\",{\"1\":{\"691\":1}}],[\"成员的分数值\",{\"1\":{\"670\":1}}],[\"成长不多\",{\"1\":{\"263\":1}}],[\"成长\",{\"0\":{\"12\":1},\"2\":{\"13\":1,\"57\":1}}],[\"x版本以后\",{\"1\":{\"1155\":1,\"1335\":1}}],[\"x版本已经被copy\",{\"1\":{\"489\":1}}],[\"x中只支持replica\",{\"1\":{\"1113\":1,\"1301\":1}}],[\"xx\",{\"1\":{\"1108\":7,\"1299\":7,\"1400\":5}}],[\"xxxautoconfiguration\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"xxxx\",{\"1\":{\"842\":3}}],[\"xxxoverides\",{\"1\":{\"787\":1}}],[\"xxx\",{\"1\":{\"111\":1,\"660\":1}}],[\"xclass2\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"xclass1\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"xclass\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"x=\",{\"1\":{\"928\":25}}],[\"xsd\",{\"1\":{\"778\":4,\"875\":2,\"878\":2,\"881\":3,\"882\":3,\"883\":1,\"907\":2}}],[\"xsi\",{\"1\":{\"778\":2,\"875\":1,\"878\":1,\"881\":1,\"882\":1,\"883\":1,\"907\":1,\"928\":6}}],[\"xsi=\",{\"1\":{\"778\":2,\"875\":1,\"878\":1,\"881\":1,\"882\":1,\"883\":1,\"907\":1,\"928\":1}}],[\"xzf\",{\"1\":{\"661\":1}}],[\"x64\",{\"1\":{\"660\":1}}],[\"xeon\",{\"1\":{\"654\":1}}],[\"x3320\",{\"1\":{\"654\":1}}],[\"x锁\",{\"1\":{\"618\":1,\"638\":1}}],[\"xy\",{\"1\":{\"504\":4}}],[\"xget\",{\"1\":{\"489\":1}}],[\"xpath\",{\"1\":{\"928\":1}}],[\"xpack\",{\"1\":{\"459\":2}}],[\"xput\",{\"1\":{\"489\":2}}],[\"xms\",{\"1\":{\"1400\":1}}],[\"xms4096m\",{\"1\":{\"1400\":1}}],[\"xms256m\",{\"1\":{\"765\":1}}],[\"xms200m\",{\"1\":{\"459\":1}}],[\"xmx\",{\"1\":{\"1400\":1}}],[\"xmx4096m\",{\"1\":{\"1400\":1}}],[\"xmx512m\",{\"1\":{\"765\":1}}],[\"xmx200m\",{\"1\":{\"459\":1}}],[\"xmlbeandefinitionreader\",{\"1\":{\"1408\":4}}],[\"xml节点时\",{\"1\":{\"1133\":1,\"1318\":1}}],[\"xml<\",{\"1\":{\"883\":1}}],[\"xml讲究严格的顺序\",{\"1\":{\"828\":1}}],[\"xml详解\",{\"0\":{\"828\":1}}],[\"xml引入usermapper\",{\"1\":{\"826\":1}}],[\"xml即可\",{\"1\":{\"824\":1}}],[\"xml的sql\",{\"1\":{\"824\":1}}],[\"xml的文件中\",{\"1\":{\"761\":1}}],[\"xml配置\",{\"1\":{\"808\":1}}],[\"xml配置文件\",{\"1\":{\"764\":1,\"1173\":1,\"1350\":1}}],[\"xml需要设置父工程\",{\"1\":{\"778\":1}}],[\"xmlschema\",{\"1\":{\"778\":2,\"875\":1,\"878\":1,\"881\":1,\"882\":1,\"883\":1,\"907\":1,\"928\":2}}],[\"xmlns\",{\"1\":{\"778\":2,\"875\":1,\"878\":2,\"881\":3,\"882\":3,\"883\":4,\"907\":1,\"928\":6}}],[\"xmlns=\",{\"1\":{\"778\":2,\"875\":1,\"878\":1,\"881\":1,\"882\":1,\"883\":1,\"907\":1,\"928\":1}}],[\"xml中配置\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"xml中引入该外部配置文件\",{\"1\":{\"845\":1}}],[\"xml中使用它\",{\"1\":{\"845\":1}}],[\"xml中定义如下片段\",{\"1\":{\"845\":1}}],[\"xml中\",{\"1\":{\"768\":1}}],[\"xml中修改指定自定义的仓库路径\",{\"1\":{\"765\":1}}],[\"xml文件中如\",{\"1\":{\"845\":1}}],[\"xml文件详解\",{\"0\":{\"836\":1}}],[\"xml文件添加junit依赖\",{\"1\":{\"819\":1}}],[\"xml文件的相对路径\",{\"1\":{\"778\":2}}],[\"xml文件的位置\",{\"1\":{\"766\":1,\"767\":1}}],[\"xml文件\",{\"1\":{\"765\":1,\"766\":1,\"878\":1,\"880\":1}}],[\"xml\",{\"0\":{\"787\":1,\"805\":1,\"806\":1,\"807\":2,\"808\":1,\"810\":1,\"818\":1,\"878\":1,\"880\":1,\"881\":1,\"882\":1,\"883\":1,\"906\":1,\"1132\":1,\"1317\":1},\"1\":{\"711\":2,\"764\":1,\"767\":1,\"778\":1,\"806\":1,\"807\":1,\"808\":2,\"809\":1,\"810\":1,\"814\":1,\"818\":4,\"820\":2,\"822\":1,\"824\":1,\"825\":2,\"826\":7,\"831\":1,\"833\":1,\"835\":10,\"845\":3,\"853\":1,\"863\":1,\"875\":2,\"878\":5,\"880\":1,\"881\":2,\"882\":3,\"883\":7,\"884\":2,\"890\":8,\"891\":2,\"902\":1,\"907\":4,\"928\":2,\"948\":1,\"1085\":1,\"1134\":1,\"1136\":3,\"1278\":1,\"1319\":1,\"1321\":3,\"1408\":1,\"1416\":4,\"1507\":2,\"1522\":2,\"1525\":1}}],[\"x86\",{\"1\":{\"458\":2}}],[\"x整合prometheus+grafana\",{\"0\":{\"910\":1,\"944\":1},\"1\":{\"944\":1,\"948\":1}}],[\"x整合springboot\",{\"1\":{\"447\":1}}],[\"x整合elasticsearch7\",{\"0\":{\"447\":1,\"450\":1,\"464\":1,\"481\":1,\"513\":1},\"1\":{\"450\":1,\"464\":2,\"481\":2,\"513\":2}}],[\"x实战目录\",{\"1\":{\"450\":1,\"464\":1,\"481\":1,\"513\":1}}],[\"x实战\",{\"0\":{\"447\":1,\"450\":1,\"464\":1,\"481\":1,\"513\":1},\"1\":{\"464\":1,\"481\":1,\"513\":1}}],[\"xiaopeng9275\",{\"1\":{\"441\":1}}],[\"xn\",{\"1\":{\"319\":1}}],[\"x2\",{\"1\":{\"319\":1}}],[\"x264\",{\"1\":{\"162\":1}}],[\"x1<\",{\"1\":{\"319\":1}}],[\"xr\",{\"1\":{\"176\":8}}],[\"x等\",{\"1\":{\"139\":1}}],[\"x\",{\"1\":{\"123\":8,\"157\":1,\"176\":8,\"296\":1,\"326\":1,\"386\":1,\"392\":4,\"496\":2,\"510\":1,\"618\":1,\"621\":2,\"666\":1,\"768\":1,\"871\":1,\"1044\":4,\"1245\":4,\"1382\":8,\"1408\":1,\"1507\":1}}],[\"合并分支\",{\"1\":{\"978\":1}}],[\"合并到主分支\",{\"1\":{\"978\":1}}],[\"合并为一个\",{\"1\":{\"722\":1}}],[\"合理使用索引别名\",{\"1\":{\"1460\":1}}],[\"合理使用数据结构\",{\"1\":{\"1400\":1}}],[\"合理设置分片和副本的数量\",{\"1\":{\"1460\":1}}],[\"合理设计索引和映射\",{\"1\":{\"1460\":1}}],[\"合理配置kafka的参数\",{\"1\":{\"1438\":1}}],[\"合理分配\",{\"1\":{\"1408\":1}}],[\"合理的设置分词器\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"合理的利用缓存不仅能够提升网站访问速度\",{\"1\":{\"657\":1}}],[\"合理地建立索引可以大幅提高查询效率\",{\"1\":{\"565\":1}}],[\"合计\",{\"1\":{\"609\":1}}],[\"合约名\",{\"1\":{\"541\":1}}],[\"合约中设置条件\",{\"1\":{\"539\":1}}],[\"合y等等\",{\"1\":{\"263\":1}}],[\"合适下载服务器\",{\"1\":{\"123\":1}}],[\"合作才有未来\",{\"1\":{\"53\":1}}],[\"来演示\",{\"1\":{\"1520\":1}}],[\"来管理项目\",{\"1\":{\"1520\":1}}],[\"来管理项目的构建\",{\"1\":{\"761\":1}}],[\"来判断\",{\"1\":{\"1494\":1}}],[\"来原子更新变量值\",{\"1\":{\"1476\":1}}],[\"来说明一下分片的工作原理\",{\"1\":{\"1462\":1}}],[\"来说更加易用\",{\"1\":{\"989\":1}}],[\"来测试一下你的熟练程度\",{\"1\":{\"1418\":1}}],[\"来聊点具体的吧\",{\"1\":{\"1408\":1}}],[\"来吧\",{\"1\":{\"1394\":1,\"1418\":1}}],[\"来\",{\"1\":{\"1392\":1}}],[\"来实现多个客户端之间的通信\",{\"1\":{\"1478\":2}}],[\"来实现对事件调度状态的修改\",{\"1\":{\"1476\":1}}],[\"来实现链表节点的非阻塞追加等操作\",{\"1\":{\"1476\":1}}],[\"来实现幂等性\",{\"1\":{\"1454\":1}}],[\"来实现高吞吐量和可伸缩性\",{\"1\":{\"1444\":1}}],[\"来实现\",{\"1\":{\"1190\":1,\"1365\":1,\"1390\":2}}],[\"来实现整个程序的功能\",{\"1\":{\"1100\":1,\"1291\":1}}],[\"来增强被代理类的功能\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"来装载class文件到运行时数据区中的方法区中\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"来获取\",{\"1\":{\"1073\":1,\"1268\":1,\"1468\":4}}],[\"来支持线程局部变量\",{\"1\":{\"1060\":1,\"1258\":1}}],[\"来源\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"来源网络\",{\"1\":{\"625\":1,\"1136\":1,\"1321\":1}}],[\"来设置去重需要的固定内存使用量\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"来设置超时时间\",{\"1\":{\"666\":1}}],[\"来找到被包含在\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"来找王哥\",{\"1\":{\"244\":1}}],[\"来做的\",{\"1\":{\"990\":1}}],[\"来做\",{\"1\":{\"990\":1}}],[\"来做区别\",{\"1\":{\"982\":1}}],[\"来做到环境的分离\",{\"1\":{\"834\":1}}],[\"来学习\",{\"1\":{\"966\":1}}],[\"来完成\",{\"1\":{\"881\":1}}],[\"来完成映射\",{\"1\":{\"856\":1}}],[\"来解决键冲突\",{\"1\":{\"687\":1}}],[\"来解析\",{\"1\":{\"27\":1}}],[\"来打印出\",{\"1\":{\"682\":1}}],[\"来代替\",{\"1\":{\"665\":1}}],[\"来保证自增值的唯一性和连续性\",{\"1\":{\"638\":1}}],[\"来显式地锁定需要的资源\",{\"1\":{\"633\":1}}],[\"来确保消息的顺序性\",{\"1\":{\"1442\":1}}],[\"来确保数据一致性\",{\"1\":{\"632\":1}}],[\"来确定分区\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"来确定元素的正确位置\",{\"1\":{\"412\":1}}],[\"来连接条件\",{\"0\":{\"591\":1},\"1\":{\"1149\":1,\"1332\":1}}],[\"来搭建全文搜索引擎\",{\"1\":{\"570\":1}}],[\"来选择所有列\",{\"1\":{\"567\":1}}],[\"来存储数据\",{\"1\":{\"695\":1}}],[\"来存储\",{\"1\":{\"497\":1}}],[\"来存储的\",{\"1\":{\"440\":1}}],[\"来操作\",{\"1\":{\"489\":1}}],[\"来查询主分片\",{\"1\":{\"1035\":1,\"1239\":1}}],[\"来查询\",{\"1\":{\"489\":1}}],[\"来读取磁盘中的文件\",{\"1\":{\"456\":1}}],[\"来表现数据元素之间的逻辑关系\",{\"1\":{\"337\":1}}],[\"来表示同一机器同一时间截\",{\"1\":{\"440\":1}}],[\"来表示不同的\",{\"1\":{\"440\":1}}],[\"来表示\",{\"1\":{\"183\":1}}],[\"来给自己的产业赋能\",{\"1\":{\"264\":1}}],[\"来映射条件和对应的行为\",{\"0\":{\"194\":1}}],[\"来回答系统下各个节点的提问\",{\"1\":{\"170\":1}}],[\"来自被代理服务器\",{\"1\":{\"123\":1}}],[\"来提交任意小于256k的图片\",{\"1\":{\"123\":1}}],[\"来输出文件\",{\"1\":{\"123\":1}}],[\"方\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"方言\",{\"1\":{\"1138\":1,\"1323\":1}}],[\"方便部署和运行\",{\"1\":{\"1525\":1}}],[\"方便开发时状态码搞混\",{\"1\":{\"1494\":1}}],[\"方便前端直接将接口响应状态展示\",{\"1\":{\"1494\":1}}],[\"方便我们快速找到需要的信息\",{\"1\":{\"1462\":1}}],[\"方便我们查阅遗忘的知识点\",{\"1\":{\"1378\":1}}],[\"方便对时间敏感应用进行分析\",{\"1\":{\"1400\":1}}],[\"方便后续调用\",{\"1\":{\"1392\":1}}],[\"方便很多\",{\"1\":{\"1034\":2,\"1238\":2}}],[\"方便查找\",{\"1\":{\"979\":1}}],[\"方便统一管控项目的依赖版本问题\",{\"1\":{\"778\":1}}],[\"方便定位问题\",{\"0\":{\"225\":1}}],[\"方案三\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"方案2\",{\"1\":{\"578\":1}}],[\"方案1\",{\"1\":{\"578\":1}}],[\"方案一\",{\"0\":{\"438\":1},\"1\":{\"1004\":1,\"1005\":1,\"1006\":1,\"1213\":1,\"1214\":1,\"1215\":1}}],[\"方案二\",{\"0\":{\"439\":1},\"1\":{\"247\":1,\"1004\":1,\"1005\":1,\"1006\":1,\"1213\":1,\"1214\":1,\"1215\":1}}],[\"方式进行入队和出队操作\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"方式\",{\"1\":{\"123\":1,\"666\":1,\"1030\":1,\"1234\":1}}],[\"方法进行同步操作\",{\"1\":{\"1481\":2}}],[\"方法进行实例化\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"方法都被\",{\"1\":{\"1480\":1}}],[\"方法将消息推送到名为my\",{\"1\":{\"1448\":1}}],[\"方法睡醒后直接继续执行\",{\"1\":{\"1446\":1}}],[\"方法被唤醒后必须重新获取锁\",{\"1\":{\"1446\":1}}],[\"方法必须指定等待时间\",{\"1\":{\"1446\":1}}],[\"方法用于暂停线程指定时间\",{\"1\":{\"1446\":1}}],[\"方法用于将线程由\",{\"1\":{\"1064\":1,\"1262\":1}}],[\"方法通常被用于线程间通信\",{\"1\":{\"1446\":1}}],[\"方法通知\",{\"1\":{\"1446\":1}}],[\"方法不释放锁\",{\"1\":{\"1446\":1}}],[\"方法释放锁\",{\"1\":{\"1446\":1}}],[\"方法有什么区别\",{\"1\":{\"1446\":1}}],[\"方法在产品就绪时唤醒等待线程\",{\"1\":{\"1446\":1}}],[\"方法使生产线程和消费线程在产品未就绪时等待\",{\"1\":{\"1446\":1}}],[\"方法注入\",{\"1\":{\"1412\":1}}],[\"方法注册一个\",{\"1\":{\"991\":1}}],[\"方法实现\",{\"1\":{\"1412\":1}}],[\"方法实现了等价关系\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"方法又注入\",{\"1\":{\"1412\":1}}],[\"方法对象\",{\"1\":{\"1410\":1}}],[\"方法加载\",{\"1\":{\"1408\":1}}],[\"方法初始化\",{\"1\":{\"1408\":1}}],[\"方法动态扩容\",{\"1\":{\"1404\":1}}],[\"方法参数\",{\"1\":{\"1402\":1}}],[\"方法上\",{\"1\":{\"1402\":1}}],[\"方法上添加我们的登录注解\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"方法退出后\",{\"1\":{\"1394\":1}}],[\"方法分别对应着获取锁和释放锁的操作\",{\"1\":{\"1390\":1}}],[\"方法等待其他线程\",{\"1\":{\"1390\":2}}],[\"方法出口等信息\",{\"1\":{\"1388\":1}}],[\"方法时\",{\"1\":{\"1386\":2,\"1474\":1}}],[\"方法会立即看到\",{\"1\":{\"1382\":1}}],[\"方法可能会一直等待下去\",{\"1\":{\"1382\":1}}],[\"方法可以在没有指定时间的情况下一直等待\",{\"1\":{\"1446\":1}}],[\"方法可以调用其他方法来处理请求\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"方法可以通过\",{\"1\":{\"894\":1}}],[\"方法后\",{\"1\":{\"1382\":2}}],[\"方法计算\",{\"1\":{\"1380\":1}}],[\"方法大致分为以下几步\",{\"1\":{\"1380\":1}}],[\"方法内\",{\"1\":{\"1185\":1,\"1360\":1}}],[\"方法也是一个模板方法\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"方法区也被称为永久代\",{\"1\":{\"1388\":1}}],[\"方法区也是被所有线程共享的一块内存区域\",{\"1\":{\"1388\":1}}],[\"方法区\",{\"1\":{\"1388\":1,\"1394\":3}}],[\"方法区与java堆一样\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"方法区和堆是所有线程共享的内存区域\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"方法从主题中拉取消息\",{\"1\":{\"1448\":1}}],[\"方法从\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"方法2\",{\"1\":{\"1064\":1,\"1262\":1}}],[\"方法1\",{\"1\":{\"1064\":1,\"1262\":1}}],[\"方法里面的代码交替执行\",{\"1\":{\"1055\":1,\"1253\":1}}],[\"方法里面的代码\",{\"1\":{\"1055\":1,\"1253\":1}}],[\"方法里面的代码全部执行完毕之后\",{\"1\":{\"1055\":1,\"1253\":1}}],[\"方法执行结束\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"方法来调用这个方法\",{\"1\":{\"1468\":1}}],[\"方法来获取这个字段的泛型类型\",{\"1\":{\"1468\":1}}],[\"方法来获取\",{\"1\":{\"1468\":3}}],[\"方法来获取当前线程的变量值即可\",{\"1\":{\"1386\":1}}],[\"方法来创建一个实现了\",{\"1\":{\"1474\":1}}],[\"方法来创建\",{\"1\":{\"1468\":2}}],[\"方法来实现的\",{\"1\":{\"1390\":2}}],[\"方法来实现自定义的线程池行为\",{\"1\":{\"1384\":1}}],[\"方法来设置当前线程的变量值\",{\"1\":{\"1386\":1}}],[\"方法来保证分布均匀\",{\"1\":{\"1380\":1}}],[\"方法来说\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"方法来判断对象的值是否相等\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"方法体\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"方法的参数上\",{\"1\":{\"1402\":1}}],[\"方法的参数列表一定不一样\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"方法的字节码\",{\"1\":{\"1392\":2}}],[\"方法的线程会被挂起\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"方法的使用效果并不像for+break语句那样\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"方法的区别\",{\"0\":{\"1055\":1,\"1253\":1}}],[\"方法的返回值\",{\"1\":{\"752\":1}}],[\"方法即可\",{\"1\":{\"902\":1,\"1386\":1}}],[\"方法定义粒度\",{\"1\":{\"893\":1}}],[\"方法只有一个参数\",{\"1\":{\"889\":1}}],[\"方法和run\",{\"0\":{\"1055\":1,\"1253\":1}}],[\"方法和\",{\"1\":{\"889\":1,\"1390\":1,\"1446\":1}}],[\"方法和要点\",{\"0\":{\"458\":1},\"1\":{\"447\":1}}],[\"方法一键启动应用\",{\"1\":{\"1181\":1,\"1356\":1}}],[\"方法一般是跟notify方法连用的\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"方法一\",{\"1\":{\"856\":1,\"1058\":1,\"1256\":1}}],[\"方法调用\",{\"1\":{\"833\":1}}],[\"方法中添加了日志记录的逻辑\",{\"1\":{\"1474\":1}}],[\"方法中注入\",{\"1\":{\"1412\":1}}],[\"方法中执行清理工作\",{\"1\":{\"1410\":1}}],[\"方法中执行初始化逻辑\",{\"1\":{\"1410\":1}}],[\"方法中实现的\",{\"1\":{\"1410\":2,\"1422\":1}}],[\"方法中做标识符\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"方法中断线程\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"方法中\",{\"1\":{\"829\":1,\"1382\":1,\"1392\":1}}],[\"方法最后执行\",{\"1\":{\"752\":1}}],[\"方法异常时执行\",{\"1\":{\"752\":1}}],[\"方法名称\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"方法名必须相同\",{\"1\":{\"1043\":2,\"1244\":2}}],[\"方法名\",{\"1\":{\"752\":1,\"1392\":1}}],[\"方法理解\",{\"1\":{\"405\":1}}],[\"方法二\",{\"1\":{\"111\":1,\"856\":1,\"1058\":1,\"1256\":1}}],[\"方法\",{\"1\":{\"91\":1,\"223\":1,\"755\":1,\"825\":1,\"888\":2,\"1044\":1,\"1049\":2,\"1055\":2,\"1057\":2,\"1062\":1,\"1064\":1,\"1085\":3,\"1171\":1,\"1185\":1,\"1245\":1,\"1250\":2,\"1253\":2,\"1255\":2,\"1260\":1,\"1262\":1,\"1278\":3,\"1348\":1,\"1360\":1,\"1390\":1,\"1402\":2,\"1408\":2,\"1410\":5,\"1412\":1,\"1468\":1,\"1474\":1,\"1480\":1}}],[\"函数出口打印返回值及时间等\",{\"1\":{\"220\":1}}],[\"函数\",{\"1\":{\"123\":1,\"682\":1}}],[\"函数可以保证线程安全\",{\"1\":{\"91\":1}}],[\"注\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"注入功能类进行方法调用\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"注入到拦截器即可\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"注入到spring容器中\",{\"1\":{\"878\":1}}],[\"注入service依赖\",{\"1\":{\"893\":1}}],[\"注入sqlsessionfactory\",{\"1\":{\"878\":1}}],[\"注入数据库连接池\",{\"1\":{\"878\":1,\"881\":1}}],[\"注释是\",{\"1\":{\"1402\":1}}],[\"注释是写给人看的\",{\"1\":{\"1402\":1}}],[\"注释不会对程序产生任何影响\",{\"1\":{\"1402\":1}}],[\"注释写错了\",{\"1\":{\"981\":1}}],[\"注释式日志切面\",{\"1\":{\"752\":1}}],[\"注释之前的内容被视为文章摘要\",{\"1\":{\"40\":1}}],[\"注解不会继承\",{\"1\":{\"1402\":1}}],[\"注解不能作用于变量\",{\"1\":{\"1402\":1}}],[\"注解不能继承其他注解或接口\",{\"1\":{\"1402\":1}}],[\"注解中的成员变量只能是基本类型\",{\"1\":{\"1402\":1}}],[\"注解只有成员变量\",{\"1\":{\"1402\":1}}],[\"注解有以下几个限制\",{\"1\":{\"1402\":1}}],[\"注解有哪些限制\",{\"1\":{\"1402\":1}}],[\"注解有一个非常常见的使用场景\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"注解可以放在\",{\"1\":{\"1402\":1}}],[\"注解在哪些地方可以使用\",{\"1\":{\"1402\":1}}],[\"注解生命周期有3种\",{\"1\":{\"1402\":1}}],[\"注解会影响程序的编译\",{\"1\":{\"1402\":1}}],[\"注解和注释有什么区别吧\",{\"1\":{\"1402\":1}}],[\"注解的生命周期有几种\",{\"1\":{\"1402\":1}}],[\"注解的用处主要三个\",{\"1\":{\"1402\":1}}],[\"注解的本质是什么\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"注解来实现\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"注解处理器\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"注解声明\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"注解声明切面\",{\"1\":{\"752\":1}}],[\"注解三要素是哪些\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"注解大致分为以下三种\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"注解非常常见\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"注解方式可以使用如下配置方式\",{\"1\":{\"835\":1}}],[\"注解方式\",{\"1\":{\"835\":2}}],[\"注解定义切点\",{\"1\":{\"752\":1}}],[\"注解名为log\",{\"1\":{\"751\":1}}],[\"注解名为\",{\"1\":{\"751\":1}}],[\"注解是\",{\"1\":{\"1402\":1}}],[\"注解是写给机器看的\",{\"1\":{\"1402\":1}}],[\"注解是否将包含在\",{\"1\":{\"751\":2}}],[\"注解是javaee的基础\",{\"1\":{\"745\":1}}],[\"注解用于什么地方\",{\"1\":{\"751\":2}}],[\"注解\",{\"0\":{\"751\":1},\"1\":{\"875\":1,\"888\":2,\"889\":1,\"894\":1,\"1184\":1,\"1359\":1,\"1402\":1,\"1410\":2}}],[\"注意一点\",{\"1\":{\"1041\":1,\"1242\":1}}],[\"注意完成这个操作后\",{\"1\":{\"981\":1}}],[\"注意自己的密码\",{\"1\":{\"879\":1}}],[\"注意\",{\"1\":{\"123\":1,\"162\":1,\"320\":1,\"441\":1,\"624\":1,\"667\":1,\"738\":1,\"765\":2,\"768\":1,\"773\":1,\"842\":1,\"864\":1,\"980\":1,\"981\":1,\"988\":1,\"1042\":1,\"1048\":1,\"1200\":1,\"1243\":1,\"1249\":1,\"1373\":1}}],[\"可执行\",{\"0\":{\"1524\":1}}],[\"可执行单层树复制\",{\"1\":{\"652\":1}}],[\"可扩展和高效\",{\"1\":{\"1460\":1}}],[\"可扩展的搜索和分析平台\",{\"1\":{\"1458\":1}}],[\"可扩展的bloom过滤器\",{\"1\":{\"396\":1}}],[\"可扩展\",{\"1\":{\"1436\":1}}],[\"可扩展性和可靠性是kafka的强项\",{\"1\":{\"1436\":1}}],[\"可配置启动incremental\",{\"1\":{\"1396\":1}}],[\"可配置的精度\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"可简单了解\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"可简化创建\",{\"1\":{\"1014\":1,\"1220\":1}}],[\"可重复读指的是在一个事务内\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"可重复读\",{\"1\":{\"1144\":1,\"1145\":1,\"1177\":1,\"1327\":1,\"1328\":1,\"1354\":1}}],[\"可重用的组件\",{\"1\":{\"762\":1}}],[\"可参考第四问\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"可恢复性等功能\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"可水平扩展\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"可持久化\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"可见的\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"可见性是性对于线程而言\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"可见性\",{\"1\":{\"755\":1}}],[\"可靠的分布式消息系统\",{\"1\":{\"1436\":1}}],[\"可靠性和可扩展性让它成为了很多公司的首选\",{\"1\":{\"1434\":1}}],[\"可靠地将消息递送给不同的系统\",{\"1\":{\"1432\":1}}],[\"可靠\",{\"1\":{\"1092\":1,\"1285\":1}}],[\"可列举如下\",{\"1\":{\"1003\":1,\"1212\":1}}],[\"可先写到内存\",{\"1\":{\"999\":1,\"1208\":1}}],[\"可尝试\",{\"1\":{\"959\":1}}],[\"可是\",{\"1\":{\"863\":1}}],[\"可是奇怪的事情发生了\",{\"1\":{\"755\":1}}],[\"可作为了解部份\",{\"1\":{\"769\":1}}],[\"可跳过\",{\"1\":{\"768\":1}}],[\"可订阅一个频道并接收主服务器完整的消息发布记录\",{\"1\":{\"652\":1}}],[\"可基于内存亦可持久化的日志型\",{\"1\":{\"652\":1}}],[\"可用性\",{\"1\":{\"1035\":2,\"1197\":1,\"1239\":1,\"1370\":1}}],[\"可用性指某个库出问题\",{\"1\":{\"581\":1}}],[\"可用于程序化配置或布署\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"可用于满足特定场景\",{\"1\":{\"489\":1}}],[\"可用连接实例最大数目\",{\"1\":{\"711\":1}}],[\"可视化使用的是\",{\"1\":{\"513\":1}}],[\"可填ip\",{\"1\":{\"459\":1}}],[\"可不受此限制\",{\"1\":{\"327\":1}}],[\"可使用在范围查询等\",{\"1\":{\"323\":1}}],[\"可能需要一些时间来理解和掌握\",{\"1\":{\"1436\":1}}],[\"可能出现classcastexception\",{\"1\":{\"1424\":1}}],[\"可能选出多个领导\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"可能只有一个\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"可能有一丢丢多\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"可能有一部分用户\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"可能有不准确之处\",{\"1\":{\"493\":1}}],[\"可能\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"可能表明表存在碎片化问题\",{\"1\":{\"574\":1}}],[\"可能会看到旧值\",{\"1\":{\"1382\":1}}],[\"可能会受到其他事务的影响\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"可能会在某些时间点被超高并发地访问\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"可能会引发连锁更新操作\",{\"1\":{\"696\":1}}],[\"可能会遇到什么问题\",{\"1\":{\"572\":1}}],[\"可能会发生锁等待\",{\"1\":{\"571\":1}}],[\"可能会造成泄露\",{\"1\":{\"438\":1}}],[\"可能不会选择使用索引\",{\"1\":{\"564\":1}}],[\"可能不会总是包含最新的软件版本和特性\",{\"1\":{\"239\":1}}],[\"可能进行节点的拆分和合并\",{\"1\":{\"562\":1}}],[\"可能导致磁盘的随机访问\",{\"1\":{\"562\":1}}],[\"可能在集合中\",{\"1\":{\"395\":1}}],[\"可能影响某些应用的支持\",{\"1\":{\"244\":1}}],[\"可能和其他linux发行版使用的glibc实现会有些不同\",{\"1\":{\"244\":1}}],[\"可能对接口做出修改更新\",{\"1\":{\"209\":1}}],[\"可能还有些公司只用\",{\"1\":{\"206\":1}}],[\"可选依赖\",{\"0\":{\"771\":1}}],[\"可选\",{\"1\":{\"123\":1,\"1020\":2,\"1226\":2}}],[\"可设置为off\",{\"1\":{\"123\":2}}],[\"可以从\",{\"1\":{\"1512\":1}}],[\"可以从以下多个方面进行共同着手\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"可以来\",{\"1\":{\"1507\":1}}],[\"可以增强代码的可维护性\",{\"1\":{\"1502\":1}}],[\"可以增加x\",{\"1\":{\"123\":1}}],[\"可以展示一个\",{\"1\":{\"1494\":1}}],[\"可以避免\",{\"1\":{\"1480\":1}}],[\"可以支持高效的\",{\"1\":{\"1478\":1}}],[\"可以支持大量的并发连接\",{\"1\":{\"1478\":1}}],[\"可以支持很多主流数据源\",{\"1\":{\"947\":1}}],[\"可以同时监控多个通道的\",{\"1\":{\"1478\":1}}],[\"可以缓存频繁使用的查询结果\",{\"1\":{\"1460\":1}}],[\"可以轻松地处理大量的消息和高并发\",{\"1\":{\"1450\":1}}],[\"可以改变\",{\"1\":{\"1446\":1}}],[\"可以向kafka发送确认消息\",{\"1\":{\"1442\":1}}],[\"可以实现多个条件变量\",{\"1\":{\"1480\":1}}],[\"可以实现超时锁和可中断锁\",{\"1\":{\"1480\":1}}],[\"可以实现公平锁和非公平锁\",{\"1\":{\"1480\":1}}],[\"可以实现更细粒度的锁控制\",{\"1\":{\"1480\":1}}],[\"可以实现高效的文件读写操作\",{\"1\":{\"1478\":1}}],[\"可以实现高性能的服务器和客户端\",{\"1\":{\"1478\":1}}],[\"可以实现高可用和负载均衡\",{\"1\":{\"1408\":1}}],[\"可以实现消息的负载均衡和故障恢复\",{\"1\":{\"1438\":1}}],[\"可以处理大量的数据流\",{\"1\":{\"1436\":1}}],[\"可以处理不同类型的方法\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"可以比单独存储每个键值对更节省内存\",{\"1\":{\"1430\":1}}],[\"可以减少网络往返次数\",{\"1\":{\"1428\":1}}],[\"可以出现在读和写的操作中\",{\"1\":{\"1424\":1}}],[\"可以装任何东西\",{\"1\":{\"1424\":1}}],[\"可以彻底压缩aof文件体积\",{\"1\":{\"1420\":1}}],[\"可以是\",{\"1\":{\"1416\":1}}],[\"可以是一个规则表达式\",{\"1\":{\"1402\":1}}],[\"可以开发微服务架构的系统\",{\"1\":{\"1408\":1}}],[\"可以应用在很多实际场景中\",{\"1\":{\"1408\":1}}],[\"可以添加属性\",{\"1\":{\"1402\":1}}],[\"可以更加灵活地控制线程的等待和唤醒\",{\"1\":{\"1480\":1}}],[\"可以更好运用g1收集器\",{\"1\":{\"1398\":1}}],[\"可以更着做一些项目\",{\"1\":{\"118\":1}}],[\"可以有选择性地\",{\"1\":{\"1398\":1}}],[\"可以有效的防止sql注入\",{\"1\":{\"1131\":1,\"1316\":1}}],[\"可以这么总结\",{\"1\":{\"1394\":1}}],[\"可以这样理解\",{\"1\":{\"1194\":1,\"1367\":1}}],[\"可以这样查询\",{\"1\":{\"591\":1}}],[\"可以采用linkedhashmap\",{\"1\":{\"1380\":1}}],[\"可以动态调整容量和提高查询性能\",{\"1\":{\"1380\":1}}],[\"可以选择hashtable或者concurrenthashmap\",{\"1\":{\"1380\":1}}],[\"可以选择并发版的concurrenthashmap\",{\"1\":{\"1380\":1}}],[\"可以选择以下替代方案\",{\"1\":{\"1380\":1}}],[\"可以高效地进行插入操作\",{\"1\":{\"1380\":1}}],[\"可以高效的支持范围查询和排序操作\",{\"1\":{\"562\":1}}],[\"可以快速定位到相应的位置\",{\"1\":{\"1380\":1}}],[\"可以给我简单介绍一下它的内部实现机制吗\",{\"1\":{\"1380\":1}}],[\"可以迭代出整个对象的结构图\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"可以存取对象的属性和调用对象的方法\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"可以存储大量元素\",{\"1\":{\"1380\":1}}],[\"可以存储\",{\"1\":{\"668\":1}}],[\"可以存储经纬度相关信息\",{\"1\":{\"506\":1}}],[\"可以严格控制sql执行性能\",{\"1\":{\"1129\":1,\"1314\":1}}],[\"可以分代增量回收\",{\"1\":{\"1398\":1}}],[\"可以分为多个\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"可以分为5种\",{\"1\":{\"501\":1}}],[\"可以分布到多个\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"可以与垃圾收集线程一起并发运行\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"可以防止内存中出现多份同样的字节码\",{\"1\":{\"1106\":1,\"1297\":1}}],[\"可以防止sql注入\",{\"1\":{\"842\":1}}],[\"可以放在cookie中\",{\"1\":{\"1088\":2,\"1281\":2}}],[\"可以顺带谈谈多线程环境下arraylist的替代品\",{\"1\":{\"1075\":1,\"1270\":1}}],[\"可以中断等待\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"可以多次使用\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"可以保证线程之间的顺序执行把线程从并发状态调整为串行状态保证了线程的执行顺序\",{\"1\":{\"1061\":2,\"1259\":2}}],[\"可以认为一个io操作包含两个部分\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"可以认为是elasticsearch的服务进程\",{\"1\":{\"470\":1}}],[\"可以成为master节点数n\",{\"1\":{\"1027\":1,\"1231\":1}}],[\"可以手动点击\",{\"1\":{\"1008\":1,\"1217\":1}}],[\"可以引入消息队列\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"可以做的事情\",{\"1\":{\"990\":1}}],[\"可以先找\",{\"1\":{\"1512\":1}}],[\"可以先基于时间敲定索引再检索\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"可以先运行一个\",{\"1\":{\"987\":1}}],[\"可以先学习之前的\",{\"1\":{\"715\":1}}],[\"可以理解为就是一个文件\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"可以理解为\",{\"1\":{\"980\":1,\"1424\":1}}],[\"可以理解为一本书的目录\",{\"1\":{\"557\":1}}],[\"可以发现\",{\"1\":{\"979\":1}}],[\"可以基于\",{\"1\":{\"966\":1,\"1036\":1,\"1240\":1}}],[\"可以方便的预览\",{\"1\":{\"975\":1}}],[\"可以方便的监控很多应用\",{\"1\":{\"946\":1}}],[\"可以方便更灵活的控制项目\",{\"1\":{\"761\":1}}],[\"可以强制清除缓存\",{\"1\":{\"852\":1}}],[\"可以省略\",{\"1\":{\"838\":1,\"840\":1,\"841\":1}}],[\"可以配置成适应多种环境\",{\"1\":{\"834\":1}}],[\"可以配置多个\",{\"1\":{\"806\":1,\"808\":1}}],[\"可以重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型\",{\"1\":{\"832\":1}}],[\"可以大大简化命令行的输入\",{\"1\":{\"775\":1}}],[\"可以仅仅调用clean来清理工作目录\",{\"1\":{\"774\":1}}],[\"可以标识平面中唯一的一点\",{\"1\":{\"768\":1}}],[\"可以修改\",{\"1\":{\"768\":1}}],[\"可以自动配置应用为一个可执行的\",{\"1\":{\"1522\":1}}],[\"可以自动创建文件结构和自动生成pom\",{\"1\":{\"766\":1}}],[\"可以自己想想\",{\"1\":{\"1480\":1}}],[\"可以自由控制sql\",{\"1\":{\"890\":1}}],[\"可以自主选择合适的排序算法\",{\"1\":{\"403\":1}}],[\"可以不配置\",{\"1\":{\"765\":1}}],[\"可以作为一个单项或者双向队列\",{\"1\":{\"718\":1}}],[\"可以很好的利用cpu缓存访问数据\",{\"1\":{\"695\":1}}],[\"可以直接在方法上\",{\"1\":{\"881\":1}}],[\"可以直接跳过前面基础引入部分\",{\"1\":{\"795\":1}}],[\"可以直接重用一部分\",{\"1\":{\"682\":1}}],[\"可以直接从物化视图或汇总表中获取\",{\"1\":{\"567\":1}}],[\"可以利用\",{\"1\":{\"657\":1}}],[\"可以利用shard很好的横向扩展\",{\"1\":{\"474\":1}}],[\"可以将文件映射到内存中\",{\"1\":{\"1478\":1}}],[\"可以将消息均匀地分布在不同的节点上\",{\"1\":{\"1442\":1}}],[\"可以将内存中的数据写入磁盘\",{\"1\":{\"1418\":1}}],[\"可以将内存中的数据保存在磁盘中\",{\"1\":{\"655\":1}}],[\"可以将对象序列化成二进制数组\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"可以将用户\",{\"1\":{\"721\":1}}],[\"可以将\",{\"1\":{\"721\":1}}],[\"可以将表按字段切开\",{\"1\":{\"579\":1}}],[\"可以节省存储空间\",{\"0\":{\"602\":1}}],[\"可以把所有的可能存在的key放到一个大的bitmap中\",{\"1\":{\"1159\":1,\"1339\":1}}],[\"可以把运行时的问题提前到编译时期\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"可以把pom中很多相同的配置提取出来\",{\"1\":{\"778\":1}}],[\"可以把一个表的数据\",{\"1\":{\"583\":2}}],[\"可以把一个宽表的字段按访问频次\",{\"1\":{\"583\":1}}],[\"可以把多个表按业务耦合松紧归类\",{\"1\":{\"583\":1}}],[\"可以把文章下载到本地吗\",{\"0\":{\"114\":1}}],[\"可以获取表的碎片化信息\",{\"1\":{\"574\":1}}],[\"可以获取表的状态信息\",{\"1\":{\"574\":1}}],[\"可以参考\",{\"1\":{\"568\":1}}],[\"可以考虑读写锁\",{\"1\":{\"1476\":1}}],[\"可以考虑将登录信息等重要信息存放为session\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"可以考虑将它们分开处理\",{\"1\":{\"567\":1}}],[\"可以考虑使用物化视图或汇总表来存储查询结果\",{\"1\":{\"567\":1}}],[\"可以考虑创建一个包含这些列的复合索引\",{\"1\":{\"567\":1}}],[\"可以使得每个节点包含更多的键值\",{\"1\":{\"566\":1}}],[\"可以使用内存映射来提高文件的读取速度\",{\"1\":{\"1478\":1}}],[\"可以使用下面的语法\",{\"1\":{\"980\":1}}],[\"可以使用下面的简便语法\",{\"1\":{\"980\":1}}],[\"可以使用命令git\",{\"1\":{\"979\":1}}],[\"可以使用一部分\",{\"1\":{\"683\":1}}],[\"可以使用这个\",{\"1\":{\"677\":1}}],[\"可以使用information\",{\"1\":{\"643\":1}}],[\"可以使用乐观锁\",{\"1\":{\"636\":1}}],[\"可以使用lock\",{\"1\":{\"628\":1}}],[\"可以使用\",{\"1\":{\"574\":1,\"882\":1,\"981\":1,\"990\":1,\"1446\":1,\"1478\":1}}],[\"可以使用69年\",{\"1\":{\"441\":1}}],[\"可以使用状态模式来管理状态转换\",{\"0\":{\"197\":1}}],[\"可以使用查找表\",{\"0\":{\"194\":1}}],[\"可以使用三元运算符来简化代码\",{\"0\":{\"191\":1}}],[\"可以领取回\",{\"1\":{\"541\":1}}],[\"可以看做一个独立的\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"可以看出转换后的\",{\"1\":{\"504\":1}}],[\"可以看到指令重排之后\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"可以看到用户在排行榜里的排名\",{\"1\":{\"720\":1}}],[\"可以看到\",{\"1\":{\"618\":1,\"974\":1,\"1398\":1}}],[\"可以看到他的类型是\",{\"1\":{\"541\":1}}],[\"可以看到我们的es版本信息\",{\"1\":{\"460\":1}}],[\"可以看到dubbo服务地外提供的接口\",{\"1\":{\"176\":1}}],[\"可以看到很多脚本文件\",{\"1\":{\"176\":1}}],[\"可以让我们拿到spring容器的些资源\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"可以让我们在\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"可以让我们的开发进一步\",{\"1\":{\"664\":1}}],[\"可以让我们的搜索引擎更高效\",{\"1\":{\"481\":1}}],[\"可以让对象数组独立检索\",{\"1\":{\"504\":1}}],[\"可以转换为\",{\"1\":{\"497\":1}}],[\"可以优先考虑使用\",{\"1\":{\"497\":1}}],[\"可以用在类型参数的位置\",{\"1\":{\"1424\":1}}],[\"可以用来开发网站\",{\"1\":{\"1408\":1}}],[\"可以用来会横切多个对象\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"可以用来实现诸如查找在指定地理区域内相关的文档\",{\"1\":{\"506\":1}}],[\"可以用于线程间的同步\",{\"1\":{\"1446\":1}}],[\"可以用于多线程计算数据\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"可以用于过滤\",{\"1\":{\"496\":1}}],[\"可以用作数据库\",{\"1\":{\"677\":1}}],[\"可以用2个哈希函数来模拟k个哈希函数\",{\"1\":{\"392\":1}}],[\"可以通过反射读取\",{\"1\":{\"1402\":1}}],[\"可以通过提高初始容量和负载因子来减少冲突及拉链长度\",{\"1\":{\"1380\":1}}],[\"可以通过下标直接定位元素\",{\"1\":{\"1074\":1,\"1269\":1}}],[\"可以通过版本号使用乐观并发控制\",{\"1\":{\"1035\":1,\"1239\":1}}],[\"可以通过一小段描述信息\",{\"1\":{\"761\":1}}],[\"可以通过优化语法或者配置优化器\",{\"1\":{\"590\":1}}],[\"可以通过对象类型来存储二级文档\",{\"1\":{\"503\":1}}],[\"可以通过设置最少投票通过数量\",{\"1\":{\"1031\":1,\"1235\":1}}],[\"可以通过设置来转换成合适的类型\",{\"1\":{\"492\":1}}],[\"可以通过设定该值设定字段的默认值\",{\"1\":{\"487\":1}}],[\"可以通过\",{\"1\":{\"489\":1,\"574\":1,\"664\":1,\"1133\":1,\"1318\":1}}],[\"可以通过上面的命令查询设备索引号\",{\"1\":{\"162\":1}}],[\"可以设计一个高性能\",{\"1\":{\"1408\":1}}],[\"可以设成\",{\"1\":{\"484\":1}}],[\"可以设置消息的确认级别\",{\"1\":{\"1452\":1}}],[\"可以设置较长的过期时间\",{\"1\":{\"1430\":1}}],[\"可以设置较短的过期时间\",{\"1\":{\"1430\":1}}],[\"可以设置\",{\"1\":{\"1035\":1,\"1239\":1}}],[\"可以设置在多值字段的数据上火分词字段上\",{\"1\":{\"493\":1}}],[\"可以设置maxrate\",{\"1\":{\"151\":1}}],[\"可以设置最多3层目录\",{\"1\":{\"123\":1}}],[\"可以对一个字段提供多种索引模式\",{\"1\":{\"493\":1}}],[\"可以对\",{\"1\":{\"484\":1}}],[\"可以提高数据的读写效率\",{\"1\":{\"1478\":1}}],[\"可以提高并发性\",{\"1\":{\"634\":1}}],[\"可以提升性能和并发\",{\"1\":{\"1000\":1,\"1209\":1}}],[\"可以提升集群整体的吞吐量和性能\",{\"1\":{\"474\":1}}],[\"可以提示它跳转到注册页面\",{\"1\":{\"214\":1}}],[\"可以非常方便\",{\"1\":{\"454\":1}}],[\"可以说是当下最先进\",{\"1\":{\"453\":1}}],[\"可以跟着整个教程做一个练习\",{\"1\":{\"450\":1,\"464\":1,\"481\":1,\"513\":1}}],[\"可以表示的最大正整数是\",{\"1\":{\"440\":2}}],[\"可以表示的数值范围是\",{\"1\":{\"440\":1}}],[\"可以部署在1024个节点\",{\"1\":{\"441\":1}}],[\"可以部署在\",{\"1\":{\"440\":1}}],[\"可以得到k个key被hash过后的数\",{\"1\":{\"392\":1}}],[\"可以得到n个key被hash过后的数\",{\"1\":{\"386\":1}}],[\"可以判断数据绝对不存在\",{\"1\":{\"387\":1}}],[\"可以在等待\",{\"1\":{\"1478\":1}}],[\"可以在各种场景下发挥作用\",{\"1\":{\"1434\":1}}],[\"可以在静态方法内使用类型参数\",{\"1\":{\"1424\":1}}],[\"可以在非泛型类上使用\",{\"1\":{\"1424\":1}}],[\"可以在哪些实际场景中使用\",{\"1\":{\"1408\":1}}],[\"可以在哪些cpu上运行等等\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"可以在程序运行期间动态的将某段代码切入到指定的方法\",{\"1\":{\"1408\":1}}],[\"可以在sql内直接书写带有物理分页的参数来完成物理分页功能\",{\"1\":{\"1138\":1,\"1323\":1}}],[\"可以在公众号回复\",{\"1\":{\"949\":1}}],[\"可以在公众号留言\",{\"1\":{\"250\":1}}],[\"可以在下面引用\",{\"1\":{\"907\":1}}],[\"可以在切入点前后织入代码\",{\"1\":{\"752\":1}}],[\"可以在\",{\"1\":{\"589\":1,\"1410\":1}}],[\"可以在这些列上建立组合索引\",{\"1\":{\"565\":1}}],[\"可以在常数时间复杂度内定位到目标数据\",{\"1\":{\"562\":1}}],[\"可以在不修改代码的情况下\",{\"1\":{\"222\":1}}],[\"可以解耦具体的日志实现\",{\"1\":{\"222\":1}}],[\"可以解决session的问题\",{\"1\":{\"123\":1}}],[\"可以google一下\",{\"1\":{\"152\":1}}],[\"可以进行重定向或者进行新的代理\",{\"1\":{\"123\":1}}],[\"可以讲client\",{\"1\":{\"123\":1}}],[\"可以根据环境部署不同的\",{\"1\":{\"1408\":1}}],[\"可以根据单词快速获取包含这个单词的文档列表\",{\"1\":{\"477\":1}}],[\"可以根据机器配置定义权重\",{\"1\":{\"123\":1}}],[\"可以根据文件结构将它们转换为不同的页面\",{\"1\":{\"24\":1}}],[\"可以联系我和我交流一下我的联系方式\",{\"1\":{\"115\":1}}],[\"可以学吗\",{\"0\":{\"115\":1}}],[\"可以的\",{\"1\":{\"114\":1,\"1408\":1}}],[\"可以前往代码仓库点个免费的\",{\"1\":{\"1\":1}}],[\"客户机首次向servlet发出请求时会加载\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"客户端再次发送确认消息\",{\"1\":{\"1091\":1,\"1284\":1}}],[\"客户端浏览器将再次向服务器发出请求\",{\"1\":{\"1089\":1,\"1282\":1}}],[\"客户端的跳转\",{\"1\":{\"1089\":1,\"1282\":1}}],[\"客户端和channel进行通信\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"客户端和服务端的引导类\",{\"1\":{\"991\":1}}],[\"客户端在和集群连接时\",{\"0\":{\"1032\":1,\"1236\":1}}],[\"客户端发送一个\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"客户端向服务器发出取消连接请求\",{\"1\":{\"1091\":1,\"1284\":1}}],[\"客户端向服务器发出连接请求等待服务器确认\",{\"1\":{\"1091\":1,\"1284\":1}}],[\"客户端向服务器再次发出确认信息\",{\"1\":{\"1091\":1,\"1284\":1}}],[\"客户端向\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"客户端\",{\"0\":{\"705\":1},\"1\":{\"1018\":1,\"1123\":1,\"1224\":1,\"1311\":1}}],[\"客户端连接\",{\"1\":{\"660\":1}}],[\"客户端连接后整体使用和linux很相似\",{\"1\":{\"177\":1}}],[\"客户端提供改变的属性\",{\"1\":{\"206\":1}}],[\"客户端提供改变后的完整资源\",{\"1\":{\"206\":1}}],[\"客户端请求头部的缓冲区大小\",{\"1\":{\"123\":2}}],[\"客户请求头缓冲大小\",{\"1\":{\"123\":1}}],[\"或经过指定的时间后重新等待\",{\"1\":{\"1446\":1}}],[\"或其子类型\",{\"1\":{\"1424\":1}}],[\"或其他方法\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"或注解\",{\"1\":{\"1416\":1}}],[\"或注解来配置\",{\"1\":{\"1416\":1}}],[\"或注解的配置文件得到映射语句\",{\"1\":{\"1416\":1}}],[\"或错误使用\",{\"1\":{\"1408\":1}}],[\"或是想更深入学习的内容\",{\"1\":{\"1404\":1}}],[\"或是0\",{\"1\":{\"414\":1}}],[\"或第三方工具\",{\"1\":{\"1400\":1}}],[\"或为静态变量赋值\",{\"1\":{\"1392\":1}}],[\"或元空间\",{\"1\":{\"1388\":3}}],[\"或初始化bean的时候需要注入另一个尚末初始化的依赖时\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"或启用主题日志压缩功能\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"或重新装入\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"或类名和包名等\",{\"1\":{\"835\":1}}],[\"或完全限定资源定位符\",{\"1\":{\"835\":1}}],[\"或页面的\",{\"1\":{\"722\":1}}],[\"或切分后数据量行数巨大\",{\"1\":{\"581\":1}}],[\"或以上版本环境\",{\"1\":{\"456\":1}}],[\"或趋势递增\",{\"1\":{\"438\":1}}],[\"或主键冲突问题\",{\"1\":{\"436\":1}}],[\"或msd\",{\"1\":{\"427\":1}}],[\"或所谓的箱排序\",{\"1\":{\"401\":1}}],[\"或rear需要在\",{\"1\":{\"341\":1}}],[\"或者前端在判断时也可以写更简洁的代码\",{\"1\":{\"1494\":1}}],[\"或者称为\",{\"1\":{\"1494\":1}}],[\"或者直接发送下一条消息而不等待确认\",{\"1\":{\"1452\":1}}],[\"或者用于构建实时分析和监控系统\",{\"1\":{\"1432\":1}}],[\"或者垃圾对象未被清除\",{\"1\":{\"1396\":1}}],[\"或者该key对应的数据insert之后清理缓存\",{\"1\":{\"1159\":1,\"1339\":1}}],[\"或者时间戳\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"或者多个密钥共享一个hashcode\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"或者在全局的mybatis\",{\"1\":{\"853\":1}}],[\"或者首先需要干活的人\",{\"1\":{\"715\":1}}],[\"或者从集群中断开\",{\"1\":{\"1030\":1,\"1234\":1}}],[\"或者从压缩列表中删除节点\",{\"1\":{\"696\":1}}],[\"或者从script访问字段值\",{\"1\":{\"493\":1}}],[\"或者哈希键的底层实现时\",{\"1\":{\"689\":1}}],[\"或者更新已存在成员的分数\",{\"1\":{\"670\":1}}],[\"或者尾部\",{\"1\":{\"667\":1}}],[\"或者使用临时表来存储中间结果\",{\"1\":{\"567\":1}}],[\"或者完成某个任务\",{\"1\":{\"539\":1}}],[\"或者是自定义的路由键\",{\"1\":{\"1470\":1}}],[\"或者是其接口的实现类\",{\"1\":{\"1041\":1,\"1242\":1}}],[\"或者是其直接或间接子类\",{\"1\":{\"1041\":1,\"1242\":1}}],[\"或者是同步回写\",{\"1\":{\"999\":1,\"1208\":1}}],[\"或者是\",{\"1\":{\"537\":1}}],[\"或者大于\",{\"1\":{\"417\":1}}],[\"或者每个结点的值都小于或等于其左右孩子结点的值\",{\"1\":{\"417\":1}}],[\"或者存在\",{\"1\":{\"387\":1}}],[\"或者说区块链底层的数据结构\",{\"1\":{\"263\":1}}],[\"或者\",{\"1\":{\"228\":1,\"252\":1,\"484\":1,\"499\":1,\"509\":1,\"693\":1,\"721\":1,\"755\":1,\"979\":1,\"1028\":1,\"1050\":1,\"1133\":1,\"1169\":1,\"1176\":1,\"1183\":3,\"1232\":1,\"1251\":1,\"1318\":1,\"1346\":1,\"1353\":1,\"1358\":3,\"1402\":1,\"1424\":1,\"1446\":1}}],[\"或者修改返回值的格式\",{\"1\":{\"209\":1}}],[\"或者防止出现异常\",{\"1\":{\"149\":1}}],[\"或\",{\"1\":{\"123\":1,\"341\":2,\"424\":1,\"440\":1,\"574\":1,\"578\":1,\"589\":1,\"600\":1,\"842\":1,\"1005\":1,\"1120\":1,\"1135\":1,\"1149\":1,\"1214\":1,\"1308\":1,\"1320\":1,\"1332\":1,\"1520\":1}}],[\"值来代表当前的\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"值相等\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"值相同时\",{\"1\":{\"1073\":1,\"1268\":1}}],[\"值进行比对\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"值加一\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"值与数组长度减1的值进行按位与操作\",{\"1\":{\"1080\":1,\"1275\":1}}],[\"值将\",{\"1\":{\"1073\":1,\"1268\":1}}],[\"值存在\",{\"1\":{\"1072\":1,\"1267\":1}}],[\"值得一提的是\",{\"1\":{\"698\":1}}],[\"值得注意的\",{\"1\":{\"667\":1}}],[\"值对象\",{\"1\":{\"698\":1}}],[\"值有字符串\",{\"1\":{\"682\":1}}],[\"值是我们设置的变量值\",{\"1\":{\"1386\":1}}],[\"值是二进制安全的\",{\"1\":{\"665\":1}}],[\"值是对应的指数\",{\"1\":{\"306\":1}}],[\"值问题\",{\"1\":{\"589\":1}}],[\"值的\",{\"1\":{\"1073\":1,\"1268\":1}}],[\"值的长度不能超过512mb\",{\"1\":{\"666\":1}}],[\"值的列上添加索引\",{\"1\":{\"589\":1}}],[\"值的比较有特殊性\",{\"1\":{\"564\":1}}],[\"值判断\",{\"0\":{\"589\":1},\"1\":{\"1149\":1,\"1332\":1}}],[\"值时的处理策略\",{\"1\":{\"487\":1}}],[\"值为\",{\"1\":{\"687\":1}}],[\"值为1\",{\"1\":{\"475\":1}}],[\"值为5\",{\"1\":{\"475\":1}}],[\"值在\",{\"1\":{\"323\":1}}],[\"值紧跟着\",{\"1\":{\"320\":1}}],[\"值\",{\"1\":{\"123\":1,\"564\":2,\"589\":2,\"660\":2,\"665\":1,\"668\":1,\"682\":1,\"687\":1,\"721\":1,\"723\":1,\"1029\":1,\"1073\":1,\"1114\":1,\"1132\":1,\"1149\":1,\"1233\":1,\"1268\":1,\"1302\":1,\"1317\":1,\"1332\":1}}],[\"第6问中我们提到了生产者发送消息有三种方式\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"第0位\",{\"1\":{\"1027\":1,\"1231\":1}}],[\"第三个\",{\"1\":{\"1402\":1}}],[\"第三\",{\"1\":{\"579\":1,\"1169\":1,\"1346\":1}}],[\"第三步\",{\"1\":{\"428\":1,\"976\":1}}],[\"第三方注解\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"第三方\",{\"1\":{\"123\":2,\"1169\":3,\"1346\":3}}],[\"第二季会从大白话源码的角度出发\",{\"1\":{\"1378\":1}}],[\"第二类\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"第二种setter方法\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"第二种的缺点就是每次用户请求过来都要判断缓存失效\",{\"1\":{\"1009\":1,\"1218\":1}}],[\"第二阶段\",{\"0\":{\"961\":1}}],[\"第二次读到之前不存在的行\",{\"1\":{\"638\":1}}],[\"第二次是在存储单元中查找键\",{\"1\":{\"123\":1}}],[\"第二个\",{\"1\":{\"1402\":1}}],[\"第二个参数\",{\"1\":{\"810\":2}}],[\"第二个的含义可以视为\",{\"1\":{\"589\":1}}],[\"第二个语句将\",{\"1\":{\"589\":1}}],[\"第二个整数是3\",{\"1\":{\"412\":1}}],[\"第二个整数\",{\"1\":{\"306\":1}}],[\"第二是跨页\",{\"1\":{\"579\":1}}],[\"第二步\",{\"1\":{\"428\":1,\"588\":1,\"976\":1}}],[\"第二天可以晚半小时来\",{\"1\":{\"270\":1}}],[\"第一版\",{\"0\":{\"1206\":1}}],[\"第一类\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"第一种构造方法注入的情况\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"第一种构造方法注入的情况下\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"第一种的缺点是维护大量缓存的\",{\"1\":{\"1009\":1,\"1218\":1}}],[\"第一阶段\",{\"0\":{\"960\":1}}],[\"第一是由于数据量本身大\",{\"1\":{\"579\":1}}],[\"第一步\",{\"1\":{\"428\":1,\"976\":1}}],[\"第一个\",{\"1\":{\"1402\":1}}],[\"第一个想到的一定是保证内存可见性\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"第一个参数\",{\"1\":{\"810\":2}}],[\"第一个的含义可以视为\",{\"1\":{\"589\":1}}],[\"第一个非叶子结点\",{\"1\":{\"417\":1}}],[\"第一个整数\",{\"1\":{\"306\":1}}],[\"第一个新创建的账户拥有管理员权限\",{\"1\":{\"296\":1}}],[\"第一次调用这个接口的同学可能并不知道返回的状态码含义\",{\"1\":{\"1494\":1}}],[\"第一次提交\",{\"1\":{\"978\":1}}],[\"第一次类加载时执行\",{\"1\":{\"711\":1}}],[\"第一次查询某个字段时\",{\"1\":{\"493\":1}}],[\"第一次查找到元素的位置\",{\"1\":{\"337\":1}}],[\"第一次\",{\"1\":{\"342\":1}}],[\"第一次进来没有账户\",{\"1\":{\"296\":1}}],[\"第一次是确定存储单元的地址\",{\"1\":{\"123\":1}}],[\"第一行已经读完\",{\"1\":{\"111\":1}}],[\"使开发者只需要关注\",{\"1\":{\"1416\":1}}],[\"使开发者专注于业务开发而无需过多考虑配置相关操作\",{\"1\":{\"1181\":1,\"1356\":1}}],[\"使\",{\"1\":{\"1408\":1}}],[\"使我们可以更加专注于业务开发\",{\"1\":{\"1408\":1}}],[\"使我们不用关心框架之间的兼容性\",{\"1\":{\"454\":1}}],[\"使得在大规模数据集上进行搜索和分析变得更加容易\",{\"1\":{\"1458\":1}}],[\"使得在查询特定值的时候非常高效\",{\"1\":{\"562\":1}}],[\"使得它可以处理大量的消息并保证数据的可靠性\",{\"1\":{\"1438\":1}}],[\"使得泛型更加灵活实用\",{\"1\":{\"1424\":1}}],[\"使得数据库交互更加灵活\",{\"1\":{\"1416\":1}}],[\"使得并发标记成为可能\",{\"1\":{\"1396\":1}}],[\"使得cms并发标记清除算法成为可能\",{\"1\":{\"1396\":1}}],[\"使得\",{\"1\":{\"1190\":1,\"1365\":1}}],[\"使得每一个上下文都专注于一个特定的层次\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"使得a\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"使得计算key位置的操作能够充分散列均匀\",{\"1\":{\"1078\":1,\"1273\":1}}],[\"使得高16位的影响能够均匀稀释到低16位中\",{\"1\":{\"1078\":1,\"1273\":1}}],[\"使得从数据库在任何地方同步树时\",{\"1\":{\"652\":1}}],[\"使得单一数据库\",{\"1\":{\"578\":1}}],[\"使得单一数据库的数据量变小来缓解单一数据库的性能问题\",{\"1\":{\"578\":1}}],[\"使得查询性能更加稳定\",{\"1\":{\"566\":1}}],[\"使得大家能够对倒排索引有一个宏观而直接的感受\",{\"1\":{\"478\":1}}],[\"使得范围查询和排序都很快\",{\"1\":{\"323\":1}}],[\"使其状态与主服务器一致\",{\"1\":{\"1422\":1}}],[\"使其继续满足堆定义\",{\"1\":{\"417\":1}}],[\"使其生效\",{\"1\":{\"142\":1}}],[\"使解析更容易\",{\"1\":{\"160\":1}}],[\"使每个url定向到同一个后端服务器\",{\"1\":{\"123\":1}}],[\"使在处理器中加速查找hash表键值成为可能\",{\"1\":{\"123\":1}}],[\"使用管控严格\",{\"1\":{\"1515\":1}}],[\"使用官方的\",{\"1\":{\"1514\":1}}],[\"使用起来比较复杂\",{\"1\":{\"1480\":1}}],[\"使用起来比较简单\",{\"1\":{\"1480\":1}}],[\"使用起来也顺手一些\",{\"1\":{\"238\":1}}],[\"使用通道来进行数据的读写操作\",{\"1\":{\"1478\":1}}],[\"使用缓冲区来处理数据\",{\"1\":{\"1478\":1}}],[\"使用缓存\",{\"1\":{\"1460\":1}}],[\"使用缓存技术\",{\"1\":{\"1408\":1}}],[\"使用缓存的目的\",{\"1\":{\"1000\":1,\"1209\":1}}],[\"使用elasticsearch提供的监控工具和api\",{\"1\":{\"1460\":1}}],[\"使用索引别名可以方便地切换索引版本或进行灰度发布\",{\"1\":{\"1460\":1}}],[\"使用kafka\",{\"1\":{\"1438\":1}}],[\"使用无边界的\",{\"1\":{\"1424\":1}}],[\"使用服务注册与发现\",{\"1\":{\"1408\":1}}],[\"使用服务器\",{\"1\":{\"440\":1}}],[\"使用降级策略保证核心服务可用\",{\"1\":{\"1408\":1}}],[\"使用限流手段控制流量\",{\"1\":{\"1408\":1}}],[\"使用能支撑高并发读写的数据库\",{\"1\":{\"1408\":1}}],[\"使用设计模式\",{\"1\":{\"1408\":1}}],[\"使用软引用或弱引用存放易变对象\",{\"1\":{\"1394\":1}}],[\"使用分片和副本\",{\"1\":{\"1460\":1}}],[\"使用分代回收\",{\"1\":{\"1394\":1}}],[\"使用分布式锁\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"使用weakreference例子\",{\"1\":{\"1394\":1}}],[\"使用类加载器加载一个类\",{\"1\":{\"1392\":1}}],[\"使用方便\",{\"1\":{\"1390\":1}}],[\"使用方案二比较多\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"使用主备两层缓存\",{\"1\":{\"1160\":1,\"1340\":1}}],[\"使用范围不同\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"使用链表否则使用红黑树\",{\"1\":{\"1073\":1,\"1268\":1}}],[\"使用redis的哈希表来存储多个键值对\",{\"1\":{\"1430\":1}}],[\"使用redis命令\",{\"1\":{\"1163\":1,\"1343\":1}}],[\"使用reentrantlock\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"使用resulttype不能完成自动映射\",{\"1\":{\"856\":1}}],[\"使用标志位停止\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"使用volatile变量能够保证\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"使用反序列化\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"使用cas\",{\"1\":{\"1476\":1}}],[\"使用cas进行检查时会发现它的值没有变化\",{\"1\":{\"1476\":1}}],[\"使用clone方法\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"使用class类的newinstance方法\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"使用constructor类的newinstance方法\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"使用new关键字\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"使用第一个边界类型xclass1作为原始类型\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"使用xclass作为原始类型\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"使用xml中的字符实体\",{\"0\":{\"863\":1}}],[\"使用大量的cpu\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"使用docker\",{\"0\":{\"1017\":1,\"1223\":1},\"1\":{\"1017\":1,\"1223\":1}}],[\"使用互斥锁\",{\"1\":{\"1006\":2,\"1215\":2}}],[\"使用案例\",{\"1\":{\"1001\":1,\"1210\":1}}],[\"使用上面的命令\",{\"1\":{\"980\":1}}],[\"使用工具类生成二维码\",{\"1\":{\"939\":2}}],[\"使用注解\",{\"1\":{\"1402\":1}}],[\"使用注解的元素\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"使用注解代替\",{\"1\":{\"893\":1}}],[\"使用注解控制事务方法的优点\",{\"1\":{\"893\":1}}],[\"使用者\",{\"1\":{\"893\":1}}],[\"使用枚举表述常量数据字典\",{\"1\":{\"892\":1}}],[\"使用jdbc的getgeneratedkeys获取数据库自增主键值\",{\"1\":{\"880\":1}}],[\"使用列别名替换列名\",{\"1\":{\"880\":1}}],[\"使用列别名\",{\"1\":{\"880\":1}}],[\"使用自增主键\",{\"1\":{\"880\":1}}],[\"使用到大于号\",{\"1\":{\"863\":1}}],[\"使用到插入排序\",{\"1\":{\"405\":1}}],[\"使用$\",{\"1\":{\"842\":2}}],[\"使用映射器接口实现类的完全限定类名\",{\"1\":{\"835\":1}}],[\"使用相对于类路径的资源引用\",{\"1\":{\"835\":1}}],[\"使用扫描包\",{\"1\":{\"831\":1}}],[\"使用非常方便\",{\"1\":{\"827\":1,\"1074\":1,\"1269\":1}}],[\"使用非常广泛\",{\"1\":{\"657\":1}}],[\"使用动态代理之后和方法的参数类型一致\",{\"1\":{\"826\":4,\"839\":1}}],[\"使用动态代理之后和方法的返回类型一致\",{\"1\":{\"826\":1}}],[\"使用动态代理之后要求和方法名保持一致\",{\"1\":{\"826\":4,\"839\":1}}],[\"使用动态代理改造crud\",{\"0\":{\"825\":1}}],[\"使用占位符替换\",{\"1\":{\"826\":1}}],[\"使用别名进行索引管理\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"使用别名\",{\"1\":{\"818\":1,\"878\":1}}],[\"使用idea构建maven工程\",{\"0\":{\"797\":1}}],[\"使用insert\",{\"1\":{\"640\":1}}],[\"使用合适的单元测试框架运行测试\",{\"1\":{\"776\":1}}],[\"使用私服的仓库构件下载\",{\"1\":{\"768\":1}}],[\"使用命令\",{\"1\":{\"979\":1}}],[\"使用命令行创建web项目\",{\"0\":{\"767\":1}}],[\"使用命令模式\",{\"0\":{\"196\":1}}],[\"使用它\",{\"1\":{\"765\":1}}],[\"使用mapper接口不用写接口实现类即可完成数据库操作\",{\"1\":{\"827\":1}}],[\"使用maven方式管理jar依赖的好处\",{\"1\":{\"763\":1}}],[\"使用mybatis的方式非常相似\",{\"1\":{\"824\":1}}],[\"使用musl\",{\"1\":{\"244\":1}}],[\"使用切点增强的时机注解\",{\"1\":{\"752\":1}}],[\"使用连接池优势\",{\"1\":{\"708\":1}}],[\"使用称手的工具\",{\"1\":{\"706\":1}}],[\"使用list结构来持有链表\",{\"1\":{\"684\":1}}],[\"使用listnode是可以组成链表了\",{\"1\":{\"684\":1}}],[\"使用一个类的名称\",{\"1\":{\"1392\":1}}],[\"使用一个\",{\"1\":{\"684\":1}}],[\"使用很方便\",{\"1\":{\"652\":1}}],[\"使用普通的select语句读取数据及版本号\",{\"1\":{\"642\":1}}],[\"使用悲观锁\",{\"1\":{\"636\":1}}],[\"使用乐观锁\",{\"1\":{\"636\":1}}],[\"使用数据库默认的事务隔离级别\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"使用数据库的锁定命令\",{\"1\":{\"633\":1}}],[\"使用数据版本\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"使用数组作为队列的容器\",{\"1\":{\"341\":1}}],[\"使用时间戳来控制事务的顺序\",{\"1\":{\"632\":1}}],[\"使用时并不是完全不走索引\",{\"1\":{\"590\":1}}],[\"使用基于游标的方法或临时表方法之前\",{\"0\":{\"608\":1}}],[\"使用覆盖索引可以避免访问数据行本身\",{\"1\":{\"573\":1}}],[\"使用覆盖索引\",{\"1\":{\"573\":1}}],[\"使用物化视图或汇总表\",{\"1\":{\"567\":1}}],[\"使用复合索引\",{\"1\":{\"567\":1}}],[\"使用联合索引时遵循最左前缀集合\",{\"1\":{\"558\":1}}],[\"使用搜索\",{\"1\":{\"464\":1}}],[\"使用频率非常高\",{\"1\":{\"450\":1}}],[\"使用的advice\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"使用的资源不同\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"使用的时候需要实例化对象\",{\"1\":{\"440\":1}}],[\"使用的映射函数能够将输入的\",{\"1\":{\"401\":1}}],[\"使用字符串去拼接sql\",{\"1\":{\"842\":1}}],[\"使用字典\",{\"1\":{\"406\":1}}],[\"使用字段\",{\"1\":{\"123\":3}}],[\"使用了\",{\"1\":{\"390\":1,\"666\":1}}],[\"使用p指针来遍历队列\",{\"1\":{\"342\":1}}],[\"使用这个变量表示链队的数据容量\",{\"1\":{\"342\":1}}],[\"使用以下方法添加的时间复杂度为o\",{\"1\":{\"339\":1}}],[\"使用synchronized时\",{\"1\":{\"1476\":1}}],[\"使用synchronized\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"使用system\",{\"1\":{\"338\":1}}],[\"使用select\",{\"1\":{\"627\":1}}],[\"使用show\",{\"1\":{\"574\":1}}],[\"使用switch\",{\"0\":{\"192\":1}}],[\"使用质因数分解法找到两个不包含数字0的整数\",{\"1\":{\"306\":1}}],[\"使用源代码管理系统\",{\"1\":{\"243\":1}}],[\"使用我的推广链接还有优惠\",{\"1\":{\"238\":1}}],[\"使用体验\",{\"1\":{\"209\":1}}],[\"使用异常处理来简化错误条件的处理\",{\"0\":{\"200\":1}}],[\"使用异常处理\",{\"0\":{\"200\":1}}],[\"使用断言来确保代码的预设条件被满足\",{\"0\":{\"199\":1}}],[\"使用断言\",{\"0\":{\"199\":1}}],[\"使用状态模式\",{\"0\":{\"197\":1}}],[\"使用函数或方法\",{\"0\":{\"195\":1}}],[\"使用查找表\",{\"0\":{\"194\":1}}],[\"使用策略模式\",{\"0\":{\"193\":1}}],[\"使用三元运算符\",{\"0\":{\"191\":1}}],[\"使用早返回\",{\"0\":{\"190\":1}}],[\"使用场景又是什么\",{\"1\":{\"1424\":1}}],[\"使用场景\",{\"0\":{\"130\":1},\"1\":{\"624\":2,\"627\":1,\"628\":1,\"629\":1,\"630\":1,\"650\":1}}],[\"使用默认的client\",{\"1\":{\"123\":1}}],[\"使用fs=\",{\"1\":{\"111\":1}}],[\"使用\",{\"0\":{\"864\":1},\"1\":{\"100\":1,\"183\":1,\"286\":1,\"428\":1,\"440\":1,\"453\":1,\"454\":1,\"490\":1,\"569\":1,\"570\":1,\"574\":1,\"644\":1,\"657\":1,\"666\":1,\"682\":1,\"689\":1,\"721\":1,\"752\":1,\"790\":1,\"844\":1,\"845\":1,\"852\":1,\"864\":1,\"875\":1,\"884\":1,\"893\":1,\"976\":1,\"979\":3,\"990\":2,\"1000\":1,\"1016\":3,\"1058\":1,\"1093\":2,\"1131\":1,\"1134\":1,\"1138\":1,\"1156\":1,\"1209\":1,\"1222\":3,\"1256\":1,\"1286\":2,\"1316\":1,\"1319\":1,\"1323\":1,\"1336\":1,\"1380\":1,\"1392\":1,\"1408\":2,\"1410\":1,\"1424\":1,\"1476\":1,\"1478\":1,\"1480\":1,\"1523\":1}}],[\"使用指南\",{\"0\":{\"116\":1},\"1\":{\"42\":2},\"2\":{\"17\":1,\"19\":1,\"38\":1,\"45\":1,\"46\":1}}],[\"参与开发的每一成员只要实现自己的类就可以了\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"参与计算\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"参数的值\",{\"1\":{\"1440\":3}}],[\"参数的类型\",{\"1\":{\"826\":4,\"839\":1}}],[\"参数等信息\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"参数对象中计算表达式的值\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"参数为\",{\"1\":{\"1049\":1,\"1250\":1,\"1440\":2}}],[\"参数列表\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"参数列表必须相同\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"参数顺序不同\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"参数类型不同\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"参数类型变更等\",{\"1\":{\"210\":1}}],[\"参数数目不同\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"参数分页\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"参数说明\",{\"1\":{\"766\":1,\"767\":1}}],[\"参数值\",{\"1\":{\"752\":1}}],[\"参数名\",{\"1\":{\"752\":1}}],[\"参数\",{\"1\":{\"485\":1,\"486\":1,\"893\":1,\"1043\":5,\"1244\":5,\"1416\":1,\"1440\":1}}],[\"参数定义\",{\"0\":{\"391\":1}}],[\"参数不合法\",{\"1\":{\"214\":1}}],[\"参数错误\",{\"1\":{\"214\":1}}],[\"参数hash\",{\"1\":{\"123\":1}}],[\"参考底层指令\",{\"0\":{\"1481\":1}}],[\"参考业界大佬的优秀文章与经验\",{\"1\":{\"1400\":1}}],[\"参考一个很形象的例子\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"参考阅读\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"参考图\",{\"1\":{\"1055\":1,\"1253\":1}}],[\"参考资料\",{\"0\":{\"967\":1},\"1\":{\"1169\":1,\"1346\":1}}],[\"参考驼峰匹配\",{\"1\":{\"822\":1}}],[\"参考后面的resultmap\",{\"1\":{\"822\":1}}],[\"参考前一篇\",{\"1\":{\"591\":1}}],[\"参考官网阅读\",{\"1\":{\"589\":1}}],[\"参考官网api\",{\"1\":{\"491\":1}}],[\"参考官网\",{\"1\":{\"488\":1}}],[\"参考原文\",{\"1\":{\"441\":1}}],[\"参考来源互联网\",{\"1\":{\"167\":1,\"381\":1,\"400\":1,\"409\":1,\"417\":1,\"430\":1,\"650\":1,\"676\":1,\"704\":1,\"761\":1,\"795\":1}}],[\"参考\",{\"1\":{\"115\":1,\"277\":1,\"283\":1,\"286\":1,\"296\":1,\"328\":1,\"478\":1,\"590\":1,\"611\":1,\"668\":1,\"669\":1,\"696\":1,\"726\":1,\"769\":1,\"777\":1,\"779\":1,\"980\":1,\"982\":1,\"1025\":1,\"1150\":1,\"1229\":1,\"1333\":1}}],[\"默认会立即加载\",{\"1\":{\"1410\":1}}],[\"默认会当成字符串来处理\",{\"1\":{\"492\":1}}],[\"默认加载因子0\",{\"1\":{\"1406\":1}}],[\"默认初始容量16\",{\"1\":{\"1406\":1}}],[\"默认初始容量\",{\"1\":{\"1404\":1}}],[\"默认有3个classloader\",{\"1\":{\"1392\":1}}],[\"默认8\",{\"1\":{\"1380\":1}}],[\"默认传播行为\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"默认不打开二级缓存\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"默认不存储向量信息\",{\"1\":{\"493\":1}}],[\"默认也是采用\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"默认一级缓存是开启的\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"默认采用这种策略\",{\"1\":{\"1119\":1,\"1307\":1}}],[\"默认使用第一个存储\",{\"1\":{\"979\":1}}],[\"默认show第一个存储\",{\"1\":{\"979\":1}}],[\"默认的隔离级别\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"默认的hashcode方法\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"默认的访问地址是\",{\"1\":{\"975\":1}}],[\"默认的用空格分割\",{\"1\":{\"111\":1}}],[\"默认账号\",{\"1\":{\"951\":1}}],[\"默认匹配所有的请求\",{\"1\":{\"883\":1}}],[\"默认编译依赖范围\",{\"1\":{\"769\":1}}],[\"默认编码\",{\"1\":{\"123\":1}}],[\"默认跟ananlyzer是一致的\",{\"1\":{\"493\":1}}],[\"默认都是开启\",{\"1\":{\"493\":1}}],[\"默认为1\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"默认为第一个stash\",{\"1\":{\"979\":1}}],[\"默认为false\",{\"1\":{\"771\":1,\"772\":1}}],[\"默认为jar\",{\"1\":{\"768\":1}}],[\"默认为空字符串\",{\"1\":{\"751\":2}}],[\"默认为\",{\"1\":{\"485\":1,\"487\":1,\"711\":1,\"1028\":1,\"1035\":1,\"1232\":1,\"1239\":1}}],[\"默认为25\",{\"1\":{\"144\":1}}],[\"默认为200kbit\",{\"1\":{\"144\":1}}],[\"默认每个索引的\",{\"1\":{\"475\":1}}],[\"默认分词器\",{\"1\":{\"464\":1}}],[\"默认端口\",{\"1\":{\"660\":1}}],[\"默认端口9300\",{\"1\":{\"459\":1}}],[\"默认端口是\",{\"1\":{\"296\":1}}],[\"默认是原来大小的两倍\",{\"1\":{\"1075\":1,\"1270\":1}}],[\"默认是每隔\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"默认是tf\",{\"1\":{\"493\":1}}],[\"默认是true\",{\"1\":{\"493\":1}}],[\"默认是false\",{\"1\":{\"493\":1}}],[\"默认是有序的\",{\"1\":{\"405\":1}}],[\"默认是没有启用的\",{\"1\":{\"123\":1}}],[\"默认存储容器大小\",{\"1\":{\"338\":1}}],[\"默认启动的端口是\",{\"1\":{\"293\":1}}],[\"默认gnome桌面环境可能资源密集\",{\"1\":{\"239\":1}}],[\"默认情况下\",{\"1\":{\"833\":1,\"1117\":1,\"1120\":1,\"1305\":1,\"1308\":1}}],[\"默认情况下这个值的大小为指令proxy\",{\"1\":{\"123\":1}}],[\"默认情况也为分页大小\",{\"1\":{\"123\":1}}],[\"默认访问地址\",{\"1\":{\"123\":1}}],[\"默认\",{\"1\":{\"123\":1,\"464\":1,\"493\":1,\"500\":1,\"880\":1,\"1028\":1,\"1035\":1,\"1232\":1,\"1239\":1}}],[\"默认关闭\",{\"1\":{\"123\":1}}],[\"默认文件类型\",{\"1\":{\"123\":1}}],[\"默认值等\",{\"1\":{\"1402\":1}}],[\"默认值为false\",{\"1\":{\"771\":1}}],[\"默认值为\",{\"1\":{\"711\":1,\"778\":1}}],[\"默认值是100\",{\"1\":{\"493\":1}}],[\"默认值0\",{\"1\":{\"157\":1}}],[\"默认值\",{\"1\":{\"123\":3,\"711\":1,\"927\":1}}],[\"~gohlke\",{\"1\":{\"961\":1}}],[\"~\",{\"1\":{\"123\":9}}],[\"取而代之的是元空间\",{\"1\":{\"1388\":2}}],[\"取而代之提供了一套简单一致的\",{\"1\":{\"453\":1}}],[\"取一个partition对应的isr中最小的leo作为hw\",{\"1\":{\"1114\":1,\"1302\":1}}],[\"取回阶段\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"取消暂停容器\",{\"1\":{\"1020\":1,\"1226\":1}}],[\"取决于你的文档的大小\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"取决于\",{\"1\":{\"1017\":1,\"1223\":1}}],[\"取值\",{\"1\":{\"755\":1}}],[\"取值范围为从0到10\",{\"1\":{\"412\":1}}],[\"取出\",{\"1\":{\"660\":1}}],[\"取出文件的并集\",{\"1\":{\"111\":1}}],[\"取余之后的结果是一样的\",{\"1\":{\"386\":1,\"392\":1}}],[\"取得\",{\"1\":{\"123\":1}}],[\"kazjsfecs3y\",{\"1\":{\"1485\":1}}],[\"kafka能够保证消息的可靠性和一致性\",{\"1\":{\"1454\":1}}],[\"kafka真是个聪明的家伙\",{\"1\":{\"1454\":1}}],[\"kafka仍然会将其写入分区\",{\"1\":{\"1454\":1}}],[\"kafka引入了幂等性序列号\",{\"1\":{\"1454\":1}}],[\"kafka就会认为这是一条重复的消息\",{\"1\":{\"1454\":1}}],[\"kafka就会将该消息标记为已消费\",{\"1\":{\"1442\":1}}],[\"kafka会认为这是一条重复的消息\",{\"1\":{\"1454\":1}}],[\"kafka会将消息写入分区\",{\"1\":{\"1454\":1}}],[\"kafka会检查消息的序列号是否大于分区中最后一条消息的序列号\",{\"1\":{\"1454\":1}}],[\"kafka会检查消息的key是否已经存在于特定的主题分区中\",{\"1\":{\"1454\":1}}],[\"kafka会为每个分区维护一个递增的序列号\",{\"1\":{\"1454\":1}}],[\"kafka会使用这个序列号来判断消息的唯一性\",{\"1\":{\"1454\":1}}],[\"kafka会自动进行重试\",{\"1\":{\"1452\":1}}],[\"kafka相比传统消息系统有几个明显的优势\",{\"1\":{\"1450\":1}}],[\"kafka具有高度可扩展性\",{\"1\":{\"1450\":1}}],[\"kafka具有良好的可扩展性和可靠性\",{\"1\":{\"1436\":1}}],[\"kafka将消息存储在持久化的日志中\",{\"1\":{\"1450\":1}}],[\"kafka和传统消息系统有什么不同呢\",{\"1\":{\"1450\":1}}],[\"kafka与传统消息系统区别\",{\"0\":{\"1450\":1}}],[\"kafka与传统的消息中间件都具备系统解耦\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"kafkaproducer<>\",{\"1\":{\"1448\":1}}],[\"kafkademo\",{\"1\":{\"1448\":1}}],[\"kafka消息采用pull还是push\",{\"0\":{\"1448\":1}}],[\"kafka使用了一种叫做\",{\"1\":{\"1454\":1}}],[\"kafka使用zookeeper来管理分区和副本的状态\",{\"1\":{\"1444\":1}}],[\"kafka使用场景\",{\"0\":{\"1434\":1}}],[\"kafka可以并行处理大量的消息\",{\"1\":{\"1444\":1}}],[\"kafka通过消息的唯一标识\",{\"1\":{\"1454\":1}}],[\"kafka通过分区\",{\"1\":{\"1444\":1}}],[\"kafka通过将消息分为多个分区\",{\"1\":{\"1432\":1}}],[\"kafka是如何实现这个机制的呢\",{\"1\":{\"1452\":1}}],[\"kafka是如何实现高吞吐量和可伸缩性的呢\",{\"1\":{\"1444\":1}}],[\"kafka是一个非常强大的工具\",{\"1\":{\"1444\":1}}],[\"kafka是一个强大的分布式流处理平台\",{\"1\":{\"1444\":1}}],[\"kafka是一个分布式的消息队列\",{\"1\":{\"1442\":1}}],[\"kafka是一个分布式流处理平台\",{\"1\":{\"1432\":1,\"1450\":1}}],[\"kafka是一个高吞吐量的分布式消息系统\",{\"1\":{\"1448\":1}}],[\"kafka是一个高吞吐量的分布式消息队列\",{\"1\":{\"1434\":1}}],[\"kafka是一个高吞吐量\",{\"1\":{\"1438\":1}}],[\"kafkabroker\",{\"1\":{\"1444\":1}}],[\"kafka架构设计\",{\"0\":{\"1444\":1}}],[\"kafkaconsumer<>\",{\"1\":{\"1442\":1,\"1448\":1}}],[\"kafkaconsumer<string\",{\"1\":{\"1442\":1}}],[\"kafkaconsumerexample\",{\"1\":{\"1442\":1}}],[\"kafkaconsumer\",{\"1\":{\"1442\":1}}],[\"kafka保证了消息的顺序性和可靠性\",{\"1\":{\"1438\":1}}],[\"kafka采用了分布式的消息存储和复制机制\",{\"1\":{\"1438\":1}}],[\"kafka性能好在哪里\",{\"0\":{\"1438\":1}}],[\"kafka在处理实时数据和构建可靠的数据管道方面非常强大\",{\"1\":{\"1436\":1}}],[\"kafka在一些特定的使用情况下可能会有一些性能瓶颈\",{\"1\":{\"1436\":1}}],[\"kafka作为一个高吞吐量\",{\"1\":{\"1436\":1}}],[\"kafka并不是适合所有场景的银弹\",{\"1\":{\"1436\":1}}],[\"kafka提供了灵活的消息传递模型\",{\"1\":{\"1436\":1}}],[\"kafka有四个核心组件\",{\"1\":{\"1444\":1}}],[\"kafka有一个活跃的社区和丰富的生态系统\",{\"1\":{\"1436\":1}}],[\"kafka有很多优点\",{\"1\":{\"1436\":1}}],[\"kafka有哪些常见的使用场景呢\",{\"1\":{\"1432\":1}}],[\"kafka优缺点\",{\"0\":{\"1436\":1}}],[\"kafka还支持消息的持久化存储和数据复制\",{\"1\":{\"1450\":1}}],[\"kafka还有哪些特点\",{\"1\":{\"1450\":1}}],[\"kafka还提供了消费者组\",{\"1\":{\"1438\":1}}],[\"kafka还提供了大多数消息系统难以实现的消息顺序性保障及回溯性消费的功能\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"kafka还利用了磁盘顺序写和零拷贝技术\",{\"1\":{\"1438\":1}}],[\"kafka还可以用于构建事件驱动的架构\",{\"1\":{\"1434\":1}}],[\"kafka非常适合用于日志收集和分析\",{\"1\":{\"1434\":1}}],[\"kafka的设计确实很巧妙\",{\"1\":{\"1454\":1}}],[\"kafka的幂等性\",{\"0\":{\"1454\":1}}],[\"kafka的ack机制是确保消息可靠性的关键\",{\"1\":{\"1452\":1}}],[\"kafka的ack机制是通过生产者和消费者之间的协作来实现的\",{\"1\":{\"1452\":1}}],[\"kafka的ack机制\",{\"0\":{\"1452\":1}}],[\"kafka的可扩展性使得它能够适应不断增长的数据需求\",{\"1\":{\"1450\":1}}],[\"kafka的持久化存储和数据复制功能确保了消息的可靠性和容错性\",{\"1\":{\"1450\":1}}],[\"kafka的高吞吐量和低延迟使得它能够处理大规模的数据流\",{\"1\":{\"1450\":1}}],[\"kafka的高性能得益于它的设计理念和架构\",{\"1\":{\"1438\":1}}],[\"kafka的高性能确实让人印象深刻\",{\"1\":{\"1436\":1}}],[\"kafka的这些特点使得它成为处理实时数据流的理想选择\",{\"1\":{\"1450\":1}}],[\"kafka的这种设计使得它具有很高的可伸缩性和容错性\",{\"1\":{\"1450\":1}}],[\"kafka的架构设计非常注重可靠性和容错性\",{\"1\":{\"1444\":1}}],[\"kafka的架构设计非常简洁明了\",{\"1\":{\"1444\":1}}],[\"kafka的消费者可以通过设置适当的参数来控制消息的提交和重试机制\",{\"1\":{\"1438\":1}}],[\"kafka的消息传递机制基于发布\",{\"1\":{\"1438\":1}}],[\"kafka的消息发布和订阅模型就像是一个咖啡馆\",{\"1\":{\"1432\":1}}],[\"kafka的优点和缺点都值得我们深入了解和探讨\",{\"1\":{\"1436\":1}}],[\"kafka的优点真是让人眼花缭乱\",{\"1\":{\"1436\":1}}],[\"kafka的分区机制可能会导致一些延迟\",{\"1\":{\"1436\":1}}],[\"kafka的配置确实需要一些技术功底\",{\"1\":{\"1436\":1}}],[\"kafka的灵活性和持久性确实让它在数据处理领域脱颖而出\",{\"1\":{\"1436\":1}}],[\"kafka的确是一个非常强大的工具\",{\"1\":{\"1434\":1}}],[\"kafka的使用场景确实非常丰富多样\",{\"1\":{\"1434\":1}}],[\"kafka的使用场景非常广泛\",{\"1\":{\"1432\":1}}],[\"kafka的源码是开源的\",{\"1\":{\"1432\":1}}],[\"kafka的leader\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"kafka基础\",{\"0\":{\"1432\":1}}],[\"kafka为流行的流式处理框架提供了可靠的数据来源\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"kafka把消息持久化到磁盘\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"kafka中的hw\",{\"0\":{\"1114\":1,\"1302\":1}}],[\"kafka中的isr\",{\"0\":{\"1113\":1,\"1301\":1}}],[\"kafka\",{\"0\":{\"1112\":1,\"1115\":1,\"1116\":1,\"1117\":1,\"1120\":1,\"1122\":1,\"1124\":1,\"1300\":1,\"1303\":1,\"1304\":1,\"1305\":1,\"1308\":1,\"1310\":1,\"1312\":1},\"1\":{\"587\":1,\"657\":1,\"1112\":3,\"1115\":1,\"1116\":8,\"1119\":3,\"1121\":3,\"1122\":1,\"1123\":2,\"1124\":4,\"1303\":1,\"1304\":8,\"1307\":3,\"1309\":3,\"1310\":1,\"1311\":2,\"1312\":4,\"1408\":1,\"1440\":5,\"1442\":5,\"1448\":5},\"2\":{\"1127\":1}}],[\"kryo等\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"kraft\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"kong\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"kotlin\",{\"1\":{\"900\":1}}],[\"koi8\",{\"1\":{\"123\":1}}],[\"kfyrapnrdp8llktjgd658q\",{\"1\":{\"895\":1}}],[\"km\",{\"1\":{\"723\":1}}],[\"kmulx\",{\"1\":{\"164\":1}}],[\"kb\",{\"1\":{\"722\":1}}],[\"kibana\",{\"1\":{\"453\":1}}],[\"kill\",{\"1\":{\"107\":1,\"644\":2}}],[\"k++\",{\"1\":{\"430\":1,\"1042\":1,\"1243\":1}}],[\"k或\",{\"1\":{\"319\":1}}],[\"known\",{\"1\":{\"825\":1}}],[\"knowledge\",{\"1\":{\"238\":1}}],[\"knows\",{\"1\":{\"169\":1}}],[\"k\",{\"1\":{\"158\":1,\"319\":2,\"401\":1,\"406\":6,\"410\":1,\"430\":3,\"1001\":2,\"1042\":3,\"1210\":2,\"1243\":3,\"1380\":2,\"1386\":11,\"1406\":1}}],[\"key3\",{\"1\":{\"1440\":1}}],[\"key这个命令用来获取指定key的值\",{\"1\":{\"1418\":1}}],[\"key这个命令呢\",{\"1\":{\"1418\":1}}],[\"key的hashcode\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"keyproperty=\",{\"1\":{\"826\":1,\"1133\":1,\"1318\":1}}],[\"keyproperty\",{\"1\":{\"826\":1,\"839\":1}}],[\"keycolumn=\",{\"1\":{\"826\":1,\"1133\":1,\"1318\":1}}],[\"keycolumn\",{\"1\":{\"826\":1,\"839\":1}}],[\"keycompare\",{\"1\":{\"687\":1}}],[\"keydestructor\",{\"1\":{\"687\":1}}],[\"keydup\",{\"1\":{\"687\":1}}],[\"key2\",{\"1\":{\"667\":2,\"669\":6,\"687\":1,\"1440\":1}}],[\"key1\",{\"1\":{\"667\":2,\"669\":6,\"687\":1,\"1440\":1}}],[\"key`\",{\"1\":{\"640\":2}}],[\"keyword\",{\"1\":{\"464\":1,\"487\":2,\"492\":1,\"493\":2,\"496\":2,\"1462\":2}}],[\"key数量和bitarray长度确定\",{\"1\":{\"388\":1}}],[\"key为\",{\"1\":{\"323\":1}}],[\"keys自动排序\",{\"1\":{\"1380\":1}}],[\"keyset\",{\"1\":{\"406\":1}}],[\"keys\",{\"0\":{\"665\":1},\"1\":{\"320\":1,\"1478\":1}}],[\"key值\",{\"1\":{\"320\":1}}],[\"key\",{\"1\":{\"123\":2,\"129\":1,\"194\":2,\"320\":10,\"323\":12,\"406\":3,\"568\":1,\"570\":1,\"623\":1,\"638\":2,\"640\":5,\"652\":2,\"655\":2,\"656\":1,\"660\":2,\"665\":3,\"666\":7,\"667\":14,\"668\":20,\"669\":9,\"670\":24,\"678\":1,\"684\":1,\"687\":4,\"715\":1,\"716\":1,\"717\":1,\"718\":2,\"722\":3,\"727\":2,\"789\":1,\"799\":1,\"855\":1,\"858\":3,\"887\":4,\"894\":1,\"895\":2,\"1001\":4,\"1004\":3,\"1006\":7,\"1009\":1,\"1073\":4,\"1080\":3,\"1119\":7,\"1155\":1,\"1162\":2,\"1163\":1,\"1210\":4,\"1213\":3,\"1215\":7,\"1218\":1,\"1268\":4,\"1275\":3,\"1307\":7,\"1335\":1,\"1342\":2,\"1343\":1,\"1380\":10,\"1386\":8,\"1406\":4,\"1418\":10,\"1428\":6,\"1442\":1,\"1448\":2,\"1478\":9,\"1507\":1}}],[\"keepalive\",{\"1\":{\"123\":3}}],[\"keepalive超时时间\",{\"1\":{\"123\":1}}],[\"单命令操作\",{\"1\":{\"1163\":1,\"1343\":1}}],[\"单节点\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"单元测试常用\",{\"1\":{\"927\":1}}],[\"单元测试\",{\"1\":{\"778\":1,\"875\":1}}],[\"单独运行测试类\",{\"1\":{\"768\":1}}],[\"单点抢占式任务执行\",{\"1\":{\"727\":1}}],[\"单位\",{\"1\":{\"711\":1}}],[\"单位毫秒或者秒\",{\"1\":{\"498\":1}}],[\"单排学习\",{\"1\":{\"704\":1,\"710\":1}}],[\"单排学习redis\",{\"2\":{\"673\":1,\"701\":1,\"713\":1}}],[\"单页内存储行数少\",{\"1\":{\"579\":1}}],[\"单页内的数据行越多数据库整体性能越好\",{\"1\":{\"579\":1}}],[\"单一数据表的数据量变小\",{\"1\":{\"578\":1}}],[\"单列是非常快速的\",{\"1\":{\"561\":1}}],[\"单列索引就是在一个列上创建的索引\",{\"1\":{\"561\":1}}],[\"单\",{\"0\":{\"551\":1}}],[\"单条插入\",{\"0\":{\"524\":1}}],[\"单词词典内每条索引项记载单词本身的一些信息以及指向\",{\"1\":{\"477\":1}}],[\"单词词典是由文档集合中出现过的所有单词构成的字符串集合\",{\"1\":{\"477\":1}}],[\"单词词典\",{\"1\":{\"477\":2}}],[\"单词\",{\"1\":{\"477\":1}}],[\"单机安装\",{\"0\":{\"659\":1}}],[\"单机存储容量\",{\"1\":{\"578\":1}}],[\"单机存到缓存肯定是适用场景有限\",{\"1\":{\"395\":1}}],[\"单机版本已搭建完成\",{\"1\":{\"460\":1}}],[\"单体架构的服务的日子已经一去不复返了\",{\"1\":{\"434\":1}}],[\"单个cookie保存的数据不能超过4k\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"单个索引切分成多个shard\",{\"1\":{\"474\":1}}],[\"单个元素越小\",{\"1\":{\"323\":1}}],[\"单个进程最大连接数\",{\"1\":{\"123\":1}}],[\"单例\",{\"1\":{\"1056\":1,\"1254\":1,\"1410\":1}}],[\"单例最有代表就是我们耳熟能详的\",{\"1\":{\"86\":1}}],[\"单例模式又可以分为预加载和懒加载\",{\"1\":{\"87\":1}}],[\"单例模式是最常见的设计模式之一\",{\"1\":{\"85\":1}}],[\"单例模式\",{\"0\":{\"85\":1},\"1\":{\"88\":1,\"89\":1,\"92\":1,\"93\":1,\"1172\":1,\"1173\":1,\"1349\":1,\"1350\":1,\"1408\":1},\"2\":{\"94\":1,\"95\":1}}],[\"6uk3sg\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"6877350\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"6379>\",{\"1\":{\"717\":1,\"718\":2,\"722\":3}}],[\"6379\",{\"1\":{\"660\":2,\"711\":1}}],[\"63f4e0e5\",{\"1\":{\"189\":1}}],[\"6及以上版本中\",{\"1\":{\"570\":1}}],[\"6版本变化较大\",{\"1\":{\"472\":1}}],[\"69<br>\",{\"1\":{\"441\":1}}],[\"69\",{\"1\":{\"440\":1}}],[\"694843237\",{\"1\":{\"296\":1}}],[\"64\",{\"1\":{\"458\":2,\"640\":1,\"660\":1}}],[\"64bit\",{\"1\":{\"440\":2}}],[\"64k\",{\"1\":{\"123\":3}}],[\"624\",{\"1\":{\"928\":1}}],[\"62233031\",{\"1\":{\"447\":1}}],[\"62\",{\"1\":{\"323\":1}}],[\"665\",{\"1\":{\"853\":1}}],[\"664\",{\"1\":{\"853\":1}}],[\"66\",{\"1\":{\"266\":1}}],[\"666\",{\"1\":{\"223\":1,\"649\":1,\"706\":1,\"1494\":1}}],[\"6773\",{\"1\":{\"176\":1}}],[\"6\",{\"0\":{\"151\":1,\"178\":1,\"195\":1,\"209\":1,\"244\":1,\"562\":1,\"594\":1,\"623\":1,\"634\":1,\"662\":1,\"663\":1,\"664\":1,\"665\":1,\"666\":1,\"667\":1,\"668\":1,\"669\":1,\"670\":2,\"694\":1,\"695\":1,\"696\":1,\"810\":1,\"815\":1,\"816\":1,\"817\":1,\"818\":1,\"819\":1,\"820\":1,\"821\":2,\"822\":1,\"834\":1,\"860\":1,\"1004\":1,\"1019\":1,\"1030\":1,\"1046\":1,\"1060\":1,\"1074\":1,\"1089\":1,\"1104\":1,\"1120\":1,\"1134\":1,\"1147\":1,\"1160\":1,\"1173\":1,\"1186\":1,\"1199\":1,\"1213\":1,\"1225\":1,\"1235\":1,\"1247\":1,\"1258\":1,\"1269\":1,\"1282\":1,\"1295\":1,\"1308\":1,\"1319\":1,\"1330\":1,\"1340\":1,\"1350\":1,\"1361\":1,\"1372\":1},\"1\":{\"176\":8,\"183\":1,\"198\":2,\"405\":1,\"412\":2,\"417\":2,\"428\":2,\"430\":1,\"461\":4,\"471\":1,\"472\":1,\"510\":1,\"590\":3,\"654\":1,\"657\":1,\"668\":1,\"669\":1,\"670\":1,\"771\":1,\"772\":3,\"778\":1,\"800\":1,\"814\":1,\"875\":1,\"888\":2,\"889\":2,\"891\":3,\"892\":1,\"902\":1,\"907\":1,\"979\":1,\"1041\":2,\"1057\":1,\"1124\":1,\"1168\":1,\"1173\":1,\"1174\":1,\"1195\":1,\"1242\":2,\"1255\":1,\"1312\":1,\"1345\":1,\"1350\":1,\"1351\":1,\"1368\":1,\"1480\":2}}],[\"65001\",{\"1\":{\"887\":1}}],[\"655\",{\"1\":{\"825\":1,\"928\":1}}],[\"65535\",{\"1\":{\"123\":1}}],[\"654321\",{\"1\":{\"820\":1}}],[\"65\",{\"1\":{\"123\":1,\"428\":5,\"430\":2}}],[\"605\",{\"1\":{\"928\":2}}],[\"60042\",{\"1\":{\"927\":1}}],[\"60766742a4e3\",{\"1\":{\"205\":1}}],[\"60s=\",{\"1\":{\"151\":1}}],[\"60s\",{\"1\":{\"151\":1}}],[\"6060\",{\"1\":{\"123\":1}}],[\"60\",{\"1\":{\"123\":2,\"323\":1,\"440\":2,\"441\":2}}],[\"6内核下开启文件打开数为65535\",{\"1\":{\"123\":1}}],[\"总体来说\",{\"1\":{\"1476\":1}}],[\"总体框架图\",{\"1\":{\"944\":1}}],[\"总之\",{\"1\":{\"1380\":1,\"1456\":1}}],[\"总之理论总是与代码不匹配\",{\"1\":{\"755\":1}}],[\"总报错误\",{\"1\":{\"863\":1}}],[\"总是假设会发生并发冲突\",{\"1\":{\"1476\":1}}],[\"总是复习的没考\",{\"1\":{\"1378\":1}}],[\"总是以相同的顺序来申请锁\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"总是等于\",{\"1\":{\"687\":1}}],[\"总是充满了惊喜和挑战\",{\"1\":{\"303\":1}}],[\"总是打开一个窗口\",{\"1\":{\"86\":1}}],[\"总的来说\",{\"1\":{\"264\":1,\"536\":1,\"566\":1}}],[\"总的来说不要让你的程序在黑盒总运行\",{\"1\":{\"229\":1}}],[\"总的时间长度就是2\",{\"1\":{\"174\":1}}],[\"总的时间长度就是\",{\"1\":{\"174\":1}}],[\"总结如下\",{\"1\":{\"1446\":1}}],[\"总结得很全面\",{\"1\":{\"1412\":1}}],[\"总结来说使用锁机制时\",{\"1\":{\"1476\":1}}],[\"总结来说\",{\"1\":{\"1380\":1}}],[\"总结一下hashmap的优势\",{\"1\":{\"1380\":1}}],[\"总结一下\",{\"1\":{\"493\":1,\"1446\":1}}],[\"总结\",{\"0\":{\"266\":1,\"328\":1,\"583\":1,\"630\":1},\"1\":{\"183\":1,\"264\":1,\"624\":1}}],[\"总共会抓10帧\",{\"1\":{\"158\":1}}],[\"总并发量达到3\",{\"1\":{\"123\":1}}],[\"数量发生变化\",{\"1\":{\"1119\":1,\"1307\":1}}],[\"数量为\",{\"1\":{\"667\":2}}],[\"数量占表中总页数的很大一部分\",{\"1\":{\"637\":1}}],[\"数量限制\",{\"1\":{\"559\":1}}],[\"数量在创建索引时指定\",{\"1\":{\"475\":1}}],[\"数字和日期的format\",{\"1\":{\"882\":1}}],[\"数字类型的字段在满足需求的前提下应当尽量选择范围较小的数据类型\",{\"1\":{\"497\":1}}],[\"数字类型分为\",{\"1\":{\"497\":1}}],[\"数字类型\",{\"0\":{\"497\":1},\"1\":{\"495\":1}}],[\"数字\",{\"1\":{\"482\":1}}],[\"数字中排序\",{\"1\":{\"400\":1}}],[\"数列就变成一个有序序列\",{\"1\":{\"427\":1}}],[\"数列遍历完毕时\",{\"1\":{\"412\":1}}],[\"数位较短的数前面补零\",{\"1\":{\"427\":1}}],[\"数组是final的\",{\"1\":{\"1446\":1}}],[\"数组是主干\",{\"1\":{\"1406\":1}}],[\"数组table\",{\"1\":{\"1406\":1}}],[\"数组实现通过散列算法\",{\"1\":{\"1380\":1}}],[\"数组和链表各自的优点可以满足这个要求\",{\"1\":{\"1380\":1}}],[\"数组同一个位置上的元素数量是成泊松分布的\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"数组增删元素的效率比较低\",{\"1\":{\"1074\":1,\"1269\":1}}],[\"数组拥有o\",{\"1\":{\"1074\":1,\"1269\":1}}],[\"数组要求每个元素大大小相同\",{\"1\":{\"695\":1}}],[\"数组可以包含多个元素\",{\"1\":{\"691\":1}}],[\"数组中键值对的数量\",{\"1\":{\"1386\":1}}],[\"数组中\",{\"1\":{\"721\":1}}],[\"数组中的每个项都是一个\",{\"1\":{\"687\":1}}],[\"数组中的每一个值\",{\"1\":{\"412\":1}}],[\"数组中未使用字节的数量\",{\"1\":{\"682\":1}}],[\"数组中已使用字节的数量\",{\"1\":{\"682\":1}}],[\"数组\",{\"1\":{\"504\":1,\"693\":1,\"1380\":2}}],[\"数组order\",{\"1\":{\"430\":1}}],[\"数组的长度是2的幂次方\",{\"0\":{\"1080\":1,\"1275\":1}}],[\"数组的下标在\",{\"1\":{\"721\":1}}],[\"数组的每个单元只能存储\",{\"1\":{\"721\":1}}],[\"数组的优势占用一片\",{\"1\":{\"695\":1}}],[\"数组的第一维表示可能的余数0\",{\"1\":{\"430\":1}}],[\"数组的状态如下\",{\"1\":{\"412\":1}}],[\"数组下标从0到10\",{\"1\":{\"412\":1}}],[\"数组下标\",{\"1\":{\"412\":1}}],[\"数组里有20个随机数\",{\"1\":{\"412\":1}}],[\"数和森林的遍历\",{\"0\":{\"367\":1}}],[\"数学公式\",{\"1\":{\"388\":1}}],[\"数学推导\",{\"0\":{\"388\":1}}],[\"数学题\",{\"2\":{\"310\":1}}],[\"数学作为一门极具魅力的学科\",{\"1\":{\"308\":1}}],[\"数学是一门充满挑战和乐趣的学科\",{\"1\":{\"308\":1}}],[\"数学之美\",{\"0\":{\"307\":1},\"1\":{\"392\":1}}],[\"数学的力量在于它能够将看似不可能的事情变为可能\",{\"1\":{\"305\":1}}],[\"数学的力量\",{\"0\":{\"305\":1}}],[\"数目\",{\"1\":{\"123\":1}}],[\"数据分析等领域都有广泛应用\",{\"1\":{\"1464\":1}}],[\"数据分布不均\",{\"1\":{\"564\":1}}],[\"数据分布和性能要求\",{\"1\":{\"561\":1}}],[\"数据可视化等各种场景\",{\"1\":{\"1460\":1}}],[\"数据可以从主服务器向任意数量的从服务器上同步\",{\"1\":{\"652\":1}}],[\"数据丢失等问题\",{\"1\":{\"1446\":1}}],[\"数据也不会丢失\",{\"1\":{\"1436\":1}}],[\"数据迁移和高可用性等方面的问题\",{\"1\":{\"1426\":1}}],[\"数据被分成多个分片\",{\"1\":{\"1426\":1}}],[\"数据同步完成\",{\"1\":{\"1422\":1}}],[\"数据冗余\",{\"1\":{\"1422\":1}}],[\"数据存放在内存中\",{\"1\":{\"1420\":1}}],[\"数据存储结构\",{\"0\":{\"332\":1}}],[\"数据并渲染视图\",{\"1\":{\"1414\":1}}],[\"数据访问等功能\",{\"1\":{\"1408\":1}}],[\"数据全部使用相同hashcode\",{\"1\":{\"1380\":1}}],[\"数据发布\",{\"1\":{\"1201\":2,\"1374\":2}}],[\"数据每更新一次\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"数据读写也是批量的而不是单条的\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"数据的复制\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"数据的同步\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"数据的物理存储位置可能分散\",{\"1\":{\"566\":1}}],[\"数据不丢失\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"数据不共享\",{\"1\":{\"1060\":1,\"1258\":1}}],[\"数据不一致\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"数据还是老的\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"数据之前\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"数据在某个时间点过期时\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"数据在插入后\",{\"1\":{\"436\":1}}],[\"数据相对固定\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"数据命中不高\",{\"1\":{\"1004\":2,\"1213\":2}}],[\"数据更新的频率不高\",{\"1\":{\"1000\":1,\"1209\":1}}],[\"数据转换等\",{\"1\":{\"991\":1}}],[\"数据接收\",{\"1\":{\"991\":1}}],[\"数据绑定\",{\"1\":{\"882\":1}}],[\"数据源\",{\"1\":{\"806\":2,\"808\":1,\"814\":1,\"1090\":1,\"1283\":1}}],[\"数据为多对多\",{\"1\":{\"786\":1}}],[\"数据都是缓存在内存中\",{\"1\":{\"652\":1}}],[\"数据一致性要求高\",{\"1\":{\"633\":1}}],[\"数据是按页存储的\",{\"1\":{\"624\":1}}],[\"数据路由问题后边介绍\",{\"1\":{\"583\":1}}],[\"数据量不大就用不上\",{\"1\":{\"1034\":2,\"1238\":2}}],[\"数据量不大时\",{\"1\":{\"1008\":1,\"1217\":1}}],[\"数据量大时候\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"数据量大的表\",{\"1\":{\"565\":1}}],[\"数据量小的表不需要建立索引\",{\"1\":{\"563\":1}}],[\"数据重复且分布平均的字短没必要建立索引\",{\"1\":{\"563\":1}}],[\"数据变更后索引也需要更新\",{\"1\":{\"563\":1}}],[\"数据维度\",{\"1\":{\"562\":1}}],[\"数据操作\",{\"0\":{\"522\":1}}],[\"数据写入直接出错\",{\"1\":{\"484\":1}}],[\"数据中心id\",{\"1\":{\"441\":2}}],[\"数据标识id向左移17位\",{\"1\":{\"441\":1}}],[\"数据标识id所占的位数\",{\"1\":{\"441\":1}}],[\"数据才能够继续向下走\",{\"1\":{\"387\":1}}],[\"数据先经过布隆过滤器\",{\"1\":{\"387\":1}}],[\"数据域\",{\"1\":{\"342\":1}}],[\"数据类型操作\",{\"1\":{\"656\":1}}],[\"数据类型\",{\"0\":{\"332\":1},\"1\":{\"395\":1}}],[\"数据逻辑结构\",{\"0\":{\"332\":1}}],[\"数据元素\",{\"0\":{\"332\":1}}],[\"数据\",{\"0\":{\"332\":1},\"1\":{\"1007\":2,\"1216\":2}}],[\"数据表中的数据都是存储在页中的\",{\"1\":{\"325\":1}}],[\"数据大小是固定的\",{\"1\":{\"323\":1}}],[\"数据遍布整个树结构\",{\"1\":{\"316\":1}}],[\"数据结构包括字符串\",{\"1\":{\"1155\":1,\"1335\":1}}],[\"数据结构并不会保存真实的元数据\",{\"1\":{\"722\":1}}],[\"数据结构来保存位数组\",{\"1\":{\"721\":1}}],[\"数据结构来理解\",{\"1\":{\"568\":1}}],[\"数据结构维度\",{\"1\":{\"558\":1}}],[\"数据结构和算法的基本概念\",{\"0\":{\"331\":1}}],[\"数据结构\",{\"0\":{\"311\":1},\"1\":{\"115\":1,\"117\":1,\"693\":1,\"722\":1,\"887\":1,\"1004\":1,\"1213\":1,\"1398\":1},\"2\":{\"312\":1,\"313\":1,\"379\":1,\"380\":1,\"397\":1,\"407\":1,\"408\":1,\"415\":1,\"416\":1,\"418\":1,\"419\":1,\"431\":1,\"432\":1,\"442\":1,\"443\":1}}],[\"数据库你用过吧\",{\"1\":{\"1418\":1}}],[\"数据库事务的提交和回滚是通过\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"数据库更新策略\",{\"1\":{\"927\":1}}],[\"数据库配置\",{\"1\":{\"879\":1}}],[\"数据库连接池\",{\"1\":{\"878\":1}}],[\"数据库连接数\",{\"1\":{\"580\":1}}],[\"数据库脚本\",{\"1\":{\"858\":1}}],[\"数据库有两个一模一样的表\",{\"1\":{\"842\":1}}],[\"数据库结构\",{\"0\":{\"789\":1}}],[\"数据库的乐观锁和悲观锁是什么\",{\"0\":{\"1148\":1,\"1331\":1}}],[\"数据库的字段名是user\",{\"1\":{\"822\":1}}],[\"数据库的读写会有磁盘操作\",{\"1\":{\"679\":1}}],[\"数据库的完整性不被破坏\",{\"1\":{\"623\":1}}],[\"数据库锁\",{\"2\":{\"646\":1}}],[\"数据库管理系统通常有机制来检测和解决死锁\",{\"1\":{\"644\":1}}],[\"数据库中的每个键值对的键和值都是一个对象\",{\"1\":{\"699\":1}}],[\"数据库中的数据量猛增\",{\"1\":{\"578\":1}}],[\"数据库中数据的存储单位\",{\"1\":{\"637\":1}}],[\"数据库系统可能会认为整个表都被锁定了\",{\"1\":{\"637\":1}}],[\"数据库系统可能会将这些行锁升级为表锁\",{\"1\":{\"637\":1}}],[\"数据库系统会自动处理这些锁定\",{\"1\":{\"623\":1}}],[\"数据库系统不仅需要更新数据本身\",{\"1\":{\"571\":1}}],[\"数据库13问\",{\"0\":{\"614\":1},\"1\":{\"614\":1}}],[\"数据库以行为单位将数据加载到内存中\",{\"1\":{\"579\":1}}],[\"数据库操作经常涉及磁盘i\",{\"1\":{\"566\":1}}],[\"数据库自增id的缺点是数据在插入前\",{\"1\":{\"436\":1}}],[\"数据库自增\",{\"0\":{\"436\":1},\"1\":{\"436\":1}}],[\"数据库请求出错\",{\"1\":{\"214\":1}}],[\"数据库错误\",{\"1\":{\"214\":1}}],[\"数据库都是非常重要的\",{\"1\":{\"117\":1}}],[\"数据库\",{\"0\":{\"14\":1,\"83\":1},\"1\":{\"115\":1,\"117\":1,\"569\":1,\"875\":1,\"1418\":1},\"2\":{\"15\":1}}],[\"说的太好了\",{\"1\":{\"1424\":1}}],[\"说的不错\",{\"1\":{\"1418\":1}}],[\"说的很清楚\",{\"1\":{\"1392\":1}}],[\"说听说你jvm调优挺在行\",{\"1\":{\"1400\":1}}],[\"说g1是\",{\"1\":{\"1398\":1}}],[\"说白了\",{\"1\":{\"1396\":1}}],[\"说自己在面试准备过程中感觉抓不住重点\",{\"1\":{\"1378\":1}}],[\"说几个\",{\"0\":{\"1198\":1,\"1371\":1}}],[\"说出这几种类型当然已经回答了问题\",{\"1\":{\"1195\":1,\"1368\":1}}],[\"说一说jvm的主要组成部分\",{\"0\":{\"1099\":1,\"1290\":1}}],[\"说一下springboot的自动装配原理\",{\"0\":{\"1185\":1,\"1360\":1}}],[\"说一下类加载的执行过程\",{\"0\":{\"1105\":1,\"1296\":1}}],[\"说一下堆栈的区别\",{\"0\":{\"1101\":1,\"1292\":1}}],[\"说一下java注解\",{\"0\":{\"1049\":1,\"1250\":1}}],[\"说一下自己的看法\",{\"0\":{\"989\":1}}],[\"说一下\",{\"0\":{\"1073\":1,\"1100\":1,\"1104\":1,\"1268\":1,\"1291\":1,\"1295\":1},\"1\":{\"121\":2,\"984\":1}}],[\"说起死锁\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"说到缓存\",{\"1\":{\"998\":1}}],[\"说到\",{\"1\":{\"990\":1}}],[\"说到分布式锁\",{\"1\":{\"727\":1}}],[\"说些题外话\",{\"1\":{\"703\":1}}],[\"说这个事我只是想说\",{\"1\":{\"263\":1}}],[\"说实话\",{\"1\":{\"250\":1,\"263\":1,\"1424\":1}}],[\"说明elasticsearch和lucene在实际应用中的作用吗\",{\"1\":{\"1458\":1}}],[\"说明的很详细\",{\"1\":{\"1392\":1}}],[\"说明在自己项目中如何使用\",{\"0\":{\"1088\":1,\"1281\":1}}],[\"说明该\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"说明系统时钟回退过这个时候应当抛出异常\",{\"1\":{\"441\":1}}],[\"说明\",{\"0\":{\"663\":1,\"746\":1},\"1\":{\"160\":1,\"214\":1,\"667\":1,\"890\":1,\"1478\":1}}],[\"说说你对多线程的理解\",{\"1\":{\"1446\":1}}],[\"说说你们公司\",{\"0\":{\"1025\":1,\"1229\":1}}],[\"说说rdb吧\",{\"1\":{\"1420\":1}}],[\"说说resize的实现过程\",{\"1\":{\"1380\":1}}],[\"说说spring中常见的注解\",{\"1\":{\"1402\":1}}],[\"说说g1的垃圾回收过程\",{\"1\":{\"1398\":1}}],[\"说说cms\",{\"1\":{\"1396\":1}}],[\"说说并发标记和最终标记的区别\",{\"1\":{\"1396\":1}}],[\"说说hashmap的缺点\",{\"1\":{\"1380\":1}}],[\"说说hashmap的扩容机制\",{\"1\":{\"1380\":1}}],[\"说说我对这个职业的看法\",{\"1\":{\"263\":1}}],[\"说说\",{\"1\":{\"72\":1,\"1446\":1,\"1476\":1}}],[\"简洁\",{\"1\":{\"1507\":1}}],[\"简洁了很多\",{\"1\":{\"198\":1}}],[\"简直是必备利器\",{\"1\":{\"1456\":1}}],[\"简而言之\",{\"1\":{\"1185\":1,\"1360\":1}}],[\"简少了\",{\"1\":{\"1182\":1,\"1357\":1}}],[\"简称rr\",{\"1\":{\"638\":1}}],[\"简称\",{\"1\":{\"620\":2,\"622\":1,\"1144\":1,\"1327\":1}}],[\"简化了lucene的使用和管理\",{\"1\":{\"1458\":1}}],[\"简化构建过程\",{\"1\":{\"1408\":1}}],[\"简化web应用的开发\",{\"1\":{\"1186\":1,\"1361\":1}}],[\"简化代码\",{\"1\":{\"888\":2}}],[\"简化配置\",{\"1\":{\"882\":1,\"1182\":1,\"1357\":1}}],[\"简化的编程模式\",{\"1\":{\"708\":1}}],[\"简化\",{\"1\":{\"322\":1}}],[\"简历作为找工作的第一块敲门砖\",{\"1\":{\"249\":1}}],[\"简历优化\",{\"1\":{\"249\":1}}],[\"简历修改\",{\"1\":{\"53\":1}}],[\"简单易用\",{\"1\":{\"1418\":1}}],[\"简单介绍下\",{\"1\":{\"1476\":1}}],[\"简单介绍下map这个接口及常用实现类\",{\"1\":{\"1406\":1}}],[\"简单介绍下list这个接口及常用实现类吧\",{\"1\":{\"1404\":1}}],[\"简单介绍一下常用指令\",{\"1\":{\"144\":1}}],[\"简单工厂模式的本质就是一个工厂类根据传入的参数\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"简单工厂模式\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"简单实现登录拦截逻辑\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"简单理解\",{\"1\":{\"1017\":1,\"1223\":1}}],[\"简单说一下\",{\"1\":{\"1380\":1}}],[\"简单说一下吧\",{\"1\":{\"990\":1}}],[\"简单说明\",{\"0\":{\"144\":1}}],[\"简单而强大的线程模型\",{\"1\":{\"989\":1}}],[\"简单倒排索引实例\",{\"0\":{\"478\":1}}],[\"简单可以理解为\",{\"1\":{\"436\":1}}],[\"简单用公式描述一下就是\",{\"1\":{\"417\":1}}],[\"简单明了\",{\"1\":{\"204\":1}}],[\"简单的说\",{\"1\":{\"152\":1}}],[\"简单来说就是快照保存\",{\"1\":{\"1420\":1}}],[\"简单来说就是当该节点下面没有子节点的话\",{\"1\":{\"1195\":1,\"1368\":1}}],[\"简单来说就是把复杂系统分解成相互合作的对象\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"简单来说就是创建一个集合\",{\"1\":{\"710\":1}}],[\"简单来说\",{\"1\":{\"151\":1,\"383\":1,\"454\":1,\"536\":1,\"625\":1,\"982\":1,\"1034\":2,\"1045\":1,\"1058\":1,\"1061\":1,\"1238\":2,\"1246\":1,\"1256\":1,\"1259\":1,\"1452\":1,\"1456\":1}}],[\"简介\",{\"0\":{\"139\":1,\"945\":1}}],[\"简述\",{\"1\":{\"121\":1}}],[\"全部对象的控制权全部上缴给\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"全部查找\",{\"1\":{\"111\":1}}],[\"全称\",{\"1\":{\"1093\":1,\"1286\":1}}],[\"全称叫\",{\"1\":{\"475\":1}}],[\"全表扫描是否比索引更快\",{\"1\":{\"590\":1}}],[\"全表扫描效率更优\",{\"1\":{\"564\":1}}],[\"全文索引\",{\"1\":{\"1146\":1,\"1329\":1}}],[\"全文索引也有一些限制\",{\"1\":{\"570\":1}}],[\"全文索引一般用于内容管理平台\",{\"1\":{\"570\":1}}],[\"全文索引是一种建立倒排索引\",{\"1\":{\"558\":1}}],[\"全功能的搜索引擎库\",{\"1\":{\"453\":1}}],[\"全局总开关\",{\"1\":{\"853\":1}}],[\"全局的配置文件\",{\"1\":{\"814\":1}}],[\"全局配置文件mybatis\",{\"1\":{\"826\":1}}],[\"全局配置文件\",{\"0\":{\"806\":1}}],[\"全局唯一且不重复的id\",{\"1\":{\"435\":1}}],[\"全局唯一\",{\"1\":{\"434\":2}}],[\"全局日志定义类型\",{\"1\":{\"123\":1}}],[\"全球都在用\",{\"1\":{\"263\":1}}],[\"全栈工程师\",{\"1\":{\"261\":1}}],[\"全干开发工程师\",{\"1\":{\"255\":1}}],[\"全站工程师在哪儿都是稀缺的\",{\"1\":{\"118\":1}}],[\"地完成的\",{\"1\":{\"688\":1}}],[\"地理位置搜索等高级功能\",{\"1\":{\"1456\":1}}],[\"地理空间\",{\"1\":{\"664\":1}}],[\"地理区域类型\",{\"0\":{\"507\":1}}],[\"地理类型字段分为两种\",{\"1\":{\"505\":1}}],[\"地理类型\",{\"0\":{\"505\":1}}],[\"地理类型以及特殊类型\",{\"1\":{\"494\":1}}],[\"地动山摇\",{\"1\":{\"117\":1}}],[\"地址生成\",{\"1\":{\"438\":1}}],[\"地址\",{\"1\":{\"6\":1,\"114\":1,\"509\":1,\"711\":1,\"987\":1,\"1019\":1,\"1225\":1}}],[\"等繁杂的过程\",{\"1\":{\"1416\":1}}],[\"等事务管理\",{\"1\":{\"1408\":1}}],[\"等注解\",{\"1\":{\"1137\":1,\"1322\":1}}],[\"等集合类型\",{\"1\":{\"1136\":2,\"1321\":2}}],[\"等集合时\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"等方法时\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"等属性\",{\"1\":{\"1133\":1,\"1318\":1}}],[\"等到另一个线程结束\",{\"1\":{\"1064\":1,\"1262\":1}}],[\"等标签不会被解析\",{\"1\":{\"864\":1}}],[\"等同于\",{\"1\":{\"775\":1}}],[\"等等外部工具\",{\"1\":{\"907\":1}}],[\"等等\",{\"1\":{\"685\":1,\"691\":1,\"989\":1,\"1402\":1,\"1418\":1}}],[\"等流行的消息队列中间件\",{\"1\":{\"657\":1}}],[\"等内存数据库为中心的\",{\"1\":{\"657\":1}}],[\"等数据结构的存储\",{\"1\":{\"655\":1}}],[\"等于\",{\"1\":{\"634\":2,\"682\":1}}],[\"等你\",{\"1\":{\"381\":1}}],[\"等你哦\",{\"1\":{\"167\":1,\"761\":1,\"795\":1}}],[\"等待队列\",{\"1\":{\"1481\":1}}],[\"等待队列的条件变量\",{\"1\":{\"1481\":1}}],[\"等待队列尾指针偏移量\",{\"1\":{\"1481\":1}}],[\"等待队列尾指针\",{\"1\":{\"1481\":1}}],[\"等待队列头指针偏移量\",{\"1\":{\"1481\":1}}],[\"等待队列头指针\",{\"1\":{\"1481\":1}}],[\"等待队列长度偏移量\",{\"1\":{\"1481\":1}}],[\"等待队列长度\",{\"1\":{\"1481\":1}}],[\"等待选主结果\",{\"1\":{\"1466\":1}}],[\"等待确认和不等待确认有什么区别呢\",{\"1\":{\"1452\":1}}],[\"等待线程就会被唤醒\",{\"1\":{\"1390\":4}}],[\"等待下一个任务的分配\",{\"1\":{\"1384\":1}}],[\"等待下载好\",{\"1\":{\"961\":1}}],[\"等待业务正常处理完成后\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"等待cpu的使用权\",{\"1\":{\"1064\":1,\"1262\":1}}],[\"等待了很长时间以后\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"等待可中断\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"等待可用连接最大的等待时间\",{\"1\":{\"711\":1}}],[\"等待家庭成员到齐才能开饭\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"等待其他一组线程完成操作\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"等待通知机制是基于wait和notify方法来实现的\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"等待名单\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"等待该条件的线程将被唤醒\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"等待一定的时间之后\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"等待划分时间片\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"等待\",{\"1\":{\"1057\":1,\"1059\":1,\"1255\":1,\"1257\":1,\"1446\":2,\"1466\":1}}],[\"等待被线程调度选中\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"等待安装好\",{\"1\":{\"961\":1}}],[\"等待着我们去发现和拼凑\",{\"1\":{\"307\":1}}],[\"等待信息同步完成\",{\"1\":{\"170\":1}}],[\"等候后端服务器响应时间\",{\"1\":{\"123\":1}}],[\"等\",{\"1\":{\"115\":1,\"117\":1,\"211\":1,\"220\":1,\"464\":1,\"482\":1,\"1049\":1,\"1070\":1,\"1182\":1,\"1198\":1,\"1250\":1,\"1265\":1,\"1357\":1,\"1371\":1,\"1408\":4,\"1412\":1,\"1480\":1}}],[\"要想将服务打包成\",{\"1\":{\"1512\":1}}],[\"要考虑清楚版本号的更新策略\",{\"1\":{\"1476\":1}}],[\"要考虑到\",{\"1\":{\"590\":1}}],[\"要根据实际需求选择合适的确认级别\",{\"1\":{\"1452\":1}}],[\"要根据薄弱点来学习\",{\"1\":{\"117\":1}}],[\"要时刻考虑对象或方法的状态是否在多线程下也能保持一致和正确\",{\"1\":{\"1446\":1}}],[\"要确保从kafka中获取的信息是准确的\",{\"1\":{\"1442\":1}}],[\"要消费kafka中的消息\",{\"1\":{\"1442\":1}}],[\"要从kafka中获取准确的信息\",{\"1\":{\"1442\":1}}],[\"要全面理解\",{\"1\":{\"1410\":1}}],[\"要保证高效的增删改查操作\",{\"1\":{\"1380\":1}}],[\"要保证防火墙对应端口开放\",{\"1\":{\"738\":1}}],[\"要对哪些join\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"要指定xml映射文件里面的\",{\"1\":{\"1137\":1,\"1322\":1}}],[\"要让类对象进行比较有意义\",{\"1\":{\"1106\":1,\"1297\":1}}],[\"要优先使用拦截器\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"要理解这两种机制的表象\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"要了解sleep和wait\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"要么通过构造方法赋值\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"要么使用直接赋值\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"要么就是长度比较短的字符串\",{\"1\":{\"696\":2}}],[\"要记住需要传递信息给协调节点的每个分片必须先创建一个\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"要是有人利用不存在的\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"要加入的\",{\"1\":{\"900\":1}}],[\"要处理异常\",{\"1\":{\"894\":1}}],[\"要先于catch\",{\"1\":{\"893\":1}}],[\"要视情况而定\",{\"1\":{\"600\":1}}],[\"要正确使用最左匹配\",{\"1\":{\"564\":1}}],[\"要求下班前完成\",{\"1\":{\"979\":1}}],[\"要求id和mapper接口中的方法的名字一致\",{\"1\":{\"838\":1}}],[\"要求mapper\",{\"1\":{\"835\":1}}],[\"要求必须有聚簇索引\",{\"1\":{\"558\":1}}],[\"要求用最快的速度把这20个整数从小到大进行排序\",{\"1\":{\"412\":1}}],[\"要尽量减少磁盘i\",{\"1\":{\"327\":1}}],[\"要分解的整数\",{\"1\":{\"306\":1}}],[\"要检查的整数\",{\"1\":{\"306\":1}}],[\"要不要继续坚持\",{\"1\":{\"264\":1}}],[\"要使用clone方法\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"要使用\",{\"0\":{\"222\":1}}],[\"要使用此布局\",{\"1\":{\"8\":1}}],[\"要打印函数的入参\",{\"0\":{\"220\":1}}],[\"要选择合适的等级打印\",{\"1\":{\"219\":1}}],[\"要设置\",{\"1\":{\"211\":1}}],[\"要写清楚请求头信息\",{\"1\":{\"211\":1}}],[\"要明确记录\",{\"1\":{\"210\":1}}],[\"要怎么开始学\",{\"0\":{\"115\":1}}],[\"点赞\",{\"1\":{\"657\":1}}],[\"点评\",{\"1\":{\"319\":1,\"323\":3}}],[\"点以后回家\",{\"1\":{\"270\":1}}],[\"点击在线阅读\",{\"1\":{\"1206\":1,\"1376\":1}}],[\"点击放大看\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"点击完成即可\",{\"1\":{\"901\":1,\"902\":1}}],[\"点击下一步\",{\"1\":{\"901\":1}}],[\"点击下方链接直接获取\",{\"1\":{\"56\":1}}],[\"点击下方链接\",{\"1\":{\"56\":1}}],[\"点击获取\",{\"1\":{\"551\":1}}],[\"点击按钮后\",{\"1\":{\"549\":1}}],[\"点击领取就可以获取到对应空投\",{\"1\":{\"538\":1}}],[\"点击传送\",{\"1\":{\"405\":1}}],[\"点击了解\",{\"1\":{\"257\":1}}],[\"点击了解星球🌍\",{\"1\":{\"233\":1}}],[\"点击加群\",{\"1\":{\"247\":1}}],[\"点击\",{\"0\":{\"548\":1,\"549\":1},\"1\":{\"126\":1,\"296\":1,\"549\":1,\"923\":1,\"976\":1}}],[\"点击左侧菜单的\",{\"1\":{\"126\":1}}],[\"点个下载连同项目一起打包你的本地\",{\"1\":{\"114\":1}}],[\"答\",{\"1\":{\"114\":1,\"115\":1}}],[\"问我们提到了分区再分配\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"问答社区等检索场景\",{\"1\":{\"570\":1}}],[\"问就是\",{\"1\":{\"138\":1}}],[\"问题\",{\"1\":{\"835\":1,\"1122\":2,\"1310\":2,\"1396\":1,\"1476\":1}}],[\"问题出现了\",{\"1\":{\"755\":1}}],[\"问题二\",{\"1\":{\"417\":1}}],[\"问题的由来\",{\"0\":{\"304\":1}}],[\"问题就出现了\",{\"1\":{\"123\":1}}],[\"问题2\",{\"0\":{\"115\":1},\"1\":{\"1121\":1,\"1309\":1}}],[\"问题1\",{\"0\":{\"114\":1},\"1\":{\"1121\":1,\"1309\":1}}],[\"问最多的问题\",{\"1\":{\"113\":1}}],[\"必要时采用悲观锁避免问题进一步扩大\",{\"1\":{\"1476\":1}}],[\"必然会出现牵一发而动全身的情形\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"必须是\",{\"1\":{\"1424\":2}}],[\"必须是2的n次方\",{\"1\":{\"1406\":1}}],[\"必须是mapper接口的全路径\",{\"1\":{\"826\":1}}],[\"必须为接口的全路径名\",{\"1\":{\"1137\":1,\"1322\":1}}],[\"必须为引用类型\",{\"1\":{\"1041\":1,\"1242\":1}}],[\"必须等到sqlsession关闭了以后\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"必须等待一个线程的run\",{\"1\":{\"1055\":1,\"1253\":1}}],[\"必须按照申请的时间顺序来依次获得锁\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"必须保证类当中所有重载的构造方法都最终会对\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"必须二者选其一\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"必须早于提交\",{\"1\":{\"980\":1}}],[\"必须手动关闭引擎\",{\"1\":{\"927\":1}}],[\"必须序列化\",{\"1\":{\"853\":1}}],[\"必须属性\",{\"1\":{\"840\":1,\"841\":1}}],[\"必须\",{\"1\":{\"838\":2}}],[\"必须使用注解方式\",{\"1\":{\"835\":1}}],[\"必须使用$\",{\"1\":{\"826\":1}}],[\"必须使用64位long型\",{\"1\":{\"435\":1}}],[\"必须进行日志级别开关\",{\"1\":{\"223\":1}}],[\"必须进行日志级别开关判断\",{\"0\":{\"223\":1}}],[\"必须设为on\",{\"1\":{\"123\":1}}],[\"必看\",{\"0\":{\"112\":1}}],[\"必应收录\",{\"1\":{\"6\":1}}],[\"zgc等高性能收集器\",{\"1\":{\"1400\":1}}],[\"zgc\",{\"1\":{\"1396\":1}}],[\"znode\",{\"1\":{\"1201\":3,\"1374\":3}}],[\"zndxall\",{\"1\":{\"982\":1}}],[\"zab是在paxos的基础上改进和演变过来的\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"zab\",{\"0\":{\"1200\":1,\"1373\":1},\"1\":{\"1200\":3,\"1373\":3}}],[\"zab协议包括两种基本的模式\",{\"1\":{\"1199\":1,\"1372\":1}}],[\"zab协议是为分布式协调服务zookeeper专门设计的一种支持崩溃恢复的原子广播协议\",{\"1\":{\"1199\":1,\"1372\":1}}],[\"zadd\",{\"1\":{\"670\":1,\"720\":1}}],[\"zpc\",{\"1\":{\"799\":1,\"807\":1,\"810\":1,\"816\":1,\"817\":2,\"818\":5,\"820\":3,\"822\":1,\"825\":4,\"826\":9,\"831\":3,\"835\":1,\"842\":7,\"843\":2,\"845\":1,\"847\":1,\"848\":1,\"849\":2,\"850\":1,\"852\":18,\"853\":6,\"856\":4,\"857\":3,\"858\":4}}],[\"zunionstore\",{\"1\":{\"670\":1}}],[\"zrevrank\",{\"1\":{\"670\":1}}],[\"zrevrangebyscore\",{\"1\":{\"670\":1}}],[\"zrevrange\",{\"1\":{\"670\":1,\"720\":1}}],[\"zremrangebyscore\",{\"1\":{\"670\":1}}],[\"zremrangebyrank\",{\"1\":{\"670\":1}}],[\"zremrangebylex\",{\"1\":{\"670\":1}}],[\"zrem\",{\"1\":{\"670\":1}}],[\"zrank\",{\"1\":{\"670\":1,\"720\":1}}],[\"zrangebyscore\",{\"1\":{\"670\":1}}],[\"zrangebylex\",{\"1\":{\"670\":1}}],[\"zrange\",{\"1\":{\"670\":1}}],[\"zlexcount\",{\"1\":{\"670\":1}}],[\"zinterstore\",{\"1\":{\"670\":1}}],[\"zincrby\",{\"1\":{\"670\":1}}],[\"zip1ist\",{\"1\":{\"696\":1}}],[\"zip压缩包到\",{\"1\":{\"660\":1}}],[\"zip\",{\"1\":{\"107\":1,\"111\":4,\"465\":1,\"466\":1,\"764\":1}}],[\"zcount\",{\"1\":{\"670\":1}}],[\"zcard\",{\"1\":{\"670\":1}}],[\"zcvf\",{\"1\":{\"111\":1}}],[\"zskiplistlevel\",{\"1\":{\"691\":1}}],[\"zskiplist\",{\"1\":{\"691\":2,\"692\":2}}],[\"zskiplistnode\",{\"1\":{\"691\":7,\"692\":2}}],[\"zscan\",{\"1\":{\"670\":1}}],[\"zscore\",{\"1\":{\"670\":1}}],[\"zset内部元素也可以使用整数对象池\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"zset\",{\"1\":{\"652\":1,\"655\":1,\"1155\":1,\"1335\":1}}],[\"zsxq\",{\"1\":{\"250\":1}}],[\"zendiscovery\",{\"1\":{\"1027\":1,\"1231\":1}}],[\"zen\",{\"1\":{\"459\":1,\"1027\":1,\"1031\":1,\"1231\":1,\"1235\":1}}],[\"zerofill\",{\"1\":{\"858\":1}}],[\"zero\",{\"1\":{\"123\":1,\"200\":2}}],[\"z\",{\"1\":{\"386\":1,\"392\":1,\"1044\":2,\"1245\":2}}],[\"zk遵循的是cp原则\",{\"1\":{\"1197\":1,\"1370\":1}}],[\"zk\",{\"0\":{\"1195\":1,\"1368\":1},\"1\":{\"1122\":1,\"1310\":1}}],[\"zkenv\",{\"1\":{\"176\":2}}],[\"zkcli\",{\"1\":{\"176\":3}}],[\"zkcleanup\",{\"1\":{\"176\":1}}],[\"zkserver\",{\"1\":{\"175\":4,\"176\":2}}],[\"zxing<\",{\"1\":{\"937\":2}}],[\"zxid比较大的服务器优先作为leader\",{\"1\":{\"183\":1}}],[\"zxid\",{\"1\":{\"183\":3}}],[\"zxf\",{\"1\":{\"174\":1}}],[\"zxvf\",{\"1\":{\"111\":1,\"458\":1,\"461\":1,\"735\":1}}],[\"zoodefs\",{\"1\":{\"1466\":1}}],[\"zoo\",{\"1\":{\"174\":2,\"175\":1}}],[\"zookeeper会根据接收到的节点信息来选择主节点\",{\"1\":{\"1466\":1}}],[\"zookeeper会自动选举一个新的leader副本\",{\"1\":{\"1444\":1}}],[\"zookeeper会监听这个端口接受客户端的访问请求\",{\"1\":{\"174\":1}}],[\"zookeeper以fast\",{\"1\":{\"1203\":1,\"1376\":1}}],[\"zookeeper=文件系统+通知机制\",{\"1\":{\"1194\":1,\"1367\":1}}],[\"zookeeper就将负责通知已经在zookeeper上注册的那些观察者做出反应\",{\"1\":{\"1194\":1,\"1367\":1}}],[\"zookeeper就是其中的佼佼者\",{\"1\":{\"170\":1}}],[\"zookeeper负载过重\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"zookeeper客户端连接指令\",{\"1\":{\"176\":1}}],[\"zookeeper的角色\",{\"1\":{\"1466\":1}}],[\"zookeeper的状态存储位置\",{\"1\":{\"174\":1}}],[\"zookeeper的目标就是封装好复杂易出错的关键服务\",{\"1\":{\"171\":1}}],[\"zookeeper整体架构\",{\"0\":{\"172\":1},\"1\":{\"172\":1}}],[\"zookeeper代码版本中\",{\"1\":{\"171\":1}}],[\"zookeeper包含一个简单的原语集\",{\"1\":{\"171\":1}}],[\"zookeeper是cp还是ap\",{\"0\":{\"1197\":1,\"1370\":1}}],[\"zookeeper是一个分布式协调服务\",{\"1\":{\"1466\":1}}],[\"zookeeper是一个分布式的\",{\"1\":{\"171\":1}}],[\"zookeeper是一个功能非常强大的应用\",{\"1\":{\"182\":1}}],[\"zookeeper是解压包\",{\"1\":{\"174\":1}}],[\"zookeeper是分布式应用程序的分布式协调服务\",{\"1\":{\"169\":1}}],[\"zookeeper介绍\",{\"0\":{\"171\":1}}],[\"zookeeper能完美解决分布式协调服务这个问题\",{\"1\":{\"170\":1}}],[\"zookeeperover\",{\"1\":{\"169\":1}}],[\"zookeeper\",{\"0\":{\"1193\":1,\"1194\":1,\"1196\":1,\"1198\":1,\"1201\":1,\"1366\":1,\"1367\":1,\"1369\":1,\"1371\":1,\"1374\":1},\"1\":{\"169\":4,\"174\":7,\"175\":2,\"176\":2,\"587\":1,\"1116\":2,\"1123\":2,\"1193\":3,\"1194\":3,\"1195\":2,\"1199\":1,\"1200\":4,\"1201\":4,\"1202\":3,\"1304\":2,\"1311\":2,\"1367\":3,\"1368\":2,\"1372\":1,\"1373\":4,\"1374\":4,\"1375\":3,\"1466\":5},\"2\":{\"1205\":1}}],[\"zookeeper简介\",{\"0\":{\"169\":1}}],[\"zone\",{\"1\":{\"123\":1}}],[\"zhang\",{\"1\":{\"487\":2}}],[\"zhihu\",{\"1\":{\"127\":1,\"296\":1,\"1062\":1,\"1260\":1}}],[\"zhuanlan\",{\"1\":{\"127\":1,\"296\":1,\"1062\":1,\"1260\":1}}],[\"删除和更新也都是写操作\",{\"1\":{\"1033\":1,\"1237\":1}}],[\"删除和更新操作的维护成本\",{\"1\":{\"565\":1}}],[\"删除镜像\",{\"1\":{\"1019\":1,\"1225\":1}}],[\"删除工作空间改动代码\",{\"1\":{\"981\":1}}],[\"删除所有缓存的stash\",{\"1\":{\"979\":1}}],[\"删除一个或多个哈希表字段\",{\"1\":{\"668\":1}}],[\"删除记录以释放锁\",{\"1\":{\"640\":1}}],[\"删除索引\",{\"0\":{\"520\":1}}],[\"删除临时索引\",{\"1\":{\"491\":1}}],[\"删除的statement\",{\"1\":{\"826\":1}}],[\"删除的元素\",{\"1\":{\"338\":1}}],[\"删除的位置\",{\"1\":{\"337\":1,\"338\":1}}],[\"删除元素的过程称为出队\",{\"1\":{\"340\":1}}],[\"删除元素的位置\",{\"1\":{\"337\":1}}],[\"删除元素\",{\"1\":{\"338\":1}}],[\"删除位置的元素\",{\"1\":{\"337\":1}}],[\"删除指定键\",{\"1\":{\"666\":1}}],[\"删除指定位置的元素\",{\"1\":{\"337\":1}}],[\"删除指定行\",{\"1\":{\"111\":1}}],[\"删除时变更参数\",{\"1\":{\"209\":1}}],[\"删除操作\",{\"1\":{\"206\":1,\"339\":1}}],[\"删除\",{\"0\":{\"526\":1},\"1\":{\"132\":1,\"566\":1,\"669\":1,\"670\":1,\"688\":1,\"1007\":1,\"1079\":1,\"1135\":1,\"1216\":1,\"1274\":1,\"1320\":1}}],[\"删除包含特定字符的行\",{\"1\":{\"111\":1}}],[\"指带有存活时间\",{\"1\":{\"1195\":1,\"1368\":1}}],[\"指要在连接点\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"指程序运行过程中所执行的方法\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"指令的实现是通过释放对象的锁来实现的\",{\"1\":{\"1481\":1}}],[\"指令的实现是通过获取对象的锁来实现的\",{\"1\":{\"1481\":1}}],[\"指令的实现\",{\"1\":{\"1481\":2}}],[\"指令来实现\",{\"1\":{\"1480\":2}}],[\"指令来实现的\",{\"1\":{\"1480\":1}}],[\"指令重排技术大大提高了程序执行效率\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"指令运行\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"指令\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"指令为执行的容器提供默认值\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"指令可在映像当前层执行任何命令并创建一个新层\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"指令用于组织项目映像\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"指向等待队列的尾节点\",{\"1\":{\"1481\":1}}],[\"指向等待队列的头节点\",{\"1\":{\"1481\":1}}],[\"指向当前持有锁的线程\",{\"1\":{\"1481\":1}}],[\"指向被锁定的对象\",{\"1\":{\"1481\":1}}],[\"指向\",{\"1\":{\"1410\":2}}],[\"指向底层实现数据结构的指针\",{\"1\":{\"698\":1}}],[\"指向下个哈希表节点\",{\"1\":{\"687\":1}}],[\"指向下一个元素\",{\"1\":{\"339\":1}}],[\"指针构成一个单向链表\",{\"1\":{\"687\":1}}],[\"指针\",{\"1\":{\"687\":1}}],[\"指针域\",{\"1\":{\"342\":1}}],[\"指非关系型数据库\",{\"1\":{\"651\":1}}],[\"指事务之间形成了一个闭环\",{\"1\":{\"625\":1}}],[\"指已经分配给一个事务的资源\",{\"1\":{\"625\":1}}],[\"指一个事务至少持有一个资源\",{\"1\":{\"625\":1}}],[\"指某些资源\",{\"1\":{\"625\":1}}],[\"指比较严重的问题\",{\"1\":{\"219\":1}}],[\"指定t的实际类型\",{\"1\":{\"1424\":1}}],[\"指定时间后就会被自动删除\",{\"1\":{\"1195\":1,\"1368\":1}}],[\"指定扫描哪些\",{\"1\":{\"1184\":1,\"1359\":1}}],[\"指定\",{\"1\":{\"1119\":1,\"1307\":1}}],[\"指定监控指标\",{\"1\":{\"952\":1}}],[\"指定数据源\",{\"1\":{\"952\":1}}],[\"指定数据库的主键\",{\"1\":{\"826\":1,\"839\":1}}],[\"指定配置文件\",{\"1\":{\"826\":1}}],[\"指定传入sql的参数\",{\"1\":{\"810\":2}}],[\"指定statement\",{\"1\":{\"810\":2}}],[\"指定systempath\",{\"1\":{\"769\":1}}],[\"指定全局配置文件\",{\"1\":{\"809\":1,\"810\":1}}],[\"指定采用哪个环境\",{\"1\":{\"806\":1,\"808\":1}}],[\"指定的位置进行运行\",{\"1\":{\"1408\":1}}],[\"指定的内容\",{\"1\":{\"787\":1}}],[\"指定的字段是否存在\",{\"1\":{\"668\":1}}],[\"指定关系\",{\"1\":{\"510\":1}}],[\"指定一个字段评分策略\",{\"1\":{\"493\":1}}],[\"指定分区\",{\"1\":{\"1119\":1,\"1307\":1}}],[\"指定分词器\",{\"1\":{\"493\":1}}],[\"指定分割符\",{\"1\":{\"111\":1}}],[\"指定位置插入元素\",{\"1\":{\"337\":1}}],[\"指定客户端允许的数据压缩格式\",{\"1\":{\"211\":1}}],[\"指定客户端信息\",{\"1\":{\"211\":1}}],[\"指定客户端能够接收的内容类型\",{\"1\":{\"211\":1}}],[\"指定视频设备的索引号\",{\"1\":{\"162\":1}}],[\"指定音频码率\",{\"1\":{\"162\":1}}],[\"指定帧率\",{\"1\":{\"162\":1}}],[\"指定从哪儿采集数据\",{\"1\":{\"162\":1}}],[\"指定使用\",{\"1\":{\"162\":2,\"1108\":3,\"1299\":3}}],[\"指定轮询几率\",{\"1\":{\"123\":1}}],[\"指定进程可以打开的最大描述符\",{\"1\":{\"123\":1}}],[\"指南\",{\"0\":{\"47\":1},\"2\":{\"22\":1}}],[\"0之后新增的方式\",{\"1\":{\"1158\":1,\"1338\":1}}],[\"0版本中移\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"0版本type废弃后\",{\"1\":{\"471\":1}}],[\"0的区别\",{\"0\":{\"1095\":1,\"1288\":1}}],[\"0和http1\",{\"0\":{\"1095\":1,\"1288\":1}}],[\"04\",{\"1\":{\"980\":1,\"982\":2}}],[\"0411\",{\"1\":{\"588\":1}}],[\"0成功非0失败\",{\"1\":{\"858\":1}}],[\"02\",{\"1\":{\"799\":1,\"820\":1}}],[\"09\",{\"1\":{\"799\":2,\"820\":1,\"822\":1,\"982\":1}}],[\"08\",{\"1\":{\"852\":5,\"891\":1,\"1044\":2,\"1245\":2}}],[\"087269\",{\"1\":{\"723\":1}}],[\"0829\",{\"1\":{\"153\":1}}],[\"0～10\",{\"1\":{\"718\":1}}],[\"0<\",{\"1\":{\"711\":1,\"778\":2,\"875\":3,\"907\":1,\"925\":1,\"937\":2}}],[\"0到\",{\"1\":{\"698\":1}}],[\"07\",{\"1\":{\"492\":1,\"852\":42,\"853\":14,\"858\":2,\"887\":1,\"891\":1,\"1456\":1}}],[\"0l\",{\"1\":{\"441\":2}}],[\"0~2\",{\"1\":{\"1118\":1,\"1306\":1}}],[\"0~3\",{\"1\":{\"1118\":1,\"1306\":1}}],[\"0~31\",{\"1\":{\"441\":4}}],[\"0~4095\",{\"1\":{\"441\":1}}],[\"0b111111111111=0xfff=4095\",{\"1\":{\"441\":1}}],[\"0b2c\",{\"1\":{\"209\":1}}],[\"0d\",{\"1\":{\"393\":3}}],[\"0用户中心接口更新\",{\"1\":{\"210\":1}}],[\"05\",{\"1\":{\"210\":1,\"799\":1,\"822\":1,\"894\":1}}],[\"05d\",{\"1\":{\"158\":1}}],[\"01`\",{\"1\":{\"788\":1,\"789\":2}}],[\"01\",{\"1\":{\"210\":1,\"441\":2,\"498\":2,\"852\":42,\"853\":14,\"858\":2,\"889\":2}}],[\"03\",{\"1\":{\"210\":1,\"498\":2}}],[\"03d\",{\"1\":{\"158\":2}}],[\"0644\",{\"1\":{\"1420\":1}}],[\"065\",{\"1\":{\"852\":1}}],[\"06\",{\"1\":{\"146\":1,\"822\":2}}],[\"00000\",{\"1\":{\"441\":2}}],[\"0000000001\",{\"1\":{\"858\":1}}],[\"000000000000\",{\"1\":{\"441\":1}}],[\"0000000000\",{\"1\":{\"441\":4,\"858\":1}}],[\"00000001这样子\",{\"1\":{\"414\":1}}],[\"000\",{\"0\":{\"303\":2},\"1\":{\"303\":4,\"304\":2,\"305\":6,\"306\":2,\"1029\":4,\"1233\":4}}],[\"006r3pqbjw1fb5h84baewj306404lmx9\",{\"1\":{\"207\":1}}],[\"00\",{\"1\":{\"146\":4,\"158\":2,\"498\":5,\"893\":1}}],[\"0还是ie8\",{\"1\":{\"123\":1}}],[\"0\",{\"0\":{\"303\":1,\"663\":1,\"708\":1},\"1\":{\"111\":1,\"123\":27,\"157\":1,\"158\":1,\"160\":2,\"162\":7,\"176\":2,\"183\":6,\"190\":2,\"191\":4,\"199\":2,\"200\":1,\"238\":1,\"250\":1,\"293\":2,\"296\":2,\"303\":1,\"306\":8,\"319\":1,\"338\":14,\"339\":12,\"341\":5,\"342\":2,\"390\":4,\"400\":1,\"405\":8,\"406\":1,\"412\":2,\"413\":5,\"417\":4,\"428\":3,\"430\":6,\"440\":3,\"441\":11,\"458\":3,\"459\":4,\"461\":3,\"465\":4,\"466\":3,\"471\":1,\"472\":2,\"482\":1,\"489\":1,\"493\":1,\"540\":1,\"541\":3,\"574\":1,\"589\":1,\"654\":2,\"660\":2,\"666\":1,\"667\":6,\"682\":1,\"687\":2,\"688\":4,\"698\":1,\"699\":1,\"711\":2,\"717\":2,\"718\":5,\"720\":1,\"721\":2,\"722\":7,\"735\":2,\"736\":4,\"751\":1,\"752\":1,\"753\":4,\"755\":2,\"766\":2,\"767\":2,\"771\":1,\"772\":2,\"773\":1,\"778\":18,\"786\":2,\"789\":7,\"800\":2,\"806\":6,\"807\":2,\"808\":4,\"818\":2,\"822\":2,\"826\":3,\"842\":3,\"845\":2,\"849\":1,\"852\":12,\"853\":5,\"858\":1,\"870\":1,\"875\":11,\"878\":1,\"880\":2,\"881\":1,\"882\":2,\"884\":1,\"890\":5,\"891\":1,\"892\":1,\"893\":3,\"895\":3,\"907\":11,\"912\":1,\"917\":2,\"918\":1,\"928\":54,\"951\":2,\"979\":2,\"1001\":1,\"1028\":2,\"1034\":1,\"1041\":1,\"1042\":1,\"1061\":7,\"1062\":2,\"1064\":1,\"1095\":2,\"1118\":1,\"1120\":1,\"1133\":1,\"1138\":1,\"1149\":1,\"1161\":2,\"1176\":2,\"1202\":1,\"1210\":1,\"1232\":2,\"1238\":1,\"1242\":1,\"1243\":1,\"1259\":7,\"1260\":2,\"1262\":1,\"1288\":2,\"1306\":1,\"1308\":1,\"1318\":1,\"1323\":1,\"1332\":1,\"1341\":2,\"1353\":2,\"1375\":1,\"1380\":1,\"1386\":4,\"1390\":9,\"1404\":1,\"1406\":1,\"1446\":1,\"1452\":1,\"1466\":2,\"1478\":2,\"1480\":1,\"1492\":2,\"1494\":3,\"1514\":6,\"1515\":2,\"1524\":2}}],[\"去除停用词\",{\"1\":{\"1470\":1}}],[\"去除文件中字符\",{\"1\":{\"111\":1}}],[\"去调用同一个\",{\"1\":{\"1416\":1}}],[\"去修正并发标记期间的\",{\"1\":{\"1396\":1}}],[\"去中心化\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"去执行\",{\"1\":{\"1100\":1,\"1291\":1}}],[\"去查询\",{\"1\":{\"1004\":1,\"1006\":1,\"1213\":1,\"1215\":1}}],[\"去掉不必要的属性\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"去掉\",{\"1\":{\"863\":1}}],[\"去掉视频的logo\",{\"0\":{\"157\":1}}],[\"去取出参数值信息\",{\"1\":{\"842\":1}}],[\"去重比\",{\"1\":{\"1034\":2,\"1238\":2}}],[\"去重但是可以排序\",{\"1\":{\"720\":1}}],[\"去重\",{\"1\":{\"111\":1,\"719\":1}}],[\">clear\",{\"1\":{\"1481\":1}}],[\">set\",{\"1\":{\"1481\":1}}],[\">sex\",{\"1\":{\"818\":1,\"826\":1,\"849\":1}}],[\">displaced\",{\"1\":{\"1481\":4}}],[\">delete\",{\"1\":{\"1147\":1,\"1330\":1}}],[\">lock\",{\"1\":{\"1481\":2}}],[\">mark\",{\"1\":{\"1481\":2}}],[\">可以匹配任何类型\",{\"1\":{\"1424\":1}}],[\">代表一个未知类型的通配符\",{\"1\":{\"1424\":1}}],[\">和<\",{\"1\":{\"1424\":1}}],[\">销毁\",{\"1\":{\"1085\":1,\"1278\":1}}],[\">请求响应\",{\"1\":{\"1085\":1,\"1278\":1}}],[\">初始化\",{\"1\":{\"1085\":1,\"1278\":1}}],[\">实例化\",{\"1\":{\"1085\":1,\"1278\":1}}],[\">javapub知识清单<\",{\"1\":{\"895\":1}}],[\">相当于if\",{\"1\":{\"850\":1}}],[\"><\",{\"1\":{\"845\":5,\"928\":45}}],[\">birthday\",{\"1\":{\"818\":1,\"826\":1,\"849\":1}}],[\">buf\",{\"1\":{\"682\":1}}],[\">age\",{\"1\":{\"818\":1,\"826\":1,\"849\":1}}],[\">name\",{\"1\":{\"818\":1,\"826\":1,\"849\":1}}],[\">next\",{\"1\":{\"320\":1}}],[\">password\",{\"1\":{\"818\":1,\"826\":1,\"849\":1}}],[\">user\",{\"1\":{\"818\":1,\"826\":1,\"849\":1}}],[\">o\",{\"1\":{\"410\":1}}],[\">key\",{\"1\":{\"320\":1}}],[\">=\",{\"1\":{\"306\":2,\"338\":1,\"339\":1,\"406\":1,\"417\":3,\"863\":3,\"864\":1,\"1042\":1,\"1243\":1,\"1386\":2,\"1406\":1}}],[\">>\",{\"1\":{\"111\":1,\"338\":1,\"1382\":1,\"1386\":1}}],[\">result\",{\"1\":{\"111\":1}}],[\">\",{\"1\":{\"111\":3,\"190\":2,\"191\":2,\"194\":1,\"199\":1,\"306\":1,\"319\":1,\"338\":2,\"339\":1,\"401\":1,\"405\":2,\"413\":1,\"417\":3,\"430\":4,\"441\":2,\"564\":1,\"574\":1,\"666\":22,\"667\":5,\"771\":2,\"772\":1,\"773\":1,\"778\":11,\"787\":7,\"790\":9,\"806\":35,\"807\":6,\"808\":16,\"818\":19,\"822\":1,\"824\":2,\"825\":1,\"826\":20,\"829\":8,\"830\":1,\"831\":5,\"833\":3,\"835\":12,\"842\":7,\"843\":2,\"845\":13,\"847\":2,\"848\":4,\"849\":6,\"850\":2,\"853\":6,\"856\":11,\"857\":12,\"858\":9,\"860\":5,\"863\":2,\"864\":7,\"875\":19,\"878\":37,\"880\":11,\"881\":10,\"882\":17,\"883\":7,\"884\":6,\"890\":17,\"891\":1,\"894\":1,\"895\":7,\"907\":2,\"925\":2,\"928\":30,\"937\":1,\"1047\":2,\"1132\":1,\"1133\":2,\"1134\":3,\"1173\":1,\"1176\":8,\"1248\":2,\"1317\":1,\"1318\":2,\"1319\":3,\"1350\":1,\"1353\":8,\"1380\":2,\"1386\":8,\"1390\":3,\"1392\":1,\"1404\":1,\"1410\":2,\"1416\":5,\"1424\":12,\"1468\":5,\"1478\":1,\"1502\":7,\"1525\":1}}],[\"9586088\",{\"1\":{\"982\":1}}],[\"9527\",{\"1\":{\"721\":4}}],[\"94\",{\"1\":{\"982\":1}}],[\"9200\",{\"1\":{\"459\":1,\"465\":1,\"466\":1,\"489\":3,\"515\":2}}],[\"9300\",{\"1\":{\"459\":1}}],[\"93\",{\"1\":{\"428\":5,\"430\":2}}],[\"9999\",{\"1\":{\"698\":2,\"699\":1,\"1161\":2,\"1341\":2}}],[\"99\",{\"1\":{\"238\":1,\"720\":1,\"858\":2}}],[\"9197\",{\"1\":{\"206\":1}}],[\"97\",{\"1\":{\"162\":1}}],[\"9\",{\"0\":{\"154\":1,\"155\":1,\"156\":1,\"157\":1,\"198\":1,\"212\":1,\"565\":1,\"597\":1,\"637\":1,\"774\":1,\"775\":1,\"776\":1,\"777\":1,\"836\":1,\"837\":1,\"838\":1,\"839\":1,\"840\":1,\"841\":1,\"842\":1,\"843\":1,\"844\":1,\"845\":1,\"1007\":1,\"1033\":1,\"1049\":1,\"1063\":1,\"1077\":1,\"1078\":1,\"1092\":1,\"1107\":1,\"1123\":1,\"1137\":1,\"1150\":1,\"1163\":1,\"1176\":1,\"1189\":1,\"1202\":1,\"1216\":1,\"1238\":1,\"1250\":1,\"1261\":1,\"1272\":1,\"1273\":1,\"1285\":1,\"1298\":1,\"1311\":1,\"1322\":1,\"1333\":1,\"1343\":1,\"1353\":1,\"1364\":1,\"1375\":1},\"1\":{\"111\":1,\"123\":1,\"390\":1,\"412\":10,\"417\":1,\"428\":3,\"430\":1,\"666\":1,\"668\":1,\"669\":1,\"670\":1,\"755\":1,\"875\":1,\"960\":1}}],[\"9092\",{\"1\":{\"1442\":1,\"1448\":1}}],[\"9093\",{\"1\":{\"950\":1}}],[\"9090\",{\"1\":{\"123\":1,\"126\":2,\"950\":1}}],[\"9001\",{\"1\":{\"753\":2}}],[\"9000\",{\"1\":{\"123\":2}}],[\"90\",{\"1\":{\"103\":1,\"123\":3,\"157\":1,\"858\":1,\"1029\":1,\"1233\":1}}],[\"8<\",{\"1\":{\"805\":1,\"875\":3,\"907\":6}}],[\"8个哈希函数\",{\"1\":{\"392\":1}}],[\"8k或者16k\",{\"1\":{\"123\":1}}],[\"8888\",{\"1\":{\"1478\":1}}],[\"88929992\",{\"1\":{\"982\":1}}],[\"88\",{\"1\":{\"123\":2,\"1134\":3,\"1319\":3}}],[\"8m\",{\"1\":{\"123\":1,\"151\":2}}],[\"87601992\",{\"1\":{\"447\":1}}],[\"87\",{\"1\":{\"121\":1}}],[\"8634753\",{\"1\":{\"447\":1}}],[\"86\",{\"1\":{\"121\":1}}],[\"85\",{\"1\":{\"121\":1}}],[\"84\",{\"1\":{\"121\":1,\"158\":1}}],[\"83\",{\"1\":{\"121\":1}}],[\"82\",{\"1\":{\"121\":1}}],[\"81039050\",{\"1\":{\"980\":1,\"982\":1}}],[\"81000次\",{\"1\":{\"654\":1,\"1418\":1}}],[\"810241024\",{\"1\":{\"151\":1}}],[\"81\",{\"1\":{\"121\":1,\"428\":5,\"430\":2,\"1034\":1,\"1238\":1}}],[\"8081\",{\"1\":{\"927\":1,\"929\":4}}],[\"8080\",{\"1\":{\"123\":3,\"205\":2,\"209\":2,\"296\":1,\"894\":1,\"913\":1,\"918\":2,\"948\":2,\"950\":1,\"1507\":1,\"1514\":1}}],[\"8000\",{\"1\":{\"123\":1}}],[\"80s\",{\"1\":{\"123\":1}}],[\"80\",{\"1\":{\"121\":1,\"123\":9,\"928\":3}}],[\"8\",{\"0\":{\"153\":1,\"184\":1,\"197\":1,\"211\":1,\"564\":1,\"596\":1,\"636\":1,\"769\":1,\"770\":1,\"771\":1,\"772\":1,\"773\":1,\"828\":1,\"829\":1,\"830\":1,\"831\":1,\"832\":1,\"833\":1,\"834\":1,\"835\":1,\"1006\":1,\"1021\":1,\"1032\":1,\"1048\":1,\"1062\":1,\"1076\":1,\"1077\":1,\"1091\":1,\"1106\":1,\"1122\":1,\"1136\":1,\"1149\":1,\"1162\":1,\"1175\":1,\"1188\":1,\"1201\":1,\"1215\":1,\"1227\":1,\"1237\":1,\"1249\":1,\"1260\":1,\"1271\":1,\"1272\":1,\"1284\":1,\"1297\":1,\"1310\":1,\"1321\":1,\"1332\":1,\"1342\":1,\"1352\":1,\"1363\":1,\"1374\":1},\"1\":{\"111\":1,\"123\":1,\"151\":1,\"175\":1,\"176\":1,\"319\":1,\"412\":2,\"417\":1,\"428\":2,\"455\":1,\"456\":1,\"513\":1,\"540\":1,\"541\":2,\"657\":1,\"661\":3,\"668\":1,\"669\":1,\"670\":1,\"711\":2,\"721\":2,\"735\":2,\"755\":1,\"806\":2,\"807\":1,\"808\":1,\"818\":1,\"826\":1,\"845\":1,\"875\":1,\"878\":1,\"880\":1,\"881\":1,\"882\":1,\"884\":1,\"890\":2,\"894\":2,\"895\":3,\"907\":2,\"913\":1,\"927\":1,\"928\":1,\"979\":1,\"1041\":1,\"1049\":1,\"1058\":1,\"1108\":1,\"1116\":1,\"1173\":1,\"1242\":1,\"1250\":1,\"1256\":1,\"1299\":1,\"1304\":1,\"1350\":1,\"1380\":1,\"1478\":1}}],[\"7<\",{\"1\":{\"1507\":1}}],[\"7``\",{\"1\":{\"1019\":1,\"1225\":1}}],[\"7及以下\",{\"1\":{\"960\":1}}],[\"771\",{\"1\":{\"928\":2}}],[\"7cbd213e\",{\"1\":{\"853\":1}}],[\"74\",{\"1\":{\"863\":1}}],[\"746\",{\"1\":{\"853\":1}}],[\"744\",{\"1\":{\"853\":1}}],[\"743\",{\"1\":{\"853\":1}}],[\"74076262d8f14d5390e1ba557e0296a0\",{\"1\":{\"203\":1}}],[\"712\",{\"1\":{\"853\":1}}],[\"7178327462869205051\",{\"1\":{\"726\":1}}],[\"7步操作数据库\",{\"1\":{\"800\":1}}],[\"7以下的吧\",{\"1\":{\"764\":1}}],[\"735\",{\"1\":{\"928\":2}}],[\"734\",{\"1\":{\"853\":1}}],[\"73\",{\"1\":{\"428\":5,\"430\":2}}],[\"731444260\",{\"1\":{\"249\":1}}],[\"70\",{\"1\":{\"323\":1}}],[\"7070\",{\"1\":{\"123\":1}}],[\"76\",{\"1\":{\"319\":1}}],[\"76~\",{\"1\":{\"316\":1}}],[\"75f\",{\"1\":{\"1001\":1,\"1210\":1,\"1386\":1,\"1406\":1}}],[\"75\",{\"1\":{\"316\":1,\"319\":1,\"382\":1,\"1406\":1}}],[\"785\",{\"1\":{\"928\":4}}],[\"7850\",{\"1\":{\"176\":1}}],[\"78125\",{\"1\":{\"306\":2}}],[\"7uwuqd\",{\"1\":{\"238\":1}}],[\"7969757\",{\"1\":{\"478\":1}}],[\"79\",{\"1\":{\"121\":1}}],[\"72123709\",{\"1\":{\"441\":1}}],[\"72\",{\"1\":{\"111\":1}}],[\"7\",{\"0\":{\"152\":1,\"183\":1,\"196\":1,\"210\":1,\"563\":1,\"595\":1,\"624\":1,\"635\":1,\"671\":1,\"697\":1,\"698\":1,\"699\":1,\"811\":1,\"822\":1,\"823\":1,\"824\":1,\"825\":1,\"826\":1,\"827\":1,\"835\":1,\"1005\":1,\"1020\":1,\"1031\":1,\"1047\":1,\"1061\":1,\"1075\":1,\"1090\":1,\"1105\":1,\"1121\":1,\"1135\":1,\"1148\":1,\"1161\":1,\"1174\":1,\"1187\":1,\"1200\":1,\"1214\":1,\"1226\":1,\"1236\":1,\"1248\":1,\"1259\":1,\"1270\":1,\"1283\":1,\"1296\":1,\"1309\":1,\"1320\":1,\"1331\":1,\"1341\":1,\"1351\":1,\"1362\":1,\"1373\":1},\"1\":{\"111\":1,\"198\":2,\"390\":1,\"412\":4,\"428\":2,\"455\":2,\"458\":6,\"465\":7,\"466\":5,\"482\":1,\"484\":1,\"496\":1,\"589\":1,\"611\":1,\"657\":1,\"668\":1,\"669\":1,\"670\":1,\"755\":1,\"800\":1,\"875\":1,\"887\":1,\"888\":2,\"889\":2,\"891\":3,\"892\":9,\"893\":8,\"894\":2,\"961\":1,\"979\":1,\"1123\":1,\"1168\":1,\"1173\":1,\"1174\":1,\"1311\":1,\"1345\":1,\"1350\":1,\"1351\":1,\"1380\":1,\"1446\":1,\"1480\":1}}],[\"查不到数据则不写入缓存\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"查询逻辑比较简单\",{\"1\":{\"1506\":1}}],[\"查询解析\",{\"1\":{\"1460\":1}}],[\"查询表等\",{\"1\":{\"1406\":1}}],[\"查询表中的信息\",{\"1\":{\"842\":1}}],[\"查询慢\",{\"1\":{\"1404\":1}}],[\"查询快\",{\"1\":{\"1404\":2}}],[\"查询和修改的时间复杂度都是o\",{\"1\":{\"1380\":1}}],[\"查询时通过该bitmap过滤\",{\"1\":{\"1159\":1,\"1339\":1}}],[\"查询时可指定slop间隔\",{\"1\":{\"493\":1}}],[\"查询日志\",{\"1\":{\"1142\":1,\"1325\":1}}],[\"查询禁用排序使这个取回行为更有效率\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"查询阶段包含以下三个步骤\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"查询阶段\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"查询调优\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"查询到的结果缓存到本地\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"查询一本图书\",{\"1\":{\"893\":1}}],[\"查询条数\",{\"1\":{\"889\":1}}],[\"查询起始位置\",{\"1\":{\"889\":1}}],[\"查询所有图书\",{\"1\":{\"889\":1,\"893\":1}}],[\"查询所有用户\",{\"1\":{\"849\":2}}],[\"查询所有用户信息\",{\"1\":{\"816\":1,\"826\":1}}],[\"查询出下单人信息并且查询出订单详情中的商品数据\",{\"1\":{\"858\":1}}],[\"查询出下单人信息并且查询出订单详情\",{\"1\":{\"857\":1}}],[\"查询订单\",{\"1\":{\"857\":1,\"858\":1}}],[\"查询男性用户\",{\"1\":{\"846\":1,\"847\":2,\"848\":2}}],[\"查询数据为空\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"查询数据的时候\",{\"1\":{\"822\":1}}],[\"查询数据是否已经存在\",{\"1\":{\"387\":1}}],[\"查询第\",{\"1\":{\"718\":1}}],[\"查询可能不会去利用索引\",{\"0\":{\"599\":1}}],[\"查询性能变差\",{\"1\":{\"1380\":1}}],[\"查询性能就能得到较大提高\",{\"1\":{\"1380\":1}}],[\"查询性能将大大提高\",{\"1\":{\"568\":1}}],[\"查询性能稳定\",{\"1\":{\"566\":1}}],[\"查询类型\",{\"1\":{\"565\":1}}],[\"查询以\",{\"1\":{\"564\":1}}],[\"查询维度\",{\"1\":{\"562\":1}}],[\"查询效率\",{\"1\":{\"562\":2}}],[\"查询速度会非常快\",{\"1\":{\"561\":1}}],[\"查询信息等交互\",{\"1\":{\"550\":1}}],[\"查询索引\",{\"0\":{\"521\":1}}],[\"查询全部索引\",{\"0\":{\"517\":1}}],[\"查询临时文件的动态mapping\",{\"1\":{\"491\":1}}],[\"查询模型安装是否成功\",{\"1\":{\"292\":1}}],[\"查询用户信息\",{\"1\":{\"204\":1}}],[\"查询\",{\"0\":{\"176\":1},\"1\":{\"569\":1,\"574\":1}}],[\"查询有哪些设备\",{\"1\":{\"162\":1}}],[\"查询ffmpeg软件信息\",{\"0\":{\"161\":1}}],[\"查询视频总帧数\",{\"0\":{\"160\":1}}],[\"查询操作\",{\"0\":{\"159\":1}}],[\"查看autoconfigurationimportselector\",{\"1\":{\"1185\":1,\"1360\":1}}],[\"查看更多面试题及答案\",{\"1\":{\"1050\":1}}],[\"查看本地主机的所用镜像\",{\"1\":{\"1019\":1,\"1225\":1}}],[\"查看stash了哪些存储\",{\"1\":{\"979\":1}}],[\"查看slf4j日志\",{\"1\":{\"919\":1}}],[\"查看可以发现\",{\"1\":{\"979\":1}}],[\"查看控制台日志\",{\"1\":{\"919\":1}}],[\"查看日志\",{\"0\":{\"919\":1}}],[\"查看镜像是否打包成功\",{\"1\":{\"917\":1}}],[\"查看哈希表\",{\"1\":{\"668\":1}}],[\"查看\",{\"1\":{\"492\":2,\"755\":1,\"1185\":2,\"1360\":2}}],[\"查看结果\",{\"1\":{\"487\":1}}],[\"查看是否安装成功\",{\"1\":{\"465\":1,\"466\":1}}],[\"查看已注册服务\",{\"1\":{\"176\":1}}],[\"查看集群状态\",{\"1\":{\"133\":1}}],[\"查看文件92行前后20行\",{\"1\":{\"111\":1}}],[\"查看详情\",{\"1\":{\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1}}],[\"查找元素等操作的时间复杂度均为o\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"查找元素的所有位置\",{\"1\":{\"337\":1}}],[\"查找或者更新操作时\",{\"1\":{\"688\":1}}],[\"查找的复杂度都是o\",{\"1\":{\"670\":1}}],[\"查找的复杂度都是\",{\"1\":{\"669\":1}}],[\"查找指定元素的位置\",{\"1\":{\"337\":1}}],[\"查找位置\",{\"1\":{\"337\":1}}],[\"查找文件\",{\"1\":{\"111\":1}}],[\"查找运行的进程\",{\"1\":{\"111\":1}}],[\"常量\",{\"1\":{\"1099\":1,\"1290\":1,\"1388\":2}}],[\"常数复杂度获取字符串长度\",{\"1\":{\"683\":1}}],[\"常见的解决aba问题的方法是使用版本号或者时间戳\",{\"1\":{\"1476\":1}}],[\"常见的使用场景有\",{\"1\":{\"1476\":1}}],[\"常见的方案就是\",{\"1\":{\"1190\":1,\"1365\":1}}],[\"常见的策略有两种\",{\"1\":{\"1009\":1,\"1218\":1}}],[\"常见的问题\",{\"1\":{\"1003\":1,\"1212\":1}}],[\"常见的缓存工具和框架列举如下\",{\"1\":{\"1002\":1,\"1211\":1}}],[\"常见的常见的缓存工具和框架有哪些\",{\"0\":{\"1002\":1,\"1211\":1}}],[\"常见的nosql产品有\",{\"1\":{\"651\":1}}],[\"常见问题解答\",{\"0\":{\"113\":1}}],[\"常见问题\",{\"1\":{\"1\":1}}],[\"常索引单位是单词\",{\"1\":{\"477\":1}}],[\"常常会有朋友和亲人问能不能赚到\",{\"1\":{\"263\":1}}],[\"常用实现类有\",{\"1\":{\"1406\":1}}],[\"常用命令\",{\"1\":{\"1198\":1,\"1371\":1}}],[\"常用命令大全\",{\"0\":{\"111\":1}}],[\"常用选主机制的缺点\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"常用的命令\",{\"0\":{\"1198\":1,\"1371\":1}}],[\"常用的解决方案有\",{\"1\":{\"1160\":1,\"1340\":1}}],[\"常用的\",{\"0\":{\"1108\":1,\"1299\":1}}],[\"常用git\",{\"1\":{\"979\":1}}],[\"常用作缓存的一种技术\",{\"1\":{\"678\":1}}],[\"常用指令\",{\"0\":{\"177\":1},\"1\":{\"667\":1}}],[\"常用参数说明\",{\"1\":{\"144\":1}}],[\"放入fruit\",{\"1\":{\"1424\":1}}],[\"放入apple\",{\"1\":{\"1424\":1}}],[\"放进\",{\"1\":{\"1143\":1,\"1326\":1}}],[\"放进master上的binlog中\",{\"1\":{\"1143\":1,\"1326\":1}}],[\"放进去\",{\"1\":{\"1131\":1,\"1316\":1}}],[\"放在\",{\"1\":{\"928\":1}}],[\"放图片\",{\"1\":{\"108\":1}}],[\"放文档\",{\"1\":{\"108\":1}}],[\"没错\",{\"1\":{\"1434\":1,\"1436\":4,\"1444\":4,\"1450\":2,\"1456\":1,\"1460\":1,\"1464\":1,\"1470\":1}}],[\"没问题\",{\"1\":{\"1432\":1}}],[\"没添加拦截器之前成功访问\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"没写\",{\"1\":{\"1019\":1,\"1225\":1}}],[\"没人阻止您一定要用更短的键值节省一丁点儿空间\",{\"1\":{\"665\":1}}],[\"没有的话选择擅长和熟悉的技术栈\",{\"1\":{\"1502\":1}}],[\"没有的话再查询数据库\",{\"1\":{\"1416\":1}}],[\"没有方法\",{\"1\":{\"1402\":1}}],[\"没有人比中国人更懂\",{\"1\":{\"1380\":1}}],[\"没有数据库的事务支持\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"没有循环依赖\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"没有进入真正的业务处理\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"没有必要因为是多线程而用\",{\"1\":{\"1072\":1,\"1267\":1}}],[\"没有缓存数值\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"没有问题\",{\"1\":{\"891\":1}}],[\"没有分离\",{\"1\":{\"835\":1}}],[\"没有起作用\",{\"1\":{\"755\":1}}],[\"没有实际的例子代码\",{\"1\":{\"755\":1}}],[\"没有实际的数据\",{\"1\":{\"323\":1}}],[\"没有\",{\"1\":{\"711\":1}}],[\"没有直接使用\",{\"1\":{\"682\":1}}],[\"没有其他事务可以对这张表进行读写操作\",{\"1\":{\"624\":1}}],[\"没有索引\",{\"1\":{\"564\":2}}],[\"没有新建字段\",{\"1\":{\"489\":1}}],[\"没有形成开箱即用的工具类\",{\"1\":{\"440\":1}}],[\"没有网络消耗\",{\"1\":{\"438\":1}}],[\"没有任何元素的队列则称为空队\",{\"1\":{\"340\":1}}],[\"没有找到\",{\"1\":{\"711\":1}}],[\"没有找到两个不包含数字0的整数\",{\"1\":{\"306\":1}}],[\"没有找到正数\",{\"1\":{\"190\":1}}],[\"没有官方的商业支持\",{\"1\":{\"241\":1}}],[\"没有打印系统异常\",{\"1\":{\"225\":1}}],[\"没有日志的程序运行起来就如同脱缰的野🐎\",{\"1\":{\"218\":1}}],[\"没有重构的条件表达式\",{\"1\":{\"198\":1}}],[\"没有使用\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"没有使用私服的仓库构件下载\",{\"1\":{\"768\":1}}],[\"没有使用异常处理\",{\"1\":{\"200\":1}}],[\"没有使用状态模式\",{\"1\":{\"197\":1}}],[\"没有使用命令模式\",{\"1\":{\"196\":1}}],[\"没有使用函数封装\",{\"1\":{\"195\":1}}],[\"没有使用查找表\",{\"1\":{\"194\":1}}],[\"没有使用策略模式\",{\"1\":{\"193\":1}}],[\"没有早返回\",{\"1\":{\"190\":1}}],[\"没关系\",{\"1\":{\"107\":1}}],[\"没玩没关系\",{\"1\":{\"72\":1}}],[\"有客户说\",{\"1\":{\"1502\":1}}],[\"有个学妹自学了半年编程\",{\"1\":{\"1502\":1}}],[\"有个老六在定义了一个状态码\",{\"1\":{\"1494\":1}}],[\"有同学会问\",{\"1\":{\"1494\":1}}],[\"有消息会通知你\",{\"1\":{\"1481\":1}}],[\"有几种常见的解决hashmap线程不安全的方法\",{\"1\":{\"1446\":1}}],[\"有的是数据节点\",{\"1\":{\"1462\":1}}],[\"有的是主节点\",{\"1\":{\"1462\":1}}],[\"有的话直接返回\",{\"1\":{\"1416\":1}}],[\"有的同学可能在测试上面代码的时候程序可以正常退出\",{\"1\":{\"755\":1}}],[\"有的同学说\",{\"1\":{\"107\":1}}],[\"有很深入的理解\",{\"1\":{\"1414\":1}}],[\"有很好的性能\",{\"1\":{\"438\":1}}],[\"有以下几点建议\",{\"1\":{\"1408\":1}}],[\"有三个级别可供选择\",{\"1\":{\"1452\":1}}],[\"有三个线程\",{\"0\":{\"1064\":1,\"1262\":1}}],[\"有三种情况会触发类的初始化\",{\"1\":{\"1392\":1}}],[\"有哪几个阶段会触发类初始化\",{\"1\":{\"1392\":1}}],[\"有哪些优点\",{\"0\":{\"1182\":1,\"1357\":1}}],[\"有哪些实现方式\",{\"0\":{\"1137\":1,\"1322\":1}}],[\"有哪些动态\",{\"0\":{\"1134\":1,\"1319\":1}}],[\"有哪些垃圾回收器\",{\"0\":{\"1104\":1,\"1295\":1}}],[\"有哪些垃圾回收算法\",{\"0\":{\"1103\":1,\"1294\":1}}],[\"有哪些内置对象\",{\"0\":{\"1084\":1,\"1277\":1}}],[\"有哪些用法\",{\"0\":{\"1048\":1,\"1249\":1}}],[\"有哪些常见问题\",{\"0\":{\"1003\":1,\"1212\":1}}],[\"有哪些项目信息\",{\"1\":{\"762\":1}}],[\"有多个可替代的map实现供选择\",{\"1\":{\"1380\":1}}],[\"有多个模块时\",{\"1\":{\"907\":1}}],[\"有趣\",{\"1\":{\"1378\":1}}],[\"有相关的读写操作时\",{\"1\":{\"1190\":1,\"1365\":1}}],[\"有相似之处\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"有继承关系\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"有共享锁和排他锁\",{\"1\":{\"1150\":1,\"1333\":1}}],[\"有共识就有价值\",{\"1\":{\"536\":1}}],[\"有配置\",{\"1\":{\"1133\":1,\"1318\":1}}],[\"有配置时\",{\"1\":{\"1133\":1,\"1318\":1}}],[\"有大小限制\",{\"1\":{\"1092\":1,\"1285\":1}}],[\"有大量的并发请求过来\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"有loginrequired注解说明需要登录\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"有使用过注解吗\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"有什么优势呢\",{\"1\":{\"1450\":1}}],[\"有什么用\",{\"0\":{\"1134\":1,\"1319\":1},\"1\":{\"1378\":1}}],[\"有什么作用\",{\"0\":{\"1115\":1,\"1303\":1}}],[\"有什么不同\",{\"0\":{\"1061\":1,\"1063\":1,\"1259\":1,\"1261\":1}}],[\"有什么特点\",{\"0\":{\"1047\":1,\"1248\":1}}],[\"有什么区别\",{\"0\":{\"1070\":1,\"1072\":1,\"1265\":1,\"1267\":1},\"1\":{\"121\":1,\"984\":1,\"1424\":1,\"1476\":1}}],[\"有局限性\",{\"1\":{\"1034\":2,\"1238\":2}}],[\"有限制的\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"有限的桌面环境\",{\"1\":{\"240\":1}}],[\"有两种方案可以解决\",{\"1\":{\"1004\":1,\"1006\":1,\"1213\":1,\"1215\":1}}],[\"有两种字符串类型\",{\"1\":{\"496\":1}}],[\"有完整的\",{\"1\":{\"989\":1}}],[\"有更高的吞吐量\",{\"1\":{\"989\":1}}],[\"有需要帮助请留言\",{\"1\":{\"895\":1}}],[\"有了解吗\",{\"1\":{\"1386\":1}}],[\"有了\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"有了这两项技术\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"有了这个统计结果\",{\"1\":{\"412\":1}}],[\"有了cgroup就可以控制容器中进程对系统资源的消耗了\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"有了一定了解\",{\"1\":{\"870\":1}}],[\"有问题\",{\"1\":{\"842\":1}}],[\"有clean生命周期\",{\"1\":{\"775\":1}}],[\"有没有其他关于选主的问题想要问我的呢\",{\"1\":{\"1466\":1}}],[\"有没有其他的建议或技巧可以分享给我们呢\",{\"1\":{\"1442\":1}}],[\"有没有其他的建议\",{\"1\":{\"1440\":1}}],[\"有没有什么源码方面的知识可以分享一下\",{\"1\":{\"1462\":1}}],[\"有没有什么想补充的\",{\"1\":{\"1460\":1}}],[\"有没有什么问题想问我的\",{\"1\":{\"1450\":1}}],[\"有没有什么其他的问题你想问我的\",{\"1\":{\"1438\":1}}],[\"有没有什么其他问题或者想法\",{\"1\":{\"1428\":1}}],[\"有没有什么需要注意的地方呢\",{\"1\":{\"1428\":1,\"1448\":1}}],[\"有没有注意到\",{\"1\":{\"687\":1}}],[\"有没有发现上面的命令大多都是对文件的操作\",{\"1\":{\"107\":1}}],[\"有一些共同的方法\",{\"1\":{\"1404\":1}}],[\"有一点我们要注意\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"有一定的了解\",{\"1\":{\"1414\":1}}],[\"有一定了解\",{\"1\":{\"998\":1}}],[\"有一定工作经验的技术人\",{\"1\":{\"586\":1}}],[\"有一个学生对象\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"有一个关键字\",{\"1\":{\"755\":1}}],[\"有一个\",{\"1\":{\"482\":1}}],[\"有一个整体认识和实践实战\",{\"1\":{\"464\":1,\"481\":1,\"513\":1}}],[\"有索引\",{\"1\":{\"564\":1}}],[\"有利于磁盘的顺序访问\",{\"1\":{\"562\":1}}],[\"有利于快速定位问题原因\",{\"1\":{\"229\":1}}],[\"有且仅有\",{\"1\":{\"487\":1}}],[\"有如下几种方式来实现\",{\"1\":{\"1008\":1,\"1217\":1}}],[\"有如下操作方法\",{\"1\":{\"723\":1}}],[\"有如下\",{\"1\":{\"486\":1}}],[\"有色趋势很不错\",{\"1\":{\"461\":1}}],[\"有些应用需要根据事件来触发相应的操作\",{\"1\":{\"1434\":1}}],[\"有些应用需要实时地处理大量的数据流\",{\"1\":{\"1434\":1}}],[\"有些面试官喜欢问\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"有些业务场景\",{\"1\":{\"485\":1}}],[\"有些情况会使用我们自己的分词服务\",{\"1\":{\"467\":1}}],[\"有些地方从github下载网络不好\",{\"1\":{\"465\":1,\"466\":1}}],[\"有些双向引用的数据\",{\"1\":{\"436\":1}}],[\"有些接口参数涉及到隐私和敏感数据\",{\"1\":{\"212\":1}}],[\"有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序\",{\"1\":{\"401\":1}}],[\"有可能在同一台主机也有可能在不同的主机上\",{\"1\":{\"182\":1}}],[\"有兴趣的同学可以参考维基英文页面\",{\"1\":{\"392\":1}}],[\"有最小存储单元\",{\"1\":{\"325\":1}}],[\"有序集成员按分数值递减\",{\"1\":{\"670\":1}}],[\"有序集合数据类型\",{\"1\":{\"1156\":1,\"1336\":1}}],[\"有序集合中对指定成员的分数加上增量\",{\"1\":{\"670\":1}}],[\"有序集合的成员是唯一的\",{\"1\":{\"670\":1}}],[\"有序集合\",{\"0\":{\"670\":1},\"1\":{\"652\":1,\"664\":1,\"670\":1,\"699\":1,\"1155\":1,\"1335\":1}}],[\"有序\",{\"1\":{\"320\":1}}],[\"有1\",{\"1\":{\"319\":1}}],[\"有10mbps\",{\"1\":{\"151\":1}}],[\"有效防止数据丢失\",{\"1\":{\"1420\":1}}],[\"有效期长\",{\"1\":{\"1160\":1,\"1340\":1}}],[\"有效期按照经验值设置\",{\"1\":{\"1160\":1,\"1340\":1}}],[\"有效的降低了消息丢失的风险\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"有效的降低了b\",{\"1\":{\"319\":1}}],[\"有效日志才是\",{\"1\":{\"220\":1}}],[\"有句经典话叫\",{\"1\":{\"263\":1}}],[\"有句话叫做\",{\"1\":{\"107\":1}}],[\"有过金融投资的朋友都知道\",{\"1\":{\"263\":1}}],[\"有时为了监控sql执行效率\",{\"1\":{\"833\":1}}],[\"有时也叫它二级索引\",{\"1\":{\"560\":1}}],[\"有时会遇到稳定性问题\",{\"1\":{\"242\":1}}],[\"有时候需要去新的表去查询数据\",{\"1\":{\"842\":1}}],[\"有时候需要获取一些公共的配置\",{\"1\":{\"179\":1}}],[\"有时候从历史表中去查询数据\",{\"1\":{\"842\":1}}],[\"有时候\",{\"1\":{\"157\":1,\"567\":1}}],[\"有3年可选\",{\"1\":{\"238\":1}}],[\"有不小的优惠力度\",{\"1\":{\"238\":1}}],[\"有权限校验的接口请求\",{\"1\":{\"211\":1}}],[\"有默认启动配置文件\",{\"1\":{\"174\":1}}],[\"有任何问题都可以继续问我\",{\"1\":{\"1394\":1}}],[\"有任何问题都可以来谈谈\",{\"1\":{\"167\":1,\"381\":1,\"400\":1,\"409\":1,\"417\":1,\"430\":1,\"650\":1,\"676\":1,\"711\":1,\"761\":1,\"795\":1}}],[\"有任何争议可以留言\",{\"1\":{\"167\":1,\"381\":1,\"400\":1,\"409\":1,\"417\":1,\"430\":1,\"650\":1,\"676\":1,\"704\":1,\"761\":1,\"795\":1}}],[\"有办法\",{\"1\":{\"157\":1}}],[\"有人气了就有共识\",{\"1\":{\"536\":1}}],[\"有人问rodert哥这篇文章干货有多干\",{\"1\":{\"138\":1}}],[\"有人说免费还这么多事\",{\"1\":{\"98\":1}}],[\"有人就是对游戏不感冒\",{\"1\":{\"72\":1}}],[\"d这4个对象之间已经没有了耦合关系\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"d这4个对象没有了耦合关系\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"db\",{\"0\":{\"1007\":1,\"1216\":1},\"1\":{\"1003\":1,\"1004\":4,\"1005\":9,\"1006\":5,\"1007\":9,\"1008\":1,\"1017\":2,\"1212\":1,\"1213\":4,\"1214\":9,\"1215\":5,\"1216\":9,\"1217\":1,\"1223\":2,\"1420\":2}}],[\"dc\",{\"1\":{\"928\":1}}],[\"dyuproject\",{\"1\":{\"875\":2}}],[\"dynamic参数设置\",{\"1\":{\"484\":1}}],[\"dynamic\",{\"0\":{\"484\":1},\"1\":{\"467\":1,\"484\":4,\"492\":2,\"493\":1,\"682\":1}}],[\"dd\",{\"1\":{\"863\":2,\"864\":2,\"928\":2}}],[\"dto\",{\"1\":{\"892\":2,\"893\":4,\"894\":2}}],[\"dtd\",{\"1\":{\"806\":3,\"807\":3,\"808\":3,\"818\":3,\"826\":3,\"845\":3,\"880\":3,\"890\":6}}],[\"dtest=类名\",{\"1\":{\"768\":1}}],[\"dskiptests\",{\"1\":{\"768\":1,\"913\":1}}],[\"dmanven\",{\"1\":{\"768\":1}}],[\"dversion=0\",{\"1\":{\"766\":2,\"767\":2}}],[\"dgroupid=com\",{\"1\":{\"766\":2,\"767\":2}}],[\"driven\",{\"1\":{\"881\":1,\"882\":1}}],[\"driver=com\",{\"1\":{\"879\":1}}],[\"driverclass\",{\"1\":{\"878\":1}}],[\"driver\",{\"1\":{\"800\":1,\"806\":6,\"808\":2,\"829\":3,\"878\":1,\"879\":1,\"927\":2,\"1507\":2}}],[\"drivermanager\",{\"1\":{\"800\":2,\"1133\":1,\"1318\":1}}],[\"drop是ddl\",{\"1\":{\"1147\":1,\"1330\":1}}],[\"drop>\",{\"1\":{\"1147\":1,\"1330\":1}}],[\"drop\",{\"0\":{\"606\":1,\"1147\":1,\"1330\":1},\"1\":{\"604\":1,\"799\":1,\"887\":2,\"927\":2,\"979\":1}}],[\"dry\",{\"1\":{\"103\":1}}],[\"d表示最大的数有多少位\",{\"1\":{\"430\":1}}],[\"damaged\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"daemon\",{\"1\":{\"915\":2,\"1018\":1,\"1224\":1}}],[\"daocloud\",{\"1\":{\"915\":1}}],[\"dao接口的工作原理是jdk动态代理\",{\"1\":{\"1132\":1,\"1317\":1}}],[\"dao接口测试\",{\"0\":{\"891\":1}}],[\"dao接口xml\",{\"0\":{\"890\":1}}],[\"dao接口\",{\"0\":{\"889\":1},\"1\":{\"890\":1}}],[\"dao层\",{\"1\":{\"875\":1}}],[\"dao\",{\"0\":{\"878\":1,\"1132\":2,\"1317\":2},\"1\":{\"817\":1,\"820\":2,\"825\":4,\"826\":2,\"835\":1,\"852\":18,\"853\":6,\"856\":1,\"875\":1,\"878\":4,\"883\":1,\"889\":2,\"890\":3,\"891\":5,\"892\":1,\"893\":2,\"1132\":1,\"1168\":1,\"1317\":1,\"1345\":1}}],[\"dartifactid=helloweb\",{\"1\":{\"767\":2}}],[\"dartifactid=hellojava\",{\"1\":{\"766\":2}}],[\"darchetypeartifactid=maven\",{\"1\":{\"766\":2,\"767\":2}}],[\"darchetypecatalog=internal\",{\"1\":{\"766\":2,\"767\":2}}],[\"day\",{\"1\":{\"198\":8}}],[\"data节点\",{\"1\":{\"1031\":1,\"1235\":1}}],[\"databind<\",{\"1\":{\"875\":1}}],[\"database\",{\"1\":{\"111\":1,\"569\":1,\"574\":1,\"677\":1,\"727\":1,\"799\":1,\"842\":1,\"887\":1,\"926\":1,\"927\":2,\"1158\":1,\"1338\":1,\"1420\":1}}],[\"datacenteridshift\",{\"1\":{\"441\":2}}],[\"datacenteridbits\",{\"1\":{\"441\":3}}],[\"datacenterid\",{\"1\":{\"440\":2,\"441\":9}}],[\"data2\",{\"1\":{\"390\":3}}],[\"datasourcetransactionmanager\",{\"1\":{\"881\":1}}],[\"datasource\",{\"1\":{\"852\":3,\"853\":2,\"878\":3,\"881\":3,\"927\":1,\"1507\":2}}],[\"datasource>\",{\"1\":{\"806\":2,\"808\":1,\"829\":1}}],[\"datas\",{\"1\":{\"341\":6}}],[\"datalogdir=\",{\"1\":{\"174\":1}}],[\"datadir\",{\"1\":{\"174\":2}}],[\"data\",{\"1\":{\"123\":1,\"126\":2,\"129\":1,\"169\":1,\"174\":1,\"296\":1,\"320\":10,\"322\":2,\"323\":7,\"341\":4,\"342\":9,\"390\":11,\"430\":3,\"459\":1,\"574\":4,\"636\":3,\"677\":1,\"887\":1,\"888\":4,\"892\":2,\"893\":6,\"915\":1,\"1030\":1,\"1049\":1,\"1050\":1,\"1100\":1,\"1234\":1,\"1250\":1,\"1251\":1,\"1291\":1,\"1494\":11}}],[\"datetimeformat\",{\"1\":{\"882\":1}}],[\"datetime\",{\"1\":{\"799\":2,\"855\":2,\"858\":2}}],[\"datecenterid\",{\"1\":{\"440\":1}}],[\"date\",{\"1\":{\"107\":1,\"341\":1,\"342\":1,\"390\":1,\"405\":1,\"430\":1,\"492\":2,\"501\":1,\"751\":1,\"752\":1,\"799\":1,\"810\":4,\"820\":3,\"826\":3,\"849\":1,\"855\":2,\"856\":5,\"857\":2,\"863\":14,\"864\":2,\"887\":1,\"888\":4,\"889\":2,\"891\":3,\"892\":5,\"893\":4,\"894\":1,\"912\":1,\"1061\":2,\"1062\":1,\"1064\":1,\"1259\":2,\"1260\":1,\"1262\":1,\"1456\":1}}],[\"d是在leader挂掉时专门用来进行选举leader所用的端口\",{\"1\":{\"174\":1}}],[\"d中的a是一个数字\",{\"1\":{\"174\":1}}],[\"dialect\",{\"1\":{\"1138\":1,\"1323\":1}}],[\"diff\",{\"1\":{\"979\":2}}],[\"diff看到此时的修改信息\",{\"1\":{\"979\":1}}],[\"di\",{\"0\":{\"1170\":1,\"1347\":1},\"1\":{\"928\":2,\"1170\":1,\"1347\":1,\"1408\":1}}],[\"dicttype\",{\"1\":{\"687\":3}}],[\"dictentry\",{\"1\":{\"687\":6}}],[\"dictht\",{\"1\":{\"687\":5}}],[\"dict\",{\"1\":{\"687\":5}}],[\"dictionary\",{\"1\":{\"652\":1}}],[\"dir\",{\"1\":{\"569\":1}}],[\"directorpassflow\",{\"1\":{\"928\":3}}],[\"directornotpassflow\",{\"1\":{\"928\":3}}],[\"directortak\",{\"1\":{\"928\":6}}],[\"directory\",{\"1\":{\"169\":1}}],[\"direct\",{\"1\":{\"193\":1}}],[\"displaced\",{\"1\":{\"1481\":2}}],[\"disposablebean\",{\"1\":{\"1410\":4}}],[\"dispatcherservlet\",{\"1\":{\"1408\":3,\"1414\":15}}],[\"dispatcherservlet<\",{\"1\":{\"883\":1}}],[\"discardpolicy\",{\"1\":{\"1384\":2}}],[\"discardoldestpolicy\",{\"1\":{\"1384\":2}}],[\"disc\",{\"1\":{\"569\":1}}],[\"discovery\",{\"1\":{\"459\":2,\"1027\":1,\"1031\":1,\"1231\":1,\"1235\":1}}],[\"distribution\",{\"1\":{\"424\":1}}],[\"distributed\",{\"1\":{\"129\":2,\"169\":6,\"1460\":1}}],[\"digital\",{\"1\":{\"427\":2}}],[\"divisor\",{\"1\":{\"200\":5}}],[\"dividend\",{\"1\":{\"200\":4}}],[\"divide\",{\"1\":{\"200\":4}}],[\"dopost\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"doget\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"dog\",{\"1\":{\"789\":1}}],[\"doafterreturning\",{\"1\":{\"752\":1}}],[\"dobeforeadvice\",{\"1\":{\"752\":1}}],[\"double\",{\"1\":{\"393\":4,\"497\":1,\"501\":1,\"670\":1,\"691\":1,\"857\":1,\"858\":1,\"1042\":1,\"1243\":1}}],[\"dosubsomething\",{\"1\":{\"226\":2}}],[\"dosth\",{\"1\":{\"223\":1,\"225\":1}}],[\"dosomething\",{\"1\":{\"223\":1,\"224\":2,\"226\":1,\"228\":3,\"229\":4,\"1064\":3,\"1262\":3,\"1382\":4,\"1402\":2,\"1480\":3}}],[\"dosome\",{\"1\":{\"221\":1}}],[\"do\",{\"1\":{\"193\":1,\"221\":3,\"226\":2,\"229\":2,\"1380\":1,\"1382\":2,\"1476\":1}}],[\"download\",{\"1\":{\"291\":1,\"461\":1,\"661\":1,\"764\":1,\"791\":2,\"915\":1,\"950\":1}}],[\"down表示单前的server暂时不参与负载\",{\"1\":{\"123\":1}}],[\"down\",{\"1\":{\"123\":1,\"1061\":14,\"1259\":14}}],[\"docreatebean\",{\"1\":{\"1412\":1}}],[\"doctype\",{\"1\":{\"806\":1,\"807\":1,\"808\":1,\"818\":1,\"826\":1,\"845\":1,\"880\":1,\"890\":2,\"895\":1}}],[\"docker采用control\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"docker容器之间怎么隔离\",{\"0\":{\"1021\":1,\"1227\":1}}],[\"docker常用命令\",{\"0\":{\"1019\":1,\"1225\":1}}],[\"dockercontainer\",{\"1\":{\"1018\":1,\"1224\":1}}],[\"dockerclient\",{\"1\":{\"1018\":1,\"1224\":1}}],[\"dockerhub\",{\"1\":{\"915\":1}}],[\"dockerfile\",{\"0\":{\"1016\":1,\"1222\":1},\"1\":{\"914\":1,\"917\":1,\"1016\":4,\"1222\":4,\"1512\":5,\"1514\":1}}],[\"dockerfile讲解\",{\"1\":{\"913\":1}}],[\"docker\",{\"0\":{\"1013\":1,\"1014\":1,\"1015\":1,\"1020\":1,\"1219\":1,\"1220\":1,\"1221\":1,\"1226\":1},\"1\":{\"295\":1,\"296\":2,\"915\":22,\"917\":5,\"918\":3,\"919\":3,\"1013\":3,\"1014\":2,\"1015\":1,\"1016\":4,\"1017\":5,\"1018\":2,\"1019\":1,\"1020\":1,\"1220\":2,\"1221\":1,\"1222\":4,\"1223\":5,\"1224\":2,\"1225\":1,\"1226\":1,\"1511\":1,\"1512\":8,\"1515\":3},\"2\":{\"1023\":1,\"1517\":1}}],[\"docker在线linux操作视频\",{\"1\":{\"107\":1}}],[\"doc\",{\"1\":{\"169\":1,\"484\":1,\"486\":6,\"487\":2,\"489\":3,\"492\":2,\"493\":2,\"510\":1,\"589\":1,\"590\":3,\"611\":1,\"967\":1,\"1456\":1}}],[\"documents\",{\"1\":{\"1462\":4}}],[\"documentation>\",{\"1\":{\"928\":1}}],[\"documented\",{\"1\":{\"751\":1,\"1049\":1,\"1250\":1}}],[\"document\",{\"0\":{\"473\":1},\"1\":{\"123\":1,\"473\":1,\"863\":1,\"1028\":1,\"1232\":1,\"1456\":1,\"1460\":1,\"1462\":7}}],[\"docsify\",{\"1\":{\"972\":2,\"973\":1,\"975\":2,\"976\":4}}],[\"docs\",{\"0\":{\"1529\":1},\"1\":{\"108\":1,\"277\":1,\"493\":1,\"973\":1,\"974\":2,\"976\":1,\"1041\":1,\"1058\":2,\"1242\":1,\"1256\":2}}],[\"detected\",{\"1\":{\"1481\":1}}],[\"detail<\",{\"1\":{\"895\":1}}],[\"detail\",{\"1\":{\"858\":2,\"894\":3}}],[\"detaillist\",{\"1\":{\"857\":2,\"858\":1}}],[\"details\",{\"1\":{\"277\":1,\"296\":2,\"328\":1,\"441\":1,\"447\":2,\"478\":1,\"583\":1,\"738\":1,\"860\":1,\"980\":1,\"982\":2,\"987\":1}}],[\"deathlock\",{\"1\":{\"1062\":2,\"1260\":2}}],[\"deadlock\",{\"1\":{\"169\":1,\"1062\":2,\"1260\":2}}],[\"deep\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"depends\",{\"1\":{\"1017\":2,\"1223\":2,\"1410\":1}}],[\"dependencies<\",{\"1\":{\"907\":1}}],[\"dependencies\",{\"1\":{\"900\":1,\"907\":1,\"1412\":1}}],[\"dependencies>\",{\"1\":{\"778\":2,\"875\":1,\"907\":2}}],[\"dependency\",{\"1\":{\"1408\":1,\"1410\":1}}],[\"dependencymanagement\",{\"1\":{\"907\":1}}],[\"dependencymanagement>\",{\"1\":{\"778\":1,\"907\":1}}],[\"dependency>\",{\"1\":{\"711\":1,\"750\":1,\"771\":2,\"772\":4,\"773\":2,\"778\":6,\"798\":1,\"805\":1,\"819\":1,\"875\":23,\"907\":3,\"925\":3,\"937\":2,\"948\":3,\"1049\":1,\"1250\":1,\"1507\":2}}],[\"dependence\",{\"1\":{\"769\":1}}],[\"deprecated表示这个方法以后可能会删掉\",{\"1\":{\"1402\":1}}],[\"deprecated\",{\"1\":{\"939\":1,\"1049\":1,\"1250\":1}}],[\"deploy阶段\",{\"1\":{\"777\":1}}],[\"deploy\",{\"1\":{\"768\":1,\"776\":1,\"777\":1}}],[\"develop\",{\"1\":{\"978\":1}}],[\"development\",{\"1\":{\"806\":1}}],[\"device\",{\"1\":{\"915\":1}}],[\"devices\",{\"1\":{\"161\":1,\"162\":1}}],[\"dev\",{\"1\":{\"589\":1,\"590\":3,\"611\":1,\"829\":1}}],[\"decode\",{\"1\":{\"1042\":2,\"1243\":2}}],[\"decoders\",{\"1\":{\"161\":1}}],[\"decimal\",{\"1\":{\"858\":2}}],[\"decrement\",{\"1\":{\"1480\":2}}],[\"decrby\",{\"1\":{\"666\":1}}],[\"decr\",{\"1\":{\"666\":1}}],[\"declare\",{\"1\":{\"589\":1}}],[\"dequeue|pop\",{\"1\":{\"340\":1}}],[\"deb包高度集中\",{\"1\":{\"241\":1}}],[\"debian以其稳定性和社区支持而闻名\",{\"1\":{\"241\":1}}],[\"debian\",{\"0\":{\"241\":1}}],[\"debug=\",{\"1\":{\"884\":1}}],[\"debug\",{\"1\":{\"123\":1,\"219\":2,\"220\":2,\"223\":6,\"226\":1,\"852\":24,\"853\":8,\"884\":1}}],[\"definitions\",{\"1\":{\"1408\":1}}],[\"definitions>\",{\"1\":{\"928\":1}}],[\"definition\",{\"1\":{\"1408\":1,\"1412\":1}}],[\"def\",{\"1\":{\"306\":4,\"1428\":2}}],[\"deflate\",{\"1\":{\"211\":1}}],[\"defaultlistablebeanfactory\",{\"1\":{\"1408\":3}}],[\"defaultvalue\",{\"1\":{\"912\":1}}],[\"defaultsqlsession\",{\"1\":{\"825\":2}}],[\"defaults\",{\"1\":{\"825\":1,\"950\":2}}],[\"default=\",{\"1\":{\"806\":1,\"808\":1}}],[\"default=nokey=1\",{\"1\":{\"160\":1}}],[\"default生命周期default生命周期是maven生命周期中最重要的一个\",{\"1\":{\"776\":1}}],[\"default生命周期\",{\"0\":{\"776\":1}}],[\"defaultcapacity\",{\"1\":{\"338\":3}}],[\"default\",{\"1\":{\"123\":1,\"160\":1,\"175\":1,\"192\":1,\"570\":1,\"640\":1,\"751\":1,\"774\":1,\"789\":5,\"799\":9,\"806\":1,\"808\":1,\"855\":5,\"858\":14,\"882\":1,\"884\":1,\"887\":3,\"950\":3,\"1177\":1,\"1354\":1,\"1402\":1,\"1404\":3,\"1406\":2,\"1494\":1}}],[\"deserializer\",{\"1\":{\"1442\":2,\"1448\":2}}],[\"design\",{\"1\":{\"1030\":1,\"1234\":1}}],[\"designed\",{\"1\":{\"169\":1}}],[\"destruction\",{\"1\":{\"1410\":1}}],[\"destroymethod\",{\"1\":{\"1410\":4}}],[\"destroymethodname\",{\"1\":{\"1410\":3}}],[\"destroybean\",{\"1\":{\"1410\":2}}],[\"destroy\",{\"1\":{\"1085\":1,\"1278\":1,\"1410\":10}}],[\"dest\",{\"1\":{\"1382\":6}}],[\"destkey\",{\"1\":{\"722\":1}}],[\"destination\",{\"1\":{\"667\":2,\"669\":8,\"670\":2,\"718\":1}}],[\"desktop\",{\"0\":{\"706\":1},\"1\":{\"706\":1}}],[\"descriptions\",{\"1\":{\"948\":1}}],[\"description>\",{\"1\":{\"907\":1}}],[\"description\",{\"1\":{\"390\":1,\"405\":1,\"430\":1,\"751\":1,\"752\":2,\"888\":2,\"889\":2,\"891\":3,\"892\":5,\"893\":4,\"894\":1,\"912\":1,\"1061\":2,\"1062\":1,\"1064\":1,\"1259\":2,\"1260\":1,\"1262\":1}}],[\"descriptors\",{\"1\":{\"123\":1}}],[\"demuxers\",{\"1\":{\"161\":1}}],[\"demo效果\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"demos\",{\"1\":{\"939\":2}}],[\"demoapplication<\",{\"1\":{\"907\":1}}],[\"demo\",{\"1\":{\"129\":1,\"133\":1,\"492\":1,\"749\":1,\"751\":1,\"752\":3,\"887\":1,\"907\":1,\"912\":1,\"987\":1}}],[\"delnode\",{\"1\":{\"339\":4}}],[\"delete语句是dml\",{\"1\":{\"1147\":1,\"1330\":1}}],[\"delete和truncate只删除表的数据不删除表的结构\",{\"1\":{\"1147\":1,\"1330\":1}}],[\"delete与truncate的区\",{\"0\":{\"1147\":1,\"1330\":1}}],[\"delete>\",{\"1\":{\"818\":1,\"826\":1}}],[\"deleteuserbyid\",{\"1\":{\"826\":3}}],[\"deleteuser\",{\"1\":{\"816\":1,\"817\":2,\"818\":1,\"820\":2}}],[\"delete\",{\"0\":{\"841\":1},\"1\":{\"206\":2,\"487\":1,\"489\":1,\"604\":1,\"640\":1,\"817\":1,\"818\":1,\"826\":1,\"841\":1,\"852\":1,\"1147\":1,\"1198\":1,\"1330\":1,\"1371\":1,\"1428\":1}}],[\"delogo=0\",{\"1\":{\"157\":1}}],[\"delogo=x\",{\"1\":{\"157\":1}}],[\"del\",{\"1\":{\"132\":1,\"666\":3,\"1033\":4,\"1237\":4}}],[\"deny\",{\"1\":{\"123\":2}}],[\"d\",{\"1\":{\"111\":2,\"294\":2,\"296\":1,\"342\":1,\"417\":1,\"430\":2,\"441\":3,\"489\":3,\"884\":1,\"894\":1,\"918\":1,\"980\":2,\"1025\":1,\"1171\":1,\"1229\":1,\"1348\":1,\"1502\":1}}],[\"dup\",{\"1\":{\"684\":1}}],[\"dubbo\",{\"1\":{\"176\":3,\"989\":1}}],[\"dump\",{\"1\":{\"163\":1}}],[\"durability\",{\"1\":{\"1144\":1,\"1327\":1}}],[\"duration\",{\"1\":{\"151\":1,\"1448\":1}}],[\"during\",{\"1\":{\"129\":1}}],[\"du\",{\"1\":{\"107\":1}}],[\"df\",{\"1\":{\"107\":1}}],[\"进一步提高了性能和效率\",{\"1\":{\"1438\":1}}],[\"进一步降低树的高度\",{\"1\":{\"566\":1}}],[\"进来\",{\"1\":{\"1424\":1}}],[\"进群的场景下\",{\"1\":{\"1202\":1,\"1375\":1}}],[\"进100+原创文章\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"进度\",{\"1\":{\"959\":1}}],[\"进而需要更多的存储空间来维护索引结构\",{\"1\":{\"571\":1}}],[\"进阶\",{\"1\":{\"447\":1,\"704\":1,\"710\":1}}],[\"进阶二\",{\"0\":{\"394\":1}}],[\"进阶一\",{\"0\":{\"391\":1}}],[\"进队\",{\"1\":{\"341\":2,\"342\":1}}],[\"进栈\",{\"1\":{\"335\":1}}],[\"进入并发清理阶段做连续空间整理\",{\"1\":{\"1396\":1}}],[\"进入崩溃恢复模式\",{\"1\":{\"1199\":1,\"1372\":1}}],[\"进入该状态的线程需要等待其他线程做出一些特定动作\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"进入拦截器了\",{\"1\":{\"1049\":2,\"1250\":2}}],[\"进入仓库\",{\"1\":{\"976\":1}}],[\"进入容器\",{\"1\":{\"919\":1}}],[\"进入项目后再操作\",{\"1\":{\"768\":1}}],[\"进入方法前执行\",{\"1\":{\"752\":1}}],[\"进入\",{\"1\":{\"247\":1,\"548\":1,\"549\":1,\"976\":1,\"1049\":1,\"1250\":1}}],[\"进入新一轮leader选举\",{\"1\":{\"183\":1}}],[\"进入zookeeper下bin目录\",{\"1\":{\"176\":1}}],[\"进入到bin目录下\",{\"1\":{\"175\":1}}],[\"进行中\",{\"1\":{\"1498\":1}}],[\"进行封装\",{\"1\":{\"1494\":1}}],[\"进行数据可视化和监控\",{\"1\":{\"1456\":1}}],[\"进行数据展示\",{\"1\":{\"946\":1}}],[\"进行外包装\",{\"1\":{\"1446\":1}}],[\"进行视图渲染\",{\"1\":{\"1414\":1}}],[\"进行压力测试\",{\"1\":{\"1408\":1}}],[\"进行压缩的文件类型\",{\"1\":{\"123\":1}}],[\"进行并行计算等\",{\"1\":{\"1408\":1}}],[\"进行管理\",{\"1\":{\"1408\":1}}],[\"进行属性注入\",{\"1\":{\"1408\":1}}],[\"进行初始化bean操作\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"进行加锁\",{\"1\":{\"1163\":1,\"1343\":1}}],[\"进行下线处理\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"进行直接读取\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"进行\",{\"1\":{\"1119\":1,\"1162\":1,\"1307\":1,\"1342\":1,\"1414\":1}}],[\"进行自己的集群管理\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"进行业务逻辑处理\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"进行讨论\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"进行指定\",{\"1\":{\"860\":1}}],[\"进行判断的\",{\"1\":{\"755\":1}}],[\"进行i++\",{\"1\":{\"755\":1}}],[\"进行期间\",{\"1\":{\"688\":1}}],[\"进行更新操作\",{\"1\":{\"636\":1}}],[\"进行设置\",{\"1\":{\"484\":1}}],[\"进行拷贝\",{\"1\":{\"405\":2,\"417\":1}}],[\"进行引用\",{\"1\":{\"43\":1}}],[\"进程都会等待超过半数的\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"进程的运行\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"进程的角色\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"进程\",{\"1\":{\"470\":1}}],[\"进程数\",{\"1\":{\"123\":1}}],[\"进程pid\",{\"1\":{\"123\":1}}],[\"进程操作\",{\"1\":{\"107\":1}}],[\"比zookeeper\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"比例为\",{\"1\":{\"1108\":1,\"1299\":1}}],[\"比\",{\"1\":{\"1000\":1,\"1183\":1,\"1209\":1,\"1358\":1}}],[\"比直接使用\",{\"1\":{\"989\":1}}],[\"比且每个键值对的键和值要么就是小整数值\",{\"1\":{\"696\":1}}],[\"比较棘手\",{\"1\":{\"1476\":1}}],[\"比较v和a之后\",{\"1\":{\"1476\":1}}],[\"比较熟悉吗\",{\"1\":{\"1416\":1}}],[\"比较等等\",{\"1\":{\"1080\":1,\"1275\":1}}],[\"比较简单的方式\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"比较重要的就是解决两个问题\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"比较重要和常用的阶段如下\",{\"1\":{\"776\":1}}],[\"比较常见的是三种\",{\"1\":{\"1001\":1,\"1210\":1}}],[\"比较多\",{\"1\":{\"990\":1}}],[\"比较麻烦\",{\"1\":{\"436\":1}}],[\"比较排序\",{\"1\":{\"401\":1}}],[\"比较自己的选票和接收到的投票\",{\"1\":{\"183\":1}}],[\"比二叉树深层次的搜索肯定快很多\",{\"1\":{\"319\":1}}],[\"比如放到服务器运行\",{\"1\":{\"1525\":1}}],[\"比如指定\",{\"1\":{\"1525\":1}}],[\"比如指定拦截add\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"比如你的代码模块拆分\",{\"1\":{\"1502\":1}}],[\"比如你可以限制某个容器使用内存的上限\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"比如对接口返回值的统一校验封装\",{\"1\":{\"1502\":1}}],[\"比如书名\",{\"1\":{\"1462\":1}}],[\"比如这样\",{\"1\":{\"1456\":1,\"1494\":1}}],[\"比如这个蛇和青蛙互不放手\",{\"1\":{\"625\":1}}],[\"比如金融交易或者实时监控系统\",{\"1\":{\"1452\":1}}],[\"比如记录日志或者通知管理员\",{\"1\":{\"1452\":1}}],[\"比如activemq或rabbitmq\",{\"1\":{\"1450\":1}}],[\"比如两个线程同时\",{\"1\":{\"1446\":1}}],[\"比如开个程序\",{\"1\":{\"1446\":1}}],[\"比如增加\",{\"1\":{\"1440\":1}}],[\"比如增加存储容量\",{\"1\":{\"578\":1}}],[\"比如订单支付成功后触发发货操作\",{\"1\":{\"1434\":1}}],[\"比如实时监控\",{\"1\":{\"1434\":1}}],[\"比如lzf和snappy\",{\"1\":{\"1430\":1}}],[\"比如往集合中添加元素\",{\"1\":{\"1424\":1}}],[\"比如从集合中取出元素\",{\"1\":{\"1424\":1}}],[\"比如拆分过于庞大的\",{\"1\":{\"1412\":1}}],[\"比如新生代使用copying算法\",{\"1\":{\"1394\":1}}],[\"比如大量hash冲突会导致拉链过长\",{\"1\":{\"1380\":1}}],[\"比如应用的web层\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"比如应用并删除第二个\",{\"1\":{\"979\":1}}],[\"比如权限校验和\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"比如其他事务改了这批数据并提交了\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"比如redis\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"比如复制限流\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"比如窗口\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"比如二者都是aop编程思想的体现\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"比如购物车\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"比如遍历\",{\"1\":{\"1080\":1,\"1275\":1}}],[\"比如copyonwritearraylist\",{\"1\":{\"1075\":1,\"1270\":1}}],[\"比如cpu\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"比如说\",{\"1\":{\"1390\":1,\"1424\":1}}],[\"比如说key的hashcode\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"比如说我们常常用arraylist代替数组\",{\"1\":{\"1074\":1,\"1269\":1}}],[\"比如说你要是想根据时间对数据排序\",{\"1\":{\"720\":1}}],[\"比如提供的排序方法\",{\"1\":{\"1070\":1,\"1265\":1}}],[\"比如总是先申请\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"比如银行转账\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"比如main线程\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"比如类\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"比如所有类都是继承与object类的\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"比如共\",{\"0\":{\"1031\":1,\"1235\":1}}],[\"比如可以是连接\",{\"1\":{\"991\":1}}],[\"比如第二个\",{\"1\":{\"979\":3}}],[\"比如第一个整数是\",{\"1\":{\"412\":1}}],[\"比如在物流等容易损坏的环境中\",{\"1\":{\"935\":1}}],[\"比如在物流等环境中扫码编程别人的二维码\",{\"1\":{\"934\":1}}],[\"比如在商品编号的生成\",{\"1\":{\"716\":1}}],[\"比如导入\",{\"1\":{\"907\":1}}],[\"比如我们经常接触的\",{\"1\":{\"989\":1}}],[\"比如我的如下\",{\"1\":{\"902\":1}}],[\"比如我最近开发中需要一个邮件验证码发送服务\",{\"1\":{\"727\":1}}],[\"比如判断用户是否登录状态\",{\"1\":{\"721\":1}}],[\"比如需要进行交集计算\",{\"1\":{\"719\":1}}],[\"比如微博新闻的列表页面\",{\"1\":{\"718\":1}}],[\"比如文章列表\",{\"1\":{\"718\":1}}],[\"比如表头节点\",{\"1\":{\"692\":1}}],[\"比如节点的数量\",{\"1\":{\"691\":1}}],[\"比如列表键\",{\"1\":{\"685\":1}}],[\"比如读多写少场景下\",{\"1\":{\"636\":1}}],[\"比如行粒度锁\",{\"1\":{\"620\":1}}],[\"比如它只能用于myisam或innodb存储引擎\",{\"1\":{\"570\":1}}],[\"比如一本书有\",{\"1\":{\"563\":1}}],[\"比如一个新的文档\",{\"1\":{\"484\":1}}],[\"比如一个队列尾长度为\",{\"1\":{\"341\":1}}],[\"比如一个视频的编码是mpeg4\",{\"1\":{\"152\":1}}],[\"比如一个视频源的码率太高了\",{\"1\":{\"151\":1}}],[\"比如一个文件20\",{\"1\":{\"151\":1}}],[\"比如欢迎语言之类的\",{\"1\":{\"548\":1}}],[\"比如完成任务后的用户地址里有某个\",{\"1\":{\"539\":1}}],[\"比如用户持有一定数量的某种代币\",{\"1\":{\"539\":1}}],[\"比如邀请\",{\"1\":{\"536\":1}}],[\"比如index时用standard+ngram\",{\"1\":{\"493\":1}}],[\"比如设置某个字段为不被索引\",{\"1\":{\"482\":1}}],[\"比如字符串\",{\"1\":{\"482\":1}}],[\"比如3\",{\"1\":{\"414\":1}}],[\"比如给定20个随机整数\",{\"1\":{\"414\":1}}],[\"比如查询\",{\"1\":{\"323\":1}}],[\"比如上图中\",{\"1\":{\"320\":1}}],[\"比如普通的二叉树对于\",{\"1\":{\"316\":1}}],[\"比如前东家\",{\"1\":{\"264\":1}}],[\"比如前面这个接口\",{\"1\":{\"205\":1}}],[\"比如函数的入口处\",{\"1\":{\"220\":1}}],[\"比如函数的入参\",{\"1\":{\"219\":1}}],[\"比如错误码更新\",{\"1\":{\"210\":1}}],[\"比如数据库连接信息等\",{\"1\":{\"179\":1}}],[\"比如产品经理小饼过来要人\",{\"1\":{\"170\":1}}],[\"比如1\",{\"1\":{\"151\":1}}],[\"比如是128kbps\",{\"1\":{\"151\":1}}],[\"比如如何保证数据库和缓存的数据一致性\",{\"1\":{\"115\":1}}],[\"比如试着解决某个业务场景\",{\"1\":{\"115\":1}}],[\"比如某管理系统等\",{\"1\":{\"115\":1}}],[\"比如把我们上传到服务器的代码复制到需要运行的目录下\",{\"1\":{\"108\":1}}],[\"比如\",{\"1\":{\"107\":1,\"108\":1,\"115\":1,\"117\":1,\"204\":1,\"205\":1,\"211\":1,\"214\":1,\"263\":2,\"319\":1,\"563\":1,\"564\":1,\"616\":1,\"727\":1,\"772\":1,\"775\":1,\"829\":1,\"901\":2,\"902\":2,\"907\":1,\"980\":1,\"990\":1,\"1043\":1,\"1070\":1,\"1101\":1,\"1134\":1,\"1244\":1,\"1265\":1,\"1292\":1,\"1319\":1,\"1382\":3,\"1402\":3,\"1410\":2,\"1416\":1,\"1424\":5,\"1430\":1,\"1432\":1,\"1440\":1,\"1458\":1,\"1462\":1,\"1464\":1,\"1494\":4,\"1502\":1}}],[\"比特币\",{\"1\":{\"12\":1}}],[\"只在提交操作时检查是否违反数据完整性\",{\"1\":{\"1476\":1}}],[\"只在真正外部环境准备好了才唤醒\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"只存在于源码\",{\"1\":{\"1402\":1}}],[\"只适用于老年代回收\",{\"1\":{\"1396\":1}}],[\"只标记gc\",{\"1\":{\"1396\":1}}],[\"只使用构造器注入\",{\"1\":{\"1412\":1}}],[\"只使用一个线程\",{\"1\":{\"1394\":1}}],[\"只使用在\",{\"1\":{\"769\":1}}],[\"只执行一次\",{\"1\":{\"1085\":4,\"1278\":4}}],[\"只可以使用一次\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"只操作工作内存中的数据\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"只读操作不需要事务控制\",{\"1\":{\"893\":1}}],[\"只编写接口和mapping\",{\"1\":{\"824\":1}}],[\"只对于测试classpath有效\",{\"1\":{\"769\":1}}],[\"只提供了\",{\"1\":{\"722\":1}}],[\"只提取视频es数据\",{\"0\":{\"153\":1}}],[\"只支持升级\",{\"1\":{\"693\":1}}],[\"只能添加fruit的父类型\",{\"1\":{\"1424\":1}}],[\"只能添加fruit的子类型\",{\"1\":{\"1424\":1}}],[\"只能算入门\",{\"1\":{\"1406\":1}}],[\"只能算入门水平\",{\"1\":{\"1404\":1}}],[\"只能用于web程序中\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"只能作为对象的判断\",{\"1\":{\"1041\":1,\"1242\":1}}],[\"只能修改为唯一的一个\",{\"1\":{\"1031\":1,\"1235\":1}}],[\"只能\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"只能在实际应用中去慢慢体会\",{\"1\":{\"493\":1}}],[\"只能搜索\",{\"1\":{\"493\":1}}],[\"只能取余数\",{\"1\":{\"440\":1}}],[\"只有把\",{\"1\":{\"1416\":1}}],[\"只有父类加载器在它的搜索范围内无法找到所需的类时\",{\"1\":{\"1392\":1}}],[\"只有leader才能提交proposer具体算法可见fast\",{\"1\":{\"1203\":1,\"1376\":1}}],[\"只有第\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"只有新的主题分区会分配在该\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"只有原来的一半\",{\"1\":{\"1103\":1,\"1294\":1}}],[\"只有对象不会再被程序用到了\",{\"1\":{\"1102\":1,\"1293\":1}}],[\"只有调用了start\",{\"1\":{\"1055\":1,\"1253\":1}}],[\"只有从第91个开始的10个结果需要被取回\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"只有最后的\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"只有git\",{\"1\":{\"979\":1}}],[\"只有在提交更新时才会检查并发冲突\",{\"1\":{\"1476\":1}}],[\"只有在方法调用时传入了\",{\"1\":{\"1416\":1}}],[\"只有在使用到某个bean时\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"只有在字段\",{\"1\":{\"668\":1}}],[\"只有在查询条件中使用了创建索引时的第一个字段\",{\"1\":{\"558\":1}}],[\"只有当版本号匹配时才更新\",{\"1\":{\"642\":1}}],[\"只有\",{\"1\":{\"634\":1,\"1117\":1,\"1305\":1}}],[\"只有都是共享锁时\",{\"1\":{\"618\":1}}],[\"只有string可以使用\",{\"1\":{\"493\":1}}],[\"只有需要的数据才加载到内存中\",{\"1\":{\"319\":1}}],[\"只记录\",{\"1\":{\"486\":1}}],[\"只要序列号不同\",{\"1\":{\"1454\":1}}],[\"只要能够逐项进行深入学习\",{\"1\":{\"1406\":1}}],[\"只要你能够有计划和耐心地向这个清单上的每一项知识点进发\",{\"1\":{\"1404\":1}}],[\"只要服务端写消息时出现任何问题\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"只要\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"只要有一个不相同\",{\"1\":{\"1093\":1,\"1286\":1}}],[\"只要不重复即可\",{\"1\":{\"825\":1}}],[\"只要不是刚好相隔\",{\"1\":{\"440\":1}}],[\"只要对w计算hash\",{\"1\":{\"386\":1,\"392\":1}}],[\"只要理解了链表的操作和队列的特点即可\",{\"1\":{\"342\":1}}],[\"只要肯攀登\",{\"1\":{\"263\":1}}],[\"只允许在栈顶进行数据元素的插入或删除操作\",{\"1\":{\"335\":1}}],[\"只需在配置文件中做相关的事务规则声明或通过\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"只需要实现这个\",{\"1\":{\"1507\":1}}],[\"只需要6个命令就可以满足基本所有需求\",{\"1\":{\"1418\":1}}],[\"只需要调用\",{\"1\":{\"1386\":1}}],[\"只需要调整对应位置的指针即可\",{\"1\":{\"1074\":1,\"1269\":1}}],[\"只需要导入指定应用启动器\",{\"1\":{\"1186\":1,\"1361\":1}}],[\"只需要将\",{\"1\":{\"1182\":1,\"1357\":1}}],[\"只需要把对应的数据保留策略设置为\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"只需要12k内存就能统计2^64个数据\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"只需要合并一次或几次提交\",{\"1\":{\"980\":1}}],[\"只需要在\",{\"1\":{\"875\":1}}],[\"只需要放在仓库即可\",{\"1\":{\"763\":1}}],[\"只需要\",{\"1\":{\"721\":1,\"981\":1}}],[\"只需要通过哈希函数确定存储位置即可\",{\"1\":{\"562\":1}}],[\"只需要安装\",{\"1\":{\"174\":1}}],[\"只需很少的旋转时间\",{\"1\":{\"327\":1}}],[\"只保存索引\",{\"1\":{\"317\":1}}],[\"只希望多多转发支持\",{\"1\":{\"167\":1,\"381\":1,\"400\":1,\"409\":1,\"417\":1,\"430\":1,\"650\":1,\"676\":1,\"711\":1,\"761\":1,\"795\":1}}],[\"只显示读取的帧数\",{\"1\":{\"160\":1}}],[\"只是在springboot中简单了很多\",{\"1\":{\"1402\":1}}],[\"只是进行了线程安全的同步处理\",{\"1\":{\"1380\":1}}],[\"只是活动线程不需要直接指向一个睡眠线程\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"只是简单打印日志\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"只是获得一个或者多个初始化的地址\",{\"1\":{\"1032\":1,\"1236\":1}}],[\"只是想改一下注释\",{\"1\":{\"981\":1}}],[\"只是表示占位\",{\"1\":{\"842\":1}}],[\"只是替换\",{\"1\":{\"842\":1}}],[\"只是基于\",{\"1\":{\"722\":1}}],[\"只是再次向集群中所有机器发出上一次投票信息即可\",{\"1\":{\"183\":1}}],[\"只是加了一些包装\",{\"1\":{\"138\":1}}],[\"只是我们平时很少使用而已\",{\"1\":{\"107\":1}}],[\"只获取证书\",{\"1\":{\"102\":1}}],[\"其释放键值对的条件与实现原理\",{\"1\":{\"1406\":1}}],[\"其典型应用场景\",{\"1\":{\"1406\":1}}],[\"其下的实现类功能非常丰富\",{\"1\":{\"1404\":1}}],[\"其下又有很多子类\",{\"1\":{\"1069\":1,\"1264\":1}}],[\"其性能和效率甚至与\",{\"1\":{\"1398\":1}}],[\"其可以帮助我们查看应用的运行状态\",{\"1\":{\"1188\":1,\"1363\":1}}],[\"其作用是利用autoconfigurationimportselector给容器中导入一些组件\",{\"1\":{\"1185\":1,\"1360\":1}}],[\"其本质是通过aop功能\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"其本质意义也是线性表的一种\",{\"1\":{\"335\":1}}],[\"其存储作用域为\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"其执行原理为\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"其区别不过是虚拟机栈为虚拟机执行java方法\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"其特点是\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"其提供的展示配置以及可扩展性能满足绝大部分时间序列数据展示需求\",{\"1\":{\"947\":1}}],[\"其采用pull方式采集时间序列的度量数据\",{\"1\":{\"946\":1}}],[\"其取值有四个\",{\"1\":{\"927\":1}}],[\"其里面的内容包括\",{\"1\":{\"773\":1}}],[\"其官网地址为\",{\"1\":{\"761\":1}}],[\"其优势就是可以做到只需要\",{\"1\":{\"722\":1}}],[\"其它和follower功能一样\",{\"1\":{\"1196\":1,\"1369\":1}}],[\"其它程序可以通过context访问spring的bean资源\",{\"1\":{\"1168\":1,\"1345\":1}}],[\"其它公共库\",{\"1\":{\"768\":1}}],[\"其它参数\",{\"1\":{\"493\":1}}],[\"其它所有的非backup机器down或者忙的时候\",{\"1\":{\"123\":1}}],[\"其原因与单词频率信息一样\",{\"1\":{\"478\":1}}],[\"其设计目的是用来简化新\",{\"1\":{\"454\":1}}],[\"其时间复杂度为\",{\"1\":{\"424\":1}}],[\"其插入和删除的操作分别在表的两端进行\",{\"1\":{\"340\":1}}],[\"其附近的数据也通常会马上被使用\",{\"1\":{\"327\":1}}],[\"其成为leader可能性越大\",{\"1\":{\"183\":1}}],[\"其过程和启动时期的leader选举过程基本一致\",{\"1\":{\"183\":1}}],[\"其无须更新自己的投票\",{\"1\":{\"183\":1}}],[\"其单独无法进行和完成leader选举\",{\"1\":{\"183\":1}}],[\"其中肯定要有用户的登录\",{\"1\":{\"1502\":1}}],[\"其中有三个分区\",{\"1\":{\"1450\":1}}],[\"其中有一个内存区域是\",{\"1\":{\"755\":1}}],[\"其中一个线程正在扩容数组\",{\"1\":{\"1446\":1}}],[\"其中一个常见的问题是可见性问题\",{\"1\":{\"1382\":1}}],[\"其中会调用\",{\"1\":{\"1408\":1}}],[\"其中键是当前\",{\"1\":{\"1386\":1}}],[\"其中public\",{\"1\":{\"1185\":1,\"1360\":1}}],[\"其中三级缓存是主要功臣\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"其中可见性就是可以让线程之间进行通信\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"其中的方法直接对应映射文件中的\",{\"1\":{\"1416\":1}}],[\"其中的并发标记清除算法也为之后g1等收集器奠定了基础\",{\"1\":{\"1396\":1}}],[\"其中的\",{\"0\":{\"1031\":1,\"1235\":1}}],[\"其中的一个replica可以升级成shard\",{\"1\":{\"475\":1}}],[\"其中包含一个\",{\"1\":{\"1382\":1}}],[\"其中包含来自get或post请求的参数\",{\"1\":{\"1084\":1,\"1277\":1}}],[\"其中包含我们需要运行以构建\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"其中包括数据库和哈希键\",{\"1\":{\"689\":1}}],[\"其中包括\",{\"1\":{\"574\":1}}],[\"其中最常用作查询条件的列应该放在索引的最前面\",{\"1\":{\"565\":1}}],[\"其中构建初始堆经推导复杂度为o\",{\"1\":{\"417\":1}}],[\"其中k是整数的范围\",{\"1\":{\"410\":1}}],[\"其中0<=i<=k\",{\"1\":{\"392\":1}}],[\"其中分布锁和队列有java和c两个版本\",{\"1\":{\"171\":1}}],[\"其中\",{\"1\":{\"158\":1,\"424\":1,\"425\":1,\"496\":1,\"510\":1,\"691\":1,\"692\":1,\"907\":1,\"1134\":1,\"1319\":1,\"1380\":1,\"1384\":1,\"1480\":2,\"1524\":1}}],[\"其中都是精华中的精华\",{\"1\":{\"117\":1}}],[\"其次是锁的释放\",{\"1\":{\"1428\":1}}],[\"其次是序列化的工具选择上\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"其次会判断bean是否实现了disposablebean接口\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"其次对于查询来说\",{\"0\":{\"602\":1}}],[\"其次平衡二叉树的高度相对较大为\",{\"1\":{\"319\":1}}],[\"其次\",{\"1\":{\"117\":1,\"263\":1,\"1450\":1}}],[\"其实现类与使用场景\",{\"1\":{\"1404\":1}}],[\"其实现机制是接收到请求后\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"其实也就是\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"其实也就那么几个\",{\"1\":{\"107\":1}}],[\"其实就返回了\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"其实就是maven项目的目录结构\",{\"1\":{\"765\":1}}],[\"其实简单而言\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"其实这条说的过于绝对\",{\"1\":{\"589\":1}}],[\"其实不是什么新的框架\",{\"1\":{\"454\":1}}],[\"其实在这之前\",{\"1\":{\"270\":1}}],[\"其实限制了也没用\",{\"1\":{\"162\":1}}],[\"其实已经进入后端的排队之中等候处理\",{\"1\":{\"123\":1}}],[\"其实\",{\"1\":{\"107\":1}}],[\"其他配置\",{\"0\":{\"1525\":1},\"1\":{\"1525\":1}}],[\"其他用例\",{\"1\":{\"1507\":1}}],[\"其他节点会接收到这个信息\",{\"1\":{\"1466\":1}}],[\"其他方面与hashmap相同\",{\"1\":{\"1406\":1}}],[\"其他两种方式在遇到循环依赖问题时都会产生异常\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"其他类型如list\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"其他类型默认为\",{\"1\":{\"486\":1}}],[\"其他信息如果需要保留\",{\"1\":{\"1088\":2,\"1281\":2}}],[\"其他线程就无法访问该对象的被\",{\"1\":{\"1480\":1}}],[\"其他线程就可以立即看到这个变量的最新值\",{\"1\":{\"1382\":1}}],[\"其他线程可以立即看到这个修改\",{\"1\":{\"1480\":1}}],[\"其他线程阻塞排队\",{\"1\":{\"1160\":1,\"1340\":1}}],[\"其他线程\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"其他作为\",{\"1\":{\"1031\":1,\"1235\":1}}],[\"其他行仍然可以被其他事务访问\",{\"1\":{\"634\":1}}],[\"其他事务无法再获取到相同的排他锁\",{\"1\":{\"641\":1}}],[\"其他事务可能需要等待表锁释放\",{\"1\":{\"637\":1}}],[\"其他事务不能对表进行任何读写操作\",{\"1\":{\"628\":1}}],[\"其他事务不能访问table\",{\"1\":{\"624\":1}}],[\"其他事务不能修改或读取这行\",{\"1\":{\"619\":1}}],[\"其他事务既不能读取也不能修改这些数据\",{\"1\":{\"618\":1}}],[\"其他特殊类型可以查看官方文档\",{\"1\":{\"508\":1}}],[\"其他的\",{\"1\":{\"1422\":1}}],[\"其他的默认是docs\",{\"1\":{\"493\":1}}],[\"其他的类无法实例化单例类的对象\",{\"1\":{\"88\":1}}],[\"其他博主反馈\",{\"1\":{\"438\":1}}],[\"其他编程语言\",{\"0\":{\"185\":1}}],[\"其他\",{\"0\":{\"128\":1,\"551\":1}}],[\"其他平台也会同步\",{\"1\":{\"5\":1}}],[\"自测+提测\",{\"1\":{\"1502\":1}}],[\"自旋提前量偏移量\",{\"1\":{\"1481\":1}}],[\"自旋提前量\",{\"1\":{\"1481\":1}}],[\"自旋持续时间偏移量\",{\"1\":{\"1481\":1}}],[\"自旋持续时间\",{\"1\":{\"1481\":1}}],[\"自旋时钟偏移量\",{\"1\":{\"1481\":1}}],[\"自旋时钟\",{\"1\":{\"1481\":1}}],[\"自旋频率偏移量\",{\"1\":{\"1481\":1}}],[\"自旋频率\",{\"1\":{\"1481\":1}}],[\"自旋重新尝试获得锁\",{\"1\":{\"1062\":2,\"1260\":2}}],[\"自身会维护一个\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"自然就没有线程安全方面的问题了\",{\"1\":{\"1060\":1,\"1258\":1}}],[\"自然不错\",{\"1\":{\"706\":1}}],[\"自反性\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"自带各种协议栈\",{\"1\":{\"989\":1}}],[\"自带编解码器解决\",{\"1\":{\"989\":1}}],[\"自带的返回结构体\",{\"1\":{\"1494\":1}}],[\"自带的\",{\"1\":{\"989\":1}}],[\"自带了一些简单分词器\",{\"1\":{\"464\":1}}],[\"自建服务器\",{\"1\":{\"969\":1}}],[\"自己必须主动去创建对象b或者使用已经创建的对象b\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"自己的relay\",{\"1\":{\"1143\":1,\"1326\":1}}],[\"自己需要的资源别别人持有\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"自己安装\",{\"1\":{\"961\":1}}],[\"自己设计的一种数据存储结构\",{\"1\":{\"695\":1}}],[\"自己就面试个后端开发岗位\",{\"1\":{\"107\":1}}],[\"自增\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"自增字段生成的值是唯一的\",{\"1\":{\"622\":1}}],[\"自增来生成唯一序列\",{\"1\":{\"622\":1}}],[\"自增锁在事务提交时释放\",{\"1\":{\"622\":1}}],[\"自增锁\",{\"0\":{\"622\":1},\"1\":{\"622\":1,\"638\":1}}],[\"自定义\",{\"1\":{\"1410\":2}}],[\"自定义键的hashcode\",{\"1\":{\"1380\":1}}],[\"自定义策略\",{\"1\":{\"1119\":1,\"1307\":1}}],[\"自定义注解需要两个注解\",{\"1\":{\"1402\":1}}],[\"自定义注解需要什么\",{\"1\":{\"1402\":1}}],[\"自定义注解+aop\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"自定义注解+拦截器\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"自定义注解\",{\"1\":{\"1049\":1,\"1250\":1,\"1402\":2}}],[\"自定义注解实现aop切面日志\",{\"0\":{\"744\":1}}],[\"自定义构件\",{\"1\":{\"769\":1}}],[\"自定义仓库路径\",{\"1\":{\"765\":1}}],[\"自定义日志注解\",{\"1\":{\"751\":1}}],[\"自定义分词器\",{\"1\":{\"464\":1}}],[\"自定义扩展词库\",{\"1\":{\"447\":1}}],[\"自定义性强\",{\"1\":{\"243\":1}}],[\"自我介绍\",{\"0\":{\"451\":1},\"1\":{\"447\":1}}],[\"自动装配bean\",{\"1\":{\"1402\":1}}],[\"自动装配成员变量\",{\"1\":{\"1402\":1}}],[\"自动装箱\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"自动从内存中清除\",{\"1\":{\"1102\":1,\"1293\":1}}],[\"自动醒来进入到可运行状态\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"自动拆箱\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"自动进行初始化\",{\"1\":{\"1008\":1,\"1217\":1}}],[\"自动添加get\",{\"1\":{\"888\":2}}],[\"自动注册defaultanootationhandlermapping\",{\"1\":{\"882\":1}}],[\"自动下载\",{\"1\":{\"762\":1}}],[\"自动把线程变量副本的值回写到对象在堆中变量\",{\"1\":{\"755\":1}}],[\"自动根据分数排序\",{\"1\":{\"720\":1}}],[\"自动去重\",{\"1\":{\"719\":1}}],[\"自动发送代币到用户地址\",{\"1\":{\"539\":1}}],[\"自动分发\",{\"1\":{\"539\":1}}],[\"自动扩容\",{\"1\":{\"405\":1}}],[\"自动续订证书\",{\"0\":{\"103\":1}}],[\"自动化的证书颁发客户端\",{\"1\":{\"98\":1}}],[\"颁发的证书有效期为\",{\"1\":{\"103\":1}}],[\"4字节\",{\"1\":{\"1077\":1,\"1272\":1}}],[\"476\",{\"1\":{\"852\":1}}],[\"47\",{\"1\":{\"825\":1}}],[\"4间接依赖log4j1\",{\"1\":{\"772\":1}}],[\"4版本的包\",{\"1\":{\"772\":1}}],[\"4<\",{\"1\":{\"771\":1,\"772\":1,\"778\":1,\"875\":1}}],[\"4行\",{\"1\":{\"755\":1}}],[\"423\",{\"1\":{\"852\":1}}],[\"421\",{\"1\":{\"852\":1}}],[\"42\",{\"1\":{\"752\":1,\"1061\":1,\"1259\":1}}],[\"4294967295\",{\"1\":{\"667\":1,\"670\":1,\"718\":1}}],[\"4个可选参数docs\",{\"1\":{\"493\":1}}],[\"48\",{\"1\":{\"492\":1}}],[\"41\",{\"1\":{\"440\":4,\"441\":1}}],[\"41位的时间截\",{\"1\":{\"441\":1}}],[\"41位时间截不是存储当前时间的时间截\",{\"1\":{\"441\":1}}],[\"41位时间截\",{\"1\":{\"441\":1}}],[\"41位可以表示\",{\"1\":{\"440\":1}}],[\"41位\",{\"1\":{\"440\":1}}],[\"466\",{\"1\":{\"852\":1}}],[\"46\",{\"1\":{\"430\":1}}],[\"4677eb13\",{\"1\":{\"205\":1}}],[\"4340277777778\",{\"1\":{\"928\":1}}],[\"43333333333334\",{\"1\":{\"928\":1}}],[\"4333333333333\",{\"1\":{\"928\":1}}],[\"438\",{\"1\":{\"852\":2}}],[\"437\",{\"1\":{\"852\":1}}],[\"43\",{\"1\":{\"428\":5,\"430\":2,\"887\":1}}],[\"43be\",{\"1\":{\"205\":1}}],[\"4和9交换\",{\"1\":{\"417\":1}}],[\"4秒\",{\"1\":{\"382\":1}}],[\"455\",{\"1\":{\"928\":4}}],[\"45<\",{\"1\":{\"925\":1}}],[\"45\",{\"1\":{\"382\":1}}],[\"4的主存模型\",{\"1\":{\"326\":1}}],[\"4c8g\",{\"1\":{\"289\":1}}],[\"4c8c\",{\"1\":{\"206\":1}}],[\"4d18f71a2d55ce879085181a893fb7bf\",{\"1\":{\"237\":1}}],[\"4a90\",{\"1\":{\"209\":1}}],[\"4a35573e8b04\",{\"1\":{\"206\":1}}],[\"44692737430168\",{\"1\":{\"928\":1}}],[\"440\",{\"1\":{\"852\":1}}],[\"44062339\",{\"1\":{\"583\":1}}],[\"44\",{\"1\":{\"176\":1}}],[\"443\",{\"1\":{\"123\":1}}],[\"4947615\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"492\",{\"1\":{\"852\":1}}],[\"49e8\",{\"1\":{\"189\":1}}],[\"49\",{\"1\":{\"151\":1}}],[\"403\",{\"1\":{\"1494\":1}}],[\"40374604\",{\"1\":{\"328\":1,\"738\":1,\"791\":1}}],[\"400\",{\"1\":{\"1494\":1}}],[\"405\",{\"1\":{\"928\":2}}],[\"401\",{\"1\":{\"852\":1,\"1494\":1}}],[\"408\",{\"1\":{\"852\":1}}],[\"40多亿\",{\"1\":{\"668\":1}}],[\"40\",{\"1\":{\"382\":1,\"852\":11,\"853\":2,\"858\":1,\"893\":1,\"928\":2}}],[\"4094\",{\"1\":{\"440\":1}}],[\"4095\",{\"1\":{\"440\":3}}],[\"40999403\",{\"1\":{\"296\":1}}],[\"4096\",{\"1\":{\"123\":1}}],[\"404747369\",{\"1\":{\"129\":1,\"934\":1,\"952\":1}}],[\"404\",{\"1\":{\"123\":3,\"984\":1,\"1494\":1,\"1528\":1}}],[\"4k\",{\"1\":{\"123\":2}}],[\"4万时就有进程可能超过10240了\",{\"1\":{\"123\":1}}],[\"4\",{\"0\":{\"102\":1,\"149\":1,\"173\":1,\"174\":1,\"175\":1,\"176\":1,\"193\":1,\"207\":1,\"242\":1,\"406\":1,\"414\":1,\"560\":1,\"592\":1,\"621\":1,\"626\":1,\"657\":1,\"668\":1,\"680\":1,\"681\":1,\"682\":1,\"683\":1,\"684\":1,\"685\":1,\"686\":1,\"687\":1,\"688\":1,\"689\":1,\"690\":2,\"691\":2,\"692\":2,\"693\":1,\"694\":1,\"695\":1,\"696\":1,\"697\":1,\"698\":1,\"699\":1,\"737\":1,\"752\":1,\"772\":1,\"773\":1,\"777\":1,\"791\":1,\"800\":1,\"802\":1,\"804\":1,\"805\":1,\"806\":1,\"807\":1,\"808\":2,\"809\":1,\"810\":1,\"811\":1,\"819\":1,\"827\":1,\"832\":1,\"841\":1,\"844\":1,\"850\":1,\"858\":1,\"1002\":1,\"1017\":1,\"1028\":1,\"1044\":1,\"1058\":1,\"1072\":1,\"1087\":1,\"1102\":1,\"1118\":1,\"1132\":1,\"1145\":1,\"1158\":1,\"1171\":1,\"1184\":1,\"1197\":1,\"1211\":1,\"1223\":1,\"1233\":1,\"1245\":1,\"1256\":1,\"1267\":1,\"1280\":1,\"1293\":1,\"1306\":1,\"1317\":1,\"1328\":1,\"1338\":1,\"1348\":1,\"1359\":1,\"1370\":1,\"1525\":1},\"1\":{\"123\":5,\"142\":3,\"158\":1,\"170\":1,\"174\":3,\"175\":1,\"176\":2,\"183\":2,\"238\":1,\"306\":1,\"319\":1,\"341\":3,\"342\":3,\"405\":2,\"412\":4,\"413\":3,\"417\":4,\"428\":2,\"486\":1,\"504\":1,\"588\":1,\"657\":1,\"668\":1,\"669\":1,\"670\":1,\"698\":2,\"765\":1,\"778\":6,\"789\":4,\"800\":1,\"814\":1,\"820\":1,\"826\":1,\"875\":5,\"878\":1,\"882\":1,\"891\":1,\"900\":1,\"901\":1,\"902\":1,\"907\":4,\"961\":1,\"979\":1,\"1001\":4,\"1017\":1,\"1034\":2,\"1057\":1,\"1061\":4,\"1108\":1,\"1119\":1,\"1120\":1,\"1123\":1,\"1124\":1,\"1147\":1,\"1158\":1,\"1168\":1,\"1173\":1,\"1174\":1,\"1210\":4,\"1223\":1,\"1233\":2,\"1238\":2,\"1255\":1,\"1259\":4,\"1299\":1,\"1307\":1,\"1308\":1,\"1311\":1,\"1312\":1,\"1330\":1,\"1338\":1,\"1345\":1,\"1350\":1,\"1351\":1,\"1382\":2,\"1386\":1,\"1406\":1,\"1480\":1,\"1507\":1}}],[\"udp\",{\"1\":{\"1092\":3,\"1285\":3}}],[\"udp的区别\",{\"1\":{\"121\":1}}],[\"uci\",{\"1\":{\"961\":1}}],[\"uv\",{\"1\":{\"722\":5}}],[\"u64\",{\"1\":{\"687\":1}}],[\"ui\",{\"1\":{\"894\":1}}],[\"uint32\",{\"1\":{\"693\":2}}],[\"uint64\",{\"1\":{\"687\":2}}],[\"uint\",{\"1\":{\"540\":4,\"541\":4}}],[\"uid\",{\"1\":{\"220\":1,\"492\":1,\"665\":1,\"721\":3}}],[\"uuid\",{\"0\":{\"438\":1},\"1\":{\"438\":4,\"1466\":1}}],[\"utc\",{\"1\":{\"498\":1}}],[\"utils\",{\"1\":{\"405\":1,\"441\":1,\"915\":1,\"939\":1}}],[\"util\",{\"1\":{\"390\":2,\"405\":1,\"417\":1,\"430\":1,\"438\":1,\"752\":1,\"810\":1,\"816\":1,\"817\":1,\"820\":2,\"826\":2,\"888\":1,\"889\":1,\"891\":1,\"893\":2,\"894\":1,\"1061\":2,\"1062\":4,\"1064\":1,\"1132\":1,\"1259\":2,\"1260\":4,\"1262\":1,\"1317\":1,\"1390\":4,\"1442\":2,\"1448\":1,\"1478\":1,\"1480\":1}}],[\"utf\",{\"1\":{\"123\":1,\"806\":1,\"807\":1,\"808\":1,\"818\":1,\"826\":1,\"845\":1,\"875\":1,\"878\":1,\"880\":1,\"881\":1,\"882\":1,\"884\":1,\"890\":2,\"895\":2,\"907\":1,\"928\":1,\"1478\":1}}],[\"uri\",{\"1\":{\"123\":1}}],[\"urlclassloader\",{\"1\":{\"1392\":1}}],[\"url填的prometheus访问地址\",{\"1\":{\"952\":1}}],[\"url=jdbc\",{\"1\":{\"879\":1}}],[\"url>\",{\"1\":{\"875\":1}}],[\"url去重\",{\"1\":{\"383\":1}}],[\"url\",{\"1\":{\"123\":1,\"126\":2,\"205\":2,\"800\":2,\"806\":4,\"808\":1,\"829\":5,\"835\":1,\"878\":2,\"883\":1,\"894\":1,\"927\":1,\"939\":8,\"1133\":1,\"1318\":1,\"1507\":1}}],[\"up\",{\"1\":{\"1017\":1,\"1058\":1,\"1223\":1,\"1256\":1}}],[\"upgrade\",{\"1\":{\"959\":1}}],[\"upon\",{\"1\":{\"169\":1}}],[\"upstream模块定义的错误\",{\"1\":{\"123\":1}}],[\"upstream的负载均衡\",{\"1\":{\"123\":1}}],[\"upstream\",{\"1\":{\"123\":6}}],[\"update=\",{\"1\":{\"891\":1}}],[\"updateuser\",{\"1\":{\"816\":1,\"817\":2,\"818\":1,\"820\":2,\"826\":3,\"849\":3,\"852\":4}}],[\"updated=\",{\"1\":{\"822\":1,\"852\":6,\"853\":2}}],[\"updated\",{\"1\":{\"799\":3,\"810\":5,\"818\":4,\"822\":2,\"826\":2,\"845\":2,\"849\":1,\"852\":1,\"855\":2,\"856\":2,\"857\":1,\"858\":1}}],[\"updates\",{\"1\":{\"788\":1,\"852\":1}}],[\"update>\",{\"1\":{\"787\":1,\"790\":1,\"818\":1,\"826\":1,\"849\":1,\"890\":1}}],[\"updatebatch1\",{\"1\":{\"790\":1}}],[\"updatebatch\",{\"1\":{\"787\":1}}],[\"update来获取排他锁\",{\"1\":{\"641\":1}}],[\"update或select\",{\"1\":{\"638\":1}}],[\"update可以显式地对行加排他锁\",{\"1\":{\"627\":1}}],[\"update\",{\"0\":{\"600\":1,\"634\":1,\"840\":1},\"1\":{\"99\":1,\"206\":2,\"600\":1,\"618\":3,\"619\":3,\"621\":1,\"633\":1,\"634\":1,\"636\":3,\"641\":1,\"642\":1,\"787\":1,\"788\":1,\"790\":2,\"817\":1,\"818\":1,\"826\":1,\"833\":4,\"849\":1,\"852\":2,\"887\":1,\"890\":2,\"891\":2,\"893\":2,\"915\":1,\"927\":2,\"1137\":1,\"1145\":2,\"1148\":5,\"1322\":1,\"1328\":2,\"1331\":5}}],[\"ulimit\",{\"1\":{\"123\":1}}],[\"ustc\",{\"1\":{\"915\":1,\"959\":2}}],[\"usage\",{\"1\":{\"175\":1}}],[\"using\",{\"1\":{\"123\":1,\"175\":1,\"589\":1}}],[\"use\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"usecolumnlabel\",{\"1\":{\"880\":1}}],[\"usegeneratedkeys=\",{\"1\":{\"826\":1,\"1133\":2,\"1318\":2}}],[\"usegeneratedkeys\",{\"1\":{\"826\":1,\"839\":1,\"880\":1,\"1133\":1,\"1318\":1}}],[\"useunicode=true\",{\"1\":{\"806\":1,\"879\":1}}],[\"used\",{\"1\":{\"677\":1,\"687\":1,\"950\":1,\"952\":1,\"1001\":2,\"1058\":1,\"1210\":2,\"1256\":1}}],[\"usessl=false\",{\"1\":{\"1507\":1}}],[\"uses\",{\"1\":{\"123\":3,\"169\":1,\"1058\":1,\"1256\":1}}],[\"user3\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"user4\",{\"1\":{\"1044\":2,\"1245\":2}}],[\"user2\",{\"1\":{\"1044\":2,\"1245\":2}}],[\"user1\",{\"1\":{\"1044\":2,\"1245\":2}}],[\"usertask>\",{\"1\":{\"928\":3}}],[\"usertype\",{\"1\":{\"195\":6}}],[\"user=new\",{\"1\":{\"852\":1}}],[\"userresultmap\",{\"1\":{\"845\":2}}],[\"usermappertest\",{\"1\":{\"826\":1}}],[\"usermapper\",{\"1\":{\"825\":1,\"826\":15,\"835\":1,\"847\":1,\"848\":1,\"849\":2,\"850\":1,\"852\":25,\"853\":9,\"1416\":2}}],[\"userlist\",{\"1\":{\"820\":2,\"826\":4}}],[\"user即为数据库中的表\",{\"1\":{\"818\":1}}],[\"user即为数据库中的表名\",{\"1\":{\"807\":1}}],[\"userdaotest\",{\"1\":{\"820\":1,\"825\":2}}],[\"userdaomapper\",{\"0\":{\"818\":1},\"1\":{\"818\":1,\"826\":1,\"835\":1}}],[\"userdaoimpl\",{\"1\":{\"817\":2,\"820\":2}}],[\"userdao\",{\"1\":{\"816\":1,\"817\":7,\"818\":1,\"819\":1,\"820\":9,\"825\":3}}],[\"userstatus\",{\"1\":{\"787\":1}}],[\"users\",{\"1\":{\"484\":1,\"487\":5,\"489\":6,\"504\":2,\"568\":4,\"847\":2,\"848\":2,\"849\":2,\"850\":2,\"1494\":1}}],[\"userservice\",{\"1\":{\"176\":2,\"1494\":1}}],[\"usercode=wkdka1si\",{\"1\":{\"238\":1}}],[\"userid=123\",{\"1\":{\"929\":2}}],[\"userid\",{\"1\":{\"220\":1,\"787\":3,\"855\":1,\"856\":1,\"857\":1}}],[\"user\",{\"1\":{\"123\":6,\"195\":4,\"205\":2,\"209\":2,\"211\":1,\"223\":4,\"228\":3,\"229\":3,\"294\":1,\"485\":1,\"564\":3,\"618\":1,\"665\":2,\"764\":1,\"765\":1,\"787\":5,\"788\":4,\"799\":5,\"800\":3,\"807\":2,\"810\":9,\"816\":8,\"817\":8,\"818\":13,\"820\":24,\"822\":4,\"826\":51,\"829\":1,\"831\":4,\"835\":1,\"842\":18,\"843\":8,\"845\":10,\"847\":5,\"848\":5,\"849\":20,\"850\":5,\"852\":17,\"853\":4,\"855\":1,\"856\":9,\"857\":7,\"858\":6,\"860\":2,\"878\":1,\"895\":1,\"901\":1,\"902\":1,\"1044\":8,\"1050\":3,\"1131\":4,\"1245\":8,\"1251\":3,\"1316\":4,\"1416\":5,\"1494\":5,\"1502\":1,\"1507\":8,\"1514\":3,\"1515\":3,\"1524\":1,\"1525\":1}}],[\"username2\",{\"1\":{\"843\":4}}],[\"username1\",{\"1\":{\"843\":4}}],[\"username=root\",{\"1\":{\"879\":1}}],[\"username=\",{\"1\":{\"822\":1,\"852\":6,\"853\":2}}],[\"username\",{\"1\":{\"111\":2,\"504\":5,\"564\":3,\"720\":2,\"799\":2,\"800\":1,\"806\":4,\"808\":1,\"810\":5,\"818\":4,\"822\":1,\"826\":7,\"829\":4,\"842\":9,\"845\":2,\"849\":2,\"856\":1,\"878\":1,\"927\":1,\"1131\":3,\"1132\":1,\"1316\":3,\"1317\":1,\"1507\":1}}],[\"usr\",{\"1\":{\"101\":1,\"111\":1,\"123\":1,\"126\":1,\"142\":3}}],[\"unauthorized\",{\"1\":{\"1494\":1}}],[\"unheld\",{\"1\":{\"1481\":2}}],[\"under\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"undo\",{\"1\":{\"1142\":1,\"1177\":1,\"1325\":1,\"1354\":1}}],[\"uncommitted\",{\"1\":{\"1144\":1,\"1177\":1,\"1327\":1,\"1354\":1}}],[\"unchecked\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"unsafe\",{\"1\":{\"1058\":1,\"1256\":1,\"1466\":1}}],[\"unsigned\",{\"1\":{\"684\":1,\"687\":4,\"691\":1,\"698\":3,\"858\":1}}],[\"untyped等等\",{\"1\":{\"946\":1}}],[\"unlock\",{\"1\":{\"624\":1,\"1058\":1,\"1062\":4,\"1256\":1,\"1260\":4,\"1390\":2}}],[\"unrefactoredconditionexample\",{\"1\":{\"198\":1}}],[\"unreal\",{\"1\":{\"72\":1}}],[\"unknownhostexception\",{\"1\":{\"441\":2}}],[\"unknown\",{\"1\":{\"192\":2}}],[\"unimplemented\",{\"1\":{\"1195\":1,\"1368\":1}}],[\"union\",{\"1\":{\"591\":1,\"687\":1}}],[\"uninstall\",{\"1\":{\"131\":1}}],[\"unique\",{\"1\":{\"569\":1,\"1163\":1,\"1343\":1}}],[\"uniq\",{\"1\":{\"111\":1}}],[\"unzip\",{\"1\":{\"111\":1}}],[\"u\",{\"1\":{\"111\":1,\"665\":1,\"856\":2,\"857\":1,\"858\":1,\"976\":1}}],[\"ubuntu以其易用性而闻名\",{\"1\":{\"239\":1}}],[\"ubuntu\",{\"0\":{\"239\":1},\"1\":{\"98\":2,\"99\":1,\"238\":1}}],[\"证书\",{\"1\":{\"98\":2}}],[\"用一条等价的命令代替多条之前的命令\",{\"1\":{\"1420\":1}}],[\"用一个异步的线程更新缓存\",{\"1\":{\"1160\":1,\"1340\":1}}],[\"用起来特顺手\",{\"1\":{\"1418\":1}}],[\"用过用过\",{\"1\":{\"1418\":1}}],[\"用新值替换旧值\",{\"1\":{\"1380\":1}}],[\"用完删除\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"用完删除掉自己创建的\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"用xml绑定\",{\"1\":{\"1137\":1,\"1322\":1}}],[\"用注解绑定\",{\"1\":{\"1137\":1,\"1322\":1}}],[\"用法\",{\"1\":{\"1133\":1,\"1318\":1}}],[\"用法和上边一样\",{\"1\":{\"395\":1}}],[\"用java虚拟机执行编译文件\",{\"1\":{\"1087\":1,\"1280\":1}}],[\"用得多也就熟了\",{\"1\":{\"1080\":1,\"1275\":1}}],[\"用clone方法创建对象并不会调用任何构造函数\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"用object作为原始类型\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"用元数据和\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"用了缓存之后\",{\"0\":{\"1003\":1,\"1212\":1}}],[\"用了什么编程语言\",{\"1\":{\"72\":1}}],[\"用官方的总结就是\",{\"1\":{\"988\":1}}],[\"用邮箱注册一个就可以了\",{\"1\":{\"976\":1}}],[\"用以生成和发布maven站点\",{\"1\":{\"777\":1}}],[\"用以下两个属性替换\",{\"1\":{\"711\":1}}],[\"用以记录原有客户端的ip地址和原来客户端的请求的服务器地址\",{\"1\":{\"123\":1}}],[\"用作\",{\"1\":{\"682\":1}}],[\"用在缓存的场合非常多\",{\"1\":{\"657\":1}}],[\"用具体的字段列表代替\",{\"0\":{\"603\":1}}],[\"用下面的语句替换\",{\"1\":{\"598\":1}}],[\"用\",{\"1\":{\"564\":1,\"706\":1,\"755\":1,\"1017\":1,\"1080\":1,\"1223\":1,\"1275\":1}}],[\"用我的话来理解\",{\"1\":{\"454\":1}}],[\"用心做的视频\",{\"1\":{\"264\":1}}],[\"用时在学只是权宜办法\",{\"1\":{\"263\":1}}],[\"用户登录\",{\"1\":{\"1502\":1}}],[\"用户登录成功\",{\"1\":{\"1494\":1}}],[\"用户管理\",{\"1\":{\"1502\":1}}],[\"用户管理系统\",{\"2\":{\"1496\":1,\"1500\":1,\"1504\":1,\"1509\":1,\"1517\":1,\"1527\":1}}],[\"用户查询等\",{\"1\":{\"1502\":1}}],[\"用户删除\",{\"1\":{\"1502\":2}}],[\"用户添加\",{\"1\":{\"1502\":1}}],[\"用户中心\",{\"0\":{\"1492\":1,\"1494\":1,\"1498\":1,\"1502\":1,\"1506\":1,\"1511\":1,\"1519\":1},\"1\":{\"1492\":1,\"1502\":1,\"1520\":1,\"1524\":1},\"2\":{\"1495\":1,\"1499\":1,\"1503\":1,\"1508\":1,\"1516\":1,\"1526\":1}}],[\"用户发送请求到\",{\"1\":{\"1414\":1}}],[\"用户发送请求至前端控制器\",{\"1\":{\"1414\":1}}],[\"用户得到了没有完成初始化的\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"用户请求时\",{\"1\":{\"1008\":1,\"1217\":1}}],[\"用户无需等待\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"用户访问数等统计\",{\"1\":{\"946\":1}}],[\"用户每月签到情况\",{\"1\":{\"721\":1}}],[\"用户需要用到此方法释放资源\",{\"1\":{\"711\":1}}],[\"用户可以查看\",{\"1\":{\"243\":1}}],[\"用户友好\",{\"1\":{\"239\":1}}],[\"用ffmpeg的delogo过滤器\",{\"1\":{\"157\":1}}],[\"用于定义\",{\"1\":{\"1512\":1}}],[\"用于定义映射语句\",{\"1\":{\"1416\":1}}],[\"用于访问保留字段中的信息\",{\"1\":{\"1481\":1}}],[\"用于访问条件变量等待时间中的信息\",{\"1\":{\"1481\":1}}],[\"用于访问条件变量中的信息\",{\"1\":{\"1481\":1}}],[\"用于访问成功次数中的信息\",{\"1\":{\"1481\":1}}],[\"用于访问竞争次数中的信息\",{\"1\":{\"1481\":1}}],[\"用于访问自旋提前量中的信息\",{\"1\":{\"1481\":1}}],[\"用于访问自旋持续时间中的信息\",{\"1\":{\"1481\":1}}],[\"用于访问自旋时钟中的信息\",{\"1\":{\"1481\":1}}],[\"用于访问自旋频率中的信息\",{\"1\":{\"1481\":1}}],[\"用于访问责任线程指针中的信息\",{\"1\":{\"1481\":1}}],[\"用于访问空闲链表指针中的信息\",{\"1\":{\"1481\":1}}],[\"用于访问等待队列尾指针中的信息\",{\"1\":{\"1481\":1}}],[\"用于访问等待队列头指针中的信息\",{\"1\":{\"1481\":1}}],[\"用于访问等待队列长度中的信息\",{\"1\":{\"1481\":1}}],[\"用于访问持有者指针中的信息\",{\"1\":{\"1481\":1}}],[\"用于访问对象指针中的信息\",{\"1\":{\"1481\":1}}],[\"用于访问对象头中的信息\",{\"1\":{\"1481\":1}}],[\"用于访问递归深度中的信息\",{\"1\":{\"1481\":1}}],[\"用于访问计数器中的信息\",{\"1\":{\"1481\":1}}],[\"用于未来扩展\",{\"1\":{\"1481\":1}}],[\"用于控制自旋等待的时间\",{\"1\":{\"1481\":3}}],[\"用于控制倒排索引记录的内容\",{\"1\":{\"486\":1}}],[\"用于回收\",{\"1\":{\"1481\":1}}],[\"用于支持条件变量的等待和唤醒操作\",{\"1\":{\"1481\":1}}],[\"用于记录条件变量等待的时间\",{\"1\":{\"1481\":1}}],[\"用于记录获取锁的成功次数\",{\"1\":{\"1481\":1}}],[\"用于记录获取锁的竞争次数\",{\"1\":{\"1481\":1}}],[\"用于记录自旋等待的时间\",{\"1\":{\"1481\":1}}],[\"用于记录最后一个释放锁的线程\",{\"1\":{\"1481\":1}}],[\"用于记录当前线程已经获取锁的次数\",{\"1\":{\"1481\":1}}],[\"用于记录等待锁的线程数\",{\"1\":{\"1481\":1}}],[\"用于记录重入次数\",{\"1\":{\"1481\":1}}],[\"用于实现\",{\"1\":{\"1481\":1}}],[\"用于实现同步机制\",{\"1\":{\"1480\":1}}],[\"用于实现一个简单的聊天室应用\",{\"1\":{\"1478\":1}}],[\"用于比较内存某个位置的值是否为预期值\",{\"1\":{\"1476\":1}}],[\"用于管理集群中的节点\",{\"1\":{\"1466\":1}}],[\"用于提高数据的可用性和容错性\",{\"1\":{\"1460\":1,\"1470\":1}}],[\"用于对文档进行分类\",{\"1\":{\"1460\":1}}],[\"用于处理大规模数据的搜索和分析\",{\"1\":{\"1460\":1}}],[\"用于高吞吐量\",{\"1\":{\"1432\":1}}],[\"用于这次实例化\",{\"1\":{\"1424\":1}}],[\"用于执行一些增强操作\",{\"1\":{\"1416\":1}}],[\"用于执行映射语句并commit\",{\"1\":{\"1416\":1}}],[\"用于创建\",{\"1\":{\"1416\":2}}],[\"用于组件扫描\",{\"1\":{\"1402\":1}}],[\"用于观察运行时的线程活动\",{\"1\":{\"1400\":1}}],[\"用于后续分析\",{\"1\":{\"1400\":1}}],[\"用于后端服务器性能不均的情况\",{\"1\":{\"123\":1}}],[\"用于分析垃圾收集情况\",{\"1\":{\"1400\":1}}],[\"用于保证用户线程的一致性快照\",{\"1\":{\"1398\":1}}],[\"用于保存整数值的集合抽象数据结构\",{\"1\":{\"693\":1}}],[\"用于保存\",{\"1\":{\"692\":1}}],[\"用于保存字符串\",{\"1\":{\"682\":1}}],[\"用于判定垃圾\",{\"1\":{\"1398\":1}}],[\"用于消息存储\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"用于\",{\"1\":{\"1183\":1,\"1358\":1}}],[\"用于根据请求找到匹配的处理器\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"用于节约内存\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"用于存储锁状态和其他信息\",{\"1\":{\"1481\":1}}],[\"用于存储和组织数据\",{\"1\":{\"1460\":1}}],[\"用于存储要映射的\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"用于存储局部变量表\",{\"1\":{\"1099\":1,\"1290\":1,\"1388\":1}}],[\"用于会话管理\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"用于限定集合的输入类型\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"用于限制输入\",{\"1\":{\"162\":1}}],[\"用于在映像层中添加功能层\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"用于快速开发可维护\",{\"1\":{\"988\":1}}],[\"用于业务层非成功情况下的返回\",{\"1\":{\"892\":1,\"893\":1}}],[\"用于计算索引值\",{\"1\":{\"687\":1}}],[\"用于锁定一个区间内的所有行以及区间的边界值\",{\"1\":{\"638\":1}}],[\"用于行级锁定和范围查询\",{\"1\":{\"619\":1}}],[\"用于操作对数据的读取和写入\",{\"1\":{\"618\":1}}],[\"用于连接的列\",{\"1\":{\"565\":1}}],[\"用于加速地理空间数据的查询和检索操作\",{\"1\":{\"558\":1}}],[\"用于复制指定的数组内容以达到扩容的目的\",{\"1\":{\"405\":1}}],[\"用于编码hevc\",{\"1\":{\"152\":1}}],[\"用于设置码率控制缓冲器的大小\",{\"1\":{\"151\":1}}],[\"用来做测试\",{\"1\":{\"1507\":1}}],[\"用来实时监控内存\",{\"1\":{\"1400\":1}}],[\"用来实现对象之间的\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"用来实现文档的一对一\",{\"1\":{\"510\":1}}],[\"用来构建高可用的分布式数据主备系统\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"用来给slave\",{\"1\":{\"1142\":1,\"1325\":1}}],[\"用来给不同的server来使用\",{\"1\":{\"123\":1}}],[\"用来指示执行引擎下一条执行指令的地址\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"用来修饰局部变量\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"用来创建按顺序执行多个命令行指令的自动构建\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"用来存储我们执行预约操作的返回结果\",{\"1\":{\"892\":1}}],[\"用来存编程知识和面试题等\",{\"1\":{\"98\":1}}],[\"用来定义预约业务的数据字典\",{\"1\":{\"892\":1}}],[\"用来控制内存的使用\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"用来控制依赖和编译\",{\"1\":{\"769\":1}}],[\"用来控制当前字段是否被索引\",{\"1\":{\"485\":1}}],[\"用来进行原子性操作\",{\"1\":{\"755\":1}}],[\"用来处理当织入的代码抛出异常后的逻辑处理\",{\"1\":{\"752\":1}}],[\"用来抢占锁\",{\"1\":{\"727\":1}}],[\"用来回收\",{\"1\":{\"711\":1}}],[\"用来帮助提升查询和检索数据速度\",{\"1\":{\"557\":1}}],[\"用来表示该位是i的数的个数\",{\"1\":{\"430\":1}}],[\"用来记录同毫秒内产生的不同id\",{\"1\":{\"440\":1}}],[\"用来记录工作机器id\",{\"1\":{\"440\":1}}],[\"用来记录时间戳\",{\"1\":{\"440\":1}}],[\"用来记录从那个页面链接访问过来的\",{\"1\":{\"123\":1}}],[\"用来记录请求状态\",{\"1\":{\"123\":1}}],[\"用来记录请求的url与http协议\",{\"1\":{\"123\":1}}],[\"用来记录访问时间与时区\",{\"1\":{\"123\":1}}],[\"用来记录客户端用户名称\",{\"1\":{\"123\":1}}],[\"用冒号分割已经来不及了\",{\"1\":{\"111\":1}}],[\"用到的\",{\"1\":{\"107\":1}}],[\"让当前线程等待\",{\"1\":{\"1446\":1}}],[\"让当前线程进入不可运行状态\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"让它们根据事件来做出相应的响应\",{\"1\":{\"1434\":1}}],[\"让它们实时地进行计算和分析\",{\"1\":{\"1434\":1}}],[\"让这个过程变得非常有价值\",{\"1\":{\"1424\":1}}],[\"让代码更健壮\",{\"1\":{\"1424\":1}}],[\"让其占用连续的region\",{\"1\":{\"1398\":1}}],[\"让我给讲讲公司里边做项目是什么流程\",{\"1\":{\"1502\":1}}],[\"让我给你展示一段简单的源码\",{\"1\":{\"1462\":1}}],[\"让我给你展示一段java代码来说明kafka的push和pull模式\",{\"1\":{\"1448\":1}}],[\"让我给你展示一下\",{\"1\":{\"1456\":1}}],[\"让我完全明白了\",{\"1\":{\"1414\":1}}],[\"让我对这两种锁有了更深的认识\",{\"1\":{\"1476\":1}}],[\"让我对cas和aba问题有了更全面和深入的认识\",{\"1\":{\"1476\":1}}],[\"让我对java多线程和线程安全有一个比较全面和系统的复习\",{\"1\":{\"1446\":1}}],[\"让我对\",{\"1\":{\"1412\":1,\"1414\":1,\"1446\":1}}],[\"让我有点晕\",{\"1\":{\"1408\":1}}],[\"让我有机会梳理和总结这些关键点\",{\"1\":{\"1398\":1}}],[\"让我有机会深入梳理cms以及java垃圾收集机制\",{\"1\":{\"1396\":1}}],[\"让我们开始吧\",{\"1\":{\"1470\":1}}],[\"让我们在处理大规模数据流时更加放心\",{\"1\":{\"1454\":1}}],[\"让我们来看看它是如何工作的\",{\"1\":{\"1450\":1}}],[\"让我们来看一下\",{\"1\":{\"1442\":1}}],[\"让我们深入了解一下broker的内部结构\",{\"1\":{\"1444\":1}}],[\"让我们继续讨论类加载过程中另一个重要概念\",{\"1\":{\"1392\":1}}],[\"让我们继续在数学的世界里探索\",{\"1\":{\"308\":1}}],[\"让我们有了很强的满足感\",{\"1\":{\"450\":1}}],[\"让我们先遍历这个无序的随机数组\",{\"1\":{\"412\":1}}],[\"让我们一起通过经典书籍茁壮成长\",{\"1\":{\"56\":1}}],[\"让人容易理解\",{\"1\":{\"1392\":1}}],[\"让缓存失效的时间点尽量均匀\",{\"1\":{\"1160\":1,\"1340\":1}}],[\"让用户感觉很魔幻\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"让所有存活的对象都向一端移动\",{\"1\":{\"1103\":1,\"1294\":1}}],[\"让多个线程协作\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"让多个键共享同一个值对象需要执行以下两个步骤\",{\"1\":{\"698\":1}}],[\"让编译器在源代码级别上\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"让字典同时持有\",{\"1\":{\"688\":1}}],[\"让列表只保留指定区间内的元素\",{\"1\":{\"667\":1}}],[\"让大家在面试的时候碰到这个知识点一往无前\",{\"1\":{\"315\":1}}],[\"让你更上一层的\",{\"1\":{\"263\":1}}],[\"让你的接口设计无可挑剔\",{\"1\":{\"203\":1}}],[\"让软件包管理更加灵活高效\",{\"1\":{\"240\":1}}],[\"让下游知道什么时候做什么动作\",{\"1\":{\"214\":1}}],[\"让调用者有一个预期\",{\"1\":{\"213\":1}}],[\"让使用这一眼就能知道这个接口在做什么\",{\"1\":{\"204\":1}}],[\"让整体的码率更趋近于希望的值\",{\"1\":{\"151\":1}}],[\"让更多攻城狮在极客之路提供一点点思路\",{\"1\":{\"93\":1}}],[\"网关等手段管理各服务\",{\"1\":{\"1408\":1}}],[\"网上有张非常形象的图\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"网上看到一个比较形象一个例子\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"网上看到一个例子\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"网上关于volatile的文章非常多\",{\"1\":{\"755\":1}}],[\"网购\",{\"1\":{\"934\":1}}],[\"网站上可以搜索具体的组织或项目关键字\",{\"1\":{\"768\":1}}],[\"网站的日活跃用户\",{\"1\":{\"722\":1}}],[\"网站查询\",{\"1\":{\"562\":1}}],[\"网站\",{\"1\":{\"677\":1,\"900\":1,\"976\":1},\"2\":{\"272\":1,\"273\":1}}],[\"网站更新时间线\",{\"0\":{\"270\":1}}],[\"网站更新记录\",{\"0\":{\"269\":1}}],[\"网站信息\",{\"0\":{\"1\":1},\"2\":{\"55\":1}}],[\"网页平均在32k以下的设置\",{\"1\":{\"123\":1}}],[\"网络等\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"网络等资源是全局的\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"网络通信\",{\"1\":{\"990\":1}}],[\"网络io\",{\"1\":{\"580\":1}}],[\"网络面试题\",{\"0\":{\"121\":1}}],[\"网络\",{\"0\":{\"120\":1},\"1\":{\"587\":1}}],[\"网络操作\",{\"1\":{\"107\":1}}],[\"网络讲解设计模式的文章有很多\",{\"1\":{\"93\":1}}],[\"保留字段偏移量\",{\"1\":{\"1481\":1}}],[\"保留字段\",{\"1\":{\"1481\":1}}],[\"保留插入顺序\",{\"1\":{\"1406\":1}}],[\"保持和\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"保持耐心\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"保持联系\",{\"0\":{\"4\":1}}],[\"保证查询的时间复杂度为o\",{\"1\":{\"1380\":1}}],[\"保证value唯一性\",{\"1\":{\"1163\":1,\"1343\":1}}],[\"保证谁加的锁只能被谁解锁\",{\"1\":{\"1163\":1,\"1343\":1}}],[\"保证优雅的停止服务\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"保证服务的可用性\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"保证有且只有一个线程去查询\",{\"1\":{\"1006\":2,\"1215\":2}}],[\"保证一致性\",{\"1\":{\"1004\":1,\"1006\":1,\"1213\":1,\"1215\":1}}],[\"保证各个平台的二维码是唯一\",{\"1\":{\"935\":1}}],[\"保证触发事务执行\",{\"1\":{\"893\":1}}],[\"保证事务方法的执行时间尽可能短\",{\"1\":{\"893\":1}}],[\"保证实时性的同时\",{\"1\":{\"727\":1}}],[\"保证每个连接都是有效的\",{\"1\":{\"710\":1}}],[\"保证高可用\",{\"1\":{\"475\":1}}],[\"保证在出现异常时通过日志快速定位到那里就可以啦\",{\"1\":{\"229\":1}}],[\"保证instance未实例化的时候才加锁\",{\"1\":{\"92\":1}}],[\"保姆级教程\",{\"0\":{\"125\":1}}],[\"保存旧表\",{\"1\":{\"1406\":1}}],[\"保存在\",{\"1\":{\"1073\":1,\"1268\":1}}],[\"保存元素的数组\",{\"1\":{\"693\":1}}],[\"保存的字符串值\",{\"1\":{\"682\":1}}],[\"保存节点after为add的下一个节点\",{\"1\":{\"339\":1}}],[\"保存历史图片\",{\"1\":{\"271\":1}}],[\"保存到output\",{\"1\":{\"146\":1}}],[\"保存用户头信息的缓冲区大小\",{\"1\":{\"123\":1}}],[\"保存服务器名字的hash表是由指令server\",{\"1\":{\"123\":1}}],[\"如名称\",{\"1\":{\"1458\":1}}],[\"如加锁或者使用同步包装类\",{\"1\":{\"1446\":1}}],[\"如调整副本\",{\"1\":{\"1438\":1}}],[\"如同总指挥\",{\"1\":{\"1414\":1}}],[\"如对大量短连接使用线程池\",{\"1\":{\"1408\":1}}],[\"如工厂模式\",{\"1\":{\"1408\":1}}],[\"如吞吐量\",{\"1\":{\"1400\":1}}],[\"如被引用变量置null\",{\"1\":{\"1394\":1}}],[\"如在变量声明中使用该类的名称\",{\"1\":{\"1392\":1}}],[\"如rt\",{\"1\":{\"1392\":1}}],[\"如大对象和长时间存活的对象\",{\"1\":{\"1388\":1}}],[\"如c\",{\"1\":{\"1388\":1}}],[\"如使用contextloader\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"如url和文件\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"如init\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"如innodb\",{\"1\":{\"637\":1}}],[\"如实现beannameaware接口可以获取到beanname\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"如实例一\",{\"1\":{\"183\":1}}],[\"如synchronized关键词加在方法或者代码块上\",{\"1\":{\"1476\":1}}],[\"如string\",{\"1\":{\"1446\":1}}],[\"如spring使用\",{\"1\":{\"1402\":1}}],[\"如serial\",{\"1\":{\"1394\":1}}],[\"如select\",{\"1\":{\"633\":1}}],[\"如sleep\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"如安装包下载不成功\",{\"1\":{\"949\":1}}],[\"如源码路径\",{\"1\":{\"907\":1}}],[\"如只有一条修改操作\",{\"1\":{\"893\":1}}],[\"如js\",{\"1\":{\"882\":1}}],[\"如此重复\",{\"1\":{\"755\":1}}],[\"如此反复下去就会有无穷无尽的bean产生了\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"如此反复进行\",{\"1\":{\"417\":1}}],[\"如此反复执行\",{\"1\":{\"417\":1}}],[\"如activemq\",{\"1\":{\"657\":1}}],[\"如全局id\",{\"1\":{\"657\":1}}],[\"如全表备份或全表删除\",{\"1\":{\"624\":1,\"628\":1}}],[\"如全表扫描或全表更新\",{\"1\":{\"624\":1}}],[\"如电商网站商品的浏览量\",{\"1\":{\"657\":1}}],[\"如京东的月度销量榜单\",{\"1\":{\"657\":1}}],[\"如意向共享锁\",{\"1\":{\"638\":1}}],[\"如意犹未尽\",{\"1\":{\"588\":1}}],[\"如行锁升级为表锁\",{\"1\":{\"637\":1}}],[\"如行锁或表锁\",{\"1\":{\"633\":1}}],[\"如时间戳\",{\"1\":{\"632\":1}}],[\"如数据库中的记录\",{\"1\":{\"625\":1}}],[\"如脏读\",{\"1\":{\"616\":1}}],[\"如一表中有字段\",{\"1\":{\"599\":1}}],[\"如主键或具有唯一约束的列\",{\"1\":{\"565\":1}}],[\"如点\",{\"1\":{\"558\":1}}],[\"如上图\",{\"1\":{\"1118\":1,\"1306\":1}}],[\"如上图是一个分区日志文件\",{\"1\":{\"1118\":1,\"1306\":1}}],[\"如上一个所示\",{\"1\":{\"550\":1}}],[\"如上分析\",{\"1\":{\"92\":1}}],[\"如存储结构\",{\"1\":{\"493\":1}}],[\"如从\",{\"1\":{\"400\":1}}],[\"如图3所示\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"如图1所示\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"如图\",{\"1\":{\"386\":1,\"392\":1}}],[\"如图所示\",{\"1\":{\"342\":1}}],[\"如下对应spring\",{\"1\":{\"772\":1}}],[\"如下例子中\",{\"1\":{\"564\":1}}],[\"如下下面程序idworker类的starttime属性\",{\"1\":{\"441\":1}}],[\"如下所示\",{\"1\":{\"412\":1,\"1069\":1,\"1264\":1}}],[\"如下所示b\",{\"1\":{\"323\":1}}],[\"如下\",{\"1\":{\"340\":1,\"510\":1,\"892\":1,\"1049\":1,\"1250\":1}}],[\"如下图带顺序访问的b+树\",{\"1\":{\"322\":1}}],[\"如下图\",{\"1\":{\"322\":1,\"341\":1,\"578\":1,\"979\":1,\"1004\":1,\"1118\":1,\"1169\":1,\"1213\":1,\"1306\":1,\"1346\":1}}],[\"如磁盘\",{\"1\":{\"319\":1}}],[\"如llama2\",{\"1\":{\"290\":1}}],[\"如\",{\"0\":{\"589\":1,\"591\":1,\"592\":1,\"594\":1,\"595\":1},\"1\":{\"211\":3,\"319\":1,\"395\":1,\"410\":1,\"464\":1,\"621\":1,\"664\":1,\"768\":1,\"776\":1,\"778\":1,\"835\":1,\"894\":1,\"1049\":2,\"1099\":1,\"1131\":2,\"1161\":1,\"1250\":2,\"1290\":1,\"1316\":2,\"1341\":1,\"1408\":3,\"1416\":1,\"1446\":1}}],[\"如检查是否是本轮投票\",{\"1\":{\"183\":1}}],[\"如何确保我们从kafka中获取的信息是准确的呢\",{\"1\":{\"1442\":1}}],[\"如何确定适当的过期时间呢\",{\"1\":{\"1430\":1}}],[\"如何确定一个键值对应该存储在哪个分片上呢\",{\"1\":{\"1426\":1}}],[\"如何确定当前能读到哪一条消息\",{\"0\":{\"1118\":1,\"1306\":1}}],[\"如何从kafka中消费消息呢\",{\"1\":{\"1442\":1}}],[\"如何提高远程用户吞吐量\",{\"0\":{\"1440\":1}}],[\"如何控制\",{\"1\":{\"1410\":1}}],[\"如何优化\",{\"1\":{\"1394\":1,\"1404\":1}}],[\"如何优化索引\",{\"0\":{\"573\":1}}],[\"如何自定义starter\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"如何降低系统之间\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"如何获取自动生成的\",{\"0\":{\"1133\":1,\"1318\":1}}],[\"如何获取maven坐标\",{\"1\":{\"768\":1}}],[\"如何防御csrf\",{\"0\":{\"1094\":1,\"1287\":1}}],[\"如何快速排查死锁\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"如何快速索引呢\",{\"1\":{\"319\":1}}],[\"如何避免\",{\"1\":{\"1412\":1}}],[\"如何避免死锁\",{\"0\":{\"1062\":1,\"1260\":1},\"1\":{\"1062\":1,\"1260\":1}}],[\"如何避免缓存击穿的问题\",{\"1\":{\"1003\":1,\"1212\":1}}],[\"如何避免缓存穿透的问题\",{\"1\":{\"1003\":1,\"1212\":1}}],[\"如何在两个线程间共享数据\",{\"0\":{\"1059\":1,\"1257\":1}}],[\"如何在mysql中创建全文索引\",{\"0\":{\"570\":1}}],[\"如何停止一个正在运行的线程\",{\"0\":{\"1058\":1,\"1256\":1}}],[\"如何处理更好\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"如何处理缓存击穿的问题\",{\"0\":{\"1006\":1,\"1215\":1}}],[\"如何处理缓存雪崩的问题\",{\"0\":{\"1005\":1,\"1214\":1}}],[\"如何处理缓存穿透的问题\",{\"0\":{\"1004\":1,\"1213\":1}}],[\"如何实现\",{\"1\":{\"1008\":1,\"1217\":1}}],[\"如何实现缓存预热\",{\"0\":{\"1008\":1,\"1217\":1}}],[\"如何实现跨域\",{\"1\":{\"121\":1}}],[\"如何解决跨域问题\",{\"0\":{\"1093\":1,\"1286\":1}}],[\"如何解决\",{\"1\":{\"1004\":1,\"1005\":1,\"1006\":1,\"1062\":1,\"1213\":1,\"1214\":1,\"1215\":1,\"1260\":1}}],[\"如何解决这些问题\",{\"1\":{\"572\":1}}],[\"如何保证二维码的准确性\",{\"1\":{\"935\":1}}],[\"如何保证各个平台的二维码是唯一的\",{\"1\":{\"934\":1}}],[\"如何保证不重复\",{\"1\":{\"934\":1,\"935\":1}}],[\"如何告诉mybatis把结果映射到appointment同时映射book属性\",{\"1\":{\"890\":1}}],[\"如何检测死锁\",{\"0\":{\"643\":1}}],[\"如何检测索引碎片化\",{\"1\":{\"574\":1}}],[\"如何修改同一条数据\",{\"0\":{\"636\":1}}],[\"如何修复索引碎片化\",{\"1\":{\"574\":1}}],[\"如何通过\",{\"0\":{\"635\":1}}],[\"如何分析和优化索引的使用\",{\"1\":{\"573\":1}}],[\"如何有效地维护和管理索引\",{\"0\":{\"571\":1}}],[\"如何查看mysql表中已有的索引\",{\"0\":{\"569\":1}}],[\"如何减少回表\",{\"0\":{\"567\":1}}],[\"如何选择红黑树还是二叉查找树\",{\"1\":{\"1406\":1}}],[\"如何选择恰当的并发list类\",{\"1\":{\"1404\":1}}],[\"如何选择特定的节点执行请求的\",{\"0\":{\"1032\":1,\"1236\":1}}],[\"如何选择\",{\"0\":{\"562\":1},\"1\":{\"1004\":1,\"1213\":1}}],[\"如何生成自增\",{\"1\":{\"435\":1}}],[\"如何生成全局唯一id\",{\"1\":{\"435\":1}}],[\"如何使用呢\",{\"1\":{\"1494\":1}}],[\"如何使用分布式锁\",{\"0\":{\"639\":1}}],[\"如何使用\",{\"1\":{\"247\":2}}],[\"如何打印日志呢\",{\"1\":{\"229\":1}}],[\"如何是转行的人\",{\"1\":{\"115\":1}}],[\"如何给自己的域名配置免费的https\",{\"0\":{\"97\":1,\"98\":1}}],[\"如果读多\",{\"1\":{\"1476\":1}}],[\"如果删除节点时版本号没有同步更新\",{\"1\":{\"1476\":1}}],[\"如果校验失败\",{\"1\":{\"1476\":1}}],[\"如果当\",{\"1\":{\"1476\":1}}],[\"如果当前数组长度已经达到最大值\",{\"1\":{\"1386\":1}}],[\"如果当前不存在事务\",{\"1\":{\"1177\":2,\"1354\":2}}],[\"如果当前存在事务\",{\"1\":{\"1177\":6,\"1354\":6}}],[\"如果当前没有事务\",{\"1\":{\"1177\":2,\"1354\":2}}],[\"如果当前时间小于上一次id生成的时间戳\",{\"1\":{\"441\":1}}],[\"如果主节点宕机了\",{\"1\":{\"1466\":1}}],[\"如果仍然没有成功\",{\"1\":{\"1452\":1}}],[\"如果消息没有被确认\",{\"1\":{\"1452\":1}}],[\"如果消息没有被确认怎么办\",{\"1\":{\"1452\":1}}],[\"如果消费者在处理消息时发生错误\",{\"1\":{\"1438\":1}}],[\"如果必须使用非线程安全的类\",{\"1\":{\"1446\":1}}],[\"如果多个线程同时访问一个\",{\"1\":{\"1446\":1}}],[\"如果多出一个and\",{\"1\":{\"849\":1}}],[\"如果leader副本出现故障怎么办\",{\"1\":{\"1444\":1}}],[\"如果相等\",{\"1\":{\"1428\":1}}],[\"如果相同则进行更新\",{\"1\":{\"642\":1}}],[\"如果相同\",{\"1\":{\"636\":1}}],[\"如果成功获取到锁\",{\"1\":{\"1428\":1}}],[\"如果成功了\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"如果调用时用string类型替换t\",{\"1\":{\"1424\":1}}],[\"如果调用的方法是在新线程调用的\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"如果aof加载失败\",{\"1\":{\"1420\":1}}],[\"如果键\",{\"1\":{\"1418\":1}}],[\"如果键所在的链表过长或超过加载因子\",{\"1\":{\"1406\":1}}],[\"如果key已经存在\",{\"1\":{\"1418\":1}}],[\"如果上述方式都不可行\",{\"1\":{\"1412\":1}}],[\"如果再给你一个机会\",{\"1\":{\"1410\":1}}],[\"如果再次执行的话\",{\"1\":{\"893\":1}}],[\"如果配置了\",{\"1\":{\"1410\":1}}],[\"如果旧表不为空且旧表的键与新键hash值相同\",{\"1\":{\"1406\":1}}],[\"如果注解有默认值\",{\"1\":{\"1402\":1}}],[\"如果注释该指令\",{\"1\":{\"123\":1}}],[\"如果永久代填满\",{\"1\":{\"1394\":1}}],[\"如果两个对象彼此引用\",{\"1\":{\"1394\":1}}],[\"如果两者都输入\",{\"1\":{\"849\":2}}],[\"如果锁被当前线程持有\",{\"1\":{\"1481\":1}}],[\"如果锁没有被其他线程持有\",{\"1\":{\"1481\":1}}],[\"如果锁已经被其他线程占用了\",{\"1\":{\"1390\":1}}],[\"如果锁定的行数过多\",{\"1\":{\"638\":1}}],[\"如果锁定的行数占表中行数的很大一部分\",{\"1\":{\"637\":1}}],[\"如果锁定的页\",{\"1\":{\"637\":1}}],[\"如果eden区没有足够的空间\",{\"1\":{\"1388\":1}}],[\"如果找到了一个空的位置\",{\"1\":{\"1386\":1}}],[\"如果找到了相同的\",{\"1\":{\"1386\":1}}],[\"如果找不到则返回none\",{\"1\":{\"306\":1}}],[\"如果能清楚\",{\"1\":{\"1380\":1}}],[\"如果能够定位到具体的索引记录\",{\"1\":{\"638\":1}}],[\"如果集合很大\",{\"1\":{\"1380\":1}}],[\"如果链表长度过长\",{\"1\":{\"1380\":1}}],[\"如果链表长度超过treeify\",{\"1\":{\"1380\":1}}],[\"如果节点的新的索引位置相同\",{\"1\":{\"1380\":1}}],[\"如果节点已经存在\",{\"1\":{\"1380\":1}}],[\"如果桶位非空\",{\"1\":{\"1380\":1}}],[\"如果采用两倍扩容\",{\"1\":{\"1380\":1}}],[\"如果采用整型作为id\",{\"1\":{\"435\":1}}],[\"如果扩容过小\",{\"1\":{\"1380\":1}}],[\"如果容量达到阈值\",{\"1\":{\"1380\":1}}],[\"如果产生冲突\",{\"1\":{\"1380\":1}}],[\"如果bean的某一个属性没有注入\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"如果实现了将会调用其实现的destroy\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"如果实现了\",{\"1\":{\"1171\":2,\"1348\":2}}],[\"如果真能实现ioc容器\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"如果理解有难度\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"如果size已经超过阈值threshold\",{\"1\":{\"1380\":1}}],[\"如果slave节点服务异常\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"如果sql语句中出现\",{\"0\":{\"862\":1}}],[\"如果超过一半确认服务异常\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"如果master服务异常\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"如果值是一个大的业务对象\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"如果试图选中同一行则会发生排斥\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"如果该锁被其他线程持有\",{\"1\":{\"1481\":1}}],[\"如果该锁被当前线程持有\",{\"1\":{\"1481\":1}}],[\"如果该锁没有被其他线程持有\",{\"1\":{\"1480\":3,\"1481\":1}}],[\"如果该锁已经被其他线程持有\",{\"1\":{\"1480\":5,\"1481\":1}}],[\"如果该位置没有键值对\",{\"1\":{\"1386\":1}}],[\"如果该位置已经有键值对了\",{\"1\":{\"1386\":1}}],[\"如果该节点的分区是单副本的\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"如果该索引是复合索引\",{\"0\":{\"597\":1},\"1\":{\"1149\":1,\"1332\":1}}],[\"如果在\",{\"1\":{\"1410\":1}}],[\"如果在创建消息的时候\",{\"1\":{\"1119\":1,\"1307\":1}}],[\"如果在高速缓存中找到所需数据\",{\"1\":{\"999\":1,\"1208\":1}}],[\"如果用自己的话描述技术难题\",{\"1\":{\"1378\":1}}],[\"如果用户编写了一个java\",{\"1\":{\"1106\":1,\"1297\":1}}],[\"如果用来进行下载等应用磁盘io重负载应用\",{\"1\":{\"123\":2}}],[\"如果父类可以完成类加载工作则子类不会再去加载\",{\"1\":{\"1392\":1}}],[\"如果父类加载器可以完成类加载任务\",{\"1\":{\"1106\":1,\"1297\":1}}],[\"如果父类加载器还存在其父类加载器\",{\"1\":{\"1106\":1,\"1297\":1}}],[\"如果父类的一个方法被声明为public\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"如果已经配置自动加载选项\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"如果已过期\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"如果我想修饰一个代码块\",{\"1\":{\"1480\":1}}],[\"如果我要添加或删除一个节点\",{\"1\":{\"1426\":1}}],[\"如果我的链表长度不停地在7和8之间切换\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"如果我们要搜索关键词\",{\"1\":{\"1464\":1}}],[\"如果我们没有及时清理这些变量副本\",{\"1\":{\"1386\":1}}],[\"如果我们打开机械式手表的后盖\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"如果我们仍然使用使用链表把多个冲突的元素串起来\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"如果我们的查询指定了\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"如果我们的服务器有n多台的话\",{\"1\":{\"179\":1}}],[\"如果我们使用\",{\"1\":{\"1005\":2,\"1214\":2}}],[\"如果我们使用hashset来实现过滤的话\",{\"1\":{\"383\":1}}],[\"如果我们运行\",{\"1\":{\"775\":1}}],[\"如果我们想要保留这种优势\",{\"1\":{\"695\":1}}],[\"如果我们有一个指向图\",{\"1\":{\"682\":1}}],[\"如果线程a遍历的不是一个\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"如果系统现存的资源可以满足它的最大需求量则按当前的申请资源分配资源\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"如果获取锁失败\",{\"1\":{\"1428\":1}}],[\"如果获取成功则执行业务逻辑\",{\"1\":{\"1062\":2,\"1260\":2}}],[\"如果获取失败了再判断是否需要阻塞\",{\"1\":{\"1476\":1}}],[\"如果获取失败\",{\"1\":{\"441\":1,\"1062\":2,\"1260\":2}}],[\"如果条件不满足则等待\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"如果方法上加了\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"如果频繁的进行这样的操作对性能有所影响\",{\"1\":{\"1046\":1,\"1247\":1}}],[\"如果操作系统帮你完成了再通知你\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"如果x和y引用的对象没有发生变化\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"如果x\",{\"1\":{\"1044\":2,\"1245\":2}}],[\"如果保证读写一致\",{\"0\":{\"1035\":1,\"1239\":1}}],[\"如果对象为空\",{\"1\":{\"1481\":2}}],[\"如果对象已经实例化了\",{\"1\":{\"91\":1}}],[\"如果对性能有较高要求\",{\"1\":{\"1380\":1}}],[\"如果对某个节点的投票数达到一定的值\",{\"1\":{\"1027\":1,\"1231\":1}}],[\"如果依靠用户请求的方式重建缓存数据\",{\"1\":{\"1008\":1,\"1217\":1}}],[\"如果缓存中没有任何数据\",{\"1\":{\"1008\":1,\"1217\":1}}],[\"如果未过期\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"如果存在\",{\"1\":{\"1004\":1,\"1213\":1,\"1454\":1}}],[\"如果存在了就返回true\",{\"1\":{\"390\":1}}],[\"如果从kafka得到准确消息\",{\"0\":{\"1442\":1}}],[\"如果从服务器因网络故障与主服务器断开\",{\"1\":{\"1422\":1}}],[\"如果从\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"如果避免缓存雪崩的问题\",{\"1\":{\"1003\":1,\"1212\":1}}],[\"如果表不存在\",{\"1\":{\"927\":1}}],[\"如果中途出现什么旧版本没卸载干净\",{\"1\":{\"916\":1}}],[\"如果影响行数等于>1\",{\"1\":{\"889\":1}}],[\"如果看过前几篇文章\",{\"1\":{\"870\":1}}],[\"如果看上一篇\",{\"1\":{\"400\":1}}],[\"如果属性是集合使用collection\",{\"1\":{\"860\":1}}],[\"如果属性在不只一个地方进行了配置\",{\"1\":{\"829\":1}}],[\"如果参数user中的某个属性为null\",{\"1\":{\"849\":1}}],[\"如果缺少and或者多出多个and则会报错\",{\"1\":{\"849\":1}}],[\"如果输入年龄\",{\"1\":{\"849\":2}}],[\"如果输入了姓名按照姓名进行模糊查询\",{\"1\":{\"849\":2}}],[\"如果输入了姓名则按照姓名模糊查找\",{\"1\":{\"848\":2}}],[\"如果输入了姓名\",{\"1\":{\"846\":1,\"847\":2}}],[\"如果输入的是\",{\"1\":{\"492\":2}}],[\"如果包的路径有很多\",{\"1\":{\"835\":1}}],[\"如果希望使用mybatis通过的动态代理的接口\",{\"1\":{\"825\":1}}],[\"如果id为1\",{\"1\":{\"790\":1}}],[\"如果只是调用\",{\"1\":{\"1055\":1,\"1253\":1}}],[\"如果只有一个参数\",{\"1\":{\"842\":1}}],[\"如果只有\",{\"1\":{\"787\":1}}],[\"如果只用来表示正整数\",{\"1\":{\"440\":1}}],[\"如果同时有\",{\"1\":{\"787\":1}}],[\"如果想要转移一系列的连续提交\",{\"1\":{\"980\":1}}],[\"如果想显示其他存存储\",{\"1\":{\"979\":1}}],[\"如果想一次构建多个项目模块\",{\"1\":{\"779\":1}}],[\"如果想尝试\",{\"1\":{\"677\":1}}],[\"如果引入的依赖包含了很多其它的传递依赖\",{\"1\":{\"773\":1}}],[\"如果间接依赖中包含有同一个坐标不同版本的资源依赖\",{\"1\":{\"772\":1}}],[\"如果直接依赖中包含有同一个坐标不同版本的资源依赖\",{\"1\":{\"772\":1}}],[\"如果直接与间接依赖中包含有同一个坐标不同版本的资源依赖\",{\"1\":{\"772\":1}}],[\"如果项目a中直接配置了log4j\",{\"1\":{\"772\":1}}],[\"如果显示java\",{\"1\":{\"755\":2}}],[\"如果大家发现有错误的地方欢迎大家指正\",{\"1\":{\"755\":1}}],[\"如果大于自己\",{\"1\":{\"183\":1}}],[\"如果外网访问\",{\"1\":{\"738\":1}}],[\"如果重复创建\",{\"1\":{\"708\":1}}],[\"如果这些\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"如果这时键\",{\"1\":{\"698\":1}}],[\"如果这个值相对较高\",{\"1\":{\"574\":1}}],[\"如果要包含提交\",{\"1\":{\"980\":1}}],[\"如果要应用并删除其他stash\",{\"1\":{\"979\":1}}],[\"如果要使用其他个\",{\"1\":{\"979\":1}}],[\"如果要显示其他存贮\",{\"1\":{\"979\":1}}],[\"如果要深入了解\",{\"1\":{\"755\":1}}],[\"如果要存储长度不同的字符串\",{\"1\":{\"695\":1}}],[\"如果要经常的调用\",{\"1\":{\"91\":1}}],[\"如果还有其他关于kafka或者任何其他技术的问题\",{\"1\":{\"1448\":1}}],[\"如果还有其他问题\",{\"1\":{\"1432\":1}}],[\"如果还有疑惑\",{\"1\":{\"691\":1}}],[\"如果还有什么疑问\",{\"1\":{\"417\":1}}],[\"如果修改sds时\",{\"1\":{\"683\":1}}],[\"如果没有最终标记阶段\",{\"1\":{\"1396\":1}}],[\"如果没有其他引用指向example对象\",{\"1\":{\"1394\":1}}],[\"如果没有冲突就直接插入\",{\"1\":{\"1380\":1}}],[\"如果没有这个\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"如果没有双亲委派模型而是由各个类加载器自行加载的话\",{\"1\":{\"1106\":1,\"1297\":1}}],[\"如果没有\",{\"1\":{\"976\":1,\"1156\":1,\"1336\":1,\"1384\":1}}],[\"如果没有表或者版本不匹配\",{\"1\":{\"927\":1}}],[\"如果没有通过这个命令安装\",{\"1\":{\"99\":1}}],[\"如果没安装\",{\"1\":{\"915\":1}}],[\"如果没看可以先回去看完再继续本篇~\",{\"1\":{\"676\":1}}],[\"如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止\",{\"1\":{\"667\":3}}],[\"如果设置\",{\"1\":{\"1035\":1,\"1239\":1}}],[\"如果设置返回1说明获取锁成功\",{\"1\":{\"657\":1}}],[\"如果设为\",{\"1\":{\"485\":1}}],[\"如果返回值大于0\",{\"1\":{\"640\":1}}],[\"如果插入失败\",{\"1\":{\"640\":1}}],[\"如果插入成功\",{\"1\":{\"640\":1}}],[\"如果检测到时间戳冲突\",{\"1\":{\"632\":1}}],[\"如果检测到冲突\",{\"1\":{\"632\":1}}],[\"如果变化了\",{\"1\":{\"632\":1}}],[\"如果开发时间允许\",{\"1\":{\"609\":1}}],[\"如果游标操作的数据超过1万行\",{\"0\":{\"607\":1}}],[\"如果数据变化较少\",{\"1\":{\"1430\":1}}],[\"如果数据量太大会造成长时间阻塞\",{\"1\":{\"1420\":1}}],[\"如果数据量不大\",{\"0\":{\"605\":1}}],[\"如果数据库表当前版本号与第一次取出来的\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"如果数据表没有添加索引或主键\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"如果数值在\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"如果数列中的元素都是小数\",{\"1\":{\"414\":1}}],[\"如果一致则\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"如果一台服务器上只部署了一个\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"如果一次性插入数据量很大\",{\"0\":{\"605\":1}}],[\"如果一个咖啡师不在\",{\"1\":{\"1432\":1}}],[\"如果一个节点宕机了\",{\"1\":{\"1426\":2}}],[\"如果一个\",{\"1\":{\"1412\":1}}],[\"如果一个分段里至少有一个对象被老年代引用\",{\"1\":{\"1398\":1}}],[\"如果一个对象仅被软引用\",{\"1\":{\"1394\":1}}],[\"如果一个对象仅被强引用变量引用\",{\"1\":{\"1394\":1}}],[\"如果一个对象被强引用的变量引用\",{\"1\":{\"1394\":1}}],[\"如果一个变量的修改涉及到多个步骤\",{\"1\":{\"1382\":1}}],[\"如果一个客户端设置了\",{\"1\":{\"1202\":1,\"1375\":1}}],[\"如果一个事务执行了\",{\"1\":{\"621\":1}}],[\"如果一个事务要对一张表加排他锁\",{\"1\":{\"620\":1}}],[\"如果一个字段的查询频率远低于更新频率\",{\"1\":{\"571\":1}}],[\"如果一个元素不存在\",{\"1\":{\"383\":1}}],[\"如果一个存储器的某个位置被访问\",{\"1\":{\"319\":1,\"323\":1}}],[\"如果创建了索引\",{\"1\":{\"571\":1}}],[\"如果索引配置了副本\",{\"1\":{\"1470\":1}}],[\"如果索引是整形\",{\"1\":{\"1149\":1,\"1332\":1}}],[\"如果索引包含了所有需要的列\",{\"1\":{\"567\":1}}],[\"如果索引列包含\",{\"1\":{\"564\":1}}],[\"如果索引列的数据分布非常不均匀\",{\"1\":{\"564\":1}}],[\"如果索引列具有大量重复值\",{\"1\":{\"562\":1}}],[\"如果磁盘\",{\"1\":{\"562\":1}}],[\"如果查询条件的结果为空\",{\"1\":{\"638\":1}}],[\"如果查询条件没有从索引的第一部分匹配\",{\"1\":{\"564\":1}}],[\"如果查询只访问索引中包含的列\",{\"1\":{\"573\":1}}],[\"如果查询只需要索引中包含的字段\",{\"1\":{\"567\":1}}],[\"如果查询中的某些条件不太可能同时满足\",{\"1\":{\"567\":1}}],[\"如果查询经常根据多个列进行过滤\",{\"1\":{\"567\":1}}],[\"如果查询涉及到范围查询\",{\"1\":{\"562\":1}}],[\"如果查询主要是等值查询\",{\"1\":{\"562\":1}}],[\"如果前面的判断为\",{\"1\":{\"541\":1}}],[\"如果尝试搜索\",{\"1\":{\"504\":1}}],[\"如果将a类和b类的bean配置为相互注入\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"如果将\",{\"1\":{\"504\":1}}],[\"如果需要排序可以使用treemap或者对hashmap进行排序\",{\"1\":{\"1380\":1}}],[\"如果需要顺序\",{\"1\":{\"1380\":1}}],[\"如果需要下载csdn资料又没有积分可以javapub留言\",{\"1\":{\"1050\":1,\"1064\":1}}],[\"如果需要存储\",{\"1\":{\"509\":1}}],[\"如果需要使用该类型的字段只需要在定义映射时指定\",{\"1\":{\"496\":1}}],[\"如果需要续订\",{\"1\":{\"103\":1}}],[\"如果您还有其他问题\",{\"1\":{\"1460\":1}}],[\"如果您还有其他关于kafka或其他技术的问题\",{\"1\":{\"1442\":1}}],[\"如果您确定不需要对字段进行排序或聚合\",{\"1\":{\"493\":1}}],[\"如果您想联系或合作\",{\"1\":{\"4\":1}}],[\"如果机器上时钟回拨\",{\"1\":{\"440\":1}}],[\"如果位数多的话\",{\"1\":{\"428\":1}}],[\"如果排序的对象有三位数以上\",{\"1\":{\"428\":1}}],[\"如果编号为i\",{\"1\":{\"417\":1}}],[\"如果有动手能力的朋友可以通过这些文章\",{\"1\":{\"1492\":1}}],[\"如果有索引\",{\"1\":{\"1464\":1}}],[\"如果有多个线程等待\",{\"1\":{\"1446\":1}}],[\"如果有机会能参与\",{\"1\":{\"1398\":1}}],[\"如果有的话\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"如果有一个齿轮出了问题\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"如果有一个服务挂掉\",{\"1\":{\"183\":1}}],[\"如果有恶意攻击者不断请求系统中不存在的数据\",{\"1\":{\"1159\":1,\"1339\":1}}],[\"如果有相应的trigger\",{\"1\":{\"1147\":1,\"1330\":1}}],[\"如果有则会使用\",{\"1\":{\"1133\":1,\"1318\":1}}],[\"如果有需要的话\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"如果有\",{\"1\":{\"764\":1,\"1384\":1}}],[\"如果有几百万用户\",{\"1\":{\"722\":1}}],[\"如果有疑问\",{\"1\":{\"411\":1}}],[\"如果布隆过滤器判断用户名不存在\",{\"1\":{\"387\":1}}],[\"如果布隆过滤器判断数据不存在则数据绝对不存在\",{\"1\":{\"387\":1}}],[\"如果计算出有一个元素已存在\",{\"1\":{\"383\":1}}],[\"如果n是一个质数\",{\"1\":{\"306\":1}}],[\"如果nginx给出需要增大hash\",{\"1\":{\"123\":1}}],[\"如果整数不包含0\",{\"1\":{\"306\":1}}],[\"如果会一些计算机技术\",{\"1\":{\"263\":1}}],[\"如果之前不是做\",{\"1\":{\"263\":1}}],[\"如果炒过股票就一定会有更深的感受\",{\"1\":{\"263\":1}}],[\"如果信息太长太多\",{\"1\":{\"224\":1}}],[\"如果使用不当\",{\"1\":{\"1480\":1}}],[\"如果使用本地缓存时\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"如果使用事务\",{\"1\":{\"791\":1}}],[\"如果使用到了临时表\",{\"0\":{\"606\":1}}],[\"如果使用的是\",{\"1\":{\"589\":1}}],[\"如果使用数据库自增\",{\"1\":{\"436\":1}}],[\"如果使用\",{\"1\":{\"224\":1,\"1044\":1,\"1048\":1,\"1245\":1,\"1249\":1}}],[\"如果使用更大的值\",{\"1\":{\"123\":1}}],[\"如果打印值是对象的话\",{\"1\":{\"223\":1}}],[\"如果打开多个重复的窗口\",{\"1\":{\"86\":1}}],[\"如果接口发生了变更\",{\"1\":{\"210\":1}}],[\"如果逻辑分支与状态有关\",{\"0\":{\"197\":1}}],[\"如果是分布式微服务系统\",{\"1\":{\"1511\":1}}],[\"如果是则更改为新的值\",{\"1\":{\"1476\":1}}],[\"如果是\",{\"1\":{\"1454\":1}}],[\"如果是第一次同步\",{\"1\":{\"1422\":1}}],[\"如果是第一次访问某个jsp页面\",{\"1\":{\"1087\":1,\"1280\":1}}],[\"如果是多副本的\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"如果是7的话\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"如果是所有代码\",{\"1\":{\"980\":1}}],[\"如果是以上错误\",{\"1\":{\"962\":1}}],[\"如果是用mvn命令生成的xml\",{\"1\":{\"883\":1}}],[\"如果是亿级大表\",{\"1\":{\"572\":1}}],[\"如果是小数据量的\",{\"1\":{\"562\":1}}],[\"如果是同一时间生成的\",{\"1\":{\"441\":1}}],[\"如果是字符串\",{\"1\":{\"435\":1}}],[\"如果是老读者都知道我在做区块链领域的事\",{\"1\":{\"263\":1}}],[\"如果是一些非常复杂的接口\",{\"1\":{\"207\":1}}],[\"如果是非常简单的接口\",{\"1\":{\"207\":1}}],[\"如果是leader\",{\"1\":{\"183\":1}}],[\"如果是follower\",{\"1\":{\"183\":1}}],[\"如果是单个进程中对共享资源的访问\",{\"1\":{\"180\":1}}],[\"如果zxid相同\",{\"1\":{\"183\":1}}],[\"如果不是\",{\"1\":{\"1454\":1}}],[\"如果不是第一次访问某个jsp页面\",{\"1\":{\"1087\":1,\"1280\":1}}],[\"如果不需要高并发\",{\"1\":{\"1380\":1}}],[\"如果不明白来javapub\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"如果不能确定类型\",{\"1\":{\"1041\":1,\"1242\":1}}],[\"如果不能转换则直接报错\",{\"1\":{\"1041\":1,\"1242\":1}}],[\"如果不使用这个命令\",{\"1\":{\"980\":1}}],[\"如果不太明白\",{\"1\":{\"892\":1}}],[\"如果不了解\",{\"1\":{\"715\":1}}],[\"如果不同\",{\"1\":{\"636\":1,\"1380\":1}}],[\"如果不理解\",{\"1\":{\"405\":1}}],[\"如果不存在就进行记录并返回false\",{\"1\":{\"390\":1}}],[\"如果不存在手动创建\",{\"1\":{\"174\":1}}],[\"如果不知道没关系\",{\"1\":{\"382\":1}}],[\"如果不确定是否要加入\",{\"1\":{\"250\":1}}],[\"如果不设置就会报错\",{\"1\":{\"162\":1}}],[\"如果老吕这时候忘了小耀已经被安排走了\",{\"1\":{\"170\":1}}],[\"如果540不写\",{\"1\":{\"155\":1}}],[\"如果ffmpeg当时编译时\",{\"1\":{\"152\":1}}],[\"如果把它设置为比较大的数值\",{\"1\":{\"123\":1}}],[\"如果后端服务器down掉\",{\"1\":{\"123\":1}}],[\"如果图片显示不正常把这个改成off\",{\"1\":{\"123\":1}}],[\"如果header过大\",{\"1\":{\"123\":1}}],[\"如果hash算法设计不当\",{\"1\":{\"1380\":1}}],[\"如果hash\",{\"1\":{\"123\":1}}],[\"如果平时时间充裕\",{\"1\":{\"118\":1}}],[\"如果\",{\"1\":{\"53\":1,\"667\":1,\"981\":1,\"1062\":1,\"1120\":1,\"1260\":1,\"1308\":1,\"1382\":3,\"1410\":2}}],[\"如果你需要额外的配置\",{\"1\":{\"1525\":1}}],[\"如果你需要维护低版本\",{\"1\":{\"472\":1}}],[\"如果你遇到问题可以先\",{\"1\":{\"1515\":1}}],[\"如果你不了解\",{\"1\":{\"1512\":1}}],[\"如果你不知道怎么使用云服务器\",{\"1\":{\"244\":1}}],[\"如果你没有数据库\",{\"1\":{\"1507\":1}}],[\"如果你没有很多实战经验\",{\"1\":{\"1036\":1,\"1240\":1}}],[\"如果你等待服务员确认你的点菜后再点下一道菜\",{\"1\":{\"1452\":1}}],[\"如果你还没有安装\",{\"1\":{\"1512\":1}}],[\"如果你还有其他关于kafka或者其他技术的问题\",{\"1\":{\"1454\":1}}],[\"如果你还有其他关于redis内存优化的问题\",{\"1\":{\"1430\":1}}],[\"如果你还有其他问题\",{\"1\":{\"1440\":1,\"1444\":1,\"1464\":1,\"1466\":1,\"1470\":1}}],[\"如果你还不懂\",{\"1\":{\"650\":1}}],[\"如果你的数据变化频繁\",{\"1\":{\"1430\":1}}],[\"如果你的条件是基于不同的情况或值\",{\"0\":{\"192\":1}}],[\"如果你想深入了解kafka的工作原理\",{\"1\":{\"1432\":1}}],[\"如果你想要声明让所有的portlet公用全局的存储变量的话\",{\"1\":{\"1172\":1,\"1349\":1}}],[\"如果你想学编程\",{\"1\":{\"263\":1}}],[\"如果你\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"如果你进行了2次\",{\"1\":{\"981\":1}}],[\"如果你是使用\",{\"1\":{\"1522\":1}}],[\"如果你是第一次操作\",{\"1\":{\"973\":1}}],[\"如果你是一个新手\",{\"1\":{\"25\":1}}],[\"如果你在写一个demo\",{\"1\":{\"769\":1}}],[\"如果你读到在这里\",{\"1\":{\"671\":1}}],[\"如果你要用\",{\"1\":{\"665\":1}}],[\"如果你经常执行涉及多个列的查询\",{\"1\":{\"565\":1}}],[\"如果你经常刷短视频\",{\"1\":{\"264\":1}}],[\"如果你有实战项目经验\",{\"1\":{\"892\":1}}],[\"如果你有一个\",{\"1\":{\"564\":1}}],[\"如果你有开发需要欢迎在\",{\"1\":{\"561\":1}}],[\"如果你有兴趣了解更多\",{\"1\":{\"392\":1}}],[\"如果你有兴趣欢迎参与进来\",{\"1\":{\"1\":1}}],[\"如果你了解其他的编程语言\",{\"1\":{\"541\":1}}],[\"如果你已经结婚\",{\"1\":{\"265\":1}}],[\"如果你也打算做这件事\",{\"1\":{\"264\":1}}],[\"如果你感兴趣\",{\"1\":{\"263\":1}}],[\"如果你对网络有点了解\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"如果你对\",{\"1\":{\"987\":1}}],[\"如果你对这个业务场景有一定了解就会知道\",{\"1\":{\"263\":1}}],[\"如果你对zookeeper有一定了解\",{\"1\":{\"167\":1}}],[\"如果你会一些\",{\"1\":{\"118\":1}}],[\"如果你担心费用太高\",{\"1\":{\"115\":1}}],[\"如果觉得有用\",{\"1\":{\"1\":1}}],[\"经典的鸡与鸡蛋场景\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"经典三连问\",{\"1\":{\"1003\":1,\"1212\":1}}],[\"经典书籍往往包含了人类历史上最深刻\",{\"1\":{\"56\":1}}],[\"经历了大型项目的使用和考验\",{\"1\":{\"989\":1}}],[\"经理审批\",{\"1\":{\"928\":1}}],[\"经过第一次minor\",{\"1\":{\"1394\":1}}],[\"经过重排序后如下\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"经过水平切分的优化\",{\"1\":{\"581\":1}}],[\"经过如上分析\",{\"1\":{\"91\":1}}],[\"经纬度类型可以表达一个点\",{\"1\":{\"507\":1}}],[\"经纬度类型字段\",{\"1\":{\"506\":1}}],[\"经纬度类型\",{\"0\":{\"506\":1}}],[\"经纬度类型和地理区域类型\",{\"1\":{\"505\":1}}],[\"经测试\",{\"1\":{\"441\":1}}],[\"经常会遇到线程安全的问题\",{\"1\":{\"1382\":1}}],[\"经常会出现对象之间的多重依赖性关系\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"经常会使用blockingqueue来充当缓冲区的角色\",{\"1\":{\"181\":1}}],[\"经常温习查阅\",{\"1\":{\"983\":1,\"987\":1,\"998\":1,\"1013\":1,\"1024\":1,\"1040\":1,\"1054\":1,\"1068\":1,\"1083\":1,\"1098\":1,\"1112\":1,\"1128\":1,\"1141\":1,\"1154\":1,\"1167\":1,\"1180\":1,\"1193\":1,\"1206\":1}}],[\"经常组合查询的列放在一张表中\",{\"1\":{\"579\":1}}],[\"经常根据username或email字段查询的用户表\",{\"1\":{\"565\":1}}],[\"经常需要全局唯一的id作为数据库主键\",{\"1\":{\"435\":1}}],[\"加油\",{\"1\":{\"1392\":1,\"1410\":1,\"1412\":1,\"1416\":1}}],[\"加互斥锁\",{\"1\":{\"1160\":2,\"1340\":2}}],[\"加上我们的自定义注解\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"加快初始化\",{\"1\":{\"901\":1}}],[\"加如相关依赖即可\",{\"1\":{\"875\":1}}],[\"加完以后将结果写回至\",{\"1\":{\"755\":1}}],[\"加读锁\",{\"1\":{\"635\":1}}],[\"加写锁\",{\"1\":{\"635\":1}}],[\"加了行锁还是表锁\",{\"0\":{\"634\":1}}],[\"加了我个人微信的朋友都知道\",{\"1\":{\"265\":1}}],[\"加排他锁\",{\"1\":{\"618\":2}}],[\"加共享锁\",{\"1\":{\"618\":2}}],[\"加起来刚好64位\",{\"1\":{\"441\":1}}],[\"加1\",{\"1\":{\"412\":1}}],[\"加群\",{\"1\":{\"247\":1}}],[\"加入立即开始实战学习\",{\"1\":{\"1498\":1}}],[\"加入对静态资源的处理\",{\"1\":{\"882\":1}}],[\"加入mymapper\",{\"1\":{\"808\":1}}],[\"加入这个群体\",{\"1\":{\"263\":1}}],[\"加入\",{\"1\":{\"250\":1}}],[\"加入我们\",{\"1\":{\"249\":1}}],[\"加入群消息自行获取\",{\"1\":{\"247\":1}}],[\"加入环境变量\",{\"1\":{\"142\":1}}],[\"加锁过程要保证原子性\",{\"1\":{\"1163\":1,\"1343\":1}}],[\"加锁和解锁的过程需要手动进行\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"加锁和解锁的过程自动进行\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"加锁\",{\"1\":{\"91\":1}}],[\"加载因子loadfactor等\",{\"1\":{\"1406\":1}}],[\"加载的\",{\"1\":{\"1183\":1,\"1358\":1}}],[\"加载映射文件\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"加载servlet后\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"加载类\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"加载数据并回设到缓存\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"加载数据库配置\",{\"1\":{\"878\":1}}],[\"加载驱动\",{\"1\":{\"800\":1}}],[\"加载内存\",{\"1\":{\"493\":1}}],[\"加载\",{\"1\":{\"91\":1,\"292\":1,\"493\":1,\"1085\":1,\"1105\":1,\"1175\":1,\"1278\":1,\"1296\":1,\"1352\":1,\"1392\":1}}],[\"关系建立开始\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"关系型数据库本身比较容易成为系统瓶颈\",{\"1\":{\"578\":1}}],[\"关闭缓存swap\",{\"1\":{\"1030\":1,\"1234\":1}}],[\"关闭定时任务job\",{\"1\":{\"927\":1}}],[\"关闭二级缓存\",{\"1\":{\"853\":1}}],[\"关闭会话\",{\"1\":{\"814\":1}}],[\"关闭连接后不自动commit\",{\"1\":{\"878\":1}}],[\"关闭连接\",{\"1\":{\"800\":1}}],[\"关闭redis的服务保护模式\",{\"1\":{\"736\":1}}],[\"关闭资源\",{\"1\":{\"708\":1}}],[\"关注openjdk等开源项目了解jvm的最新进展与发展方向\",{\"1\":{\"1400\":1}}],[\"关注javapub会做详细讲解\",{\"1\":{\"1030\":1,\"1234\":1}}],[\"关注\",{\"1\":{\"584\":1,\"657\":1}}],[\"关键源码和视频自学\",{\"1\":{\"1492\":1}}],[\"关键是\",{\"1\":{\"1408\":1}}],[\"关键还是它发明的这套\",{\"1\":{\"1398\":1}}],[\"关键还续费同价\",{\"1\":{\"238\":1}}],[\"关键的不同在于vector的对外提供操作的方法都是用synchronized修饰的\",{\"1\":{\"1075\":1,\"1270\":1}}],[\"关键字可以确保变量的可见性\",{\"1\":{\"1480\":1}}],[\"关键字可以确保在同一时间只有一个线程可以访问被修饰的代码\",{\"1\":{\"1480\":1}}],[\"关键字可能会导致线程安全问题\",{\"1\":{\"1382\":1}}],[\"关键字都可以用来实现多线程之间的同步\",{\"1\":{\"1480\":1}}],[\"关键字之间的区别吗\",{\"1\":{\"1480\":1}}],[\"关键字带来的性能开销\",{\"1\":{\"1480\":1}}],[\"关键字带来的性能开销吗\",{\"1\":{\"1480\":1}}],[\"关键字会带来一些性能上的开销\",{\"1\":{\"1480\":1}}],[\"关键字对\",{\"1\":{\"1446\":1}}],[\"关键字或者\",{\"1\":{\"1382\":1}}],[\"关键字只能保证可见性\",{\"1\":{\"1382\":1}}],[\"关键字有什么缺点吗\",{\"1\":{\"1382\":1}}],[\"关键字的同步机制\",{\"1\":{\"1481\":1}}],[\"关键字的底层实现是通过\",{\"1\":{\"1480\":1}}],[\"关键字的底层\",{\"1\":{\"1480\":1}}],[\"关键字的性能\",{\"1\":{\"1480\":1}}],[\"关键字的性能开销比较大\",{\"1\":{\"1480\":1}}],[\"关键字的性能开销\",{\"1\":{\"1480\":1}}],[\"关键字的优化策略吗\",{\"1\":{\"1480\":1}}],[\"关键字的缺点吗\",{\"1\":{\"1480\":1}}],[\"关键字的理解很清晰\",{\"1\":{\"1480\":1}}],[\"关键字的理解非常清晰\",{\"1\":{\"1382\":1}}],[\"关键字的示例\",{\"1\":{\"1480\":1}}],[\"关键字的实现是基于对象头中的标记字\",{\"1\":{\"1480\":1}}],[\"关键字的实现原理吗\",{\"1\":{\"1480\":1}}],[\"关键字的实现涉及到以下几个方面\",{\"1\":{\"1382\":1}}],[\"关键字的使用方法吗\",{\"1\":{\"1480\":1}}],[\"关键字的作用呢\",{\"1\":{\"1382\":1}}],[\"关键字的作用吗\",{\"1\":{\"1382\":1}}],[\"关键字的作用\",{\"0\":{\"1041\":1,\"1242\":1},\"1\":{\"755\":2,\"1382\":1}}],[\"关键字是\",{\"1\":{\"1480\":1}}],[\"关键字是如何保证可见性的吗\",{\"1\":{\"1382\":1}}],[\"关键字是我们处理线程安全的一个利器\",{\"1\":{\"91\":1}}],[\"关键字来修饰变量\",{\"1\":{\"1480\":1}}],[\"关键字来修饰一个代码块\",{\"1\":{\"1480\":1}}],[\"关键字来修饰方法或代码块\",{\"1\":{\"1480\":1}}],[\"关键字来解决这个问题\",{\"1\":{\"1382\":1}}],[\"关键字来实现\",{\"1\":{\"755\":1}}],[\"关键字修饰的代码块时\",{\"1\":{\"1480\":3}}],[\"关键字修饰的方法或代码块后\",{\"1\":{\"1480\":1}}],[\"关键字修饰的方法或代码块\",{\"1\":{\"1480\":1}}],[\"关键字修饰的方法或代码块时\",{\"1\":{\"1480\":3}}],[\"关键字修饰了一个代码块\",{\"1\":{\"1480\":1}}],[\"关键字修饰了\",{\"1\":{\"1480\":1}}],[\"关键字修饰\",{\"1\":{\"1048\":1,\"1249\":1,\"1480\":1}}],[\"关键字不能同时使用\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"关键字和\",{\"1\":{\"1048\":1,\"1249\":1,\"1480\":3}}],[\"关键字用来修饰一个方法的时候\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"关键字用来修饰一个类的时候\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"关键字\",{\"1\":{\"755\":1,\"1480\":1}}],[\"关键字机制\",{\"1\":{\"755\":1}}],[\"关键\",{\"0\":{\"403\":1}}],[\"关键路径\",{\"0\":{\"378\":1}}],[\"关键日志\",{\"1\":{\"219\":1}}],[\"关于hashmap\",{\"1\":{\"1406\":1}}],[\"关于list\",{\"1\":{\"1404\":1}}],[\"关于持久和顺序这两个关键字\",{\"1\":{\"1195\":1,\"1368\":1}}],[\"关于es的面试\",{\"1\":{\"1024\":1}}],[\"关于key的几条规则\",{\"1\":{\"665\":2}}],[\"关于\",{\"1\":{\"472\":1,\"534\":1}}],[\"关于布隆过滤器\",{\"0\":{\"383\":1}}],[\"关于队列的操作\",{\"1\":{\"340\":1}}],[\"关于我\",{\"2\":{\"253\":1,\"258\":1}}],[\"关于作者\",{\"2\":{\"119\":1}}],[\"关于网站\",{\"0\":{\"54\":1}}],[\"关于这些扩展\",{\"1\":{\"28\":1}}],[\"关于站长\",{\"0\":{\"3\":1}}],[\"设username=javapub\",{\"1\":{\"1131\":2,\"1316\":2}}],[\"设计稳定的容错方案\",{\"1\":{\"1408\":1}}],[\"设计一个高并发系统\",{\"1\":{\"1408\":1}}],[\"设计不好会导致性能下降\",{\"1\":{\"1380\":1}}],[\"设计调优\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"设计上要保证唯一性\",{\"1\":{\"934\":1,\"935\":1}}],[\"设计成泛型\",{\"1\":{\"893\":1}}],[\"设计良好的覆盖索引可以显著减少回表操作\",{\"1\":{\"567\":1}}],[\"设计\",{\"1\":{\"270\":1,\"1492\":1,\"1502\":3}}],[\"设计模式构建的\",{\"1\":{\"1408\":1}}],[\"设计模式\",{\"0\":{\"84\":1},\"1\":{\"587\":1,\"887\":1,\"1194\":1,\"1367\":1}}],[\"设定null\",{\"1\":{\"487\":1}}],[\"设定声音编解码器\",{\"1\":{\"144\":1}}],[\"设定声音的channel数\",{\"1\":{\"144\":1}}],[\"设定采样率\",{\"1\":{\"144\":1}}],[\"设定视频编解码器\",{\"1\":{\"144\":1}}],[\"设定视频流量\",{\"1\":{\"144\":1}}],[\"设定画面的比例\",{\"1\":{\"144\":1}}],[\"设定画面的宽与高\",{\"1\":{\"144\":1}}],[\"设定帧速率\",{\"1\":{\"144\":1}}],[\"设定输出格式\",{\"1\":{\"144\":1}}],[\"设定输入流\",{\"1\":{\"144\":1}}],[\"设定查看nginx状态的地址\",{\"1\":{\"123\":1}}],[\"设定缓存文件夹大小\",{\"1\":{\"123\":1}}],[\"设定通过nginx上传文件的大小\",{\"1\":{\"123\":1}}],[\"设定http服务器\",{\"1\":{\"123\":1}}],[\"设置工作目录\",{\"1\":{\"1514\":1}}],[\"设置age值为30\",{\"1\":{\"1418\":1}}],[\"设置name的值为\",{\"1\":{\"1418\":1}}],[\"设置字符串值\",{\"1\":{\"1418\":1}}],[\"设置堆最大值和初始值\",{\"1\":{\"1400\":1}}],[\"设置堆内存\",{\"1\":{\"459\":1}}],[\"设置g1垃圾收集器\",{\"1\":{\"1400\":2}}],[\"设置gzip压缩针对的http协议版本\",{\"1\":{\"123\":1}}],[\"设置jvm参数\",{\"1\":{\"1400\":1}}],[\"设置键值对的值\",{\"1\":{\"1386\":1}}],[\"设置锁超时时间\",{\"1\":{\"1163\":1,\"1343\":1}}],[\"设置不同的过期时间\",{\"1\":{\"1160\":1,\"1340\":1}}],[\"设置一个阈值\",{\"1\":{\"1142\":1,\"1325\":1}}],[\"设置一些缺失字段的初始化值\",{\"1\":{\"493\":1}}],[\"设置新生代\",{\"1\":{\"1108\":1,\"1299\":1}}],[\"设置新值\",{\"1\":{\"666\":1}}],[\"设置年轻的和老年代的内存比例为\",{\"1\":{\"1108\":1,\"1299\":1}}],[\"设置instance指向刚分配的内存地址\",{\"1\":{\"1056\":2,\"1254\":2}}],[\"设置instance实例指向刚分配的内存空间\",{\"1\":{\"89\":1}}],[\"设置最大文件句柄数\",{\"1\":{\"1030\":1,\"1234\":1}}],[\"设置最多多少空闲的\",{\"1\":{\"711\":1}}],[\"设置合理的路由机制\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"设置较短的过期时间\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"设置参数\",{\"1\":{\"800\":1}}],[\"设置系统环境变量path\",{\"1\":{\"765\":1}}],[\"设置方法问google\",{\"1\":{\"755\":1}}],[\"设置方式\",{\"1\":{\"456\":1}}],[\"设置过期时间\",{\"1\":{\"727\":1}}],[\"设置是否提前进行测试借用\",{\"1\":{\"711\":1}}],[\"设置是否此字段包含在\",{\"1\":{\"493\":1}}],[\"设置等待可用连接的最大时间\",{\"1\":{\"711\":1}}],[\"设置连接实例最大数目\",{\"1\":{\"711\":1}}],[\"设置哈希表字段的值\",{\"1\":{\"668\":1}}],[\"设置\",{\"1\":{\"660\":1,\"666\":1,\"1440\":2}}],[\"设置和获取的值是一个\",{\"1\":{\"654\":1}}],[\"设置条件\",{\"1\":{\"539\":1}}],[\"设置搜索时的分词器\",{\"1\":{\"493\":1}}],[\"设置成false\",{\"1\":{\"493\":1}}],[\"设置为主读取的缓存\",{\"1\":{\"1160\":1,\"1340\":1}}],[\"设置为对象类型\",{\"1\":{\"504\":1}}],[\"设置为\",{\"1\":{\"484\":1}}],[\"设置为默认值\",{\"1\":{\"160\":1}}],[\"设置目标乘积并调用函数寻找乘数\",{\"1\":{\"306\":1}}],[\"设置的好处是\",{\"1\":{\"151\":1}}],[\"设置b\",{\"1\":{\"151\":1}}],[\"设置在写入proxy\",{\"1\":{\"123\":1}}],[\"设置用于读取应答\",{\"1\":{\"123\":1}}],[\"设置从被代理服务器读取的第一部分应答的缓冲区大小\",{\"1\":{\"123\":1}}],[\"设置代理服务器\",{\"1\":{\"123\":1}}],[\"设置压缩所需要的缓冲区大小\",{\"1\":{\"123\":1}}],[\"设置值和cpu核心数一致\",{\"1\":{\"123\":1}}],[\"设置启动用户和用户组\",{\"1\":{\"123\":1}}],[\"jconsole\",{\"1\":{\"1400\":1}}],[\"jcp\",{\"1\":{\"883\":3}}],[\"jvisualvm\",{\"1\":{\"1400\":2}}],[\"jvm调优主要通过以下手段\",{\"1\":{\"1400\":1}}],[\"jvm调优\",{\"0\":{\"1400\":1}}],[\"jvm栈\",{\"1\":{\"1394\":2}}],[\"jvm要真正帮我干活了\",{\"1\":{\"1392\":1}}],[\"jvm还需要干什么\",{\"1\":{\"1392\":1}}],[\"jvm该准备干啥\",{\"1\":{\"1392\":1}}],[\"jvm会首先搜索类的加载路径\",{\"1\":{\"1392\":1}}],[\"jvm会使用tlab\",{\"1\":{\"1388\":1}}],[\"jvm会使用各种内存分配算法和内存分配器\",{\"1\":{\"1388\":1}}],[\"jvm会使用各种垃圾回收算法和垃圾回收器\",{\"1\":{\"1388\":1}}],[\"jvm会使用分代垃圾回收算法来对不同年龄段的对象进行不同的回收策略\",{\"1\":{\"1388\":1}}],[\"jvm会使用对象池技术来重复利用对象\",{\"1\":{\"1388\":1}}],[\"jvm会对对象的创建和销毁进行优化\",{\"1\":{\"1388\":1}}],[\"jvm会给我们创建一个单独的对象\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"jvm内存结构图示\",{\"1\":{\"1394\":1}}],[\"jvm内存结构分为\",{\"1\":{\"1394\":1}}],[\"jvm内存结构与垃圾回收有密切关系\",{\"1\":{\"1394\":1}}],[\"jvm内存模型的优化策略主要有以下几个方面\",{\"1\":{\"1388\":1}}],[\"jvm内存模型主要由以下几个部分组成\",{\"1\":{\"1388\":1}}],[\"jvm内存模型是java程序运行时内存使用的规范\",{\"1\":{\"1388\":1}}],[\"jvm内存模型\",{\"0\":{\"1388\":1}}],[\"jvm内存太大容易挂掉\",{\"1\":{\"678\":1}}],[\"jvm创建对象并不会调用任何构造函数\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"jvm就会创建一个新的对象\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"jvm并不知道泛型的存在\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"jvms\",{\"1\":{\"1041\":3,\"1242\":3}}],[\"jvm在运行时候的内存分配过程\",{\"1\":{\"755\":2}}],[\"jvm\",{\"0\":{\"1100\":1,\"1103\":1,\"1104\":1,\"1108\":1,\"1289\":1,\"1291\":1,\"1294\":1,\"1295\":1,\"1299\":1},\"1\":{\"459\":1,\"587\":1,\"719\":1,\"755\":4,\"950\":1,\"952\":1,\"1005\":1,\"1098\":2,\"1100\":1,\"1108\":1,\"1214\":1,\"1291\":1,\"1382\":8,\"1388\":1,\"1481\":2},\"2\":{\"1111\":1}}],[\"jvm为了提高程序执行性能\",{\"1\":{\"89\":1}}],[\"jfloat\",{\"1\":{\"1382\":4}}],[\"jlong\",{\"1\":{\"1382\":8}}],[\"jia部分stw\",{\"1\":{\"1394\":1}}],[\"jianmang\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"jint\",{\"1\":{\"1382\":10}}],[\"jinjin\",{\"1\":{\"826\":1,\"849\":1}}],[\"jetty\",{\"1\":{\"789\":1}}],[\"jeck\",{\"1\":{\"786\":1}}],[\"jerry\",{\"1\":{\"786\":1}}],[\"jedispoolconfig\",{\"1\":{\"711\":3}}],[\"jedispool\",{\"1\":{\"711\":7}}],[\"jedisconnectionexception\",{\"1\":{\"711\":1}}],[\"jedis\",{\"1\":{\"395\":1,\"711\":26,\"727\":2,\"875\":1}}],[\"just\",{\"1\":{\"1400\":1}}],[\"junmajinlong\",{\"1\":{\"967\":1}}],[\"junit的\",{\"1\":{\"1402\":1}}],[\"junit启动时加载springioc容器\",{\"1\":{\"891\":1}}],[\"junit4\",{\"1\":{\"891\":1}}],[\"junit\",{\"1\":{\"778\":3,\"820\":2,\"826\":2,\"891\":4,\"893\":1}}],[\"judgeless\",{\"1\":{\"928\":3}}],[\"judgemore\",{\"1\":{\"928\":3}}],[\"judgetask\",{\"1\":{\"928\":6}}],[\"juejin\",{\"1\":{\"726\":1}}],[\"jdouble\",{\"1\":{\"1382\":4}}],[\"jdbc3keygenerator\",{\"1\":{\"1133\":1,\"1318\":1}}],[\"jdbcurl\",{\"1\":{\"878\":1}}],[\"jdbc<\",{\"1\":{\"875\":1}}],[\"jdbc4connection\",{\"1\":{\"853\":1}}],[\"jdbctemplate的query方法总体结构是一个模板方法+回调函数\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"jdbctest\",{\"1\":{\"800\":2}}],[\"jdbctransaction\",{\"1\":{\"852\":3,\"853\":2}}],[\"jdbc类型的事务管理器\",{\"1\":{\"806\":2,\"808\":1}}],[\"jdbc缺点分析\",{\"0\":{\"801\":1}}],[\"jdbc代码回顾\",{\"0\":{\"800\":1}}],[\"jdbc驱动\",{\"1\":{\"769\":1}}],[\"jdbc\",{\"0\":{\"879\":1},\"1\":{\"708\":2,\"800\":2,\"806\":6,\"808\":3,\"852\":6,\"853\":5,\"878\":5,\"879\":6,\"881\":1,\"927\":2,\"1136\":2,\"1321\":2,\"1408\":1,\"1416\":1,\"1507\":2}}],[\"jdk9默认\",{\"1\":{\"1394\":1}}],[\"jdk源码中classloader的继承关系\",{\"1\":{\"1392\":1}}],[\"jdk动态代理\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"jdk5引入\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"jdk8\",{\"1\":{\"457\":1,\"871\":1}}],[\"jdk\",{\"1\":{\"457\":1,\"989\":1,\"1514\":1}}],[\"jdk17\",{\"1\":{\"1507\":1}}],[\"jdk1\",{\"0\":{\"1077\":1,\"1272\":1},\"1\":{\"455\":1,\"456\":1}}],[\"job\",{\"1\":{\"950\":2}}],[\"join其实合理理解成是线程合并\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"join方式\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"joinpoint\",{\"1\":{\"752\":14,\"1049\":4,\"1250\":4}}],[\"join参考\",{\"1\":{\"510\":1}}],[\"join类型\",{\"0\":{\"510\":1}}],[\"join\",{\"1\":{\"508\":2,\"510\":11,\"856\":2,\"857\":2,\"858\":3,\"890\":1,\"1064\":3,\"1174\":2,\"1262\":3,\"1351\":2}}],[\"john\",{\"1\":{\"489\":2,\"1418\":4}}],[\"j++\",{\"1\":{\"413\":1,\"430\":1,\"1042\":1,\"1243\":1}}],[\"j\",{\"1\":{\"405\":8,\"413\":2,\"417\":3,\"430\":3,\"1042\":1,\"1243\":1,\"1380\":5}}],[\"jmx\",{\"1\":{\"175\":1}}],[\"jp\",{\"1\":{\"752\":2}}],[\"jpg等\",{\"1\":{\"882\":1}}],[\"jpg\",{\"1\":{\"158\":1,\"392\":1,\"801\":1,\"939\":2,\"976\":1}}],[\"jpeg\",{\"1\":{\"158\":2,\"665\":1}}],[\"jxvf\",{\"1\":{\"142\":1}}],[\"jsr\",{\"1\":{\"1410\":1}}],[\"jstlview\",{\"1\":{\"882\":1}}],[\"js\",{\"1\":{\"882\":1}}],[\"jsp变为\",{\"1\":{\"1087\":1,\"1280\":1}}],[\"jsp的执行过程\",{\"0\":{\"1087\":1,\"1280\":1}}],[\"jsp的9内置对象及其含义\",{\"1\":{\"1084\":1,\"1277\":1}}],[\"jsp页面由系统翻译成servlet\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"jsp页面本身\",{\"1\":{\"1084\":1,\"1277\":1}}],[\"jsp是servlet的一种特殊形式\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"jsp是在html代码里面写java代码\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"jsp允许使用特殊标签直接嵌入到html页面\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"jsp使人们将显示和逻辑分隔称为可能\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"jsp有9个内置对象\",{\"1\":{\"1084\":1,\"1277\":1}}],[\"jsp<\",{\"1\":{\"883\":1}}],[\"jsp\",{\"0\":{\"1084\":1,\"1277\":1},\"1\":{\"882\":3,\"894\":3,\"895\":1}}],[\"jsp|jspx|do\",{\"1\":{\"123\":1}}],[\"json默认读写支持\",{\"1\":{\"882\":1}}],[\"json数据格式\",{\"1\":{\"473\":1}}],[\"json\",{\"1\":{\"211\":2,\"489\":3,\"492\":2,\"496\":1,\"499\":2,\"503\":2,\"504\":6,\"894\":4,\"915\":1,\"1049\":1,\"1250\":1}}],[\"jsonp\",{\"1\":{\"121\":1,\"1093\":1,\"1286\":1}}],[\"js|css\",{\"1\":{\"123\":2}}],[\"js和css缓存时间设置\",{\"1\":{\"123\":1}}],[\"jack\",{\"1\":{\"1133\":1,\"1318\":1,\"1418\":4}}],[\"jackson\",{\"1\":{\"875\":1}}],[\"jackie\",{\"1\":{\"492\":1}}],[\"jar等\",{\"1\":{\"1392\":1}}],[\"jar包\",{\"1\":{\"917\":1}}],[\"jar是自己生成的\",{\"1\":{\"913\":1}}],[\"jar中\",{\"1\":{\"913\":1}}],[\"jar文件不用在每个项目保存\",{\"1\":{\"763\":1}}],[\"jar在不同阶段无法个性化配置\",{\"1\":{\"763\":1}}],[\"jar体积过大\",{\"1\":{\"763\":1}}],[\"jar依赖\",{\"1\":{\"763\":1}}],[\"jar冲突\",{\"1\":{\"763\":1}}],[\"jar\",{\"0\":{\"1524\":1},\"1\":{\"111\":2,\"454\":1,\"711\":1,\"768\":1,\"776\":1,\"875\":1,\"907\":1,\"913\":6,\"914\":1,\"1514\":5,\"1522\":1,\"1523\":1,\"1524\":8,\"1525\":2},\"2\":{\"1527\":1}}],[\"java范型\",{\"0\":{\"1424\":1}}],[\"java的类加载过程由加载\",{\"1\":{\"1392\":1}}],[\"java堆的内存结构主要由三个部分组成\",{\"1\":{\"1388\":1}}],[\"java堆的作用是存放对象实例\",{\"1\":{\"1388\":1}}],[\"java堆\",{\"1\":{\"1388\":1}}],[\"java堆是垃圾收集器管理的主要区域\",{\"1\":{\"1388\":1}}],[\"java堆是被所有线程共享的一块内存区域\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"java堆是java虚拟机所管理的内存中最大的一块\",{\"1\":{\"1099\":1,\"1290\":1,\"1388\":1}}],[\"java虚拟机栈是线程私有的\",{\"1\":{\"1388\":1}}],[\"java虚拟机栈\",{\"1\":{\"1388\":1}}],[\"java虚拟机栈也是线程私有的\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"javanio\",{\"0\":{\"1478\":1},\"1\":{\"1378\":1}}],[\"java反射\",{\"0\":{\"1468\":1},\"1\":{\"1378\":1}}],[\"java多线程\",{\"0\":{\"1446\":1},\"1\":{\"1378\":1}}],[\"java泛型\",{\"1\":{\"1378\":1}}],[\"java注解\",{\"0\":{\"1402\":1},\"1\":{\"1378\":1}}],[\"java基础\",{\"0\":{\"1241\":1}}],[\"java导致内存泄露的原因很明确\",{\"1\":{\"1102\":1,\"1293\":1}}],[\"java也还是存在着内存泄漏的情况\",{\"1\":{\"1102\":1,\"1293\":1}}],[\"java是有gc垃圾回收机制的\",{\"1\":{\"1102\":1,\"1293\":1}}],[\"java内存泄漏\",{\"0\":{\"1102\":1,\"1293\":1}}],[\"java变为\",{\"1\":{\"1087\":1,\"1280\":1}}],[\"java提供\",{\"1\":{\"1060\":1,\"1258\":1}}],[\"java如何实现多线程之间的通讯和协作\",{\"0\":{\"1059\":1,\"1257\":1}}],[\"java线程中将就绪\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"java并发\",{\"0\":{\"1252\":1},\"1\":{\"1054\":1}}],[\"java创建对象有几种方式\",{\"0\":{\"1050\":1,\"1251\":1}}],[\"java原生除了提供基本注解\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"java原生注解\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"java中常用的map还有\",{\"1\":{\"1380\":1}}],[\"java中有5种创建对象的方式\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"java中8种基本数据类型\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"java中引用\",{\"1\":{\"337\":1}}],[\"java自动装箱和拆箱\",{\"0\":{\"1042\":1,\"1243\":1}}],[\"java容器常见面试题\",{\"1\":{\"1068\":1}}],[\"java容器篇\",{\"1\":{\"998\":1}}],[\"java容器\",{\"1\":{\"998\":1}}],[\"javax\",{\"1\":{\"939\":3}}],[\"javaub\",{\"1\":{\"901\":1,\"902\":1}}],[\"java文件\",{\"1\":{\"894\":1}}],[\"java图书业务接口\",{\"1\":{\"893\":1}}],[\"javaappointexception\",{\"1\":{\"892\":1}}],[\"javarepeatappointexception\",{\"1\":{\"892\":1}}],[\"java程序设计\",{\"1\":{\"887\":1}}],[\"javaee\",{\"0\":{\"1083\":1,\"1276\":1},\"1\":{\"883\":3,\"1083\":3,\"1408\":2},\"2\":{\"1097\":1}}],[\"javatype=\",{\"1\":{\"856\":1,\"857\":2,\"858\":3,\"860\":2}}],[\"javatype\",{\"1\":{\"856\":1,\"857\":1,\"860\":2}}],[\"java接口\",{\"0\":{\"816\":1}}],[\"java<\",{\"1\":{\"798\":1,\"875\":1,\"925\":1,\"1507\":1}}],[\"javadoc\",{\"1\":{\"751\":2}}],[\"javase\",{\"0\":{\"741\":1},\"1\":{\"1041\":2,\"1058\":1,\"1242\":2,\"1256\":1}}],[\"javascript\",{\"1\":{\"652\":1,\"1093\":1,\"1286\":1}}],[\"javaweb\",{\"1\":{\"587\":1}}],[\"java语言\",{\"1\":{\"417\":1}}],[\"java代码优化\",{\"1\":{\"1400\":1}}],[\"java代码\",{\"0\":{\"396\":1}}],[\"java实现\",{\"0\":{\"393\":1}}],[\"java版的一些demo\",{\"1\":{\"1036\":1,\"1240\":1}}],[\"java版\",{\"0\":{\"390\":1}}],[\"java里一个很重要的数据结构\",{\"1\":{\"335\":1}}],[\"java\",{\"0\":{\"9\":1,\"90\":1,\"104\":1,\"430\":1,\"809\":1,\"817\":1,\"1061\":1,\"1063\":1,\"1076\":1,\"1259\":1,\"1261\":1,\"1263\":1,\"1271\":1},\"1\":{\"93\":1,\"111\":5,\"118\":1,\"169\":2,\"390\":2,\"405\":2,\"417\":1,\"430\":2,\"438\":1,\"440\":2,\"441\":3,\"447\":1,\"450\":2,\"453\":1,\"586\":1,\"587\":1,\"678\":2,\"684\":2,\"711\":2,\"717\":1,\"719\":1,\"751\":1,\"752\":2,\"755\":4,\"800\":4,\"810\":5,\"816\":1,\"817\":1,\"819\":1,\"820\":3,\"825\":4,\"826\":4,\"829\":1,\"831\":2,\"832\":1,\"833\":1,\"835\":2,\"888\":3,\"889\":5,\"891\":7,\"892\":8,\"893\":8,\"894\":2,\"895\":2,\"899\":1,\"900\":1,\"902\":1,\"907\":3,\"913\":2,\"939\":1,\"989\":1,\"990\":1,\"1002\":1,\"1005\":1,\"1040\":1,\"1041\":1,\"1050\":1,\"1061\":2,\"1062\":4,\"1064\":1,\"1068\":1,\"1069\":1,\"1076\":1,\"1087\":1,\"1099\":1,\"1100\":1,\"1132\":1,\"1211\":1,\"1214\":1,\"1242\":1,\"1251\":1,\"1259\":2,\"1260\":4,\"1262\":1,\"1264\":1,\"1271\":1,\"1280\":1,\"1290\":1,\"1291\":1,\"1317\":1,\"1380\":3,\"1386\":1,\"1390\":5,\"1394\":7,\"1396\":1,\"1398\":2,\"1404\":1,\"1408\":3,\"1414\":1,\"1416\":2,\"1442\":2,\"1446\":1,\"1448\":1,\"1468\":5,\"1474\":1,\"1476\":1,\"1478\":29,\"1480\":14,\"1481\":3,\"1506\":1,\"1514\":5,\"1515\":2,\"1524\":2},\"2\":{\"10\":1,\"742\":1,\"743\":1,\"754\":1,\"756\":1,\"758\":1,\"759\":1,\"780\":1,\"781\":1,\"783\":1,\"784\":1,\"792\":1,\"865\":1,\"866\":1,\"868\":1,\"869\":1,\"896\":1,\"904\":1,\"905\":1,\"908\":1,\"909\":1,\"920\":1,\"921\":1,\"931\":1,\"932\":1,\"942\":1,\"943\":1,\"1053\":1,\"1067\":1,\"1082\":1}}],[\"javapub666\",{\"1\":{\"1507\":1}}],[\"javapub博主\",{\"1\":{\"1494\":1}}],[\"javapub帮你下载\",{\"1\":{\"1050\":1,\"1064\":1}}],[\"javapub会单独写一篇深入图解nio和bio\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"javapubtest\",{\"1\":{\"1043\":9,\"1244\":9}}],[\"javapub在这里整理这些容易忘记的重点知识及解答\",{\"1\":{\"998\":1,\"1013\":1,\"1024\":1,\"1040\":1,\"1054\":1,\"1068\":1,\"1083\":1,\"1098\":1,\"1112\":1,\"1128\":1,\"1141\":1,\"1154\":1,\"1167\":1,\"1180\":1,\"1193\":1}}],[\"javapub<\",{\"1\":{\"771\":1,\"1525\":1}}],[\"javapub版\",{\"1\":{\"591\":1}}],[\"javapub参考教程\",{\"1\":{\"583\":1}}],[\"javapub说\",{\"0\":{\"382\":1},\"1\":{\"980\":1}}],[\"javapub的视频\",{\"1\":{\"264\":1}}],[\"javapub学习路线\",{\"1\":{\"257\":1}}],[\"javapub官网\",{\"1\":{\"257\":1}}],[\"javapub官方公众号\",{\"1\":{\"5\":1}}],[\"javapub讲坛\",{\"1\":{\"149\":2}}],[\"javapub为金九银十助力\",{\"1\":{\"87\":1}}],[\"javapub知识星球\",{\"1\":{\"53\":1}}],[\"javapub\",{\"1\":{\"1\":1,\"53\":2,\"88\":2,\"89\":2,\"92\":2,\"93\":2,\"98\":1,\"107\":1,\"108\":2,\"123\":4,\"126\":1,\"167\":1,\"205\":2,\"208\":1,\"209\":2,\"210\":1,\"218\":1,\"220\":1,\"222\":1,\"223\":2,\"228\":1,\"247\":2,\"250\":1,\"252\":1,\"264\":2,\"270\":2,\"294\":2,\"297\":1,\"341\":1,\"342\":1,\"381\":1,\"390\":3,\"400\":1,\"409\":1,\"417\":2,\"421\":1,\"430\":2,\"447\":1,\"478\":1,\"551\":1,\"561\":1,\"564\":1,\"587\":1,\"588\":1,\"591\":1,\"650\":1,\"676\":1,\"711\":1,\"722\":5,\"727\":1,\"731\":1,\"736\":1,\"744\":1,\"749\":1,\"751\":3,\"752\":5,\"753\":1,\"761\":1,\"795\":1,\"875\":2,\"878\":2,\"881\":1,\"882\":1,\"888\":2,\"889\":4,\"890\":2,\"891\":7,\"892\":8,\"893\":19,\"894\":9,\"895\":2,\"901\":1,\"902\":1,\"907\":1,\"912\":4,\"919\":1,\"926\":1,\"927\":1,\"939\":3,\"948\":1,\"969\":1,\"983\":2,\"987\":3,\"1025\":2,\"1027\":1,\"1044\":2,\"1049\":1,\"1050\":1,\"1061\":5,\"1062\":2,\"1064\":3,\"1083\":1,\"1131\":2,\"1176\":1,\"1206\":1,\"1229\":2,\"1231\":1,\"1245\":2,\"1250\":1,\"1251\":1,\"1259\":5,\"1260\":2,\"1262\":3,\"1316\":2,\"1353\":1,\"1378\":3,\"1380\":4,\"1382\":4,\"1384\":4,\"1386\":4,\"1388\":4,\"1390\":4,\"1392\":3,\"1394\":4,\"1396\":4,\"1398\":4,\"1400\":4,\"1402\":4,\"1404\":4,\"1406\":4,\"1408\":4,\"1410\":4,\"1412\":4,\"1414\":4,\"1416\":4,\"1418\":4,\"1420\":4,\"1422\":4,\"1424\":4,\"1426\":4,\"1428\":4,\"1430\":4,\"1432\":4,\"1434\":4,\"1436\":4,\"1438\":4,\"1440\":4,\"1442\":1,\"1446\":4,\"1448\":4,\"1450\":4,\"1452\":4,\"1454\":4,\"1456\":4,\"1458\":4,\"1460\":4,\"1462\":4,\"1464\":4,\"1466\":4,\"1468\":4,\"1470\":4,\"1474\":4,\"1476\":4,\"1478\":4,\"1480\":1,\"1481\":3,\"1494\":2,\"1502\":1,\"1506\":1,\"1507\":16,\"1512\":1,\"1515\":2,\"1525\":1}}],[\"nx\",{\"1\":{\"1163\":1,\"1343\":1}}],[\"n数据的列表\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"npm\",{\"1\":{\"972\":1}}],[\"npl\",{\"1\":{\"263\":1}}],[\"n<\",{\"1\":{\"884\":1}}],[\"nic\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"nio和bio是非常重要的计算机知识\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"nio和bio是一个相对有点抽象的概念\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"nio\",{\"1\":{\"989\":1,\"990\":1,\"1045\":1,\"1246\":1,\"1478\":25}}],[\"nil\",{\"1\":{\"666\":1,\"723\":1,\"1418\":1}}],[\"niedermayer主要负责维护\",{\"1\":{\"139\":1}}],[\"nft\",{\"1\":{\"537\":1,\"539\":1}}],[\"nacos\",{\"1\":{\"1183\":1,\"1358\":1}}],[\"navigation\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"navicat\",{\"1\":{\"887\":1}}],[\"native\",{\"1\":{\"1099\":2,\"1100\":1,\"1290\":2,\"1291\":1}}],[\"natural\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"nanoseconds\",{\"1\":{\"1062\":2,\"1260\":2}}],[\"nanotime\",{\"1\":{\"441\":2}}],[\"napoay\",{\"1\":{\"447\":1}}],[\"naming\",{\"1\":{\"169\":1}}],[\"name的值保持为\",{\"1\":{\"1418\":1}}],[\"name填一个\",{\"1\":{\"952\":1}}],[\"name>`\",{\"1\":{\"950\":1}}],[\"name>contextconfiglocation<\",{\"1\":{\"883\":1}}],[\"name>\",{\"1\":{\"883\":3,\"907\":1}}],[\"name>dispatcherservlet<\",{\"1\":{\"883\":2}}],[\"name=出差报销\",{\"1\":{\"929\":1}}],[\"name=\",{\"1\":{\"806\":12,\"808\":4,\"822\":1,\"829\":6,\"830\":1,\"831\":1,\"833\":1,\"843\":2,\"845\":1,\"848\":1,\"852\":6,\"853\":4,\"878\":15,\"880\":3,\"881\":1,\"882\":4,\"884\":1,\"895\":1,\"928\":12,\"1416\":1}}],[\"name=case\",{\"1\":{\"790\":1}}],[\"name3\",{\"1\":{\"790\":1}}],[\"name2\",{\"1\":{\"790\":1}}],[\"name1\",{\"1\":{\"790\":1}}],[\"name以abc开头的id\",{\"1\":{\"595\":1}}],[\"namespace实际上修改了应用进程看待整个计算机\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"namespace=\",{\"1\":{\"807\":1,\"818\":1,\"825\":1,\"826\":1,\"845\":1,\"853\":1,\"856\":1,\"890\":2}}],[\"namespace\",{\"1\":{\"807\":1,\"818\":1,\"825\":1,\"826\":2,\"890\":1,\"1132\":1,\"1135\":1,\"1137\":1,\"1317\":1,\"1320\":1,\"1322\":1}}],[\"names\",{\"1\":{\"123\":3}}],[\"name\",{\"1\":{\"111\":5,\"123\":5,\"220\":3,\"223\":4,\"296\":1,\"306\":1,\"459\":2,\"489\":16,\"503\":4,\"510\":1,\"564\":1,\"568\":1,\"569\":7,\"574\":5,\"593\":2,\"595\":2,\"605\":4,\"618\":2,\"619\":2,\"621\":2,\"622\":1,\"624\":2,\"634\":4,\"635\":2,\"636\":4,\"717\":1,\"718\":2,\"790\":3,\"799\":4,\"800\":1,\"810\":5,\"818\":9,\"822\":4,\"826\":7,\"842\":4,\"845\":6,\"847\":7,\"848\":7,\"849\":10,\"852\":1,\"856\":1,\"888\":1,\"890\":3,\"907\":1,\"912\":2,\"918\":1,\"927\":1,\"950\":2,\"1049\":2,\"1131\":4,\"1133\":3,\"1134\":3,\"1173\":2,\"1250\":2,\"1316\":4,\"1318\":3,\"1319\":3,\"1350\":2,\"1392\":1,\"1402\":5,\"1418\":7,\"1494\":2,\"1507\":7}}],[\"nlog\",{\"1\":{\"424\":1,\"425\":1}}],[\"nlogn\",{\"1\":{\"412\":1,\"417\":2}}],[\"n+k\",{\"1\":{\"410\":1}}],[\"n+1\",{\"1\":{\"319\":1,\"320\":1}}],[\"n是准备存入数据数量\",{\"1\":{\"393\":2}}],[\"n²\",{\"1\":{\"339\":1}}],[\"ns\",{\"1\":{\"319\":1,\"883\":3}}],[\"nb\",{\"1\":{\"160\":1,\"229\":1}}],[\"nojekyll\",{\"1\":{\"974\":1}}],[\"now\",{\"1\":{\"818\":3,\"826\":3,\"849\":1,\"852\":1}}],[\"normalizer\",{\"1\":{\"493\":1}}],[\"norms\",{\"1\":{\"493\":1}}],[\"nonumberexception\",{\"1\":{\"892\":5,\"893\":3,\"894\":2}}],[\"non\",{\"1\":{\"406\":1,\"569\":1}}],[\"none\",{\"1\":{\"306\":1,\"666\":1,\"1173\":1,\"1350\":1}}],[\"noexceptionhandlingexample\",{\"1\":{\"200\":1}}],[\"noearlyreturnexample\",{\"1\":{\"190\":1}}],[\"noassertexample\",{\"1\":{\"199\":1}}],[\"nocommandexample\",{\"1\":{\"196\":1}}],[\"nofity\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"nofile\",{\"1\":{\"123\":1}}],[\"nofile就相应应该填写65535\",{\"1\":{\"123\":1}}],[\"nofunctionexample\",{\"1\":{\"195\":1}}],[\"no\",{\"1\":{\"194\":2,\"489\":1,\"493\":1,\"564\":2,\"625\":1,\"736\":1,\"892\":1,\"893\":2,\"894\":1}}],[\"nolookuptableexample\",{\"1\":{\"194\":1}}],[\"nosuchmethodexception\",{\"1\":{\"1410\":1}}],[\"nosql中存储的数据是kv形式\",{\"1\":{\"651\":1}}],[\"nosql\",{\"0\":{\"651\":1},\"1\":{\"1418\":2}}],[\"nostateexample\",{\"1\":{\"197\":1}}],[\"nostrategyexample\",{\"1\":{\"193\":1}}],[\"noswitchcaseexample\",{\"1\":{\"192\":1}}],[\"nokeygenerator\",{\"1\":{\"1133\":1,\"1318\":1}}],[\"nokey\",{\"1\":{\"160\":2}}],[\"noprint\",{\"1\":{\"160\":3}}],[\"nopush\",{\"1\":{\"123\":2}}],[\"notify\",{\"1\":{\"1057\":1,\"1255\":1,\"1446\":4}}],[\"notifyall\",{\"1\":{\"1057\":1,\"1255\":1,\"1446\":6}}],[\"notify或wait\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"notice\",{\"1\":{\"123\":2,\"1422\":1}}],[\"note\",{\"1\":{\"590\":1,\"1150\":1,\"1333\":1}}],[\"noternaryoperatorexample\",{\"1\":{\"191\":1}}],[\"notoriously\",{\"1\":{\"169\":1}}],[\"not\",{\"0\":{\"592\":1,\"651\":1},\"1\":{\"158\":2,\"306\":1,\"540\":1,\"541\":1,\"570\":3,\"589\":2,\"590\":2,\"598\":1,\"640\":1,\"687\":1,\"789\":6,\"799\":1,\"825\":1,\"842\":2,\"855\":1,\"858\":3,\"887\":6,\"1149\":1,\"1173\":1,\"1177\":1,\"1332\":1,\"1350\":1,\"1354\":1,\"1418\":1,\"1494\":3,\"1507\":1,\"1528\":1}}],[\"nodeid\",{\"1\":{\"1027\":1,\"1231\":1,\"1466\":3}}],[\"nodes\",{\"1\":{\"459\":2,\"1027\":1,\"1031\":1,\"1231\":1,\"1235\":1,\"1466\":3}}],[\"node01\",{\"1\":{\"459\":1}}],[\"node<k\",{\"1\":{\"1380\":7,\"1446\":1}}],[\"node<>\",{\"1\":{\"339\":5}}],[\"node<e>\",{\"1\":{\"339\":21}}],[\"node\",{\"0\":{\"470\":1},\"1\":{\"129\":1,\"320\":4,\"339\":4,\"342\":9,\"459\":3,\"469\":1,\"970\":1,\"1027\":1,\"1028\":7,\"1029\":4,\"1231\":1,\"1232\":7,\"1233\":4,\"1380\":1,\"1466\":5}}],[\"nodelay\",{\"1\":{\"123\":1}}],[\"nobody\",{\"1\":{\"123\":2}}],[\"nohup\",{\"1\":{\"111\":2,\"737\":1}}],[\"numpy\",{\"1\":{\"961\":1}}],[\"numkeys\",{\"1\":{\"670\":2}}],[\"num=a\",{\"1\":{\"598\":1}}],[\"num=20\",{\"1\":{\"591\":2}}],[\"num=100\",{\"1\":{\"594\":1}}],[\"num=10\",{\"1\":{\"591\":2}}],[\"num=0\",{\"1\":{\"589\":1}}],[\"num\",{\"1\":{\"406\":5,\"589\":3,\"592\":2,\"594\":1,\"598\":5,\"1028\":1,\"1232\":1}}],[\"nums\",{\"1\":{\"406\":3}}],[\"num2\",{\"1\":{\"306\":5}}],[\"num1\",{\"1\":{\"306\":8}}],[\"number>\",{\"1\":{\"1424\":1}}],[\"numberformat\",{\"1\":{\"882\":1}}],[\"numbers\",{\"1\":{\"190\":4}}],[\"number\",{\"1\":{\"123\":1,\"190\":4,\"191\":6,\"306\":6,\"430\":4,\"855\":1,\"856\":9,\"857\":5,\"858\":6,\"888\":1,\"890\":7,\"892\":1,\"893\":2,\"894\":1,\"1029\":1,\"1233\":1,\"1424\":2,\"1454\":1}}],[\"nu\",{\"1\":{\"111\":1}}],[\"nullpointerexception\",{\"1\":{\"1481\":4}}],[\"nullbean\",{\"1\":{\"1410\":1}}],[\"null键值处理\",{\"1\":{\"1406\":1}}],[\"null值在各list实现类中的处理方式\",{\"1\":{\"1404\":1}}],[\"null值\",{\"1\":{\"589\":1}}],[\"null与空字符串是同一回事\",{\"1\":{\"589\":1}}],[\"null对于sql的新手来说\",{\"1\":{\"589\":1}}],[\"nullable\",{\"1\":{\"569\":1,\"1410\":2}}],[\"null\",{\"0\":{\"487\":1,\"589\":1},\"1\":{\"89\":2,\"92\":4,\"93\":3,\"221\":1,\"320\":2,\"338\":8,\"339\":29,\"341\":1,\"342\":8,\"406\":2,\"487\":8,\"493\":3,\"564\":3,\"570\":3,\"589\":11,\"590\":2,\"611\":1,\"622\":1,\"640\":1,\"685\":1,\"711\":5,\"789\":6,\"799\":9,\"800\":6,\"822\":1,\"826\":1,\"847\":1,\"848\":1,\"855\":5,\"858\":14,\"887\":6,\"892\":1,\"894\":4,\"939\":4,\"1042\":1,\"1044\":1,\"1049\":1,\"1072\":1,\"1119\":1,\"1149\":2,\"1173\":6,\"1243\":1,\"1245\":1,\"1250\":1,\"1267\":1,\"1307\":1,\"1332\":2,\"1350\":6,\"1380\":10,\"1386\":18,\"1390\":1,\"1394\":2,\"1406\":1,\"1410\":6,\"1412\":1,\"1416\":1,\"1422\":4,\"1466\":1,\"1481\":5,\"1494\":1,\"1507\":4}}],[\"n\",{\"1\":{\"111\":6,\"123\":2,\"158\":4,\"218\":1,\"306\":10,\"317\":1,\"319\":4,\"320\":1,\"323\":2,\"339\":4,\"393\":4,\"401\":4,\"410\":4,\"417\":3,\"430\":3,\"566\":2,\"752\":4,\"1043\":3,\"1079\":1,\"1244\":3,\"1274\":1,\"1380\":2,\"1390\":6}}],[\"nginxstatus\",{\"1\":{\"123\":2}}],[\"nginx跟后端服务器连接超时时间\",{\"1\":{\"123\":1}}],[\"nginx支持同时设置多组的负载均衡\",{\"1\":{\"123\":1}}],[\"nginx的upstream目前支持4种方式的分配\",{\"1\":{\"123\":1}}],[\"nginx默认会用client\",{\"1\":{\"123\":1}}],[\"nginx\",{\"0\":{\"123\":1},\"1\":{\"102\":1,\"111\":1,\"123\":5,\"1093\":2,\"1286\":2}}],[\"ngnix\",{\"1\":{\"102\":1}}],[\"never\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"nested\",{\"1\":{\"502\":1,\"1177\":1,\"1354\":1}}],[\"needs\",{\"1\":{\"129\":1}}],[\"next指向旧表\",{\"1\":{\"1406\":1}}],[\"nextindex\",{\"1\":{\"1386\":6}}],[\"nextint\",{\"1\":{\"1062\":2,\"1260\":2}}],[\"nextid\",{\"1\":{\"441\":2}}],[\"nextlong\",{\"1\":{\"441\":1}}],[\"next\",{\"1\":{\"123\":1,\"339\":43,\"342\":17,\"638\":1,\"684\":1,\"687\":3,\"800\":1,\"1133\":1,\"1318\":1,\"1380\":8,\"1476\":5,\"1478\":1}}],[\"netty\",{\"0\":{\"987\":1,\"989\":1,\"990\":1,\"991\":1},\"1\":{\"987\":4,\"988\":3,\"989\":2,\"990\":6,\"991\":2},\"2\":{\"995\":1}}],[\"network\",{\"1\":{\"129\":1,\"459\":1}}],[\"netstat\",{\"1\":{\"107\":1}}],[\"net\",{\"1\":{\"98\":1,\"205\":1,\"208\":1,\"209\":2,\"277\":1,\"296\":2,\"297\":1,\"328\":1,\"441\":3,\"447\":3,\"478\":1,\"583\":1,\"722\":1,\"727\":1,\"731\":1,\"738\":1,\"751\":1,\"752\":1,\"791\":1,\"901\":1,\"902\":1,\"912\":1,\"939\":2,\"969\":1,\"980\":1,\"982\":2,\"987\":1,\"1061\":2,\"1062\":1,\"1064\":1,\"1150\":1,\"1176\":1,\"1259\":2,\"1260\":1,\"1262\":1,\"1333\":1,\"1353\":1,\"1380\":1,\"1382\":1,\"1384\":1,\"1386\":1,\"1388\":1,\"1390\":1,\"1394\":1,\"1396\":1,\"1398\":1,\"1400\":1,\"1402\":1,\"1404\":1,\"1406\":1,\"1408\":1,\"1410\":1,\"1412\":1,\"1414\":1,\"1416\":1,\"1418\":1,\"1420\":1,\"1422\":1,\"1424\":1,\"1426\":1,\"1428\":1,\"1430\":1,\"1432\":1,\"1434\":1,\"1436\":1,\"1438\":1,\"1440\":1,\"1446\":1,\"1448\":1,\"1450\":1,\"1452\":1,\"1454\":1,\"1456\":1,\"1458\":1,\"1460\":1,\"1462\":1,\"1464\":1,\"1466\":1,\"1468\":1,\"1470\":1,\"1474\":1,\"1476\":1,\"1478\":2,\"1481\":1,\"1494\":1,\"1502\":1,\"1507\":7,\"1512\":2,\"1515\":2,\"1525\":1}}],[\"newproxyinstance\",{\"1\":{\"1474\":2}}],[\"newtopic\",{\"1\":{\"1440\":4}}],[\"newtab\",{\"1\":{\"1380\":2}}],[\"newtable\",{\"1\":{\"1380\":2,\"1386\":4}}],[\"newtable的长度是oldtable的两倍\",{\"1\":{\"1380\":1}}],[\"newentry\",{\"1\":{\"1406\":3}}],[\"newcap\",{\"1\":{\"1380\":1}}],[\"newcapacity\",{\"1\":{\"1380\":2,\"1386\":5}}],[\"newnode\",{\"1\":{\"1380\":1}}],[\"newratio=4\",{\"1\":{\"1108\":1,\"1299\":1}}],[\"newinstance\",{\"1\":{\"1050\":3,\"1251\":3,\"1468\":4}}],[\"news\",{\"1\":{\"111\":1,\"473\":1,\"718\":2}}],[\"new\",{\"1\":{\"88\":1,\"89\":1,\"92\":1,\"93\":2,\"199\":1,\"223\":1,\"338\":7,\"339\":9,\"341\":2,\"342\":7,\"390\":5,\"405\":3,\"406\":4,\"413\":2,\"417\":1,\"430\":2,\"441\":4,\"605\":2,\"636\":2,\"711\":2,\"755\":3,\"790\":3,\"809\":1,\"810\":1,\"820\":6,\"826\":5,\"829\":2,\"849\":2,\"850\":1,\"893\":7,\"894\":6,\"895\":1,\"978\":2,\"1001\":3,\"1042\":3,\"1043\":1,\"1044\":4,\"1049\":2,\"1050\":3,\"1056\":1,\"1057\":1,\"1061\":6,\"1062\":6,\"1064\":3,\"1177\":1,\"1210\":3,\"1243\":3,\"1244\":1,\"1245\":4,\"1250\":2,\"1251\":3,\"1254\":1,\"1255\":1,\"1259\":6,\"1260\":6,\"1262\":3,\"1354\":1,\"1380\":1,\"1386\":5,\"1390\":5,\"1392\":3,\"1394\":6,\"1404\":7,\"1406\":5,\"1408\":3,\"1410\":2,\"1424\":7,\"1440\":5,\"1442\":2,\"1448\":5,\"1450\":2,\"1462\":2,\"1466\":1,\"1474\":2,\"1478\":2,\"1494\":3}}],[\"懒加载+线程安全\",{\"0\":{\"91\":1}}],[\"懒加载显然是不能保证线程安全的\",{\"1\":{\"89\":1}}],[\"懒加载\",{\"0\":{\"89\":1},\"1\":{\"89\":1}}],[\"但你解释的很通俗易懂\",{\"1\":{\"1424\":1}}],[\"但你一定知道你是怎么亏的\",{\"1\":{\"263\":1}}],[\"但有一定了解\",{\"1\":{\"1412\":1}}],[\"但只要把这些要点都串联起来\",{\"1\":{\"1410\":1}}],[\"但需要权衡系统复杂性\",{\"1\":{\"1408\":1}}],[\"但总体来说\",{\"1\":{\"1406\":1,\"1436\":1}}],[\"但我相信这会让我的java基础更加扎实\",{\"1\":{\"1406\":1}}],[\"但我对其扩容\",{\"1\":{\"1406\":1}}],[\"但我还需要继续学习其更深层次的用法与理论知识\",{\"1\":{\"1400\":1}}],[\"但迭代顺序不定\",{\"1\":{\"1406\":1}}],[\"但和list一样\",{\"1\":{\"1406\":1}}],[\"但底层数据结构不同\",{\"1\":{\"1404\":1}}],[\"但开销大\",{\"1\":{\"1398\":1}}],[\"但开启又会加大索引体积\",{\"1\":{\"493\":1}}],[\"但过于精细\",{\"1\":{\"1398\":1}}],[\"但已大大超越\",{\"1\":{\"1398\":1}}],[\"但已远非传统意义上的\",{\"1\":{\"1398\":1}}],[\"但g1在并发标记的基础上\",{\"1\":{\"1398\":1}}],[\"但它展示了broker的基本工作原理\",{\"1\":{\"1444\":1}}],[\"但它只能在\",{\"1\":{\"1424\":1}}],[\"但它是线程安全的\",{\"1\":{\"1404\":1,\"1406\":1}}],[\"但它的优点远远超过了缺点\",{\"1\":{\"1436\":1}}],[\"但它的算法思想和理念仍十分值得我们学习\",{\"1\":{\"1396\":1}}],[\"但它的并发标记清除思想影响了后续的垃圾回收算法\",{\"1\":{\"1396\":1}}],[\"但它同样也可以在其它操作系统环境中编译运行\",{\"1\":{\"139\":1}}],[\"但由于算法的限制\",{\"1\":{\"1396\":1}}],[\"但由于同一个表被分配在不同的数据库\",{\"1\":{\"581\":1}}],[\"但空间可能不足以分配较大对象\",{\"1\":{\"1396\":1}}],[\"但cms算法本身的思想仍然值得我们学习\",{\"1\":{\"1396\":1}}],[\"但没有任何一个对象被外部强引用\",{\"1\":{\"1394\":1}}],[\"但没有将表分布到不同的服务器上\",{\"1\":{\"580\":1}}],[\"但会产生碎片\",{\"1\":{\"1394\":1}}],[\"但作为最基本和高效的实现\",{\"1\":{\"1380\":1}}],[\"但hashmap的内容还是非常之广博\",{\"1\":{\"1380\":1}}],[\"但这正是我成长为一名资深java工程师所必须经历的阶段\",{\"1\":{\"1404\":1}}],[\"但这些缺点都可以通过选择其他map实现或辅助结构来补充\",{\"1\":{\"1380\":1}}],[\"但这种操作出现的几率并不高\",{\"1\":{\"696\":1}}],[\"但相比于前两者性能较低\",{\"1\":{\"1380\":1}}],[\"但您可以使用setter注入配置循环依赖关系\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"但两者之间的区别是\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"但其实是事务\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"但磁盘的顺序读写性能却很高\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"但也支持其他语言的项目\",{\"1\":{\"1520\":1}}],[\"但也存在一定的缺陷\",{\"1\":{\"1396\":1}}],[\"但也远比并发标记阶段的时间短\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"但也是一个方案\",{\"1\":{\"1064\":1,\"1262\":1}}],[\"但也有client\",{\"1\":{\"123\":1}}],[\"但加锁和解锁需要手动进行\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"但非常灵活\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"但可以通过带布尔值的构造函数要求使用公平锁\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"但可能导致其他事务长时间等待\",{\"1\":{\"628\":1}}],[\"但还没有调用start\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"但编译器编译完带有泛型的java程序后\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"但即使大多数可用\",{\"1\":{\"1035\":1,\"1239\":1}}],[\"但进程还是可以不受控的访问系统资源\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"但查找时不方便识别\",{\"1\":{\"979\":1}}],[\"但查询条件只使用了name\",{\"1\":{\"564\":1}}],[\"但如果使用mybatis的dao接口动态代理\",{\"1\":{\"825\":1}}],[\"但如果要开发像\",{\"1\":{\"72\":1}}],[\"但对于运行无效\",{\"1\":{\"769\":1}}],[\"但对桶的使用方法上有明显差异\",{\"1\":{\"423\":1}}],[\"但每个节点的成员对象必须是唯一\",{\"1\":{\"692\":1}}],[\"但每个表唯一\",{\"1\":{\"436\":1}}],[\"但分数\",{\"1\":{\"670\":1}}],[\"但后者更易阅读\",{\"1\":{\"665\":1}}],[\"但排他锁\",{\"1\":{\"638\":1}}],[\"但仍然存在一定的冲突可能\",{\"1\":{\"629\":1}}],[\"但innodb会根据需要自动在页级别上应用锁\",{\"1\":{\"624\":1}}],[\"但在\",{\"1\":{\"1476\":1}}],[\"但在算法和实现上都已经有了重大创新\",{\"1\":{\"1398\":1}}],[\"但在jdk8之后\",{\"1\":{\"1388\":1}}],[\"但在并发量高的场合中\",{\"1\":{\"657\":1}}],[\"但在高并发环境下可能导致其他事务长时间等待\",{\"1\":{\"624\":1}}],[\"但在分配之后并不马上合并回一个数组中\",{\"1\":{\"428\":1}}],[\"但同时也降低了\",{\"0\":{\"600\":1}}],[\"但效果可能不如\",{\"1\":{\"574\":1}}],[\"但不能传\",{\"1\":{\"1424\":1}}],[\"但不在构造器中注入依赖\",{\"1\":{\"1412\":1}}],[\"但不保证可用性\",{\"1\":{\"1197\":1,\"1370\":1}}],[\"但不够灵活\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"但不同的是wait方法从一个对象调用\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"但不拦截\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"但不会报错\",{\"1\":{\"980\":1}}],[\"但不会把存储从存储列表中删除\",{\"1\":{\"979\":1}}],[\"但不锁定该范围内的任何具体行\",{\"1\":{\"621\":1}}],[\"但不允许其他事务修改或删除这些行\",{\"1\":{\"618\":1}}],[\"但不支持b\",{\"1\":{\"561\":1}}],[\"但不得不占磁盘上4kb的空间\",{\"1\":{\"325\":1}}],[\"但实际上却变动过了\",{\"1\":{\"1476\":1}}],[\"但实际上是存储了\",{\"1\":{\"504\":1}}],[\"但实际测试时发现不同\",{\"1\":{\"162\":1}}],[\"但一定要等到事务提交后\",{\"1\":{\"436\":1}}],[\"但桶排序并不是\",{\"1\":{\"401\":1}}],[\"但当数据非常大的时候它们就无能为力了\",{\"1\":{\"319\":1}}],[\"但数学的魅力就在于它总能以意想不到的方式展现其美丽\",{\"1\":{\"303\":1}}],[\"但受限于云服务器价格\",{\"1\":{\"237\":1}}],[\"但是很多同学还没用过这个工具\",{\"1\":{\"1506\":1}}],[\"但是由于使用起来配置较多\",{\"1\":{\"1506\":1}}],[\"但是由于两个\",{\"1\":{\"440\":1}}],[\"但是又希望它们被写入分区怎么办呢\",{\"1\":{\"1454\":1}}],[\"但是又不破坏分辨率\",{\"1\":{\"151\":1}}],[\"但是具体是什么意思呢\",{\"1\":{\"1454\":1}}],[\"但是具体怎么实现的呢\",{\"1\":{\"1452\":1}}],[\"但是内存是有限的\",{\"1\":{\"1430\":1}}],[\"但是redis会尽力保证数据的一致性\",{\"1\":{\"1426\":1}}],[\"但是其他线程并不能立即看到这个修改\",{\"1\":{\"1382\":1}}],[\"但是其实背后是多台机器构成的集群\",{\"1\":{\"170\":1}}],[\"但是细节的描述更能体现你的知识底蕴\",{\"1\":{\"1195\":1,\"1368\":1}}],[\"但是经常\",{\"1\":{\"1190\":1,\"1365\":1}}],[\"但是数据更容易丢失\",{\"1\":{\"1158\":1,\"1338\":1}}],[\"但是三者有一些差别\",{\"1\":{\"1147\":1,\"1330\":1}}],[\"但是还未提交\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"但是还没有达到要求\",{\"1\":{\"580\":1}}],[\"但是新的\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"但是新增字段被丢弃\",{\"1\":{\"484\":1}}],[\"但是网络延迟\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"但是因为长生命周期对象持有它的引用而导致不能被回收\",{\"1\":{\"1102\":1,\"1293\":1}}],[\"但是gc又不能回收他们的情况\",{\"1\":{\"1102\":1,\"1293\":1}}],[\"但是cms也有一些缺点\",{\"1\":{\"1396\":1}}],[\"但是cookie是可以在客户端禁用的\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"但是client\",{\"1\":{\"123\":1}}],[\"但是本质上还是串行的\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"但是操作3并不依赖于操作2\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"但是也引入一个新问题\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"但是也有很多要点\",{\"1\":{\"980\":1}}],[\"但是性能更好\",{\"1\":{\"1046\":1,\"1247\":1}}],[\"但是当你取出来的时候\",{\"1\":{\"1424\":1}}],[\"但是当我们要用到\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"但是当使用select\",{\"1\":{\"638\":1}}],[\"但是一些特殊场景\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"但是一旦leader服务器挂了\",{\"1\":{\"183\":1}}],[\"但是方法的参数不同\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"但是会在结果中被过滤掉\",{\"1\":{\"1033\":1,\"1237\":1}}],[\"但是会在\",{\"1\":{\"1033\":1,\"1237\":1}}],[\"但是会执行字符串拼接操作\",{\"1\":{\"223\":1}}],[\"但是使用足够大的\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"但是读取的频率很高\",{\"1\":{\"1000\":1,\"1209\":1}}],[\"但是要谈谈优缺点\",{\"1\":{\"1075\":1,\"1270\":1}}],[\"但是要去修复bug\",{\"1\":{\"979\":1}}],[\"但是要注意分区后可能影响写入性能\",{\"1\":{\"572\":1}}],[\"但是这属于确实没查到数据\",{\"1\":{\"1494\":1}}],[\"但是这是\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"但是这个时候大并发的请求可能会瞬间\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"但是这个例子属于单机模式\",{\"1\":{\"170\":1}}],[\"但是这位朋友这为一个外行人\",{\"1\":{\"969\":1}}],[\"但是如果你不等待确认\",{\"1\":{\"1452\":1}}],[\"但是如果消费者消费出错\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"但是如果\",{\"1\":{\"1119\":1,\"1120\":1,\"1307\":1,\"1308\":1}}],[\"但是如果被除数是2的幂次方\",{\"1\":{\"1080\":1,\"1275\":1}}],[\"但是如果调用线程的join方法其实已经失去了并行的意义\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"但是如果需要统计有增有减的指标需要用gauge\",{\"1\":{\"946\":1}}],[\"但是如果判断数据存在\",{\"1\":{\"387\":1}}],[\"但是你的二维码依然存在\",{\"1\":{\"934\":1,\"935\":1}}],[\"但是你了解\",{\"1\":{\"907\":1}}],[\"但是你要能注明出处\",{\"1\":{\"114\":1}}],[\"但是实际使用场景下\",{\"1\":{\"834\":1}}],[\"但是实际使用中\",{\"1\":{\"440\":1}}],[\"但是大家要注意一点\",{\"1\":{\"791\":1}}],[\"但是肯定不是最优解\",{\"1\":{\"786\":1}}],[\"但是并没有讲解非常详细的文章\",{\"1\":{\"755\":1}}],[\"但是用了\",{\"1\":{\"722\":1}}],[\"但是商品只剩下一件\",{\"1\":{\"616\":1}}],[\"但是第一个语句将插入一个\",{\"1\":{\"589\":1}}],[\"但是我们还是建议尽量避免使用字段为\",{\"1\":{\"589\":1}}],[\"但是我们生成的id一般都使用整数\",{\"1\":{\"440\":1}}],[\"但是它们的作用不同\",{\"1\":{\"1480\":1}}],[\"但是它们的实现方式和使用场景有所不同\",{\"1\":{\"1390\":1}}],[\"但是它的性能开销比较小\",{\"1\":{\"1480\":1}}],[\"但是它的性能开销比较大\",{\"1\":{\"1480\":1}}],[\"但是它是不推荐的\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"但是它需要解决跨库带来的所有复杂问题\",{\"1\":{\"583\":1}}],[\"但是它不适合按字母顺序排序人名\",{\"1\":{\"410\":1}}],[\"但是依然没有解决单表数据量过大的问题\",{\"1\":{\"580\":1}}],[\"但是范围查询和排序操作时\",{\"1\":{\"562\":1}}],[\"但是主键索引一张表只能有一个\",{\"1\":{\"559\":1}}],[\"但是目前多数编辑器会强制让写\",{\"1\":{\"541\":1}}],[\"但是可以说\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"但是可以沿磁盘半径方向运动\",{\"1\":{\"327\":1}}],[\"但是可能还是有一些问题\",{\"1\":{\"491\":1}}],[\"但是非常有助于理解\",{\"1\":{\"428\":1}}],[\"但是有些时候不得不持有多个资源\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"但是有一点\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"但是有一个要求\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"但是有一种特殊的排序算法叫计数排序\",{\"1\":{\"412\":1}}],[\"但是有logo很烦\",{\"1\":{\"157\":1}}],[\"但是在处理远程用户时\",{\"1\":{\"1440\":1}}],[\"但是在使用它之前\",{\"1\":{\"1426\":1}}],[\"但是在每个分区下的消息是有序的\",{\"1\":{\"1119\":1,\"1307\":1}}],[\"但是在高并发下\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"但是在系统中要以外部jar包的形式提供\",{\"1\":{\"769\":1}}],[\"但是在布隆过滤器中\",{\"1\":{\"386\":1}}],[\"但是在分布式系统中这种方式就不能使用blockingqueue来实现了\",{\"1\":{\"181\":1}}],[\"但是循环队列我们就不能单纯的进行自增\",{\"1\":{\"341\":1}}],[\"但是文件系统及数据库系统普遍采用b\",{\"1\":{\"324\":1}}],[\"但是选择合适的请求方式可以提升开发效率\",{\"1\":{\"206\":1}}],[\"但是zookeeper可以实现\",{\"1\":{\"181\":1}}],[\"但是对于部分维护老代码的工程师来说\",{\"1\":{\"1083\":1}}],[\"但是对于跨进程\",{\"1\":{\"180\":1}}],[\"但是对其中maven不了解\",{\"1\":{\"761\":1}}],[\"但是对数量级较小的整数排序很实用\",{\"1\":{\"409\":1}}],[\"但是对象还没有使用时就被创建\",{\"1\":{\"88\":1}}],[\"但是别把cpu跑到100\",{\"1\":{\"123\":1}}],[\"但是nginx分配请求并不是那么均匀\",{\"1\":{\"123\":1}}],[\"但是真正在生产环境中怎么用确一直不被大多数人掌握\",{\"1\":{\"93\":1}}],[\"但是\",{\"1\":{\"91\":1,\"107\":1,\"263\":1,\"270\":1,\"386\":1,\"392\":1,\"410\":1,\"438\":1,\"504\":1,\"565\":1,\"603\":1,\"604\":1,\"1033\":1,\"1088\":1,\"1102\":1,\"1195\":1,\"1237\":1,\"1281\":1,\"1293\":1,\"1368\":1,\"1382\":3,\"1428\":1,\"1442\":1}}],[\"淦\",{\"1\":{\"87\":1,\"1468\":1}}],[\"下次带笔记本过来\",{\"1\":{\"1478\":1}}],[\"下限的使用场景是当需要添加t的父类型对象时\",{\"1\":{\"1424\":1}}],[\"下限的影响\",{\"1\":{\"401\":1}}],[\"下限是\",{\"1\":{\"1424\":1}}],[\"下一个要清理的键值对的索引\",{\"1\":{\"1386\":1}}],[\"下一篇docker进阶面试题\",{\"1\":{\"1013\":1}}],[\"下一篇\",{\"1\":{\"18\":1}}],[\"下创建\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"下的文件\",{\"1\":{\"1392\":1}}],[\"下的\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"下的方法\",{\"1\":{\"752\":1}}],[\"下降为o\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"下篇单独写一篇图解\",{\"1\":{\"980\":1}}],[\"下篇一起上\",{\"1\":{\"671\":1}}],[\"下午1\",{\"1\":{\"979\":1}}],[\"下标从0开始\",{\"1\":{\"667\":1}}],[\"下类似\",{\"1\":{\"661\":1}}],[\"下例中\",{\"1\":{\"564\":1}}],[\"下留言讨论\",{\"1\":{\"561\":1}}],[\"下文做详细讲解\",{\"1\":{\"588\":1}}],[\"下文提到了很多\",{\"1\":{\"513\":1}}],[\"下文会提及单例的演变过程\",{\"1\":{\"87\":1}}],[\"下图作为参考\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"下图回复\",{\"1\":{\"649\":1}}],[\"下图是一个相对复杂些的倒排索引\",{\"1\":{\"478\":1}}],[\"下图\",{\"1\":{\"417\":1}}],[\"下期见\",{\"1\":{\"328\":1}}],[\"下期继续\",{\"1\":{\"108\":1}}],[\"下面问一点深入的东西\",{\"1\":{\"1480\":1}}],[\"下面会详细解释\",{\"1\":{\"1416\":1}}],[\"下面举了一个简单的sql注入案例\",{\"1\":{\"1131\":1,\"1316\":1}}],[\"下面给出它们的例子\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"下面简称为hll\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"下面的每一条都可以当做调优的一部分\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"下面的查询也将导致全表扫描\",{\"0\":{\"593\":1}}],[\"下面开始业务层编写\",{\"1\":{\"892\":1}}],[\"下面通过maven命令\",{\"1\":{\"766\":1}}],[\"下面这个结构\",{\"1\":{\"1494\":1}}],[\"下面这些操作不会触发类的初始化\",{\"1\":{\"1392\":1}}],[\"下面这段代码是integer的valueof方法的具体实现\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"下面这段代码的输出结果是什么\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"下面这几种调优手段一定要了解懂\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"下面这几个痛点\",{\"1\":{\"763\":1}}],[\"下面这三个你可能不太熟悉\",{\"1\":{\"720\":1}}],[\"下面让我用伪代码来描述一下我们的程序\",{\"1\":{\"755\":1}}],[\"下面一幅图\",{\"1\":{\"755\":1}}],[\"下面分析一种比较常见的方式\",{\"1\":{\"538\":1}}],[\"下面我们聊点有深度的\",{\"1\":{\"1476\":1}}],[\"下面我们通过具体实例来进行说明\",{\"1\":{\"478\":1}}],[\"下面我的写文章就是要把b树\",{\"1\":{\"315\":1}}],[\"下面步骤介绍布局虽然不好看\",{\"1\":{\"428\":1}}],[\"下面直接给出公式\",{\"1\":{\"392\":1}}],[\"下面继续\",{\"1\":{\"382\":1}}],[\"下面几张图可以帮你理解最小存储单元\",{\"1\":{\"325\":1}}],[\"下面先介绍内存和磁盘存取原理\",{\"1\":{\"324\":1}}],[\"下面结合数据库深入了解\",{\"1\":{\"317\":1}}],[\"下面是\",{\"1\":{\"1382\":3,\"1386\":1}}],[\"下面是java线程的6种状态\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"下面是一段示例代码\",{\"1\":{\"1440\":4}}],[\"下面是一个使用\",{\"1\":{\"1480\":1}}],[\"下面是一个简单的示例代码\",{\"1\":{\"1382\":1,\"1386\":1}}],[\"下面是一个\",{\"1\":{\"887\":1}}],[\"下面是一篇简单版本的布隆过滤器\",{\"1\":{\"390\":1}}],[\"下面是为了解决冲突依赖内容\",{\"1\":{\"769\":1}}],[\"下面是官方的bench\",{\"1\":{\"654\":1}}],[\"下面是队列的操作示意图\",{\"1\":{\"341\":1}}],[\"下面是站长的唠叨\",{\"1\":{\"270\":1}}],[\"下面是server虚拟主机的配置\",{\"1\":{\"123\":1}}],[\"下载指定版本的镜像\",{\"1\":{\"1019\":1,\"1225\":1}}],[\"下载镜像\",{\"1\":{\"1019\":1,\"1225\":1}}],[\"下载maven\",{\"1\":{\"764\":1}}],[\"下载地址\",{\"1\":{\"660\":1,\"764\":2,\"950\":1,\"951\":1}}],[\"下载和elasticsearch版本一致\",{\"1\":{\"465\":1,\"466\":1}}],[\"下载了某个网站的视频\",{\"1\":{\"157\":1}}],[\"下载\",{\"0\":{\"734\":1},\"1\":{\"142\":1,\"458\":1,\"461\":1,\"465\":1,\"466\":1,\"562\":1,\"660\":1,\"962\":1}}],[\"下\",{\"0\":{\"1196\":1,\"1369\":1},\"1\":{\"125\":1,\"465\":1,\"466\":1,\"883\":1}}],[\"并构建一个名为\",{\"1\":{\"1515\":1}}],[\"并监听连接事件\",{\"1\":{\"1478\":1}}],[\"并绑定到指定的端口\",{\"1\":{\"1478\":1}}],[\"并输出日志记录信息\",{\"1\":{\"1474\":1}}],[\"并动态地创建代理类和代理对象\",{\"1\":{\"1474\":1}}],[\"并等待它们的确认\",{\"1\":{\"1470\":1}}],[\"并记录下关键词出现的文档编号\",{\"1\":{\"1464\":1}}],[\"并插入了一篇文档\",{\"1\":{\"1456\":1}}],[\"并更新序列号\",{\"1\":{\"1454\":1}}],[\"并更新到缓存\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"并保证消息的可靠传递\",{\"1\":{\"1444\":1}}],[\"并保存数据\",{\"1\":{\"405\":1}}],[\"并从每个分区中拉取消息\",{\"1\":{\"1442\":1}}],[\"并从运行时常量池中移除这个类的符号引用\",{\"1\":{\"1392\":1}}],[\"并设置分区数为\",{\"1\":{\"1440\":1}}],[\"并替换为上限\",{\"1\":{\"1424\":1}}],[\"并开始解析aof文件\",{\"1\":{\"1420\":1}}],[\"并追加到aof文件中\",{\"1\":{\"1420\":1}}],[\"并把响应返回给客户端\",{\"1\":{\"1414\":1}}],[\"并把允许入队的一端称为队尾\",{\"1\":{\"340\":1}}],[\"并最终返回响应\",{\"1\":{\"1414\":1}}],[\"并最终返回给客户端\",{\"1\":{\"1087\":1,\"1280\":1}}],[\"并返回true\",{\"1\":{\"1428\":1}}],[\"并返回\",{\"1\":{\"1414\":1}}],[\"并进行优化\",{\"1\":{\"1408\":1}}],[\"并和其他类保持一致性\",{\"1\":{\"1392\":1}}],[\"并为之创建一个class对象\",{\"1\":{\"1392\":1}}],[\"并实现了\",{\"1\":{\"1390\":1}}],[\"并实现里面的方法\",{\"1\":{\"893\":1}}],[\"并根据需要重写\",{\"1\":{\"1384\":1}}],[\"并放入newtable对应的桶中\",{\"1\":{\"1380\":1}}],[\"并会重新计算每个节点的hash值和索引位置\",{\"1\":{\"1380\":1}}],[\"并会增加存储开销\",{\"0\":{\"601\":1}}],[\"并基于以上条件\",{\"1\":{\"1187\":1,\"1362\":1}}],[\"并抛出a\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"并验证\",{\"1\":{\"1094\":1,\"1287\":1}}],[\"并行\",{\"1\":{\"1064\":1,\"1262\":1}}],[\"并行分区的布隆过滤器\",{\"1\":{\"396\":1}}],[\"并睡眠一小段时间\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"并阻塞\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"并以轮询的方式与这些地址进行通信\",{\"1\":{\"1032\":1,\"1236\":1}}],[\"并删除那些旧的小段\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"并定义了用于在该链上传播入站\",{\"1\":{\"991\":1}}],[\"并定期审查和清理不再需要的索引\",{\"1\":{\"573\":1}}],[\"并没有实现真正意义上的异步\",{\"1\":{\"988\":1}}],[\"并没有内部对象的概念\",{\"1\":{\"503\":1}}],[\"并推送到远端\",{\"1\":{\"976\":1}}],[\"并初始化数据\",{\"1\":{\"887\":1}}],[\"并覆盖已读取的同名属性\",{\"1\":{\"829\":2}}],[\"并执行sql\",{\"0\":{\"810\":1}}],[\"并创建webapp目录放置web资源文件\",{\"1\":{\"767\":1}}],[\"并用该数据结构提供基数统计的功能\",{\"1\":{\"722\":1}}],[\"并非什么新的技术点\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"并非\",{\"1\":{\"722\":1}}],[\"并集\",{\"1\":{\"719\":1}}],[\"并将方法的调用转发到\",{\"1\":{\"1474\":1}}],[\"并将方法的调用转发到指定的处理器上\",{\"1\":{\"1474\":3}}],[\"并将其加载到内存中\",{\"1\":{\"1474\":1}}],[\"并将其作为参考\",{\"1\":{\"1466\":1}}],[\"并将其附加到消息中\",{\"1\":{\"1454\":1}}],[\"并将最小的节点作为主节点\",{\"1\":{\"1466\":1}}],[\"并将自己的id和版本号发送给zookeeper\",{\"1\":{\"1466\":1}}],[\"并将结果合并返回给用户\",{\"1\":{\"1460\":1}}],[\"并将每个分片复制到多个节点上\",{\"1\":{\"1458\":1}}],[\"并将键值对迁移到新的节点上\",{\"1\":{\"1426\":1}}],[\"并将命令路由到相应的节点上进行处理\",{\"1\":{\"1426\":1}}],[\"并将写命令同步给从服务器\",{\"1\":{\"1422\":1}}],[\"并将锁分配给它\",{\"1\":{\"1390\":1}}],[\"并将存活的对象移动到survivor区1\",{\"1\":{\"1388\":1}}],[\"并将线程增加到与lockobj相关的\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"并将内容刷新到磁盘\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"并将对应修改应用到当前的工作目录下\",{\"1\":{\"979\":1}}],[\"并将它的值设置为\",{\"1\":{\"688\":1}}],[\"并将\",{\"1\":{\"682\":1}}],[\"并将该元素添加到另一个列表并返回\",{\"1\":{\"667\":1}}],[\"并将该节点的子节点分割成\",{\"1\":{\"319\":1}}],[\"并存储在新的\",{\"1\":{\"670\":1}}],[\"并增加版本号\",{\"1\":{\"642\":1}}],[\"并防止其他事务的干扰\",{\"1\":{\"638\":1}}],[\"并加上相应的行锁或共享锁\",{\"1\":{\"638\":1}}],[\"并加绿色边框\",{\"1\":{\"157\":1}}],[\"并提供高可用性和容错性\",{\"1\":{\"1470\":1}}],[\"并提供动态扩容机制来保证高效插入与查询\",{\"1\":{\"1406\":1}}],[\"并提供常见的拦截器\",{\"1\":{\"1168\":1,\"1345\":1}}],[\"并提供多种语言的api\",{\"1\":{\"652\":1}}],[\"并提供一个全局访问点\",{\"1\":{\"87\":1}}],[\"并提高系统的整体性能\",{\"1\":{\"637\":1}}],[\"并发度低\",{\"1\":{\"1446\":1}}],[\"并发度很高\",{\"1\":{\"1446\":1}}],[\"并发情况下\",{\"1\":{\"1446\":1}}],[\"并发和增量式回收\",{\"1\":{\"1398\":1}}],[\"并发执行时\",{\"1\":{\"1396\":1}}],[\"并发时会对程序性能产生一定影响\",{\"1\":{\"1396\":1}}],[\"并发重置\",{\"1\":{\"1396\":1,\"1398\":1}}],[\"并发清理\",{\"1\":{\"1394\":1,\"1398\":1}}],[\"并发清除\",{\"1\":{\"1107\":1,\"1298\":1,\"1396\":1}}],[\"并发回收\",{\"1\":{\"1394\":1}}],[\"并发标记的\",{\"1\":{\"1396\":1}}],[\"并发标记清除\",{\"1\":{\"1394\":1}}],[\"并发标记\",{\"1\":{\"1107\":1,\"1298\":1,\"1394\":1,\"1396\":1,\"1398\":1}}],[\"并发标记阶段与用户线程一起运行\",{\"1\":{\"1396\":1}}],[\"并发标记阶段\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"并发送请求给同样处理查询阶段的分片副本\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"并发的场景下\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"并发量不大的场景可以使用数据库的悲观锁\",{\"1\":{\"657\":1}}],[\"并发量高时如果每次都请求数据库操作无疑是种挑战和压力\",{\"1\":{\"657\":1}}],[\"并发性\",{\"1\":{\"626\":1,\"627\":1,\"628\":1,\"629\":1,\"630\":1}}],[\"并发性更好\",{\"1\":{\"624\":1}}],[\"并发控制\",{\"1\":{\"616\":1}}],[\"并确保引用的数据的完整性\",{\"1\":{\"623\":1}}],[\"并说明如何检测和修复索引碎片化\",{\"0\":{\"574\":1}}],[\"并说明全文索引的使用场景\",{\"0\":{\"570\":1}}],[\"并通过节点之间的指针进行查找\",{\"1\":{\"562\":1}}],[\"并通过\",{\"1\":{\"503\":1,\"664\":1}}],[\"并支持\",{\"1\":{\"453\":1}}],[\"并同时满足堆积的性质\",{\"1\":{\"417\":1}}],[\"并移动到已排序集合中\",{\"1\":{\"404\":1}}],[\"并不简单归类\",{\"1\":{\"1398\":1}}],[\"并不连续\",{\"1\":{\"1396\":1}}],[\"并不会将这些失效的分区迁移到其他可用的\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"并不会释放他所持有的所有对象锁\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"并不能保证同一时刻所有replica\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"并不能保证全局有序\",{\"1\":{\"1119\":1,\"1307\":1}}],[\"并不能直接交给底层操作系统去执行\",{\"1\":{\"1100\":1,\"1291\":1}}],[\"并不是真的停止线程\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"并不是所有索引对查询都有效\",{\"0\":{\"599\":1}}],[\"并不是很难\",{\"1\":{\"107\":1}}],[\"并不适用于计数排序\",{\"1\":{\"414\":2}}],[\"并不存在元素的比较和交换操作\",{\"1\":{\"403\":1}}],[\"并使来自目标\",{\"1\":{\"382\":1}}],[\"并使用分布式写入协调器来确保数据的一致性\",{\"1\":{\"1470\":1}}],[\"并使用consumer\",{\"1\":{\"1448\":1}}],[\"并使用producer\",{\"1\":{\"1448\":1}}],[\"并使用\",{\"1\":{\"126\":1,\"496\":1,\"979\":1,\"1468\":5}}],[\"并查集\",{\"0\":{\"368\":1}}],[\"并调用成功\",{\"1\":{\"296\":1}}],[\"并在发生冲突时重试\",{\"1\":{\"1476\":1}}],[\"并在项目中运用的更加娴熟\",{\"1\":{\"1476\":1}}],[\"并在\",{\"1\":{\"1474\":1}}],[\"并在消费消息时按照偏移量的顺序进行消费\",{\"1\":{\"1442\":1}}],[\"并在多个broker上创建副本来实现可靠性\",{\"1\":{\"1432\":1}}],[\"并在两个线程中分别设置了不同的变量值\",{\"1\":{\"1386\":1}}],[\"并在任务完成后回收线程\",{\"1\":{\"1384\":1}}],[\"并在一个线程中修改它的值\",{\"1\":{\"1382\":1}}],[\"并在实际工作中发挥其优势\",{\"1\":{\"1380\":1}}],[\"并在等待获取其他事务持有的资源\",{\"1\":{\"625\":1}}],[\"并在事务提交时释放自增锁\",{\"1\":{\"622\":1}}],[\"并在业务低峰时段进行\",{\"1\":{\"574\":1}}],[\"并在相应的流部分中报告\",{\"1\":{\"160\":1}}],[\"并在逐步完善中\",{\"1\":{\"1\":1}}],[\"并能将其转化为流的开源计算机程序\",{\"1\":{\"139\":1}}],[\"并且之后更新的所有视频和源码都可以获取观看\",{\"1\":{\"1492\":1}}],[\"并且需要动态地创建代理对象\",{\"1\":{\"1474\":1}}],[\"并且不会写入分区\",{\"1\":{\"1454\":1}}],[\"并且不会将其写入分区\",{\"1\":{\"1454\":1}}],[\"并且不可以重复发送\",{\"1\":{\"727\":1}}],[\"并且不可以被搜索\",{\"1\":{\"500\":1}}],[\"并且合理处理未确认的消息\",{\"1\":{\"1452\":1}}],[\"并且文件会变得越来越大\",{\"1\":{\"1420\":1}}],[\"并且设置这个键值对的过期时间为seconds秒\",{\"1\":{\"1418\":1}}],[\"并且只执行一次\",{\"1\":{\"1392\":1}}],[\"并且持续更新中\",{\"1\":{\"1378\":1}}],[\"并且选举出当前一个slave节点来转换成master节点\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"并且进行合理的批量压缩\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"并且使用默认分区器\",{\"1\":{\"1119\":1,\"1307\":1}}],[\"并且已经废弃\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"并且改变搜索标准\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"并且该节点自己也选举自己\",{\"1\":{\"1027\":1,\"1231\":1}}],[\"并且处于容错考虑\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"并且写时如何避免并发重复写入\",{\"1\":{\"1003\":1,\"1212\":1}}],[\"并且相比于直接使用\",{\"1\":{\"989\":1}}],[\"并且撤销\",{\"1\":{\"981\":1}}],[\"并且有\",{\"1\":{\"975\":1}}],[\"并且携带图书实体\",{\"1\":{\"889\":1}}],[\"并且一直无法关闭\",{\"1\":{\"852\":1}}],[\"并且要求xml文件和interface的名称要相同\",{\"1\":{\"835\":1}}],[\"并且为部署做准备\",{\"1\":{\"777\":1}}],[\"并且每个段会消耗cpu\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"并且每个列表项要么就是小整数值\",{\"1\":{\"696\":1}}],[\"并且每个数组对象都是一个\",{\"1\":{\"504\":1}}],[\"并且保证集合中不会出现\",{\"1\":{\"693\":1}}],[\"并且尽可能地节约了内存\",{\"1\":{\"693\":1}}],[\"并且这个强引用变量所在的方法已经弹出栈\",{\"1\":{\"1394\":1}}],[\"并且这个强引用变量为\",{\"1\":{\"1394\":1}}],[\"并且这个\",{\"1\":{\"689\":1}}],[\"并且这些行锁的数量超过了系统预设的阈值时\",{\"1\":{\"637\":1}}],[\"并且在事务\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"并且在多实例的情况下\",{\"1\":{\"678\":1}}],[\"并且在此基础上实现了\",{\"1\":{\"652\":1}}],[\"并且\",{\"1\":{\"678\":1}}],[\"并且由此增加的空间消耗相对于\",{\"1\":{\"665\":1}}],[\"并且连续的\",{\"1\":{\"622\":1}}],[\"并且应尽可能的让字段顺序与索引顺序相一致\",{\"0\":{\"597\":1},\"1\":{\"1149\":1,\"1332\":1}}],[\"并且您不能在该列中插入\",{\"1\":{\"589\":1}}],[\"并且可以实现更细粒度的锁控制\",{\"1\":{\"1480\":1}}],[\"并且可以使用选择器来实现多路复用\",{\"1\":{\"1478\":1}}],[\"并且可以在不同的线程之间共享\",{\"1\":{\"1478\":1}}],[\"并且可以在运行时调用这些属性和方法\",{\"1\":{\"1468\":1}}],[\"并且可以支持随机访问\",{\"1\":{\"1478\":1}}],[\"并且可以自由的控制何时执行切点\",{\"1\":{\"752\":1}}],[\"并且可以将这些数据库部署在不同服务器上\",{\"1\":{\"580\":1}}],[\"并且可能需要较长的时间来完成\",{\"1\":{\"574\":1}}],[\"并且磁盘空间也快不够了\",{\"1\":{\"580\":1}}],[\"并且对更多案例和细节有所了解\",{\"1\":{\"1398\":1}}],[\"并且对于大表也拆分为若干小表\",{\"1\":{\"578\":1}}],[\"并且对桶中元素排序后\",{\"1\":{\"404\":1}}],[\"并且如果瓶颈在\",{\"1\":{\"578\":1}}],[\"并且经常需要根据某个字段进行排序\",{\"0\":{\"572\":1}}],[\"并且全文索引的列不能是null值\",{\"1\":{\"570\":1}}],[\"并且通过指针相互连接\",{\"1\":{\"566\":1}}],[\"并且模式以\",{\"1\":{\"564\":1}}],[\"并且也不仅仅只是一个全文搜索引擎\",{\"1\":{\"453\":1}}],[\"并且效率较高\",{\"1\":{\"441\":1}}],[\"并且整个分布式系统内不会产生id碰撞\",{\"1\":{\"441\":1}}],[\"并且让我们的接口更容易复用\",{\"1\":{\"206\":1}}],[\"并且还需要重新启动\",{\"1\":{\"179\":1}}],[\"并且还自费买了服务器和阿里云存储\",{\"1\":{\"98\":1}}],[\"并且偶然可能需要更新配置\",{\"1\":{\"179\":1}}],[\"并且给予可写权限\",{\"1\":{\"174\":1}}],[\"并且是一路处理器缓存大小的倍数\",{\"1\":{\"123\":1}}],[\"并且随手丢给我一个截图\",{\"1\":{\"98\":1}}],[\"实践使用与论坛上的讨论\",{\"1\":{\"1380\":1}}],[\"实时分析等\",{\"1\":{\"1434\":1}}],[\"实时流处理\",{\"1\":{\"1432\":1}}],[\"实时监控运行指标\",{\"1\":{\"1400\":1}}],[\"实时性低\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"实时推流\",{\"1\":{\"163\":1}}],[\"实体\",{\"0\":{\"888\":1}}],[\"实体类的全路径\",{\"1\":{\"831\":1}}],[\"实用的倒排索引还可以记载更多的信息\",{\"1\":{\"478\":1}}],[\"实例收到\",{\"1\":{\"1420\":2}}],[\"实例化阶段完成的\",{\"1\":{\"1412\":1}}],[\"实例化阶段会调用\",{\"1\":{\"1408\":1}}],[\"实例化前修改\",{\"1\":{\"1410\":1}}],[\"实例化bean\",{\"1\":{\"1171\":2,\"1348\":2}}],[\"实例化\",{\"1\":{\"1085\":1,\"1175\":1,\"1278\":1,\"1352\":1,\"1408\":1,\"1410\":1}}],[\"实例只能选择其一\",{\"1\":{\"834\":1}}],[\"实例中所有的\",{\"1\":{\"833\":1}}],[\"实例二\",{\"0\":{\"790\":1}}],[\"实例来操作数据\",{\"1\":{\"711\":1}}],[\"实例可用\",{\"1\":{\"711\":1}}],[\"实例时\",{\"1\":{\"711\":1}}],[\"实例\",{\"1\":{\"465\":1,\"667\":1,\"711\":3,\"1116\":1,\"1304\":1,\"1410\":4}}],[\"实例题目\",{\"0\":{\"412\":1}}],[\"实际类型参数是替换类型参数的具体类型\",{\"1\":{\"1424\":1}}],[\"实际容量\",{\"1\":{\"1404\":1}}],[\"实际的io读写操作\",{\"1\":{\"1045\":2,\"1246\":2}}],[\"实际情况下\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"实际应用中要考虑的细节要更多\",{\"1\":{\"657\":1}}],[\"实际应用中其实很少会使用到\",{\"1\":{\"570\":1}}],[\"实际上g1的设计极为复杂精巧\",{\"1\":{\"1398\":1}}],[\"实际上是在当前线程的\",{\"1\":{\"1386\":2}}],[\"实际上是生成一个指针指向此对象\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"实际上就是通过反射的方式创建出一个bean对象\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"实际上就是dao的接口路径\",{\"1\":{\"835\":1}}],[\"实际上又是按照segment分段存储的\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"实际上这些参数与es的实现机制\",{\"1\":{\"493\":1}}],[\"实际上\",{\"1\":{\"386\":1,\"392\":1,\"503\":1,\"1029\":1,\"1233\":1}}],[\"实际是斜切向运动\",{\"1\":{\"327\":1}}],[\"实则蕴含着深刻数学原理的问题\",{\"1\":{\"303\":1}}],[\"实战直播课\",{\"1\":{\"249\":1}}],[\"实战这一篇就够了\",{\"0\":{\"165\":1,\"166\":1,\"760\":1,\"761\":1,\"793\":1,\"794\":1},\"1\":{\"801\":1}}],[\"实战练手项目\",{\"1\":{\"115\":1}}],[\"实战项目组\",{\"1\":{\"232\":1,\"233\":1}}],[\"实战项目直播教学等专属求职指南\",{\"1\":{\"53\":1}}],[\"实战项目\",{\"1\":{\"1\":1,\"118\":1}}],[\"实现业务逻辑\",{\"1\":{\"1502\":1}}],[\"实现角度\",{\"1\":{\"1480\":1}}],[\"实现线程调度\",{\"1\":{\"1476\":1}}],[\"实现线程安全\",{\"1\":{\"1446\":1}}],[\"实现非阻塞的数据结构\",{\"1\":{\"1476\":1}}],[\"实现锁的非阻塞式获取\",{\"1\":{\"1476\":1}}],[\"实现原子操作\",{\"1\":{\"1476\":1}}],[\"实现原理\",{\"0\":{\"427\":1},\"1\":{\"121\":1}}],[\"实现一件事的并行处理\",{\"1\":{\"1446\":1}}],[\"实现一个即时通讯系统\",{\"1\":{\"990\":1}}],[\"实现一个自己的\",{\"1\":{\"990\":1}}],[\"实现主从复制和数据一致性的效果\",{\"1\":{\"1422\":1}}],[\"实现快速故障迁移\",{\"1\":{\"1422\":1}}],[\"实现这个接口的\",{\"1\":{\"1410\":1}}],[\"实现了\",{\"1\":{\"1410\":4}}],[\"实现了业务逻辑\",{\"1\":{\"1408\":1}}],[\"实现了细致且高效的分代\",{\"1\":{\"1398\":1}}],[\"实现将对象间的依赖关系交给\",{\"1\":{\"1408\":1}}],[\"实现栈结构\",{\"1\":{\"1404\":1}}],[\"实现渐进式回收与低停顿\",{\"1\":{\"1398\":1}}],[\"实现自动调优\",{\"1\":{\"1398\":1}}],[\"实现自定义插件\",{\"1\":{\"1138\":1,\"1323\":1}}],[\"实现高吞吐量\",{\"1\":{\"1398\":1}}],[\"实现高可用\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"实现数据\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"实现数据的最终一致性\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"实现诸如数据发布\",{\"1\":{\"1194\":1,\"1367\":1}}],[\"实现程序间的松耦合\",{\"1\":{\"1186\":1,\"1361\":1}}],[\"实现beanfactoryaware接口可以获取到工厂对象beanfactory等\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"实现具有依\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"实现计数器功能\",{\"1\":{\"1156\":1,\"1336\":1}}],[\"实现布隆过滤器\",{\"1\":{\"1156\":1,\"1336\":1}}],[\"实现日志打印\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"实现spring类\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"实现slf4j接口并整合\",{\"1\":{\"875\":1}}],[\"实现功能\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"实现登录校验\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"实现个性化搜索\",{\"1\":{\"1036\":1,\"1240\":1}}],[\"实现串行写\",{\"1\":{\"1007\":2,\"1216\":2}}],[\"实现限流的功能\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"实现本地缓存的功能\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"实现消息推送系统\",{\"1\":{\"990\":1}}],[\"实现类使用了我们上边定义的异常方法\",{\"1\":{\"893\":1}}],[\"实现类中\",{\"1\":{\"824\":1}}],[\"实现类\",{\"1\":{\"824\":1,\"878\":1}}],[\"实现类似\",{\"1\":{\"489\":1}}],[\"实现分页查询\",{\"1\":{\"718\":1}}],[\"实现分布式锁有以下几种方式\",{\"1\":{\"639\":1}}],[\"实现方式\",{\"1\":{\"632\":1,\"633\":1}}],[\"实现信息检索\",{\"1\":{\"558\":1}}],[\"实现\",{\"0\":{\"87\":1,\"641\":1},\"1\":{\"296\":1,\"667\":1,\"1001\":1,\"1049\":1,\"1119\":1,\"1210\":1,\"1250\":1,\"1307\":1,\"1414\":1}}],[\"所需要保持打开状态的文件句柄数也就越多\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"所谓编码就是具体使用哪种底层数据结构来实现\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"所谓同源指的是\",{\"1\":{\"1093\":1,\"1286\":1}}],[\"所谓基数估算\",{\"1\":{\"722\":1}}],[\"所实现的\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"所示\",{\"1\":{\"682\":1}}],[\"所保存字符串的长度\",{\"1\":{\"682\":1}}],[\"所耗费时间叫做寻道时间\",{\"1\":{\"327\":1}}],[\"所在行\",{\"1\":{\"111\":1}}],[\"所以性能更好\",{\"1\":{\"1476\":1}}],[\"所以性能快\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"所以简单来说\",{\"1\":{\"1446\":1}}],[\"所以优化内存使用是非常重要的\",{\"1\":{\"1430\":1}}],[\"所以边界的作用就是限制类型参数可以替换的实际类型\",{\"1\":{\"1424\":1}}],[\"所以上下限主要是为了在广泛限制类型的同时\",{\"1\":{\"1424\":1}}],[\"所以上述案例中虽然表面上只有\",{\"1\":{\"504\":1}}],[\"所以编译器会把所有的泛型类型全部擦除掉\",{\"1\":{\"1424\":1}}],[\"所以编译器不允许这么做\",{\"1\":{\"1424\":1}}],[\"所以类型参数是个未知的类型占位符\",{\"1\":{\"1424\":1}}],[\"所以用t表示\",{\"1\":{\"1424\":1}}],[\"所以用了\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"所以泛型最大的好处就是让代码类型安全\",{\"1\":{\"1424\":1}}],[\"所以注解的\",{\"1\":{\"1402\":1}}],[\"所以enum中的注解一般使用runtime\",{\"1\":{\"1402\":1}}],[\"所以尽量减少stw次数\",{\"1\":{\"1398\":1}}],[\"所以能保证只有一个能加锁成功\",{\"1\":{\"1163\":1,\"1343\":1}}],[\"所以redis内存维护一个\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"所以克服所有问题\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"所以无边界的\",{\"1\":{\"1424\":1}}],[\"所以无\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"所以无法使用索引\",{\"1\":{\"564\":1}}],[\"所以当前分区只能消费到\",{\"1\":{\"1118\":1,\"1306\":1}}],[\"所以当读到某个值的时候\",{\"1\":{\"323\":1}}],[\"所以也是线程私有\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"所以也就不会影响其他进程对象的运行\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"所以分配的内存大小要在编译期就确认\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"所以分配的内存是在运行期确认的\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"所以有各种算法\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"所以第一次访问jsp较慢\",{\"1\":{\"1087\":1,\"1280\":1}}],[\"所以为了提高效率\",{\"1\":{\"1080\":1,\"1275\":1}}],[\"所以选择6是一种折中的考虑\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"所以选择8作为阈值\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"所以把hashcode的高16位与低16位进行异或操作\",{\"1\":{\"1078\":1,\"1273\":1}}],[\"所以hash值的高16位通常参与不了这个按位与操作\",{\"1\":{\"1078\":1,\"1273\":1}}],[\"所以线程b同时进行增删操作不会影响到线程a的遍历行为\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"所以如果我们不使用默认阻塞的锁\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"所以导致死锁\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"所以join的好处能够保证线程的执行顺序\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"所以jvm可以以\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"所以例如拼接字符串时候会产生很多无用的中间对象\",{\"1\":{\"1046\":1,\"1247\":1}}],[\"所以是非阻塞\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"所以决定了重写\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"所以数据的最终一致性是可以得到有效的保证的\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"所以确定是因为大于号\",{\"1\":{\"863\":1}}],[\"所以就在sql中直接使用了\",{\"1\":{\"863\":1}}],[\"所以只有使用resultmap手动的进行映射\",{\"1\":{\"860\":1}}],[\"所以可以通过重写equals\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"所以可以不用加\",{\"1\":{\"889\":1}}],[\"所以可以直接引用\",{\"1\":{\"806\":1}}],[\"所以可以将桶中元素移动回原始集合即可\",{\"1\":{\"404\":1}}],[\"所以下定决心深入研究一下java并发方面的知识\",{\"1\":{\"755\":1}}],[\"所以其核心就是基数估算算法\",{\"1\":{\"722\":1}}],[\"所以实战很重要\",{\"1\":{\"715\":1}}],[\"所以添加\",{\"1\":{\"669\":1,\"670\":1}}],[\"所以锁的问题\",{\"1\":{\"615\":1}}],[\"所以怎样建索引需要慎重考虑\",{\"1\":{\"600\":1}}],[\"所以引擎大概率不会走索引\",{\"1\":{\"564\":1}}],[\"所以不必担心队列消息的丢失问题\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"所以不论在查询还是更新维护\",{\"1\":{\"563\":1}}],[\"所以不用限制桌面的帧率\",{\"1\":{\"162\":1}}],[\"所以将其记录在倒排列表中\",{\"1\":{\"478\":1}}],[\"所以需要修改最大映射文件的数量\",{\"1\":{\"456\":1}}],[\"所以使用\",{\"1\":{\"454\":1}}],[\"所以i1和i2指向的是同一个对象\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"所以id一般是正数\",{\"1\":{\"441\":1}}],[\"所以io一次就是读一页的大小\",{\"1\":{\"327\":1}}],[\"所以在不同场景有不同的使用优势\",{\"1\":{\"1404\":1}}],[\"所以在另一个线程中调用\",{\"1\":{\"1382\":1}}],[\"所以在运行的时候速度比较快\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"所以在单线程环境下\",{\"1\":{\"1075\":1,\"1270\":1}}],[\"所以在选择上\",{\"1\":{\"562\":1}}],[\"所以在查询的时候减少了磁盘的随机读取\",{\"1\":{\"560\":1}}],[\"所以在\",{\"1\":{\"440\":1,\"1090\":1,\"1283\":1}}],[\"所以堆排序时间复杂度一般认为就是o\",{\"1\":{\"417\":1}}],[\"所以循环队列需要损失一个存储空间\",{\"1\":{\"341\":1}}],[\"所以我们可以使用\",{\"1\":{\"341\":1}}],[\"所以我们通常将数组弄成一个环状\",{\"1\":{\"341\":1}}],[\"所以没有按照传统的方法来写\",{\"1\":{\"339\":1}}],[\"所以一定要看一遍源码\",{\"1\":{\"1080\":1,\"1275\":1}}],[\"所以一个页中能存储多少行数据呢\",{\"1\":{\"325\":1}}],[\"所以一般不会使用\",{\"1\":{\"1138\":1,\"1323\":1}}],[\"所以一般b+树的叶节点和内节点大小不同\",{\"1\":{\"322\":1}}],[\"所以一般被用在文件系统及数据库中\",{\"1\":{\"319\":1}}],[\"所以评价一个数据结构作为索引的优劣最重要的指标就是在查找过程中磁盘i\",{\"1\":{\"324\":1}}],[\"所以必须经历o\",{\"1\":{\"323\":1}}],[\"所以查询的时候可能不需要o\",{\"1\":{\"323\":1}}],[\"所以查询\",{\"1\":{\"323\":1}}],[\"所以说b\",{\"1\":{\"323\":1}}],[\"所以定位到最左侧的节点\",{\"1\":{\"320\":1}}],[\"所以作为多叉树的b树是更快的\",{\"1\":{\"319\":1}}],[\"所以新建节点时\",{\"1\":{\"319\":1}}],[\"所以这两个线程互不干扰\",{\"1\":{\"1386\":1}}],[\"所以这个对象永远是一个代理对象\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"所以这个阶段也是可以与用户线程同时并发的\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"所以这个最高位固定是0\",{\"1\":{\"440\":1}}],[\"所以这里的速度非常快\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"所以这里设置为分页大小\",{\"1\":{\"123\":2}}],[\"所以这也是为什么深度分页不能用from+size这种方式\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"所以这类平衡二叉树在数据库和文件系统上的选择就被\",{\"1\":{\"319\":1}}],[\"所以这台机器压力会最轻\",{\"1\":{\"123\":1}}],[\"所以假如填写10240\",{\"1\":{\"123\":1}}],[\"所以最好与ulimit\",{\"1\":{\"123\":1}}],[\"所以最近想更新一个系列文章\",{\"1\":{\"93\":1}}],[\"所以\",{\"1\":{\"86\":1,\"579\":1,\"657\":1,\"685\":2,\"698\":1,\"721\":1,\"755\":1,\"1106\":1,\"1134\":1,\"1169\":3,\"1177\":1,\"1297\":1,\"1319\":1,\"1346\":3,\"1354\":1,\"1380\":5,\"1396\":3,\"1398\":3,\"1414\":2,\"1424\":1,\"1430\":1,\"1460\":1,\"1476\":2}}],[\"所有线程就会被唤醒\",{\"1\":{\"1390\":1}}],[\"所有线程的共享变量都放在主内存中\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"所有客户端在它下面创建临时顺序编号目录节点\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"所有客户端都去创建\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"所有进程\",{\"1\":{\"1199\":1,\"1372\":1}}],[\"所有事务逐个依次执行\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"所有依赖于它的对象都得到通知并自动更新\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"所有扫描过的行都会被锁上\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"所有partition的leader选举都由controller决定\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"所有与\",{\"1\":{\"1117\":1,\"1305\":1}}],[\"所有副本\",{\"1\":{\"1113\":1,\"1301\":1}}],[\"所有集合都是它的子类\",{\"1\":{\"1070\":1,\"1265\":1}}],[\"所有请求全部达到\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"所有请求挂起\",{\"1\":{\"183\":1}}],[\"所有返回结果都使用它\",{\"1\":{\"893\":1}}],[\"所有编译期异常转换为运行期异常\",{\"1\":{\"893\":1}}],[\"所有抽离一个类\",{\"1\":{\"891\":1}}],[\"所有的对象通过彼此的合作\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"所有的消费者都属于某个消费者组\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"所有的故事都围绕切点发生\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"所有的项目配置信息都被定义在一个叫做pom\",{\"1\":{\"761\":1}}],[\"所有的内容会公众号第一时间更新\",{\"1\":{\"5\":1}}],[\"所有加上synchronized\",{\"1\":{\"755\":1}}],[\"所有键都是字符串\",{\"1\":{\"682\":1}}],[\"所有键值分布在整颗树中\",{\"1\":{\"318\":1}}],[\"所有我们在中间加一道缓存\",{\"1\":{\"679\":1}}],[\"所有给定集合的并集存储在\",{\"1\":{\"669\":1}}],[\"所有数据都会存储在叶子节点上\",{\"1\":{\"558\":1}}],[\"所有单词的倒排列表往往顺序地存储在磁盘的某个文件里\",{\"1\":{\"477\":1}}],[\"所有元素都处于桶中\",{\"1\":{\"404\":1}}],[\"所有半径相同的磁道组成一个柱面\",{\"1\":{\"327\":1}}],[\"所有磁头任何时候都是重叠的\",{\"1\":{\"327\":1}}],[\"所有\",{\"1\":{\"323\":1,\"1123\":1,\"1311\":1,\"1506\":1}}],[\"所有关键字存储在叶子节点出现\",{\"1\":{\"322\":1}}],[\"所有用户空间的二进制文件被编译为位置独立可执行文件\",{\"1\":{\"244\":1}}],[\"所有静态文件由nginx直接读取不经过tomcat或resin\",{\"1\":{\"123\":1}}],[\"所有jsp的页面均交由tomcat或resin处理\",{\"1\":{\"123\":1}}],[\"所有技术选型就尤为重要\",{\"1\":{\"72\":1}}],[\"所有文章非特别说明都为\",{\"1\":{\"53\":1}}],[\"无边界的\",{\"1\":{\"1424\":1}}],[\"无连接\",{\"1\":{\"1095\":1,\"1288\":1}}],[\"无状态\",{\"1\":{\"1095\":1,\"1288\":1}}],[\"无序列表\",{\"1\":{\"719\":1}}],[\"无重复的方式保存集合元素\",{\"1\":{\"693\":1}}],[\"无锁\",{\"1\":{\"632\":1}}],[\"无锁的情况下就可能出现\",{\"1\":{\"616\":1}}],[\"无需过多干预\",{\"1\":{\"1182\":1,\"1357\":1}}],[\"无需再处理\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"无需服务器\",{\"0\":{\"969\":1},\"1\":{\"969\":1}}],[\"无需查询最新的列表\",{\"1\":{\"657\":1}}],[\"无需进行多次磁盘i\",{\"1\":{\"560\":1}}],[\"无需频繁创建销毁\",{\"1\":{\"86\":1}}],[\"无法代理类\",{\"1\":{\"1474\":1}}],[\"无法使用这个实际类型\",{\"1\":{\"1424\":1}}],[\"无法处理其他请求\",{\"1\":{\"1420\":1}}],[\"无法结束\",{\"1\":{\"1412\":1}}],[\"无法完全实例化\",{\"1\":{\"1412\":1}}],[\"无法正常实例化\",{\"1\":{\"1412\":1}}],[\"无法识别\",{\"1\":{\"1408\":1}}],[\"无法移动对象\",{\"1\":{\"1396\":1}}],[\"无法做到像编程式事务那样可以作用到代码块级别\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"无法清除垃圾碎片\",{\"1\":{\"1103\":1,\"1294\":1}}],[\"无法直接访问对方工作内存中的变量\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"无法保证缓存一致性\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"无法保证递增\",{\"1\":{\"438\":1}}],[\"无法保持原有的顺序\",{\"1\":{\"562\":1}}],[\"无法获得id\",{\"1\":{\"436\":1}}],[\"无法出队\",{\"1\":{\"342\":1}}],[\"无法很好的利用磁盘预读\",{\"1\":{\"319\":1}}],[\"无法定位出现了什么类型的异常\",{\"1\":{\"225\":1}}],[\"无论目标方法是否正常完成都会执行\",{\"1\":{\"1402\":1}}],[\"无论当前存不存在事务\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"无论何时我们调用一个对象的clone方法\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"无论数千还是数十亿的唯一值\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"无论是创建还是使用对象b\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"无论是\",{\"1\":{\"832\":1}}],[\"无论是通过commit提交事务还是通过rollback回滚事务\",{\"1\":{\"641\":1}}],[\"无论是主键索引还是二级索引\",{\"1\":{\"638\":1}}],[\"无论是开源还是私有\",{\"1\":{\"453\":1}}],[\"无论是归并排序\",{\"1\":{\"412\":1}}],[\"无论使用firefox4\",{\"1\":{\"123\":1}}],[\"无论使用firefox还是ie浏览器\",{\"1\":{\"123\":1}}],[\"无论我们创建多少次\",{\"1\":{\"86\":1}}],[\"会发生什么\",{\"1\":{\"1426\":1}}],[\"会发现好像刚刚的更改对于某些数据未起作用\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"会更灵活\",{\"1\":{\"1424\":1}}],[\"会单独创建\",{\"1\":{\"1420\":1}}],[\"会直接从缓存中获取数据\",{\"1\":{\"1416\":1}}],[\"会直接丢弃新的任务\",{\"1\":{\"1384\":1}}],[\"会提前暴露一个\",{\"1\":{\"1412\":1}}],[\"会首先创建目标对象\",{\"1\":{\"1412\":1}}],[\"会延迟加载\",{\"1\":{\"1410\":1}}],[\"会话都会创建一个\",{\"1\":{\"1410\":2}}],[\"会调用该方法\",{\"1\":{\"1410\":2}}],[\"会调用\",{\"1\":{\"1410\":5}}],[\"会返回一个\",{\"1\":{\"1408\":1}}],[\"会加大开发难度\",{\"1\":{\"1396\":1}}],[\"会产生大量空间碎片\",{\"1\":{\"1396\":1}}],[\"会产生\",{\"1\":{\"1396\":1}}],[\"会产生数字0\",{\"1\":{\"306\":2}}],[\"会抛出oom异常\",{\"1\":{\"1394\":1}}],[\"会停顿其他线程\",{\"1\":{\"1394\":1}}],[\"会触发垃圾回收\",{\"1\":{\"1394\":1}}],[\"会触发初始化\",{\"1\":{\"1392\":5}}],[\"会触发一次full\",{\"1\":{\"1388\":1}}],[\"会触发一个缺页异常\",{\"1\":{\"327\":1}}],[\"会从等待队列中取出一个线程\",{\"1\":{\"1390\":1}}],[\"会丢弃任务队列中最早的任务\",{\"1\":{\"1384\":1}}],[\"会保留至运行时\",{\"1\":{\"1402\":1}}],[\"会保证每次读取都从内存中读取最新的值\",{\"1\":{\"1382\":1}}],[\"会保存60张图片\",{\"1\":{\"158\":1}}],[\"会造成非必要的数学开销\",{\"1\":{\"1380\":1}}],[\"会造成多个watch被触发\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"会退化为链表\",{\"1\":{\"1380\":1}}],[\"会的\",{\"1\":{\"1378\":1}}],[\"会进行销毁操作\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"会判断是否\",{\"1\":{\"1133\":1,\"1318\":1}}],[\"会为每个日志段文件打开一个\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"会为每个分区缓存消息\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"会为该文档指定一个版本号\",{\"1\":{\"1033\":1,\"1237\":1}}],[\"会被gc自动回收掉\",{\"1\":{\"1102\":1,\"1293\":1}}],[\"会比较占用你服务器的性能\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"会基于原数组拷贝出一个新的数组\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"会根据\",{\"1\":{\"1073\":1,\"1268\":1}}],[\"会有点大材小用浪费空间\",{\"1\":{\"1034\":2,\"1238\":2}}],[\"会创建一个大小为\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"会合并小段到一个较大的段\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"会导致非垃圾对象被清除\",{\"1\":{\"1396\":1}}],[\"会导致短时间大量请求落在数据库上\",{\"1\":{\"1159\":1,\"1339\":1}}],[\"会导致集群节点响应时间变慢\",{\"1\":{\"1030\":1,\"1234\":1}}],[\"会导致内存垃圾回收延长\",{\"1\":{\"1030\":1,\"1234\":1}}],[\"会导致jvm的堆内存交换到磁盘上\",{\"1\":{\"1030\":1,\"1234\":1}}],[\"会导致缓存和\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"会导致发号重复或者服务会处于不可用状态\",{\"1\":{\"440\":1}}],[\"会清空缓存\",{\"1\":{\"852\":1}}],[\"会极大地节省存储空间\",{\"1\":{\"721\":1}}],[\"会占用较长时间和大量系统资源\",{\"1\":{\"708\":1}}],[\"会共享值为\",{\"1\":{\"699\":1}}],[\"会先将数据写入到一个临时文件中\",{\"1\":{\"1420\":1}}],[\"会先去二级缓存中查找是否有数据\",{\"1\":{\"1416\":1}}],[\"会先对我们的输入作哈希运算\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"会先检查给定键的类型能否执行指定的命令\",{\"1\":{\"699\":1}}],[\"会先根据二级索引定位到数据所在的磁盘位置\",{\"1\":{\"560\":1}}],[\"会在对象创建完成后\",{\"1\":{\"1412\":1}}],[\"会在\",{\"1\":{\"1382\":1,\"1410\":4}}],[\"会在链表中追加元素\",{\"1\":{\"1380\":1}}],[\"会在初始化服务器时\",{\"1\":{\"698\":1}}],[\"会在索引列\",{\"1\":{\"621\":1}}],[\"会定期把缓存保存到硬盘\",{\"1\":{\"678\":1}}],[\"会用它做爬虫采集系统中队列使用\",{\"1\":{\"657\":1}}],[\"会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件\",{\"1\":{\"652\":1}}],[\"会变成当前读\",{\"1\":{\"638\":1}}],[\"会阻止其他事务访问整个表\",{\"1\":{\"637\":1}}],[\"会影响是否启用表锁以及何时进行锁升级\",{\"1\":{\"637\":1}}],[\"会锁定查询到的行\",{\"1\":{\"634\":1}}],[\"会分配一个新的自增值给插入的行\",{\"1\":{\"622\":1}}],[\"会让他们做一些任务\",{\"1\":{\"536\":1}}],[\"会将其中的存活对象移动到老年代\",{\"1\":{\"1388\":1}}],[\"会将其中的存活对象移动到survivor区2\",{\"1\":{\"1388\":1}}],[\"会将其转换为\",{\"1\":{\"504\":1}}],[\"会将其转换为以下格式\",{\"1\":{\"503\":1}}],[\"会将任务分配给调用线程来执行\",{\"1\":{\"1384\":1}}],[\"会将数据复制到另一份副本当中\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"会将分区\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"会将应用程序未用到的内存交换出去\",{\"1\":{\"1030\":1,\"1234\":1}}],[\"会将请求写入到\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"会将\",{\"1\":{\"979\":1,\"1119\":1,\"1307\":1}}],[\"会将原\",{\"1\":{\"503\":1}}],[\"会额外增加内存消耗量\",{\"1\":{\"493\":1}}],[\"会自动调用代理类中的方法\",{\"1\":{\"1474\":1}}],[\"会自动调用\",{\"1\":{\"1474\":1}}],[\"会自动尝试重连\",{\"1\":{\"1422\":1}}],[\"会自动去除\",{\"1\":{\"849\":1}}],[\"会自动对应\",{\"1\":{\"842\":1}}],[\"会自动增加\",{\"1\":{\"492\":1}}],[\"会自动设置成\",{\"1\":{\"492\":1}}],[\"会自动处理\",{\"1\":{\"103\":1}}],[\"会默认忽略该值\",{\"1\":{\"487\":1}}],[\"会读取若干个\",{\"1\":{\"323\":1}}],[\"会不知疲倦地一页一页的获取网页直到你的服务崩溃的罪魁祸首一般是机器人或者web\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"会不会被喷\",{\"1\":{\"264\":1}}],[\"会不定时分享一些我的看法\",{\"1\":{\"249\":1}}],[\"会员逻辑\",{\"1\":{\"228\":1}}],[\"会员\",{\"1\":{\"228\":1}}],[\"会对该段代码采取排他锁\",{\"1\":{\"1476\":1}}],[\"会对分片集群有什么影响呢\",{\"1\":{\"1426\":1}}],[\"会对\",{\"1\":{\"1408\":1}}],[\"会对你有所帮助\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"会对比数据库表中保存的版本\",{\"1\":{\"927\":1}}],[\"会对系统和有业务造成伤害\",{\"1\":{\"219\":1}}],[\"会对没有依赖关系的代码进行重排序\",{\"1\":{\"89\":1}}],[\"会浪费大量资源\",{\"1\":{\"86\":1}}],[\"会使用自增锁来确保在并发环境下\",{\"1\":{\"622\":1}}],[\"会使用\",{\"1\":{\"27\":1}}],[\"本回答只能简要提及\",{\"1\":{\"1398\":1}}],[\"本质的区别来源于两者的底层实现\",{\"1\":{\"1074\":1,\"1269\":1}}],[\"本质是参数化类型\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"本质是一个线程安全的可修改的字符序列\",{\"1\":{\"1046\":1,\"1247\":1}}],[\"本质就是不同的硬件\",{\"1\":{\"999\":1,\"1208\":1}}],[\"本质区别\",{\"1\":{\"559\":1}}],[\"本系列\",{\"1\":{\"983\":1,\"987\":1,\"1013\":1,\"1083\":1,\"1128\":1,\"1180\":1,\"1193\":1}}],[\"本系列从实战出发手把手一起对接口响应慢问题做优化\",{\"1\":{\"588\":1}}],[\"本功能全部完成\",{\"1\":{\"981\":1}}],[\"本文没一句废话\",{\"1\":{\"958\":1}}],[\"本文主要是\",{\"1\":{\"650\":1}}],[\"本次在root权限下安装\",{\"1\":{\"915\":1}}],[\"本案例主要通过俩个实操讲解\",{\"1\":{\"746\":1}}],[\"本身来说很小\",{\"1\":{\"665\":1}}],[\"本身那么提高硬件也是很有限的\",{\"1\":{\"578\":1}}],[\"本教程涉及到的一些代码都是\",{\"1\":{\"711\":1}}],[\"本教程致力于最实用教程\",{\"1\":{\"649\":1}}],[\"本教程是系列教程\",{\"1\":{\"464\":1,\"481\":1,\"513\":1,\"587\":1}}],[\"本教程纯手打\",{\"1\":{\"167\":1,\"381\":1,\"400\":1,\"409\":1,\"417\":1,\"430\":1,\"650\":1,\"676\":1,\"711\":1,\"761\":1,\"795\":1}}],[\"本课程是实战课程\",{\"1\":{\"447\":1}}],[\"本地方法是指使用其他语言\",{\"1\":{\"1388\":1}}],[\"本地方法栈的作用是为本地方法提供内存空间\",{\"1\":{\"1388\":1}}],[\"本地方法栈与java虚拟机栈类似\",{\"1\":{\"1388\":1}}],[\"本地方法栈\",{\"1\":{\"1099\":2,\"1290\":2,\"1388\":1,\"1394\":1}}],[\"本地方法栈和程序计数器的运行是线程私有的内存区域\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"本地接口\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"本地预览\",{\"0\":{\"975\":1}}],[\"本地仓库\",{\"1\":{\"768\":2}}],[\"本地缓存的实时性怎么保证\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"本地缓存\",{\"1\":{\"678\":1,\"1002\":1,\"1005\":1,\"1135\":1,\"1211\":1,\"1214\":1,\"1320\":1}}],[\"本地调用\",{\"1\":{\"438\":1}}],[\"本地动静分离反向代理配置\",{\"1\":{\"123\":1}}],[\"本篇是代码篇\",{\"1\":{\"870\":1}}],[\"本篇是数据类型底层实现\",{\"1\":{\"676\":1}}],[\"本篇是系列文章\",{\"1\":{\"588\":1}}],[\"本篇继续学习\",{\"1\":{\"676\":1}}],[\"本篇主要是\",{\"1\":{\"650\":1}}],[\"本篇主要讲述几个在实战中注意优化的性能点供大家参考\",{\"1\":{\"588\":1}}],[\"本篇都是基于前面搭建的环境来讲解\",{\"1\":{\"513\":1}}],[\"本篇幅是继上一篇\",{\"1\":{\"464\":1,\"481\":1,\"513\":1}}],[\"本篇幅是继上一篇springboot2\",{\"1\":{\"450\":1}}],[\"本篇就以最简单的方式讲解\",{\"1\":{\"417\":1}}],[\"本篇介绍如何在生产环境使用单例模式\",{\"1\":{\"85\":1}}],[\"本页面就是一个示例\",{\"1\":{\"18\":1}}],[\"相同点\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"相同\",{\"1\":{\"1114\":1,\"1302\":1}}],[\"相同的消息会在一个分区下\",{\"1\":{\"1119\":1,\"1307\":1}}],[\"相同的sql和参数\",{\"1\":{\"852\":1}}],[\"相同的分值\",{\"1\":{\"692\":1}}],[\"相同的值可以复制到多个字段\",{\"1\":{\"489\":1}}],[\"相比传统的\",{\"1\":{\"1478\":1}}],[\"相比cms无碎片和高效\",{\"1\":{\"1394\":1}}],[\"相比于其他基于内存存储的系统而言\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"相比于框架的源码\",{\"1\":{\"1080\":1,\"1275\":1}}],[\"相比于行锁\",{\"1\":{\"629\":1}}],[\"相比nio更进一步\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"相比方案一来说\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"相当于资源注入\",{\"1\":{\"1168\":1,\"1345\":1}}],[\"相当于\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"相当于java程序中的this\",{\"1\":{\"1084\":1,\"1277\":1}}],[\"相当于wait\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"相当于sql语句中的statement\",{\"1\":{\"842\":1}}],[\"相当于preparedstatement使用占位符去替换参数\",{\"1\":{\"842\":1}}],[\"相当于执行了这样一条sql\",{\"1\":{\"842\":1}}],[\"相当于是一个连接一个线程\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"相当于是独占记录\",{\"1\":{\"618\":1}}],[\"相当于是个软连接\",{\"1\":{\"101\":1}}],[\"相互独立\",{\"1\":{\"774\":1}}],[\"相互等待对方持有的资源\",{\"1\":{\"625\":1}}],[\"相似\",{\"1\":{\"769\":1}}],[\"相信大家看到很多类似这种回答\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"相信大家都会有种及眼熟又陌生的感觉\",{\"1\":{\"983\":1,\"987\":1,\"998\":1,\"1013\":1,\"1024\":1,\"1040\":1,\"1054\":1,\"1068\":1,\"1083\":1,\"1098\":1,\"1112\":1,\"1128\":1,\"1141\":1,\"1154\":1,\"1167\":1,\"1180\":1,\"1193\":1,\"1206\":1}}],[\"相信是每个java攻城狮都遇到过的\",{\"1\":{\"763\":1}}],[\"相信你对\",{\"1\":{\"671\":1}}],[\"相信没有一个攻城狮不懂单例模式\",{\"1\":{\"85\":1}}],[\"相等的值\",{\"1\":{\"667\":1}}],[\"相等的元素\",{\"1\":{\"667\":2}}],[\"相对灵活\",{\"1\":{\"1130\":1,\"1315\":1}}],[\"相对哈希索引来说操作更复杂\",{\"1\":{\"562\":1}}],[\"相对于beanfactory\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"相对于当前上下文对象\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"相对于hibernate\",{\"1\":{\"1130\":1,\"1315\":1}}],[\"相对于内存存取\",{\"1\":{\"324\":1}}],[\"相对于其他linux发行版来说较为复杂\",{\"1\":{\"243\":1}}],[\"相关概念\",{\"0\":{\"1145\":1,\"1328\":1}}],[\"相关的核心类之一\",{\"1\":{\"1481\":1}}],[\"相关的源码\",{\"1\":{\"1481\":1}}],[\"相关的\",{\"1\":{\"989\":1}}],[\"相关联\",{\"1\":{\"622\":1}}],[\"相关术语解析\",{\"0\":{\"468\":1}}],[\"相关配置文档请见\",{\"1\":{\"8\":1}}],[\"相反\",{\"1\":{\"428\":1}}],[\"相反也一样\",{\"1\":{\"152\":1}}],[\"打头的\",{\"1\":{\"1402\":1}}],[\"打包命令来构建你的应用\",{\"1\":{\"1523\":1}}],[\"打包命令\",{\"0\":{\"1523\":1}}],[\"打包安装这两个模块到本地\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"打包成\",{\"1\":{\"917\":1}}],[\"打包成可发布的格式\",{\"1\":{\"776\":1}}],[\"打包构建docker镜像\",{\"0\":{\"917\":1}}],[\"打包构建后的\",{\"1\":{\"907\":1}}],[\"打包时不执行测试\",{\"1\":{\"768\":1}}],[\"打包项目\",{\"1\":{\"768\":1}}],[\"打包\",{\"0\":{\"913\":1},\"1\":{\"761\":1,\"774\":2,\"776\":1,\"1520\":1}}],[\"打开即可看到暴露的信息\",{\"1\":{\"948\":1}}],[\"打开sqlsession回话\",{\"0\":{\"810\":1}}],[\"打开cmd\",{\"1\":{\"766\":1}}],[\"打开\",{\"1\":{\"660\":1,\"765\":1,\"900\":1}}],[\"打交道\",{\"1\":{\"237\":1}}],[\"打印\",{\"1\":{\"1108\":1,\"1299\":1,\"1392\":2}}],[\"打印sql\",{\"0\":{\"788\":1}}],[\"打印语句\",{\"1\":{\"755\":1}}],[\"打印所有\",{\"1\":{\"667\":1}}],[\"打印关键信息\",{\"1\":{\"229\":1}}],[\"打印全部的异常信息\",{\"0\":{\"225\":1}}],[\"打印出的日志包含堆栈信息\",{\"1\":{\"224\":1}}],[\"打印日志\",{\"0\":{\"224\":1}}],[\"打印日志对象要做判空处理\",{\"0\":{\"221\":1}}],[\"打印日志非常重要\",{\"1\":{\"218\":1}}],[\"打印入参\",{\"1\":{\"220\":1}}],[\"打印按钮\",{\"1\":{\"21\":1}}],[\"打铁还要自身硬\",{\"1\":{\"85\":1}}],[\"作用域的\",{\"1\":{\"1410\":2}}],[\"作用域开始和结束时触发\",{\"1\":{\"1410\":1}}],[\"作用是在对象和视图之间做数据的交互\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"作用是能够提供不精确的去重计数\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"作用分别是什么\",{\"0\":{\"1084\":1,\"1277\":1}}],[\"作用\",{\"1\":{\"1060\":1,\"1258\":1}}],[\"作图\",{\"1\":{\"263\":1}}],[\"作为锁对象\",{\"1\":{\"1480\":1}}],[\"作为整个流程的控制器\",{\"1\":{\"1414\":1}}],[\"作为jvm调优的进阶\",{\"1\":{\"1400\":1}}],[\"作为回收和管理的基本单元\",{\"1\":{\"1398\":1}}],[\"作为预分配空间保留\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"作为循环队列必要适用\",{\"1\":{\"1156\":1,\"1336\":1}}],[\"作为队列使用\",{\"1\":{\"1156\":1,\"1336\":1}}],[\"作为主键回显\",{\"1\":{\"1133\":1,\"1318\":1}}],[\"作为主页内容渲染\",{\"1\":{\"974\":1}}],[\"作为sql回显\",{\"1\":{\"1133\":1,\"1318\":1}}],[\"作为当前partition的leader\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"作为缓存\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"作为\",{\"1\":{\"990\":2}}],[\"作为仓库使用\",{\"1\":{\"761\":1}}],[\"作为最基本的类型\",{\"1\":{\"716\":1}}],[\"作为连接键的列\",{\"1\":{\"565\":1}}],[\"作为副业\",{\"1\":{\"264\":1}}],[\"作为一个完全自由的操作系统\",{\"1\":{\"241\":1}}],[\"作为一个技术人\",{\"1\":{\"85\":1,\"263\":1}}],[\"作为服务端处理时定制化\",{\"1\":{\"211\":1}}],[\"作为后端工程师\",{\"1\":{\"203\":1}}],[\"作为leader\",{\"1\":{\"170\":1}}],[\"作为数据源来可视化监控数据了\",{\"1\":{\"126\":1}}],[\"作为数据源\",{\"1\":{\"126\":1}}],[\"作者\",{\"1\":{\"556\":1,\"615\":1,\"939\":1,\"1462\":1}}],[\"作者生于\",{\"1\":{\"261\":1}}],[\"作者档案\",{\"1\":{\"252\":1,\"255\":1}}],[\"作者设置为\",{\"1\":{\"42\":1}}],[\"作者照片\",{\"1\":{\"3\":1}}],[\"作者信息\",{\"0\":{\"255\":1},\"1\":{\"3\":1,\"768\":1}}],[\"oop\",{\"1\":{\"1481\":2}}],[\"obtainfreshbeanfactory\",{\"1\":{\"1408\":2}}],[\"observer角色减轻了投票的压力\",{\"1\":{\"1196\":1,\"1369\":1}}],[\"observer角色除了不能投票\",{\"1\":{\"1196\":1,\"1369\":1}}],[\"observer\",{\"1\":{\"1196\":1,\"1369\":1}}],[\"observing\",{\"1\":{\"1196\":2,\"1369\":2}}],[\"obj为垃圾\",{\"1\":{\"1394\":1}}],[\"obj\",{\"1\":{\"687\":2,\"691\":1,\"1041\":4,\"1050\":1,\"1242\":4,\"1251\":1,\"1394\":3,\"1396\":4,\"1398\":2,\"1424\":11,\"1468\":3,\"1481\":10}}],[\"objectmonitor\",{\"1\":{\"1481\":5}}],[\"objectfactory\",{\"1\":{\"1412\":2}}],[\"objectfactory<\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"object的同名类并放在classpath中\",{\"1\":{\"1106\":1,\"1297\":1}}],[\"objects\",{\"1\":{\"1058\":2,\"1256\":2,\"1394\":1}}],[\"objectinputstream\",{\"1\":{\"1050\":2,\"1251\":2}}],[\"object类中本身就有equals\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"object>>\",{\"1\":{\"717\":1}}],[\"object和value\",{\"1\":{\"665\":1}}],[\"object\",{\"1\":{\"337\":1,\"338\":5,\"339\":3,\"341\":1,\"488\":1,\"502\":1,\"503\":1,\"652\":1,\"665\":2,\"752\":3,\"761\":2,\"833\":4,\"1041\":1,\"1044\":1,\"1049\":6,\"1057\":1,\"1099\":1,\"1134\":1,\"1173\":5,\"1242\":1,\"1245\":1,\"1250\":6,\"1255\":1,\"1290\":1,\"1319\":1,\"1350\":5,\"1386\":4,\"1394\":1,\"1396\":2,\"1398\":2,\"1404\":4,\"1410\":2,\"1412\":1,\"1414\":4,\"1416\":2,\"1424\":5,\"1446\":1,\"1474\":6,\"1481\":2}}],[\"ognl\",{\"1\":{\"1134\":5,\"1319\":5}}],[\"omgdi\",{\"1\":{\"928\":19}}],[\"omgdi=\",{\"1\":{\"928\":1}}],[\"omgdc\",{\"1\":{\"928\":6}}],[\"omgdc=\",{\"1\":{\"928\":1}}],[\"omg\",{\"1\":{\"928\":4}}],[\"omega^i\",{\"1\":{\"33\":1}}],[\"omega^r\",{\"1\":{\"33\":1}}],[\"omega\",{\"1\":{\"33\":4}}],[\"od\",{\"1\":{\"857\":1,\"858\":3}}],[\"ok\",{\"1\":{\"666\":7,\"929\":1,\"1148\":1,\"1331\":1,\"1420\":1,\"1422\":1,\"1424\":1,\"1494\":1}}],[\"oldtab\",{\"1\":{\"1380\":2}}],[\"oldcap\",{\"1\":{\"1380\":2}}],[\"old\",{\"1\":{\"605\":2,\"1108\":3,\"1299\":3,\"1398\":1,\"1406\":7}}],[\"ollama轻松打造本地llm应用\",{\"1\":{\"289\":1}}],[\"ollama本地调用大模型\",{\"0\":{\"289\":1}}],[\"ollama官网\",{\"1\":{\"286\":1}}],[\"ollama\",{\"0\":{\"286\":1,\"290\":1},\"1\":{\"283\":1,\"286\":3,\"290\":1,\"291\":1,\"292\":3,\"293\":2,\"296\":2,\"297\":2},\"2\":{\"287\":1,\"288\":1,\"298\":1,\"299\":1}}],[\"o次数\",{\"1\":{\"566\":1,\"571\":1}}],[\"o优化\",{\"1\":{\"566\":1}}],[\"o维度\",{\"1\":{\"562\":1}}],[\"owner\",{\"1\":{\"540\":5,\"541\":7,\"1481\":3}}],[\"overriding\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"override确保你正确重写了方法\",{\"1\":{\"1402\":1}}],[\"overrides\",{\"1\":{\"787\":1}}],[\"override\",{\"1\":{\"339\":13,\"817\":5,\"893\":3,\"1001\":1,\"1049\":6,\"1061\":4,\"1062\":2,\"1064\":3,\"1210\":1,\"1250\":6,\"1259\":4,\"1260\":2,\"1262\":3,\"1390\":3,\"1408\":1,\"1416\":1}}],[\"overload\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"overlay=0\",{\"1\":{\"156\":1}}],[\"overlay=w\",{\"1\":{\"156\":2}}],[\"overlay\",{\"1\":{\"156\":1}}],[\"o效率很高\",{\"1\":{\"560\":1}}],[\"o效率\",{\"1\":{\"327\":1}}],[\"o的时间消耗是巨大的\",{\"1\":{\"327\":1}}],[\"o的存取次数\",{\"1\":{\"324\":1}}],[\"o存在机械运动耗费\",{\"1\":{\"327\":1}}],[\"o存取的消耗要高几个数量级\",{\"1\":{\"324\":1}}],[\"o操作中可以读取更多的索引信息\",{\"1\":{\"566\":1}}],[\"o操作\",{\"1\":{\"327\":1,\"560\":1,\"566\":1}}],[\"o操作次数的渐进复杂度\",{\"1\":{\"324\":1}}],[\"o消耗\",{\"1\":{\"324\":1}}],[\"o\",{\"1\":{\"323\":2,\"327\":1,\"401\":1,\"410\":1,\"424\":1,\"425\":1,\"558\":1,\"566\":3,\"669\":1,\"683\":1,\"856\":6,\"857\":4,\"858\":4,\"991\":1,\"1049\":2,\"1124\":1,\"1250\":2,\"1312\":1,\"1420\":1,\"1424\":2,\"1478\":8}}],[\"otherwise>\",{\"1\":{\"848\":1}}],[\"otherwise\",{\"0\":{\"848\":1},\"1\":{\"589\":1,\"850\":1,\"1134\":1,\"1319\":1}}],[\"other\",{\"1\":{\"191\":2,\"622\":1,\"1058\":1,\"1256\":1}}],[\"outof\",{\"1\":{\"1113\":1,\"1301\":1}}],[\"outofmemoryerror\",{\"1\":{\"338\":4}}],[\"outcome==\",{\"1\":{\"928\":4}}],[\"out\",{\"1\":{\"162\":4,\"163\":1,\"176\":1,\"192\":6,\"193\":2,\"194\":4,\"195\":6,\"196\":4,\"197\":4,\"199\":2,\"200\":2,\"335\":1,\"340\":1,\"341\":3,\"342\":3,\"390\":5,\"405\":1,\"413\":1,\"417\":1,\"430\":1,\"441\":3,\"711\":2,\"752\":2,\"755\":3,\"800\":4,\"810\":2,\"820\":2,\"826\":5,\"847\":1,\"848\":1,\"849\":1,\"850\":1,\"852\":6,\"853\":2,\"856\":2,\"857\":2,\"858\":3,\"891\":6,\"893\":1,\"1001\":4,\"1041\":2,\"1042\":2,\"1043\":15,\"1049\":4,\"1061\":9,\"1062\":4,\"1064\":3,\"1084\":1,\"1133\":1,\"1210\":4,\"1242\":2,\"1243\":2,\"1244\":15,\"1250\":4,\"1259\":9,\"1260\":4,\"1262\":3,\"1277\":1,\"1318\":1,\"1386\":2,\"1390\":4,\"1392\":2,\"1402\":1,\"1424\":1,\"1442\":1,\"1448\":1,\"1466\":2,\"1474\":3,\"1478\":3}}],[\"outfile\",{\"1\":{\"144\":2}}],[\"outputencoding>\",{\"1\":{\"907\":1}}],[\"outputencoding>utf\",{\"1\":{\"907\":1}}],[\"output\",{\"1\":{\"111\":1,\"146\":1,\"148\":2,\"149\":2,\"150\":1,\"151\":3,\"152\":4,\"153\":1,\"155\":1,\"156\":4,\"157\":1}}],[\"osr\",{\"1\":{\"1117\":3,\"1305\":3}}],[\"os\",{\"1\":{\"139\":1}}],[\"osi\",{\"1\":{\"121\":1}}],[\"orange等\",{\"1\":{\"1424\":1}}],[\"orange\",{\"1\":{\"1424\":1}}],[\"oracle\",{\"1\":{\"1041\":1,\"1058\":1,\"1242\":1,\"1256\":1}}],[\"oracle可以用\",{\"1\":{\"436\":1}}],[\"oriented\",{\"1\":{\"1408\":1}}],[\"origin\",{\"1\":{\"459\":1,\"976\":2,\"1093\":1,\"1286\":1}}],[\"originalstream\",{\"1\":{\"163\":1}}],[\"orm\",{\"1\":{\"1168\":1,\"1345\":1,\"1416\":1}}],[\"ordinals\",{\"1\":{\"966\":1}}],[\"ord\",{\"1\":{\"966\":2}}],[\"orderaccess\",{\"1\":{\"1382\":5}}],[\"orderly\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"orderid\",{\"1\":{\"857\":1,\"858\":1}}],[\"orderdetail类\",{\"1\":{\"858\":1}}],[\"orderdetail\",{\"1\":{\"857\":3,\"858\":6,\"860\":1}}],[\"order类\",{\"1\":{\"857\":1}}],[\"ordermapper\",{\"1\":{\"856\":4,\"857\":1,\"858\":1}}],[\"ordermapper接口\",{\"1\":{\"856\":1}}],[\"orderuserlazyresultmap\",{\"1\":{\"860\":1}}],[\"orderuserdetailitemresultmap\",{\"1\":{\"858\":2}}],[\"orderuserdetailresultmap\",{\"1\":{\"857\":2}}],[\"orderuserresultmap\",{\"1\":{\"856\":2}}],[\"orderuser\",{\"1\":{\"856\":6}}],[\"ordernumber\",{\"1\":{\"855\":1,\"856\":1,\"857\":1}}],[\"ordered\",{\"1\":{\"656\":1}}],[\"order\",{\"1\":{\"430\":6,\"753\":4,\"855\":3,\"856\":11,\"857\":10,\"858\":14,\"860\":1,\"890\":1,\"1149\":1,\"1332\":1}}],[\"org\",{\"1\":{\"139\":1,\"142\":1,\"169\":1,\"222\":2,\"396\":1,\"438\":1,\"441\":3,\"752\":5,\"761\":1,\"764\":1,\"768\":1,\"778\":8,\"802\":1,\"806\":2,\"807\":2,\"808\":2,\"810\":4,\"817\":1,\"818\":2,\"820\":6,\"825\":4,\"826\":8,\"829\":1,\"833\":1,\"835\":6,\"842\":3,\"845\":2,\"852\":6,\"853\":4,\"863\":1,\"875\":5,\"878\":9,\"880\":2,\"881\":11,\"882\":12,\"883\":4,\"889\":2,\"890\":4,\"891\":7,\"893\":7,\"894\":6,\"907\":4,\"912\":3,\"928\":10,\"939\":2,\"967\":1,\"1050\":1,\"1189\":2,\"1251\":1,\"1364\":2,\"1416\":1,\"1442\":5,\"1448\":4,\"1507\":1}}],[\"or\",{\"0\":{\"591\":1},\"1\":{\"129\":1,\"441\":2,\"564\":3,\"589\":1,\"590\":1,\"591\":1,\"790\":1,\"829\":1,\"900\":2,\"949\":1,\"1149\":1,\"1173\":2,\"1332\":1,\"1350\":2,\"1481\":2}}],[\"ofmillis\",{\"1\":{\"1448\":1}}],[\"of源代码和动态的思考过程增加了解释的轻松和趣味性\",{\"1\":{\"1392\":1}}],[\"oftype\",{\"1\":{\"860\":1}}],[\"oftype=\",{\"1\":{\"857\":1,\"858\":1,\"860\":1}}],[\"of\",{\"1\":{\"123\":1,\"129\":1,\"160\":2,\"169\":3,\"406\":1,\"472\":1,\"887\":2,\"1028\":1,\"1029\":1,\"1058\":4,\"1169\":1,\"1170\":1,\"1173\":1,\"1232\":1,\"1233\":1,\"1256\":4,\"1346\":1,\"1347\":1,\"1350\":1,\"1392\":1,\"1408\":2,\"1412\":1}}],[\"offset\",{\"1\":{\"670\":1,\"721\":1,\"889\":3,\"890\":1,\"1026\":1,\"1114\":1,\"1118\":2,\"1230\":1,\"1302\":1,\"1306\":2,\"1442\":1,\"1481\":19}}],[\"offsets\",{\"1\":{\"486\":1,\"493\":3}}],[\"offects\",{\"1\":{\"486\":1}}],[\"offer\",{\"1\":{\"117\":1,\"996\":1}}],[\"off\",{\"1\":{\"123\":3}}],[\"o处理速度\",{\"1\":{\"123\":1}}],[\"ocean\",{\"1\":{\"652\":1}}],[\"octet\",{\"1\":{\"123\":1}}],[\"ocw\",{\"1\":{\"80\":1}}],[\"once\",{\"1\":{\"950\":1}}],[\"only\",{\"0\":{\"651\":1},\"1\":{\"540\":1,\"541\":1,\"1158\":1,\"1338\":1,\"1398\":1,\"1420\":2}}],[\"only设置为on\",{\"1\":{\"123\":1}}],[\"one\",{\"1\":{\"123\":1,\"950\":1,\"1035\":1,\"1239\":1}}],[\"on\",{\"1\":{\"123\":17,\"568\":2,\"589\":1,\"711\":2,\"856\":2,\"857\":2,\"858\":3,\"883\":2,\"887\":1,\"890\":1,\"1017\":2,\"1058\":1,\"1085\":1,\"1223\":2,\"1256\":1,\"1278\":1,\"1410\":1,\"1420\":1,\"1478\":1}}],[\"op\",{\"1\":{\"1478\":2}}],[\"operator\",{\"1\":{\"489\":1}}],[\"openjdk\",{\"1\":{\"1514\":1}}],[\"openssl\",{\"1\":{\"962\":1}}],[\"opensession\",{\"1\":{\"810\":2,\"820\":1,\"826\":1,\"853\":1}}],[\"opencv\",{\"1\":{\"959\":2,\"961\":1}}],[\"opentsdb等\",{\"1\":{\"947\":1}}],[\"opening\",{\"1\":{\"852\":3,\"853\":1}}],[\"open=\",{\"1\":{\"787\":1,\"850\":1}}],[\"open\",{\"1\":{\"123\":10,\"169\":1,\"296\":6,\"297\":2,\"677\":1,\"850\":1,\"1420\":1,\"1466\":1,\"1478\":2}}],[\"opened\",{\"1\":{\"123\":1}}],[\"opts\",{\"1\":{\"765\":1}}],[\"optional>\",{\"1\":{\"771\":1,\"772\":1}}],[\"options\",{\"0\":{\"486\":1},\"1\":{\"144\":3,\"459\":1,\"486\":2,\"493\":1}}],[\"optimistic\",{\"1\":{\"1150\":1,\"1333\":1}}],[\"optimization\",{\"1\":{\"590\":3,\"611\":1}}],[\"optimize\",{\"1\":{\"574\":4}}],[\"optimalnumofhashfunctions\",{\"1\":{\"393\":1}}],[\"optimalnumofbits\",{\"1\":{\"393\":1}}],[\"opt\",{\"1\":{\"111\":2}}],[\"ojq9fmnpu\",{\"1\":{\"80\":1}}],[\"原来如此\",{\"1\":{\"1398\":1,\"1414\":1,\"1424\":1,\"1452\":1}}],[\"原来jvm已经把这事儿都帮我干了\",{\"1\":{\"1392\":1}}],[\"原有的hash值都需要重新计算\",{\"1\":{\"1380\":1}}],[\"原型设计\",{\"1\":{\"1502\":1}}],[\"原型\",{\"1\":{\"1176\":1,\"1353\":1,\"1410\":1,\"1502\":1}}],[\"原数据不放到rollback\",{\"1\":{\"1147\":1,\"1330\":1}}],[\"原子操作\",{\"1\":{\"727\":1}}],[\"原子递增\",{\"1\":{\"666\":1}}],[\"原子\",{\"1\":{\"656\":1}}],[\"原子性\",{\"1\":{\"616\":1}}],[\"原理又是什么\",{\"1\":{\"1410\":1}}],[\"原理\",{\"0\":{\"402\":1,\"426\":1},\"1\":{\"833\":1}}],[\"原理介绍\",{\"0\":{\"386\":1},\"1\":{\"392\":1}}],[\"原因和前面说的类型擦除有关\",{\"1\":{\"1424\":1}}],[\"原因如下\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"原因\",{\"1\":{\"822\":1,\"1030\":1,\"1234\":1}}],[\"原因为\",{\"1\":{\"339\":1}}],[\"原因当数据量非常大时\",{\"1\":{\"319\":1}}],[\"原文地址\",{\"1\":{\"1494\":1,\"1502\":1,\"1507\":1,\"1515\":1,\"1525\":1}}],[\"原文\",{\"1\":{\"80\":1,\"164\":1,\"297\":1,\"727\":1,\"738\":1}}],[\"原创\",{\"1\":{\"53\":1}}],[\"技术选型\",{\"1\":{\"1502\":2}}],[\"技术生涯也会更上一层楼\",{\"1\":{\"1406\":1}}],[\"技术来为每个线程分配一块私有的内存缓冲区\",{\"1\":{\"1388\":1}}],[\"技术人员走的最远的\",{\"1\":{\"1380\":1}}],[\"技术人的成长记录\",{\"1\":{\"983\":1,\"987\":1,\"1013\":1,\"1083\":1,\"1098\":1,\"1112\":1,\"1128\":1,\"1167\":1,\"1180\":1,\"1193\":1}}],[\"技术也不错\",{\"1\":{\"1380\":1}}],[\"技术还会更上一层楼\",{\"1\":{\"1380\":1}}],[\"技术实现的内存回收机制\",{\"1\":{\"698\":1}}],[\"技术视角\",{\"1\":{\"547\":1}}],[\"技术和业务角度看世界\",{\"1\":{\"544\":1}}],[\"技术和业务角度看区块链\",{\"1\":{\"77\":1,\"531\":1}}],[\"技术上\",{\"1\":{\"263\":1}}],[\"技术自媒体\",{\"1\":{\"223\":1}}],[\"技术书籍\",{\"0\":{\"11\":1}}],[\"绘画\",{\"1\":{\"73\":1}}],[\"a和b相互引用\",{\"1\":{\"1394\":1}}],[\"a和bean\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"aqs\",{\"1\":{\"1390\":12}}],[\"aof重写机制我现在全明白了\",{\"1\":{\"1420\":1}}],[\"aof重写的基本流程是\",{\"1\":{\"1420\":1}}],[\"aof重写的机制原理能详细说下么\",{\"1\":{\"1420\":1}}],[\"aof重写也采用fork方式进行\",{\"1\":{\"1420\":1}}],[\"aof的优点是每次修改都会同步到磁盘\",{\"1\":{\"1420\":1}}],[\"aof文件就是一个命令的记录\",{\"1\":{\"1420\":1}}],[\"aof\",{\"1\":{\"1158\":1,\"1338\":1,\"1420\":4}}],[\"aop是通过动态代理实现的\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"aop中最重要的注解有\",{\"1\":{\"1402\":1}}],[\"aop中的注解呢\",{\"1\":{\"1402\":1}}],[\"aop中\",{\"1\":{\"1174\":2,\"1351\":2}}],[\"aop中有大量使用\",{\"1\":{\"745\":1}}],[\"aop里面的几个名词的概念\",{\"0\":{\"1174\":1,\"1351\":1}}],[\"aop举例说明\",{\"0\":{\"1169\":1,\"1346\":1}}],[\"aop模块是spring的aop库\",{\"1\":{\"1168\":1,\"1345\":1}}],[\"aop\",{\"1\":{\"752\":1,\"1168\":1,\"1345\":1,\"1408\":6,\"1410\":2,\"1412\":1,\"1474\":2},\"2\":{\"754\":1}}],[\"aop切点类\",{\"0\":{\"752\":1}}],[\"aop<\",{\"1\":{\"750\":1,\"1049\":1,\"1250\":1}}],[\"a线程在通过迭代器遍历一个\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"await\",{\"1\":{\"1061\":3,\"1259\":3,\"1390\":4}}],[\"awk\",{\"0\":{\"110\":1},\"1\":{\"111\":4}}],[\"a^\",{\"1\":{\"980\":1}}],[\"azk8s\",{\"1\":{\"915\":1}}],[\"a>\",{\"1\":{\"895\":1}}],[\"ajax\",{\"1\":{\"894\":1,\"1093\":1,\"1286\":1}}],[\"atomicinteger\",{\"1\":{\"1476\":2}}],[\"atomicity\",{\"1\":{\"1144\":1,\"1327\":1}}],[\"atomicreplacefile\",{\"1\":{\"1420\":1}}],[\"atomic\",{\"1\":{\"1200\":1,\"1373\":1,\"1382\":10}}],[\"attributes\",{\"1\":{\"1185\":1,\"1360\":1}}],[\"at\",{\"1\":{\"825\":4}}],[\"a项目依赖于log4j\",{\"1\":{\"771\":1}}],[\"age=20\",{\"1\":{\"852\":6,\"853\":2}}],[\"age=22\",{\"1\":{\"822\":1}}],[\"age\",{\"1\":{\"492\":1,\"564\":1,\"568\":5,\"799\":3,\"800\":1,\"810\":5,\"818\":6,\"822\":2,\"826\":4,\"845\":2,\"848\":6,\"849\":8,\"856\":1,\"1418\":1,\"1494\":1,\"1507\":6}}],[\"agent\",{\"1\":{\"123\":2,\"211\":1}}],[\"a3\",{\"1\":{\"319\":2}}],[\"amend\",{\"1\":{\"981\":1}}],[\"amd64\",{\"1\":{\"961\":1}}],[\"amp\",{\"1\":{\"806\":2}}],[\"amount\",{\"1\":{\"540\":4,\"541\":4}}],[\"ambassadorid=9a1b569b368440f6bd582fdaa3ec2702\",{\"1\":{\"238\":1}}],[\"ambassador\",{\"1\":{\"238\":1}}],[\"am\",{\"1\":{\"229\":1}}],[\"a8e65c040d47\",{\"1\":{\"209\":1}}],[\"advice\",{\"1\":{\"1174\":3,\"1351\":3}}],[\"advice通知\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"adlist\",{\"1\":{\"684\":1}}],[\"adminclient\",{\"1\":{\"1440\":1}}],[\"admin\",{\"1\":{\"195\":4,\"951\":2,\"1189\":1,\"1364\":1,\"1507\":1}}],[\"adddocument\",{\"1\":{\"1462\":1}}],[\"addtorememberedsets\",{\"1\":{\"1398\":1}}],[\"addtomarked\",{\"1\":{\"1394\":1}}],[\"addpathpatterns\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"addinterceptor\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"addinterceptors\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"addifnotexist\",{\"1\":{\"390\":2}}],[\"addlistener\",{\"1\":{\"991\":1}}],[\"addentry\",{\"1\":{\"1406\":1}}],[\"added\",{\"1\":{\"950\":1}}],[\"addelements\",{\"1\":{\"339\":3}}],[\"addelem\",{\"1\":{\"337\":1,\"338\":3,\"339\":3}}],[\"addattribute\",{\"1\":{\"894\":2}}],[\"addall\",{\"1\":{\"337\":1,\"338\":2,\"339\":2,\"406\":1}}],[\"addobject\",{\"1\":{\"894\":1,\"895\":1}}],[\"addnodeiterator\",{\"1\":{\"339\":3}}],[\"addnodeheader\",{\"1\":{\"339\":4}}],[\"addnode\",{\"1\":{\"339\":7}}],[\"addreplyerror\",{\"1\":{\"1422\":1}}],[\"addrememberedsetentry\",{\"1\":{\"1398\":1}}],[\"address\",{\"1\":{\"540\":3,\"541\":4}}],[\"addr\",{\"1\":{\"123\":4,\"711\":2}}],[\"addr与$http\",{\"1\":{\"123\":1}}],[\"add拿到的ip地址是反向代理服务器的ip地址\",{\"1\":{\"123\":1}}],[\"add\",{\"1\":{\"111\":1,\"123\":2,\"126\":1,\"296\":1,\"390\":3,\"406\":1,\"570\":1,\"589\":1,\"652\":1,\"915\":1,\"929\":1,\"976\":2,\"978\":1,\"981\":4,\"1404\":1,\"1424\":3,\"1440\":3,\"1462\":2}}],[\"a491\",{\"1\":{\"189\":1}}],[\"a=b\",{\"1\":{\"174\":1}}],[\"afterpropertiesset\",{\"1\":{\"1410\":6}}],[\"afterexecute\",{\"1\":{\"1384\":1}}],[\"aftercompletion\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"afterthrowing\",{\"1\":{\"752\":2,\"1402\":1}}],[\"afterreturning\",{\"1\":{\"752\":2,\"1402\":1}}],[\"after\",{\"1\":{\"169\":1,\"666\":1,\"752\":3,\"1174\":3,\"1351\":3,\"1402\":1,\"1474\":1}}],[\"a是\",{\"1\":{\"162\":1}}],[\"aac\",{\"1\":{\"149\":3,\"162\":5}}],[\"acl\",{\"1\":{\"1466\":1}}],[\"ack\",{\"1\":{\"1452\":2}}],[\"acks\",{\"1\":{\"1120\":6,\"1308\":6}}],[\"acquired\",{\"1\":{\"1481\":1}}],[\"acquire\",{\"1\":{\"1390\":1,\"1428\":1,\"1481\":1}}],[\"acquireretryattempts\",{\"1\":{\"878\":1}}],[\"actually\",{\"1\":{\"1408\":1}}],[\"actuator\",{\"1\":{\"948\":1,\"950\":1,\"1188\":1,\"1363\":1}}],[\"actuator<\",{\"1\":{\"948\":1}}],[\"active\",{\"1\":{\"1416\":1}}],[\"activiti会对数据库中所有表进行更新操作\",{\"1\":{\"927\":1}}],[\"activiti在启动时\",{\"1\":{\"927\":1}}],[\"activate\",{\"1\":{\"927\":1}}],[\"actions\",{\"1\":{\"194\":2}}],[\"action\",{\"1\":{\"192\":7,\"194\":5,\"196\":3}}],[\"acid\",{\"1\":{\"616\":1,\"1144\":1,\"1327\":1}}],[\"ac37\",{\"1\":{\"209\":1}}],[\"according\",{\"1\":{\"950\":1}}],[\"acc是一种常见默认视频\",{\"1\":{\"149\":1}}],[\"acc\",{\"1\":{\"149\":1}}],[\"acceptor\",{\"1\":{\"1200\":4,\"1373\":4}}],[\"accept\",{\"1\":{\"123\":1,\"211\":3,\"894\":1,\"1478\":2}}],[\"accessed\",{\"1\":{\"129\":1}}],[\"access\",{\"1\":{\"123\":8}}],[\"acodec\",{\"1\":{\"144\":1,\"146\":1,\"149\":2,\"162\":1}}],[\"ac\",{\"1\":{\"144\":1}}],[\"arg\",{\"1\":{\"1176\":6,\"1353\":6,\"1390\":2}}],[\"args\",{\"1\":{\"341\":1,\"342\":1,\"390\":1,\"405\":1,\"417\":1,\"430\":1,\"441\":1,\"755\":2,\"800\":1,\"810\":1,\"833\":1,\"1042\":1,\"1043\":1,\"1061\":2,\"1062\":1,\"1064\":1,\"1243\":1,\"1244\":1,\"1259\":2,\"1260\":1,\"1262\":1,\"1386\":1,\"1390\":2,\"1442\":1,\"1448\":1,\"1466\":1,\"1474\":3,\"1478\":1}}],[\"ar=isr+osr\",{\"1\":{\"1113\":1,\"1301\":1}}],[\"ar又代表什么\",{\"0\":{\"1113\":1,\"1301\":1}}],[\"arbitrary\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"architecture\",{\"1\":{\"1030\":1,\"1234\":1}}],[\"archive\",{\"1\":{\"111\":2,\"466\":1,\"982\":1}}],[\"archetype\",{\"1\":{\"766\":4,\"767\":4}}],[\"around\",{\"1\":{\"752\":4,\"1049\":1,\"1250\":1,\"1402\":1}}],[\"artifact\",{\"1\":{\"875\":1,\"901\":1,\"902\":1}}],[\"artifactid\",{\"1\":{\"768\":2}}],[\"artifactid>\",{\"1\":{\"711\":1,\"750\":1,\"771\":2,\"772\":4,\"773\":3,\"778\":9,\"798\":1,\"805\":1,\"819\":1,\"875\":25,\"907\":6,\"925\":3,\"937\":2,\"948\":3,\"1049\":1,\"1250\":1,\"1507\":2,\"1522\":1,\"1525\":1}}],[\"articles\",{\"1\":{\"570\":2,\"1169\":1,\"1346\":1}}],[\"article\",{\"1\":{\"277\":1,\"296\":2,\"328\":1,\"441\":1,\"447\":2,\"478\":1,\"583\":1,\"718\":1,\"738\":1,\"980\":1,\"982\":2,\"987\":1}}],[\"arrindex++\",{\"1\":{\"405\":1}}],[\"arrindex\",{\"1\":{\"405\":1}}],[\"arrappend\",{\"1\":{\"405\":2}}],[\"array\",{\"1\":{\"405\":2,\"406\":1,\"413\":8,\"1042\":1,\"1243\":1,\"1478\":1}}],[\"arraycopy是调用native方法\",{\"1\":{\"338\":1}}],[\"arraycopy\",{\"1\":{\"338\":3}}],[\"arrays\",{\"1\":{\"338\":2,\"405\":6,\"413\":1,\"417\":3,\"430\":2,\"752\":2}}],[\"arraylist线程安全吗\",{\"1\":{\"1446\":1}}],[\"arraylist的源码分析得也比较到位\",{\"1\":{\"1404\":1}}],[\"arraylist的底层是数组\",{\"1\":{\"1074\":1,\"1076\":1,\"1269\":1,\"1271\":1}}],[\"arraylist底层采用动态数组实现\",{\"1\":{\"1404\":1}}],[\"arraylist每次扩容的大小为原来的1\",{\"1\":{\"1075\":1,\"1270\":1}}],[\"arraylist<integer>\",{\"1\":{\"1404\":1}}],[\"arraylist<map\",{\"1\":{\"1001\":1,\"1210\":1}}],[\"arraylist<>\",{\"1\":{\"338\":1,\"339\":1,\"1404\":1,\"1440\":1,\"1462\":2}}],[\"arraylist<e>\",{\"1\":{\"338\":1,\"1404\":1}}],[\"arraylist\",{\"0\":{\"1074\":1,\"1269\":1},\"1\":{\"338\":3,\"406\":2,\"1069\":1,\"1076\":5,\"1264\":1,\"1271\":5,\"1404\":3,\"1446\":4}}],[\"arr\",{\"1\":{\"405\":31,\"417\":32}}],[\"arithmeticexception\",{\"1\":{\"200\":1}}],[\"area\",{\"1\":{\"1100\":1,\"1291\":1}}],[\"are\",{\"1\":{\"169\":2,\"174\":1,\"589\":1,\"842\":2,\"884\":1}}],[\"ar\",{\"1\":{\"144\":1,\"1113\":1,\"1114\":1,\"1117\":2,\"1301\":1,\"1302\":1,\"1305\":2}}],[\"also\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"algorithm\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"alerting\",{\"1\":{\"950\":1}}],[\"alertmanagers\",{\"1\":{\"950\":1}}],[\"alertmanager\",{\"1\":{\"950\":2}}],[\"alter\",{\"1\":{\"570\":2,\"574\":3}}],[\"already\",{\"1\":{\"540\":1,\"541\":1,\"1173\":1,\"1350\":1}}],[\"always\",{\"1\":{\"296\":1}}],[\"alpine\",{\"0\":{\"244\":1},\"1\":{\"1514\":1}}],[\"aliyuncs\",{\"1\":{\"1507\":1}}],[\"aliyun\",{\"1\":{\"238\":1,\"900\":1,\"901\":1,\"936\":1,\"948\":1}}],[\"aliases\",{\"1\":{\"1507\":1}}],[\"alias=\",{\"1\":{\"831\":2}}],[\"alias\",{\"1\":{\"123\":2,\"831\":1}}],[\"allocation\",{\"1\":{\"1388\":1}}],[\"allocate\",{\"1\":{\"1056\":2,\"1254\":2,\"1478\":1}}],[\"allowpublickeyretrieval=true\",{\"1\":{\"1507\":1}}],[\"allowearlyreference\",{\"1\":{\"1173\":3,\"1350\":3}}],[\"allows\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"allowmultiqueries=true\",{\"1\":{\"806\":1}}],[\"allow\",{\"1\":{\"459\":2,\"1408\":1,\"1412\":1}}],[\"allkeys\",{\"1\":{\"699\":1}}],[\"all字段中\",{\"1\":{\"493\":1}}],[\"all字段解读\",{\"1\":{\"447\":1}}],[\"all的作用\",{\"1\":{\"489\":1}}],[\"all在7\",{\"1\":{\"489\":1}}],[\"all\",{\"0\":{\"488\":1},\"1\":{\"123\":1,\"493\":1,\"591\":1,\"1035\":1,\"1058\":1,\"1120\":1,\"1239\":1,\"1256\":1,\"1308\":1,\"1390\":4}}],[\"anno\",{\"1\":{\"1402\":3}}],[\"annotation等\",{\"1\":{\"1402\":1}}],[\"annotationattributes\",{\"1\":{\"1185\":1,\"1360\":1}}],[\"annotationmetadata\",{\"1\":{\"1185\":3,\"1360\":3}}],[\"annotation方式可以指定被哪些注解修饰的代码进行拦截\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"annotation表示这个切点切到一个注解上\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"annotation包中可以找到\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"annotations\",{\"1\":{\"889\":2}}],[\"annotation\",{\"1\":{\"744\":1,\"749\":1,\"751\":3,\"752\":6,\"753\":1,\"881\":1,\"882\":1,\"891\":2,\"893\":3,\"894\":2,\"912\":3,\"939\":1,\"1049\":2,\"1250\":2},\"2\":{\"754\":1}}],[\"any\",{\"1\":{\"950\":1,\"1058\":1,\"1256\":1}}],[\"anyhow\",{\"1\":{\"170\":1}}],[\"anotationmethodhandleradapter\",{\"1\":{\"882\":1}}],[\"another\",{\"1\":{\"123\":2,\"1481\":1}}],[\"answer\",{\"1\":{\"510\":4}}],[\"analyzed字段不能使用\",{\"1\":{\"493\":1}}],[\"analyzed字段\",{\"1\":{\"493\":1}}],[\"analyze\",{\"1\":{\"490\":3}}],[\"analyzer\",{\"0\":{\"490\":1},\"1\":{\"464\":7,\"490\":2,\"493\":4,\"496\":1}}],[\"analysis\",{\"1\":{\"465\":2,\"466\":1}}],[\"anxn+1\",{\"1\":{\"319\":1}}],[\"an+1\",{\"1\":{\"319\":1}}],[\"an\",{\"1\":{\"144\":1,\"150\":1,\"153\":1,\"319\":2,\"510\":1,\"589\":2,\"677\":1,\"1058\":2,\"1173\":1,\"1256\":2,\"1350\":1}}],[\"anull\",{\"1\":{\"123\":1}}],[\"android\",{\"1\":{\"1408\":3}}],[\"andt1\",{\"1\":{\"864\":1}}],[\"and\",{\"1\":{\"123\":1,\"129\":1,\"169\":6,\"221\":1,\"226\":2,\"229\":2,\"306\":3,\"489\":1,\"568\":1,\"569\":1,\"574\":1,\"589\":1,\"592\":1,\"619\":1,\"621\":2,\"625\":1,\"636\":1,\"642\":1,\"677\":1,\"826\":1,\"842\":4,\"847\":2,\"848\":4,\"849\":3,\"863\":8,\"864\":5,\"890\":2,\"950\":1,\"1058\":1,\"1062\":2,\"1173\":1,\"1256\":1,\"1260\":2,\"1350\":1,\"1394\":1,\"1398\":1,\"1416\":1,\"1422\":1,\"1476\":1}}],[\"audio的缩与\",{\"1\":{\"162\":1}}],[\"autoconfigure\",{\"1\":{\"1189\":2,\"1364\":2}}],[\"autoconfiguration\",{\"1\":{\"1189\":3,\"1364\":3}}],[\"autocommitonclose\",{\"1\":{\"878\":1}}],[\"autoboxing\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"autowired就是运行期读取的\",{\"1\":{\"1402\":1}}],[\"autowired\",{\"1\":{\"891\":4,\"893\":5,\"894\":2,\"1402\":3}}],[\"automapping\",{\"1\":{\"856\":1,\"857\":1}}],[\"automapping=\",{\"1\":{\"856\":2,\"857\":3,\"858\":4,\"860\":2}}],[\"auto\",{\"1\":{\"436\":1,\"570\":1,\"622\":5,\"638\":1,\"789\":2,\"855\":2,\"858\":4,\"887\":2,\"948\":1,\"1064\":3,\"1262\":3}}],[\"autoindex\",{\"1\":{\"123\":1}}],[\"authormapper\",{\"1\":{\"835\":2}}],[\"author\",{\"1\":{\"341\":1,\"342\":1,\"390\":1,\"405\":1,\"430\":1,\"751\":1,\"752\":1,\"800\":1,\"888\":2,\"889\":2,\"891\":3,\"892\":5,\"893\":4,\"894\":1,\"912\":1,\"1061\":2,\"1062\":1,\"1064\":1,\"1132\":1,\"1259\":2,\"1260\":1,\"1262\":1,\"1317\":1}}],[\"authorization\",{\"1\":{\"211\":2,\"459\":1}}],[\"auth\",{\"1\":{\"123\":2,\"1422\":1}}],[\"aux\",{\"1\":{\"111\":1}}],[\"avoid\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"available\",{\"1\":{\"842\":2}}],[\"availability\",{\"1\":{\"664\":1,\"1035\":2,\"1197\":1,\"1239\":1,\"1370\":1}}],[\"avl\",{\"1\":{\"319\":2}}],[\"av1903594994\",{\"1\":{\"296\":1}}],[\"avfoundation\",{\"1\":{\"162\":7,\"163\":1}}],[\"avi文件转为mp4\",{\"1\":{\"148\":1}}],[\"avi\",{\"1\":{\"148\":1}}],[\"av\",{\"1\":{\"111\":1}}],[\"aba\",{\"1\":{\"1476\":2}}],[\"abortpolicy\",{\"1\":{\"1384\":2}}],[\"above\",{\"1\":{\"493\":3}}],[\"abstractautowirecapablebeanfactory\",{\"1\":{\"1410\":2,\"1412\":1}}],[\"abstractapplicationcontext\",{\"1\":{\"1408\":2}}],[\"abstractxmlapplicationcontext\",{\"1\":{\"1408\":1}}],[\"abstractlist<e>\",{\"1\":{\"1404\":1}}],[\"abstractqueuedsynchronizer\",{\"1\":{\"1390\":3}}],[\"abstract\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"abc\",{\"1\":{\"593\":2,\"595\":2,\"660\":1,\"1149\":1,\"1332\":1}}],[\"ab7b\",{\"1\":{\"189\":1}}],[\"ab\",{\"1\":{\"111\":1}}],[\"a2\",{\"1\":{\"111\":1,\"319\":2}}],[\"a1\",{\"1\":{\"111\":1,\"319\":2}}],[\"a\",{\"1\":{\"107\":1,\"111\":1,\"129\":3,\"162\":5,\"163\":1,\"169\":4,\"193\":1,\"297\":1,\"341\":2,\"392\":1,\"406\":1,\"417\":2,\"464\":1,\"473\":1,\"510\":1,\"561\":2,\"589\":1,\"598\":2,\"666\":2,\"667\":2,\"677\":1,\"698\":1,\"770\":3,\"890\":7,\"950\":2,\"980\":8,\"1025\":1,\"1035\":2,\"1045\":1,\"1058\":3,\"1061\":14,\"1145\":4,\"1169\":1,\"1171\":2,\"1173\":2,\"1175\":1,\"1177\":1,\"1229\":1,\"1239\":1,\"1246\":1,\"1256\":3,\"1259\":14,\"1328\":4,\"1346\":1,\"1348\":2,\"1350\":2,\"1352\":1,\"1354\":1,\"1382\":1,\"1392\":2,\"1394\":4,\"1408\":2,\"1410\":2,\"1412\":2,\"1424\":2,\"1476\":2,\"1502\":2}}],[\"apring\",{\"1\":{\"1168\":1,\"1345\":1}}],[\"append|o\",{\"1\":{\"1420\":1}}],[\"append\",{\"1\":{\"1049\":1,\"1158\":1,\"1250\":1,\"1338\":1,\"1420\":2}}],[\"appender>\",{\"1\":{\"884\":1}}],[\"apple就是实际类型参数\",{\"1\":{\"1424\":1}}],[\"apple\",{\"1\":{\"1424\":7}}],[\"applicaton\",{\"1\":{\"1183\":1,\"1358\":1}}],[\"applicationcontext还能以声明的方式创建\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"applicationcontext启动后预载入所有的单实例bean\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"applicationcontext\",{\"1\":{\"1175\":2,\"1183\":1,\"1187\":1,\"1352\":2,\"1358\":1,\"1362\":1}}],[\"applicationcontext接口作为beanfactory的子类\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"applications\",{\"1\":{\"169\":4}}],[\"application\",{\"1\":{\"123\":1,\"211\":1,\"459\":1,\"489\":3,\"894\":2,\"1049\":1,\"1084\":1,\"1090\":1,\"1183\":1,\"1250\":1,\"1277\":1,\"1283\":1,\"1358\":1,\"1507\":1}}],[\"applybeanpostprocessorsafterinstantiation\",{\"1\":{\"1412\":1}}],[\"apply\",{\"1\":{\"929\":1,\"979\":5}}],[\"appointexception\",{\"1\":{\"892\":4,\"893\":2}}],[\"appointexecution\",{\"1\":{\"892\":6,\"893\":10,\"894\":6}}],[\"appointstateenum\",{\"1\":{\"892\":9,\"893\":5,\"894\":4}}],[\"appointtime\",{\"1\":{\"888\":1}}],[\"appoint\",{\"1\":{\"887\":1,\"890\":1,\"892\":1,\"893\":6,\"894\":8}}],[\"appointmentdaotest\",{\"1\":{\"891\":3}}],[\"appointmentdao\",{\"1\":{\"889\":2,\"890\":3,\"891\":4,\"893\":5}}],[\"appointment\",{\"1\":{\"887\":3,\"888\":3,\"889\":3,\"890\":3,\"891\":5,\"892\":7,\"893\":4}}],[\"app>\",{\"1\":{\"883\":1}}],[\"app\",{\"1\":{\"296\":1,\"722\":1,\"883\":2,\"913\":2,\"1392\":2,\"1514\":2,\"1525\":1}}],[\"apiresponse<>\",{\"1\":{\"1494\":3}}],[\"apiresponse<t>\",{\"1\":{\"1494\":1}}],[\"apiresponse\",{\"1\":{\"1494\":3}}],[\"apifather\",{\"1\":{\"1494\":1}}],[\"api和分布式特性\",{\"1\":{\"1458\":1}}],[\"api我会单独写一个代码案例做讲解\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"api<\",{\"1\":{\"875\":1}}],[\"api管理swagger\",{\"1\":{\"447\":1}}],[\"apikey\",{\"1\":{\"211\":1}}],[\"api\",{\"1\":{\"205\":2,\"209\":3,\"294\":2,\"296\":1,\"297\":1,\"337\":1,\"453\":1,\"491\":1,\"676\":1,\"769\":1,\"989\":3,\"991\":1,\"1025\":1,\"1229\":1,\"1494\":1}}],[\"apache\",{\"1\":{\"102\":2,\"123\":2,\"169\":1,\"174\":1,\"441\":3,\"453\":1,\"761\":1,\"764\":2,\"765\":1,\"772\":1,\"773\":1,\"778\":6,\"810\":4,\"817\":1,\"820\":4,\"825\":4,\"826\":4,\"842\":3,\"852\":6,\"853\":4,\"875\":4,\"889\":2,\"907\":4,\"1442\":5,\"1448\":4,\"1507\":1}}],[\"apt\",{\"1\":{\"99\":2}}],[\"aio\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"airdrop\",{\"1\":{\"540\":3,\"541\":3}}],[\"airdropcontract\",{\"1\":{\"540\":1,\"541\":1}}],[\"ai\",{\"1\":{\"73\":1,\"249\":1,\"263\":6,\"297\":1,\"622\":1},\"2\":{\"275\":1,\"276\":1,\"278\":1,\"279\":1,\"281\":1,\"282\":1,\"284\":1,\"285\":1,\"287\":1,\"288\":1,\"298\":1,\"299\":1}}],[\"asm\",{\"1\":{\"1382\":7}}],[\"aspirant\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"aspect切面可以看成\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"aspects<\",{\"1\":{\"778\":1}}],[\"aspectj\",{\"1\":{\"752\":4,\"1174\":1,\"1351\":1}}],[\"aspect\",{\"1\":{\"144\":1,\"752\":3,\"1049\":1,\"1174\":1,\"1250\":1,\"1351\":1,\"1402\":1,\"1408\":1}}],[\"async\",{\"1\":{\"927\":1,\"1035\":1,\"1239\":1}}],[\"assignee=\",{\"1\":{\"928\":1}}],[\"assigned\",{\"1\":{\"884\":1,\"1113\":1,\"1301\":1}}],[\"association>\",{\"1\":{\"856\":1,\"857\":1,\"858\":2,\"860\":1}}],[\"association\",{\"1\":{\"856\":1,\"857\":1}}],[\"assert\",{\"1\":{\"199\":1}}],[\"assertexample\",{\"1\":{\"199\":1}}],[\"as碎片化百分比\",{\"1\":{\"574\":1}}],[\"as\",{\"1\":{\"41\":1,\"169\":2,\"677\":1,\"818\":9,\"822\":9,\"858\":1,\"950\":1,\"1058\":1,\"1256\":1}}],[\"了的进程跟其他进程并没有区别\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"了解更多实践应用的案例\",{\"1\":{\"1476\":1}}],[\"了解吗\",{\"1\":{\"1414\":1}}],[\"了解自定义初始化和销毁方法的具体应用场景\",{\"1\":{\"1410\":1}}],[\"了解\",{\"1\":{\"1410\":3}}],[\"了解内容\",{\"1\":{\"768\":1}}],[\"了解一些对你排查问题至关重要\",{\"1\":{\"665\":1}}],[\"了解了什么是\",{\"1\":{\"482\":1}}],[\"了解大数据那是我们\",{\"1\":{\"450\":1}}],[\"了解编程指南知识星球\",{\"1\":{\"248\":1}}],[\"了解详情\",{\"1\":{\"26\":1}}],[\"了\",{\"1\":{\"72\":1,\"319\":1,\"592\":1,\"1169\":1,\"1346\":1,\"1416\":1,\"1507\":1}}],[\"5之前的vm上运行泛型代码\",{\"1\":{\"1424\":1}}],[\"5之前并没有泛型的概念\",{\"1\":{\"1424\":1}}],[\"5倍\",{\"1\":{\"1075\":1,\"1270\":1}}],[\"5倍扩容\",{\"1\":{\"338\":1}}],[\"56597222222223\",{\"1\":{\"928\":1}}],[\"56d7cbc6\",{\"1\":{\"209\":1}}],[\"585\",{\"1\":{\"928\":2}}],[\"58\",{\"1\":{\"888\":2}}],[\"538\",{\"1\":{\"852\":1}}],[\"533\",{\"1\":{\"852\":1}}],[\"532\",{\"1\":{\"852\":2}}],[\"529\",{\"1\":{\"852\":1}}],[\"527\",{\"1\":{\"852\":1}}],[\"5个\",{\"1\":{\"475\":1}}],[\"5+5+12\",{\"1\":{\"441\":1}}],[\"5level\",{\"1\":{\"884\":1}}],[\"5l\",{\"1\":{\"441\":2}}],[\"5位\",{\"1\":{\"440\":5}}],[\"5530726256983\",{\"1\":{\"928\":1}}],[\"555\",{\"1\":{\"928\":2}}],[\"55\",{\"1\":{\"323\":1,\"428\":5,\"430\":2}}],[\"5的三次方是125\",{\"1\":{\"306\":1}}],[\"5^7\",{\"1\":{\"305\":1,\"306\":2}}],[\"59\",{\"1\":{\"250\":1}}],[\"592560633\",{\"1\":{\"127\":1}}],[\"5ctwvn0qli1iywng\",{\"1\":{\"164\":1}}],[\"540\",{\"1\":{\"155\":1}}],[\"512m\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"512\",{\"1\":{\"319\":1}}],[\"51~\",{\"1\":{\"316\":1}}],[\"51\",{\"1\":{\"151\":1,\"319\":1,\"852\":8}}],[\"5m\",{\"1\":{\"123\":1}}],[\"505\",{\"1\":{\"928\":1}}],[\"50716\",{\"1\":{\"887\":2}}],[\"509\",{\"1\":{\"852\":1}}],[\"50冷却时间\",{\"1\":{\"382\":1}}],[\"50的节点必须从根节点索引到叶节点\",{\"1\":{\"323\":1}}],[\"50和51\",{\"1\":{\"319\":1}}],[\"50\",{\"1\":{\"264\":1,\"316\":2,\"319\":2,\"320\":1,\"323\":4,\"563\":1,\"568\":2,\"654\":1,\"666\":1,\"852\":5,\"887\":1,\"1029\":1,\"1061\":1,\"1233\":1,\"1259\":1,\"1507\":1}}],[\"504\",{\"1\":{\"123\":1}}],[\"503\",{\"1\":{\"123\":1}}],[\"502669\",{\"1\":{\"723\":1}}],[\"502\",{\"1\":{\"123\":1}}],[\"50000\",{\"1\":{\"441\":1}}],[\"5000\",{\"1\":{\"263\":2,\"1466\":1}}],[\"500\",{\"1\":{\"123\":1,\"928\":2,\"1494\":1}}],[\"50x\",{\"1\":{\"123\":3}}],[\"5\",{\"0\":{\"103\":1,\"150\":1,\"177\":1,\"194\":1,\"208\":1,\"243\":1,\"561\":1,\"593\":1,\"622\":1,\"631\":1,\"658\":1,\"659\":1,\"660\":1,\"661\":1,\"669\":1,\"693\":1,\"738\":1,\"766\":1,\"767\":1,\"768\":1,\"801\":1,\"809\":1,\"812\":1,\"813\":1,\"814\":1,\"820\":1,\"833\":1,\"845\":1,\"859\":1,\"1003\":1,\"1018\":1,\"1029\":1,\"1045\":1,\"1059\":1,\"1073\":1,\"1088\":1,\"1103\":1,\"1119\":1,\"1133\":1,\"1146\":1,\"1159\":1,\"1172\":1,\"1185\":1,\"1198\":1,\"1212\":1,\"1224\":1,\"1232\":1,\"1234\":1,\"1246\":1,\"1257\":1,\"1268\":1,\"1281\":1,\"1294\":1,\"1307\":1,\"1318\":1,\"1329\":1,\"1339\":1,\"1349\":1,\"1360\":1,\"1371\":1},\"1\":{\"72\":1,\"111\":1,\"123\":1,\"151\":2,\"174\":2,\"183\":2,\"238\":1,\"305\":2,\"306\":3,\"319\":1,\"382\":1,\"390\":3,\"405\":3,\"412\":4,\"413\":2,\"417\":4,\"428\":2,\"440\":1,\"461\":4,\"472\":1,\"496\":1,\"570\":1,\"589\":1,\"590\":3,\"611\":1,\"654\":1,\"657\":1,\"666\":1,\"668\":1,\"669\":1,\"670\":1,\"735\":2,\"764\":1,\"765\":1,\"800\":1,\"814\":1,\"853\":1,\"875\":1,\"902\":1,\"979\":1,\"1004\":1,\"1019\":1,\"1029\":3,\"1041\":1,\"1057\":1,\"1061\":1,\"1062\":1,\"1124\":1,\"1134\":2,\"1155\":1,\"1168\":1,\"1173\":1,\"1174\":1,\"1213\":1,\"1225\":1,\"1233\":1,\"1242\":1,\"1255\":1,\"1259\":1,\"1260\":1,\"1312\":1,\"1319\":2,\"1335\":1,\"1345\":1,\"1350\":1,\"1351\":1,\"1390\":4,\"1410\":2,\"1507\":2}}],[\"就够用\",{\"1\":{\"1506\":1}}],[\"就产生了aba问题\",{\"1\":{\"1476\":1}}],[\"就重试整个读取\",{\"1\":{\"1476\":1}}],[\"就重新计算每个节点的hash值和索引\",{\"1\":{\"1380\":1}}],[\"就在新位置形成新的链表\",{\"1\":{\"1380\":1}}],[\"就进行resize两倍扩容\",{\"1\":{\"1380\":1}}],[\"就替换oldvalue为新值\",{\"1\":{\"1380\":1}}],[\"就把链表转换为红黑树\",{\"1\":{\"1380\":1}}],[\"就把当前事务挂起\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"就插入冲突链表中\",{\"1\":{\"1380\":1}}],[\"就抛出异常\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"就以非事务执行\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"就加入该事务\",{\"1\":{\"1177\":3,\"1354\":3}}],[\"就创建一个新事务\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"就可能会导致内存泄漏\",{\"1\":{\"1386\":1}}],[\"就可能会影响到整个齿轮组的正常运转\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"就可以使用\",{\"1\":{\"1507\":1}}],[\"就可以使用了\",{\"1\":{\"296\":1}}],[\"就可以直接找到文档1\",{\"1\":{\"1464\":1}}],[\"就可以直接查看全系列文章\",{\"1\":{\"1378\":1}}],[\"就可以启动对所有\",{\"1\":{\"1416\":1}}],[\"就可以实现方法的切入\",{\"1\":{\"1402\":1}}],[\"就可以实现接近\",{\"1\":{\"722\":1}}],[\"就可以继续执行下一阶段了\",{\"1\":{\"1390\":1}}],[\"就可以保证看到最新的值\",{\"1\":{\"1382\":1}}],[\"就可以更好地选择和使用它\",{\"1\":{\"1380\":1}}],[\"就可以看到部署的网站地址\",{\"1\":{\"976\":1}}],[\"就可以把查找工作交给机器\",{\"1\":{\"768\":1}}],[\"就可以获取排名前100的用户\",{\"1\":{\"720\":1}}],[\"就可以找到数据\",{\"1\":{\"323\":1}}],[\"就将清空\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"就将一个无需序列构造成了一个大顶堆\",{\"1\":{\"417\":1}}],[\"就造成了老节点和新节点之间的负载不均衡\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"就没有这条消息\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"就没有问题\",{\"1\":{\"863\":1}}],[\"就崩溃了\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"就代表成功\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"就代表分区的\",{\"1\":{\"1118\":1,\"1306\":1}}],[\"就成功返回\",{\"1\":{\"1106\":1,\"1297\":1}}],[\"就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"就从数据库获取\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"就绪状态的线程在获得cpu时间片后变为运行中状态\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"就默认下载最新的\",{\"1\":{\"1019\":1,\"1225\":1}}],[\"就挂掉了\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"就恢复到了上一次的\",{\"1\":{\"981\":1}}],[\"就已取得间断性胜利\",{\"1\":{\"975\":1}}],[\"就能快速定位到相关文档\",{\"1\":{\"1464\":1}}],[\"就能保证消息不会被重复写入了\",{\"1\":{\"1454\":1}}],[\"就能直接更新网站内容\",{\"1\":{\"974\":1}}],[\"就能找到数据\",{\"1\":{\"318\":1}}],[\"就近原则\",{\"1\":{\"772\":1}}],[\"就称之为仓库\",{\"1\":{\"768\":1}}],[\"就很好解释上面的问题了\",{\"1\":{\"755\":1}}],[\"就必须先来了解一下\",{\"1\":{\"755\":1}}],[\"就知道家里没人\",{\"1\":{\"616\":1}}],[\"就不需要读内存\",{\"1\":{\"999\":1,\"1208\":1}}],[\"就不要用\",{\"1\":{\"592\":1}}],[\"就不会有问题\",{\"1\":{\"440\":1}}],[\"就跟把鸡蛋放在多个篮子里是一样的\",{\"1\":{\"578\":1}}],[\"就算你的程序停止运行\",{\"1\":{\"934\":1,\"935\":1}}],[\"就算有代码的也测试不出效果\",{\"1\":{\"755\":1}}],[\"就算是\",{\"1\":{\"727\":1}}],[\"就算\",{\"1\":{\"564\":1}}],[\"就算在视频画质不高\",{\"1\":{\"264\":1}}],[\"就要进入金银季\",{\"1\":{\"556\":1,\"615\":1}}],[\"就要付\",{\"1\":{\"72\":1}}],[\"就通过\",{\"1\":{\"541\":1,\"1122\":1,\"1310\":1}}],[\"就和java中map一样\",{\"1\":{\"541\":1}}],[\"就会变成\",{\"1\":{\"1476\":1}}],[\"就会产生aba问题\",{\"1\":{\"1476\":1}}],[\"就会触发一次minor\",{\"1\":{\"1388\":1}}],[\"就会先将链表转成红黑树\",{\"1\":{\"1380\":1}}],[\"就会在链表中追加新节点\",{\"1\":{\"1380\":1}}],[\"就会看到与上面类似的情形\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"就会多个哨兵之间进行确认\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"就会对性能造成影响呢\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"就会进行扩容resize操作\",{\"1\":{\"1380\":1}}],[\"就会进行\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"就会自动提交位移\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"就会将其放入\",{\"1\":{\"1117\":2,\"1305\":2}}],[\"就会存在问题\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"就会全部回滚\",{\"1\":{\"791\":1}}],[\"就会涉及到状态同步的场景\",{\"1\":{\"727\":1}}],[\"就会浪费一部分存储空间\",{\"1\":{\"695\":1}}],[\"就会感觉很谨慎\",{\"1\":{\"541\":1}}],[\"就会出现主键不一致\",{\"1\":{\"436\":1}}],[\"就会成为leader\",{\"1\":{\"183\":1}}],[\"就需要namespace中的值\",{\"1\":{\"825\":1}}],[\"就需要创建长度为1亿的数组\",{\"1\":{\"414\":1}}],[\"就需要大量空间消耗\",{\"1\":{\"400\":1}}],[\"就输出几次\",{\"1\":{\"412\":1}}],[\"就如我们平时用字典查单词一样\",{\"1\":{\"319\":1}}],[\"就\",{\"1\":{\"264\":1}}],[\"就拥有大量的机会\",{\"1\":{\"263\":1}}],[\"就勇敢去学\",{\"1\":{\"263\":1}}],[\"就足以获得可观的收入\",{\"1\":{\"263\":1}}],[\"就像是一本索引书\",{\"1\":{\"1464\":1}}],[\"就像是一个事件的调度员\",{\"1\":{\"1434\":1}}],[\"就像是一个数据流的管家\",{\"1\":{\"1434\":1}}],[\"就像是你有一个备份咖啡师\",{\"1\":{\"1432\":1}}],[\"就像一个工具类\",{\"1\":{\"1070\":1,\"1265\":1}}],[\"就像sleep\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"就像这样\",{\"1\":{\"665\":1}}],[\"就像我们生活中\",{\"1\":{\"616\":1}}],[\"就像\",{\"1\":{\"454\":1}}],[\"就像吃饭不用动手\",{\"1\":{\"263\":1}}],[\"就像应该没有人用\",{\"1\":{\"72\":1}}],[\"就一定要添加详细说明文档\",{\"1\":{\"207\":1}}],[\"就变更为leading\",{\"1\":{\"183\":1}}],[\"就叫分布式协调系统\",{\"1\":{\"170\":1}}],[\"就说如果外面的人\",{\"1\":{\"170\":1}}],[\"就是错误\",{\"1\":{\"1494\":1}}],[\"就是成功\",{\"1\":{\"1494\":1}}],[\"就是个大数据的搜索神器\",{\"1\":{\"1456\":1}}],[\"就是个不错的注意\",{\"1\":{\"665\":1}}],[\"就是对象之间的依赖关系由容器来创建\",{\"1\":{\"1170\":1,\"1347\":1}}],[\"就是我们要实现整个系统所需要完成的全部内容\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"就是在指定的时间间隔内将内存中的数据集快照写入磁盘\",{\"1\":{\"1420\":1}}],[\"就是在接口的方法上面加上\",{\"1\":{\"1137\":1,\"1322\":1}}],[\"就是在\",{\"1\":{\"1137\":1,\"1322\":1}}],[\"就是在规定时间之内后端服务器必须传完所有的数据\",{\"1\":{\"123\":1}}],[\"就是映射文件中的\",{\"1\":{\"1132\":1,\"1317\":1}}],[\"就是文件系统上的\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"就是利用操作系统自身的内存而不是jvm空间内存\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"就是一种不确定的数据类型\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"就是可以用来实现相似商品的推荐\",{\"1\":{\"1036\":1,\"1240\":1}}],[\"就是只能统计基数数量\",{\"1\":{\"1034\":2,\"1238\":2}}],[\"就是只存0\",{\"1\":{\"386\":1,\"392\":1}}],[\"就是描述该层应当如何构建\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"就是提升读写性能\",{\"1\":{\"1000\":1,\"1209\":1}}],[\"就是数据交换的缓冲区\",{\"1\":{\"999\":1,\"1208\":1}}],[\"就是将指定的提交\",{\"1\":{\"980\":1}}],[\"就是如何将网站放在公网上\",{\"1\":{\"976\":1}}],[\"就是用他来搭建的\",{\"1\":{\"969\":1}}],[\"就是装不上\",{\"1\":{\"958\":1}}],[\"就是项目名称\",{\"1\":{\"907\":1}}],[\"就是maven在本机存储构件的地方\",{\"1\":{\"768\":1}}],[\"就是估算在一批数据中\",{\"1\":{\"722\":1}}],[\"就是编程中常用的字符串列表\",{\"1\":{\"718\":1}}],[\"就是普通的\",{\"1\":{\"716\":1}}],[\"就是说\",{\"1\":{\"667\":1}}],[\"就是两个或多个事务陷入了一个循环等待的状态\",{\"1\":{\"625\":1}}],[\"就是两个node节点\",{\"1\":{\"470\":1}}],[\"就是断言的作用\",{\"1\":{\"541\":1}}],[\"就是\",{\"1\":{\"440\":1,\"454\":1,\"721\":1}}],[\"就是前段时间封了懂王账号的\",{\"1\":{\"439\":1}}],[\"就是通过\",{\"1\":{\"205\":1}}],[\"就是她不包含在ffmpeg的源码里\",{\"1\":{\"152\":1}}],[\"就行\",{\"1\":{\"123\":1}}],[\"就有个单例模式的用武之地\",{\"1\":{\"86\":1}}],[\"时常犯的几个错误\",{\"1\":{\"1408\":1}}],[\"时常犯哪些错误\",{\"1\":{\"1408\":1}}],[\"时常分享优质学习资源\",{\"1\":{\"249\":1}}],[\"时会收到\",{\"1\":{\"1195\":1,\"1368\":1}}],[\"时会获取被\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"时从内存读取\",{\"1\":{\"999\":1,\"1208\":1}}],[\"时使用\",{\"1\":{\"687\":1,\"689\":1}}],[\"时有可能会重建索引\",{\"1\":{\"600\":1}}],[\"时需要遍历的节点数量较少\",{\"1\":{\"566\":1}}],[\"时候\",{\"1\":{\"484\":1}}],[\"时我们就不能进行自增操作了\",{\"1\":{\"341\":1}}],[\"时间之间\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"时间戳\",{\"1\":{\"498\":1,\"632\":1}}],[\"时间戳改变\",{\"1\":{\"441\":1}}],[\"时间截向左移22位\",{\"1\":{\"441\":1}}],[\"时间复杂度只需要\",{\"1\":{\"683\":1}}],[\"时间复杂度是\",{\"1\":{\"558\":1}}],[\"时间复杂度为\",{\"1\":{\"425\":1}}],[\"时间复杂度o\",{\"1\":{\"339\":3}}],[\"时间复杂度固定为\",{\"1\":{\"323\":1}}],[\"时间到了\",{\"1\":{\"264\":1}}],[\"时间等信息\",{\"1\":{\"219\":1}}],[\"时光荏苒\",{\"1\":{\"262\":1}}],[\"时杀手锏\",{\"1\":{\"220\":1}}],[\"时长取决于文件大小\",{\"1\":{\"160\":1}}],[\"时长1分钟\",{\"1\":{\"151\":1}}],[\"时\",{\"1\":{\"72\":1,\"223\":1,\"484\":1,\"564\":1,\"907\":1,\"1028\":1,\"1033\":1,\"1035\":1,\"1073\":1,\"1076\":1,\"1121\":1,\"1176\":1,\"1232\":1,\"1237\":1,\"1239\":1,\"1268\":1,\"1271\":1,\"1309\":1,\"1353\":1,\"1390\":5,\"1464\":1}}],[\"$num\",{\"1\":{\"979\":6}}],[\"$nf\",{\"1\":{\"111\":1}}],[\"$号\",{\"1\":{\"843\":1}}],[\"$区别\",{\"0\":{\"843\":1}}],[\"$可以是sql中的任一部分传入到statement中\",{\"1\":{\"842\":1}}],[\"$path\",{\"1\":{\"142\":1}}],[\"$proxy\",{\"1\":{\"123\":2}}],[\"$host\",{\"1\":{\"123\":2}}],[\"$http\",{\"1\":{\"123\":5}}],[\"$binary\",{\"1\":{\"123\":1}}],[\"$body\",{\"1\":{\"123\":2}}],[\"$status\",{\"1\":{\"123\":2}}],[\"$scp\",{\"1\":{\"111\":4}}],[\"$request\",{\"1\":{\"123\":3}}],[\"$remote\",{\"1\":{\"123\":6}}],[\"$time\",{\"1\":{\"123\":2}}],[\"$min\",{\"1\":{\"111\":1}}],[\"$3\",{\"1\":{\"111\":2}}],[\"$1\",{\"1\":{\"111\":1}}],[\"$2\",{\"1\":{\"111\":1}}],[\"$\",{\"1\":{\"72\":1,\"123\":5,\"126\":1,\"661\":4,\"764\":1,\"765\":1,\"806\":4,\"826\":2,\"829\":4,\"842\":3,\"843\":1,\"847\":1,\"848\":1,\"849\":1,\"878\":5,\"895\":1,\"928\":7,\"980\":7,\"1131\":3,\"1316\":3}}],[\"$$\",{\"1\":{\"33\":2}}],[\"万一以后成为百万博主\",{\"1\":{\"271\":1}}],[\"万一被亲人\",{\"1\":{\"264\":1}}],[\"万\",{\"1\":{\"72\":1}}],[\"当开发完成一个\",{\"1\":{\"1511\":1,\"1519\":1}}],[\"当该线程执行完被\",{\"1\":{\"1480\":1}}],[\"当文档被索引到目标分片和副本后\",{\"1\":{\"1470\":1}}],[\"当生产者发送消息时\",{\"1\":{\"1454\":1}}],[\"当生产者发送消息到kafka集群时\",{\"1\":{\"1452\":1}}],[\"当设置为1时\",{\"1\":{\"1452\":1}}],[\"当设置为0时\",{\"1\":{\"1452\":1}}],[\"当设置成\",{\"1\":{\"484\":1}}],[\"当leader副本发生故障时\",{\"1\":{\"1444\":1}}],[\"当producer发送消息时\",{\"1\":{\"1444\":1}}],[\"当消息的顺序性很重要时\",{\"1\":{\"1436\":1}}],[\"当消费者消费到消息后\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"当主节点宕机后\",{\"1\":{\"1466\":1}}],[\"当主节点宕机时\",{\"1\":{\"1426\":1}}],[\"当主服务器发生故障时\",{\"1\":{\"1422\":1}}],[\"当客户端发送一个命令到集群时\",{\"1\":{\"1426\":1}}],[\"当客户向容器请求一个尚未初始化的bean时\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"当redis服务重启数据会丢失\",{\"1\":{\"1420\":1}}],[\"当系统发生故障时可以自动检测并恢复\",{\"1\":{\"1408\":1}}],[\"当系统需要读取主存时\",{\"1\":{\"326\":1}}],[\"当事件触发时执行相应逻辑\",{\"1\":{\"1408\":1}}],[\"当事务提交时\",{\"1\":{\"622\":1}}],[\"当事务要改动一条记录时\",{\"1\":{\"618\":1}}],[\"当事务要读取一条记录时\",{\"1\":{\"618\":1}}],[\"当堆中垃圾对象达到一定比例或内存不足时\",{\"1\":{\"1394\":1}}],[\"当父类已经加载了某个类时\",{\"1\":{\"1392\":1}}],[\"当锁被释放时\",{\"1\":{\"1390\":1,\"1480\":1}}],[\"当所有线程都到达屏障点后\",{\"1\":{\"1390\":3}}],[\"当所有的when都不执行时\",{\"1\":{\"848\":1}}],[\"当计数器的值为\",{\"1\":{\"1390\":5}}],[\"当计算出的\",{\"1\":{\"1073\":1,\"1268\":1}}],[\"当永久代空间不足时\",{\"1\":{\"1388\":1}}],[\"当老年代空间不足时\",{\"1\":{\"1388\":1}}],[\"当survivor区2也满了时\",{\"1\":{\"1388\":1}}],[\"当survivor区1也满了时\",{\"1\":{\"1388\":1}}],[\"当sql语句比较复杂时候\",{\"1\":{\"1137\":1,\"1322\":1}}],[\"当sql语句比较简单时候\",{\"1\":{\"1137\":1,\"1322\":1}}],[\"当新创建的对象被分配到eden区时\",{\"1\":{\"1388\":1}}],[\"当方法执行完毕后\",{\"1\":{\"1388\":1}}],[\"当任务执行完成后\",{\"1\":{\"1384\":1}}],[\"当冲突产生时\",{\"1\":{\"1380\":1}}],[\"当整个\",{\"1\":{\"1199\":1,\"1372\":1}}],[\"当各个微服务对\",{\"1\":{\"1190\":1,\"1365\":1}}],[\"当多个事务同时存在的时候\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"当多个事务尝试更新同一索引页时\",{\"1\":{\"571\":1}}],[\"当应用程序配置bean较多时\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"当应用增多相对复杂的系统中\",{\"1\":{\"657\":1}}],[\"当bean不再需要时\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"当对象a运行到需要对象b的时候\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"当对一个字段进行大量的更新操作时\",{\"1\":{\"571\":1}}],[\"当用户搜索时\",{\"1\":{\"1464\":1}}],[\"当用户要进行数据的写入时\",{\"1\":{\"1150\":1,\"1333\":1}}],[\"当用户要进行数据的读取时\",{\"1\":{\"1150\":1,\"1333\":1}}],[\"当用户符合我设置的条件\",{\"1\":{\"538\":1}}],[\"当读取数据时\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"当mybaits与spring整合的时候\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"当上下文\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"当积累到一定程度或者时间时会将消息发送到分区\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"当返回成功后\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"当一块用完的时候将活着的对象复制到另一块上\",{\"1\":{\"1103\":1,\"1294\":1}}],[\"当一个线程获取了一个对象的监视器锁后\",{\"1\":{\"1480\":1}}],[\"当一个线程访问一个被\",{\"1\":{\"1480\":6}}],[\"当一个线程尝试获取锁时\",{\"1\":{\"1390\":1}}],[\"当一个值原来是x\",{\"1\":{\"1476\":1}}],[\"当一个类加载器收到类加载请求时\",{\"1\":{\"1392\":1}}],[\"当一个任务需要执行时\",{\"1\":{\"1384\":1}}],[\"当一个变量被声明为\",{\"1\":{\"1382\":1}}],[\"当一个队列的成员都聚齐时\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"当一个对象被锁定时\",{\"1\":{\"1480\":1}}],[\"当一个对象的状态发生改变时\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"当一个对象不再被使用时\",{\"1\":{\"699\":1}}],[\"当一个search请求发出的时候\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"当一个\",{\"1\":{\"907\":1}}],[\"当一个哈希只包含少量键值对\",{\"1\":{\"696\":1}}],[\"当一个列表只包含少量列表项\",{\"1\":{\"696\":1}}],[\"当一个表中包含自增字段时\",{\"1\":{\"622\":1}}],[\"当一个事务持有多个行锁\",{\"1\":{\"637\":1}}],[\"当一个事务想要在一个已经被其他事务加上间隙锁的范围内插入新行时\",{\"1\":{\"621\":1}}],[\"当一个事务打算在某个细粒度上请求锁\",{\"1\":{\"620\":1}}],[\"当一个事务对某行数据加上排他锁后\",{\"1\":{\"618\":1}}],[\"当一个应用难以再细粒度的垂直切分\",{\"1\":{\"581\":1}}],[\"当一个数据被用到时\",{\"1\":{\"327\":1}}],[\"当访问增多\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"当服务器处于该状态时\",{\"1\":{\"1196\":1,\"1369\":1}}],[\"当服务器不需要\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"当服务器需要用到值为\",{\"1\":{\"698\":1}}],[\"当key的哈希码分布均匀时\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"当key存在时\",{\"1\":{\"666\":1}}],[\"当a线程遍历元素时就会发现两个变量不等\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"当传入\",{\"1\":{\"1073\":1,\"1268\":1}}],[\"当进程在执行中继续申请资源时\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"当进程首次申请资源时\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"当打印完b\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"当在一个线程调用另一个线程的join方法时\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"当条件满足时\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"当阻塞指定毫秒后\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"当修改完毕后\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"当new一个integer时\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"当执行更新\",{\"1\":{\"1033\":1,\"1237\":1}}],[\"当段合并时\",{\"1\":{\"1033\":1,\"1237\":1}}],[\"当删除请求发送后\",{\"1\":{\"1033\":1,\"1237\":1}}],[\"当候选数量为两个时\",{\"1\":{\"1031\":1,\"1235\":1}}],[\"当集群中的\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"当集群中的一个节点下线了\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"当集群中超过半数机器与该\",{\"1\":{\"1199\":1,\"1372\":1}}],[\"当集群规模增加到几千个partition时zookeeper负载会过重\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"当集群\",{\"1\":{\"1031\":1,\"1235\":1}}],[\"当2到3页过去以后\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"当分片所在的节点接收到来自协调节点的请求后\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"当分值相同时\",{\"1\":{\"692\":1}}],[\"当有用户请求过来时\",{\"1\":{\"1009\":1,\"1218\":1}}],[\"当有一台服务器server1启动时\",{\"1\":{\"183\":1}}],[\"当从cookie中不能取出数据时\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"当从\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"当操作执行成功或者失败时\",{\"1\":{\"991\":1}}],[\"当操作完成时\",{\"1\":{\"640\":1}}],[\"当获取连接失败重试次数\",{\"1\":{\"878\":1}}],[\"当user\",{\"1\":{\"787\":2}}],[\"当子工程中有需要并且自行添加了具体依赖后才有效\",{\"1\":{\"778\":1}}],[\"当线程访问某一个对象时候值的时候\",{\"1\":{\"755\":1}}],[\"当程序执行完\",{\"1\":{\"727\":1}}],[\"当程序要读取的数据不在主存中时\",{\"1\":{\"327\":1}}],[\"当使用到对应功能时\",{\"1\":{\"1186\":1,\"1361\":1}}],[\"当使用迭代器遍历集合时\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"当使用迭代器遍历\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"当使用连接池时\",{\"1\":{\"708\":1}}],[\"当使用like操作符进行模糊查询\",{\"1\":{\"564\":1}}],[\"当字典被用作数据库的底层实现\",{\"1\":{\"689\":1}}],[\"当哈希表保存的键值对数量太多或者太少时\",{\"1\":{\"688\":1}}],[\"当列表不存在时\",{\"1\":{\"667\":1}}],[\"当指定元素不存在于列表中时\",{\"1\":{\"667\":1}}],[\"当间隙锁被释放时\",{\"1\":{\"621\":1}}],[\"当索引列有大量数据重复时\",{\"0\":{\"599\":1}}],[\"当数据库执行\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"当数据库表加完索引后还不不能满足性能需求\",{\"1\":{\"588\":1}}],[\"当数列元素不是整数时\",{\"1\":{\"414\":1}}],[\"当数列最大最小值差距过大时\",{\"1\":{\"414\":1}}],[\"当单表的数据量达到\",{\"1\":{\"578\":1}}],[\"当你在搜索引擎中输入关键词\",{\"1\":{\"1464\":1}}],[\"当你在实现a的时候\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"当你添加或删除一个节点时\",{\"1\":{\"1426\":1}}],[\"当你的应用部署在portlet容器中工作时\",{\"1\":{\"1172\":1,\"1349\":1}}],[\"当你遇到查询性能问题时\",{\"1\":{\"573\":1}}],[\"当你尝试为一个已经存在大量数据的表添加索引时\",{\"1\":{\"572\":1}}],[\"当你要给自己的项目分层\",{\"1\":{\"108\":1}}],[\"当表数据量很大时\",{\"1\":{\"579\":1}}],[\"当表中的数据量非常大时\",{\"0\":{\"571\":1}}],[\"当表里存的是\",{\"1\":{\"564\":1}}],[\"当已经建好表结构\",{\"1\":{\"570\":1}}],[\"当已经超过10个心跳的时间\",{\"1\":{\"174\":1}}],[\"当需要加载一个类的时候\",{\"1\":{\"1106\":1,\"1297\":1}}],[\"当需要进行大量数据的去重\",{\"1\":{\"719\":1}}],[\"当需要重复引用大型表或常用表中的某个数据集时\",{\"1\":{\"604\":1}}],[\"当需要这些数据时\",{\"1\":{\"567\":1}}],[\"当需要从磁盘读取数据时\",{\"1\":{\"327\":1}}],[\"当查询条件中包含\",{\"1\":{\"564\":1}}],[\"当查询不到用户信息时\",{\"1\":{\"214\":1}}],[\"当遇到慢\",{\"1\":{\"564\":1}}],[\"当遇到异常\",{\"1\":{\"200\":1}}],[\"当涉及到多个字段查询\",{\"1\":{\"561\":1}}],[\"当只涉及到一个字段查询\",{\"1\":{\"561\":1}}],[\"当活动结束有些代币可能未被领取\",{\"1\":{\"541\":1}}],[\"当输入的字符串是数字的时候\",{\"1\":{\"492\":1}}],[\"当前日志文件中下一条待写信息的offset\",{\"1\":{\"1114\":1,\"1302\":1}}],[\"当前最新的版本0\",{\"1\":{\"1113\":1,\"1301\":1}}],[\"当前线程再由阻塞状态转变成就绪状态\",{\"1\":{\"1064\":1,\"1262\":1}}],[\"当前线程阻塞等待被调用join方法的线程执行完毕才能继续执行\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"当前线程必须在lockobj上同步\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"当前线程会重新进入runnable状态\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"当前版本是\",{\"1\":{\"907\":1}}],[\"当前表\",{\"1\":{\"842\":1}}],[\"当前名称空间下的statement的唯一标识\",{\"1\":{\"838\":1,\"840\":1,\"841\":1}}],[\"当前开发中\",{\"1\":{\"727\":1}}],[\"当前小中厂可用\",{\"1\":{\"717\":1}}],[\"当前时间\",{\"1\":{\"441\":1}}],[\"当前时间戳\",{\"1\":{\"441\":1}}],[\"当前时间截\",{\"1\":{\"441\":1}}],[\"当前系统业务和数据存储的复杂度都在提升\",{\"1\":{\"434\":1}}],[\"当前leader是server2\",{\"1\":{\"183\":1}}],[\"当要被排序的数组内的数值是均匀分配的时候\",{\"1\":{\"401\":1}}],[\"当要进入某个目录时\",{\"1\":{\"108\":1}}],[\"当每个数据之间跨度过大\",{\"1\":{\"400\":1}}],[\"当时叫\",{\"1\":{\"270\":1}}],[\"当时用了好几个夜晚来做起名\",{\"1\":{\"270\":1}}],[\"当时正在发生口罩事件\",{\"1\":{\"264\":1}}],[\"当初觉得还远着的\",{\"1\":{\"262\":1}}],[\"当骑骏马踏平川\",{\"1\":{\"261\":1}}],[\"当日志级别是\",{\"1\":{\"223\":1}}],[\"当\",{\"1\":{\"221\":1,\"341\":1,\"484\":2,\"493\":1,\"687\":1,\"688\":1,\"1028\":1,\"1041\":1,\"1048\":2,\"1073\":1,\"1117\":2,\"1133\":1,\"1135\":1,\"1232\":1,\"1242\":1,\"1249\":2,\"1268\":1,\"1305\":2,\"1318\":1,\"1320\":1,\"1420\":2}}],[\"当我们检索文档时\",{\"1\":{\"1470\":1}}],[\"当我们索引一个文档时\",{\"1\":{\"1470\":1}}],[\"当我们搜索\",{\"1\":{\"1464\":1}}],[\"当我们添加文档时\",{\"1\":{\"1462\":1}}],[\"当我们往索引中添加数据时\",{\"1\":{\"1462\":1}}],[\"当我们使用java命令执行一个类时\",{\"1\":{\"1392\":1}}],[\"当我们调用代理对象的方法时\",{\"1\":{\"1474\":1}}],[\"当我们调用代理对象的\",{\"1\":{\"1474\":1}}],[\"当我们调用\",{\"1\":{\"1386\":2}}],[\"当我们提交更新的时候\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"当我们序列化和反序列化一个对象\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"当我们在编写多线程程序时\",{\"1\":{\"1382\":1}}],[\"当我们在做更新或者是插入操作时\",{\"1\":{\"786\":1}}],[\"当我们在查询条件中对索引列进行表达式计算\",{\"1\":{\"564\":1}}],[\"当我们要求\",{\"1\":{\"386\":1,\"392\":1}}],[\"当我们扩展为三台服务器集群\",{\"1\":{\"170\":1}}],[\"当我请求\",{\"1\":{\"205\":1}}],[\"当别人调用你的接口\",{\"1\":{\"205\":1}}],[\"当第二台服务器server2启动时\",{\"1\":{\"183\":1}}],[\"当zookeeper集群中的一台服务器出现以下两种情况之一时\",{\"1\":{\"183\":1}}],[\"当信息还没有同步完成时\",{\"1\":{\"170\":1}}],[\"当超过最大次数时\",{\"1\":{\"123\":1}}],[\"当证书到期前\",{\"1\":{\"103\":1}}],[\"当被问到你知道哪些设计模式\",{\"1\":{\"85\":1}}],[\"当产品销售超过\",{\"1\":{\"72\":1}}],[\"当然对于一些小公司划分的就没有这么细了\",{\"1\":{\"1502\":1}}],[\"当然不行\",{\"1\":{\"1494\":1}}],[\"当然不只是存里文档id这么简单\",{\"1\":{\"1026\":1,\"1230\":1}}],[\"当然准备好了\",{\"1\":{\"1470\":1}}],[\"当然还有\",{\"1\":{\"1436\":1,\"1440\":1}}],[\"当然知道\",{\"1\":{\"1436\":1,\"1448\":1,\"1464\":1}}],[\"当然知道啦\",{\"1\":{\"1384\":2}}],[\"当然有啦\",{\"1\":{\"1432\":1,\"1460\":1}}],[\"当然有一些了解\",{\"1\":{\"1430\":1}}],[\"当然有\",{\"1\":{\"1428\":1,\"1448\":1,\"1466\":1}}],[\"当然可以\",{\"1\":{\"1386\":3,\"1390\":8,\"1428\":1,\"1430\":1,\"1448\":3,\"1450\":1,\"1460\":3,\"1464\":1,\"1466\":2,\"1468\":3,\"1474\":5,\"1478\":4}}],[\"当然在某些情况下\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"当然适当放大也可行\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"当然无论哪种方案\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"当然它们的哈希值会不一样\",{\"1\":{\"980\":1}}],[\"当然要完成这个功能还需要在全局配置文件mybatis\",{\"1\":{\"845\":1}}],[\"当然现在很少用到了\",{\"1\":{\"716\":1}}],[\"当然具体如何选择需要看查询需求\",{\"1\":{\"561\":1}}],[\"当然这是一种牺牲空间换取时间的做法\",{\"1\":{\"410\":1}}],[\"当然我们想减小误判到最小\",{\"1\":{\"388\":1}}],[\"当然我们在生产环境中一般使用较多的是\",{\"1\":{\"87\":1}}],[\"当然你也可以再添加一个尾节点指针\",{\"1\":{\"339\":1}}],[\"当然也不存在跨域问题\",{\"1\":{\"1093\":1,\"1286\":1}}],[\"当然也可以自己设定一个值\",{\"1\":{\"1027\":1,\"1231\":1}}],[\"当然也可以使用包扫描\",{\"1\":{\"835\":1}}],[\"当然也可以通过参数设置\",{\"1\":{\"325\":1}}],[\"当然也流产了\",{\"1\":{\"270\":1}}],[\"当然b+树也能够很好的完成范围查询\",{\"1\":{\"323\":1}}],[\"当然了\",{\"1\":{\"152\":2,\"263\":2}}],[\"当然是第二种比较好\",{\"1\":{\"151\":1}}],[\"当然压缩时间也就越长\",{\"1\":{\"123\":1}}],[\"当然\",{\"1\":{\"72\":1,\"98\":1,\"107\":1,\"567\":1,\"665\":1,\"719\":1,\"969\":1,\"1005\":1,\"1007\":1,\"1025\":1,\"1121\":1,\"1189\":1,\"1214\":1,\"1216\":1,\"1229\":1,\"1309\":1,\"1364\":1,\"1382\":1,\"1388\":4,\"1398\":1,\"1404\":1,\"1426\":1,\"1428\":2,\"1430\":3,\"1432\":1,\"1434\":4,\"1436\":1,\"1438\":5,\"1440\":3,\"1442\":3,\"1444\":1,\"1456\":4,\"1458\":3,\"1462\":2,\"1470\":1,\"1478\":1,\"1480\":9}}],[\"那反射具体有什么作用呢\",{\"1\":{\"1468\":1}}],[\"那倒排索引有什么应用场景呢\",{\"1\":{\"1464\":1}}],[\"那倒排索引是怎么构建的呢\",{\"1\":{\"1464\":1}}],[\"那这样搜索的速度会更快\",{\"1\":{\"1464\":1}}],[\"那这个节点就是master\",{\"1\":{\"1027\":1,\"1231\":1}}],[\"那kafka是如何保证幂等性的呢\",{\"1\":{\"1454\":1}}],[\"那kafka是如何保证消息的可靠性传输的呢\",{\"1\":{\"1432\":1}}],[\"那kafka是怎么实现幂等性的呢\",{\"1\":{\"1454\":1}}],[\"那如何进行搜索呢\",{\"1\":{\"1456\":1}}],[\"那如何解决\",{\"1\":{\"1446\":1}}],[\"那如果我想要发送相同的消息\",{\"1\":{\"1454\":1}}],[\"那如果我想要查看kafka的源码\",{\"1\":{\"1432\":1}}],[\"那什么是线程安全的\",{\"1\":{\"1446\":1}}],[\"那最后两点疑问\",{\"1\":{\"1424\":1}}],[\"那泛型中最容易搞混的两个概念是什么\",{\"1\":{\"1424\":1}}],[\"那aof又是什么\",{\"1\":{\"1420\":1}}],[\"那setex\",{\"1\":{\"1418\":1}}],[\"那很好\",{\"1\":{\"1416\":1}}],[\"那\",{\"1\":{\"1412\":1}}],[\"那销毁方法哪些\",{\"1\":{\"1410\":1}}],[\"那好\",{\"1\":{\"1406\":1,\"1412\":1}}],[\"那日常工作用的最多的是哪个实现类\",{\"1\":{\"1404\":1}}],[\"那日志存储就要大到上天\",{\"1\":{\"220\":1}}],[\"那谈谈你了解的jvm内存结构和垃圾回收之间的关系\",{\"1\":{\"1394\":1}}],[\"那说说\",{\"1\":{\"1394\":1}}],[\"那java垃圾收集器都有哪些\",{\"1\":{\"1394\":1}}],[\"那静态代码块是在哪个阶段执行的\",{\"1\":{\"1392\":1}}],[\"那还不如让我直接读jvm的源码来找呢\",{\"1\":{\"1392\":1}}],[\"那我来思考下当初我第一次运行java程序的时候的内心活动\",{\"1\":{\"1392\":1}}],[\"那我们来看一下具体的索引文档的底层过程\",{\"1\":{\"1470\":1}}],[\"那我们先从kafka的基本概念开始吧\",{\"1\":{\"1444\":1}}],[\"那我们就来聊聊redis分布式锁的原理吧\",{\"1\":{\"1428\":1}}],[\"那我们继续聊聊类加载过程中最重要的几个类吧\",{\"1\":{\"1392\":1}}],[\"那我们同样属性的俩个用户一定是不相等的\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"那我们如何能让\",{\"1\":{\"755\":1}}],[\"那我们为什么不用\",{\"1\":{\"678\":1}}],[\"那你在项目中用过这两种锁吗\",{\"1\":{\"1476\":1}}],[\"那你说说redis有什么优点\",{\"1\":{\"1418\":1}}],[\"那你说说\",{\"1\":{\"1414\":1}}],[\"那你说对了\",{\"1\":{\"98\":1}}],[\"那你能举个例子来说明一下动态代理的使用吗\",{\"1\":{\"1474\":1}}],[\"那你能举个例子来说明一下动态地调用方法吗\",{\"1\":{\"1468\":1}}],[\"那你能举个例子来说明一下吗\",{\"1\":{\"1468\":1}}],[\"那你能举个例子来说明它们的使用场景吗\",{\"1\":{\"1390\":1}}],[\"那你能简单地介绍一下\",{\"1\":{\"1468\":1}}],[\"那你能具体说一下\",{\"1\":{\"1478\":1}}],[\"那你能具体说一下它们的区别吗\",{\"1\":{\"1390\":1}}],[\"那你能具体解释一下kafka的push和pull模式吗\",{\"1\":{\"1448\":1}}],[\"那你能告诉我\",{\"1\":{\"1442\":2}}],[\"那你能给我一个简单的例子来解释一下吗\",{\"1\":{\"1464\":1}}],[\"那你能给我一些具体的例子吗\",{\"1\":{\"1440\":1}}],[\"那你能给我一些关于redis内存优化的实用技巧吗\",{\"1\":{\"1430\":1}}],[\"那你能给我分享一些关于elasticsearch性能优化的技巧吗\",{\"1\":{\"1460\":1}}],[\"那你能给我简单介绍一下elasticsearch的核心组件吗\",{\"1\":{\"1460\":1}}],[\"那你能给我举个例子\",{\"1\":{\"1458\":1,\"1478\":1}}],[\"那你能给我举几个kafka的使用场景吗\",{\"1\":{\"1434\":1}}],[\"那你能给我演示一下如何创建一个索引并插入文档吗\",{\"1\":{\"1456\":1}}],[\"那你能给我们看一段简单的代码来说明这个过程吗\",{\"1\":{\"1448\":1}}],[\"那你能给我解释一下elasticsearch的搜索原理吗\",{\"1\":{\"1460\":1}}],[\"那你能给我解释一下elasticsearch的核心概念吗\",{\"1\":{\"1456\":1}}],[\"那你能给我解释一下lucene是什么吗\",{\"1\":{\"1458\":1}}],[\"那你能给我解释一下kafka的消息传递机制吗\",{\"1\":{\"1438\":1}}],[\"那你能给我解释一下kafka的消息发布和订阅模型吗\",{\"1\":{\"1432\":1}}],[\"那你能给我解释一下kafka的性能是如何实现的吗\",{\"1\":{\"1438\":1}}],[\"那你能给我解释一下redis分片集群的工作原理吗\",{\"1\":{\"1426\":1}}],[\"那你能解释一下\",{\"1\":{\"1414\":1}}],[\"那你能写一段代码来演示一下\",{\"1\":{\"1390\":1}}],[\"那你能写一段代码来演示一下吗\",{\"1\":{\"1390\":1}}],[\"那你能说一下动态代理的实现原理吗\",{\"1\":{\"1474\":1}}],[\"那你能说一下动态代理的优缺点吗\",{\"1\":{\"1474\":1}}],[\"那你能说一下动态代理和静态代理的区别吗\",{\"1\":{\"1474\":1}}],[\"那你能说一下反射和动态代理的关系吗\",{\"1\":{\"1474\":1}}],[\"那你能说一下反射和安全性的关系吗\",{\"1\":{\"1468\":1}}],[\"那你能说一下反射和泛型的关系吗\",{\"1\":{\"1468\":1}}],[\"那你能说一下反射的优缺点吗\",{\"1\":{\"1468\":1}}],[\"那你能说一下\",{\"1\":{\"1390\":3,\"1478\":2}}],[\"那你能否简单介绍一下java堆的内存结构\",{\"1\":{\"1388\":1}}],[\"那你能否简单介绍一下jvm内存模型的组成部分\",{\"1\":{\"1388\":1}}],[\"那你能否解释一下\",{\"1\":{\"1386\":2}}],[\"那你能否详细介绍一下\",{\"1\":{\"1386\":1}}],[\"那你知道如何自定义线程池吗\",{\"1\":{\"1384\":1}}],[\"那你知道线程池的优缺点吗\",{\"1\":{\"1384\":1}}],[\"那你知道线程池的拒绝策略有哪些吗\",{\"1\":{\"1384\":1}}],[\"那你知道线程池的参数有哪些吗\",{\"1\":{\"1384\":1}}],[\"那你知道线程池的工作原理吗\",{\"1\":{\"1384\":1}}],[\"那它是什么\",{\"1\":{\"1416\":1}}],[\"那它的核心组件有哪些\",{\"1\":{\"1416\":1}}],[\"那它内部具体是如何实现的呢\",{\"1\":{\"1380\":1}}],[\"那它还能干什么\",{\"1\":{\"761\":1}}],[\"那岂不是得来回变换形态\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"那只能一点一点往新分支迁移\",{\"1\":{\"980\":1}}],[\"那一定会发现\",{\"1\":{\"892\":1}}],[\"那则需要对多个项目模块进行聚合\",{\"1\":{\"779\":1}}],[\"那是因为你的jvm没有优化造成的\",{\"1\":{\"755\":1}}],[\"那个阶段是毕业后成长非常快的\",{\"1\":{\"270\":1}}],[\"那时几个同学一块在那里实习\",{\"1\":{\"270\":1}}],[\"那修改起来会特别的麻烦\",{\"1\":{\"179\":1}}],[\"那到时两个产品就要打架了\",{\"1\":{\"170\":1}}],[\"那也是可以的\",{\"1\":{\"155\":1}}],[\"那也可以用外部的编码器来编码\",{\"1\":{\"152\":1}}],[\"那么a\",{\"1\":{\"1476\":1}}],[\"那么elasticsearch和lucene之间有什么关系呢\",{\"1\":{\"1458\":1}}],[\"那么生产者可以选择放弃发送或者采取其他措施\",{\"1\":{\"1452\":1}}],[\"那么可能会出现点菜遗漏的情况\",{\"1\":{\"1452\":1}}],[\"那么可以在索引上设置默认值\",{\"1\":{\"1149\":1,\"1332\":1}}],[\"那么可以在依赖节点中设置排除依赖节点\",{\"1\":{\"773\":1}}],[\"那么可以写入进去的时候用某个时间作为分数\",{\"1\":{\"720\":1}}],[\"那么可以使用\",{\"0\":{\"605\":1}}],[\"那么你能够从\",{\"1\":{\"1480\":1}}],[\"那么你可以确保每道菜都被正确记录下来\",{\"1\":{\"1452\":1}}],[\"那么你对hashmap的源码熟悉吗\",{\"1\":{\"1406\":1}}],[\"那么redis如何保证数据的持久化\",{\"1\":{\"1420\":1}}],[\"那么redis就会使用压缩列表来做哈希的底层实现\",{\"1\":{\"696\":1}}],[\"那么redis就会使用压缩列表来做列表的底层实现\",{\"1\":{\"696\":1}}],[\"那么需要通过重构来避免循环依赖\",{\"1\":{\"1412\":1}}],[\"那么如何使基于\",{\"1\":{\"1408\":1}}],[\"那么如果在a中对log4j依赖的optional配置成false时\",{\"1\":{\"771\":1}}],[\"那么如果节点为区间范围\",{\"1\":{\"319\":1}}],[\"那么默认的classloader又有哪几个\",{\"1\":{\"1392\":1}}],[\"那么使用\",{\"1\":{\"1382\":1}}],[\"那么冲突的概率会大大减少\",{\"1\":{\"1380\":1}}],[\"那么该客户端对服务器的任何操作\",{\"1\":{\"1202\":1,\"1375\":1}}],[\"那么全局变量需要存储在global\",{\"1\":{\"1172\":1,\"1349\":1}}],[\"那么对象a在初始化或者运行到某一点的时候\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"那么对数据库的压力非常大\",{\"1\":{\"1008\":1,\"1217\":1}}],[\"那么恢复时间也就越长\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"那么为什么说超过了一定限度\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"那么为该字段创建索引可能不会带来预期的性能提升\",{\"1\":{\"571\":1}}],[\"那么分区将会变得不可用\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"那么类之间的比较结果及类的唯一性将无法保证\",{\"1\":{\"1106\":1,\"1297\":1}}],[\"那么都是非同源\",{\"1\":{\"1093\":1,\"1286\":1}}],[\"那么链表和红黑树之间的切换范围值就太小了\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"那么代码还是同步执行的\",{\"1\":{\"1055\":1,\"1253\":1}}],[\"那么其中所有的成员方法都无法进行覆盖重写\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"那么司机停车\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"那么怎么理解同步和阻塞\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"那么反复调用x\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"那么x\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"那么y\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"那么子类可以重写父类所有方法\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"那么这个对数组长度取余的方法就等价于对数组长度减一的值进行按位与操作\",{\"1\":{\"1080\":1,\"1275\":1}}],[\"那么这个变量也照样是不可变\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"那么这个变量就不能进行更改\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"那么这个队列的size就是20\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"那么这些整数的值肯定是在0到10这11个数里面\",{\"1\":{\"412\":1}}],[\"那么最终的版本为1\",{\"1\":{\"772\":1}}],[\"那么称\",{\"1\":{\"770\":1}}],[\"那么按照我们上面所讲的\",{\"1\":{\"755\":1}}],[\"那么获取字符串的长度时\",{\"1\":{\"683\":1}}],[\"那么我们也可以将\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"那么我们可以直接使用\",{\"1\":{\"682\":1}}],[\"那么我们如何提高程序性能\",{\"1\":{\"319\":1}}],[\"那么在一个redis分片集群中\",{\"1\":{\"1426\":1}}],[\"那么在另一个线程中调用\",{\"1\":{\"1382\":1}}],[\"那么在另一个线程中读取\",{\"1\":{\"1382\":2}}],[\"那么在选举后新的\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"那么在子类中重写该方法就不能声明为protected\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"那么在了解完jvm在运行时候的内存分配过程以后\",{\"1\":{\"755\":1}}],[\"那么在rr隔离级别下\",{\"1\":{\"638\":1}}],[\"那么在查找键的时候\",{\"1\":{\"123\":1}}],[\"那么即使在\",{\"1\":{\"599\":1}}],[\"那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引\",{\"0\":{\"597\":1},\"1\":{\"1149\":1,\"1332\":1}}],[\"那么每次数据更新都可能导致索引的页面分裂\",{\"1\":{\"571\":1}}],[\"那么查询可能不需要回表\",{\"1\":{\"567\":1}}],[\"那么索引不会被使用\",{\"1\":{\"564\":1}}],[\"那么成功会检索出上述文档\",{\"1\":{\"504\":1}}],[\"那么首先排除掉32位int类型\",{\"1\":{\"435\":1}}],[\"那么首要的是增大前一个参数的大小\",{\"1\":{\"123\":1}}],[\"那么现有的uuid就完全满足需求\",{\"1\":{\"435\":1}}],[\"那么数组下标为\",{\"1\":{\"412\":2}}],[\"那么假阳性的概率是万分之五\",{\"1\":{\"392\":1}}],[\"那么100亿个就至少需要大约640gb的内存空间\",{\"1\":{\"383\":1}}],[\"那么它是包含这个插件的\",{\"1\":{\"1522\":1}}],[\"那么它就会被加入到等待队列中\",{\"1\":{\"1390\":1}}],[\"那么它们有什么不同\",{\"1\":{\"423\":1}}],[\"那么它一定不存在\",{\"1\":{\"383\":1}}],[\"那么它可能存在\",{\"1\":{\"383\":1}}],[\"那么当前线程将进入阻塞状态\",{\"1\":{\"1064\":1,\"1262\":1}}],[\"那么当\",{\"1\":{\"341\":1}}],[\"那么一个页可以存放16行这样的数据\",{\"1\":{\"325\":1}}],[\"那么由于磁盘\",{\"1\":{\"323\":1}}],[\"那么总\",{\"1\":{\"319\":1}}],[\"那么将它附近的位置也会被访问\",{\"1\":{\"319\":1,\"323\":1}}],[\"那么整个集群将暂停对外服务\",{\"1\":{\"183\":1}}],[\"那么就可能加载一个非授权版本的类\",{\"1\":{\"1392\":1}}],[\"那么就可能会导致这条消息消费失败\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"那么就和\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"那么就释放以及获得的锁\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"那么就应该考虑改写\",{\"0\":{\"607\":1}}],[\"那么就无需回表\",{\"1\":{\"567\":1}}],[\"那么就新建一个\",{\"1\":{\"395\":1}}],[\"那么就变更为following\",{\"1\":{\"183\":1}}],[\"那么就比较myid\",{\"1\":{\"183\":1}}],[\"那么表明这个客户端连接失败\",{\"1\":{\"174\":1}}],[\"那么直接跳到你需要的知识点\",{\"1\":{\"167\":1}}],[\"那么\",{\"1\":{\"123\":1,\"151\":2,\"504\":1,\"562\":1,\"775\":1,\"829\":1,\"1000\":1,\"1007\":1,\"1121\":1,\"1209\":1,\"1216\":1,\"1309\":1,\"1382\":3,\"1400\":1,\"1404\":2,\"1408\":1,\"1410\":1,\"1412\":2,\"1414\":1,\"1426\":2,\"1428\":1,\"1430\":2,\"1436\":1,\"1444\":2,\"1448\":1,\"1450\":3,\"1452\":5,\"1462\":3,\"1466\":1,\"1480\":11}}],[\"那就给我简单介绍下jvm调优的方法和手段吧\",{\"1\":{\"1400\":1}}],[\"那就顺理成章地采用单线程的方案了\",{\"1\":{\"1157\":1,\"1337\":1}}],[\"那就直接表演\",{\"1\":{\"1156\":1,\"1336\":1}}],[\"那就很难保证\",{\"1\":{\"1119\":1,\"1307\":1}}],[\"那就增加\",{\"1\":{\"790\":1}}],[\"那就是异步\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"那就是因为vt线程每次判断flag标记的时候是从它自己的\",{\"1\":{\"755\":1}}],[\"那就是对我最大的支持\",{\"1\":{\"114\":1}}],[\"那就是对资源的浪费\",{\"1\":{\"86\":1}}],[\"那就让我们把程序运行起来看看效果吧\",{\"1\":{\"755\":1}}],[\"那就需要给每个节点增加一个\",{\"1\":{\"695\":1}}],[\"那就需要用\",{\"1\":{\"695\":1}}],[\"那就开始\",{\"1\":{\"650\":1}}],[\"那就得给钱了\",{\"1\":{\"72\":1}}],[\"那猴子🐒的故事\",{\"1\":{\"72\":1}}],[\"大体分为\",{\"1\":{\"1502\":1}}],[\"大师傅\",{\"1\":{\"1452\":1}}],[\"大约花费\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"大脑\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"大小是固定的\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"大的账户上的锁\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"大多用于\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"大多是指内存\",{\"1\":{\"999\":1,\"1208\":1}}],[\"大多数操作系统会将内存使用到文件系统缓存\",{\"1\":{\"1030\":1,\"1234\":1}}],[\"大多数应用都会部署多个节点\",{\"1\":{\"727\":1}}],[\"大多数数据库都自带死锁检测机制\",{\"1\":{\"643\":1}}],[\"大神\",{\"1\":{\"826\":1}}],[\"大鹏\",{\"1\":{\"820\":1}}],[\"大大减少停顿\",{\"1\":{\"1396\":1}}],[\"大大简化了开发所需的繁杂配置\",{\"1\":{\"1186\":1,\"1361\":1}}],[\"大大降低数据库压力\",{\"1\":{\"1156\":1,\"1336\":1}}],[\"大大影响了数据库的性能\",{\"1\":{\"657\":1}}],[\"大大提升性能\",{\"1\":{\"583\":2}}],[\"大薅\",{\"1\":{\"534\":1}}],[\"大概阅读10分钟\",{\"1\":{\"481\":1}}],[\"大概只有220w\",{\"1\":{\"438\":1}}],[\"大顶堆\",{\"1\":{\"417\":1}}],[\"大白话讲解布隆过滤器\",{\"0\":{\"381\":1},\"1\":{\"1159\":1,\"1339\":1}}],[\"大部分自定义注解都使用runtime\",{\"1\":{\"1402\":1}}],[\"大部分数据只能存放在磁盘上\",{\"1\":{\"319\":1}}],[\"大部分都免费开源到\",{\"1\":{\"247\":1}}],[\"大于500元\",{\"1\":{\"928\":1}}],[\"大于\",{\"1\":{\"289\":1}}],[\"大于这个值\",{\"1\":{\"123\":1}}],[\"大语言模型\",{\"1\":{\"289\":1}}],[\"大增量用户的时代已经接近尾声\",{\"1\":{\"264\":1}}],[\"大学生都会的linux命令v2\",{\"0\":{\"109\":1}}],[\"大学生都会的linux命令\",{\"0\":{\"106\":1}}],[\"大家看到了吧\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"大家看下效果图\",{\"1\":{\"969\":1}}],[\"大家可以用这个来理解学习\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"大家可以根据自己的应用场景来权衡\",{\"1\":{\"1009\":1,\"1218\":1}}],[\"大家可能有些陌生\",{\"1\":{\"721\":1}}],[\"大家爱好相同\",{\"1\":{\"719\":1}}],[\"大家都身处时代洪流中\",{\"1\":{\"703\":1}}],[\"大家都知道我最近在做一套javapub系列面试题\",{\"1\":{\"584\":1}}],[\"大家都叫他王哥\",{\"1\":{\"255\":1}}],[\"大家在面试的时候\",{\"1\":{\"315\":1}}],[\"大家也可以在自己的电脑上安装虚拟机来操作\",{\"1\":{\"107\":1}}],[\"大家好\",{\"1\":{\"85\":1,\"107\":1,\"218\":1,\"451\":1,\"969\":1}}],[\"大家自己学习或者开发一些免费的东西是可以直接用的\",{\"1\":{\"72\":1}}],[\"大数据\",{\"0\":{\"75\":1},\"1\":{\"261\":1},\"2\":{\"76\":1}}],[\"大作‌\",{\"1\":{\"72\":1}}],[\"大作\",{\"1\":{\"72\":1}}],[\"也让我对你的能力有了更高的评价\",{\"1\":{\"1476\":1}}],[\"也能帮助到你的读者\",{\"1\":{\"1470\":1}}],[\"也能拿出去吹\",{\"1\":{\"271\":1}}],[\"也不想去查接口文档\",{\"1\":{\"1494\":1}}],[\"也不是线程安全的\",{\"1\":{\"1446\":1}}],[\"也不会将\",{\"1\":{\"1382\":1}}],[\"也不会影响性能\",{\"1\":{\"1380\":1}}],[\"也对泛型有了更深刻的理解\",{\"1\":{\"1424\":1}}],[\"也允许满足某些使用场景的需要\",{\"1\":{\"1424\":1}}],[\"也允许开发者根据实际情况自定义相关配置\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"也为后续的命令传播阶段奠定基础\",{\"1\":{\"1422\":1}}],[\"也兼顾了效率\",{\"1\":{\"1420\":1}}],[\"也很期待加入贵团队一起成长\",{\"1\":{\"1416\":1}}],[\"也难以维护\",{\"1\":{\"1412\":1}}],[\"也直接或间接依赖\",{\"1\":{\"1412\":1}}],[\"也祝面试官心想事成\",{\"1\":{\"1392\":1}}],[\"也清楚自己的不足和需要努力的方向\",{\"1\":{\"1380\":1}}],[\"也称作被通知\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"也称为内部锁或互斥锁\",{\"1\":{\"1480\":1}}],[\"也称为\",{\"1\":{\"160\":1}}],[\"也记录一些警告信息或者正确的信息\",{\"1\":{\"1142\":1,\"1325\":1}}],[\"也没有具体的类型边界\",{\"1\":{\"1424\":1}}],[\"也没有注册\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"也没有人用\",{\"1\":{\"72\":1}}],[\"也就丢失了\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"也就是工友们一块审核代码规范\",{\"1\":{\"1502\":1}}],[\"也就是项目的公共模块\",{\"1\":{\"1502\":1}}],[\"也就是案例中的\",{\"1\":{\"1494\":1}}],[\"也就是注入这个bean依赖的其它bean对象\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"也就是ioc容器\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"也就是单机部署\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"也就是布隆过滤器的原理\",{\"1\":{\"1159\":1,\"1339\":1}}],[\"也就是不存在的数据\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"也就是不能被覆盖重写\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"也就是可能最终不会存到数据库中\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"也就是直接将数据从内核空间的读缓冲区直接拷贝到内核空间的\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"也就是字节码\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"也就是通过等待\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"也就是一个请求一个线程\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"也就是一些正能量的综合性文章\",{\"1\":{\"270\":1}}],[\"也就是cgroup\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"也就是下次缓存读取时\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"也就是下面的6结点\",{\"1\":{\"417\":1}}],[\"也就是边改边实时预览\",{\"1\":{\"975\":1}}],[\"也就是网站的首页\",{\"1\":{\"974\":1}}],[\"也就是我们常说的\",{\"1\":{\"984\":1}}],[\"也就是我们的网站在进入后首先加载的文件\",{\"1\":{\"974\":1}}],[\"也就是我们网站的内核\",{\"1\":{\"973\":1}}],[\"也就是我们要在网页上展示的内容\",{\"1\":{\"973\":1}}],[\"也就是我们在使用联合索引时\",{\"1\":{\"564\":1}}],[\"也就是上面说到的例子\",{\"1\":{\"619\":1}}],[\"也就是在目标方法开始之前启动一个事务\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"也就是在\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"也就是在主键字段建立聚簇索引\",{\"1\":{\"558\":1}}],[\"也就是在这个时间诞生了\",{\"1\":{\"270\":1}}],[\"也就是合约初始化时调用的函数\",{\"1\":{\"541\":1}}],[\"也就是这个字段可以被搜索\",{\"1\":{\"484\":1}}],[\"也就是说它是线程安全的\",{\"1\":{\"1476\":1}}],[\"也就是说vector在并发环境下是线程安全的\",{\"1\":{\"1075\":1,\"1270\":1}}],[\"也就是说一个类如果是final的\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"也就是说这个类不能被继承\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"也就是说如果你的from是10\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"也就是说\",{\"1\":{\"775\":1,\"1056\":1,\"1102\":1,\"1254\":1,\"1293\":1}}],[\"也就是说我们在主线程设置的\",{\"1\":{\"755\":1}}],[\"也就是说41位可以表示\",{\"1\":{\"440\":1}}],[\"也就是说每个ticktime时间就会发送一个心跳\",{\"1\":{\"174\":1}}],[\"也就是元素到桶的映射规则\",{\"1\":{\"403\":1}}],[\"也就是根据元素值特性将集合拆分为多个区域\",{\"1\":{\"401\":1}}],[\"也就是\",{\"1\":{\"306\":2,\"894\":1,\"1006\":1,\"1029\":1,\"1215\":1,\"1233\":1,\"1416\":2}}],[\"也就是接口的\",{\"1\":{\"205\":1}}],[\"也就是ticktime\",{\"1\":{\"174\":1}}],[\"也就是操作系统页面大小的两倍\",{\"1\":{\"123\":1}}],[\"也就是你看到这篇文章的网站\",{\"1\":{\"114\":1}}],[\"也就是他们主要是c++\",{\"1\":{\"72\":1}}],[\"也应该返回true\",{\"1\":{\"1044\":2,\"1245\":2}}],[\"也支持延迟加载\",{\"1\":{\"1410\":1}}],[\"也支持通过\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"也支持push方式\",{\"1\":{\"946\":1}}],[\"也许最来的层会依赖它\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"也挂掉的情况\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"也打挂了\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"也减小\",{\"1\":{\"1000\":1,\"1209\":1}}],[\"也叫做mapper\",{\"1\":{\"835\":1}}],[\"也有利于安全性\",{\"1\":{\"1392\":1}}],[\"也有很大用途\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"也有clean阶段\",{\"1\":{\"775\":1}}],[\"也有可能正好hash值对应的\",{\"1\":{\"386\":1,\"392\":1}}],[\"也即本地下载的jar存放路径\",{\"1\":{\"765\":1}}],[\"也提供了灵活的键淘汰策略\",{\"1\":{\"657\":1}}],[\"也可能是t的子类型\",{\"1\":{\"1424\":1}}],[\"也可能存在因为网络等原因导致写入副本失败\",{\"1\":{\"1035\":1,\"1239\":1}}],[\"也可能触发锁升级\",{\"1\":{\"637\":1}}],[\"也可以丰富我们的简历\",{\"1\":{\"1492\":1}}],[\"也可以对性能进行优化\",{\"1\":{\"1438\":1}}],[\"也可以手动触发system\",{\"1\":{\"1394\":1}}],[\"也可以解决冲突\",{\"1\":{\"1380\":1}}],[\"也可以应对散列算法产生碰撞的情况\",{\"1\":{\"1380\":1}}],[\"也可以是基本数据类型和\",{\"1\":{\"1136\":2,\"1321\":2}}],[\"也可以是点\",{\"1\":{\"507\":1}}],[\"也可以通过设置搜索请求参数\",{\"1\":{\"1035\":1,\"1239\":1}}],[\"也可以克隆基于docker的俩万\",{\"1\":{\"1019\":1,\"1225\":1}}],[\"也可以将kafka作为长期的存储系统来使用\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"也可以将\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"也可以写成\",{\"1\":{\"981\":1}}],[\"也可以在这里配置过滤器\",{\"1\":{\"883\":1}}],[\"也可以使用分页插件来完成物理分页\",{\"1\":{\"1138\":1,\"1323\":1}}],[\"也可以使用插件机制\",{\"1\":{\"833\":1}}],[\"也可以使用第三方分词器插件\",{\"1\":{\"464\":1}}],[\"也可以用于\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"也可以用于精确查询\",{\"1\":{\"496\":1}}],[\"也可以用包名的方式达到相同的效果\",{\"1\":{\"752\":1}}],[\"也可以切某个\",{\"1\":{\"752\":1}}],[\"也可以再次调用这个命令来改变超时时间\",{\"1\":{\"666\":1}}],[\"也可以说是java提供的原子性内置锁机制\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"也可以说是后端服务器处理请求的时间\",{\"1\":{\"123\":1}}],[\"也可以说一个\",{\"1\":{\"482\":1}}],[\"也可以选择不包含这个信息\",{\"1\":{\"478\":1}}],[\"也可以催更\",{\"1\":{\"381\":1,\"400\":1,\"409\":1,\"417\":1,\"421\":1,\"430\":1,\"650\":1,\"676\":1,\"711\":1,\"761\":1,\"795\":1}}],[\"也可以防止后续扯皮\",{\"1\":{\"203\":1}}],[\"也可以实现集群的负载均衡\",{\"1\":{\"182\":1}}],[\"也可以转为其他格式\",{\"1\":{\"149\":1}}],[\"也可以放在\",{\"1\":{\"123\":1}}],[\"也要可以的\",{\"1\":{\"979\":1}}],[\"也要创建一个同样保存了整数值\",{\"1\":{\"698\":1}}],[\"也要慎用\",{\"0\":{\"592\":1},\"1\":{\"1149\":1,\"1332\":1}}],[\"也要多刷提到的\",{\"1\":{\"118\":1}}],[\"也需要扎实的基础才能玩转\",{\"1\":{\"585\":1}}],[\"也需要考虑以下因素\",{\"1\":{\"565\":1}}],[\"也需要这样的协调者\",{\"1\":{\"170\":1}}],[\"也会触发一次full\",{\"1\":{\"1388\":1}}],[\"也会出现在软件系统的各模块之间\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"也会导致全表扫描\",{\"1\":{\"1149\":1,\"1332\":1}}],[\"也会全表扫描\",{\"1\":{\"564\":1}}],[\"也会有直播回看的哦\",{\"1\":{\"249\":1}}],[\"也同时被更新\",{\"1\":{\"484\":1}}],[\"也被称为0拷贝技术\",{\"1\":{\"456\":1}}],[\"也基本满足需求\",{\"1\":{\"436\":1}}],[\"也充满更多的机会\",{\"1\":{\"264\":1}}],[\"也暂露头角\",{\"1\":{\"264\":1}}],[\"也深入结识了几位不错的同事\",{\"1\":{\"263\":1}}],[\"也算是一个能吃苦就能赚钱的工作\",{\"1\":{\"263\":1}}],[\"也学了很多之前以为懂的东西\",{\"1\":{\"263\":1}}],[\"也是\",{\"1\":{\"1520\":1}}],[\"也是接口对外提供的业务数据\",{\"1\":{\"1494\":1}}],[\"也是很重要的内容\",{\"1\":{\"1476\":1}}],[\"也是日常开发中最常用的\",{\"1\":{\"1404\":1}}],[\"也是必要的\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"也是经过多个哨兵确认后\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"也是在更新提交的时候检查当前数据库中数据的时间戳和自己更新前取到的时间戳进行对比\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"也是在说这里的不确定性\",{\"1\":{\"263\":1}}],[\"也是垃圾回收的主要区域\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"也是可以避免死锁的\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"也是官方推荐的使用方式\",{\"1\":{\"827\":1}}],[\"也是并发场景下必问的问题\",{\"1\":{\"615\":1}}],[\"也是最常用的\",{\"1\":{\"569\":1}}],[\"也是无法走索引的\",{\"1\":{\"564\":1}}],[\"也是一种多路搜索树\",{\"1\":{\"322\":1}}],[\"也是我们团队间协作沟通\",{\"1\":{\"218\":1}}],[\"也是1\",{\"1\":{\"151\":1}}],[\"也用到c\",{\"1\":{\"72\":1}}],[\"写操作\",{\"1\":{\"1424\":1}}],[\"写操作和所有操作的有序性\",{\"1\":{\"1382\":1}}],[\"写屏障和全屏障\",{\"1\":{\"1382\":1}}],[\"写一个配置类实现\",{\"1\":{\"1093\":1,\"1286\":1}}],[\"写不同的构造函数用于初始化不同的参数\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"写个管理界面\",{\"1\":{\"1008\":1,\"1217\":1}}],[\"写个修复数据脚本\",{\"1\":{\"1008\":1,\"1217\":1}}],[\"写数据时\",{\"1\":{\"999\":2,\"1208\":2}}],[\"写完代码后\",{\"1\":{\"981\":1}}],[\"写代码\",{\"1\":{\"978\":1}}],[\"写文档\",{\"0\":{\"974\":1}}],[\"写\",{\"1\":{\"891\":1,\"1424\":1}}],[\"写在\",{\"1\":{\"878\":1}}],[\"写在前面\",{\"0\":{\"315\":1}}],[\"写进去的时候给一个分数\",{\"1\":{\"720\":1}}],[\"写的速度是81000次\",{\"1\":{\"656\":1}}],[\"写的速度是\",{\"1\":{\"654\":1,\"1418\":1}}],[\"写的好可以获得很大的加分\",{\"1\":{\"249\":1}}],[\"写的好不好使你得重视起来\",{\"1\":{\"203\":1}}],[\"写多读少\",{\"1\":{\"633\":1}}],[\"写冲突较多时可以使用悲观锁\",{\"1\":{\"636\":1}}],[\"写冲突较多\",{\"1\":{\"633\":1}}],[\"写冲突较少\",{\"1\":{\"632\":1}}],[\"写于家中床边\",{\"1\":{\"588\":1}}],[\"写主存的过程类似\",{\"1\":{\"326\":1}}],[\"写点业务逻辑\",{\"1\":{\"226\":1}}],[\"写成\",{\"1\":{\"155\":1}}],[\"写入数据的时候由于单个partion是末尾添加所以速度最优\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"写入到\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"写入后恢复副本数和刷新间隔\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"写入过程中\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"写入前关闭refresh\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"写入前副本数设置为0\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"写入调优\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"写入问题\",{\"1\":{\"1003\":1,\"1212\":1}}],[\"写入去重map\",{\"1\":{\"541\":1}}],[\"写入文档\",{\"1\":{\"492\":1}}],[\"写入一些样本数据\",{\"1\":{\"491\":1}}],[\"写入\",{\"1\":{\"132\":1}}],[\"写游戏引擎\",{\"1\":{\"72\":1}}],[\"写作日期为\",{\"1\":{\"42\":1}}],[\"而锁标志位则被存储在一个单独的数据结构中\",{\"1\":{\"1480\":1}}],[\"而服务器可以使用一个选择器来监控所有的通道\",{\"1\":{\"1478\":2}}],[\"而乐观锁由cas这样的原子操作实现\",{\"1\":{\"1476\":1}}],[\"而乐观锁可以让多个线程同时访问数据\",{\"1\":{\"1476\":1}}],[\"而动态代理可以代理多个类或接口\",{\"1\":{\"1474\":1}}],[\"而动态代理可以自动生成代理类\",{\"1\":{\"1474\":1}}],[\"而动态代理是在运行时动态地创建代理对象\",{\"1\":{\"1474\":1}}],[\"而副本则是分片的复制\",{\"1\":{\"1470\":1}}],[\"而elasticsearch倒排索引就是搜索引擎的一种核心技术\",{\"1\":{\"1464\":1}}],[\"而数据节点则负责存储和处理数据\",{\"1\":{\"1462\":1}}],[\"而数据根据\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"而分片就像是把一本大书分成多个小册子\",{\"1\":{\"1462\":1}}],[\"而映射则定义了文档的结构和字段类型\",{\"1\":{\"1456\":1}}],[\"而当我们搜索关键字时\",{\"1\":{\"1462\":1}}],[\"而当设置为all时\",{\"1\":{\"1452\":1}}],[\"而当consumer请求消息时\",{\"1\":{\"1444\":1}}],[\"而消费者\",{\"1\":{\"1448\":1}}],[\"而消费者则订阅这些主题并从中读取消息\",{\"1\":{\"1438\":1}}],[\"而消费者就像是咖啡师\",{\"1\":{\"1432\":1}}],[\"而kafka可以作为事件的中心枢纽\",{\"1\":{\"1434\":1}}],[\"而kafka可以作为数据流的中转站\",{\"1\":{\"1434\":1}}],[\"而kafka可以帮助我们高效地收集\",{\"1\":{\"1434\":1}}],[\"而从节点负责复制主节点的数据\",{\"1\":{\"1426\":1}}],[\"而泛型方法的类型参数只在这个方法内有效\",{\"1\":{\"1424\":1}}],[\"而泛型类不能有静态方法和静态属性\",{\"1\":{\"1424\":1}}],[\"而泛型类是在定义类本身时指定类型参数\",{\"1\":{\"1424\":1}}],[\"而泛型类在实例化的时候才能确定类型参数的实际类型\",{\"1\":{\"1424\":1}}],[\"而<\",{\"1\":{\"1424\":1}}],[\"而实际类型参数apple是在实例化box时实际替换类型参数t的类型\",{\"1\":{\"1424\":1}}],[\"而实际业务场景下\",{\"1\":{\"1000\":1,\"1209\":1}}],[\"而其他作用域的\",{\"1\":{\"1410\":1}}],[\"而我对它们的理解还远未充分\",{\"1\":{\"1406\":1}}],[\"而我们平时说的缓存\",{\"1\":{\"999\":1,\"1208\":1}}],[\"而双向链表用于存储等待线程的队列\",{\"1\":{\"1390\":1}}],[\"而唤醒线程的操作是通过\",{\"1\":{\"1390\":1}}],[\"而又积极主动寻求解决之道\",{\"1\":{\"1380\":1}}],[\"而类b通过构造函数注入需要类a的实例\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"而applicationcontext则是自动注册\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"而arraylist在并发环境下可能会出现线程安全问题\",{\"1\":{\"1075\":1,\"1270\":1}}],[\"而预期的回调doinstatement\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"而查询数据量巨大\",{\"1\":{\"1160\":1,\"1340\":1}}],[\"而这些子任务之间是相互独立的\",{\"1\":{\"1390\":1}}],[\"而这时\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"而这个过程中需要调用其他语言的本地库接口\",{\"1\":{\"1100\":1,\"1291\":1}}],[\"而这个引擎的底层源码主要使用的就是c++\",{\"1\":{\"72\":1}}],[\"而如果我们有一个任务需要分成多个阶段来执行\",{\"1\":{\"1390\":1}}],[\"而如果发生宕机的\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"而如果整个队列全部存满数据那么\",{\"1\":{\"341\":1}}],[\"而老的主题分区不会分配在该\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"而字节码文件只是\",{\"1\":{\"1100\":1,\"1291\":1}}],[\"而本地方法栈则是为虚拟机使用到的native方法服务\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"而虚拟机栈\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"而follower副本则用于备份和提供冗余\",{\"1\":{\"1444\":1}}],[\"而fast\",{\"1\":{\"1203\":1,\"1376\":1}}],[\"而fail\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"而filter则不能\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"而拦截器能够深入到方法前后\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"而拦截器是在\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"而拦截器既可以用于web程序\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"而jsp无需配置\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"而servlet主要用在控制层\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"而servlet并没有将两者分开\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"而servlet是在java代码中写html代码\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"而linkedlist常常被用作queue队列的实现类\",{\"1\":{\"1074\":1,\"1269\":1}}],[\"而linux的namespace机制是一种资源隔离方案\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"而非物理分页\",{\"1\":{\"1138\":1,\"1323\":1}}],[\"而非公平锁则不能保证这一点\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"而非叶子节点只保存索引值\",{\"1\":{\"317\":1}}],[\"而在使用pull模式时\",{\"1\":{\"1448\":1}}],[\"而在消费者部分\",{\"1\":{\"1448\":1}}],[\"而在一些读操作的泛型方法中\",{\"1\":{\"1424\":1}}],[\"而在直接引用直接指向内存中的地址\",{\"1\":{\"1105\":1,\"1296\":1}}],[\"而在非阻塞方式里\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"而在表的后端进行插入操作\",{\"1\":{\"335\":1}}],[\"而后再进行io操作\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"而i3和i4则是分别指向不同的对象\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"而i3和i4指向的是不同的对象\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"而int则是直接存储数据值\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"而int变量不需要\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"而没办法去知道具体的内容是什么\",{\"1\":{\"1034\":2,\"1238\":2}}],[\"而另一个\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"而进>程中有相应的消费者消费该消息\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"而一个eventloopgroup会包含多个eventloop\",{\"1\":{\"991\":1}}],[\"而使用\",{\"1\":{\"979\":1}}],[\"而第二段则是\",{\"1\":{\"901\":1,\"902\":1}}],[\"而maven本身还支持多种插件\",{\"1\":{\"761\":1}}],[\"而msd则相反\",{\"1\":{\"427\":1}}],[\"而并非从主内存中取值\",{\"1\":{\"755\":1}}],[\"而并发场景一定会发生资源竞争\",{\"1\":{\"615\":1}}],[\"而vt线程在进行判断flag的时候拿到的仍然是false\",{\"1\":{\"755\":1}}],[\"而检查一个键的类型就是检查键的值对象的类型\",{\"1\":{\"699\":1}}],[\"而每个分区又可以有多个副本\",{\"1\":{\"1442\":1}}],[\"而每个哈希表节点就保存了字典中的一个键值对\",{\"1\":{\"687\":1}}],[\"而每种技术都有他的瓶颈和天花板\",{\"1\":{\"72\":1}}],[\"而无需进行同步操作\",{\"1\":{\"1480\":3,\"1481\":2}}],[\"而无需进行繁琐的读写操作\",{\"1\":{\"1478\":1}}],[\"而无需进行回表操作\",{\"1\":{\"567\":1}}],[\"而无需去读取\",{\"1\":{\"1008\":1,\"1217\":1}}],[\"而无须为\",{\"1\":{\"682\":1}}],[\"而磁盘的速度相对内存来说慢很多\",{\"1\":{\"679\":1}}],[\"而磁盘在\",{\"1\":{\"319\":1}}],[\"而对于数字型而言只需要比较一次就够了\",{\"1\":{\"601\":1}}],[\"而对于我们的innodb存储引擎也有自己的最小储存单元\",{\"1\":{\"325\":1}}],[\"而大字段占用空间大\",{\"1\":{\"579\":1}}],[\"而二叉树需要进行中序遍历才能得到有序的结果\",{\"1\":{\"566\":1}}],[\"而二叉树不具备这种空间局部性\",{\"1\":{\"566\":1}}],[\"而二叉树在最坏情况下\",{\"1\":{\"566\":1}}],[\"而唯一索引则不能被其他表用作外键\",{\"1\":{\"559\":1}}],[\"而单词在某个文档中出现的位置信息并非索引系统一定要记录的\",{\"1\":{\"478\":1}}],[\"而不需要使用锁\",{\"1\":{\"1480\":1}}],[\"而不需要遍历所有文档\",{\"1\":{\"1464\":1}}],[\"而不需要一页一页地找\",{\"1\":{\"1464\":1}}],[\"而不需要逐个文档地搜索\",{\"1\":{\"1464\":1}}],[\"而不需要花费精力去处理加载驱动\",{\"1\":{\"1416\":1}}],[\"而不需要访问数据表的行\",{\"1\":{\"567\":1}}],[\"而不用从头重建索引\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"而不用二叉树\",{\"0\":{\"566\":1}}],[\"而不直接与间隙锁冲突\",{\"1\":{\"621\":1}}],[\"而不是程序出错\",{\"1\":{\"1494\":1}}],[\"而不是仅仅依赖于消息的key\",{\"1\":{\"1454\":1}}],[\"而不是立即将其传递给接收者\",{\"1\":{\"1450\":1}}],[\"而不是最新的值\",{\"1\":{\"1382\":1}}],[\"而不是等到线程结束或者\",{\"1\":{\"1382\":1}}],[\"而不是使用\",{\"1\":{\"1382\":1}}],[\"而不是使用select\",{\"1\":{\"567\":1}}],[\"而不是全表扫描\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"而不是数据窃取\",{\"1\":{\"1094\":1,\"1287\":1}}],[\"而不是把时间浪费在学习如何在不同的环境中去依赖jar包\",{\"1\":{\"761\":1}}],[\"而不是从一个线程调用\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"而不是从\",{\"1\":{\"755\":1}}],[\"而不是新创建对象\",{\"1\":{\"698\":1}}],[\"而不是检测冲突\",{\"1\":{\"633\":1}}],[\"而不是整个表\",{\"1\":{\"624\":1}}],[\"而不是直接通过索引就能获取到所需的数据\",{\"1\":{\"567\":1}}],[\"而不是指向数据的指针\",{\"1\":{\"560\":1}}],[\"而不是\",{\"1\":{\"489\":1}}],[\"而不是1\",{\"1\":{\"440\":1}}],[\"而不能删除数据\",{\"1\":{\"387\":1}}],[\"而重建堆的过程中\",{\"1\":{\"417\":1}}],[\"而文件系统\",{\"1\":{\"325\":1}}],[\"而broker则是消息的存储和传输中心\",{\"1\":{\"1444\":1}}],[\"而b+树有\",{\"1\":{\"323\":1}}],[\"而b+树只有叶子节点存data\",{\"1\":{\"323\":1}}],[\"而b+树节点只存储\",{\"1\":{\"323\":1}}],[\"而b+树由于只有叶子节点保存了data\",{\"1\":{\"323\":1}}],[\"而b\",{\"1\":{\"322\":1,\"323\":2}}],[\"而b树\",{\"1\":{\"319\":1}}],[\"而b树的范围查询相对较差\",{\"1\":{\"317\":1}}],[\"而旋转是对整棵树的操作\",{\"1\":{\"319\":1}}],[\"而是通过公共接口来访问类的属性和方法\",{\"1\":{\"1468\":1}}],[\"而是通过其他方式\",{\"1\":{\"632\":1}}],[\"而是受限于操作系统的内存大小\",{\"1\":{\"1388\":1}}],[\"而是一种思想\",{\"1\":{\"1170\":1,\"1347\":1}}],[\"而是一个\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"而是依次去请求父类加载器加载\",{\"1\":{\"1106\":1,\"1297\":1}}],[\"而是将主内存上变量的副本放进自己的工作内存中\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"而是在\",{\"1\":{\"1033\":1,\"1237\":1}}],[\"而是在每个\",{\"1\":{\"428\":1}}],[\"而是属于某个特定的namespace\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"而是渐进式地完成的\",{\"1\":{\"689\":1}}],[\"而是\",{\"1\":{\"688\":1,\"695\":1}}],[\"而是自己构建了一种名为简单动态字符串\",{\"1\":{\"682\":1}}],[\"而是由\",{\"1\":{\"657\":1}}],[\"而是用来描述与外键约束相关的锁定行为\",{\"1\":{\"623\":1}}],[\"而是指与外键约束相关的锁定行为\",{\"1\":{\"623\":1}}],[\"而是存储时间截的差值\",{\"1\":{\"441\":1}}],[\"而是利用\",{\"1\":{\"412\":1}}],[\"而是每次都会预读\",{\"1\":{\"327\":1}}],[\"而是直接被编译成机器码\",{\"1\":{\"1388\":1}}],[\"而是直接修改副本变量的值\",{\"1\":{\"755\":1}}],[\"而是直接返回错误代码\",{\"1\":{\"200\":1}}],[\"而是直接在if\",{\"1\":{\"195\":1}}],[\"而是直接执行代码\",{\"1\":{\"193\":1}}],[\"而是使用if\",{\"1\":{\"194\":1}}],[\"而是继续循环\",{\"1\":{\"190\":1}}],[\"而是zookeeper服务器集群中连接到leader的follower\",{\"1\":{\"174\":1}}],[\"而zookeeper不仅仅可以作为分布式集群的服务注册调度中心\",{\"1\":{\"182\":1}}],[\"而\",{\"1\":{\"162\":1,\"316\":1,\"424\":1,\"425\":1,\"507\":1,\"691\":1,\"692\":1,\"715\":1,\"755\":1,\"1072\":3,\"1116\":1,\"1118\":1,\"1162\":1,\"1200\":2,\"1267\":3,\"1304\":1,\"1306\":1,\"1342\":1,\"1373\":2,\"1390\":4,\"1412\":1,\"1424\":3,\"1480\":2}}],[\"而且用户中心作为一个系统中必不可少的模块\",{\"1\":{\"1492\":1}}],[\"而且容易破坏封装性\",{\"1\":{\"1468\":1}}],[\"而且对磁盘的使用较高\",{\"1\":{\"1436\":1}}],[\"而且即使在节点故障的情况下\",{\"1\":{\"1436\":1}}],[\"而且你对每个组件的职责也描述得非常透彻\",{\"1\":{\"1414\":1}}],[\"而且只能等待固定数量的线程\",{\"1\":{\"1390\":1}}],[\"而且计数器的值可以被重置\",{\"1\":{\"1390\":1}}],[\"而且计数器的值不能被重置\",{\"1\":{\"1390\":1}}],[\"而且可以重复使用\",{\"1\":{\"1390\":1}}],[\"而且可以灵活地被重用和扩展\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"而且cpu不会成为瓶颈\",{\"1\":{\"1157\":1,\"1337\":1}}],[\"而且如果不使用这种双亲委派模型将会给虚拟机的安全带来隐患\",{\"1\":{\"1106\":1,\"1297\":1}}],[\"而且它还可以与kibana等工具结合使用\",{\"1\":{\"1456\":1}}],[\"而且它内部实现了自动扩容机制\",{\"1\":{\"1074\":1,\"1269\":1}}],[\"而且它们的每一位数字都不能是0\",{\"1\":{\"304\":1}}],[\"而且系统的性能开销也是巨大的\",{\"1\":{\"1008\":1,\"1217\":1}}],[\"而且很多开源项目都使用到了\",{\"1\":{\"989\":1}}],[\"而且简单易上手\",{\"1\":{\"969\":1}}],[\"而且不想学编程\",{\"1\":{\"969\":1}}],[\"而且项目需要的这些依赖的版本和传递依赖的不相符\",{\"1\":{\"773\":1}}],[\"而且在数据中查找这类键值的计算成本很高\",{\"1\":{\"665\":1}}],[\"而且传统的关系数据库类型不适合存储这种类型的数据\",{\"1\":{\"657\":1}}],[\"而且这些操作都是原子性的\",{\"1\":{\"652\":1}}],[\"而且磁盘争用情况减少\",{\"1\":{\"579\":1}}],[\"而且时间复杂度也随之升高\",{\"1\":{\"414\":1}}],[\"而且当\",{\"1\":{\"410\":1}}],[\"而且当前ffmpeg也是放在mplayer项目组的服务器上\",{\"1\":{\"139\":1}}],[\"而且他们在磁盘里是顺序存储的\",{\"1\":{\"323\":1}}],[\"而且他的回答最靠谱\",{\"1\":{\"170\":1}}],[\"而且每个节点不止有两个子节点\",{\"1\":{\"316\":1}}],[\"而且是相对稳定的\",{\"1\":{\"263\":1}}],[\"而且\",{\"1\":{\"263\":1,\"774\":1}}],[\"而且学的很多东西都是碎片化\",{\"1\":{\"263\":1}}],[\"而且非常基础\",{\"1\":{\"117\":1}}],[\"而且还是我们从小听到大\",{\"1\":{\"72\":1}}],[\"不允许还有人不会\",{\"1\":{\"1505\":1}}],[\"不允许其他线程同时执行\",{\"1\":{\"1476\":1}}],[\"不允许值重复或者值为空\",{\"1\":{\"558\":1}}],[\"不推荐使用\",{\"1\":{\"1446\":1}}],[\"不客气\",{\"1\":{\"1430\":1,\"1438\":1,\"1440\":1,\"1444\":1,\"1446\":1,\"1452\":1,\"1454\":1,\"1460\":1,\"1464\":1,\"1466\":1}}],[\"不敢说很熟悉\",{\"1\":{\"1412\":1}}],[\"不生效\",{\"1\":{\"1408\":1}}],[\"不错\",{\"1\":{\"1400\":1,\"1404\":1,\"1406\":1,\"1410\":1,\"1412\":1,\"1442\":1,\"1476\":1}}],[\"不停顿太久\",{\"1\":{\"1398\":1}}],[\"不适用于需要极低停顿的场景\",{\"1\":{\"1396\":1}}],[\"不适用服务器环境\",{\"1\":{\"1394\":1}}],[\"不适合缓存\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"不适合大数据量用\",{\"1\":{\"493\":1}}],[\"不适合较旧或性能较差的硬件\",{\"1\":{\"239\":1}}],[\"不重复加载\",{\"1\":{\"1392\":1}}],[\"不重复元素的个数有多少\",{\"1\":{\"722\":1}}],[\"不断探索新的知识和技术\",{\"1\":{\"1454\":1}}],[\"不断提高自己\",{\"1\":{\"1416\":1}}],[\"不断提高自己对这方面的认知\",{\"1\":{\"1380\":1}}],[\"不断深耕累积\",{\"1\":{\"1400\":1}}],[\"不断总结与提高\",{\"1\":{\"1400\":1}}],[\"不断总结和实践\",{\"1\":{\"1380\":1}}],[\"不断通过实践来提高各工具与理论的运用能力\",{\"1\":{\"1400\":1}}],[\"不到万不得已不去拿锁\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"不带spring事务的方法内\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"不为空\",{\"1\":{\"1119\":1,\"1307\":1}}],[\"不建议用\",{\"1\":{\"1072\":1,\"1267\":1}}],[\"不必担心最后是否释放锁\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"不易操作\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"不易存储\",{\"1\":{\"438\":1}}],[\"不像cms要全部stw\",{\"1\":{\"1398\":1}}],[\"不像以上三种方式是多个线程之间的通信\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"不像二叉树那样\",{\"1\":{\"319\":1}}],[\"不安全\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"不撤销\",{\"1\":{\"981\":1}}],[\"不删除工作空间改动代码\",{\"1\":{\"981\":2}}],[\"不想提交\",{\"1\":{\"979\":1}}],[\"不了解可以先不用在意\",{\"1\":{\"974\":1}}],[\"不了解整个项目的开发流程\",{\"1\":{\"249\":1}}],[\"不然自定义的异常也会被转换为appointexception\",{\"1\":{\"893\":1}}],[\"不然\",{\"1\":{\"889\":1}}],[\"不熟悉查看前面文章\",{\"1\":{\"872\":1}}],[\"不一一测试了\",{\"1\":{\"891\":1}}],[\"不一一介绍\",{\"1\":{\"872\":1}}],[\"不一定是提交的哈希值\",{\"1\":{\"980\":1}}],[\"不一定\",{\"1\":{\"826\":1}}],[\"不一定完全精确\",{\"1\":{\"392\":1}}],[\"不开启\",{\"1\":{\"853\":1}}],[\"不区分大小写\",{\"1\":{\"831\":1}}],[\"不写实现类\",{\"1\":{\"824\":1}}],[\"不写也行\",{\"1\":{\"541\":1}}],[\"不但创建目录结构和pom\",{\"1\":{\"767\":1}}],[\"不但严重浪费了空间\",{\"1\":{\"414\":1}}],[\"不做任何操作\",{\"1\":{\"1418\":1}}],[\"不做过多解释\",{\"1\":{\"755\":1}}],[\"不做深入讲解\",{\"1\":{\"488\":1}}],[\"不讲虚的\",{\"1\":{\"715\":1}}],[\"不支持排序等\",{\"1\":{\"1380\":1}}],[\"不支持\",{\"1\":{\"960\":1}}],[\"不支持降级操作\",{\"1\":{\"693\":1}}],[\"不支持sql语句\",{\"1\":{\"651\":1}}],[\"不理解什么是跳跃表\",{\"1\":{\"691\":1}}],[\"不在多个线程间共享\",{\"1\":{\"1060\":1,\"1258\":1}}],[\"不在一个事务中\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"不在进行时\",{\"1\":{\"687\":1}}],[\"不在指定区间之内的元素都将被删除\",{\"1\":{\"667\":1}}],[\"不存在就创建\",{\"1\":{\"727\":1}}],[\"不存在时\",{\"1\":{\"668\":1,\"1418\":1}}],[\"不存储实际数据\",{\"1\":{\"566\":1}}],[\"不执行任何操作\",{\"1\":{\"667\":2}}],[\"不仅提升了数据读取的效率\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"不仅因为消耗内存\",{\"1\":{\"665\":1}}],[\"不仅仅支持简单的\",{\"1\":{\"655\":1}}],[\"不仅仅是\",{\"1\":{\"453\":1,\"1418\":1}}],[\"不再需要强制类型转换\",{\"1\":{\"1424\":1}}],[\"不再赘述\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"不再被使用的对象\",{\"1\":{\"1102\":1,\"1293\":1}}],[\"不再由容器管理\",{\"1\":{\"657\":1}}],[\"不再成为你的知识盲点\",{\"1\":{\"315\":1}}],[\"不加锁\",{\"1\":{\"638\":1}}],[\"不能在\",{\"1\":{\"1424\":1}}],[\"不能是对象\",{\"1\":{\"1402\":1}}],[\"不能是基本类型\",{\"1\":{\"1041\":1,\"1242\":1}}],[\"不能保证原子性\",{\"1\":{\"1382\":1}}],[\"不能回滚\",{\"1\":{\"1147\":1,\"1330\":1}}],[\"不能被实例化\",{\"1\":{\"1070\":1,\"1265\":1}}],[\"不能被中断\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"不能被强行剥夺\",{\"1\":{\"625\":1}}],[\"不能统一返回\",{\"1\":{\"894\":1}}],[\"不能防止sql注入\",{\"1\":{\"842\":1}}],[\"不能获取值\",{\"1\":{\"493\":1}}],[\"不可变的\",{\"1\":{\"1446\":1}}],[\"不可变说的是变量当中的地址值不可改变\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"不可变说的是变量当中的数据不可改变\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"不可重复读指的是在同一事务内\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"不可重复读\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"不可重复读和幻读等\",{\"1\":{\"616\":1}}],[\"不可靠\",{\"1\":{\"1092\":1,\"1285\":1}}],[\"不可以防止sql注入\",{\"1\":{\"826\":1}}],[\"不可剥夺条件\",{\"1\":{\"625\":1}}],[\"不可能全部存储在内存中\",{\"1\":{\"324\":1}}],[\"不影响表结构\",{\"1\":{\"581\":1}}],[\"不同map中null键与null值的处理方式\",{\"1\":{\"1406\":1}}],[\"不同map实现类的序列化方式与注意事项\",{\"1\":{\"1406\":1}}],[\"不同list的扩容策略及性能影响\",{\"1\":{\"1404\":1}}],[\"不同点\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"不同\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"不同在于其存储作用域为\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"不同线程的run\",{\"1\":{\"1055\":1,\"1253\":1}}],[\"不同服务节点之间的通信是如何做的呢\",{\"1\":{\"990\":1}}],[\"不同服务节点之间经常需要相互调用\",{\"1\":{\"990\":1}}],[\"不同层高节点\",{\"1\":{\"691\":1}}],[\"不同的哈希函数对hashmap性能的影响\",{\"1\":{\"1406\":1}}],[\"不同的时刻读到的同一批数据可能是不一样的\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"不同的sqlsession之间的缓存数据也不是想互访就能互访的\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"不同的是它为本地方法服务\",{\"1\":{\"1388\":1}}],[\"不同的是\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"不同的是每个元素都会关联一个\",{\"1\":{\"670\":1}}],[\"不同的编码可以在不同的使用场景上优化对象的使用效率\",{\"1\":{\"699\":1}}],[\"不同的业务库可根据自身情况定制优化方案\",{\"1\":{\"583\":1}}],[\"不同的一点是b\",{\"1\":{\"319\":1}}],[\"不同值的数量较少\",{\"1\":{\"573\":1}}],[\"不同版本中支持程度不同\",{\"1\":{\"558\":1}}],[\"不被索引\",{\"1\":{\"493\":1}}],[\"不容易出错\",{\"1\":{\"491\":1}}],[\"不分词字段\",{\"1\":{\"493\":1}}],[\"不分词\",{\"1\":{\"464\":1}}],[\"不转小写\",{\"1\":{\"464\":1}}],[\"不懂的同学建议不要交太多学费\",{\"1\":{\"461\":1}}],[\"不用我再解释了\",{\"1\":{\"1195\":1,\"1368\":1}}],[\"不用等待所有的连接\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"不用编程\",{\"1\":{\"969\":1}}],[\"不用\",{\"1\":{\"440\":1,\"1412\":1}}],[\"不得不插入后再做一次更新\",{\"1\":{\"436\":1}}],[\"不改变参数内容\",{\"1\":{\"405\":2,\"417\":1}}],[\"不放过一个\",{\"1\":{\"383\":1}}],[\"不需要添加\",{\"1\":{\"1507\":1}}],[\"不需要添加版本\",{\"1\":{\"773\":1}}],[\"不需要强转\",{\"1\":{\"1424\":1}}],[\"不需要在程序中进行大量的字符串拼接\",{\"1\":{\"1416\":1}}],[\"不需要频繁使用\",{\"1\":{\"1412\":1}}],[\"不需要一次全堆回收\",{\"1\":{\"1398\":1}}],[\"不需要stw\",{\"1\":{\"1396\":2}}],[\"不需要stop\",{\"1\":{\"1396\":1}}],[\"不需要打成\",{\"1\":{\"1182\":1,\"1357\":1}}],[\"不需要数据库提供特殊的支持\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"不需要花费精力去处理加载驱动\",{\"1\":{\"1129\":1,\"1314\":1}}],[\"不需要等待响应\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"不需要手动关闭引擎\",{\"1\":{\"927\":1}}],[\"不需要用户干预\",{\"1\":{\"637\":1}}],[\"不需要用户显式操作\",{\"1\":{\"624\":1,\"629\":1}}],[\"不需要额外的工作\",{\"1\":{\"435\":1}}],[\"不需要寻道时间\",{\"1\":{\"327\":1}}],[\"不需要什么奖励\",{\"1\":{\"167\":1,\"381\":1,\"400\":1,\"409\":1,\"417\":1,\"430\":1,\"650\":1,\"676\":1,\"711\":1,\"761\":1,\"795\":1}}],[\"不是主节点\",{\"1\":{\"1466\":1}}],[\"不是线程安全的\",{\"1\":{\"1446\":1}}],[\"不是性能瓶颈\",{\"1\":{\"1418\":1}}],[\"不是同个请求\",{\"1\":{\"1089\":1,\"1282\":1}}],[\"不是列表类型\",{\"1\":{\"667\":1}}],[\"不是所有的方法都需要事务\",{\"1\":{\"893\":1}}],[\"不是所有字段都要走索引\",{\"1\":{\"573\":1}}],[\"不是所有情况都不允许回表\",{\"1\":{\"567\":1}}],[\"不是\",{\"1\":{\"563\":1,\"721\":1,\"1072\":1,\"1267\":1}}],[\"不是之一\",{\"1\":{\"265\":1}}],[\"不是必要项\",{\"1\":{\"263\":1}}],[\"不好意思露脸\",{\"1\":{\"264\":1}}],[\"不好阅读\",{\"1\":{\"198\":1}}],[\"不知道🤷‍♀️该看点什么来\",{\"1\":{\"1378\":1}}],[\"不知道如何部署\",{\"1\":{\"761\":1}}],[\"不知道什么是x265\",{\"1\":{\"152\":1}}],[\"不知不觉程序员这个头衔我已经多年\",{\"1\":{\"263\":1}}],[\"不太前沿\",{\"1\":{\"239\":1}}],[\"不携带任何业务信息的日志\",{\"1\":{\"229\":1}}],[\"不携带上下文\",{\"0\":{\"229\":1}}],[\"不管是抛出异常或者正常退出都会执行\",{\"1\":{\"752\":1}}],[\"不管用哪种\",{\"1\":{\"206\":1}}],[\"不管有没有初始化实例\",{\"1\":{\"91\":1}}],[\"不要将其设置为\",{\"1\":{\"1412\":1}}],[\"不要穿插其他网络操作\",{\"1\":{\"893\":1}}],[\"不要关闭原\",{\"1\":{\"660\":1}}],[\"不要返回用不到的任何字段\",{\"0\":{\"603\":1}}],[\"不要在\",{\"0\":{\"596\":1}}],[\"不要放过任何一个你模凌两可的点\",{\"1\":{\"541\":1}}],[\"不要打印无意义的日志\",{\"0\":{\"229\":1}}],[\"不要打印重复日志\",{\"0\":{\"226\":1}}],[\"不要用e\",{\"0\":{\"224\":1}}],[\"不要使用日志系统的\",{\"0\":{\"222\":1}}],[\"不要上来直接\",{\"1\":{\"219\":1}}],[\"不要直接把所有异常都抛到最外层\",{\"1\":{\"200\":1}}],[\"不要超过一个阈值\",{\"1\":{\"151\":1}}],[\"不会阻塞客户端请求\",{\"1\":{\"1420\":1}}],[\"不会影响应用的访问\",{\"1\":{\"1420\":1}}],[\"不会触发初始化\",{\"1\":{\"1392\":2}}],[\"不会误导小菜鸟我\",{\"1\":{\"1392\":1}}],[\"不会因为紧张的忘记\",{\"1\":{\"1378\":1}}],[\"不会马上进入运行状态\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"不会再给默认值了\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"不会让一个模块资源占用过高\",{\"1\":{\"708\":1}}],[\"不会命中索引\",{\"1\":{\"598\":1}}],[\"不会有不同的配置\",{\"1\":{\"440\":1}}],[\"不会有spof\",{\"1\":{\"170\":1}}],[\"不会对时间有任何影响\",{\"1\":{\"326\":1}}],[\"不会对系统运行造成大的影响\",{\"1\":{\"219\":1}}],[\"不会对整个系统造成大的影响\",{\"1\":{\"183\":1}}],[\"不对外提供服务\",{\"1\":{\"170\":1}}],[\"不打印节头和页脚\",{\"1\":{\"160\":1}}],[\"不打印每个字段的键\",{\"1\":{\"160\":1}}],[\"不处理音频\",{\"1\":{\"144\":1}}],[\"不处理视频\",{\"1\":{\"144\":1}}],[\"不过这点性能损失在大部分情况下可以忽略\",{\"1\":{\"1424\":1}}],[\"不过list相关知识还有更广阔的空间\",{\"1\":{\"1404\":1}}],[\"不过日常工作中也对jvm参数与监控工具稍有使用\",{\"1\":{\"1400\":1}}],[\"不过也可以直接运行\",{\"1\":{\"774\":1}}],[\"不过由于\",{\"1\":{\"503\":1}}],[\"不过由于一般系统分页都要大于1k\",{\"1\":{\"123\":2}}],[\"不过\",{\"1\":{\"499\":1,\"695\":1,\"1464\":1}}],[\"不过是一种特殊的线性表\",{\"1\":{\"335\":1}}],[\"不过目前已经有多磁头独立技术\",{\"1\":{\"327\":1}}],[\"不过预设条件判断用起来也非常丝滑\",{\"1\":{\"199\":1}}],[\"不过可以将其设置为更小\",{\"1\":{\"123\":1}}],[\"不论如何定义\",{\"1\":{\"1494\":1}}],[\"不论最终结果如何\",{\"1\":{\"1380\":1}}],[\"不论这些请求是否得到了正确的执行\",{\"1\":{\"1142\":1,\"1325\":1}}],[\"不论是我们在买菜\",{\"1\":{\"934\":1}}],[\"不论是网游\",{\"1\":{\"72\":1}}],[\"不论你学什么语言\",{\"1\":{\"117\":1}}],[\"不只可以下载\",{\"1\":{\"114\":1}}],[\"不自动配置web服务器\",{\"1\":{\"102\":1}}],[\"不说了\",{\"1\":{\"72\":1}}],[\"不如加上三五好友加入\",{\"1\":{\"53\":1}}],[\"高可用\",{\"1\":{\"1418\":1,\"1422\":1}}],[\"高可用这是现在互联网经常提到的一个词\",{\"1\":{\"679\":1}}],[\"高水位\",{\"1\":{\"1114\":1,\"1302\":1}}],[\"高速缓存的读写速度远高于内存\",{\"1\":{\"999\":1,\"1208\":1}}],[\"高速缓存\",{\"1\":{\"999\":1,\"1208\":1}}],[\"高级查询的整理\",{\"0\":{\"860\":1}}],[\"高级查询\",{\"0\":{\"854\":1}}],[\"高度自动化\",{\"1\":{\"762\":1}}],[\"高度优化\",{\"1\":{\"243\":1}}],[\"高版本\",{\"1\":{\"711\":1}}],[\"高频面试问题更是基础中的高频实战要点\",{\"1\":{\"585\":1}}],[\"高频查询列\",{\"1\":{\"565\":1}}],[\"高并发的系统\",{\"1\":{\"1408\":1}}],[\"高并发的性能瓶颈\",{\"1\":{\"581\":1}}],[\"高并发\",{\"1\":{\"632\":1,\"679\":1}}],[\"高并发场景下\",{\"0\":{\"636\":1},\"1\":{\"580\":1}}],[\"高效率的收集器\",{\"1\":{\"1398\":1}}],[\"高效的gc算法提供了参考\",{\"1\":{\"1396\":1}}],[\"高效的范围查询和排序\",{\"1\":{\"566\":2}}],[\"高效与否的关键就在于这个映射函数的确定\",{\"1\":{\"401\":1}}],[\"高性能的网络服务器和客户端\",{\"1\":{\"988\":1}}],[\"高性能\",{\"1\":{\"453\":1}}],[\"高亮\",{\"1\":{\"447\":1}}],[\"高的元素\",{\"1\":{\"406\":1}}],[\"高负荷下缓冲大小\",{\"1\":{\"123\":1}}],[\"高体量的单机游戏\",{\"1\":{\"72\":1}}],[\"高质量\",{\"1\":{\"72\":1}}],[\"高成本\",{\"1\":{\"72\":1}}],[\"‌‌什么是\",{\"1\":{\"72\":1}}],[\"创建dockerfile\",{\"0\":{\"1514\":1}}],[\"创建倒排索引\",{\"1\":{\"1470\":2}}],[\"创建子进程\",{\"1\":{\"1420\":1}}],[\"创建新键值对\",{\"1\":{\"1406\":1}}],[\"创建实例\",{\"1\":{\"1392\":1}}],[\"创建成功时watcher\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"创建功能方法\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"创建两个模块分别为\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"创建项目\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"创建大量的整数类型redisobject存在内存开销\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"创建会话对象\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"创建statement等复杂的过程\",{\"1\":{\"1129\":1,\"1314\":1}}],[\"创建sqlsessionfactory\",{\"1\":{\"814\":1}}],[\"创建连接\",{\"1\":{\"1129\":1,\"1314\":1,\"1416\":1}}],[\"创建1个计数器\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"创建配置类把拦截器添加到拦截器链中\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"创建容器\",{\"1\":{\"1020\":1,\"1226\":1}}],[\"创建一个服务器通道\",{\"1\":{\"1478\":1}}],[\"创建一个选择器\",{\"1\":{\"1478\":1}}],[\"创建一个消费者\",{\"1\":{\"1450\":1}}],[\"创建一个生产者\",{\"1\":{\"1450\":1}}],[\"创建一个新的\",{\"1\":{\"1440\":1}}],[\"创建一个\",{\"1\":{\"1440\":1}}],[\"创建一个配置类将功能方法类添加到\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"创建一个对象\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"创建一个仓库\",{\"1\":{\"976\":1}}],[\"创建一个我们的博客仓库\",{\"1\":{\"976\":1}}],[\"创建一万个字符串对象\",{\"1\":{\"698\":1}}],[\"创建接口\",{\"0\":{\"912\":1}}],[\"创建接口文档\",{\"1\":{\"210\":1}}],[\"创建order表\",{\"1\":{\"855\":1}}],[\"创建usermapper测试用例\",{\"1\":{\"826\":1}}],[\"创建usermapper\",{\"1\":{\"826\":1}}],[\"创建usermapper接口\",{\"1\":{\"826\":1}}],[\"创建userdaoimpl\",{\"0\":{\"817\":1}}],[\"创建userdao\",{\"0\":{\"816\":1}}],[\"创建表\",{\"1\":{\"799\":1}}],[\"创建数据库\",{\"1\":{\"799\":1}}],[\"创建web项目时\",{\"1\":{\"767\":1}}],[\"创建了一个包含整数值\",{\"1\":{\"698\":1}}],[\"创建锁表\",{\"1\":{\"640\":1}}],[\"创建联合全文索引\",{\"1\":{\"570\":1}}],[\"创建索引就像是在图书馆里开辟一个新的区域\",{\"1\":{\"1462\":1}}],[\"创建索引\",{\"0\":{\"519\":1},\"1\":{\"572\":1}}],[\"创建多长的bit数组比较合适\",{\"1\":{\"392\":1}}],[\"创建\",{\"0\":{\"901\":1,\"902\":1},\"1\":{\"296\":1,\"570\":1,\"1189\":1,\"1364\":1,\"1416\":1}}],[\"创始人简历\",{\"1\":{\"72\":1}}],[\"创造力和批判性思考\",{\"1\":{\"56\":1}}],[\"悟空\",{\"1\":{\"72\":6}}],[\"功能设计\",{\"1\":{\"1502\":1}}],[\"功能和\",{\"1\":{\"1412\":1}}],[\"功能上将过期时间存在\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"功能搭建网站\",{\"1\":{\"976\":1}}],[\"功能稳定的系统提供给用户\",{\"1\":{\"171\":1}}],[\"功能详情\",{\"1\":{\"61\":1,\"67\":1}}],[\"功能\",{\"0\":{\"58\":1,\"64\":1},\"1\":{\"59\":1,\"65\":1,\"975\":1,\"1408\":1,\"1502\":1}}],[\"功能亮点\",{\"0\":{\"48\":1}}],[\"书写查询sql语句\",{\"1\":{\"838\":1}}],[\"书籍下载链接\",{\"1\":{\"56\":1}}],[\"书籍是那艘引领我探索未知世界的航船\",{\"1\":{\"56\":1}}],[\"书单我已经帮大家打包好了\",{\"1\":{\"56\":1}}],[\"与传统消息系统不同\",{\"1\":{\"1450\":1}}],[\"与用户线程共享运行\",{\"1\":{\"1396\":1}}],[\"与用户线程一起工作\",{\"1\":{\"1394\":1,\"1396\":3,\"1398\":2}}],[\"与典型情况\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"与软件系统中对象之间的耦合关系非常相似\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"与spring完美集成\",{\"1\":{\"1130\":1,\"1315\":1}}],[\"与分区之间的映射关系了\",{\"1\":{\"1119\":1,\"1307\":1}}],[\"与此同时\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"与本地方法库交互\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"与虚拟机栈所发挥的作用是非常相似的\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"与eventloop一起用来参与io处理\",{\"1\":{\"991\":1}}],[\"与范围查询\",{\"1\":{\"664\":1}}],[\"与任何其他类型的锁都不兼容\",{\"1\":{\"638\":1}}],[\"与临时表一样\",{\"0\":{\"609\":1}}],[\"与其他\",{\"1\":{\"655\":1}}],[\"与其他类型的索引相比\",{\"1\":{\"568\":1}}],[\"与其他发行版相比\",{\"1\":{\"240\":1}}],[\"与存储策略相关的参数\",{\"1\":{\"493\":1}}],[\"与索引相关的参数\",{\"1\":{\"493\":1}}],[\"与域数据格式及约束相关的参数\",{\"1\":{\"493\":1}}],[\"与上图的基本索引系统比\",{\"1\":{\"478\":1}}],[\"与计数排序不同\",{\"1\":{\"404\":1}}],[\"与主存不同\",{\"1\":{\"327\":1}}],[\"与模型对话\",{\"1\":{\"294\":1}}],[\"与启动时过程相同\",{\"1\":{\"183\":4}}],[\"与参数的名字无关\",{\"1\":{\"842\":1}}],[\"与参数\",{\"1\":{\"162\":2}}],[\"与\",{\"0\":{\"132\":1},\"1\":{\"323\":1,\"652\":1,\"723\":1,\"755\":1,\"1117\":1,\"1305\":1}}],[\"与nginx进程数相除\",{\"1\":{\"123\":1}}],[\"与一本好书为伴\",{\"1\":{\"56\":1}}],[\"与不同文化的思想碰撞\",{\"1\":{\"56\":1}}],[\"更容易扩展和升级\",{\"1\":{\"1408\":1}}],[\"更可扩展\",{\"1\":{\"1408\":1}}],[\"更准确的说法应是\",{\"1\":{\"1398\":1}}],[\"更准确的来说\",{\"1\":{\"1398\":1}}],[\"更大的挑战\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"更改前的记录相同的记录行\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"更适合于单线程环境\",{\"1\":{\"1072\":1,\"1267\":1}}],[\"更适合服务器环境\",{\"1\":{\"240\":1}}],[\"更精确\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"更加节省内容\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"更高的并发量\",{\"1\":{\"1000\":1,\"1209\":1}}],[\"更低的资源消耗和更少的内存复制\",{\"1\":{\"989\":1}}],[\"更低的延迟\",{\"1\":{\"989\":1}}],[\"更有效\",{\"1\":{\"574\":1}}],[\"更能的索引也意味着更多的存储空间\",{\"1\":{\"563\":1}}],[\"更节省资源\",{\"1\":{\"481\":1}}],[\"更是在spring中发扬光大\",{\"1\":{\"745\":1}}],[\"更是关于探索和发现\",{\"1\":{\"308\":1}}],[\"更是灵魂的对话\",{\"1\":{\"56\":1}}],[\"更新频繁\",{\"1\":{\"1476\":1}}],[\"更新频率\",{\"1\":{\"565\":1}}],[\"更新次数少\",{\"1\":{\"1476\":1}}],[\"更新数组对应位置\",{\"1\":{\"1406\":1}}],[\"更新到缓存中\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"更新yum到最新版本\",{\"1\":{\"915\":1}}],[\"更新的statement\",{\"1\":{\"826\":1}}],[\"更新用户信息\",{\"1\":{\"816\":1}}],[\"更新这是大多数人做法\",{\"1\":{\"786\":1}}],[\"更新和删除文档的过程\",{\"0\":{\"1033\":1,\"1237\":1}}],[\"更新和删除时\",{\"1\":{\"573\":1}}],[\"更新和删除操作的开销\",{\"1\":{\"565\":1}}],[\"更新锁竞争\",{\"1\":{\"571\":1}}],[\"更新操作\",{\"1\":{\"566\":1,\"642\":1}}],[\"更新操作的效率\",{\"1\":{\"566\":1}}],[\"更新\",{\"0\":{\"527\":1},\"1\":{\"1007\":1,\"1216\":1}}],[\"更新了一段时间\",{\"1\":{\"270\":1}}],[\"更新周期长\",{\"1\":{\"241\":1}}],[\"更新时间轴\",{\"1\":{\"270\":1}}],[\"更新时间等页面元信息\",{\"1\":{\"21\":1}}],[\"更新时间\",{\"1\":{\"18\":1}}],[\"更换底层的日志框架\",{\"1\":{\"222\":1}}],[\"更换自己的选票并告诉其他server\",{\"1\":{\"183\":1}}],[\"更好的选择是switch\",{\"0\":{\"192\":1}}],[\"更多方法\",{\"1\":{\"1444\":1}}],[\"更多内存\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"更多的是为了提升读性能\",{\"1\":{\"1000\":1,\"1209\":1}}],[\"更多的索引意味着更多的维护成本\",{\"1\":{\"563\":1}}],[\"更多数据源\",{\"1\":{\"947\":1}}],[\"更多查询集群状态的命令\",{\"1\":{\"515\":1}}],[\"更多扩展词库\",{\"0\":{\"467\":1}}],[\"更多阅读阅读维基百科英文\",{\"1\":{\"396\":1}}],[\"更多阅读下面链接\",{\"1\":{\"153\":1}}],[\"更多\",{\"1\":{\"153\":1,\"257\":1}}],[\"每本书都有一个唯一的编号\",{\"1\":{\"1462\":1}}],[\"每当进行增删元素等操作时\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"每种类型的对象至少都有两种或以上的编码方式\",{\"1\":{\"699\":1}}],[\"每种发行版都有其独特的优势和局限性\",{\"1\":{\"244\":1}}],[\"每次变量更新的时候把version++\",{\"1\":{\"1476\":1}}],[\"每次获取\",{\"1\":{\"1410\":1}}],[\"每次获取下一个元素的时候都会去检查\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"每次写入都立即写入内存\",{\"1\":{\"1382\":1}}],[\"每次写入后必须立即同步回主内存当中\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"每次修改这个变量时\",{\"1\":{\"1382\":1}}],[\"每次访问这个变量时\",{\"1\":{\"1382\":1}}],[\"每次迭代的顺序可能不同\",{\"1\":{\"1380\":1}}],[\"每次扩容时\",{\"1\":{\"1380\":1}}],[\"每次请求数据库\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"每次文件操作也是直接操作的\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"每次读取前必须先从主内存刷新最新的值\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"每次读写缓存时可以直接操作\",{\"1\":{\"717\":1}}],[\"每次选举每个节点都把自己所知道节点排一次序\",{\"1\":{\"1027\":1,\"1231\":1}}],[\"每次测试方法都继承它\",{\"1\":{\"891\":1}}],[\"每次使用完要将连接返回给连接池\",{\"1\":{\"711\":1}}],[\"每次对字典执行添加\",{\"1\":{\"688\":1}}],[\"每次浏览都得给+1\",{\"1\":{\"657\":1}}],[\"每次更新记录时\",{\"1\":{\"642\":1}}],[\"每次更新数据时\",{\"1\":{\"636\":1}}],[\"每次投票后\",{\"1\":{\"183\":1}}],[\"每次投票会包含所推举的服务器的myid和zxid\",{\"1\":{\"183\":1}}],[\"每页包含一定数量的行\",{\"1\":{\"624\":1}}],[\"每条记录称为一个倒排项\",{\"1\":{\"477\":1}}],[\"每部分用\",{\"1\":{\"441\":1}}],[\"每放一个元素就将c\",{\"1\":{\"411\":1}}],[\"每天凌晨定时对索引做force\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"每天出门都要给房子上锁\",{\"1\":{\"616\":1}}],[\"每天时间不够用\",{\"1\":{\"264\":1}}],[\"每天大约是\",{\"1\":{\"238\":1}}],[\"每人\",{\"1\":{\"263\":1}}],[\"每一步都创建一个新的镜像层\",{\"1\":{\"1512\":1}}],[\"每一步都是确定且可复用的场景\",{\"1\":{\"197\":1}}],[\"每一次getbean\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"每一次的深入都能让我们的专业技能更加精湛\",{\"1\":{\"56\":1}}],[\"每一条指令构建一层\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"每一个方法被调用直至执行完成的过程\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"每一个线程都有一个独有的工作内存\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"每一个线程运行时都有一个线程栈\",{\"1\":{\"755\":1}}],[\"每一个客户端连接\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"每一个单独的线程能够像创建了一个自己的\",{\"1\":{\"708\":1}}],[\"每一个整数按照其值对号入座\",{\"1\":{\"412\":1}}],[\"每一个问题都像是一块拼图\",{\"1\":{\"307\":1}}],[\"每一项和前一项相加\",{\"1\":{\"411\":1}}],[\"每台机器都试图找到leader\",{\"1\":{\"183\":1}}],[\"每隔1s就抓一帧\",{\"1\":{\"158\":1}}],[\"每个对象都有一个\",{\"1\":{\"1481\":1}}],[\"每个对象都有一个监视器锁\",{\"1\":{\"1480\":1}}],[\"每个对象的引用计数信息由\",{\"1\":{\"698\":1}}],[\"每个客户端都可以使用一个通道来进行数据的读写操作\",{\"1\":{\"1478\":2}}],[\"每个elasticsearch节点在启动时都会尝试与zookeeper建立连接\",{\"1\":{\"1466\":1}}],[\"每个生产者都会生成一个唯一的序列号\",{\"1\":{\"1454\":1}}],[\"每个topic可以有多个分区\",{\"1\":{\"1442\":1}}],[\"每个槽位对应一个分片\",{\"1\":{\"1426\":1}}],[\"每个作用域适合的场景是什么\",{\"1\":{\"1410\":1}}],[\"每个全局\",{\"1\":{\"1410\":1}}],[\"每个模块保持高内聚\",{\"1\":{\"1408\":1}}],[\"每个阶段都需要等待所有线程都完成后才能继续执行\",{\"1\":{\"1390\":1}}],[\"每个子任务执行完后就将计数器的值减\",{\"1\":{\"1390\":1}}],[\"每个方法在执行的同时都会创建一个栈帧\",{\"1\":{\"1388\":1}}],[\"每个方法被执行的时候都会同时创建一个栈帧\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"每个数组元素是一个单链表结构的头节点\",{\"1\":{\"1380\":1}}],[\"每个容器中只有一个bean的实例\",{\"1\":{\"1172\":1,\"1349\":1}}],[\"每个redisobject内部结构至少占16字节\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"每个文件对应数据库中的一张表\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"每个文档根据\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"每个文档就转换为由单词序列构成的数据流\",{\"1\":{\"478\":1}}],[\"每个日志数据段都会分配两个文件\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"每个分区都可以独立地处理读写请求\",{\"1\":{\"1444\":1}}],[\"每个分区都可以并行处理消息\",{\"1\":{\"1440\":1}}],[\"每个分区都有一个leader和多个follower副本\",{\"1\":{\"1444\":1}}],[\"每个分区都有一个唯一的偏移量\",{\"1\":{\"1442\":1}}],[\"每个分区的多个副本中的\",{\"1\":{\"1116\":2,\"1304\":2}}],[\"每个分片存储了索引的一部分数据\",{\"1\":{\"1470\":1}}],[\"每个分片存储在不同的redis节点上\",{\"1\":{\"1426\":1}}],[\"每个分片都有一个唯一的shardid\",{\"1\":{\"1462\":1}}],[\"每个分片都有一个主节点和多个从节点\",{\"1\":{\"1426\":1}}],[\"每个分片都是一个独立的存储单元\",{\"1\":{\"1462\":1}}],[\"每个分片加载并\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"每个分片返回各自优先队列中所有文档的\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"每个分片在本地执行查询并添加结果到大小为\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"每个jsp页面就是一个servlet实例\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"每个线程执行完后就将计数器的值减\",{\"1\":{\"1390\":1}}],[\"每个线程执行完当前阶段后就调用\",{\"1\":{\"1390\":2}}],[\"每个线程都有一个独立的程序计数器\",{\"1\":{\"1388\":1}}],[\"每个线程都只操作自己工作内存中的变量\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"每个线程不直接操作在主内存中的变量\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"每个线程需要不断的轮询\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"每个乘客\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"每个人负责一部分\",{\"1\":{\"1462\":1}}],[\"每个人要到达某个目的地可以认为是一个线程\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"每个人告诉售票员自己的目的地\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"每个shard会在本地执行查询请求后会生成一个命中文档的优先级队列\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"每个server会发出一个投票\",{\"1\":{\"183\":1}}],[\"每个server发出一个投票给集群其他机器\",{\"1\":{\"183\":1}}],[\"每个server发出一个投票\",{\"1\":{\"183\":1}}],[\"每个pojo类都要去配置\",{\"1\":{\"831\":1}}],[\"每个用户每天的签到用\",{\"1\":{\"721\":1}}],[\"每个用户可以领取的代币数量\",{\"1\":{\"540\":1,\"541\":1}}],[\"每个跳跃表节点的层高都是\",{\"1\":{\"692\":1}}],[\"每个元素都包含一个指向其他节点的指针\",{\"1\":{\"691\":1}}],[\"每个字典带有两个哈希表\",{\"1\":{\"689\":1}}],[\"每个字段可以被索引与搜索\",{\"1\":{\"453\":1}}],[\"每个哈希表节点都有一个\",{\"1\":{\"687\":1}}],[\"每个链表节点包含四个字段\",{\"1\":{\"1380\":1}}],[\"每个链表节点由一个\",{\"1\":{\"685\":1}}],[\"每个链表使用一个\",{\"1\":{\"685\":1}}],[\"每个实例都需要各自保存一份缓存\",{\"1\":{\"678\":1}}],[\"每个集合可存储40多亿个成员\",{\"1\":{\"670\":1}}],[\"每个列表超过40亿个元素\",{\"1\":{\"667\":1,\"718\":1}}],[\"每个页包含多行数据\",{\"1\":{\"629\":1}}],[\"每个事务都在等待下一个事务所持有的资源\",{\"1\":{\"625\":1}}],[\"每个事务都在等待其他事务释放资源\",{\"1\":{\"625\":1}}],[\"每个表只有这个表的部分数据\",{\"1\":{\"583\":1}}],[\"每个表存储其中一部分字段\",{\"1\":{\"579\":1}}],[\"每个库只有这个表的部分数据\",{\"1\":{\"583\":1}}],[\"每个库可以放在不同的服务器上\",{\"1\":{\"580\":1,\"581\":1}}],[\"每个位表示某个值是否存在于该列中\",{\"1\":{\"568\":1}}],[\"每个嵌套的对象都能够独立地被搜索\",{\"1\":{\"504\":1}}],[\"每个桶存储一定范围的数值\",{\"1\":{\"423\":1}}],[\"每个桶只存储单一键值\",{\"1\":{\"423\":1}}],[\"每个桶子再个别排序\",{\"1\":{\"401\":1}}],[\"每个结点的值都大于或等于其左右孩子结点的值\",{\"1\":{\"417\":1}}],[\"每个存储块称为一页\",{\"1\":{\"327\":1}}],[\"每个存储单元有唯一的地址\",{\"1\":{\"326\":1}}],[\"每个存储单元存储固定大小的数据\",{\"1\":{\"326\":1}}],[\"每个扇区是磁盘的最小存储单元\",{\"1\":{\"327\":1}}],[\"每个段叫做一个扇区\",{\"1\":{\"327\":1}}],[\"每个同心环叫做一个磁道\",{\"1\":{\"327\":1}}],[\"每个磁头同一时刻也必须是同轴的\",{\"1\":{\"327\":1}}],[\"每个磁头负责存取一个磁盘的内容\",{\"1\":{\"327\":1}}],[\"每个节点会生成一个唯一的id\",{\"1\":{\"1466\":1}}],[\"每个节点可以保存一个字节数组或者整数值\",{\"1\":{\"696\":1}}],[\"每个节点都有自己的角色\",{\"1\":{\"1462\":1}}],[\"每个节点都有一个指向前置节点和后置节点的指针\",{\"1\":{\"685\":1}}],[\"每个节点都存储了一定的范围区间\",{\"1\":{\"316\":1}}],[\"每个节点能索引的范围更大更精确\",{\"1\":{\"323\":1}}],[\"每个节点区确定的范围更精确\",{\"1\":{\"319\":1}}],[\"每个节点就较大了\",{\"1\":{\"319\":1}}],[\"每个版本仅支持约13个月\",{\"1\":{\"242\":1}}],[\"每个服务器上的zxid可能不同\",{\"1\":{\"183\":1}}],[\"每个服务器就会更新自己的状态\",{\"1\":{\"183\":1}}],[\"每个设备的状态设置为\",{\"1\":{\"123\":1}}],[\"每个请求按访问ip的hash结果分配\",{\"1\":{\"123\":1}}],[\"每个请求按时间顺序逐一分配到不同的后端服务器\",{\"1\":{\"123\":1}}],[\"每个进程允许的最多连接数\",{\"1\":{\"123\":1}}],[\"每个\",{\"1\":{\"44\":1,\"320\":1,\"684\":1,\"687\":1,\"721\":1,\"834\":1,\"1116\":1,\"1123\":3,\"1124\":1,\"1162\":1,\"1200\":1,\"1304\":1,\"1311\":3,\"1312\":1,\"1342\":1,\"1373\":1,\"1410\":2}}],[\"选主成功\",{\"1\":{\"1466\":1}}],[\"选主结果\",{\"1\":{\"1466\":1}}],[\"选主的过程可以分为以下几个关键步骤\",{\"1\":{\"1466\":1}}],[\"选主的稳定性和可靠性对于集群的正常运行至关重要\",{\"1\":{\"1466\":1}}],[\"选主是elasticsearch中至关重要的一个操作\",{\"1\":{\"1466\":1}}],[\"选几个下面的经典场景\",{\"1\":{\"1156\":1,\"1336\":1}}],[\"选项\",{\"1\":{\"976\":1}}],[\"选项卡\",{\"0\":{\"30\":1}}],[\"选举状态\",{\"1\":{\"1196\":1,\"1369\":1}}],[\"选举的\",{\"0\":{\"1027\":1,\"1231\":1}}],[\"选举过程如下\",{\"1\":{\"183\":2}}],[\"选举机制\",{\"0\":{\"183\":1},\"1\":{\"183\":1}}],[\"选举只有java版本\",{\"1\":{\"171\":1}}],[\"选举\",{\"1\":{\"171\":1,\"1121\":1,\"1194\":1,\"1201\":1,\"1309\":1,\"1367\":1,\"1374\":1}}],[\"选择器用于实现多路复用\",{\"1\":{\"1478\":1}}],[\"选择器\",{\"1\":{\"1478\":2}}],[\"选择不同作用域会对\",{\"1\":{\"1410\":1}}],[\"选择高性能存储\",{\"1\":{\"1408\":1}}],[\"选择高性能技术栈\",{\"1\":{\"1408\":1}}],[\"选择支持高并发的语言\",{\"1\":{\"1408\":1}}],[\"选择性回收新生代和老年代\",{\"1\":{\"1398\":1}}],[\"选择性是指不同值的数量与总行数的比率\",{\"1\":{\"565\":1}}],[\"选择满足需求的收集频率\",{\"1\":{\"1396\":1}}],[\"选择包\",{\"1\":{\"901\":1}}],[\"选择我们的项目\",{\"1\":{\"895\":1}}],[\"选择create\",{\"1\":{\"819\":1}}],[\"选择正确的索引类型\",{\"1\":{\"573\":1}}],[\"选择何种比较排序算法对于性能的影响至关重要\",{\"1\":{\"401\":1}}],[\"选择对应的安装包进行安装\",{\"1\":{\"291\":1}}],[\"选择时应根据个人或组织的具体需求和偏好来决定\",{\"1\":{\"244\":1}}],[\"选择合适的日志等级\",{\"0\":{\"219\":1}}],[\"选择\",{\"1\":{\"126\":2,\"874\":1,\"976\":1,\"1006\":1,\"1215\":1}}],[\"选择几本经典之作\",{\"1\":{\"56\":1}}],[\"承载着无价的智慧\",{\"1\":{\"56\":1}}],[\"一键创建的\",{\"1\":{\"1522\":1}}],[\"一键安装\",{\"1\":{\"292\":1,\"706\":1}}],[\"一起合作来处理海量数据\",{\"1\":{\"1462\":1}}],[\"一起感受下3a大作的视觉冲击\",{\"1\":{\"72\":1}}],[\"一名\",{\"1\":{\"1380\":1,\"1382\":1,\"1384\":1,\"1386\":1,\"1388\":1,\"1390\":1,\"1392\":1,\"1394\":1,\"1396\":1,\"1398\":1,\"1400\":1,\"1402\":1,\"1404\":1,\"1406\":1,\"1408\":1,\"1410\":1,\"1412\":1,\"1414\":1,\"1416\":1,\"1418\":1,\"1420\":1,\"1422\":1,\"1424\":1,\"1426\":1,\"1428\":1,\"1430\":1,\"1432\":1,\"1434\":1,\"1436\":1,\"1438\":1,\"1440\":1,\"1446\":1,\"1448\":1,\"1450\":1,\"1452\":1,\"1454\":1,\"1456\":1,\"1458\":1,\"1460\":1,\"1462\":1,\"1464\":1,\"1466\":1,\"1468\":1,\"1470\":1,\"1474\":1,\"1476\":1,\"1478\":1,\"1480\":1}}],[\"一项重要功能\",{\"1\":{\"1188\":1,\"1363\":1}}],[\"一项或多项\",{\"1\":{\"206\":1}}],[\"一种方法是使用\",{\"1\":{\"1480\":1}}],[\"一种可能的解决方案是编辑由setter而不是构造函数配置的某些类的源代码\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"一种是类名中含有wrapper\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"一种是学习\",{\"1\":{\"263\":1}}],[\"一锁二查三更新\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"一张经典的图\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"一方面是因为\",{\"1\":{\"1072\":1,\"1267\":1}}],[\"一是可见性\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"一是插入操作\",{\"1\":{\"335\":1}}],[\"一辆从\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"一直在循环注入过程中\",{\"1\":{\"1412\":1}}],[\"一直追加\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"一直下一步\",{\"1\":{\"962\":1}}],[\"一图胜千文\",{\"1\":{\"1028\":1,\"1099\":1,\"1136\":1,\"1232\":1,\"1290\":1,\"1321\":1}}],[\"一图顶千文\",{\"1\":{\"982\":1}}],[\"一通狂写git\",{\"1\":{\"980\":1}}],[\"一小时后上线\",{\"1\":{\"979\":1}}],[\"一大早领导甲某分配给p哥一个需求\",{\"1\":{\"979\":1}}],[\"一条条试\",{\"1\":{\"959\":1}}],[\"一条记录update一次\",{\"1\":{\"785\":1}}],[\"一对多查询\",{\"0\":{\"857\":1},\"1\":{\"857\":1}}],[\"一对多的关系\",{\"1\":{\"510\":1}}],[\"一对一查询\",{\"0\":{\"856\":1}}],[\"一级缓存是\",{\"1\":{\"1416\":2}}],[\"一级缓存也会被清空\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"一级缓存满足条件\",{\"1\":{\"852\":1}}],[\"一级缓存默认是开启的\",{\"1\":{\"852\":1}}],[\"一级缓存\",{\"0\":{\"852\":1},\"1\":{\"1135\":1,\"1320\":1}}],[\"一号图片\",{\"1\":{\"801\":1}}],[\"一一对应的情况\",{\"1\":{\"786\":1}}],[\"一家独有\",{\"1\":{\"722\":1}}],[\"一年的签到只需要\",{\"1\":{\"721\":1}}],[\"一致性级别支持\",{\"1\":{\"1035\":1,\"1239\":1}}],[\"一致性\",{\"1\":{\"616\":1,\"1044\":1,\"1144\":1,\"1197\":1,\"1245\":1,\"1327\":1,\"1370\":1}}],[\"一定有一种适合你的\",{\"1\":{\"958\":1}}],[\"一定想上手试试\",{\"1\":{\"870\":1}}],[\"一定不要以为它们不重要\",{\"1\":{\"665\":1}}],[\"一定耐心看完\",{\"1\":{\"663\":1}}],[\"一定会带来开销\",{\"1\":{\"563\":1}}],[\"一定用得上\",{\"1\":{\"556\":1,\"615\":1}}],[\"一定要有状态码\",{\"1\":{\"1494\":1}}],[\"一定要掌握\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"一定要了解为什么要用kafka\",{\"1\":{\"1112\":1,\"1300\":1}}],[\"一定要看\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"一定要加\",{\"1\":{\"889\":1}}],[\"一定要阅读这篇官方英文文档\",{\"1\":{\"472\":1}}],[\"一定要错误码\",{\"1\":{\"214\":1}}],[\"一定要写清楚\",{\"1\":{\"206\":1}}],[\"一些最常用的指令如下\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"一些高性能查询的场景\",{\"1\":{\"718\":1}}],[\"一些要点\",{\"1\":{\"489\":1}}],[\"一些信息\",{\"1\":{\"111\":1}}],[\"一旦zookeeper选出了主节点\",{\"1\":{\"1466\":1}}],[\"一旦强转错了类型\",{\"1\":{\"1424\":1}}],[\"一旦这些数据的状态发生变化\",{\"1\":{\"1194\":1,\"1367\":1}}],[\"一旦标记完成之后就会恢复之前被暂停的所有应用线程\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"一旦使用\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"一旦协调节点接收到所有的结果文档\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"一旦所有的文档都被取回了\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"一旦所有的副本分片都报告成功\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"一旦有条件成立的when\",{\"1\":{\"848\":1}}],[\"一旦指定就不能再修改了\",{\"1\":{\"474\":1}}],[\"一旦确定了leader\",{\"1\":{\"183\":1}}],[\"一篇新闻的文档数据\",{\"1\":{\"473\":1}}],[\"一篇简单的布隆过滤器\",{\"1\":{\"390\":1}}],[\"一\",{\"0\":{\"450\":1},\"1\":{\"464\":1}}],[\"一棵深度为k的有n个结点的二叉树\",{\"1\":{\"417\":1}}],[\"一书中展示了不同情况下的误判率\",{\"1\":{\"392\":1}}],[\"一端做push\",{\"1\":{\"341\":1}}],[\"一次性创建了所有的bean\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"一次性传输10mb的消息比传输1kb的消息10000万次显然要快得多\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"一次限定在64kb之内\",{\"1\":{\"1092\":1,\"1285\":1}}],[\"一次请求\",{\"1\":{\"1089\":1,\"1282\":1}}],[\"一次赋值\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"一次学会终身受益\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"一次只能被一个事务占用\",{\"1\":{\"625\":1}}],[\"一次磁盘\",{\"1\":{\"323\":1}}],[\"一次读取若干个\",{\"1\":{\"319\":1}}],[\"一台\",{\"1\":{\"238\":1}}],[\"一样也是\",{\"1\":{\"670\":1}}],[\"一样\",{\"1\":{\"162\":2,\"652\":1,\"719\":1,\"1057\":1,\"1201\":1,\"1255\":1,\"1374\":1,\"1446\":1}}],[\"一般很少用到\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"一般命名为\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"一般不会作为消费队列\",{\"1\":{\"1156\":1,\"1336\":1}}],[\"一般问这个问题你最少要答出以下几点\",{\"1\":{\"1155\":1,\"1335\":1}}],[\"一般的做法是在需要锁的数据上增加一个版本号\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"一般查询日志\",{\"1\":{\"1142\":1,\"1325\":1}}],[\"一般情况都是用中间件作为缓存层\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"一般情况下\",{\"1\":{\"687\":1}}],[\"一般堆大小远远大于栈\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"一般现在\",{\"1\":{\"1072\":1,\"1267\":1}}],[\"一般比较常用的有\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"一般都会把aio和nio\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"一般都会搭建以\",{\"1\":{\"657\":1}}],[\"一般建议不要超过\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"一般可以bitmap和hyperloglog配合使用\",{\"1\":{\"1034\":2,\"1238\":2}}],[\"一般可以存放在时序数据库中\",{\"1\":{\"946\":1}}],[\"一般可不指定\",{\"1\":{\"778\":1}}],[\"一般\",{\"1\":{\"907\":1}}],[\"一般第一段为域\",{\"1\":{\"901\":1,\"902\":1}}],[\"一般分为多个段\",{\"1\":{\"901\":1,\"902\":1}}],[\"一般和前端通过接口数据交互\",{\"1\":{\"894\":1}}],[\"一般保证命名空间唯一\",{\"1\":{\"807\":1,\"818\":1,\"826\":1}}],[\"一般eclipse找不到parent项目时可以先update\",{\"1\":{\"778\":1}}],[\"一般性能问题第一道就是数据库扛不住了\",{\"1\":{\"679\":1}}],[\"一般用xml绑定的比较多\",{\"1\":{\"1137\":1,\"1322\":1}}],[\"一般用于对返回值做些加工处理的场景\",{\"1\":{\"752\":1}}],[\"一般用\",{\"1\":{\"599\":1}}],[\"一般会将写请求转发到master\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"一般会有以下几种常见的情况\",{\"1\":{\"564\":1}}],[\"一般会对b+树做一些优化\",{\"1\":{\"322\":1}}],[\"一般存储合约的所有者地址\",{\"1\":{\"541\":1}}],[\"一般存放令牌信息\",{\"1\":{\"211\":1}}],[\"一般也不会超过\",{\"1\":{\"440\":1}}],[\"一般而言\",{\"1\":{\"320\":1}}],[\"一般而言内存访问的时间约为\",{\"1\":{\"319\":1}}],[\"一般为\",{\"1\":{\"319\":2}}],[\"一般一棵b\",{\"1\":{\"319\":1}}],[\"一般一棵\",{\"1\":{\"316\":1}}],[\"一般一个请求的头部大小不会超过1k\",{\"1\":{\"123\":1}}],[\"一般一个请求头的大小不会超过1k\",{\"1\":{\"123\":1}}],[\"一般由开发人员关注\",{\"1\":{\"219\":1}}],[\"一般是项目开发中的最后一步\",{\"1\":{\"1502\":1}}],[\"一般是项目名\",{\"1\":{\"901\":1,\"902\":1}}],[\"一般是通过为数据库表增加一个数字类型的\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"一般是新生代和老年代\",{\"1\":{\"1103\":1,\"1294\":1}}],[\"一般是我们的id生成器开始使用的时间\",{\"1\":{\"441\":1}}],[\"一般是\",{\"1\":{\"208\":1}}],[\"一般来说需求都是由业务人员收集业务痛点\",{\"1\":{\"1502\":1}}],[\"一般来说我们在\",{\"1\":{\"1183\":1,\"1358\":1}}],[\"一般来说\",{\"1\":{\"205\":1,\"324\":1,\"579\":1,\"583\":1,\"691\":1,\"1008\":1,\"1147\":1,\"1217\":1,\"1330\":1,\"1468\":1}}],[\"一般2是高质量\",{\"1\":{\"158\":1}}],[\"一般音频的码率只有固定几种\",{\"1\":{\"151\":1}}],[\"一般最新版本的\",{\"1\":{\"99\":1}}],[\"一切皆文件\",{\"1\":{\"107\":1}}],[\"一部分书籍目录\",{\"1\":{\"56\":1}}],[\"一个需求从产生到完成生命周期是什么样的\",{\"1\":{\"1502\":1}}],[\"一个简单的方法是通过调整\",{\"1\":{\"1440\":1}}],[\"一个常见的优化方式是使用lua脚本来减少网络开销\",{\"1\":{\"1428\":1}}],[\"一个子进程来进行持久化\",{\"1\":{\"1420\":1}}],[\"一个是保持独占\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"一个是数组与链表底层实现的不同\",{\"1\":{\"1074\":1,\"1269\":1}}],[\"一个完整的项目被拆分成多个不相同的独立的服务\",{\"1\":{\"1190\":1,\"1365\":1}}],[\"一个完整的docker由哪些部分组成\",{\"0\":{\"1018\":1,\"1224\":1}}],[\"一个切面可以由多个切点和通知组成\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"一个连接点总代表一个方法的执行\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"一个控制反转和面向切面的容器框架\",{\"1\":{\"1168\":1,\"1345\":1}}],[\"一个\",{\"0\":{\"1132\":1,\"1317\":1},\"1\":{\"1116\":3,\"1304\":3}}],[\"一个非常大的\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"一个逻辑上的概念\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"一个典型的\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"一个线程引用锁的时候\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"一个线程对象调用了sleep方法之后\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"一个使用docker容器的应用\",{\"1\":{\"1017\":1,\"1223\":1}}],[\"一个eventloop可以为多个channel服务\",{\"1\":{\"991\":1}}],[\"一个最基本的\",{\"1\":{\"990\":1}}],[\"一个参数的时候\",{\"1\":{\"826\":2}}],[\"一个月最多只有\",{\"1\":{\"721\":1}}],[\"一个群友给我发消息\",{\"1\":{\"715\":1}}],[\"一个用作值\",{\"1\":{\"698\":1}}],[\"一个用作键\",{\"1\":{\"698\":1}}],[\"一个用于平时使用\",{\"1\":{\"689\":1}}],[\"一个哈希表里面可以有多个哈希表节点\",{\"1\":{\"687\":1}}],[\"一个列表最多可以包含\",{\"1\":{\"667\":1}}],[\"一个有趣的操作\",{\"1\":{\"666\":1}}],[\"一个表的索引数最好不要超过6个\",{\"1\":{\"600\":1}}],[\"一个文档可以嵌套多个\",{\"1\":{\"503\":1}}],[\"一个不分词\",{\"1\":{\"493\":1}}],[\"一个分区只能由一个组内消费者消费\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"一个分词\",{\"1\":{\"493\":1}}],[\"一个分布式近实时分析搜索引擎\",{\"1\":{\"453\":1}}],[\"一个分布式的实时文档存储\",{\"1\":{\"453\":1}}],[\"一个索引文件和一个数据文件\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"一个索引只有一个\",{\"1\":{\"482\":1}}],[\"一个索引下是可以有多个\",{\"1\":{\"482\":1}}],[\"一个shard可以有一个或者多个replica\",{\"1\":{\"475\":1}}],[\"一个集群中可以有多个索引\",{\"1\":{\"471\":1}}],[\"一个磁盘由大小相同且同轴的圆形盘片组成\",{\"1\":{\"327\":1}}],[\"一个页的大小是16k\",{\"1\":{\"325\":1}}],[\"一个块的大小是4k\",{\"1\":{\"325\":1}}],[\"一个扇区的大小是512字节\",{\"1\":{\"325\":1}}],[\"一个节点就一个值\",{\"1\":{\"319\":1}}],[\"一个字典\",{\"1\":{\"306\":1}}],[\"一个视频做了个\",{\"1\":{\"264\":1}}],[\"一个程序员的2024\",{\"0\":{\"262\":1}}],[\"一个团队里面\",{\"1\":{\"170\":1}}],[\"一个对象是无法保证顺序性的\",{\"1\":{\"93\":1}}],[\"一个创业程序员的35岁人生人生总结\",{\"1\":{\"12\":1}}],[\"一个虚幻而真实的金融世界\",{\"1\":{\"12\":1}}],[\"以防止系统出现不可预期的数据结构和类型\",{\"1\":{\"1494\":1}}],[\"以防万一出现问题\",{\"1\":{\"574\":1}}],[\"以实现负载均衡和高可用性\",{\"1\":{\"1460\":1}}],[\"以实现数据的分布式存储和处理\",{\"1\":{\"1460\":1}}],[\"以实现数据的冗余和负载均衡\",{\"1\":{\"1458\":1}}],[\"以释放内存空间\",{\"1\":{\"1430\":2}}],[\"以释放空间\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"以方便通过反射来读取和使用注解信息\",{\"1\":{\"1402\":1}}],[\"以方便后续排序时进行分值计算\",{\"1\":{\"478\":1}}],[\"以保证可见性和有序性\",{\"1\":{\"1382\":1}}],[\"以保证指令不会被重排序\",{\"1\":{\"1382\":2}}],[\"以进一步加深理解\",{\"1\":{\"1380\":1}}],[\"以非事务方式执行\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"以非事务方式执行操作\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"以java为例\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"以标签的形式编写动态\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"以受害者名义伪造请求发送给受攻击站点\",{\"1\":{\"1094\":1,\"1287\":1}}],[\"以多线程的方式处理客户端请求的小程序\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"以此来完成动态\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"以此使程序运行效率不受影响\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"以此达到循环队列的效果\",{\"1\":{\"341\":1}}],[\"以达到在保证查询效率的同时\",{\"1\":{\"1404\":1}}],[\"以达到切换数据源的目的\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"以达到找到目的地的结果\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"以达到最佳性能和最小化系统资源消耗\",{\"1\":{\"243\":1}}],[\"以缩减存储\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"以让其它开发人员与项目共享\",{\"1\":{\"776\":1}}],[\"以让其它项目依赖\",{\"1\":{\"776\":1}}],[\"以struts2\",{\"1\":{\"772\":1}}],[\"以配置顺序上方的版本为准\",{\"1\":{\"772\":1}}],[\"以配置顺序下方的版本为准\",{\"1\":{\"772\":1}}],[\"以直接依赖的版本为准\",{\"1\":{\"772\":1}}],[\"以为使用这个关键字\",{\"1\":{\"755\":1}}],[\"以最大长度为标准\",{\"1\":{\"695\":1}}],[\"以二进制的方式来处理sds存放在buf数组里的数据\",{\"1\":{\"683\":1}}],[\"以空字符结尾\",{\"1\":{\"682\":1}}],[\"以空字符结尾的字符数组\",{\"1\":{\"682\":1}}],[\"以减少过期键值对的清理频率\",{\"1\":{\"1430\":1}}],[\"以减少死锁的可能性\",{\"1\":{\"644\":1}}],[\"以减少系统开销和提高性能\",{\"1\":{\"637\":1}}],[\"以减少系统表资源的消耗\",{\"0\":{\"604\":1}}],[\"以识别是否存在死锁\",{\"1\":{\"644\":1}}],[\"以表明事务将在更细粒度上请求锁\",{\"1\":{\"638\":1}}],[\"以确保在同一时间只有一个线程可以访问被修饰的代码\",{\"1\":{\"1480\":1}}],[\"以确保在rr隔离级别下\",{\"1\":{\"638\":1}}],[\"以确保数据的实时性\",{\"1\":{\"1430\":1}}],[\"以确保数据的完整性和一致性\",{\"1\":{\"623\":1}}],[\"以确保新版本不会被旧版本覆盖\",{\"1\":{\"1035\":1,\"1239\":1}}],[\"以确保查询性能\",{\"0\":{\"571\":1}}],[\"以提高分布式锁的可用性和容错性\",{\"1\":{\"1428\":1}}],[\"以提高性能和可扩展性\",{\"1\":{\"1426\":1}}],[\"以提高程序的性能\",{\"1\":{\"1382\":1}}],[\"以提高速度\",{\"0\":{\"605\":1}}],[\"以提高冗余\",{\"1\":{\"475\":1}}],[\"以至于优化器选择全表扫描\",{\"1\":{\"590\":1}}],[\"以目录为结论\",{\"1\":{\"588\":1}}],[\"以后便不再执行\",{\"1\":{\"711\":1}}],[\"以后\",{\"1\":{\"578\":1}}],[\"以后每新出一个项目加一次价格\",{\"1\":{\"250\":1}}],[\"以加快连接操作的速度\",{\"1\":{\"565\":1}}],[\"以太坊为例\",{\"1\":{\"537\":1}}],[\"以取代淘汰的\",{\"1\":{\"510\":1}}],[\"以及对代理方法的调用逻辑\",{\"1\":{\"1474\":1}}],[\"以及对应的实现\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"以及它们与\",{\"1\":{\"1446\":1}}],[\"以及它在mysql中的使用场景\",{\"0\":{\"568\":1}}],[\"以及如何处理死锁和锁竞争的情况\",{\"1\":{\"1428\":1}}],[\"以及如何保证可见性和有序性\",{\"1\":{\"1382\":1}}],[\"以及各自的优劣\",{\"1\":{\"1404\":1}}],[\"以及子列表的修改如何影响原列表\",{\"1\":{\"1404\":1}}],[\"以及两者对调优的影响\",{\"1\":{\"1400\":1}}],[\"以及stw与并发相结合\",{\"1\":{\"1398\":1}}],[\"以及vm指定的其他jar包\",{\"1\":{\"1392\":1}}],[\"以及和投票相关的能力\",{\"1\":{\"1196\":1,\"1369\":1}}],[\"以及软件系统和硬件系统之间\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"以及一个存储文档的列表\",{\"1\":{\"1462\":1}}],[\"以及一个\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"以及一些调优手段\",{\"0\":{\"1025\":1,\"1229\":1}}],[\"以及源码\",{\"1\":{\"768\":1}}],[\"以及指向\",{\"1\":{\"691\":1}}],[\"以及链表长度等信息\",{\"1\":{\"685\":1}}],[\"以及哪些事务持有其他事务正在等待的锁\",{\"1\":{\"643\":1}}],[\"以及在不需要频繁锁定和解锁单个行的场景中\",{\"1\":{\"624\":1}}],[\"以及在倒排列表中记录单词在某个文档出现的位置信息\",{\"1\":{\"478\":1}}],[\"以及可能的下一个键值\",{\"1\":{\"619\":1}}],[\"以及较低的维护成本\",{\"1\":{\"566\":1}}],[\"以及\",{\"1\":{\"501\":1,\"989\":1,\"1408\":1}}],[\"以及linux界中最大和最活跃的社区之一\",{\"1\":{\"239\":1}}],[\"以存储更多的数据\",{\"1\":{\"474\":1}}],[\"以前只是看过介绍\",{\"1\":{\"755\":1}}],[\"以前的用法是\",{\"1\":{\"489\":1}}],[\"以前称为\",{\"1\":{\"453\":1}}],[\"以前\",{\"1\":{\"417\":1}}],[\"以我的经验\",{\"1\":{\"263\":1}}],[\"以其小巧的体积和低资源消耗而闻名\",{\"1\":{\"244\":1}}],[\"以其强大的硬件支持而闻名\",{\"1\":{\"239\":1}}],[\"以整合开源软件的最新进展而闻名\",{\"1\":{\"242\":1}}],[\"以上就是\",{\"1\":{\"1394\":1}}],[\"以上就是g1收集器的整个工作流程\",{\"1\":{\"1394\":1}}],[\"以上代码定义了一个\",{\"1\":{\"1390\":1}}],[\"以上代码创建了一个\",{\"1\":{\"1390\":2}}],[\"以上是数组和链表的通俗对比\",{\"1\":{\"1074\":1,\"1269\":1}}],[\"以上是我们最最常使用的git命令\",{\"1\":{\"978\":1}}],[\"以上是对几种常见linux发行版的优缺点分析\",{\"1\":{\"244\":1}}],[\"以上部分整个\",{\"1\":{\"887\":1}}],[\"以上配置是整合\",{\"1\":{\"885\":1}}],[\"以上几点是环境搭建的基础\",{\"1\":{\"456\":1}}],[\"以上都是国内知名的云服务商\",{\"1\":{\"238\":1}}],[\"以上日志不会打印\",{\"1\":{\"223\":1}}],[\"以毫秒为单位\",{\"1\":{\"174\":1}}],[\"以下都是\",{\"1\":{\"1068\":1,\"1141\":1}}],[\"以下都是java的并发基础面试题\",{\"1\":{\"1054\":1}}],[\"以下都是java的基础面试题\",{\"1\":{\"1040\":1}}],[\"以下案例是在生产环境中最常使用的git组合命令集\",{\"1\":{\"977\":1}}],[\"以下简称\",{\"1\":{\"682\":1}}],[\"以下是这几个组件的详细说明\",{\"1\":{\"1414\":1}}],[\"以下是我为您继续写的文章\",{\"1\":{\"1390\":1}}],[\"以下是一个典型的dockerfile示例\",{\"1\":{\"1514\":1}}],[\"以下是一个简单的示例代码\",{\"1\":{\"1478\":1}}],[\"以下是一个简单的自定义锁的示例代码\",{\"1\":{\"1390\":1}}],[\"以下是一个简化的选主源码示例\",{\"1\":{\"1466\":1}}],[\"以下是一个使用\",{\"1\":{\"1390\":2}}],[\"以下是一些性能优化的技巧\",{\"1\":{\"1460\":1}}],[\"以下是一些docker的基础面试题\",{\"1\":{\"1013\":1}}],[\"以下是一些反向代理的配置\",{\"1\":{\"123\":1}}],[\"以下是\",{\"1\":{\"983\":1,\"987\":1,\"998\":1,\"1013\":1,\"1024\":1,\"1083\":1,\"1098\":1,\"1112\":1,\"1128\":1,\"1154\":1,\"1167\":1,\"1180\":1,\"1193\":1,\"1481\":1}}],[\"以下是哈希表渐进式\",{\"1\":{\"688\":1}}],[\"以下是面试场景\",{\"1\":{\"315\":1}}],[\"以下这份包含100本经典书籍的书单\",{\"1\":{\"56\":1}}],[\"以平衡磁盘与网络io处理速度\",{\"1\":{\"123\":1}}],[\"以平衡磁盘与网络i\",{\"1\":{\"123\":1}}],[\"以\",{\"1\":{\"98\":1,\"205\":1,\"296\":1,\"428\":1,\"588\":1}}],[\"以便在后续的操作中与主节点进行通信\",{\"1\":{\"1466\":1}}],[\"以便在发生线程切换时恢复执行位置\",{\"1\":{\"1388\":1}}],[\"以便全面掌握map及各实现类\",{\"1\":{\"1406\":1}}],[\"以便全面掌握list及其相关接口与实现类\",{\"1\":{\"1404\":1}}],[\"以便进一步熟练掌握类加载机制的相关原理\",{\"1\":{\"1392\":1}}],[\"以便简化缓存机制\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"以便为路由提供合适的分片\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"以便于以后的查询能够获取更好的性能\",{\"1\":{\"493\":1}}],[\"以便\",{\"1\":{\"24\":1}}],[\"它已经帮我们把大多数的常用工具都做好了\",{\"1\":{\"1507\":1}}],[\"它实现了\",{\"1\":{\"1474\":2}}],[\"它实际上是一个很长的二进制向量和一系列随机映射函数\",{\"1\":{\"385\":1}}],[\"它使得elasticsearch能够在分布式环境中处理大规模的数据\",{\"1\":{\"1470\":1}}],[\"它使用\",{\"1\":{\"1476\":1}}],[\"它使用了\",{\"1\":{\"1390\":2}}],[\"它使用容器来打包应用程序及其依赖项\",{\"1\":{\"1014\":1,\"1220\":1}}],[\"它决定了集群中哪个节点将成为主节点\",{\"1\":{\"1466\":1}}],[\"它还可以用于日志分析\",{\"1\":{\"1460\":1}}],[\"它还具有持久性存储和消息回溯的能力\",{\"1\":{\"1436\":1}}],[\"它被广泛应用于各种应用程序中\",{\"1\":{\"1458\":1}}],[\"它被广泛地实现在各种并发容器集合中\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"它采用了push和pull的结合方式来实现消息传递\",{\"1\":{\"1448\":1}}],[\"它能够自动处理故障\",{\"1\":{\"1444\":1}}],[\"它需要大量的磁盘空间来存储消息\",{\"1\":{\"1436\":1}}],[\"它需要为类中的静态变量分配内存并设置默认初始值\",{\"1\":{\"1392\":1}}],[\"它就像是一个日志的快递小哥\",{\"1\":{\"1434\":1}}],[\"它就像是一个强壮的邮递员\",{\"1\":{\"1432\":1}}],[\"它就组装这些结果为单个响应返回给客户端\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"它没有任何限制\",{\"1\":{\"1424\":1}}],[\"它代表的上界类型可能是t\",{\"1\":{\"1424\":1}}],[\"它给t一个明确的类型\",{\"1\":{\"1424\":1}}],[\"它把类型检查的工作从运行时提前到了编译时\",{\"1\":{\"1424\":1}}],[\"它允许开发人员在\",{\"1\":{\"1416\":1}}],[\"它允许存储的数据大小不同\",{\"1\":{\"695\":1}}],[\"它内部封装了\",{\"1\":{\"1416\":1}}],[\"它内部封装了jdbc\",{\"1\":{\"1129\":1,\"1314\":1}}],[\"它如何用于构建\",{\"1\":{\"1408\":1}}],[\"它通过拉链法处理碰撞\",{\"1\":{\"1406\":1}}],[\"它通过stw去修正并发阶段的错误\",{\"1\":{\"1396\":1}}],[\"它并发执行与用户程序\",{\"1\":{\"1396\":1}}],[\"它并不是一个原子操作\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"它并不加入到集群中\",{\"1\":{\"1032\":1,\"1236\":1}}],[\"它和构造方法的不同之处在于\",{\"1\":{\"1392\":1}}],[\"它优先于构造方法执行\",{\"1\":{\"1392\":1}}],[\"它主要包括\",{\"1\":{\"1392\":1}}],[\"它主要用于存放新创建的对象\",{\"1\":{\"1388\":1}}],[\"它包括哪几个阶段\",{\"1\":{\"1392\":1}}],[\"它包含了一系列的指令和参数\",{\"1\":{\"1512\":1}}],[\"它包含了对象的监视器锁的状态信息\",{\"1\":{\"1481\":1}}],[\"它包含了非常先进的音频\",{\"1\":{\"139\":1}}],[\"它包含很多portlet\",{\"1\":{\"1172\":1,\"1349\":1}}],[\"它得解析类文件里的符号引用\",{\"1\":{\"1392\":1}}],[\"它得确定这个类里写的是否都是正确的java语法\",{\"1\":{\"1392\":1}}],[\"它继承了\",{\"1\":{\"1390\":1}}],[\"它定义了java程序中各种变量\",{\"1\":{\"1388\":1}}],[\"它存储的内容是键值对\",{\"1\":{\"1380\":1}}],[\"它负责存储和管理大家都关心的数据\",{\"1\":{\"1194\":1,\"1367\":1}}],[\"它不是一种技术\",{\"1\":{\"1170\":1,\"1347\":1}}],[\"它不仅能够提升你的技术能力\",{\"1\":{\"1436\":1}}],[\"它不仅需要解决跨库带来的所有复杂问题\",{\"1\":{\"583\":1}}],[\"它不仅仅是关于数字和公式\",{\"1\":{\"308\":1}}],[\"它不仅传递知识\",{\"1\":{\"56\":1}}],[\"它起到了一种类似\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"它拥有多个独立的齿轮\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"它以高吞吐量和低延迟而闻名\",{\"1\":{\"1450\":1}}],[\"它以高吞吐\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"它以银行借贷系统的分配策略为基础\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"它更像是一个线程内部的通信\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"它提供一个字段的基数\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"它提供了一种基于缓冲区和通道的\",{\"1\":{\"1478\":1}}],[\"它提供了一个分布式的\",{\"1\":{\"1458\":1}}],[\"它提供了一系列用于索引和搜索文档的api\",{\"1\":{\"1458\":1}}],[\"它提供了强大的全文搜索功能和实时数据分析能力\",{\"1\":{\"1458\":1}}],[\"它提供了对集合对象进行基本操作的通用接口方法\",{\"1\":{\"1070\":1,\"1265\":1}}],[\"它提供了java\",{\"1\":{\"652\":1}}],[\"它提供了录制\",{\"1\":{\"139\":1}}],[\"它合并这些值到自己的优先队列中来产生一个全局排序后的结果列表\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"它将每个词与包含该词的文档建立关联\",{\"1\":{\"1460\":1}}],[\"它将索引划分为多个分片\",{\"1\":{\"1458\":1}}],[\"它将消息以topic的形式进行组织和存储\",{\"1\":{\"1442\":1}}],[\"它将根据\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"它将请求并行转发到\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"它将会完整加载这个字段所有\",{\"1\":{\"493\":1}}],[\"它在大数据领域中得到了广泛的应用\",{\"1\":{\"1450\":1}}],[\"它在大数据处理和实时流处理方面有着广泛的应用\",{\"1\":{\"1444\":1}}],[\"它在开发中有何作用\",{\"1\":{\"1406\":1}}],[\"它在所有broker中选出一个controller\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"它在\",{\"1\":{\"883\":1}}],[\"它在当下最广泛的应用场景就是金融\",{\"1\":{\"263\":1}}],[\"它只和\",{\"1\":{\"831\":1}}],[\"它只允许在表的前端进行删除操作\",{\"1\":{\"335\":1}}],[\"它前面的所有阶段都会被运行\",{\"1\":{\"776\":1}}],[\"它之前的所有阶段都会被运行\",{\"1\":{\"775\":1}}],[\"它跟数组不同的一点是\",{\"1\":{\"695\":1}}],[\"它跟普通的平衡二叉树的不同是\",{\"1\":{\"316\":1}}],[\"它有什么用\",{\"1\":{\"1422\":1}}],[\"它有许多实现类\",{\"1\":{\"1406\":1}}],[\"它有哪些线程安全的替代方案呢\",{\"1\":{\"1380\":1}}],[\"它有以下优点\",{\"1\":{\"1036\":1,\"1240\":1}}],[\"它有以下几个作用\",{\"1\":{\"482\":1}}],[\"它有点儿类似数组\",{\"1\":{\"695\":1}}],[\"它支持多种类型的数据结构\",{\"1\":{\"664\":1}}],[\"它支持存储的\",{\"1\":{\"652\":1}}],[\"它用的不正是你刚才提到的那套铁子数据结构吗\",{\"1\":{\"1398\":1}}],[\"它用于存储已被虚拟机加载的类信息\",{\"1\":{\"1099\":1,\"1290\":1,\"1388\":1}}],[\"它用于等待其他线程的终止\",{\"1\":{\"1064\":1,\"1262\":1}}],[\"它用于维护两个表之间的链接\",{\"1\":{\"623\":1}}],[\"它用起来像单机一样\",{\"1\":{\"170\":1}}],[\"它表示\",{\"1\":{\"1424\":1}}],[\"它表示表中未使用的空间百分比\",{\"1\":{\"574\":1}}],[\"它表明一个事务有意向在某个间隙中插入新行\",{\"1\":{\"621\":1}}],[\"它锁定一个范围内的间隙\",{\"1\":{\"621\":1}}],[\"它会释放该对象的监视器锁\",{\"1\":{\"1480\":1}}],[\"它会尝试获取该对象的重量级锁\",{\"1\":{\"1480\":1}}],[\"它会尝试获取该对象的轻量级锁\",{\"1\":{\"1480\":1}}],[\"它会尝试获取该对象的偏向锁\",{\"1\":{\"1480\":1}}],[\"它会尝试获取该对象的监视器锁\",{\"1\":{\"1480\":3}}],[\"它会将主节点的信息广播给所有的节点\",{\"1\":{\"1466\":1}}],[\"它会维护一个有序的节点列表\",{\"1\":{\"1466\":1}}],[\"它会根据倒排索引快速找到相关的网页\",{\"1\":{\"1464\":1}}],[\"它会根据新的节点数量重新计算哈希槽的分布\",{\"1\":{\"1426\":1}}],[\"它会遍历分片中的文档\",{\"1\":{\"1462\":1}}],[\"它会被存储在对应的分片中\",{\"1\":{\"1462\":1}}],[\"它会产生大量空间碎片\",{\"1\":{\"1396\":1}}],[\"它会把这个请求委派给它的父类加载器去完成\",{\"1\":{\"1392\":1}}],[\"它会进行类文件的验证\",{\"1\":{\"1392\":1}}],[\"它会去找\",{\"1\":{\"1392\":1}}],[\"它会直接抛出\",{\"1\":{\"1384\":1}}],[\"它会认为当前集群中没有leader\",{\"1\":{\"1196\":1,\"1369\":1}}],[\"它会等待直到count值为0才继续执行\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"它会首先在该范围内设置一个插入意向锁\",{\"1\":{\"621\":1}}],[\"它会首先在更粗力度上设置意向锁\",{\"1\":{\"620\":1}}],[\"它会先在表级别加上意向排他锁\",{\"1\":{\"620\":1}}],[\"它会使用large\",{\"1\":{\"123\":1}}],[\"它仅仅作为水平分库的一个补充优化\",{\"1\":{\"583\":1}}],[\"它带来的提升是\",{\"1\":{\"579\":1,\"580\":1,\"582\":1}}],[\"它要执行类构造器\",{\"1\":{\"1392\":1}}],[\"它要占用物理空间\",{\"1\":{\"557\":1}}],[\"它要求我们找到两个特殊的整数\",{\"1\":{\"304\":1}}],[\"它默认配置了很多框架的使用方式\",{\"1\":{\"454\":1}}],[\"它可以帮我快速的生成\",{\"1\":{\"1507\":1}}],[\"它可以帮助我们快速地存储\",{\"1\":{\"1456\":1}}],[\"它可以帮助我们解决各种有趣的问题\",{\"1\":{\"1434\":1}}],[\"它可以分为这样的步骤\",{\"1\":{\"1502\":1}}],[\"它可以实现更细粒度的锁控制\",{\"1\":{\"1480\":1}}],[\"它可以根据指定的接口或类\",{\"1\":{\"1474\":1}}],[\"它可以选择等待消息被确认\",{\"1\":{\"1452\":1}}],[\"它可以选择将消息标记为已处理或者进行重试\",{\"1\":{\"1438\":1}}],[\"它可以轻松地扩展到成百上千台服务器\",{\"1\":{\"1436\":1}}],[\"它可以用来修饰方法或代码块\",{\"1\":{\"1480\":2}}],[\"它可以用于日志收集\",{\"1\":{\"1432\":1}}],[\"它可以用作数据库\",{\"1\":{\"664\":1}}],[\"它可以让多个线程在某个点上等待\",{\"1\":{\"1390\":1}}],[\"它可以让一个或多个线程等待其他线程完成某些操作后再执行\",{\"1\":{\"1390\":1}}],[\"它可以让每个线程都拥有自己的变量副本\",{\"1\":{\"1386\":1}}],[\"它可以看作是当前线程所执行的字节码的行号指示器\",{\"1\":{\"1388\":1}}],[\"它可以在不修改原有代码的情况下\",{\"1\":{\"1474\":2}}],[\"它可以在运行时动态地创建一个实现了指定接口的代理类\",{\"1\":{\"1474\":1}}],[\"它可以在运行时动态地获取类的信息\",{\"1\":{\"1468\":1,\"1474\":1}}],[\"它可以在需要时创建线程\",{\"1\":{\"1384\":1}}],[\"它可以在集群扩容\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"它可以在指定的时间后自行返回\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"它可以\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"它可以保存类型为\",{\"1\":{\"693\":1}}],[\"它可以支持a\",{\"1\":{\"561\":1}}],[\"它可以被下面这样准确地形容\",{\"1\":{\"453\":1}}],[\"它可能是全局使用\",{\"1\":{\"86\":1}}],[\"它也是\",{\"1\":{\"417\":1}}],[\"它适用于一定范围的整数排序\",{\"1\":{\"412\":1}}],[\"它利用了函数的映射关系\",{\"1\":{\"401\":1}}],[\"它的标记字会被设置为锁定状态\",{\"1\":{\"1480\":1}}],[\"它的原理其实很简单\",{\"1\":{\"1464\":1}}],[\"它的原理是\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"它的设计目标是简单\",{\"1\":{\"1460\":1}}],[\"它的设计之巧妙令人颇感佩服与惊叹\",{\"1\":{\"1398\":1}}],[\"它的架构设计非常有趣\",{\"1\":{\"1444\":1}}],[\"它的活跃社区和丰富的生态系统也为开发者提供了很多便利\",{\"1\":{\"1436\":1}}],[\"它的部署和配置可能会有一些复杂性\",{\"1\":{\"1436\":1}}],[\"它的高吞吐量\",{\"1\":{\"1434\":1}}],[\"它的核心特性有\",{\"1\":{\"1408\":1}}],[\"它的核心特性是什么\",{\"1\":{\"1408\":1}}],[\"它的核心理念是专库专用\",{\"1\":{\"580\":1}}],[\"它的主要用途有\",{\"1\":{\"1422\":1}}],[\"它的主要作用是根据键快速获取值\",{\"1\":{\"1406\":1}}],[\"它的主要实现类有\",{\"1\":{\"1404\":1}}],[\"它的源码如下\",{\"1\":{\"1404\":1}}],[\"它的源码能不能讲解一下\",{\"1\":{\"1404\":1}}],[\"它的目标是达到更高的吞吐量和更短的gc停顿时间\",{\"1\":{\"1398\":1}}],[\"它的目的是使全文检索变得简单\",{\"1\":{\"453\":1}}],[\"它的关键思想值得我们学习\",{\"1\":{\"1396\":1}}],[\"它的工作原理是\",{\"1\":{\"1420\":1}}],[\"它的工作原理是什么\",{\"1\":{\"1420\":1}}],[\"它的工作流程如下\",{\"1\":{\"1396\":1}}],[\"它的工作方式是被监控的服务需要公开一个prometheus端点\",{\"1\":{\"946\":1}}],[\"它的\",{\"1\":{\"1390\":1}}],[\"它的实现机制相当精巧\",{\"1\":{\"1406\":1}}],[\"它的实现原理与代理模式\",{\"1\":{\"1406\":1}}],[\"它的实现原理与线程安全机制\",{\"1\":{\"1404\":1}}],[\"它的实现原理就是基于\",{\"1\":{\"1390\":1}}],[\"它的实现远不止这些\",{\"1\":{\"1404\":1}}],[\"它的实现方式是通过一个计数器和一个屏障点来实现的\",{\"1\":{\"1390\":1}}],[\"它的实现方式是通过一个计数器来实现的\",{\"1\":{\"1390\":1}}],[\"它的大小不再受限于jvm内存大小\",{\"1\":{\"1388\":1}}],[\"它的底层实现都是由n个对象组成的\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"它的值同\",{\"1\":{\"1114\":1,\"1302\":1}}],[\"它的生命周期与线程相同\",{\"1\":{\"1099\":1,\"1290\":1,\"1388\":1}}],[\"它的作用是记录当前线程执行的位置\",{\"1\":{\"1388\":1}}],[\"它的作用是测试它左边的对象是否是它右边的类的实例\",{\"1\":{\"1041\":1,\"1242\":1}}],[\"它的作用可以看做是当前线程所执行的字节码的行号指示器\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"它的不可变性\",{\"1\":{\"1046\":1,\"1247\":1}}],[\"它的size等于from+size的和\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"它的内部使用的是\",{\"1\":{\"453\":1}}],[\"它的结构如下图\",{\"1\":{\"440\":1}}],[\"它的最坏\",{\"1\":{\"417\":1}}],[\"它的父节点\",{\"1\":{\"417\":1}}],[\"它的性能在某些情况甚至快过那些o\",{\"1\":{\"412\":1}}],[\"它的复杂度为\",{\"1\":{\"410\":1}}],[\"它的优点还是非常突出的\",{\"1\":{\"1436\":1}}],[\"它的优点是空间效率和查询时间都比一般的算法要好的多\",{\"1\":{\"385\":1}}],[\"它的优势在于在对一定范围内的整数排序时\",{\"1\":{\"410\":1}}],[\"它的投票是\",{\"1\":{\"183\":1}}],[\"它对于读取和写入大块数据有良好的性能\",{\"1\":{\"319\":1}}],[\"它对于像我这样非常普通家庭的孩子来说\",{\"1\":{\"263\":1}}],[\"它类似普通的平衡二叉树\",{\"1\":{\"319\":1}}],[\"它与自增字段\",{\"1\":{\"622\":1}}],[\"它与\",{\"1\":{\"317\":1,\"322\":1}}],[\"它是给状态做一个文字说明\",{\"1\":{\"1494\":1}}],[\"它是接口的核心数据\",{\"1\":{\"1494\":1}}],[\"它是如何处理大规模数据流的呢\",{\"1\":{\"1444\":1}}],[\"它是被所有线程共享的一块内存区域\",{\"1\":{\"1388\":1}}],[\"它是通过一个\",{\"1\":{\"1386\":1}}],[\"它是在容器启动时\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"它是在第一次执行maven命令的时候才被创建\",{\"1\":{\"768\":1}}],[\"它是针对resultset结果集执行的内存分页\",{\"1\":{\"1138\":1,\"1323\":1}}],[\"它是\",{\"1\":{\"1034\":1,\"1238\":1,\"1414\":1}}],[\"它是基于hll算法的\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"它是架设在局域网内的仓库\",{\"1\":{\"768\":1}}],[\"它是行锁和间隙锁的组合\",{\"1\":{\"638\":1}}],[\"它是这样实现的\",{\"1\":{\"427\":1}}],[\"它是透过键值的部份资讯\",{\"1\":{\"424\":1}}],[\"它是一条\",{\"1\":{\"1476\":1}}],[\"它是一种将数据分布在多个redis节点上的方式\",{\"1\":{\"1426\":1}}],[\"它是一种多路的平衡搜索树\",{\"1\":{\"316\":1}}],[\"它是一个高吞吐量的分布式消息系统\",{\"1\":{\"1436\":1}}],[\"它是一个为分布式应用提供一致性服务的软件\",{\"1\":{\"171\":1,\"1194\":1,\"1367\":1}}],[\"它是一个文件索引号\",{\"1\":{\"162\":1}}],[\"它是作用使用\",{\"1\":{\"205\":1}}],[\"它是由开发人员创建的接口\",{\"1\":{\"1416\":1}}],[\"它是由浏览器的同源策略造成的\",{\"1\":{\"1093\":1,\"1286\":1}}],[\"它是由\",{\"1\":{\"98\":1}}],[\"它让我们与历史上的智者对话\",{\"1\":{\"56\":1}}],[\"它们主要用于java项目\",{\"1\":{\"1520\":1}}],[\"它们会竞选成为主节点\",{\"1\":{\"1466\":1}}],[\"它们到底有什么用\",{\"1\":{\"1402\":1}}],[\"它们让g1不需要像cms那样全堆回收\",{\"1\":{\"1398\":1}}],[\"它们的主要作用是自动化项目的构建过程\",{\"1\":{\"1520\":1}}],[\"它们的工作可以简述为\",{\"1\":{\"1398\":1}}],[\"它们的乘积是\",{\"1\":{\"306\":2}}],[\"它们的乘积等于目标乘积\",{\"1\":{\"306\":1}}],[\"它们的乘积竟然等于\",{\"1\":{\"303\":1}}],[\"它们都实现了list接口\",{\"1\":{\"1404\":1}}],[\"它们都可以用于协调多个线程的执行顺序\",{\"1\":{\"1390\":1}}],[\"它们都是大小写不敏感的\",{\"1\":{\"831\":1}}],[\"它们不会像java方法那样被编译成字节码\",{\"1\":{\"1388\":1}}],[\"它们代表什么含义\",{\"1\":{\"984\":1}}],[\"它们必须按照正确的顺序放置\",{\"1\":{\"980\":1}}],[\"它们什么场景会用\",{\"0\":{\"631\":1}}],[\"它们在innodb存储引擎中是如何工作的\",{\"0\":{\"560\":1}}],[\"它们以低廉的价格\",{\"1\":{\"56\":1}}],[\"它们能够跨越时间和空间\",{\"1\":{\"56\":1}}],[\"最容易搞混的两个概念\",{\"1\":{\"1424\":1}}],[\"最基本的收集器\",{\"1\":{\"1394\":1}}],[\"最细粒度只能作用到方法级别\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"最开始读到的数据和事务结束前的任意时刻读到的同一批数据都是一致的\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"最直观的一定是\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"最多只能同时满足其中两项\",{\"1\":{\"1035\":2,\"1239\":1}}],[\"最多可以有上千个子节点\",{\"1\":{\"316\":1}}],[\"最初的90个结果会被丢弃\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"最为主流和常用\",{\"1\":{\"1002\":1,\"1211\":1}}],[\"最不经常使用\",{\"1\":{\"1001\":1,\"1210\":1}}],[\"最常使用命令集\",{\"1\":{\"978\":1}}],[\"最低优先级的是\",{\"1\":{\"829\":1}}],[\"最简单的maven项目模板\",{\"1\":{\"766\":1}}],[\"最大容量\",{\"1\":{\"1406\":1}}],[\"最大线程数是线程池中最多的线程数\",{\"1\":{\"1384\":1}}],[\"最大线程数\",{\"1\":{\"1384\":1}}],[\"最大缓存大小\",{\"1\":{\"1001\":1,\"1210\":1}}],[\"最大的特点是有个分数可以自定义排序规则\",{\"1\":{\"720\":1}}],[\"最大长度\",{\"1\":{\"695\":1}}],[\"最大连接数=连接数\",{\"1\":{\"123\":1}}],[\"最主要的特点是轻量以及快速\",{\"1\":{\"678\":1}}],[\"最新列表\",{\"1\":{\"657\":1}}],[\"最小的\",{\"1\":{\"1118\":1,\"1306\":1}}],[\"最小的高可用配置是2台服务器\",{\"1\":{\"475\":1}}],[\"最小值设定为超过能成为master节点的n\",{\"1\":{\"1027\":1,\"1231\":1}}],[\"最小支持\",{\"1\":{\"457\":1}}],[\"最小生成树\",{\"0\":{\"375\":1}}],[\"最快的掌握方式就是先学会使用\",{\"1\":{\"450\":1}}],[\"最高位是0<br>\",{\"1\":{\"441\":1}}],[\"最高位是符号位\",{\"1\":{\"441\":1}}],[\"最终生成一个完整的\",{\"1\":{\"1512\":1}}],[\"最终通知\",{\"1\":{\"1402\":1}}],[\"最终标记阶段是cms算法关键\",{\"1\":{\"1396\":1}}],[\"最终标记阶段需要stop\",{\"1\":{\"1396\":1}}],[\"最终标记\",{\"1\":{\"1394\":1,\"1396\":1,\"1398\":1}}],[\"最终的目标是帮助大家更好的掌控面试\",{\"1\":{\"1378\":1}}],[\"最终成功创建的那个客户端也即拥有了这把锁\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"最终调用getcandidateconfigurations\",{\"1\":{\"1185\":1,\"1360\":1}}],[\"最终就会导致oom问题的出现\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"最终实现系统的业务逻辑\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"最终可能超过底层操作系统配置的文件句柄数量限制\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"最终挂掉的情况\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"最终解决方案\",{\"1\":{\"842\":1}}],[\"最终a依赖的x的版本为2\",{\"1\":{\"772\":1}}],[\"最终在某个时间点上\",{\"1\":{\"688\":1}}],[\"最终使得整个序列有序\",{\"1\":{\"417\":1}}],[\"最终\",{\"1\":{\"412\":1}}],[\"最终完成排序\",{\"1\":{\"401\":1}}],[\"最短路径\",{\"0\":{\"376\":1}}],[\"最好的一种方法\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"最好的策略是启动时就把热点数据加载好\",{\"1\":{\"1008\":1,\"1217\":1}}],[\"最好的情况是o\",{\"1\":{\"316\":1}}],[\"最好坚持一种模式\",{\"1\":{\"665\":1}}],[\"最好使用导出表\",{\"1\":{\"604\":1}}],[\"最好在测试环境中进行评估\",{\"1\":{\"574\":1}}],[\"最好\",{\"1\":{\"417\":1}}],[\"最好为o\",{\"1\":{\"323\":1}}],[\"最好情况o\",{\"1\":{\"318\":1}}],[\"最后看\",{\"1\":{\"1494\":1}}],[\"最后两个小问题\",{\"1\":{\"1424\":1}}],[\"最后两个问题\",{\"1\":{\"1416\":1}}],[\"最后由\",{\"1\":{\"1414\":1}}],[\"最后一个问题\",{\"1\":{\"1388\":1,\"1402\":1,\"1408\":2,\"1432\":1}}],[\"最后判断这个bean是否配置了dlestroy\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"最后合并计算结果\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"最后join的实现其实是基于等待通知机制的\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"最后发现提交到了测试分支\",{\"1\":{\"980\":1}}],[\"最后将结果数据显示到指定页面\",{\"1\":{\"895\":1}}],[\"最后读取作为方法参数传递的属性\",{\"1\":{\"829\":1}}],[\"最后从远程仓库\",{\"1\":{\"778\":1}}],[\"最后\",{\"0\":{\"308\":1},\"1\":{\"478\":1,\"1380\":3,\"1392\":2,\"1402\":1,\"1410\":1,\"1436\":2,\"1450\":1,\"1470\":1,\"1474\":1}}],[\"最早诞生于\",{\"1\":{\"270\":1}}],[\"最长不能超过多少个ticktime的时间长度\",{\"1\":{\"174\":1}}],[\"最坏的情况下在内存中查找的次数为2\",{\"1\":{\"123\":1}}],[\"最少必要面试\",{\"1\":{\"117\":1}}],[\"最少必要面试题\",{\"0\":{\"996\":1,\"1125\":1,\"1206\":1},\"1\":{\"53\":1,\"983\":1,\"984\":1,\"987\":1,\"993\":1,\"998\":1,\"1013\":1,\"1021\":1,\"1080\":1,\"1083\":1,\"1095\":1,\"1128\":1,\"1134\":1,\"1138\":1,\"1177\":1,\"1180\":1,\"1190\":1,\"1193\":1,\"1203\":1,\"1206\":1,\"1319\":1,\"1376\":1},\"2\":{\"985\":1,\"994\":1,\"997\":1,\"1011\":1,\"1022\":1,\"1038\":1,\"1052\":1,\"1066\":1,\"1081\":1,\"1096\":1,\"1110\":1,\"1126\":1,\"1139\":1,\"1152\":1,\"1165\":1,\"1178\":1,\"1191\":1,\"1204\":1,\"1377\":1}}],[\"最关键的是每三个月都要手动更新\",{\"1\":{\"98\":1}}],[\"最近我在更新\",{\"1\":{\"1380\":1,\"1382\":1,\"1384\":1,\"1386\":1,\"1388\":1,\"1390\":1,\"1392\":1,\"1394\":1,\"1396\":1,\"1398\":1,\"1400\":1,\"1402\":1,\"1404\":1,\"1406\":1,\"1408\":1,\"1410\":1,\"1412\":1,\"1414\":1,\"1416\":1,\"1418\":1,\"1420\":1,\"1422\":1,\"1424\":1,\"1426\":1,\"1428\":1,\"1430\":1,\"1432\":1,\"1434\":1,\"1436\":1,\"1438\":1,\"1440\":1,\"1446\":1,\"1448\":1,\"1450\":1,\"1452\":1,\"1454\":1,\"1456\":1,\"1458\":1,\"1460\":1,\"1462\":1,\"1464\":1,\"1466\":1,\"1468\":1,\"1470\":1,\"1474\":1,\"1476\":1,\"1478\":1,\"1481\":1}}],[\"最近我手头一些活\",{\"1\":{\"203\":1}}],[\"最近最少使用\",{\"1\":{\"1001\":1,\"1210\":1}}],[\"最近帝都疫情又严重\",{\"1\":{\"703\":1}}],[\"最近有些同学在后台问我\",{\"1\":{\"107\":1}}],[\"最近各大互联网公司都传出裁员消息\",{\"1\":{\"85\":1}}],[\"最近火爆全球的国产\",{\"1\":{\"72\":1}}],[\"最普遍的思想和智慧\",{\"1\":{\"56\":1}}],[\"促进个人成长\",{\"1\":{\"56\":1}}],[\"分为自测和提测\",{\"1\":{\"1502\":1}}],[\"分为一主一从或一主多从\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"分担服务器压力\",{\"1\":{\"1422\":1}}],[\"分担出错概率\",{\"1\":{\"791\":1}}],[\"分模块避免\",{\"1\":{\"1412\":1}}],[\"分针和秒\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"分数\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"分数从高到低排序\",{\"1\":{\"670\":1}}],[\"分数从高到低\",{\"1\":{\"670\":1}}],[\"分代回收\",{\"1\":{\"1398\":1}}],[\"分代算法\",{\"1\":{\"1103\":1,\"1294\":1}}],[\"分代\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"分钟\",{\"1\":{\"1004\":1,\"1028\":1,\"1213\":1,\"1232\":1}}],[\"分值\",{\"1\":{\"691\":1}}],[\"分割线\",{\"1\":{\"687\":1}}],[\"分场合可以对关系数据库起到很好的补充作用\",{\"1\":{\"652\":1}}],[\"分到多个同一个数据库的多张表中\",{\"1\":{\"583\":1}}],[\"分到多个不同的库\",{\"1\":{\"583\":1}}],[\"分别用于保证读操作\",{\"1\":{\"1382\":1}}],[\"分别有哨兵集群与redis的主从集群\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"分别有什么作用\",{\"0\":{\"991\":1}}],[\"分别对应上面两个dao接口\",{\"1\":{\"890\":1}}],[\"分别是什么\",{\"1\":{\"1414\":1}}],[\"分别是\",{\"1\":{\"1196\":1,\"1369\":1,\"1384\":1,\"1464\":1}}],[\"分别是快照方式\",{\"1\":{\"1158\":1,\"1338\":1}}],[\"分别是0~6\",{\"1\":{\"1118\":1,\"1306\":1}}],[\"分别是无库存异常\",{\"1\":{\"892\":1}}],[\"分别是dao\",{\"1\":{\"878\":1}}],[\"分别是顺序表和链表\",{\"1\":{\"335\":1}}],[\"分别存放在不同的库\",{\"1\":{\"583\":1}}],[\"分出来的小表中只包含一部分数据\",{\"1\":{\"582\":1}}],[\"分库分表包括分库和分表两个部分\",{\"1\":{\"578\":1}}],[\"分库分表就是为了解决由于数据量过大而导致数据库性能降低的问题\",{\"1\":{\"578\":1}}],[\"分表分库解决思路\",{\"0\":{\"577\":1,\"578\":1}}],[\"分区是将topic分成多个较小的部分\",{\"1\":{\"1444\":1}}],[\"分区和副本\",{\"1\":{\"1444\":1}}],[\"分区容错性\",{\"1\":{\"1197\":1,\"1370\":1}}],[\"分区分段+索引kafka\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"分区越多则副本之间的同步数量就越多\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"分区越多\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"分区数量越多\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"分区数越大消费线程数也就越多\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"分区数越大\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"分区数越多越好吗\",{\"0\":{\"1123\":1,\"1311\":1}}],[\"分区数和性能也是成正比的\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"分区数的数量是和吞吐量成正比的\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"分区选择算法\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"分区有什么问题呢\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"分区再分配的原理就是通化控制器给分区新增新的副本\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"分区再分配主要是用来维护\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"分区再分配是做什么的\",{\"0\":{\"1121\":1,\"1309\":1}}],[\"分区相当于一个日志文件\",{\"1\":{\"1118\":1,\"1306\":1}}],[\"分区中的所有\",{\"1\":{\"1117\":1,\"1305\":1}}],[\"分区\",{\"1\":{\"572\":1,\"664\":1,\"1118\":1,\"1306\":1}}],[\"分散到不同的物理表中\",{\"1\":{\"572\":1}}],[\"分析文档内容\",{\"1\":{\"1470\":1}}],[\"分析案例并实践\",{\"1\":{\"1406\":1}}],[\"分析案例并实践使用\",{\"1\":{\"1404\":1}}],[\"分析定位问题\",{\"1\":{\"1400\":1}}],[\"分析原因\",{\"1\":{\"825\":1}}],[\"分析\",{\"0\":{\"812\":1},\"1\":{\"722\":1,\"1456\":1}}],[\"分析慢sql\",{\"1\":{\"588\":1}}],[\"分析一下问题出现在哪儿呢\",{\"1\":{\"578\":1}}],[\"分析数据分布\",{\"1\":{\"573\":1}}],[\"分析查询逻辑\",{\"1\":{\"567\":1}}],[\"分析器相关参数\",{\"1\":{\"493\":1}}],[\"分析日志也会非常困难\",{\"1\":{\"224\":1}}],[\"分词器\",{\"1\":{\"496\":1}}],[\"分词器analyzer和arch\",{\"0\":{\"490\":1}}],[\"分词字段的null值也会被分词\",{\"1\":{\"493\":1}}],[\"分词字段默认配置\",{\"1\":{\"493\":1}}],[\"分词字段默认是position\",{\"1\":{\"493\":1}}],[\"分布到不同的数据库上面\",{\"1\":{\"580\":1}}],[\"分布在多台node节点上存储\",{\"1\":{\"474\":1}}],[\"分布式写入\",{\"1\":{\"1470\":1}}],[\"分布式搜索\",{\"1\":{\"1460\":1}}],[\"分布式协调\",{\"1\":{\"1194\":1,\"1201\":1,\"1367\":1,\"1374\":1}}],[\"分布式协调通知等也是常用的场景\",{\"1\":{\"182\":1}}],[\"分布式应用程序可以基于\",{\"1\":{\"1194\":1,\"1367\":1}}],[\"分布式应用部署\",{\"1\":{\"727\":1}}],[\"分布式系统在遇到任何网络分区故障时候\",{\"1\":{\"1197\":1,\"1370\":1}}],[\"分布式系统中多个主机之间是否能够保持数据一致性的特性\",{\"1\":{\"1197\":1,\"1370\":1}}],[\"分布式系统不可能同时满足一致性\",{\"1\":{\"1035\":2,\"1239\":1}}],[\"分布式系统是目前使用非常普遍的解决方案\",{\"1\":{\"434\":1}}],[\"分布式阶段由以下步骤构成\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"分布式缓存\",{\"1\":{\"1002\":1,\"1156\":1,\"1211\":1,\"1336\":1}}],[\"分布式\",{\"2\":{\"728\":1,\"729\":1}}],[\"分布式技术带来的技术挑战是对同一个资源的并发访问\",{\"1\":{\"657\":1}}],[\"分布式会话\",{\"1\":{\"657\":1,\"1156\":1,\"1336\":1}}],[\"分布式数据库\",{\"1\":{\"572\":1}}],[\"分布式部署的时候会使用相同的配置\",{\"1\":{\"440\":1}}],[\"分布式环境不推荐使用\",{\"1\":{\"438\":1}}],[\"分布式id生成器\",{\"0\":{\"437\":1}}],[\"分布式唯一id解决方案\",{\"0\":{\"433\":1}}],[\"分布式集群开发的目的就是为了保证系统的稳定运行\",{\"1\":{\"183\":1}}],[\"分布式就是将一个系统拆分到多个独立运行的应用中\",{\"1\":{\"182\":1}}],[\"分布式队列\",{\"0\":{\"181\":1},\"1\":{\"1201\":1,\"1374\":1}}],[\"分布式同步\",{\"1\":{\"171\":1}}],[\"分布式锁和分布式队列等功能\",{\"1\":{\"1194\":1,\"1367\":1}}],[\"分布式锁就成为一个必要\",{\"1\":{\"727\":1}}],[\"分布式锁控制\",{\"1\":{\"170\":1}}],[\"分布式锁\",{\"0\":{\"180\":1},\"1\":{\"130\":1,\"640\":1,\"657\":1,\"1156\":1,\"1201\":2,\"1336\":1,\"1374\":2}}],[\"分布式场景中如何单例模型\",{\"1\":{\"115\":1}}],[\"分片就像是把一本大书分成多个小册子\",{\"1\":{\"1462\":1}}],[\"分片是如何工作的呢\",{\"1\":{\"1462\":1}}],[\"分片增量回收\",{\"1\":{\"1398\":1}}],[\"分片的回收\",{\"1\":{\"1398\":1}}],[\"分片的数量和你使用的硬件\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"分片将会在一个不同的节点上重建\",{\"1\":{\"1035\":1,\"1239\":1}}],[\"分片加载文档体\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"分片数\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"分片有多少\",{\"0\":{\"1025\":1,\"1229\":1}}],[\"分片\",{\"1\":{\"474\":1,\"1460\":1}}],[\"分页助手\",{\"1\":{\"1416\":1}}],[\"分页插件的原理就是使用\",{\"1\":{\"1138\":1,\"1323\":1}}],[\"分页查询网站首页的新闻资讯\",{\"1\":{\"718\":1}}],[\"分页处理\",{\"1\":{\"447\":1}}],[\"分页大小可以用命令getconf\",{\"1\":{\"123\":2}}],[\"分开\",{\"1\":{\"441\":1}}],[\"分配对象的内存空间\",{\"1\":{\"1056\":2,\"1254\":2}}],[\"分配空间\",{\"1\":{\"688\":1}}],[\"分配式排序\",{\"1\":{\"424\":1}}],[\"分配内存失败\",{\"1\":{\"338\":1}}],[\"分成4个范围\",{\"1\":{\"319\":1}}],[\"分的\",{\"1\":{\"319\":1}}],[\"分解为其质因数\",{\"1\":{\"305\":1}}],[\"分享一个直观的代码\",{\"1\":{\"1061\":1,\"1259\":1}}],[\"分享等等\",{\"1\":{\"536\":1}}],[\"分享和在看是对我最大的鼓励\",{\"1\":{\"441\":1}}],[\"分享了很多资源和源码等\",{\"1\":{\"247\":1}}],[\"分享高昂分成\",{\"1\":{\"53\":1}}],[\"分支名也是可以的\",{\"1\":{\"980\":1}}],[\"分支名\",{\"1\":{\"111\":2}}],[\"分支\",{\"1\":{\"111\":1,\"980\":1,\"1416\":1}}],[\"分类为\",{\"1\":{\"42\":1}}],[\"费时费力\",{\"1\":{\"53\":1}}],[\"还可能会导致死锁等问题\",{\"1\":{\"1480\":1}}],[\"还可以使用\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"还没选上\",{\"1\":{\"1466\":1}}],[\"还没开始的同学\",{\"1\":{\"464\":1,\"481\":1,\"513\":1}}],[\"还给出了源码示例\",{\"1\":{\"1462\":1}}],[\"还得感谢jvm这位大恩人\",{\"1\":{\"1392\":1}}],[\"还包括\",{\"1\":{\"1026\":1,\"1230\":1}}],[\"还包括用户唯一标识\",{\"1\":{\"220\":1}}],[\"还将继续介绍\",{\"1\":{\"671\":1}}],[\"还能为你的职业发展打下坚实的基础\",{\"1\":{\"1436\":1}}],[\"还能大大降低数据库的压力\",{\"1\":{\"657\":1}}],[\"还能提升部分性能\",{\"1\":{\"583\":1}}],[\"还支持\",{\"1\":{\"656\":1}}],[\"还支持对几个操作全并后的原子性执行\",{\"1\":{\"656\":1}}],[\"还要解决数据路由的问题\",{\"1\":{\"583\":1}}],[\"还要做好接口授权访问\",{\"1\":{\"212\":1}}],[\"还需要对很多这个过程涉及到的其他知识点进行深入学习和理解\",{\"1\":{\"1410\":1}}],[\"还需要更新所有相关的索引\",{\"1\":{\"571\":1}}],[\"还需要指明接口的域名或ip\",{\"1\":{\"205\":1}}],[\"还会顺带将\",{\"1\":{\"688\":1}}],[\"还会分配额外的空闲空间\",{\"1\":{\"683\":1}}],[\"还会增加数据插入\",{\"1\":{\"565\":1}}],[\"还会执行\",{\"1\":{\"223\":1}}],[\"还记载了单词频率信息\",{\"1\":{\"478\":1}}],[\"还是尤为重要\",{\"1\":{\"1083\":1}}],[\"还是以数据库为准\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"还是直接返回\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"还是从结果集中取出一个值时\",{\"1\":{\"832\":1}}],[\"还是难免产生重复\",{\"1\":{\"440\":1}}],[\"还是单机游戏对流程度都要求很高\",{\"1\":{\"72\":1}}],[\"还体验到了数学的美妙和力量\",{\"1\":{\"308\":1}}],[\"还体验到了数学的无穷魅力\",{\"1\":{\"307\":1}}],[\"还展示了它的创造性和美感\",{\"1\":{\"307\":1}}],[\"还提供免费的面包和桶面😄\",{\"1\":{\"270\":1}}],[\"还提供了更完整的框架功能\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"还提供了一个完整的流式处理框架\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"还提供了\",{\"1\":{\"114\":1,\"1049\":1,\"1250\":1}}],[\"还不是很了解\",{\"1\":{\"987\":1}}],[\"还不想花\",{\"1\":{\"969\":1}}],[\"还不行则可配置此项\",{\"1\":{\"778\":1}}],[\"还不限流量\",{\"1\":{\"238\":1}}],[\"还不会编写\",{\"1\":{\"25\":1}}],[\"还有其他你想补充的吗\",{\"1\":{\"1458\":1}}],[\"还有其他的缺点吗\",{\"1\":{\"1436\":2}}],[\"还有其他的优点吗\",{\"1\":{\"1436\":3}}],[\"还有其他的优化策略吗\",{\"1\":{\"1428\":1}}],[\"还有其他的使用场景吗\",{\"1\":{\"1434\":2}}],[\"还有其他的内存优化技巧吗\",{\"1\":{\"1430\":1}}],[\"还有其他的方法吗\",{\"1\":{\"1430\":1,\"1440\":1}}],[\"还有什么其他有趣的事情你想分享吗\",{\"1\":{\"1456\":1}}],[\"还有什么你想补充的吗\",{\"1\":{\"1426\":1}}],[\"还有没有其他的技巧\",{\"1\":{\"1440\":1}}],[\"还有些需求是产品经理拍脑袋产生的\",{\"1\":{\"1502\":1}}],[\"还有些细节想问一下\",{\"1\":{\"1424\":1}}],[\"还有些书籍翻译成为\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"还有个问题是\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"还有调用了sqlsession的修改\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"还有大家已知的俩点\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"还有各种\",{\"1\":{\"678\":1}}],[\"还有需要更多技术博文可以留言催更\",{\"1\":{\"671\":1}}],[\"还有在后台管理系统中做分布式\",{\"1\":{\"657\":1}}],[\"还有来领取原版\",{\"1\":{\"649\":1}}],[\"还有就是应用层学习\",{\"1\":{\"263\":1}}],[\"还有努力系数\",{\"1\":{\"263\":1}}],[\"还有一个实现上的小细节区别\",{\"1\":{\"1075\":1,\"1270\":1}}],[\"还有一个有趣的命令\",{\"1\":{\"666\":1}}],[\"还有一些常用的工具类等\",{\"1\":{\"1502\":1}}],[\"还有一些其他的建议\",{\"1\":{\"1442\":1}}],[\"还有一些自动识别如下图所示\",{\"1\":{\"492\":1}}],[\"还有一些参数是\",{\"1\":{\"211\":1}}],[\"还有一点是对学历要求也不高\",{\"1\":{\"263\":1}}],[\"还有一点也是为了可以筛选加入的小伙伴是真正要学习编程的同学\",{\"1\":{\"250\":1}}],[\"还有3年可选\",{\"1\":{\"238\":1}}],[\"还有命名服务\",{\"1\":{\"182\":1}}],[\"还有\",{\"1\":{\"117\":1,\"1418\":1}}],[\"还有这样做违fa\",{\"1\":{\"53\":1}}],[\"还想发到个人博客上去\",{\"0\":{\"114\":1}}],[\"还真到期了\",{\"1\":{\"98\":1}}],[\"还培养思维能力\",{\"1\":{\"56\":1}}],[\"抄袭不会长久\",{\"1\":{\"53\":1}}],[\"求个\",{\"1\":{\"53\":1}}],[\"求星星✨\",{\"1\":{\"1\":1}}],[\"天啊\",{\"1\":{\"1392\":1}}],[\"天天开心\",{\"1\":{\"703\":1}}],[\"天不满意可以全额退款\",{\"1\":{\"250\":1}}],[\"天时\",{\"1\":{\"103\":1}}],[\"天\",{\"1\":{\"53\":1,\"103\":1,\"721\":1}}],[\"天才源自刻意练习\",{\"1\":{\"12\":1}}],[\"3整理阶段压缩空间\",{\"1\":{\"1394\":1}}],[\"3<\",{\"1\":{\"875\":2}}],[\"37<\",{\"1\":{\"875\":1}}],[\"37\",{\"1\":{\"723\":1,\"928\":2}}],[\"34\",{\"1\":{\"497\":1}}],[\"347\",{\"1\":{\"406\":1}}],[\"32gb\",{\"1\":{\"1030\":1,\"1234\":1}}],[\"32<\",{\"1\":{\"798\":1}}],[\"32\",{\"1\":{\"440\":4,\"441\":2,\"660\":1,\"692\":1,\"789\":1,\"799\":4,\"825\":1,\"893\":1,\"1382\":1,\"1480\":2}}],[\"32k\",{\"1\":{\"123\":2,\"162\":1}}],[\"36\",{\"1\":{\"884\":1}}],[\"361389\",{\"1\":{\"723\":1}}],[\"365\",{\"1\":{\"440\":1,\"441\":1,\"721\":1}}],[\"360\",{\"1\":{\"264\":1,\"852\":1}}],[\"360doc\",{\"1\":{\"153\":1}}],[\"360收录\",{\"1\":{\"6\":1}}],[\"335\",{\"1\":{\"853\":1}}],[\"3330851033429007657l\",{\"1\":{\"853\":1}}],[\"33tyyg\",{\"1\":{\"829\":1}}],[\"3306\",{\"1\":{\"800\":1,\"806\":2,\"808\":1,\"879\":1,\"887\":1,\"1507\":1}}],[\"33\",{\"1\":{\"430\":2}}],[\"399\",{\"1\":{\"852\":1}}],[\"39\",{\"1\":{\"428\":5,\"430\":2,\"459\":2,\"722\":1,\"853\":8,\"893\":1}}],[\"390310\",{\"1\":{\"389\":1}}],[\"359\",{\"1\":{\"852\":1}}],[\"35\",{\"1\":{\"382\":1,\"852\":11,\"853\":2,\"858\":1}}],[\"35812205\",{\"1\":{\"277\":1}}],[\"315\",{\"1\":{\"928\":1}}],[\"3182\",{\"1\":{\"723\":1}}],[\"310733557\",{\"1\":{\"153\":1}}],[\"3128\",{\"1\":{\"123\":2}}],[\"31\",{\"1\":{\"111\":1,\"440\":2,\"441\":1,\"721\":2,\"892\":2}}],[\"38669394\",{\"1\":{\"447\":1}}],[\"3888是zookeeper与其他应用程序通讯的端口\",{\"1\":{\"174\":1}}],[\"3888\",{\"1\":{\"174\":2}}],[\"38\",{\"1\":{\"111\":1,\"723\":1,\"858\":2,\"1062\":1,\"1260\":1}}],[\"30秒后\",{\"1\":{\"1418\":1}}],[\"30秒后过期\",{\"1\":{\"1418\":1}}],[\"30pm\",{\"1\":{\"979\":1}}],[\"3000\",{\"1\":{\"126\":1,\"296\":3,\"951\":1,\"975\":1}}],[\"302\",{\"1\":{\"121\":1,\"984\":1}}],[\"301\",{\"1\":{\"121\":1}}],[\"30\",{\"1\":{\"103\":1,\"162\":2,\"342\":1,\"382\":1,\"666\":2,\"822\":2,\"878\":1,\"892\":1,\"928\":2,\"1028\":1,\"1232\":1,\"1406\":1,\"1418\":2,\"1507\":1}}],[\"3a\",{\"1\":{\"72\":2,\"1476\":1}}],[\"3\",{\"0\":{\"101\":1,\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1,\"148\":2,\"149\":1,\"150\":1,\"151\":1,\"152\":1,\"153\":1,\"154\":1,\"155\":1,\"156\":1,\"157\":2,\"158\":1,\"159\":1,\"160\":1,\"161\":1,\"162\":1,\"163\":1,\"170\":1,\"172\":1,\"176\":1,\"192\":1,\"206\":1,\"241\":1,\"387\":1,\"389\":1,\"391\":1,\"392\":1,\"393\":1,\"394\":1,\"395\":1,\"396\":1,\"405\":1,\"413\":1,\"425\":1,\"429\":1,\"430\":1,\"559\":1,\"591\":1,\"620\":1,\"625\":1,\"642\":1,\"653\":1,\"654\":1,\"655\":1,\"656\":2,\"667\":1,\"679\":1,\"686\":1,\"687\":1,\"688\":1,\"689\":2,\"736\":1,\"751\":1,\"764\":1,\"765\":1,\"768\":1,\"771\":1,\"776\":1,\"790\":1,\"799\":1,\"803\":1,\"807\":1,\"818\":1,\"826\":1,\"831\":1,\"840\":1,\"843\":1,\"849\":1,\"857\":1,\"961\":1,\"1001\":1,\"1016\":1,\"1027\":1,\"1043\":1,\"1057\":1,\"1071\":1,\"1086\":1,\"1101\":1,\"1117\":1,\"1131\":1,\"1144\":1,\"1157\":1,\"1170\":1,\"1183\":1,\"1196\":1,\"1210\":1,\"1222\":1,\"1231\":1,\"1244\":1,\"1255\":1,\"1266\":1,\"1279\":1,\"1292\":1,\"1305\":1,\"1316\":1,\"1327\":1,\"1337\":1,\"1347\":1,\"1358\":1,\"1369\":1,\"1524\":1},\"1\":{\"53\":1,\"85\":1,\"123\":2,\"142\":3,\"170\":1,\"174\":3,\"175\":1,\"176\":1,\"183\":3,\"238\":2,\"250\":1,\"264\":1,\"306\":2,\"316\":2,\"319\":1,\"323\":2,\"341\":1,\"342\":3,\"382\":3,\"390\":1,\"404\":1,\"405\":2,\"412\":7,\"413\":3,\"417\":3,\"428\":2,\"430\":1,\"440\":2,\"455\":1,\"482\":1,\"489\":1,\"513\":1,\"588\":1,\"592\":2,\"595\":1,\"657\":1,\"666\":1,\"667\":4,\"668\":1,\"669\":1,\"670\":1,\"711\":1,\"721\":1,\"722\":2,\"764\":1,\"765\":2,\"772\":1,\"773\":1,\"786\":1,\"789\":2,\"790\":4,\"800\":1,\"802\":1,\"806\":2,\"807\":2,\"808\":2,\"814\":1,\"818\":2,\"826\":3,\"845\":2,\"875\":4,\"878\":1,\"880\":2,\"882\":2,\"883\":2,\"890\":4,\"893\":1,\"900\":1,\"901\":1,\"902\":1,\"925\":1,\"979\":1,\"1001\":7,\"1004\":1,\"1028\":5,\"1029\":4,\"1031\":1,\"1034\":3,\"1049\":1,\"1056\":3,\"1057\":1,\"1061\":5,\"1118\":1,\"1119\":1,\"1120\":2,\"1122\":1,\"1123\":1,\"1124\":1,\"1147\":1,\"1168\":1,\"1173\":1,\"1174\":1,\"1176\":2,\"1177\":1,\"1210\":7,\"1213\":1,\"1232\":5,\"1233\":4,\"1235\":1,\"1238\":3,\"1250\":1,\"1254\":3,\"1255\":1,\"1259\":5,\"1306\":1,\"1307\":1,\"1308\":2,\"1310\":1,\"1311\":1,\"1312\":1,\"1330\":1,\"1345\":1,\"1350\":1,\"1351\":1,\"1353\":2,\"1354\":1,\"1382\":2,\"1392\":1,\"1410\":2,\"1424\":1,\"1502\":1,\"1507\":1}}],[\"编辑\",{\"1\":{\"974\":1}}],[\"编辑器\",{\"1\":{\"874\":1}}],[\"编辑此页链接\",{\"1\":{\"18\":1}}],[\"编译错误\",{\"1\":{\"1424\":1}}],[\"编译后存在于字节码文件中\",{\"1\":{\"1402\":2}}],[\"编译后失效\",{\"1\":{\"1402\":2}}],[\"编译阶段\",{\"1\":{\"1402\":1}}],[\"编译期\",{\"1\":{\"1402\":1}}],[\"编译期使用\",{\"1\":{\"1402\":1}}],[\"编译器的工作原理与调优手段\",{\"1\":{\"1400\":1}}],[\"编译器不会将\",{\"1\":{\"1382\":1}}],[\"编译器会禁止一些优化\",{\"1\":{\"1382\":1}}],[\"编译器会检查\",{\"1\":{\"1041\":1,\"1242\":1}}],[\"编译器优化\",{\"1\":{\"1382\":1}}],[\"编译不通过\",{\"1\":{\"1041\":2,\"1242\":2}}],[\"编译原理\",{\"1\":{\"887\":1}}],[\"编译测试源代码\",{\"1\":{\"776\":1}}],[\"编译项目的源代码\",{\"1\":{\"776\":1}}],[\"编译\",{\"1\":{\"735\":1,\"761\":1,\"768\":1,\"774\":2,\"1087\":1,\"1280\":1}}],[\"编译时间长\",{\"1\":{\"243\":1}}],[\"编译时间较长\",{\"1\":{\"142\":1}}],[\"编号最小的获得锁\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"编号\",{\"1\":{\"721\":2,\"786\":1}}],[\"编者荐语\",{\"1\":{\"450\":1}}],[\"编写工具类\",{\"0\":{\"939\":1}}],[\"编写测试类\",{\"1\":{\"891\":1}}],[\"编写测试案例也要给出测试数据\",{\"1\":{\"213\":1}}],[\"编写mapper配置\",{\"1\":{\"848\":1}}],[\"编写mapper\",{\"1\":{\"847\":1}}],[\"编写userdao的测试用例\",{\"0\":{\"820\":1}}],[\"编写userdao对应mapper\",{\"0\":{\"818\":1}}],[\"编写专门的打印函数\",{\"1\":{\"682\":1}}],[\"编写的方法\",{\"1\":{\"1388\":1}}],[\"编写的真人1对1面试对话教程\",{\"1\":{\"1378\":1}}],[\"编写的\",{\"1\":{\"453\":1}}],[\"编写接口请求示例\",{\"0\":{\"208\":1}}],[\"编码不同将直接影响数据的内存占用和读写效率\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"编码优化\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"编码方式\",{\"1\":{\"693\":1}}],[\"编码的字符串\",{\"1\":{\"500\":1}}],[\"编码\",{\"0\":{\"876\":1,\"938\":1},\"1\":{\"133\":1,\"698\":1,\"1502\":2}}],[\"编程方式避免\",{\"1\":{\"1412\":1}}],[\"编程式事务管理使用\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"编程规范\",{\"0\":{\"186\":1},\"2\":{\"187\":1,\"188\":1,\"201\":1,\"202\":1,\"215\":1,\"216\":1,\"230\":1,\"231\":1}}],[\"编程基础\",{\"1\":{\"115\":1}}],[\"编程指南的优势\",{\"0\":{\"249\":1}}],[\"编程指南知识星球\",{\"1\":{\"53\":1,\"248\":1}}],[\"编程指南\",{\"0\":{\"53\":1},\"1\":{\"969\":1}}],[\"杂记\",{\"0\":{\"51\":1},\"2\":{\"52\":1,\"71\":1}}],[\"这么灵活\",{\"1\":{\"1452\":1}}],[\"这么多请求方式\",{\"1\":{\"206\":1}}],[\"这正是我们下一次面试的话题\",{\"1\":{\"1450\":1}}],[\"这听起来不错\",{\"1\":{\"1464\":1}}],[\"这听起来很直观\",{\"1\":{\"1444\":1}}],[\"这听起来似乎不太可能\",{\"1\":{\"303\":1}}],[\"这只是一个简化的示例\",{\"1\":{\"1444\":1}}],[\"这次面试对我来说非常有意义\",{\"1\":{\"1438\":1}}],[\"这次是根据十位数来分配\",{\"1\":{\"428\":1}}],[\"这可以通过\",{\"1\":{\"1480\":2}}],[\"这可以避免\",{\"1\":{\"1480\":1}}],[\"这可以确保变量的可见性\",{\"1\":{\"1480\":1}}],[\"这可以用来阻止其他会话访问这些表\",{\"1\":{\"635\":1}}],[\"这可能会对逻辑产生意料之外的影响\",{\"1\":{\"1476\":1}}],[\"这可能会增加硬件成本\",{\"1\":{\"1436\":1}}],[\"这整个同步过程可以保证从服务器快速获取主服务器的数据\",{\"1\":{\"1422\":1}}],[\"这四个组件协同工作\",{\"1\":{\"1414\":1}}],[\"这四种是解决死锁的办法\",{\"1\":{\"644\":1}}],[\"这涉及到\",{\"1\":{\"1410\":1}}],[\"这份学习清单也同样具有针对性\",{\"1\":{\"1406\":1}}],[\"这份学习清单涵盖的内容非常全面且具有针对性\",{\"1\":{\"1404\":1}}],[\"这需要根据你的业务需求来决定\",{\"1\":{\"1430\":1}}],[\"这需要不断实践和总结\",{\"1\":{\"1410\":1}}],[\"这需要投入大量时间与精力\",{\"1\":{\"1406\":1}}],[\"这需要我继续学习和努力\",{\"1\":{\"1398\":1}}],[\"这展现出你的自我认知能力\",{\"1\":{\"1404\":1}}],[\"这无疑需要一段长期的学习与总结过程\",{\"1\":{\"1404\":1}}],[\"这无疑增加了问题的难度\",{\"1\":{\"304\":1}}],[\"这取决于应用的需求\",{\"1\":{\"1404\":1}}],[\"这在技术面试中是很重要的一点\",{\"1\":{\"1392\":1}}],[\"这肯定是个苦力活\",{\"1\":{\"1392\":1}}],[\"这包括bootstrap\",{\"1\":{\"1392\":1}}],[\"这对于刚入行的技术人员来说非常有帮助\",{\"1\":{\"1462\":1}}],[\"这对于数据分析和故障排除非常有帮助\",{\"1\":{\"1436\":1}}],[\"这对于构建可靠的数据管道非常重要\",{\"1\":{\"1436\":1}}],[\"这对于处理实时数据和大规模应用非常有用\",{\"1\":{\"1436\":1}}],[\"这对于个人的成长和对社会的贡献都是极其宝贵的\",{\"1\":{\"56\":1}}],[\"这对一个入门的开发者来说很难得\",{\"1\":{\"1414\":1}}],[\"这对我加深理解g1有很大帮助\",{\"1\":{\"1398\":1}}],[\"这对我来说很宝贵\",{\"1\":{\"1380\":1}}],[\"这与\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"这两点好处使得java类加载机制更加完备和安全\",{\"1\":{\"1392\":1}}],[\"这两种类型的节点重点是后面的\",{\"1\":{\"1195\":1,\"1368\":1}}],[\"这两个概念容易混淆\",{\"1\":{\"1424\":1}}],[\"这两个阶段互相循环\",{\"1\":{\"1422\":1}}],[\"这两个方案\",{\"1\":{\"1004\":1,\"1006\":1,\"1213\":1,\"1215\":1}}],[\"这两个整数不仅需要满足乘积为\",{\"1\":{\"304\":1}}],[\"这道题相信大家都有所了解\",{\"1\":{\"1195\":1,\"1368\":1}}],[\"这道题是spring一道标准题目\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"这道题目较难\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"这极有可能发生sql注入\",{\"1\":{\"1131\":1,\"1316\":1}}],[\"这得益于其消息持久化和多副本机制\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"这侧面说明如果链表的长度达到了8\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"这段代码模拟了一个分片的实现\",{\"1\":{\"1462\":1}}],[\"这段代码很好地展示了kafka的push和pull模式\",{\"1\":{\"1448\":1}}],[\"这段代码看起来很简单明了\",{\"1\":{\"1442\":1}}],[\"这段崭新的内存还没有初始化\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"这段官方文档已经说的很明白\",{\"1\":{\"761\":1}}],[\"这并不符合我们的业务\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"这几年自媒体原来热\",{\"1\":{\"969\":1}}],[\"这端点是一个http接口\",{\"1\":{\"946\":1}}],[\"这部分可以过了\",{\"1\":{\"1382\":1}}],[\"这部分的缓存也就越大\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"这部分包含了项目构建相关的信息\",{\"1\":{\"907\":1}}],[\"这部分定义了项目所依赖的其他项目\",{\"1\":{\"907\":1}}],[\"这部分定义了一些用于\",{\"1\":{\"907\":1}}],[\"这句需要再琢磨\",{\"1\":{\"827\":1}}],[\"这句是自嘲\",{\"1\":{\"263\":1}}],[\"这条命令的作用是\",{\"1\":{\"1418\":1}}],[\"这条sql的意思是\",{\"1\":{\"790\":1}}],[\"这条在大多数业务场景不会使用到\",{\"1\":{\"604\":1}}],[\"这也为你成长为资深工程师奠定基础\",{\"1\":{\"1404\":1}}],[\"这也使得我在研究这个课题上收获颇丰\",{\"1\":{\"1398\":1}}],[\"这也使我有机会重温\",{\"1\":{\"1380\":1}}],[\"这也太官方了吧\",{\"1\":{\"1392\":1}}],[\"这也就是为什么运行mvn\",{\"1\":{\"776\":1}}],[\"这也是为什么泛型类不能有基本类型的参数的原因\",{\"1\":{\"1424\":1}}],[\"这也是日常开发中经常使用的并发list\",{\"1\":{\"1404\":1}}],[\"这也是它成为我最爱的map实现类的原因\",{\"1\":{\"1406\":1}}],[\"这也是它成为java最常用的map实现的原因\",{\"1\":{\"1380\":1}}],[\"这也是它能达到高性能的关键\",{\"1\":{\"1398\":1}}],[\"这也是它被g1等收集器替代的原因之一\",{\"1\":{\"1396\":1}}],[\"这也是我在日常使用中最欣赏arraylist的地方\",{\"1\":{\"1404\":1}}],[\"这也是我在博客和公众号里常用的一种讲解方式\",{\"1\":{\"1392\":1}}],[\"这也是我作为面试官最喜欢看到的\",{\"1\":{\"1380\":1}}],[\"这也是\",{\"1\":{\"755\":1,\"1410\":1}}],[\"这也是这门语言的特点\",{\"1\":{\"541\":1}}],[\"这也是人性的特点\",{\"1\":{\"264\":1}}],[\"这地址可以在settings\",{\"1\":{\"765\":1}}],[\"这不是个别人能左右的\",{\"1\":{\"703\":1}}],[\"这五种类型的键的底层实现数据结构\",{\"1\":{\"682\":1}}],[\"这没有什么问题\",{\"1\":{\"665\":1}}],[\"这使得操作在主分片和副本分片都完成后才会返回\",{\"1\":{\"1035\":1,\"1239\":1}}],[\"这使得\",{\"1\":{\"652\":1}}],[\"这使得索引无法有效定位数据\",{\"1\":{\"564\":1}}],[\"这类key\",{\"1\":{\"652\":1}}],[\"这将是一件多么美好的事情\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"这将导致这个不存在的数据每次请求都要到\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"这将导致引擎放弃使用索引而进行全表扫描\",{\"0\":{\"594\":1,\"595\":1},\"1\":{\"1149\":2,\"1332\":2}}],[\"这将设置一个插入意向锁\",{\"1\":{\"621\":1}}],[\"这将锁定id在1到10之间的所有行\",{\"1\":{\"619\":1}}],[\"这通常比\",{\"1\":{\"574\":1}}],[\"这会导致\",{\"1\":{\"1412\":1}}],[\"这会导致性能开销增加\",{\"1\":{\"571\":1}}],[\"这会唤醒原来等待的线程\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"这会在当前分支生成两个对应的新提交\",{\"1\":{\"980\":1}}],[\"这会在当前分支产生一个新的提交\",{\"1\":{\"980\":1}}],[\"这会为查询结果中的每行添加排他锁\",{\"1\":{\"619\":1}}],[\"这会降低查询和连接的性能\",{\"0\":{\"601\":1}}],[\"这会降低并发性能\",{\"1\":{\"571\":1}}],[\"这会增加数据库在执行查询操作时的磁盘i\",{\"1\":{\"571\":1}}],[\"这意味着在同一时间只有一个线程可以访问这些方法\",{\"1\":{\"1480\":1}}],[\"这意味着在同一时间只有一个线程可以访问该代码块\",{\"1\":{\"1480\":1}}],[\"这意味着在同一时间只有一个线程可以访问该方法\",{\"1\":{\"1480\":1}}],[\"这意味着在锁定期间\",{\"1\":{\"624\":1}}],[\"这意味着你可以通过以下命令运行它\",{\"1\":{\"1524\":1}}],[\"这意味着你可以轻松地找到各种工具和插件来扩展和定制你的kafka部署\",{\"1\":{\"1436\":1}}],[\"这意味着你可以在\",{\"1\":{\"44\":1}}],[\"这意味着两者的开发可以并行进行\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"这意味着段的数量越多\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"这意味着可以用任何二进制序列作为key值\",{\"1\":{\"665\":1}}],[\"这意味着即使数据分布极不均匀\",{\"1\":{\"566\":1}}],[\"这用于存储已经领取过空投的代币地址\",{\"1\":{\"541\":1}}],[\"这主要基于产品设计的方案\",{\"1\":{\"538\":1}}],[\"这三个方法都是用来协调线程间通信的\",{\"1\":{\"1446\":1}}],[\"这三个家伙\",{\"1\":{\"1414\":1}}],[\"这三个产品被设计成一个集成解决方案\",{\"1\":{\"453\":1}}],[\"这三套生命周期分别是\",{\"1\":{\"774\":1}}],[\"这三种排序算法都利用了桶的概念\",{\"1\":{\"423\":1}}],[\"这篇干货查漏补缺\",{\"1\":{\"907\":1}}],[\"这篇文章从\",{\"1\":{\"870\":1}}],[\"这篇文章可以跳过\",{\"1\":{\"764\":1}}],[\"这篇文章学习再来一起学习\",{\"1\":{\"761\":1}}],[\"这篇是附加篇\",{\"1\":{\"447\":1}}],[\"这篇主要讲解如何定义合适的位数组长度\",{\"1\":{\"392\":1}}],[\"这种自动选主的机制保证了集群的高可用性和容错性\",{\"1\":{\"1466\":1}}],[\"这种有序列表的维护是通过zookeeper的顺序节点\",{\"1\":{\"1466\":1}}],[\"这种分布式的架构使得kafka具备了高可用性和高吞吐量的特点\",{\"1\":{\"1442\":1}}],[\"这种分区分段+索引的设计\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"这种并行处理的方式使得kafka能够轻松应对高并发的场景\",{\"1\":{\"1438\":1}}],[\"这种问答的形式确实是学习的好方法\",{\"1\":{\"1424\":1}}],[\"这种委派机制可以避免重复加载\",{\"1\":{\"1392\":1}}],[\"这种积极主动的学习态度很难得\",{\"1\":{\"1380\":1}}],[\"这种范围确保不管接受多少请求\",{\"1\":{\"1172\":1,\"1349\":1}}],[\"这种bean范围是默认的\",{\"1\":{\"1172\":1,\"1349\":1}}],[\"这种情形就完全改变了\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"这种情况可以通过使用treemap来改进\",{\"1\":{\"1380\":1}}],[\"这种情况如果出错\",{\"1\":{\"791\":1}}],[\"这种情况下\",{\"1\":{\"567\":1,\"1079\":1,\"1274\":1}}],[\"这种情况就对上面提到的出现了不确定情况\",{\"1\":{\"440\":1}}],[\"这种方案的问题在于\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"这种方案成本很高\",{\"1\":{\"578\":1}}],[\"这种方式也可以做到很方便的分离多个环境\",{\"1\":{\"834\":1}}],[\"这种方法通过在select语句后增加for\",{\"1\":{\"641\":1}}],[\"这种方法通过尝试向一个表中插入具有唯一索引的记录来实现锁的获取\",{\"1\":{\"640\":1}}],[\"这种结构使得范围查询和顺序访问更加高效\",{\"1\":{\"566\":1}}],[\"这种排序算法不是基于元素比较\",{\"1\":{\"412\":1}}],[\"这点在正常情况下是不会发生的\",{\"1\":{\"440\":1}}],[\"这\",{\"1\":{\"440\":2}}],[\"这已经相当小了\",{\"1\":{\"392\":1}}],[\"这已经是一个人人都要面对的话题\",{\"1\":{\"264\":1}}],[\"这显然是不符合实际情况的\",{\"1\":{\"383\":1}}],[\"这就像是你在书架上找一本书\",{\"1\":{\"1464\":1}}],[\"这就像是你在餐厅点菜的时候的两种方式\",{\"1\":{\"1452\":1}}],[\"这就会产生数据丢失的问题\",{\"1\":{\"1446\":1}}],[\"这就涉及到kafka的副本机制了\",{\"1\":{\"1432\":1}}],[\"这就要涉及到spring\",{\"1\":{\"1410\":1}}],[\"这就叫做缓存穿透\",{\"1\":{\"1159\":1,\"1339\":1}}],[\"这就叫幻读\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"这就可能造成不同replica的响应不一致\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"这就解释了为什么在主线程\",{\"1\":{\"755\":1}}],[\"这就解决了键冲突的问题\",{\"1\":{\"687\":1}}],[\"这就意味着集合中不能出现重复的数据\",{\"1\":{\"669\":1}}],[\"这就意味着b+树单次磁盘\",{\"1\":{\"323\":1}}],[\"这就和哈希表中哈希冲突的情况一样\",{\"1\":{\"386\":1,\"392\":1}}],[\"这就好比我们今天进行现金的流通最小单位是一毛\",{\"1\":{\"325\":1}}],[\"这就时b+树在一次io里面\",{\"1\":{\"323\":1}}],[\"这就是elasticsearch索引文档的底层过程\",{\"1\":{\"1470\":1}}],[\"这就是为什么kafka能够实现高吞吐量和可伸缩性的原因之一\",{\"1\":{\"1444\":1}}],[\"这就是类型不安全\",{\"1\":{\"1424\":1}}],[\"这就是remembered\",{\"1\":{\"1398\":1}}],[\"这就是初始化阶段\",{\"1\":{\"1392\":1}}],[\"这就是解析阶段\",{\"1\":{\"1392\":1}}],[\"这就是控制反转\",{\"1\":{\"1170\":1,\"1347\":1}}],[\"这就是有人把ioc容器比喻成\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"这就是脏读\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"这就是双亲委派模式\",{\"1\":{\"1106\":1,\"1297\":1}}],[\"这就是java中内存泄露的发生场景\",{\"1\":{\"1102\":1,\"1293\":1}}],[\"这就是漏洞\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"这就是\",{\"1\":{\"687\":1,\"721\":1,\"755\":1,\"1169\":1,\"1346\":1,\"1408\":1}}],[\"这就是我们提到的\",{\"1\":{\"1446\":1}}],[\"这就是我们\",{\"1\":{\"599\":1}}],[\"这就是计数排序的基本过程\",{\"1\":{\"412\":1}}],[\"这就是在给团队挖坑\",{\"1\":{\"263\":1}}],[\"这就是leader在团队里的\",{\"1\":{\"170\":1}}],[\"这说明你对收集器的认知已逐步深入\",{\"1\":{\"1398\":1}}],[\"这说明你在学习和工作中确实遇到过一定的困惑\",{\"1\":{\"1380\":1}}],[\"这说明b\",{\"1\":{\"320\":1}}],[\"这说明程序大部分时间会阻塞在磁盘\",{\"1\":{\"319\":1}}],[\"这验证了我们的解决方案是正确的\",{\"1\":{\"306\":1}}],[\"这一整个过程是原子的\",{\"1\":{\"1476\":1}}],[\"这一整年断断续续做了几个的项目\",{\"1\":{\"263\":1}}],[\"这一过程实际上和cms非常相似\",{\"1\":{\"1398\":1}}],[\"这一步可以有效提高性能\",{\"1\":{\"1380\":1}}],[\"这一步可以减少hash冲突\",{\"1\":{\"1380\":1}}],[\"这一步可以提高查询效率\",{\"1\":{\"1380\":1}}],[\"这一步通过key的hashcode\",{\"1\":{\"1380\":1}}],[\"这一点很容易造成问题\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"这一点有些人是不知道的\",{\"1\":{\"1093\":1,\"1286\":1}}],[\"这一点对于我非常重要\",{\"1\":{\"265\":1}}],[\"这一节将结合计算机组成原理相关知识讨论b\",{\"1\":{\"324\":1}}],[\"这人也是做软件行业的\",{\"1\":{\"263\":1}}],[\"这行日志就会抛空指针异常\",{\"1\":{\"221\":1}}],[\"这里我以最常用的\",{\"1\":{\"1520\":1}}],[\"这里我们指定t必须是number或其子类型\",{\"1\":{\"1424\":1}}],[\"这里我们可以借助\",{\"1\":{\"1001\":1,\"1210\":1}}],[\"这里我们下载\",{\"1\":{\"660\":1}}],[\"这里以\",{\"1\":{\"1507\":1}}],[\"这里选用\",{\"1\":{\"1506\":1}}],[\"这里选取3台机器组成的服务器集群为例\",{\"1\":{\"183\":1}}],[\"这里可以根据异常类型返回不同的错误状态码和消息\",{\"1\":{\"1494\":1}}],[\"这里可以看出\",{\"1\":{\"326\":1}}],[\"这里\",{\"1\":{\"1446\":1}}],[\"这里通过\",{\"1\":{\"1416\":1}}],[\"这里通过讲解\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"这里有一个可以暴露\",{\"1\":{\"1520\":1}}],[\"这里有一个简单的java代码示例\",{\"1\":{\"1442\":1}}],[\"这里有一篇生产环境使用volatile的例子\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"这里有几个方面可以进一步加深对\",{\"1\":{\"1410\":1}}],[\"这里有几点建议\",{\"1\":{\"1408\":1}}],[\"这里有个自定义注解的示例\",{\"1\":{\"1402\":1}}],[\"这里主要以我的经验给大家一个参照\",{\"1\":{\"1378\":1}}],[\"这里主要说关于动态扩容\",{\"1\":{\"395\":1}}],[\"这里采用的就是顺序读写\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"这里简单提一下\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"这里说一个通俗的解答方式\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"这里还是用一个开源的流程文件\",{\"1\":{\"928\":1}}],[\"这里比较重要的一点是\",{\"1\":{\"907\":1}}],[\"这里建议使用阿里云的镜像\",{\"1\":{\"901\":1}}],[\"这里对前端代码只写较少部分\",{\"1\":{\"895\":1}}],[\"这里演示预约图书业务\",{\"1\":{\"893\":1}}],[\"这里为什么要给方法的参数添加\",{\"1\":{\"889\":1}}],[\"这里为4095\",{\"1\":{\"441\":1}}],[\"这里使用了\",{\"1\":{\"1494\":1}}],[\"这里使用了插入排序\",{\"1\":{\"405\":1}}],[\"这里使用的是\",{\"1\":{\"874\":1}}],[\"这里关闭\",{\"1\":{\"853\":1}}],[\"这里所谓的mapper接口路径\",{\"1\":{\"835\":1}}],[\"这里所说的客户端不是用户连接zookeeper服务器的客户端\",{\"1\":{\"174\":1}}],[\"这里必须是接口的全路径名\",{\"1\":{\"826\":1}}],[\"这里是一个经典的生产者消费者模型来解释这三个方法\",{\"1\":{\"1446\":1}}],[\"这里是\",{\"1\":{\"1414\":1,\"1492\":1}}],[\"这里是字面描述\",{\"1\":{\"1091\":1,\"1284\":1}}],[\"这里是用户id\",{\"1\":{\"810\":2}}],[\"这里是通过userid修改userstatus\",{\"1\":{\"787\":1}}],[\"这里是否放弃使用索引取决于\",{\"1\":{\"590\":1}}],[\"这里数据库中存储了下划线式\",{\"1\":{\"787\":1}}],[\"这里经常用到的是site阶段和site\",{\"1\":{\"777\":1}}],[\"这里其实应该使用\",{\"1\":{\"752\":1}}],[\"这里实现了对自定义注解的环绕增强切点\",{\"1\":{\"752\":1}}],[\"这里基于\",{\"1\":{\"727\":1}}],[\"这里返回了包含详细信息的输出\",{\"1\":{\"644\":1}}],[\"这里指定了空投合约拥有者地址和发型代币总数\",{\"1\":{\"541\":1}}],[\"这里会涉及到一些运营的知识\",{\"1\":{\"536\":1}}],[\"这里只介绍\",{\"1\":{\"461\":1}}],[\"这里提供一种解决思路\",{\"1\":{\"440\":1}}],[\"这里称为两个桶\",{\"1\":{\"401\":1}}],[\"这里没有调用addelem来添加元素\",{\"1\":{\"339\":1}}],[\"这里将其简化成一个二维地址\",{\"1\":{\"326\":1}}],[\"这里本文抛却具体差别\",{\"1\":{\"326\":1}}],[\"这里的文章是整个项目中要用到的知识重点\",{\"1\":{\"1492\":1}}],[\"这里的数值想想都有很多\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"这里的事件很广泛\",{\"1\":{\"991\":1}}],[\"这里的心酸😔\",{\"1\":{\"980\":1}}],[\"这里的的开始时间截\",{\"1\":{\"441\":1}}],[\"这里的线性指逻辑上的\",{\"1\":{\"335\":1}}],[\"这里的\",{\"1\":{\"316\":1,\"833\":1,\"907\":1}}],[\"这里就不写了\",{\"1\":{\"263\":1}}],[\"这里不做源码层面解读\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"这里不需要写\",{\"1\":{\"890\":1}}],[\"这里不是说你别学数学英语\",{\"1\":{\"263\":1}}],[\"这里不展开介绍了\",{\"1\":{\"263\":1}}],[\"这里边还有其他要解决事\",{\"1\":{\"263\":1}}],[\"这里给大家盘点和总结了常见的云服务器\",{\"1\":{\"238\":1}}],[\"这里zookeeper就可以很方便的实现类似的功能\",{\"1\":{\"179\":1}}],[\"这时需要额外采取其他措施解决\",{\"1\":{\"1476\":1}}],[\"这时线程b利用cas把节点从a改成c\",{\"1\":{\"1476\":1}}],[\"这时已经错失了一次更改的机会\",{\"1\":{\"1476\":1}}],[\"这时另一个线程在读或添加元素\",{\"1\":{\"1446\":1}}],[\"这时可以选择更高效的序列化工具\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"这时我们也可以打破死锁的那个闭环\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"这时发现b项目没有依赖slf4j\",{\"1\":{\"771\":1}}],[\"这时的\",{\"1\":{\"755\":1}}],[\"这时程序将\",{\"1\":{\"688\":1}}],[\"这时就需要锁来保证谁拥有这件商品\",{\"1\":{\"616\":1}}],[\"这时就会涉及到zookeeper的其他几点特性\",{\"1\":{\"170\":1}}],[\"这时有人来拜访看到已上锁\",{\"1\":{\"616\":1}}],[\"这时候静态方法已经创建完了\",{\"1\":{\"1424\":1}}],[\"这时候\",{\"1\":{\"1169\":1,\"1346\":1,\"1382\":1}}],[\"这时候是使用不到一级缓存的\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"这时候我们要使用cookie+数据库的方式实现\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"这时候就需要进行水平分库了\",{\"1\":{\"581\":1}}],[\"这时候整个数列已经排序完毕\",{\"1\":{\"428\":1}}],[\"这时\",{\"1\":{\"417\":1,\"727\":1,\"980\":1}}],[\"这时leader们信息还没有同步\",{\"1\":{\"170\":1}}],[\"这时会返回502错误\",{\"1\":{\"123\":1}}],[\"这隐藏了\",{\"1\":{\"160\":1}}],[\"这块是比较重要一块\",{\"1\":{\"123\":1}}],[\"这样我们可以并行处理数据\",{\"1\":{\"1462\":1}}],[\"这样我们就可以在\",{\"1\":{\"1410\":1}}],[\"这样一来\",{\"1\":{\"1444\":1,\"1454\":1}}],[\"这样一次就能排除四分之三的数据\",{\"1\":{\"316\":1}}],[\"这样直接调用\",{\"1\":{\"1416\":1}}],[\"这样只有在\",{\"1\":{\"1412\":1}}],[\"这样有利于检查所依赖属性是否注入\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"这样比起原来的sqlsession提供的方法我们可以有更加灵活的选择和设置\",{\"1\":{\"1137\":1,\"1322\":1}}],[\"这样基本能满足消息的顺序性的需求\",{\"1\":{\"1119\":1,\"1307\":1}}],[\"这样该副本被认为故障\",{\"1\":{\"1035\":1,\"1239\":1}}],[\"这样至少能有两个好处\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"这样在堆中的对象的值就产生变化了\",{\"1\":{\"755\":1}}],[\"这样列表永远为n个id\",{\"1\":{\"657\":1}}],[\"这样做能小幅提升性能\",{\"1\":{\"583\":1}}],[\"这样做的理论依据是计算机科学中著名的局部性原理\",{\"1\":{\"327\":1}}],[\"这样既能保证重启时的速度\",{\"1\":{\"1158\":1,\"1338\":1}}],[\"这样既能使业务清晰\",{\"1\":{\"583\":1}}],[\"这样既降低误判发生的概率\",{\"1\":{\"392\":1}}],[\"这样表中字段长度较短且访问频率较高\",{\"1\":{\"579\":1}}],[\"这样可以大大提高服务器的并发性能\",{\"1\":{\"1478\":2}}],[\"这样可以提高数据的可用性和容错性\",{\"1\":{\"1470\":1}}],[\"这样可以提高搜索的准确性和效率\",{\"1\":{\"1470\":1}}],[\"这样可以确保具有相同路由值的文档被索引到同一个分片中\",{\"1\":{\"1470\":1}}],[\"这样可以确保我们的缓存始终保持在一个合理的大小\",{\"1\":{\"1430\":1}}],[\"这样可以一次性获取更多的消息\",{\"1\":{\"1440\":1}}],[\"这样可以一次性获取更多的数据\",{\"1\":{\"1440\":1}}],[\"这样可以减少网络传输的次数\",{\"1\":{\"1440\":1}}],[\"这样可以减少不必要的数据访问\",{\"1\":{\"567\":1}}],[\"这样可以保证\",{\"1\":{\"1420\":1}}],[\"这样可以避免在网络上频繁传输单个消息带来的延迟和带宽开销\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"这样可以避免系统表的较长时间锁定\",{\"0\":{\"606\":1}}],[\"这样可以在一个索引中完成查询\",{\"1\":{\"567\":1}}],[\"这样可以使得每个节点包含更多的键值对\",{\"1\":{\"566\":1}}],[\"这样可以比read系统调用少一次内存拷贝\",{\"1\":{\"456\":1}}],[\"这样可以最大限度防止\",{\"1\":{\"440\":1}}],[\"这样可以节省双方时间\",{\"1\":{\"203\":1}}],[\"这样从最低位排序一直到最高位排序完成以后\",{\"1\":{\"427\":1}}],[\"这样会得到n个元素的次小值\",{\"1\":{\"417\":1}}],[\"这样显然无法进行计数排序\",{\"1\":{\"414\":1}}],[\"这样就能保证高可用性了\",{\"1\":{\"1444\":1}}],[\"这样就能保证消息的顺序性\",{\"1\":{\"1442\":1}}],[\"这样就实现了\",{\"1\":{\"1190\":1,\"1365\":1}}],[\"这样就实现了一个节点只需要一次\",{\"1\":{\"319\":1}}],[\"这样就会影响集群的负载均衡\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"这样就会在满足条件的行上加上排他锁\",{\"1\":{\"641\":1}}],[\"这样就打破了死锁的闭环\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"这样就无法形成导致死锁的那个闭环\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"这样就成功的撤销了你的\",{\"1\":{\"981\":1}}],[\"这样就为配置提供了诸多灵活选择\",{\"1\":{\"829\":1}}],[\"这样就形成了\",{\"1\":{\"341\":1}}],[\"这样就不能获取到客户的ip地址了\",{\"1\":{\"123\":1}}],[\"这样逻辑上很近的节点实际可能非常远\",{\"1\":{\"319\":1}}],[\"这样\",{\"1\":{\"306\":1,\"566\":1,\"567\":1,\"621\":1,\"981\":1,\"1008\":1,\"1169\":1,\"1175\":2,\"1217\":1,\"1346\":1,\"1352\":2,\"1382\":1,\"1442\":2,\"1454\":1,\"1462\":2,\"1464\":2,\"1470\":1}}],[\"这样的动态\",{\"1\":{\"1416\":1}}],[\"这样的好处是\",{\"1\":{\"1119\":1,\"1307\":1}}],[\"这样的唤醒肯定不会阻塞\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"这样的话搜索速度真的会快很多\",{\"1\":{\"1464\":1}}],[\"这样的话\",{\"1\":{\"324\":1,\"1045\":1,\"1246\":1}}],[\"这样的分支条件\",{\"1\":{\"228\":1}}],[\"这样的系统\",{\"1\":{\"170\":1}}],[\"这样的商业产品\",{\"1\":{\"72\":1}}],[\"这样每个访客固定访问一个后端服务器\",{\"1\":{\"123\":1}}],[\"这俩个不太理解\",{\"1\":{\"123\":1}}],[\"这些指令告诉\",{\"1\":{\"1512\":1}}],[\"这些类使用了更高效的同步机制\",{\"1\":{\"1480\":1}}],[\"这些类型和它们所支持的类在java\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"这些组件共同构成了\",{\"1\":{\"1478\":1}}],[\"这些知识点确实对并发编程来说是基础中的基础\",{\"1\":{\"1476\":1}}],[\"这些知识点解释的很透彻\",{\"1\":{\"1446\":1}}],[\"这些知识对于刚入行的技术人员来说非常重要\",{\"1\":{\"1450\":1}}],[\"这些内容对我以后的学习和工作会很有帮助\",{\"1\":{\"1446\":1}}],[\"这些概念我都知道\",{\"1\":{\"1444\":1}}],[\"这些是kafka的一些缺点\",{\"1\":{\"1436\":1}}],[\"这些是我进阶jvm调优所制定的学习计划\",{\"1\":{\"1400\":1}}],[\"这些又是常见的面试重点\",{\"1\":{\"1410\":1}}],[\"这些点精彩极了\",{\"1\":{\"1410\":1}}],[\"这些方法的调用是在\",{\"1\":{\"1410\":2}}],[\"这些方法分别对应着获取锁\",{\"1\":{\"1390\":1}}],[\"这些方面搭配得当\",{\"1\":{\"1408\":1}}],[\"这些aop注解通过在方法上标记\",{\"1\":{\"1402\":1}}],[\"这些注解的作用和spring差不多\",{\"1\":{\"1402\":1}}],[\"这些注解大大简化了spring的配置\",{\"1\":{\"1402\":1}}],[\"这些参数和工具在我日常工作的jvm调优和问题排查中发挥了很大作用\",{\"1\":{\"1400\":1}}],[\"这些都是非常重要的多线程知识点\",{\"1\":{\"1446\":1}}],[\"这些都是非常有用的建议\",{\"1\":{\"1430\":1}}],[\"这些都是非常实用的技巧\",{\"1\":{\"1430\":1}}],[\"这些都是成为一名优秀工程师必不可少的素质\",{\"1\":{\"1406\":1}}],[\"这些都是我想继续学习与理解的map相关内容\",{\"1\":{\"1406\":1}}],[\"这些都是我想进一步学习与理解的list相关内容与知识点\",{\"1\":{\"1404\":1}}],[\"这些都是g1高性能与低停顿的关键\",{\"1\":{\"1398\":1}}],[\"这些都是社会发展和科技进步的关键因素\",{\"1\":{\"56\":1}}],[\"这些思想为我们设计低停顿\",{\"1\":{\"1396\":1}}],[\"这些空隙会产生空间碎片\",{\"1\":{\"1396\":1}}],[\"这些关于类的生命周期和初始化阶段的知识点对我来说均很重要\",{\"1\":{\"1392\":1}}],[\"这些设置只在类第一次被加载时执行\",{\"1\":{\"1392\":1}}],[\"这些datasource可能是不同的数据库\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"这些对象类通过封装以\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"这些对象包含了从\",{\"1\":{\"698\":1}}],[\"这些齿轮相互啮合在一起\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"这些算是java基础\",{\"1\":{\"1080\":1,\"1275\":1}}],[\"这些元素的查询效率就会从o\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"这些文档可能来自和最初搜索请求有关的一个\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"这些被\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"这些请求发现缓存过期一般都会从\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"这些测试代码不会被打包或部署\",{\"1\":{\"776\":1}}],[\"这些连接准备好被任何需要它们的线程使用\",{\"1\":{\"708\":1}}],[\"这些数据类型都支持push\",{\"1\":{\"652\":1}}],[\"这些加锁规则共同作用\",{\"1\":{\"638\":1}}],[\"这些行为确保在执行涉及外键的插入或更新操作时\",{\"1\":{\"623\":1}}],[\"这些原则都是原则上建议\",{\"1\":{\"600\":1}}],[\"这些库可以分布在不同服务器\",{\"1\":{\"583\":2}}],[\"这些库可以放在不同的存储设备上\",{\"1\":{\"579\":1}}],[\"这些树在一般情况下查询性能非常好\",{\"1\":{\"319\":1}}],[\"这些比较低的日志级别\",{\"1\":{\"223\":1}}],[\"这些新变更可能影响用户的\",{\"1\":{\"209\":1}}],[\"这些命令大学生都会\",{\"0\":{\"107\":1}}],[\"这个配置会将执行的sql打印出来\",{\"1\":{\"1507\":1}}],[\"这个系统作为用户管理\",{\"1\":{\"1502\":1}}],[\"这个字段是为了更规范而加的\",{\"1\":{\"1494\":1}}],[\"这个字段也可以被索引\",{\"1\":{\"484\":1}}],[\"这个毋庸置疑\",{\"1\":{\"1494\":1}}],[\"这个示例代码实现了一个简单的聊天室应用\",{\"1\":{\"1478\":1}}],[\"这个示例代码中\",{\"1\":{\"1386\":1}}],[\"这个底层过程非常重要\",{\"1\":{\"1470\":1}}],[\"这个查询会返回所有内容中包含\",{\"1\":{\"1456\":1}}],[\"这个查询将使用索引\",{\"1\":{\"593\":1}}],[\"这个设计真巧妙\",{\"1\":{\"1454\":1}}],[\"这个机制非常重要\",{\"1\":{\"1452\":1}}],[\"这个机制可以确保你的消息在传递过程中不会丢失\",{\"1\":{\"1452\":1}}],[\"这个机制对于我在实际工作中有什么帮助呢\",{\"1\":{\"1452\":1}}],[\"这个机制实现依赖于wait\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"这个批量发送消息的方法听起来很实用\",{\"1\":{\"1440\":1}}],[\"这个比喻很形象\",{\"1\":{\"1432\":1,\"1434\":1}}],[\"这个接口可以监听\",{\"1\":{\"1410\":2}}],[\"这个接口只有一个方法\",{\"1\":{\"1410\":1}}],[\"这个解释我喜欢\",{\"1\":{\"1392\":1}}],[\"这个专题\",{\"1\":{\"1378\":1}}],[\"这个队列才可用\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"这个队列是一个排序好的top\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"这个之前也有提过\",{\"1\":{\"1195\":1,\"1368\":1}}],[\"这个名称的由来\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"这个概念\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"这个概念叫做误算率\",{\"1\":{\"386\":1,\"392\":1}}],[\"这个需要掌握redis底层的数据结构\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"这个需要根据你系统平台的实际情况选择\",{\"1\":{\"660\":1}}],[\"这个操作会放到rollback\",{\"1\":{\"1147\":1,\"1330\":1}}],[\"这个操作有什么用\",{\"1\":{\"666\":1}}],[\"这个方法听起来很厉害\",{\"1\":{\"1440\":1}}],[\"这个方法听起来很简单有效\",{\"1\":{\"1440\":1}}],[\"这个方法可以传递\",{\"1\":{\"1424\":1}}],[\"这个方法可以传递任何类型的box进来\",{\"1\":{\"1424\":1}}],[\"这个方法就是最终方法\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"这个方案的问题很明显\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"这个参数有三个值\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"这个参数用来指定分区中有多少个副本收到这条消息\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"这个阶段的停顿时间通常会比初始标记阶段稍长一些\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"这个阶段的主要任务仅仅只是标记出\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"这个可能不是要考察的点\",{\"1\":{\"1064\":1,\"1262\":1}}],[\"这个可以玩儿很多的花样\",{\"1\":{\"720\":1}}],[\"这个可以根据你的系统分页大小来设置\",{\"1\":{\"123\":2}}],[\"这个newinstance方法调用无参的构造函数创建对象\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"这个query会被广播到索引里面的每一个shard\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"这个从\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"这个大家应该不陌生\",{\"1\":{\"990\":1}}],[\"这个为默认参数\",{\"1\":{\"981\":1}}],[\"这个时候需要红黑树来保证性能\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"这个时候线程a就会抛出并发修改异常\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"这个时候\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"这个时候就需要\",{\"1\":{\"990\":1}}],[\"这个时候有两种命令可选\",{\"1\":{\"979\":1}}],[\"这个时候进行bug修复提交\",{\"1\":{\"979\":1}}],[\"这个时候还没有修改完\",{\"1\":{\"979\":1}}],[\"这个时间可以用于计算对象的\",{\"1\":{\"699\":1}}],[\"这个教程必要做到保姆级\",{\"1\":{\"969\":1}}],[\"这个app\",{\"1\":{\"913\":1}}],[\"这个其实可选\",{\"1\":{\"890\":1}}],[\"这个例子中的\",{\"1\":{\"829\":1}}],[\"这个的clean是clean生命周期的一个阶段\",{\"1\":{\"775\":1}}],[\"这个统一的位置\",{\"1\":{\"768\":1}}],[\"这个代码有很明显的问题\",{\"1\":{\"727\":1}}],[\"这个邮件服务是一个死循环\",{\"1\":{\"727\":1}}],[\"这个对象里的某个字段值\",{\"1\":{\"717\":1}}],[\"这个对象不可以在嵌套其他对象\",{\"1\":{\"717\":1}}],[\"这个数组以有序\",{\"1\":{\"693\":1}}],[\"这个结构带有表头节点指针\",{\"1\":{\"685\":1}}],[\"这个不能和专业的消息中间件相比\",{\"1\":{\"657\":1}}],[\"这个表展示了哪些事务被锁定\",{\"1\":{\"643\":1}}],[\"这个要根据业务场景来选择锁\",{\"1\":{\"636\":1}}],[\"这个\",{\"0\":{\"1132\":1,\"1317\":1},\"1\":{\"634\":1,\"1006\":1,\"1189\":1,\"1215\":1,\"1364\":1,\"1418\":1}}],[\"这个在项目中使用频率较高\",{\"1\":{\"773\":1}}],[\"这个在上面的例子中有提到过\",{\"1\":{\"634\":1}}],[\"这个在评论中会再出一篇参考文章\",{\"1\":{\"440\":1}}],[\"这个命令会创建一个包含所有依赖项的\",{\"1\":{\"1523\":1}}],[\"这个命令会读取当前目录下的dockerfile\",{\"1\":{\"1515\":1}}],[\"这个命令只在键\",{\"1\":{\"1418\":1}}],[\"这个命令用于设置\",{\"1\":{\"1418\":1}}],[\"这个命令有什么作用\",{\"1\":{\"1418\":1}}],[\"这个命令的作用是给指定的\",{\"1\":{\"1418\":1}}],[\"这个命令也会尝试优化表\",{\"1\":{\"574\":1}}],[\"这个命令很有用\",{\"1\":{\"108\":1}}],[\"这个玩法从诞生起就很适合传播\",{\"1\":{\"536\":1}}],[\"这个属性用于将当前字段拷贝到指定字段\",{\"1\":{\"489\":1}}],[\"这个属性现在使用很少\",{\"1\":{\"488\":1}}],[\"这个文件定义了docker镜像的构建步骤\",{\"1\":{\"1514\":1}}],[\"这个文件即被称之为倒排文件\",{\"1\":{\"477\":1}}],[\"这个文档可以被索引进\",{\"1\":{\"484\":1}}],[\"这个文档包含一个字段\",{\"1\":{\"484\":1}}],[\"这个信息在搜索结果排序计算中是非常重要的一个因子\",{\"1\":{\"478\":1}}],[\"这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数\",{\"1\":{\"441\":1}}],[\"这个漏洞曾被用于寻找梅丽莎病毒的制作者位置\",{\"1\":{\"438\":1}}],[\"这个就是布隆过滤器的特点\",{\"1\":{\"387\":1}}],[\"这个过程是自动的\",{\"1\":{\"1466\":1}}],[\"这个过程可能会导致一些数据迁移的延迟\",{\"1\":{\"1426\":1}}],[\"这个过程就是准备阶段\",{\"1\":{\"1392\":1}}],[\"这个过程就称为回表查询\",{\"1\":{\"567\":1}}],[\"这个过程耗时较长但是不需要停顿用户线程\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"这个过程耗费的时间叫做旋转时间\",{\"1\":{\"327\":1}}],[\"这个过程称为擦除\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"这个过程叫做\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"这个过程叫做寻道\",{\"1\":{\"327\":1}}],[\"这个很好理解\",{\"1\":{\"323\":1}}],[\"这个问题给一个官方答案\",{\"1\":{\"1157\":1,\"1337\":1}}],[\"这个问题主要是对比jdbc来看\",{\"1\":{\"1129\":1,\"1314\":1}}],[\"这个问题设计的点比较多\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"这个问题要先了解上一个问题的概念\",{\"1\":{\"1118\":1,\"1306\":1}}],[\"这个问题单独一篇\",{\"1\":{\"1108\":1}}],[\"这个问题大概率会引出以下问题\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"这个问题不仅展示了数学的逻辑性和精确性\",{\"1\":{\"307\":1}}],[\"这个问题源自于一个数学谜题\",{\"1\":{\"304\":1}}],[\"这个账号的定位是写软文\",{\"1\":{\"270\":1}}],[\"这个播放量对当时的我来说非常珍贵\",{\"1\":{\"264\":1}}],[\"这个公式在金融领域只会被多倍的放大\",{\"1\":{\"263\":1}}],[\"这个领域玩法五花八门\",{\"1\":{\"263\":1}}],[\"这个价格很低\",{\"1\":{\"250\":1}}],[\"这个端口就是客户端连接zookeeper服务器的端口\",{\"1\":{\"174\":1}}],[\"这个必须要根据提示要求进行设置\",{\"1\":{\"162\":1}}],[\"这个项目最早由fabrice\",{\"1\":{\"139\":1}}],[\"这个是扫描所有jar包类路径下\",{\"1\":{\"1185\":1,\"1360\":1}}],[\"这个是开发时自定义的\",{\"1\":{\"907\":1}}],[\"这个是大多数系统的通病\",{\"1\":{\"603\":1}}],[\"这个是大家比较常用的\",{\"1\":{\"195\":1}}],[\"这个是完全有帐可算\",{\"1\":{\"263\":1}}],[\"这个是不常用的\",{\"1\":{\"153\":1}}],[\"这个是较长使用的配置\",{\"1\":{\"123\":1}}],[\"这个是指多长时间检查一次缓存的有效信息\",{\"1\":{\"123\":1}}],[\"这个指令指定是否在搜索一个文件时记录cache错误\",{\"1\":{\"123\":1}}],[\"这个指令指定了在open\",{\"1\":{\"123\":1}}],[\"这个指令指定了何时需要检查open\",{\"1\":{\"123\":1}}],[\"这个指令是指当一个nginx进程打开的最多文件描述符数目\",{\"1\":{\"123\":1}}],[\"这个将为打开文件指定缓存\",{\"1\":{\"123\":1}}],[\"这个工具可以方便的在本地调试预览网站\",{\"1\":{\"972\":1}}],[\"这个工具\",{\"1\":{\"98\":1}}],[\"这个网站作为一个用爱发电的编程学习网站\",{\"1\":{\"98\":1}}],[\"这离了大谱\",{\"1\":{\"98\":1}}],[\"这是为了定一个统一的规范\",{\"1\":{\"1494\":1}}],[\"这是学以致用的好例子\",{\"1\":{\"1476\":1}}],[\"这是kafka的源码示例\",{\"1\":{\"1450\":1}}],[\"这是kafka\",{\"1\":{\"1444\":1}}],[\"这是两者的主要区别\",{\"1\":{\"1424\":1}}],[\"这是java集合的基础\",{\"1\":{\"1404\":1}}],[\"这是它的重要创新点\",{\"1\":{\"1398\":1}}],[\"这是它的核心优雅与高效之处\",{\"1\":{\"1380\":1}}],[\"这是通过哈希算法实现的\",{\"1\":{\"1380\":1}}],[\"这是通俗易懂的\",{\"1\":{\"720\":1}}],[\"这是个好问题\",{\"1\":{\"1442\":1}}],[\"这是个不错的入门\",{\"1\":{\"1400\":1}}],[\"这是个\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"这是协同工作的基础\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"这是乐观锁最常用的一种实现方式\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"这是hashmap的作者根据概率论的知识得到的\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"这是你一定会被问\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"这是我们就需要重写\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"这是我们可以通过显式mapping的方式来解决\",{\"1\":{\"491\":1}}],[\"这是在\",{\"1\":{\"1017\":1,\"1223\":1}}],[\"这是maven相当强大的功能\",{\"1\":{\"777\":1}}],[\"这是maven很重要的一个规则\",{\"1\":{\"775\":1}}],[\"这是后这个锁就永久无法释放了\",{\"1\":{\"727\":1}}],[\"这是\",{\"1\":{\"654\":1,\"1410\":1,\"1418\":1}}],[\"这是一次非常有价值的交流\",{\"1\":{\"1380\":1}}],[\"这是一道涉猎很广泛的题目\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"这是一套科学的约定\",{\"1\":{\"765\":1}}],[\"这是一篇文档型文章\",{\"1\":{\"761\":1}}],[\"这是一些redis介绍\",{\"1\":{\"652\":1}}],[\"这是一个很大的话题\",{\"1\":{\"1502\":1}}],[\"这是一个很好的观点\",{\"1\":{\"1430\":1}}],[\"这是一个很好的问题\",{\"1\":{\"1426\":1}}],[\"这是一个简单的python代码示例\",{\"1\":{\"1428\":1}}],[\"这是一个基础问题\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"这是一个基本概念的题目\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"这是一个具有rfc标准的uuid\",{\"1\":{\"438\":1}}],[\"这是一个档案主页的案例\",{\"1\":{\"8\":1}}],[\"这是sql\",{\"1\":{\"605\":1}}],[\"这是因为hashmap采用开放定址法来解决冲突\",{\"1\":{\"1380\":1}}],[\"这是因为\",{\"1\":{\"1176\":1,\"1353\":1,\"1380\":1,\"1396\":1}}],[\"这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符\",{\"1\":{\"601\":1}}],[\"这是因为以\",{\"1\":{\"564\":1}}],[\"这是因为nginx调度时分配请求到进程并不是那么的均衡\",{\"1\":{\"123\":1}}],[\"这是目前使用较多分布式id解决方案\",{\"1\":{\"439\":1}}],[\"这是只是其中一个业务\",{\"1\":{\"263\":1}}],[\"这是就要考验我的接口是否规范化\",{\"1\":{\"203\":1}}],[\"这是对我最大的鼓励\",{\"1\":{\"53\":1}}],[\"标识共有7条消息\",{\"1\":{\"1118\":1,\"1306\":1}}],[\"标准误差为\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"标准化的\",{\"1\":{\"762\":1}}],[\"标记字会被清除\",{\"1\":{\"1480\":1}}],[\"标记一个切面\",{\"1\":{\"1402\":1}}],[\"标记dao\",{\"1\":{\"1402\":1}}],[\"标记这个控制器直接返回json或xml数据\",{\"1\":{\"1402\":1}}],[\"标记这个类是配置类\",{\"1\":{\"1402\":1}}],[\"标记这个类是springboot的主配置类\",{\"1\":{\"1402\":1}}],[\"标记配置类\",{\"1\":{\"1402\":1}}],[\"标记数据访问组件\",{\"1\":{\"1402\":1}}],[\"标记控制层组件\",{\"1\":{\"1402\":1}}],[\"标记业务层组件\",{\"1\":{\"1402\":1}}],[\"标记和清除过程需要占用cpu资源\",{\"1\":{\"1396\":1}}],[\"标记gc\",{\"1\":{\"1394\":1,\"1398\":1}}],[\"标记无用对象\",{\"1\":{\"1103\":1,\"1294\":1}}],[\"标记有用对象\",{\"1\":{\"1103\":1,\"1294\":1}}],[\"标记\",{\"1\":{\"1049\":1,\"1101\":2,\"1103\":2,\"1250\":1,\"1292\":2,\"1294\":2,\"1394\":1,\"1398\":7}}],[\"标记的sql语句中的\",{\"1\":{\"864\":1}}],[\"标记方法\",{\"1\":{\"752\":1}}],[\"标签实现了动态条件查询\",{\"1\":{\"1416\":1}}],[\"标签中添加\",{\"1\":{\"1133\":1,\"1318\":1}}],[\"标签内部\",{\"1\":{\"839\":1,\"840\":1,\"841\":1}}],[\"标签包裹的部分的前面或者后面添加内容\",{\"1\":{\"787\":1}}],[\"标签为\",{\"1\":{\"42\":1,\"1515\":1}}],[\"标题\",{\"1\":{\"203\":1}}],[\"标题会被视为页面标题\",{\"1\":{\"41\":1}}],[\"标题和页面信息\",{\"1\":{\"21\":1}}],[\"日常工作用的最多哪些jvm参数和监控工具\",{\"1\":{\"1400\":1}}],[\"日常业务中\",{\"1\":{\"1000\":1,\"1209\":1}}],[\"日期类型\",{\"0\":{\"498\":1},\"1\":{\"495\":1}}],[\"日期\",{\"1\":{\"210\":1}}],[\"日志记录等\",{\"1\":{\"1090\":1,\"1174\":1,\"1283\":1,\"1351\":1}}],[\"日志\",{\"0\":{\"813\":1,\"884\":1},\"1\":{\"447\":1,\"852\":2,\"853\":1,\"875\":1},\"2\":{\"230\":1,\"231\":1}}],[\"日志一定要携带业务信息相关内容\",{\"1\":{\"229\":1}}],[\"日志链路\",{\"0\":{\"229\":1}}],[\"日志尽量使用英文\",{\"0\":{\"227\":1}}],[\"日志级别\",{\"1\":{\"226\":1}}],[\"日志是我们定位问题的得力助手\",{\"1\":{\"218\":1}}],[\"日志打印的11条建议\",{\"0\":{\"217\":1},\"1\":{\"217\":1}}],[\"日志存放的位置\",{\"1\":{\"174\":1}}],[\"日志格式设定\",{\"1\":{\"123\":1}}],[\"日志位置和日志级别\",{\"1\":{\"123\":1}}],[\"日\",{\"1\":{\"42\":1}}],[\"月份打卡次数\",{\"1\":{\"721\":1}}],[\"月\",{\"1\":{\"42\":1,\"721\":1}}],[\"的名称或者包含额外的资源\",{\"1\":{\"1525\":1}}],[\"的应用场景非常广泛\",{\"1\":{\"1478\":1}}],[\"的应用场景吗\",{\"1\":{\"1478\":1}}],[\"的应用程序更高效\",{\"1\":{\"1408\":1}}],[\"的特点主要有以下几点\",{\"1\":{\"1478\":1}}],[\"的特点吗\",{\"1\":{\"1478\":1}}],[\"的了解\",{\"1\":{\"1478\":1}}],[\"的了解非常深入\",{\"1\":{\"1386\":1}}],[\"的运用\",{\"1\":{\"1476\":1}}],[\"的运行环境等信息\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"的用处是什么\",{\"1\":{\"1476\":1}}],[\"的用户\",{\"1\":{\"848\":2}}],[\"的用户在\",{\"1\":{\"721\":1}}],[\"的用户中心信息时\",{\"1\":{\"205\":1}}],[\"的原子指令\",{\"1\":{\"1476\":1}}],[\"的原理其实很简单\",{\"1\":{\"1386\":1}}],[\"的原理是什么\",{\"1\":{\"1386\":1}}],[\"的反射机制和动态生成字节码技术\",{\"1\":{\"1474\":1}}],[\"的索引\",{\"1\":{\"1456\":1}}],[\"的索引值\",{\"1\":{\"316\":1}}],[\"的机制\",{\"1\":{\"1454\":1}}],[\"的机制来保证高可用性\",{\"1\":{\"1426\":1}}],[\"的机制来保证数据的可靠性的\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"的机制来确定键值对应的分片\",{\"1\":{\"1426\":1}}],[\"的线程安全问题\",{\"1\":{\"1446\":1}}],[\"的线程安全版\",{\"1\":{\"1380\":1}}],[\"的远程用户吞吐量\",{\"1\":{\"1440\":1}}],[\"的概念\",{\"1\":{\"1438\":1}}],[\"的概念是一个常见的混淆源\",{\"1\":{\"589\":1}}],[\"的子类型不包括\",{\"1\":{\"1424\":1}}],[\"的子类\",{\"1\":{\"1424\":1}}],[\"的主要区别在于\",{\"1\":{\"1446\":1}}],[\"的主从架构以及同步原理\",{\"1\":{\"1422\":1}}],[\"的主分片目前被分配在\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"的简写\",{\"1\":{\"1418\":1}}],[\"的简单字符串到一个\",{\"1\":{\"665\":1}}],[\"的插件机制也很强大\",{\"1\":{\"1416\":1}}],[\"的动态\",{\"1\":{\"1416\":1}}],[\"的工厂\",{\"1\":{\"1416\":1}}],[\"的工作原理很简单\",{\"1\":{\"1420\":1}}],[\"的工作原理如下\",{\"1\":{\"1416\":1}}],[\"的工作原理能说一下吗\",{\"1\":{\"1416\":1}}],[\"的工作原理有了更深的理解\",{\"1\":{\"1414\":1}}],[\"的工作原理是\",{\"1\":{\"1414\":1}}],[\"的工作原理吗\",{\"1\":{\"1414\":1}}],[\"的工作原理主要是\",{\"1\":{\"1408\":1}}],[\"的目的\",{\"1\":{\"1416\":1}}],[\"的执行结果映射成\",{\"1\":{\"1416\":1}}],[\"的执行\",{\"1\":{\"1414\":1}}],[\"的适配器\",{\"1\":{\"1414\":1}}],[\"的类和接口还挺了解的嘛\",{\"1\":{\"1414\":1}}],[\"的类型\",{\"1\":{\"693\":1}}],[\"的提问\",{\"1\":{\"1412\":1}}],[\"的唯一性\",{\"1\":{\"1412\":1}}],[\"的单例性\",{\"1\":{\"1412\":1}}],[\"的代理对象\",{\"1\":{\"1412\":2}}],[\"的代码\",{\"1\":{\"405\":1}}],[\"的构造器又注入\",{\"1\":{\"1412\":1}}],[\"的构造器注入\",{\"1\":{\"1412\":1}}],[\"的构造方法\",{\"1\":{\"1384\":1}}],[\"的循环依赖有哪些场景\",{\"1\":{\"1412\":1}}],[\"的具体应用\",{\"1\":{\"1410\":1}}],[\"的加载时机\",{\"1\":{\"1410\":1}}],[\"的加载\",{\"1\":{\"1410\":1}}],[\"的初始化也会延迟到\",{\"1\":{\"1410\":1}}],[\"的初始化依赖\",{\"1\":{\"1410\":1}}],[\"的初始化前后\",{\"1\":{\"1410\":1}}],[\"的初始化和销毁方法\",{\"1\":{\"1410\":1}}],[\"的初始化过程很清楚\",{\"1\":{\"1410\":1}}],[\"的实例化及生命周期管理\",{\"1\":{\"1408\":1}}],[\"的实现使用分段锁\",{\"1\":{\"1380\":1}}],[\"的实现依赖于\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"的实现原理是基于一个双向链表和一个\",{\"1\":{\"1390\":1}}],[\"的实现原理吗\",{\"1\":{\"1390\":2}}],[\"的实现原理\",{\"0\":{\"1073\":1,\"1268\":1}}],[\"的实现算法\",{\"1\":{\"1041\":1,\"1242\":1}}],[\"的实现类\",{\"1\":{\"890\":1}}],[\"的实现类中对sqlsession的使用方式很类似\",{\"1\":{\"824\":1}}],[\"的源码中\",{\"1\":{\"1408\":1}}],[\"的源码实现\",{\"1\":{\"1386\":1}}],[\"的事件机制\",{\"1\":{\"1408\":1}}],[\"的依赖关系\",{\"1\":{\"1408\":1}}],[\"的能力\",{\"1\":{\"1408\":1}}],[\"的确\",{\"1\":{\"1406\":1}}],[\"的region\",{\"1\":{\"1398\":1}}],[\"的分段\",{\"1\":{\"1398\":1}}],[\"的分析和可视化平台一起开发的\",{\"1\":{\"453\":1}}],[\"的核心组件包括缓冲区\",{\"1\":{\"1478\":1}}],[\"的核心组件吗\",{\"1\":{\"1478\":1}}],[\"的核心组件主要有\",{\"1\":{\"1416\":1}}],[\"的核心\",{\"1\":{\"1414\":1}}],[\"的核心目标就是达到并发收集\",{\"1\":{\"1396\":1}}],[\"的核心数据结构就是一个\",{\"1\":{\"1380\":1}}],[\"的设计思想\",{\"1\":{\"1392\":1}}],[\"的设置有哪些优化方法\",{\"0\":{\"1030\":1,\"1234\":1}}],[\"的设置坐下介绍\",{\"1\":{\"482\":1}}],[\"的示例代码\",{\"1\":{\"1390\":2}}],[\"的缺点是它可能会导致内存泄漏问题\",{\"1\":{\"1386\":1}}],[\"的使用者可以零配置使用\",{\"1\":{\"1408\":1}}],[\"的使用也可能会导致上下文切换的开销增加\",{\"1\":{\"1386\":1}}],[\"的使用方法非常简单\",{\"1\":{\"1386\":2}}],[\"的使用方法\",{\"1\":{\"1386\":1}}],[\"的使用目前存在很大的混淆\",{\"1\":{\"755\":1}}],[\"的编译器会对代码进行优化\",{\"1\":{\"1382\":1}}],[\"的内容我们就先讲到这里\",{\"1\":{\"1416\":1}}],[\"的内容对你有所帮助\",{\"1\":{\"53\":1}}],[\"的内存模型规定了共享变量的访问方式\",{\"1\":{\"1382\":1}}],[\"的这些缺点\",{\"1\":{\"1380\":1}}],[\"的并发度更高\",{\"1\":{\"1380\":1}}],[\"的集中式管理和数据的动态更新\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"的集群架构\",{\"0\":{\"1025\":1,\"1229\":1}}],[\"的典型应用场景\",{\"0\":{\"1201\":1,\"1374\":1}}],[\"的报错\",{\"1\":{\"1195\":1,\"1368\":1}}],[\"的同步操作对开发人员而言是透明的\",{\"1\":{\"1190\":1,\"1365\":1}}],[\"的同学都会用到的三件套\",{\"1\":{\"1506\":1}}],[\"的同学都会用\",{\"1\":{\"907\":1}}],[\"的同学\",{\"1\":{\"715\":1}}],[\"的启动\",{\"1\":{\"1187\":1,\"1362\":1}}],[\"的配置\",{\"1\":{\"1182\":1,\"1357\":1}}],[\"的配置一般连续或相近\",{\"1\":{\"440\":1}}],[\"的情况下\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"的情况更加是几乎不可能的事\",{\"1\":{\"440\":1}}],[\"的历史难题\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"的生命周期控制就会很得心应手了\",{\"1\":{\"1410\":1}}],[\"的生命周期产生怎样的影响\",{\"1\":{\"1410\":1}}],[\"的生命周期可以分为\",{\"1\":{\"1410\":1}}],[\"的生命周期至此结束\",{\"1\":{\"1408\":1}}],[\"的生命周期\",{\"0\":{\"1171\":1,\"1348\":1},\"1\":{\"1171\":1,\"1348\":1,\"1410\":3}}],[\"的由来\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"的认为拿锁多半是会成功的\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"的认为获取锁是非常有可能失败的\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"的环境等配置信息构建会话工厂\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"的功能\",{\"1\":{\"1134\":2,\"1319\":2}}],[\"的功能更加丰富\",{\"1\":{\"1002\":1,\"1211\":1}}],[\"的恢复将会增加约\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"的元数据信息用于初始化数据\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"的元素加\",{\"1\":{\"412\":2}}],[\"的增多\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"的可靠性是怎么保证的\",{\"0\":{\"1120\":1,\"1308\":1}}],[\"的消息是有序的\",{\"1\":{\"1119\":1,\"1307\":1}}],[\"的消息内容是不相同的\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"的进度时\",{\"1\":{\"1117\":1,\"1305\":1}}],[\"的每个分区都有若干个副本\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"的每秒请求数\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"的架构是怎么样的\",{\"0\":{\"1116\":1,\"1304\":1}}],[\"的直接关联对象开始遍历整个对象图的过程\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"的作用域\",{\"1\":{\"1410\":1}}],[\"的作用域有\",{\"1\":{\"1410\":1}}],[\"的作用域都有哪些\",{\"1\":{\"1410\":1}}],[\"的作用域之间有什么区别\",{\"0\":{\"1172\":1,\"1349\":1}}],[\"的作用\",{\"0\":{\"1100\":1,\"1291\":1},\"1\":{\"1169\":1,\"1346\":1}}],[\"的组件\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"的拦截器与\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"的新实例时\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"的全称是\",{\"1\":{\"1420\":1}}],[\"的全称叫\",{\"1\":{\"475\":1}}],[\"的全局配置文件\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"的全过程\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"的查询效率\",{\"1\":{\"1074\":1,\"1269\":1}}],[\"的做法是用链表和红黑树存储相同\",{\"1\":{\"1073\":1,\"1268\":1}}],[\"的要高\",{\"1\":{\"1072\":1,\"1267\":1}}],[\"的键和值都允许有\",{\"1\":{\"1072\":1,\"1267\":1}}],[\"的角色\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"的著名算法\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"的方法\",{\"1\":{\"1174\":1,\"1351\":1,\"1416\":2,\"1468\":1}}],[\"的方法区内\",{\"1\":{\"1100\":1,\"1291\":1}}],[\"的方法可以调用lockobj\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"的方式与\",{\"1\":{\"428\":1}}],[\"的公共汽车上\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"的必要性\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"的对象\",{\"1\":{\"1041\":1,\"1174\":1,\"1242\":1,\"1351\":1}}],[\"的对象系统带有引用计数实现的\",{\"1\":{\"699\":1}}],[\"的保留关键字\",{\"1\":{\"1041\":1,\"1242\":1}}],[\"的聚合如何实现\",{\"0\":{\"1034\":1,\"1238\":1}}],[\"的被删除\",{\"1\":{\"1033\":1,\"1237\":1}}],[\"的本地有序优先队列中\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"的空优先队列\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"的空间大小\",{\"1\":{\"722\":1}}],[\"的选主是\",{\"1\":{\"1027\":1,\"1231\":1}}],[\"的倒排索引是什么\",{\"0\":{\"1026\":1,\"1230\":1}}],[\"的缓存机制和插件机制能说一下吗\",{\"1\":{\"1416\":1}}],[\"的缓存淘汰策略就是很好的实践方式\",{\"1\":{\"1009\":1,\"1218\":1}}],[\"的缓冲区数目和大小\",{\"1\":{\"123\":1}}],[\"的操作\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"的过程\",{\"1\":{\"1174\":1,\"1351\":1,\"1424\":1}}],[\"的过程就叫做\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"的过期时间\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"的过滤语句\",{\"1\":{\"158\":1}}],[\"的性能要比\",{\"1\":{\"1002\":1,\"1211\":1}}],[\"的读取压力\",{\"1\":{\"1000\":1,\"1209\":1}}],[\"的读写性能好很多\",{\"1\":{\"1000\":1,\"1209\":1}}],[\"的热点数据\",{\"1\":{\"1000\":1,\"1209\":1}}],[\"的介质中\",{\"1\":{\"999\":1,\"1208\":1}}],[\"的介质的数据保存在读写速度\",{\"1\":{\"999\":1,\"1208\":1}}],[\"的请求处理流程\",{\"1\":{\"1414\":1}}],[\"的请求处理流程示意图\",{\"1\":{\"1414\":1}}],[\"的请求处理流程你能画一个示意图来表示一下吗\",{\"1\":{\"1414\":1}}],[\"的请求\",{\"1\":{\"990\":1}}],[\"的异步还是基于多路复用的\",{\"1\":{\"988\":1}}],[\"的重要性\",{\"1\":{\"969\":1}}],[\"的镜像\",{\"1\":{\"917\":1}}],[\"的基础架构\",{\"1\":{\"1478\":1}}],[\"的基础配置\",{\"1\":{\"885\":1}}],[\"的基本命令\",{\"1\":{\"1418\":1}}],[\"的基数估算\",{\"1\":{\"722\":1}}],[\"的基数排序适用于位数小的数列\",{\"1\":{\"428\":1}}],[\"的解决方案\",{\"0\":{\"862\":1}}],[\"的二级缓存也会多一步序列化和反序列化\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"的二级缓存的作用域是一个mapper的namespace\",{\"1\":{\"853\":1}}],[\"的二进制类型\",{\"1\":{\"495\":1}}],[\"的几个属性说明\",{\"1\":{\"839\":1,\"841\":1}}],[\"的仓库目录\",{\"1\":{\"768\":1}}],[\"的文件\",{\"1\":{\"1514\":1}}],[\"的文章\",{\"1\":{\"755\":1}}],[\"的文档\",{\"1\":{\"504\":1,\"1456\":1}}],[\"的优点是轻量\",{\"1\":{\"1420\":1}}],[\"的优点是可以重复使用\",{\"1\":{\"1390\":1}}],[\"的优点是实现简单\",{\"1\":{\"1390\":1}}],[\"的优点是它可以让每个线程都拥有自己的变量副本\",{\"1\":{\"1386\":1}}],[\"的优缺点吗\",{\"1\":{\"1390\":1}}],[\"的优缺点是什么\",{\"1\":{\"1386\":1}}],[\"的优势\",{\"1\":{\"721\":1}}],[\"的优劣起了决定性作用\",{\"1\":{\"389\":1}}],[\"的底层\",{\"1\":{\"1480\":1}}],[\"的底层原理之一\",{\"1\":{\"1410\":1}}],[\"的底层实现也是基于\",{\"1\":{\"1390\":1}}],[\"的底层实现是基于\",{\"1\":{\"1390\":1}}],[\"的底层实现原理吗\",{\"1\":{\"1390\":1}}],[\"的底层实现之一\",{\"1\":{\"693\":1}}],[\"的底层数据结构用的是\",{\"1\":{\"721\":1}}],[\"的微博\",{\"1\":{\"719\":1}}],[\"的结合\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"的结果文档深分页\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"的结构\",{\"1\":{\"717\":1}}],[\"的结点与满二叉树中编号为i的结点在二叉树中的位置相同\",{\"1\":{\"417\":1}}],[\"的属性\",{\"1\":{\"695\":1,\"1410\":1}}],[\"的字段\",{\"1\":{\"1468\":1}}],[\"的字符串对象\",{\"1\":{\"699\":1}}],[\"的字符串对象时\",{\"1\":{\"698\":1}}],[\"的字符串对象作为值对象\",{\"1\":{\"698\":2}}],[\"的字符串大小作为元素的大小\",{\"1\":{\"695\":1}}],[\"的字典使用哈希表作为底层实现\",{\"1\":{\"687\":1}}],[\"的跳跃表实现由\",{\"1\":{\"692\":1}}],[\"的跳跃表由\",{\"1\":{\"691\":1}}],[\"的详细步骤\",{\"1\":{\"688\":1}}],[\"的哈希表使用链地址法\",{\"1\":{\"687\":1}}],[\"的链表可以用于保存各种不同类型的值\",{\"1\":{\"685\":1}}],[\"的链表实现是无环链表\",{\"1\":{\"685\":1}}],[\"的链表实现是双端链表\",{\"1\":{\"685\":1}}],[\"的各种功能\",{\"1\":{\"685\":1,\"689\":1}}],[\"的默认字符串表示\",{\"1\":{\"682\":1}}],[\"的默认行为是\",{\"1\":{\"493\":1}}],[\"的抽象类型\",{\"1\":{\"682\":1}}],[\"的讲解\",{\"1\":{\"676\":1}}],[\"的一些配置参数来提高吞吐量\",{\"1\":{\"1440\":1}}],[\"的一些高级用法\",{\"1\":{\"671\":1}}],[\"的一部分\",{\"1\":{\"1414\":1}}],[\"的一套指令集规范\",{\"1\":{\"1100\":1,\"1291\":1}}],[\"的一致性文件系统\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"的一致性\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"的一致性问题\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"的一致性如何保证\",{\"0\":{\"1007\":1,\"1216\":1},\"1\":{\"1003\":1,\"1212\":1}}],[\"的一种\",{\"1\":{\"1478\":1}}],[\"的一种方式\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"的一种具体存储形式\",{\"1\":{\"477\":1}}],[\"的一种归纳结果\",{\"1\":{\"401\":1}}],[\"的成员变量进行赋值\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"的成员变量\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"的成员\",{\"1\":{\"669\":1}}],[\"的值为\",{\"1\":{\"1418\":1}}],[\"的值加入到容器中\",{\"1\":{\"1185\":1,\"1360\":1}}],[\"的值\",{\"1\":{\"1132\":1,\"1317\":1}}],[\"的值等于事务中第一条消息的位置\",{\"1\":{\"1114\":1,\"1302\":1}}],[\"的值同样\",{\"1\":{\"755\":1}}],[\"的值设为\",{\"1\":{\"668\":1}}],[\"的值保持一致\",{\"1\":{\"123\":1}}],[\"的所有提交\",{\"1\":{\"980\":1}}],[\"的所有整数值\",{\"1\":{\"698\":1}}],[\"的所有键值对都会被\",{\"1\":{\"688\":1}}],[\"的所有字段和值\",{\"1\":{\"668\":1}}],[\"的所有操作都是原子性的\",{\"1\":{\"656\":1}}],[\"的映射表\",{\"1\":{\"668\":1}}],[\"的绝对值\",{\"1\":{\"667\":1}}],[\"的setnx功能来编写分布式的锁\",{\"1\":{\"657\":1}}],[\"的官网地址\",{\"1\":{\"652\":1}}],[\"的出现\",{\"1\":{\"652\":1}}],[\"的开发由pivotal赞助\",{\"1\":{\"652\":1}}],[\"的入门\",{\"1\":{\"650\":1}}],[\"的隔离级别下加锁规则\",{\"0\":{\"638\":1}}],[\"的某个表加锁\",{\"0\":{\"635\":1}}],[\"的行会被锁定\",{\"1\":{\"634\":1}}],[\"的行将被加上排他锁\",{\"1\":{\"634\":1}}],[\"的锁\",{\"1\":{\"624\":1}}],[\"的系统中\",{\"1\":{\"621\":1}}],[\"的关键性技术之一\",{\"1\":{\"616\":1}}],[\"的关联丢失了\",{\"1\":{\"504\":1}}],[\"的例程通常要比使用游标执行的速度快\",{\"1\":{\"609\":1}}],[\"的效率\",{\"0\":{\"600\":2}}],[\"的效率会比较好\",{\"1\":{\"428\":1}}],[\"的版本\",{\"1\":{\"590\":1,\"900\":1}}],[\"的版税\",{\"1\":{\"72\":1}}],[\"的个别引擎中是支持的\",{\"1\":{\"589\":1}}],[\"的个数比\",{\"1\":{\"395\":1}}],[\"的列表\",{\"1\":{\"1440\":1}}],[\"的列\",{\"1\":{\"573\":1}}],[\"的时间复杂度\",{\"1\":{\"1380\":2}}],[\"的时间复杂度为线性\",{\"1\":{\"566\":1}}],[\"的时钟周\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"的时候就是把\",{\"1\":{\"1131\":1,\"1316\":1}}],[\"的时候会将sql中的\",{\"1\":{\"1131\":1,\"1316\":1}}],[\"的时候\",{\"1\":{\"776\":1,\"822\":1,\"852\":1,\"1134\":2,\"1319\":2}}],[\"的时候都强制它去主内存中取值呢\",{\"1\":{\"755\":1}}],[\"的时候拿到的仍然是\",{\"1\":{\"755\":1}}],[\"的时候才能够派上用场\",{\"1\":{\"478\":1}}],[\"的时候其效率反而不如基于比较的排序\",{\"1\":{\"410\":1}}],[\"的多列索引\",{\"1\":{\"564\":1}}],[\"的父文档\",{\"1\":{\"510\":1}}],[\"的父类\",{\"1\":{\"510\":1}}],[\"的差值\",{\"1\":{\"498\":1}}],[\"的格式\",{\"1\":{\"492\":1}}],[\"的指针\",{\"1\":{\"477\":1,\"682\":1,\"691\":1}}],[\"的数量和消息的批处理大小\",{\"1\":{\"1438\":1}}],[\"的数量来提高kafka的吞吐量\",{\"1\":{\"1438\":1}}],[\"的数据日志文件目录中\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"的数据类型\",{\"1\":{\"1041\":1,\"1242\":1}}],[\"的数据可能会丢失\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"的数据\",{\"1\":{\"1006\":1,\"1007\":2,\"1215\":1,\"1216\":2}}],[\"的数据收集和日志解析引擎以及名为\",{\"1\":{\"453\":1}}],[\"的数组\",{\"1\":{\"341\":1}}],[\"的复杂性\",{\"1\":{\"453\":1}}],[\"的复杂度\",{\"1\":{\"323\":1}}],[\"的小白\",{\"1\":{\"450\":1,\"464\":1,\"481\":1,\"513\":1}}],[\"的场景使用\",{\"1\":{\"1424\":2}}],[\"的场景\",{\"1\":{\"436\":1}}],[\"的桶子中\",{\"1\":{\"428\":1}}],[\"的排序\",{\"1\":{\"412\":1}}],[\"的改进\",{\"1\":{\"400\":1}}],[\"的信息量大于b\",{\"1\":{\"323\":1}}],[\"的副本分片上\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"的副本\",{\"1\":{\"323\":1}}],[\"的节点类型\",{\"0\":{\"1195\":1,\"1368\":1}}],[\"的节点\",{\"1\":{\"1027\":1,\"1231\":1}}],[\"的节点将来也可能被访问\",{\"1\":{\"323\":1}}],[\"的节点就在第一层\",{\"1\":{\"323\":1}}],[\"的次数就缩减为了\",{\"1\":{\"319\":1}}],[\"的次数\",{\"1\":{\"319\":1,\"323\":1}}],[\"的因子\",{\"1\":{\"306\":2}}],[\"的幂次方构成的数\",{\"1\":{\"305\":1}}],[\"的条件判断\",{\"1\":{\"1416\":1}}],[\"的条件\",{\"1\":{\"304\":1}}],[\"的整数对象池\",{\"1\":{\"1161\":2,\"1341\":2}}],[\"的整数值\",{\"1\":{\"693\":1}}],[\"的整数是\",{\"1\":{\"440\":1}}],[\"的整数\",{\"0\":{\"303\":1},\"1\":{\"303\":1}}],[\"的整倍数\",{\"1\":{\"123\":1,\"327\":1}}],[\"的老朋友都知道\",{\"1\":{\"264\":1}}],[\"的话\",{\"1\":{\"221\":1,\"1169\":1,\"1346\":1}}],[\"的利器\",{\"1\":{\"218\":1}}],[\"的投票信息\",{\"1\":{\"183\":1}}],[\"的参数\",{\"1\":{\"162\":2,\"1132\":1,\"1317\":1}}],[\"的缩写\",{\"1\":{\"162\":1,\"316\":1,\"1134\":1,\"1195\":1,\"1319\":1,\"1368\":1}}],[\"的四种类型\",{\"0\":{\"127\":1}}],[\"的七层模型都有哪些\",{\"1\":{\"121\":1}}],[\"的区别有了更深的理解\",{\"1\":{\"1446\":1}}],[\"的区别主要体现在两个方面\",{\"1\":{\"1071\":1,\"1266\":1}}],[\"的区别是什么\",{\"0\":{\"1046\":1,\"1131\":1,\"1247\":1,\"1316\":1}}],[\"的区别在于\",{\"1\":{\"1006\":2,\"1215\":2}}],[\"的区别\",{\"0\":{\"1074\":1,\"1269\":1},\"1\":{\"121\":1,\"984\":1,\"1446\":1}}],[\"的在线网站\",{\"1\":{\"107\":1}}],[\"的\",{\"0\":{\"731\":1},\"1\":{\"41\":1,\"42\":1,\"126\":2,\"211\":1,\"238\":1,\"247\":1,\"263\":1,\"317\":1,\"323\":2,\"395\":1,\"621\":1,\"664\":1,\"669\":1,\"678\":1,\"683\":1,\"692\":1,\"721\":1,\"835\":1,\"883\":1,\"1028\":1,\"1049\":1,\"1074\":1,\"1076\":1,\"1080\":1,\"1085\":3,\"1090\":1,\"1093\":1,\"1124\":2,\"1132\":1,\"1135\":1,\"1201\":1,\"1232\":1,\"1250\":1,\"1269\":1,\"1271\":1,\"1275\":1,\"1278\":3,\"1283\":1,\"1286\":1,\"1312\":2,\"1317\":1,\"1320\":1,\"1374\":1,\"1380\":3,\"1386\":2,\"1390\":3,\"1408\":2,\"1410\":4,\"1412\":1,\"1414\":1,\"1476\":2,\"1515\":1}}],[\"fyuvwrd8iixffikodcect8ipnof\",{\"1\":{\"1485\":1}}],[\"fd\",{\"1\":{\"1420\":2}}],[\"fdk\",{\"1\":{\"162\":1}}],[\"fn\",{\"1\":{\"895\":1}}],[\"f2fa3\",{\"1\":{\"829\":1}}],[\"f26c\",{\"1\":{\"206\":1}}],[\"ft\",{\"1\":{\"570\":1}}],[\"func\",{\"1\":{\"1394\":1}}],[\"function\",{\"1\":{\"540\":2,\"541\":2}}],[\"functionexample\",{\"1\":{\"195\":1}}],[\"fulltext\",{\"1\":{\"570\":2}}],[\"full\",{\"1\":{\"489\":5,\"558\":1}}],[\"fullname\",{\"1\":{\"489\":2}}],[\"fubing2\",{\"1\":{\"487\":1}}],[\"fubing\",{\"1\":{\"487\":1}}],[\"flip\",{\"1\":{\"1478\":1}}],[\"flush\",{\"1\":{\"939\":2,\"1028\":3,\"1135\":1,\"1232\":3,\"1320\":1}}],[\"flushstatements\",{\"1\":{\"833\":1}}],[\"flase\",{\"1\":{\"927\":1}}],[\"flag=true\",{\"1\":{\"755\":1}}],[\"flag\",{\"1\":{\"755\":21,\"1382\":16}}],[\"flow2\",{\"1\":{\"928\":3}}],[\"flow1\",{\"1\":{\"928\":3}}],[\"flowable=\",{\"1\":{\"928\":1}}],[\"flowable2\",{\"1\":{\"926\":1,\"927\":1}}],[\"flowable<\",{\"1\":{\"925\":1}}],[\"flowable工作流依赖\",{\"1\":{\"925\":1}}],[\"flowable\",{\"1\":{\"924\":1,\"927\":1,\"928\":8,\"930\":1},\"2\":{\"931\":1,\"932\":1}}],[\"float的valueof方法的实现是类似的\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"float\",{\"1\":{\"497\":4,\"501\":1,\"858\":1,\"1386\":1,\"1406\":1}}],[\"floor\",{\"1\":{\"405\":2,\"417\":1}}],[\"flv`\",{\"1\":{\"163\":1}}],[\"flv\",{\"1\":{\"162\":1,\"163\":3}}],[\"feishu\",{\"1\":{\"1485\":1}}],[\"fence\",{\"1\":{\"1382\":1}}],[\"fetch\",{\"0\":{\"982\":1},\"1\":{\"982\":2,\"1029\":2,\"1233\":2,\"1440\":2}}],[\"feature\",{\"1\":{\"978\":2,\"980\":3}}],[\"female\",{\"1\":{\"599\":1}}],[\"fedora\",{\"0\":{\"242\":1}}],[\"feb\",{\"1\":{\"176\":8}}],[\"fmts\",{\"1\":{\"161\":2}}],[\"fmpeg\",{\"1\":{\"155\":1}}],[\"ffprobe\",{\"1\":{\"160\":1}}],[\"ffmpg控制码率有3种选择\",{\"1\":{\"151\":1}}],[\"ffmpeg会从input\",{\"1\":{\"158\":1}}],[\"ffmpeg会通知缩放滤镜在输出时保持原始的宽高比\",{\"1\":{\"155\":1}}],[\"ffmpeg自己也有编码器\",{\"1\":{\"152\":1}}],[\"ffmpeg编码时可以调用它\",{\"1\":{\"152\":1}}],[\"ffmpeg官方wiki比较建议\",{\"1\":{\"151\":1}}],[\"ffmpeg的使用方式\",{\"1\":{\"144\":1}}],[\"ffmpeg在linux平台下开发\",{\"1\":{\"139\":1}}],[\"ffmpeg是一套可以用来记录\",{\"1\":{\"139\":1}}],[\"ffmpeg\",{\"1\":{\"139\":1,\"142\":8,\"144\":1,\"146\":1,\"148\":2,\"149\":2,\"150\":1,\"151\":3,\"152\":4,\"153\":1,\"156\":4,\"157\":1,\"158\":3,\"161\":1,\"162\":5,\"163\":4}}],[\"ffmpeg有多强大\",{\"1\":{\"138\":1}}],[\"ff\",{\"1\":{\"139\":1}}],[\"fsync将创建一个新的提交点\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"fssl\",{\"1\":{\"126\":1,\"292\":1}}],[\"fs=\",{\"1\":{\"111\":1}}],[\"fashion\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"fastjson\",{\"1\":{\"907\":2}}],[\"fasterxml\",{\"1\":{\"875\":1}}],[\"fast\",{\"0\":{\"609\":1,\"1076\":1,\"1271\":1},\"1\":{\"139\":1,\"1076\":4,\"1271\":4,\"1481\":2}}],[\"fastcgi\",{\"1\":{\"123\":5}}],[\"factories\",{\"1\":{\"1185\":2,\"1189\":1,\"1360\":2,\"1364\":1}}],[\"factory\",{\"1\":{\"829\":2,\"891\":2,\"893\":2,\"894\":1}}],[\"factor\",{\"1\":{\"306\":10,\"688\":1,\"1386\":2,\"1406\":1}}],[\"factors\",{\"1\":{\"306\":12}}],[\"fanggateway\",{\"1\":{\"1061\":1,\"1062\":1,\"1259\":1,\"1260\":1}}],[\"fan\",{\"1\":{\"297\":1}}],[\"false\",{\"1\":{\"190\":2,\"198\":2,\"337\":1,\"341\":3,\"342\":1,\"390\":1,\"459\":2,\"484\":3,\"485\":2,\"492\":1,\"493\":4,\"499\":1,\"500\":1,\"755\":3,\"853\":1,\"878\":1,\"894\":1,\"895\":1,\"912\":1,\"927\":1,\"928\":1,\"1001\":1,\"1042\":1,\"1049\":1,\"1210\":1,\"1243\":1,\"1250\":1,\"1382\":1,\"1390\":1,\"1428\":2,\"1446\":2,\"1466\":1,\"1478\":2}}],[\"familiar\",{\"1\":{\"169\":1}}],[\"failed\",{\"1\":{\"224\":1}}],[\"failure\",{\"1\":{\"129\":1}}],[\"fail\",{\"0\":{\"1076\":2,\"1271\":2},\"1\":{\"123\":1,\"1076\":6,\"1271\":6}}],[\"fails次失败后\",{\"1\":{\"123\":1}}],[\"fails\",{\"1\":{\"123\":1}}],[\"fair\",{\"1\":{\"123\":2}}],[\"following\",{\"1\":{\"1196\":2,\"1369\":2}}],[\"follower是有状态的\",{\"1\":{\"1196\":1,\"1369\":1}}],[\"follower\",{\"1\":{\"1116\":3,\"1117\":3,\"1120\":1,\"1196\":1,\"1199\":1,\"1200\":2,\"1304\":3,\"1305\":3,\"1308\":1,\"1369\":1,\"1372\":1,\"1373\":2}}],[\"follower从leader同步数据有一些延迟\",{\"1\":{\"1113\":1,\"1301\":1}}],[\"folder\",{\"1\":{\"111\":2,\"976\":1}}],[\"foxes\",{\"1\":{\"490\":2}}],[\"found\",{\"1\":{\"194\":2,\"489\":1,\"842\":2,\"1173\":1,\"1350\":1,\"1494\":3,\"1528\":1}}],[\"foundpositive\",{\"1\":{\"190\":3}}],[\"forbidden\",{\"1\":{\"1494\":1}}],[\"fork\",{\"1\":{\"1420\":1}}],[\"forgery\",{\"1\":{\"1094\":1,\"1287\":1}}],[\"for=pc\",{\"1\":{\"987\":1}}],[\"forname\",{\"1\":{\"800\":1,\"1050\":1,\"1251\":1}}],[\"foreach\",{\"0\":{\"850\":1},\"1\":{\"850\":1,\"1134\":1,\"1319\":1}}],[\"foreach>\",{\"1\":{\"787\":2,\"790\":3,\"850\":1}}],[\"foreign\",{\"1\":{\"623\":1,\"887\":1}}],[\"foreground|stop|restart|status|upgrade|print\",{\"1\":{\"175\":1}}],[\"for获取用户真实ip\",{\"1\":{\"123\":1}}],[\"formats\",{\"1\":{\"161\":1}}],[\"format\",{\"1\":{\"123\":1,\"441\":3,\"493\":1}}],[\"for信息\",{\"1\":{\"123\":1}}],[\"for用以记录客户端的ip地址\",{\"1\":{\"123\":1}}],[\"for\",{\"0\":{\"634\":1},\"1\":{\"123\":6,\"169\":4,\"190\":2,\"306\":2,\"338\":7,\"339\":2,\"342\":1,\"390\":4,\"405\":5,\"406\":3,\"413\":4,\"417\":2,\"430\":3,\"441\":4,\"618\":2,\"619\":3,\"621\":1,\"627\":1,\"633\":1,\"634\":1,\"636\":1,\"638\":1,\"641\":1,\"820\":1,\"826\":2,\"847\":1,\"848\":1,\"849\":1,\"850\":1,\"887\":2,\"891\":1,\"892\":1,\"1001\":2,\"1030\":1,\"1042\":1,\"1049\":1,\"1058\":2,\"1061\":1,\"1062\":1,\"1148\":5,\"1173\":2,\"1210\":2,\"1234\":1,\"1243\":1,\"1250\":1,\"1256\":2,\"1259\":1,\"1260\":1,\"1331\":5,\"1350\":2,\"1380\":2,\"1386\":4,\"1390\":2,\"1394\":1,\"1396\":2,\"1398\":1,\"1408\":2,\"1442\":1,\"1448\":1,\"1462\":1,\"1466\":1,\"1478\":1}}],[\"forwarded\",{\"1\":{\"123\":8}}],[\"forward\",{\"0\":{\"609\":1},\"1\":{\"121\":1,\"139\":1,\"691\":1,\"894\":1}}],[\"food\",{\"1\":{\"1424\":1}}],[\"food等\",{\"1\":{\"1424\":1}}],[\"foo\",{\"0\":{\"50\":1,\"64\":1},\"1\":{\"65\":1,\"665\":1,\"723\":1}}],[\"f\",{\"1\":{\"111\":3,\"144\":1,\"153\":1,\"158\":2,\"162\":7,\"163\":4,\"306\":2,\"917\":1,\"919\":1,\"980\":4,\"1019\":1,\"1025\":1,\"1225\":1,\"1229\":1}}],[\"fightfightfight\",{\"1\":{\"980\":1,\"982\":1}}],[\"fieldtype\",{\"1\":{\"1468\":1}}],[\"field2\",{\"1\":{\"668\":3}}],[\"field1\",{\"1\":{\"668\":3}}],[\"fielddata\",{\"1\":{\"493\":3}}],[\"fields\",{\"1\":{\"490\":1,\"493\":1}}],[\"field\",{\"1\":{\"489\":2,\"490\":2,\"493\":1,\"510\":4,\"665\":1,\"668\":10,\"717\":1,\"1402\":1,\"1468\":3}}],[\"fifo\",{\"1\":{\"335\":1,\"1001\":1,\"1201\":1,\"1210\":1,\"1374\":1}}],[\"finish\",{\"1\":{\"540\":2,\"541\":2}}],[\"finished\",{\"1\":{\"540\":2,\"541\":2,\"1390\":4}}],[\"final修饰一个成员变量\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"final修饰一个局部变量\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"final修饰一个方法\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"final修饰一个类\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"final类中的所有成员方法都会被隐式地指定为final方法\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"final关键字有四个常见用法\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"finalname>\",{\"1\":{\"875\":1,\"1525\":1}}],[\"final增强\",{\"1\":{\"752\":1}}],[\"finally\",{\"1\":{\"752\":1,\"800\":1,\"810\":1,\"939\":2,\"1062\":4,\"1260\":4}}],[\"final\",{\"0\":{\"1048\":1,\"1249\":1},\"1\":{\"222\":1,\"390\":2,\"405\":1,\"441\":10,\"711\":1,\"853\":1,\"1042\":3,\"1046\":1,\"1048\":10,\"1243\":3,\"1247\":1,\"1249\":10,\"1380\":1,\"1386\":3,\"1390\":1,\"1392\":2,\"1404\":1,\"1406\":3,\"1410\":2,\"1446\":2,\"1448\":2,\"1476\":1,\"1478\":3,\"1494\":2}}],[\"findsmallestnode\",{\"1\":{\"1466\":2}}],[\"findactiveblogwithtitlelike\",{\"1\":{\"1416\":1}}],[\"finding\",{\"1\":{\"1392\":1}}],[\"find\",{\"1\":{\"107\":1,\"111\":1,\"306\":2}}],[\"filltask\",{\"1\":{\"928\":7}}],[\"filterregions\",{\"1\":{\"1398\":1}}],[\"filterregistrationbean\",{\"1\":{\"1093\":1,\"1286\":1}}],[\"filtered\",{\"1\":{\"1398\":2}}],[\"filters\",{\"1\":{\"161\":1}}],[\"filter\",{\"1\":{\"156\":4,\"385\":1,\"392\":1,\"396\":1,\"459\":1,\"1090\":4,\"1283\":4}}],[\"fileinputstream\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"file>\",{\"1\":{\"883\":1}}],[\"file>index\",{\"1\":{\"883\":1}}],[\"file=\",{\"1\":{\"126\":1}}],[\"filesystem\",{\"1\":{\"1028\":5,\"1232\":5}}],[\"files\",{\"1\":{\"123\":1,\"950\":1}}],[\"fileall\",{\"1\":{\"111\":1}}],[\"file2\",{\"1\":{\"111\":1}}],[\"file1\",{\"1\":{\"111\":1}}],[\"filename\",{\"1\":{\"111\":2,\"123\":1,\"1420\":1}}],[\"file\",{\"1\":{\"107\":1,\"111\":8,\"123\":16,\"151\":1,\"169\":1,\"477\":1,\"835\":1,\"883\":2,\"887\":1,\"939\":3,\"1158\":1,\"1338\":1,\"1420\":2}}],[\"firstunstableoffset\",{\"1\":{\"1114\":1,\"1302\":1}}],[\"firstname\",{\"1\":{\"485\":1,\"487\":3,\"489\":3,\"492\":1}}],[\"first\",{\"1\":{\"41\":1,\"335\":1,\"340\":2,\"489\":5,\"503\":2,\"504\":6,\"667\":2,\"950\":1,\"1001\":2,\"1210\":2}}],[\"friend\",{\"1\":{\"1481\":1}}],[\"fruit\",{\"1\":{\"1424\":2}}],[\"fruit>\",{\"1\":{\"1424\":3}}],[\"frequency\",{\"1\":{\"1026\":1,\"1230\":1}}],[\"frequencies\",{\"1\":{\"486\":3}}],[\"frequently\",{\"1\":{\"1001\":1,\"1210\":1}}],[\"frequent\",{\"1\":{\"406\":2}}],[\"freqs\",{\"1\":{\"486\":1,\"493\":1}}],[\"freenext\",{\"1\":{\"1481\":2}}],[\"freeclient\",{\"1\":{\"1422\":1}}],[\"freememory\",{\"1\":{\"1396\":1}}],[\"free\",{\"1\":{\"107\":1,\"574\":3,\"682\":1,\"683\":1,\"684\":1}}],[\"front++\",{\"1\":{\"341\":1}}],[\"front+1\",{\"1\":{\"341\":1}}],[\"front\",{\"1\":{\"341\":14,\"342\":9}}],[\"frontmatter\",{\"1\":{\"8\":1,\"18\":1,\"21\":1,\"26\":4,\"41\":1,\"42\":1}}],[\"from\",{\"0\":{\"603\":1},\"1\":{\"169\":1,\"564\":3,\"568\":1,\"569\":2,\"574\":1,\"589\":2,\"591\":3,\"592\":2,\"593\":2,\"594\":2,\"595\":2,\"598\":4,\"605\":2,\"618\":2,\"619\":2,\"621\":2,\"634\":1,\"636\":2,\"640\":1,\"641\":1,\"643\":1,\"800\":1,\"807\":1,\"818\":4,\"822\":1,\"826\":5,\"835\":1,\"842\":8,\"843\":2,\"845\":4,\"847\":1,\"848\":1,\"849\":1,\"850\":1,\"852\":5,\"853\":1,\"856\":2,\"857\":1,\"858\":1,\"863\":2,\"890\":3,\"913\":1,\"950\":1,\"1016\":3,\"1029\":7,\"1058\":1,\"1131\":4,\"1132\":1,\"1138\":3,\"1222\":3,\"1233\":7,\"1256\":1,\"1316\":4,\"1317\":1,\"1323\":3,\"1386\":2,\"1398\":2,\"1416\":2,\"1422\":1,\"1514\":1}}],[\"frameworkservlet\",{\"1\":{\"1414\":1}}],[\"framework\",{\"1\":{\"1414\":1}}],[\"frame\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"framerate\",{\"1\":{\"162\":3,\"163\":1}}],[\"framerate作用相同\",{\"1\":{\"162\":1}}],[\"frames\",{\"1\":{\"160\":4}}],[\"frac\",{\"1\":{\"33\":4}}],[\"上个面试官对你的基础有了一定了解\",{\"1\":{\"1476\":1}}],[\"上限的使用场景是当需要获取t的子类型对象时\",{\"1\":{\"1424\":1}}],[\"上的一个\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"上的\",{\"1\":{\"1190\":1,\"1365\":1}}],[\"上的贡献\",{\"1\":{\"427\":1}}],[\"上执行的动作\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"上下文目录\",{\"1\":{\"1408\":1}}],[\"上下文\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"上下文切换\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"上下角标\",{\"0\":{\"36\":1}}],[\"上亿量级\",{\"0\":{\"1034\":1,\"1238\":1}}],[\"上述代码其实对应的sql\",{\"1\":{\"864\":1}}],[\"上建了索引也对查询效率起不了作用\",{\"1\":{\"599\":1}}],[\"上设置默认值\",{\"1\":{\"589\":1}}],[\"上表现更好\",{\"1\":{\"568\":1}}],[\"上图的线程工作内存\",{\"1\":{\"755\":1}}],[\"上图有个冲突\",{\"1\":{\"687\":1}}],[\"上图是java内存模型\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"上图是\",{\"1\":{\"682\":1}}],[\"上图是一棵简化的b\",{\"1\":{\"319\":1}}],[\"上图是一颗简单的平衡二叉树\",{\"1\":{\"319\":1}}],[\"上图所示索引系统除了记录文档编号和单词频率信息外\",{\"1\":{\"478\":1}}],[\"上次生成id的时间截\",{\"1\":{\"441\":3}}],[\"上文有写到链表的实现\",{\"1\":{\"342\":1}}],[\"上文说过\",{\"1\":{\"324\":1,\"327\":1}}],[\"上\",{\"1\":{\"319\":1,\"660\":1,\"1028\":1,\"1116\":1,\"1121\":3,\"1190\":1,\"1232\":1,\"1304\":1,\"1309\":3,\"1365\":1,\"1474\":1}}],[\"上来就想着要服务几万\",{\"1\":{\"263\":1}}],[\"上一章做了介绍\",{\"1\":{\"177\":1}}],[\"上一篇咱们有一定了解\",{\"1\":{\"678\":1}}],[\"上一篇都是对一些\",{\"1\":{\"676\":1}}],[\"上一篇\",{\"1\":{\"18\":1,\"676\":1}}],[\"上边是zookeeper官网的描述\",{\"1\":{\"169\":1}}],[\"上免费申请\",{\"1\":{\"98\":1}}],[\"上面五种分区算法都是选择preferredreplica\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"上面操作2依赖于操作1\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"上面是文档在节点间分发的过程\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"上面是我们在原理介绍讲到的\",{\"1\":{\"392\":1}}],[\"上面代码表示将feature分支的最近一次提交\",{\"1\":{\"980\":1}}],[\"上面命令就会将指定的提交commithash\",{\"1\":{\"980\":1}}],[\"上面我们已经在\",{\"1\":{\"890\":1}}],[\"上面我们了解过\",{\"1\":{\"93\":1}}],[\"上面的代码中i1和i2的数值为100\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"上面的代码是通过标记flag来控制\",{\"1\":{\"755\":1}}],[\"上面的命令可以转移从\",{\"1\":{\"980\":1}}],[\"上面的命令将\",{\"1\":{\"980\":1}}],[\"上面的操作完成以后\",{\"1\":{\"980\":1}}],[\"上面的\",{\"1\":{\"889\":1}}],[\"上面的插件将会拦截在\",{\"1\":{\"833\":1}}],[\"上面的叙述看似并没有什么问题\",{\"1\":{\"755\":1}}],[\"上面说了一个节点需要进行一次\",{\"1\":{\"319\":1}}],[\"上面这种写法可以保证线程安全\",{\"1\":{\"88\":1}}],[\"2b\",{\"1\":{\"1476\":1}}],[\"2清除阶段删除垃圾\",{\"1\":{\"1394\":1}}],[\"2+1\",{\"1\":{\"1027\":2,\"1231\":2}}],[\"2<\",{\"1\":{\"875\":4}}],[\"2=100\",{\"1\":{\"594\":1}}],[\"2^64\",{\"1\":{\"722\":1}}],[\"2^32\",{\"1\":{\"718\":1}}],[\"2^\",{\"1\":{\"440\":7}}],[\"2^7\",{\"1\":{\"305\":1,\"306\":2}}],[\"222\",{\"1\":{\"825\":1}}],[\"22\",{\"0\":{\"610\":1},\"1\":{\"428\":5,\"430\":2,\"588\":1,\"698\":1,\"751\":1,\"799\":2,\"822\":2}}],[\"220\",{\"1\":{\"157\":1}}],[\"2i+2\",{\"1\":{\"417\":2}}],[\"2i+1\",{\"1\":{\"417\":2}}],[\"2亿\",{\"1\":{\"400\":1}}],[\"242355057\",{\"1\":{\"852\":3}}],[\"24t10\",{\"1\":{\"492\":1}}],[\"24\",{\"1\":{\"390\":1,\"440\":1,\"441\":1,\"772\":1,\"773\":1,\"912\":1,\"1507\":1}}],[\"246183324b86\",{\"1\":{\"189\":1}}],[\"23\",{\"0\":{\"611\":1},\"1\":{\"390\":1,\"493\":1,\"853\":8,\"863\":1}}],[\"232\",{\"1\":{\"176\":1,\"667\":1,\"668\":1,\"670\":1}}],[\"250\",{\"1\":{\"1410\":1}}],[\"2501\",{\"1\":{\"929\":1}}],[\"2500k\",{\"1\":{\"151\":1}}],[\"255\",{\"1\":{\"570\":1,\"855\":1,\"858\":3,\"928\":2}}],[\"256\",{\"1\":{\"493\":1,\"654\":1,\"1420\":1}}],[\"25\",{\"1\":{\"316\":1,\"319\":2,\"320\":2,\"382\":1,\"751\":1,\"752\":1,\"1480\":1}}],[\"2的四次方是16\",{\"1\":{\"306\":1}}],[\"2的因子\",{\"1\":{\"306\":1}}],[\"2的平均值是1\",{\"1\":{\"151\":1}}],[\"2核4g2m低至99元\",{\"1\":{\"238\":1}}],[\"2核2g低至59元\",{\"1\":{\"238\":1}}],[\"2742\",{\"1\":{\"723\":1}}],[\"27\",{\"1\":{\"238\":1,\"1456\":1}}],[\"2703kbps\",{\"1\":{\"151\":1}}],[\"26~\",{\"1\":{\"316\":1}}],[\"26\",{\"1\":{\"176\":1,\"390\":1,\"892\":1,\"912\":1}}],[\"2696\",{\"1\":{\"176\":1}}],[\"281\",{\"1\":{\"928\":2}}],[\"285\",{\"1\":{\"928\":1}}],[\"28\",{\"1\":{\"428\":5,\"430\":3,\"822\":2,\"928\":2,\"1044\":2,\"1245\":2,\"1507\":1}}],[\"2888端口是zookeeper服务之间的通讯的端口\",{\"1\":{\"174\":1}}],[\"2888\",{\"1\":{\"174\":2}}],[\"2831kbps\",{\"1\":{\"151\":2}}],[\"295\",{\"1\":{\"928\":4}}],[\"29\",{\"1\":{\"162\":1,\"492\":1,\"588\":1,\"858\":1}}],[\"2181\",{\"1\":{\"174\":1,\"176\":1,\"1466\":1}}],[\"21\",{\"0\":{\"609\":1},\"1\":{\"111\":1,\"405\":1,\"889\":2,\"891\":3,\"892\":1,\"893\":1,\"894\":1,\"1507\":1,\"1514\":2}}],[\"2>\",{\"1\":{\"111\":1}}],[\"2092769598\",{\"1\":{\"853\":2}}],[\"20100524\",{\"1\":{\"928\":4}}],[\"201807010001\",{\"1\":{\"856\":2,\"857\":1,\"858\":2}}],[\"2018\",{\"1\":{\"492\":1,\"822\":2,\"852\":42,\"853\":14,\"858\":2,\"982\":1}}],[\"2015\",{\"1\":{\"441\":1}}],[\"2017\",{\"1\":{\"270\":1}}],[\"2019\",{\"1\":{\"255\":1,\"261\":1,\"270\":1}}],[\"20190215\",{\"1\":{\"111\":1}}],[\"20190216\",{\"1\":{\"111\":1}}],[\"2016\",{\"1\":{\"176\":8}}],[\"208\",{\"1\":{\"158\":1}}],[\"2003\",{\"1\":{\"887\":1}}],[\"2002\",{\"1\":{\"887\":1}}],[\"2001\",{\"1\":{\"778\":2,\"875\":1,\"878\":1,\"881\":1,\"882\":1,\"883\":1,\"887\":1,\"907\":1,\"928\":2}}],[\"200m\",{\"1\":{\"459\":1}}],[\"200\",{\"1\":{\"263\":1,\"711\":1,\"892\":1,\"1042\":2,\"1243\":2,\"1494\":6}}],[\"2000=4秒\",{\"1\":{\"174\":1}}],[\"2000=10秒\",{\"1\":{\"174\":1}}],[\"2000\",{\"1\":{\"174\":1,\"755\":3,\"858\":1,\"887\":1,\"1061\":1,\"1259\":1}}],[\"2000k\",{\"1\":{\"151\":5}}],[\"2004年至2015年间由michael\",{\"1\":{\"139\":1}}],[\"200k左右的图片\",{\"1\":{\"123\":1}}],[\"204\",{\"1\":{\"111\":1}}],[\"20\",{\"0\":{\"608\":1,\"1031\":1,\"1235\":1},\"1\":{\"111\":3,\"151\":2,\"158\":1,\"263\":1,\"264\":1,\"400\":1,\"430\":1,\"568\":1,\"621\":1,\"666\":2,\"670\":1,\"788\":1,\"789\":3,\"826\":1,\"849\":1,\"887\":6,\"888\":2,\"892\":1,\"1064\":1,\"1123\":1,\"1262\":1,\"1311\":1,\"1507\":1}}],[\"202753974\",{\"1\":{\"755\":1}}],[\"20210111140639166\",{\"1\":{\"720\":1}}],[\"20210111140054296\",{\"1\":{\"720\":1}}],[\"20210111133958782\",{\"1\":{\"719\":1}}],[\"20210111133831044\",{\"1\":{\"719\":1}}],[\"20210111133650920\",{\"1\":{\"719\":1}}],[\"20210111133506484\",{\"1\":{\"719\":1}}],[\"20210111131949452\",{\"1\":{\"719\":1}}],[\"20210111131808595\",{\"1\":{\"719\":1}}],[\"20210110223728047\",{\"1\":{\"717\":1}}],[\"2021\",{\"1\":{\"584\":1,\"588\":1}}],[\"20231229223856569\",{\"1\":{\"976\":1}}],[\"20231229223449073\",{\"1\":{\"976\":1}}],[\"20231229223519373\",{\"1\":{\"976\":1}}],[\"20231229222424668\",{\"1\":{\"976\":1}}],[\"20231229224826134\",{\"1\":{\"969\":1}}],[\"20231229215720402\",{\"1\":{\"972\":1}}],[\"20231229214604013\",{\"1\":{\"969\":1}}],[\"20231216130625976\",{\"1\":{\"108\":1}}],[\"20231216130058600\",{\"1\":{\"108\":1}}],[\"20231216131826484\",{\"1\":{\"107\":1}}],[\"20231216131924099\",{\"1\":{\"107\":1}}],[\"20231216125353767\",{\"1\":{\"108\":1}}],[\"20231216125205177\",{\"1\":{\"108\":1}}],[\"20231216124857718\",{\"1\":{\"108\":1}}],[\"20231216124628242\",{\"1\":{\"108\":1}}],[\"20231216124523478\",{\"1\":{\"108\":1}}],[\"2023\",{\"1\":{\"265\":1,\"1456\":1}}],[\"2022\",{\"1\":{\"264\":1,\"751\":1,\"752\":1,\"912\":1,\"1061\":2,\"1062\":1,\"1064\":1,\"1259\":2,\"1260\":1,\"1262\":1}}],[\"20241202160812016\",{\"1\":{\"1525\":1}}],[\"20241202164145349\",{\"1\":{\"1514\":1}}],[\"20241202154524878\",{\"1\":{\"1523\":1}}],[\"20241202154337542\",{\"1\":{\"1523\":1}}],[\"20241202154315050\",{\"1\":{\"1523\":1}}],[\"20241127145854380\",{\"1\":{\"1520\":1}}],[\"20241104113603085\",{\"1\":{\"238\":1}}],[\"2024\",{\"1\":{\"262\":1,\"263\":1,\"264\":1,\"721\":1}}],[\"20240515145153527\",{\"1\":{\"907\":1}}],[\"20240515142850887\",{\"1\":{\"907\":1}}],[\"20240515142652362\",{\"1\":{\"907\":1}}],[\"20240515142447148\",{\"1\":{\"907\":1}}],[\"20240515142322426\",{\"1\":{\"907\":1}}],[\"20240515141832844\",{\"1\":{\"907\":1}}],[\"20240515141503878\",{\"1\":{\"907\":1}}],[\"20240515141415120\",{\"1\":{\"907\":1}}],[\"20240527182546406\",{\"1\":{\"644\":1}}],[\"20240527184946810\",{\"1\":{\"617\":1}}],[\"20240521105043027\",{\"1\":{\"213\":1}}],[\"20240521104901378\",{\"1\":{\"214\":1}}],[\"20240521104647299\",{\"1\":{\"212\":1}}],[\"20240521104426851\",{\"1\":{\"211\":1}}],[\"202401\",{\"1\":{\"721\":3}}],[\"20240325201704103\",{\"1\":{\"573\":1}}],[\"20240325202047594\",{\"1\":{\"565\":1}}],[\"20240325200012764\",{\"1\":{\"557\":1}}],[\"20240325195743437\",{\"1\":{\"558\":1}}],[\"20240325195000388\",{\"1\":{\"556\":1}}],[\"20240314155834611\",{\"1\":{\"227\":1}}],[\"20240314165434764\",{\"1\":{\"218\":1}}],[\"20240314214848607\",{\"1\":{\"229\":1}}],[\"20240314214836800\",{\"1\":{\"226\":1}}],[\"20240314214823572\",{\"1\":{\"225\":1}}],[\"20240314214801114\",{\"1\":{\"223\":1}}],[\"20240314214745191\",{\"1\":{\"222\":1}}],[\"20240314214712731\",{\"1\":{\"221\":1}}],[\"20240314214637143\",{\"1\":{\"220\":1}}],[\"20240314214602647\",{\"1\":{\"219\":1}}],[\"20240805201630837\",{\"1\":{\"189\":1}}],[\"2028\",{\"1\":{\"210\":2}}],[\"2025\",{\"0\":{\"267\":1},\"1\":{\"262\":1,\"264\":1}}],[\"20250121161421250\",{\"1\":{\"98\":1}}],[\"20250121160131161\",{\"1\":{\"98\":1}}],[\"2025年\",{\"0\":{\"56\":1},\"1\":{\"56\":2}}],[\"20200610231456317\",{\"1\":{\"768\":1}}],[\"20200610230144920\",{\"1\":{\"767\":1}}],[\"20200610225900548\",{\"1\":{\"766\":1}}],[\"20200610223813357\",{\"1\":{\"765\":1}}],[\"20200610223114895\",{\"1\":{\"764\":1}}],[\"2020\",{\"1\":{\"42\":1,\"341\":1,\"342\":1,\"390\":1,\"405\":1,\"430\":1,\"498\":2,\"887\":1,\"888\":2,\"889\":2,\"891\":3,\"892\":5,\"893\":4,\"894\":1,\"980\":1,\"982\":1}}],[\"2050\",{\"1\":{\"1\":1}}],[\"2\",{\"0\":{\"100\":1,\"140\":1,\"141\":1,\"142\":2,\"145\":1,\"146\":1,\"147\":2,\"156\":1,\"161\":1,\"169\":1,\"171\":1,\"175\":1,\"191\":1,\"205\":1,\"240\":1,\"317\":1,\"386\":1,\"388\":1,\"390\":1,\"393\":1,\"394\":1,\"395\":1,\"396\":2,\"402\":1,\"403\":1,\"404\":2,\"411\":1,\"412\":2,\"424\":1,\"426\":1,\"427\":1,\"428\":2,\"558\":1,\"590\":1,\"617\":1,\"618\":1,\"619\":2,\"620\":1,\"621\":1,\"622\":1,\"623\":1,\"624\":1,\"641\":1,\"652\":1,\"655\":1,\"661\":1,\"665\":1,\"666\":1,\"678\":1,\"683\":1,\"684\":1,\"685\":2,\"688\":1,\"692\":1,\"696\":1,\"699\":1,\"707\":1,\"708\":2,\"709\":1,\"710\":1,\"711\":2,\"735\":1,\"750\":1,\"762\":1,\"763\":2,\"765\":1,\"767\":1,\"770\":1,\"775\":1,\"779\":1,\"787\":1,\"788\":1,\"789\":2,\"798\":1,\"806\":1,\"814\":1,\"817\":1,\"825\":1,\"830\":1,\"839\":1,\"842\":1,\"848\":1,\"853\":1,\"856\":1,\"864\":1,\"960\":1,\"1000\":1,\"1015\":1,\"1026\":1,\"1042\":1,\"1056\":1,\"1070\":1,\"1085\":1,\"1100\":1,\"1116\":1,\"1130\":1,\"1143\":1,\"1156\":1,\"1169\":1,\"1182\":1,\"1195\":1,\"1209\":1,\"1221\":1,\"1230\":1,\"1243\":1,\"1254\":1,\"1265\":1,\"1278\":1,\"1291\":1,\"1304\":1,\"1315\":1,\"1326\":1,\"1336\":1,\"1346\":1,\"1357\":1,\"1368\":1,\"1515\":1,\"1523\":1},\"1\":{\"34\":1,\"85\":1,\"86\":1,\"123\":5,\"158\":2,\"170\":1,\"174\":1,\"183\":7,\"238\":2,\"277\":1,\"305\":2,\"306\":14,\"323\":2,\"337\":1,\"341\":1,\"342\":3,\"392\":1,\"393\":3,\"404\":2,\"405\":2,\"412\":2,\"413\":3,\"414\":1,\"417\":9,\"428\":2,\"440\":2,\"482\":1,\"487\":1,\"489\":2,\"510\":1,\"564\":1,\"588\":1,\"592\":1,\"594\":1,\"654\":2,\"657\":1,\"661\":3,\"666\":1,\"667\":4,\"668\":1,\"669\":1,\"670\":1,\"682\":1,\"687\":1,\"721\":1,\"722\":3,\"723\":1,\"753\":1,\"755\":1,\"764\":2,\"765\":2,\"771\":1,\"772\":4,\"786\":1,\"788\":3,\"789\":2,\"790\":4,\"799\":1,\"800\":1,\"805\":1,\"814\":2,\"822\":1,\"826\":3,\"848\":1,\"850\":1,\"852\":1,\"858\":5,\"863\":1,\"864\":2,\"875\":3,\"878\":2,\"882\":3,\"892\":1,\"893\":1,\"900\":1,\"901\":1,\"902\":1,\"912\":1,\"937\":2,\"961\":1,\"979\":1,\"1001\":6,\"1004\":4,\"1006\":2,\"1017\":1,\"1028\":2,\"1029\":1,\"1030\":1,\"1034\":3,\"1045\":1,\"1049\":1,\"1056\":3,\"1057\":1,\"1061\":6,\"1062\":2,\"1064\":1,\"1108\":1,\"1119\":1,\"1120\":2,\"1122\":3,\"1123\":2,\"1124\":1,\"1147\":1,\"1168\":1,\"1169\":1,\"1173\":1,\"1174\":1,\"1176\":3,\"1177\":1,\"1195\":1,\"1202\":1,\"1210\":6,\"1213\":4,\"1215\":2,\"1223\":1,\"1232\":2,\"1233\":1,\"1234\":1,\"1238\":3,\"1246\":1,\"1250\":1,\"1254\":3,\"1255\":1,\"1259\":6,\"1260\":2,\"1262\":1,\"1299\":1,\"1307\":1,\"1308\":2,\"1310\":3,\"1311\":2,\"1312\":1,\"1330\":1,\"1345\":1,\"1346\":1,\"1350\":1,\"1351\":1,\"1353\":3,\"1354\":1,\"1368\":1,\"1375\":1,\"1386\":2,\"1392\":2,\"1406\":1,\"1410\":3,\"1424\":4,\"1480\":1,\"1494\":1,\"1507\":1}}],[\"rds\",{\"1\":{\"1507\":1}}],[\"rdb和aof\",{\"1\":{\"1430\":1}}],[\"rdbsave\",{\"1\":{\"1420\":1}}],[\"rdb\",{\"1\":{\"1158\":1,\"1338\":1,\"1420\":6,\"1422\":4}}],[\"rc\",{\"1\":{\"1144\":1,\"1327\":1}}],[\"rf\",{\"1\":{\"915\":1}}],[\"rfc4122\",{\"1\":{\"438\":1}}],[\"rfc\",{\"1\":{\"438\":1}}],[\"rs\",{\"1\":{\"800\":9,\"1133\":3,\"1318\":3}}],[\"rsync\",{\"1\":{\"111\":1}}],[\"rpc\",{\"1\":{\"893\":1,\"990\":2}}],[\"rpoplpush\",{\"1\":{\"667\":1,\"718\":2}}],[\"rpop\",{\"1\":{\"667\":1,\"718\":1}}],[\"rpushx\",{\"1\":{\"667\":1}}],[\"rpush\",{\"1\":{\"667\":5,\"718\":1}}],[\"ru\",{\"1\":{\"1144\":1,\"1327\":1}}],[\"ruanyifeng\",{\"1\":{\"980\":1,\"982\":1}}],[\"rust学习教程\",{\"0\":{\"966\":1}}],[\"rust\",{\"0\":{\"965\":1},\"1\":{\"967\":5}}],[\"rule\",{\"1\":{\"950\":1}}],[\"rules\",{\"1\":{\"950\":4}}],[\"ruby\",{\"1\":{\"652\":1}}],[\"runwith\",{\"1\":{\"891\":2}}],[\"runtime<\",{\"1\":{\"875\":1}}],[\"runtime\",{\"1\":{\"751\":1,\"769\":1,\"1049\":2,\"1100\":1,\"1250\":2,\"1291\":1,\"1402\":5}}],[\"runtimeexception\",{\"1\":{\"441\":1,\"892\":4}}],[\"runoob\",{\"1\":{\"668\":1,\"669\":1}}],[\"runnable\",{\"1\":{\"1057\":1,\"1061\":1,\"1255\":1,\"1259\":1}}],[\"runnable>\",{\"1\":{\"194\":1}}],[\"runner\",{\"1\":{\"891\":1}}],[\"running\",{\"1\":{\"293\":1,\"1057\":2,\"1058\":2,\"1255\":2,\"1256\":2}}],[\"runs\",{\"1\":{\"169\":1}}],[\"run\",{\"1\":{\"103\":1,\"133\":1,\"194\":1,\"292\":1,\"296\":1,\"755\":2,\"918\":1,\"1016\":2,\"1055\":1,\"1058\":2,\"1061\":4,\"1062\":2,\"1064\":3,\"1222\":2,\"1253\":1,\"1256\":2,\"1259\":4,\"1260\":2,\"1262\":3}}],[\"rr隔离级别旨在防止幻读现象\",{\"1\":{\"638\":1}}],[\"rr\",{\"0\":{\"638\":1},\"1\":{\"1144\":1,\"1327\":1}}],[\"rwkc2lnarknn8dc0hrp58g\",{\"1\":{\"1141\":1,\"1324\":1}}],[\"rw\",{\"1\":{\"176\":1}}],[\"rwxr\",{\"1\":{\"176\":8}}],[\"rtmp\",{\"1\":{\"163\":5}}],[\"r用于限制输出\",{\"1\":{\"162\":1}}],[\"r与\",{\"1\":{\"162\":1}}],[\"raid56\",{\"1\":{\"1030\":1,\"1234\":1}}],[\"raid6\",{\"1\":{\"1030\":1,\"1234\":1}}],[\"raid\",{\"1\":{\"1030\":1,\"1234\":1}}],[\"ratelimiter\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"ratio\",{\"1\":{\"853\":1}}],[\"rabbitmq\",{\"1\":{\"657\":1}}],[\"rank\",{\"1\":{\"1134\":2,\"1319\":2}}],[\"randomaccess\",{\"1\":{\"1404\":1}}],[\"random\",{\"1\":{\"1062\":3,\"1260\":3}}],[\"randomutils\",{\"1\":{\"441\":2}}],[\"randomuuid\",{\"1\":{\"438\":1,\"939\":1,\"1466\":1}}],[\"rangecheck\",{\"1\":{\"338\":2,\"339\":3}}],[\"range\",{\"1\":{\"306\":1,\"501\":5}}],[\"radixsort\",{\"1\":{\"430\":2}}],[\"radix\",{\"1\":{\"424\":1}}],[\"ram\",{\"1\":{\"326\":1}}],[\"race\",{\"1\":{\"169\":1}}],[\"raw\",{\"1\":{\"126\":1,\"1173\":1,\"1350\":1}}],[\"ray\",{\"0\":{\"67\":1},\"1\":{\"50\":1,\"66\":1}}],[\"robj\",{\"1\":{\"691\":1,\"698\":3}}],[\"rollover\",{\"1\":{\"1025\":2,\"1229\":2}}],[\"rollback\",{\"1\":{\"644\":1,\"833\":1,\"1416\":1}}],[\"role\",{\"1\":{\"294\":1}}],[\"rowbounds\",{\"1\":{\"1138\":1,\"1323\":1}}],[\"row\",{\"0\":{\"627\":1}}],[\"rocketmq\",{\"1\":{\"587\":1,\"989\":1}}],[\"rocketmq快速入门教程\",{\"0\":{\"164\":1}}],[\"routing\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"routing=1\",{\"1\":{\"510\":1}}],[\"roundyuan\",{\"1\":{\"1061\":1,\"1062\":1,\"1259\":1,\"1260\":1}}],[\"round\",{\"1\":{\"393\":1}}],[\"room`\",{\"1\":{\"163\":1}}],[\"rootbeandefinition\",{\"1\":{\"1410\":1}}],[\"roots开始递归的标记对象图\",{\"1\":{\"1396\":1}}],[\"roots开始对堆中对象进行并发标记\",{\"1\":{\"1394\":1,\"1398\":1}}],[\"roots能直接关联的对象\",{\"1\":{\"1394\":1,\"1396\":1,\"1398\":1}}],[\"roots\",{\"1\":{\"1107\":2,\"1298\":2}}],[\"root>\",{\"1\":{\"884\":1}}],[\"root\",{\"1\":{\"111\":2,\"123\":8,\"175\":1,\"176\":4,\"320\":2,\"488\":1,\"800\":1,\"806\":2,\"808\":1,\"927\":1,\"1133\":1,\"1318\":1}}],[\"rodert单排学习redis进阶\",{\"0\":{\"674\":1,\"675\":1,\"702\":1,\"703\":1}}],[\"rodert单排学习redis入门\",{\"0\":{\"648\":1,\"649\":1},\"1\":{\"676\":1,\"704\":1,\"710\":1}}],[\"rodert教你学mybatis\",{\"0\":{\"793\":1,\"794\":1},\"1\":{\"801\":1}}],[\"rodert教你学maven\",{\"0\":{\"760\":1,\"761\":1}}],[\"rodert教你学zookeeper\",{\"0\":{\"165\":1,\"166\":1}}],[\"rodert教你学ffmpeg实战这一篇就够了\",{\"0\":{\"136\":1,\"137\":1}}],[\"rodert\",{\"1\":{\"123\":1,\"129\":1,\"133\":1,\"247\":1,\"341\":1,\"342\":1,\"390\":3,\"405\":1,\"430\":2,\"551\":1,\"704\":1,\"710\":1,\"744\":1,\"751\":2,\"752\":2,\"753\":1,\"875\":3,\"878\":2,\"881\":1,\"882\":1,\"888\":4,\"889\":6,\"890\":2,\"891\":10,\"892\":12,\"893\":23,\"894\":9,\"895\":1,\"907\":1,\"912\":2,\"919\":1,\"930\":1,\"941\":1,\"948\":1,\"952\":1,\"976\":3,\"987\":1,\"1019\":1,\"1025\":1,\"1027\":1,\"1061\":2,\"1062\":1,\"1064\":1,\"1225\":1,\"1229\":1,\"1231\":1,\"1259\":2,\"1260\":1,\"1262\":1,\"1380\":2,\"1382\":2,\"1384\":2,\"1386\":2,\"1388\":2,\"1390\":2,\"1392\":2,\"1394\":2,\"1396\":2,\"1398\":2,\"1400\":2,\"1402\":2,\"1404\":2,\"1406\":2,\"1408\":2,\"1410\":2,\"1412\":2,\"1414\":2,\"1416\":2,\"1418\":2,\"1420\":2,\"1422\":2,\"1424\":2,\"1426\":2,\"1428\":2,\"1430\":2,\"1432\":2,\"1434\":2,\"1436\":2,\"1438\":2,\"1440\":2,\"1446\":2,\"1448\":2,\"1450\":2,\"1452\":2,\"1454\":2,\"1456\":2,\"1458\":2,\"1460\":2,\"1462\":2,\"1464\":2,\"1466\":2,\"1468\":2,\"1470\":2,\"1474\":2,\"1476\":2,\"1478\":2,\"1481\":2,\"1507\":1}}],[\"rlimit\",{\"1\":{\"123\":2}}],[\"rmi\",{\"1\":{\"1019\":1,\"1225\":1}}],[\"rmb\",{\"1\":{\"969\":1}}],[\"rm\",{\"1\":{\"107\":1,\"108\":2,\"915\":1,\"1507\":1}}],[\"review\",{\"1\":{\"1502\":1}}],[\"rewriteappendonlyfile\",{\"1\":{\"1420\":1}}],[\"rewrite的时候会阻塞客户端查询\",{\"1\":{\"1420\":1}}],[\"rejectedexecutionexception\",{\"1\":{\"1384\":1}}],[\"remembered\",{\"1\":{\"1398\":6}}],[\"remark\",{\"1\":{\"1107\":1,\"1298\":1,\"1398\":1}}],[\"removeeldestentry\",{\"1\":{\"1001\":1,\"1210\":1}}],[\"removeelem\",{\"1\":{\"337\":1,\"338\":2,\"339\":1}}],[\"removeelements\",{\"1\":{\"337\":1,\"338\":1,\"339\":1}}],[\"remove\",{\"1\":{\"915\":2,\"1173\":1,\"1350\":1,\"1478\":1}}],[\"remove及取交集并集和差集及更丰富的操作\",{\"1\":{\"652\":1}}],[\"removal\",{\"1\":{\"472\":1}}],[\"remote\",{\"1\":{\"111\":10,\"123\":1,\"652\":1,\"976\":1}}],[\"reentrantlock也可重入\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"reentrantlock也是独占锁\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"reentrantlock默认情况下也是非公平锁\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"reentrantlock\",{\"0\":{\"1063\":1,\"1261\":1},\"1\":{\"1062\":5,\"1260\":5,\"1480\":1}}],[\"region\",{\"1\":{\"1398\":2}}],[\"register\",{\"1\":{\"1478\":2}}],[\"registered\",{\"1\":{\"1173\":2,\"1350\":2}}],[\"registry\",{\"1\":{\"915\":2,\"948\":1,\"1049\":2,\"1250\":2}}],[\"regularly\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"regarded\",{\"1\":{\"41\":1}}],[\"redlock算法通过在多个redis实例上获取锁\",{\"1\":{\"1428\":1}}],[\"red\",{\"1\":{\"1402\":2}}],[\"redo\",{\"1\":{\"1142\":1,\"1177\":1,\"1325\":1,\"1354\":1}}],[\"reducenumber\",{\"1\":{\"889\":2,\"890\":1,\"891\":1,\"893\":1}}],[\"redert肝一篇maven\",{\"1\":{\"761\":1}}],[\"redirect\",{\"1\":{\"121\":1,\"123\":2,\"894\":1}}],[\"redis支持两种持久化方式\",{\"1\":{\"1430\":1}}],[\"redis支持多种压缩算法\",{\"1\":{\"1430\":1}}],[\"redis内存优化\",{\"0\":{\"1430\":1}}],[\"redis分布式锁\",{\"0\":{\"1428\":1}}],[\"redis分布式锁要注意哪几点\",{\"0\":{\"727\":1}}],[\"redis分布式锁要点注意\",{\"0\":{\"726\":1}}],[\"redis分片集群会使用一种叫做\",{\"1\":{\"1426\":1}}],[\"redis分片集群会自动进行重新分片\",{\"1\":{\"1426\":1}}],[\"redis分片集群\",{\"0\":{\"1426\":1}}],[\"redis主从架构是什么\",{\"1\":{\"1422\":1}}],[\"redis主从架构\",{\"0\":{\"1422\":1}}],[\"redisdb\",{\"1\":{\"1420\":1}}],[\"redisdesktop\",{\"1\":{\"706\":1}}],[\"redis提供了aof重写机制\",{\"1\":{\"1420\":1}}],[\"redis提供的哈希\",{\"1\":{\"657\":1}}],[\"redis重启时会重新执行aof文件中的命令来恢复数据\",{\"1\":{\"1420\":1}}],[\"redis持久化\",{\"0\":{\"1420\":1}}],[\"redis持久化有几种方式\",{\"0\":{\"1158\":1,\"1338\":1}}],[\"redis实现分布式锁要注意什么\",{\"0\":{\"1163\":1,\"1343\":1}}],[\"redis部署分为单节点\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"redis使用的是基于setnx命令的方式来实现分布式锁\",{\"1\":{\"1428\":1}}],[\"redis使用crc16算法对键进行哈希计算\",{\"1\":{\"1426\":1}}],[\"redis使用一种称为\",{\"1\":{\"1426\":1}}],[\"redis使用上如何做内存优化\",{\"0\":{\"1161\":1,\"1341\":1}}],[\"redis使用场景\",{\"0\":{\"657\":1}}],[\"redis篇\",{\"1\":{\"998\":1}}],[\"redis客户端\",{\"1\":{\"875\":1}}],[\"redis5\",{\"1\":{\"732\":1}}],[\"redis基础\",{\"0\":{\"1418\":1}}],[\"redis基础数据结构\",{\"0\":{\"714\":1}}],[\"redis基本类型使用场景都懂了\",{\"0\":{\"715\":1}}],[\"redispool\",{\"1\":{\"711\":1}}],[\"redisutil\",{\"1\":{\"711\":2}}],[\"redis可视化工具\",{\"1\":{\"706\":1}}],[\"redis之白银一\",{\"1\":{\"703\":1}}],[\"redis之青铜\",{\"1\":{\"675\":1}}],[\"redisobject\",{\"1\":{\"698\":5}}],[\"redis的rdb和aof双持久化方案\",{\"1\":{\"1420\":1}}],[\"redis的持久化方案用的真的很巧妙\",{\"1\":{\"1420\":1}}],[\"redis的优点很多\",{\"1\":{\"1418\":1}}],[\"redis的瓶颈最有可能是机器内存的大小或者网络带宽\",{\"1\":{\"1157\":1,\"1337\":1}}],[\"redis的对象\",{\"0\":{\"697\":1,\"698\":1}}],[\"redis的开发工作由vmware主持\",{\"1\":{\"652\":1}}],[\"redis中\",{\"1\":{\"684\":1}}],[\"redis中数据结构的对象\",{\"1\":{\"676\":1}}],[\"redis数据结构\",{\"0\":{\"680\":1}}],[\"redis数据结构解析\",{\"1\":{\"676\":1}}],[\"redis常用\",{\"0\":{\"671\":1}}],[\"redis>\",{\"1\":{\"667\":5,\"723\":6}}],[\"redis超时\",{\"1\":{\"666\":1}}],[\"redis就像一个可以持久化的memcached服务器\",{\"1\":{\"666\":1}}],[\"redis是一个高性能的内存数据库\",{\"1\":{\"1430\":1}}],[\"redis是内存数据库\",{\"1\":{\"1420\":1}}],[\"redis是串行执行命令\",{\"1\":{\"1163\":1,\"1343\":1}}],[\"redis是什么\",{\"0\":{\"1155\":1,\"1335\":1}}],[\"redis是非常优秀的缓存工具\",{\"1\":{\"664\":1}}],[\"redis是目前最热的缓存组件之一\",{\"1\":{\"650\":1}}],[\"redis哨兵\",{\"1\":{\"664\":1}}],[\"redis根目录下\",{\"1\":{\"660\":1}}],[\"redis列表结构\",{\"1\":{\"657\":1}}],[\"redis特性\",{\"0\":{\"653\":1}}],[\"redis入门\",{\"0\":{\"652\":1},\"1\":{\"649\":1}}],[\"redis版\",{\"0\":{\"394\":1}}],[\"redis\",{\"0\":{\"647\":1,\"665\":1,\"684\":1,\"685\":1,\"686\":1,\"688\":1,\"696\":1,\"705\":1,\"706\":1,\"707\":1,\"709\":1,\"711\":1,\"731\":1,\"1334\":1},\"1\":{\"395\":2,\"587\":1,\"650\":4,\"651\":1,\"652\":11,\"655\":4,\"656\":4,\"657\":8,\"660\":10,\"661\":4,\"663\":1,\"664\":3,\"665\":1,\"667\":5,\"668\":4,\"669\":4,\"670\":2,\"671\":2,\"676\":3,\"677\":5,\"678\":3,\"682\":6,\"685\":4,\"687\":6,\"689\":3,\"691\":3,\"692\":2,\"693\":1,\"695\":1,\"696\":2,\"698\":9,\"699\":5,\"704\":1,\"706\":2,\"710\":3,\"711\":1,\"715\":4,\"717\":2,\"718\":2,\"719\":1,\"721\":1,\"722\":2,\"723\":1,\"727\":3,\"734\":1,\"735\":2,\"737\":4,\"998\":1,\"1000\":4,\"1002\":2,\"1005\":3,\"1009\":1,\"1034\":1,\"1154\":3,\"1155\":1,\"1156\":1,\"1158\":3,\"1162\":1,\"1190\":3,\"1209\":4,\"1211\":2,\"1214\":3,\"1218\":1,\"1238\":1,\"1335\":1,\"1336\":1,\"1338\":3,\"1342\":1,\"1365\":3,\"1408\":2,\"1418\":5,\"1420\":9,\"1422\":9,\"1428\":6},\"2\":{\"81\":1,\"82\":1,\"398\":1,\"672\":1,\"673\":1,\"700\":1,\"701\":1,\"712\":1,\"713\":1,\"724\":1,\"725\":1,\"728\":1,\"729\":1,\"739\":1,\"740\":1,\"1166\":1}}],[\"ret\",{\"1\":{\"752\":4,\"1494\":3}}],[\"retention定义注解的生命周期\",{\"1\":{\"1402\":1}}],[\"retentionpolicy\",{\"1\":{\"751\":1,\"1049\":2,\"1250\":2,\"1402\":8}}],[\"retention\",{\"1\":{\"751\":1,\"1049\":5,\"1250\":5,\"1402\":8}}],[\"returned\",{\"1\":{\"853\":1}}],[\"returning\",{\"1\":{\"752\":1,\"1174\":1,\"1351\":1}}],[\"returnresource\",{\"1\":{\"711\":1}}],[\"returnjedis\",{\"1\":{\"711\":1}}],[\"return\",{\"0\":{\"190\":1},\"1\":{\"88\":1,\"89\":1,\"92\":1,\"93\":1,\"190\":3,\"191\":4,\"198\":4,\"200\":4,\"220\":1,\"306\":7,\"320\":2,\"337\":9,\"338\":13,\"339\":15,\"341\":12,\"342\":6,\"390\":6,\"393\":2,\"405\":5,\"406\":2,\"417\":1,\"441\":11,\"711\":4,\"752\":2,\"810\":9,\"816\":2,\"817\":2,\"826\":4,\"833\":2,\"842\":4,\"843\":2,\"847\":1,\"848\":1,\"849\":1,\"850\":1,\"856\":1,\"857\":1,\"858\":1,\"889\":5,\"892\":4,\"893\":10,\"894\":7,\"895\":1,\"912\":1,\"1001\":4,\"1042\":2,\"1049\":8,\"1058\":1,\"1173\":3,\"1210\":4,\"1243\":2,\"1250\":8,\"1256\":1,\"1350\":3,\"1382\":6,\"1386\":6,\"1390\":4,\"1404\":1,\"1412\":2,\"1416\":1,\"1422\":1,\"1424\":2,\"1428\":4,\"1462\":1,\"1466\":1,\"1474\":1,\"1476\":1,\"1480\":1,\"1481\":2,\"1494\":5}}],[\"reids\",{\"1\":{\"715\":1}}],[\"rehashing\",{\"1\":{\"687\":1}}],[\"rehashidx\",{\"1\":{\"687\":2,\"688\":4}}],[\"rehash\",{\"0\":{\"688\":1},\"1\":{\"687\":3,\"688\":7,\"689\":3,\"1386\":2}}],[\"recursions\",{\"1\":{\"1481\":2}}],[\"receivemessage\",{\"1\":{\"1444\":1}}],[\"received\",{\"1\":{\"1442\":1,\"1448\":1,\"1478\":1}}],[\"receive\",{\"1\":{\"1422\":1}}],[\"recently\",{\"1\":{\"1001\":1,\"1210\":1}}],[\"records`\",{\"1\":{\"1440\":2}}],[\"records\",{\"1\":{\"887\":2,\"1440\":7,\"1442\":2,\"1448\":2}}],[\"record\",{\"1\":{\"638\":1,\"1442\":2,\"1448\":2}}],[\"recipes\",{\"1\":{\"171\":1}}],[\"repeatappointexception\",{\"1\":{\"892\":4,\"893\":4,\"894\":2}}],[\"repeatable\",{\"1\":{\"638\":1,\"1144\":1,\"1177\":1,\"1327\":1,\"1354\":1}}],[\"repeat\",{\"1\":{\"892\":1,\"893\":2,\"894\":1}}],[\"repo\",{\"1\":{\"915\":2}}],[\"reporting\",{\"1\":{\"907\":2}}],[\"repo1\",{\"1\":{\"768\":1}}],[\"repository是本地仓库\",{\"1\":{\"765\":1}}],[\"repository\",{\"1\":{\"764\":1,\"765\":2,\"768\":1,\"1402\":2}}],[\"repl\",{\"1\":{\"1422\":1}}],[\"replstate\",{\"1\":{\"1422\":1}}],[\"reply\",{\"1\":{\"665\":1}}],[\"replicaofcommand\",{\"1\":{\"1422\":2}}],[\"replicas是怎么管理的\",{\"0\":{\"1117\":1,\"1305\":1}}],[\"replicas\",{\"1\":{\"1113\":3,\"1122\":1,\"1301\":3,\"1310\":1}}],[\"replication\",{\"1\":{\"664\":1,\"1035\":2,\"1239\":2,\"1444\":1}}],[\"replica可以分担搜索请求\",{\"1\":{\"475\":1}}],[\"replica保证数据不丢失\",{\"1\":{\"475\":1}}],[\"replica承担三个任务\",{\"1\":{\"475\":1}}],[\"replica就是shard的数据拷贝\",{\"1\":{\"475\":1}}],[\"replica\",{\"0\":{\"475\":1},\"1\":{\"475\":5,\"1116\":1,\"1117\":2,\"1304\":1,\"1305\":2,\"1438\":1,\"1452\":1,\"1460\":1}}],[\"replacestaleentry\",{\"1\":{\"1386\":1}}],[\"replaced\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"replaceall\",{\"1\":{\"939\":1}}],[\"replace\",{\"1\":{\"337\":3,\"338\":4,\"339\":4}}],[\"requires\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"required\",{\"1\":{\"912\":1,\"1177\":1,\"1354\":1,\"1422\":1}}],[\"requirepass\",{\"1\":{\"736\":1}}],[\"require\",{\"1\":{\"540\":5,\"541\":6,\"1042\":1,\"1243\":1}}],[\"requests\",{\"1\":{\"948\":1}}],[\"requestparam\",{\"1\":{\"894\":1,\"912\":2}}],[\"requestmethod\",{\"1\":{\"894\":3}}],[\"requestmapping\",{\"1\":{\"882\":1,\"894\":5,\"895\":1,\"912\":2,\"939\":3,\"1402\":2}}],[\"request\",{\"1\":{\"197\":1,\"220\":1,\"229\":1,\"297\":1,\"939\":4,\"1029\":1,\"1049\":4,\"1084\":1,\"1094\":1,\"1172\":1,\"1233\":1,\"1250\":4,\"1277\":1,\"1287\":1,\"1349\":1,\"1410\":1,\"1414\":4,\"1494\":1}}],[\"req\",{\"1\":{\"220\":2,\"229\":2}}],[\"refused\",{\"1\":{\"1422\":1}}],[\"refusing\",{\"1\":{\"441\":1}}],[\"ref\",{\"1\":{\"884\":1}}],[\"ref=\",{\"1\":{\"878\":1,\"881\":1,\"884\":1}}],[\"refid=\",{\"1\":{\"787\":1,\"845\":5}}],[\"reflect\",{\"1\":{\"752\":2,\"1050\":1,\"1251\":1}}],[\"refcount\",{\"1\":{\"698\":3}}],[\"refman\",{\"1\":{\"589\":1,\"590\":3,\"611\":1}}],[\"referring\",{\"1\":{\"567\":1}}],[\"references\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"reference\",{\"1\":{\"297\":1,\"472\":1,\"484\":1,\"510\":1,\"698\":1,\"1173\":2,\"1350\":2}}],[\"referer\",{\"1\":{\"123\":2,\"1094\":1,\"1287\":1}}],[\"refresh\",{\"1\":{\"510\":2,\"1028\":1,\"1232\":1,\"1408\":2}}],[\"refactoredconditionexample\",{\"1\":{\"198\":1}}],[\"reserved\",{\"1\":{\"1481\":2}}],[\"reset\",{\"0\":{\"981\":1},\"1\":{\"981\":3}}],[\"resize的过程中\",{\"1\":{\"1380\":1}}],[\"resize的实现过程主要分为以下几步\",{\"1\":{\"1380\":1}}],[\"resize\",{\"1\":{\"1380\":1,\"1406\":1}}],[\"resolveviewname\",{\"1\":{\"1414\":1}}],[\"resolvebeforeinstantiation\",{\"1\":{\"1412\":1}}],[\"resolving\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"resouces\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"resourceentityresolver\",{\"1\":{\"1408\":1}}],[\"resourceloader\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"resource\",{\"1\":{\"809\":2,\"810\":2,\"820\":2,\"826\":2,\"829\":2,\"1093\":1,\"1286\":1,\"1408\":1}}],[\"resource=\",{\"1\":{\"808\":1,\"818\":2,\"826\":3,\"829\":1,\"835\":5,\"845\":1}}],[\"resources\",{\"1\":{\"776\":4,\"809\":1,\"810\":2,\"820\":2,\"826\":2,\"872\":1,\"879\":1,\"884\":1,\"928\":1}}],[\"responsible\",{\"1\":{\"1481\":2}}],[\"responsibility\",{\"1\":{\"169\":1}}],[\"responseentity\",{\"1\":{\"1494\":4}}],[\"responseentity<apiresponse<user>>\",{\"1\":{\"1494\":1}}],[\"responsestatus\",{\"1\":{\"1494\":7}}],[\"response\",{\"1\":{\"939\":4,\"1049\":6,\"1084\":1,\"1250\":6,\"1277\":1,\"1414\":2,\"1422\":1}}],[\"responsebody\",{\"1\":{\"894\":2}}],[\"responsebody等\",{\"1\":{\"882\":1}}],[\"resutltype无法帮助我们自动的去完成映射\",{\"1\":{\"860\":1}}],[\"results\",{\"1\":{\"1462\":3}}],[\"resultsethandler\",{\"1\":{\"833\":1}}],[\"resultset\",{\"1\":{\"800\":2,\"1133\":1,\"1318\":1}}],[\"resulting\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"result<>\",{\"1\":{\"894\":1}}],[\"result<appointexecution>\",{\"1\":{\"894\":2}}],[\"result<t>\",{\"1\":{\"893\":1}}],[\"resultmap的继承\",{\"0\":{\"859\":1}}],[\"resultmap>\",{\"1\":{\"856\":1,\"857\":1,\"858\":1,\"860\":1}}],[\"resultmap=\",{\"1\":{\"845\":2,\"856\":1,\"857\":1,\"858\":1}}],[\"resultmap\",{\"0\":{\"844\":1},\"1\":{\"826\":1,\"838\":1}}],[\"resulttype=\",{\"1\":{\"807\":1,\"818\":3,\"822\":1,\"826\":4,\"842\":7,\"843\":2,\"845\":2,\"847\":1,\"848\":1,\"849\":1,\"850\":1,\"856\":1,\"890\":3,\"1132\":1,\"1317\":1,\"1416\":2}}],[\"resulttype\",{\"1\":{\"807\":1,\"818\":1,\"826\":1,\"838\":1,\"890\":1}}],[\"result++\",{\"1\":{\"338\":1,\"339\":6}}],[\"result\",{\"1\":{\"111\":2,\"220\":1,\"338\":8,\"339\":12,\"752\":2,\"892\":1,\"893\":4,\"894\":1,\"1041\":1,\"1242\":1,\"1416\":2,\"1468\":1,\"1474\":2,\"1494\":1}}],[\"restcontroller\",{\"1\":{\"894\":1,\"912\":2,\"1049\":2,\"1250\":2,\"1402\":1}}],[\"rest\",{\"1\":{\"465\":1,\"513\":1,\"1188\":1,\"1363\":1}}],[\"restful\",{\"1\":{\"453\":1,\"984\":1}}],[\"restart\",{\"1\":{\"296\":1,\"915\":1}}],[\"res\",{\"1\":{\"406\":4}}],[\"re\",{\"1\":{\"163\":1}}],[\"relay\",{\"1\":{\"1142\":1,\"1325\":1}}],[\"relativepath允许你选择一个不同的位置\",{\"1\":{\"778\":1}}],[\"relativepath\",{\"1\":{\"778\":1}}],[\"relativepath>\",{\"1\":{\"778\":1}}],[\"relations\",{\"1\":{\"510\":2}}],[\"reload\",{\"1\":{\"915\":1}}],[\"release<\",{\"1\":{\"772\":1,\"773\":1,\"778\":1,\"875\":1}}],[\"release\",{\"1\":{\"766\":1,\"1390\":2,\"1428\":1,\"1481\":1}}],[\"releaseshared\",{\"1\":{\"1390\":1}}],[\"releases\",{\"1\":{\"142\":1,\"461\":1,\"465\":1,\"467\":1,\"660\":1,\"661\":1}}],[\"relieve\",{\"1\":{\"169\":1}}],[\"reliable\",{\"1\":{\"129\":1}}],[\"reactor\",{\"1\":{\"1408\":1}}],[\"reactor线程模型的思想就是基于io复用和线程池的结合\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"reactor模型是什么\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"reash\",{\"1\":{\"688\":1}}],[\"rear+1\",{\"1\":{\"341\":1}}],[\"rear\",{\"1\":{\"341\":11,\"342\":7}}],[\"rear=maxsize\",{\"1\":{\"341\":1}}],[\"ready\",{\"1\":{\"1057\":2,\"1255\":2}}],[\"readobject\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"reader\",{\"1\":{\"829\":2,\"1408\":2}}],[\"readdisk\",{\"1\":{\"320\":1}}],[\"readme\",{\"1\":{\"176\":1,\"974\":2}}],[\"read\",{\"1\":{\"123\":1,\"160\":2,\"635\":2,\"636\":1,\"638\":3,\"1144\":3,\"1177\":3,\"1327\":3,\"1354\":3,\"1478\":2}}],[\"real\",{\"1\":{\"123\":2}}],[\"renew\",{\"1\":{\"103\":1}}],[\"r\",{\"1\":{\"33\":3,\"111\":2,\"123\":1,\"144\":1,\"158\":3,\"162\":3,\"176\":2,\"424\":2,\"425\":2,\"558\":1,\"1064\":1,\"1262\":1,\"1382\":3}}],[\"right\",{\"1\":{\"33\":3,\"169\":1,\"417\":4}}],[\"^0\",{\"1\":{\"540\":1,\"541\":1}}],[\"^7\",{\"1\":{\"305\":1}}],[\"^\",{\"1\":{\"33\":1,\"441\":3}}],[\"^i\",{\"1\":{\"33\":1}}],[\"^r\",{\"1\":{\"33\":2}}],[\"1a\",{\"1\":{\"1476\":1}}],[\"1和all\",{\"1\":{\"1452\":1}}],[\"1和http2\",{\"0\":{\"1095\":1,\"1288\":1}}],[\"1标记阶段标记垃圾\",{\"1\":{\"1394\":1}}],[\"1<\",{\"1\":{\"772\":1,\"773\":1,\"875\":1,\"907\":1}}],[\"1l\",{\"1\":{\"441\":8,\"800\":1}}],[\"1位标识\",{\"1\":{\"441\":1}}],[\"1位\",{\"1\":{\"440\":1}}],[\"1次\",{\"1\":{\"417\":1}}],[\"1=1\",{\"1\":{\"417\":1}}],[\"1=5\",{\"1\":{\"417\":1}}],[\"1=localhost\",{\"1\":{\"174\":1}}],[\"1个元素重新构造成一个堆\",{\"1\":{\"417\":1}}],[\"1≤i≤n\",{\"1\":{\"417\":1}}],[\"1那种\",{\"1\":{\"386\":1,\"392\":1}}],[\"180\",{\"1\":{\"492\":1}}],[\"18\",{\"0\":{\"574\":1,\"606\":1},\"1\":{\"341\":1,\"342\":1,\"382\":1,\"556\":1,\"670\":1,\"822\":2,\"852\":12,\"853\":2,\"875\":1,\"891\":1,\"1494\":1,\"1507\":1}}],[\"1~\",{\"1\":{\"316\":3}}],[\"1代表桌面\",{\"1\":{\"162\":1}}],[\"1m\",{\"1\":{\"123\":1,\"948\":1}}],[\"1h\",{\"1\":{\"123\":2}}],[\"1k\",{\"1\":{\"123\":1}}],[\"17<\",{\"1\":{\"772\":1}}],[\"17版本\",{\"1\":{\"772\":1}}],[\"17\",{\"0\":{\"573\":1,\"605\":1},\"1\":{\"111\":1,\"498\":2,\"661\":3,\"670\":1,\"772\":1,\"852\":25,\"853\":10,\"863\":1}}],[\"16¥\",{\"1\":{\"1492\":1}}],[\"16383\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"169\",{\"1\":{\"928\":1}}],[\"16版本\",{\"1\":{\"772\":1}}],[\"16611295681062\",{\"1\":{\"928\":1}}],[\"166\",{\"1\":{\"723\":1}}],[\"166274\",{\"1\":{\"723\":1}}],[\"1628\",{\"1\":{\"176\":1}}],[\"16k\",{\"1\":{\"123\":1}}],[\"16\",{\"0\":{\"572\":1,\"604\":1},\"1\":{\"111\":1,\"250\":1,\"319\":1,\"382\":1,\"670\":1,\"721\":1,\"820\":1,\"848\":1,\"887\":1,\"892\":4,\"893\":3,\"1001\":1,\"1061\":1,\"1162\":1,\"1210\":1,\"1259\":1,\"1342\":1,\"1386\":2}}],[\"168\",{\"1\":{\"111\":1,\"123\":7}}],[\"15s\",{\"1\":{\"950\":2}}],[\"15s开始向后6s\",{\"1\":{\"146\":1}}],[\"150\",{\"1\":{\"928\":6}}],[\"156\",{\"1\":{\"852\":1}}],[\"1516\",{\"1\":{\"723\":1}}],[\"152\",{\"1\":{\"266\":1,\"666\":1}}],[\"1534\",{\"1\":{\"176\":1}}],[\"15d\",{\"1\":{\"123\":1}}],[\"15\",{\"0\":{\"571\":1,\"603\":1},\"1\":{\"111\":1,\"123\":2,\"146\":1,\"153\":1,\"163\":1,\"390\":1,\"405\":1,\"621\":1,\"669\":1,\"670\":1,\"721\":2,\"723\":1,\"751\":1,\"752\":1,\"852\":12,\"853\":2,\"950\":2,\"1064\":1,\"1262\":1}}],[\"14231428021\",{\"1\":{\"1494\":1}}],[\"1489111610226l\",{\"1\":{\"441\":1}}],[\"1415\",{\"1\":{\"414\":1}}],[\"14tmfik7m\",{\"1\":{\"250\":1}}],[\"14\",{\"0\":{\"570\":1,\"602\":1,\"862\":1,\"863\":1,\"864\":1},\"1\":{\"111\":1,\"123\":2,\"174\":3,\"382\":1,\"428\":5,\"430\":2,\"668\":1,\"669\":1,\"670\":1,\"1062\":1,\"1260\":1}}],[\"1d\",{\"1\":{\"111\":1}}],[\"136294283\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"1384083044983\",{\"1\":{\"928\":1}}],[\"130\",{\"1\":{\"928\":1}}],[\"13084517\",{\"1\":{\"153\":1}}],[\"135\",{\"1\":{\"928\":1}}],[\"13<\",{\"1\":{\"907\":1}}],[\"1392757660167\",{\"1\":{\"928\":1}}],[\"139320266\",{\"1\":{\"296\":1}}],[\"139744309\",{\"1\":{\"296\":1}}],[\"131709720\",{\"1\":{\"277\":1}}],[\"13\",{\"0\":{\"163\":1,\"569\":1,\"601\":1,\"644\":1,\"861\":1},\"1\":{\"111\":1,\"153\":1,\"176\":1,\"341\":1,\"405\":1,\"615\":1,\"668\":1,\"669\":1,\"670\":1,\"723\":1,\"852\":11,\"853\":2,\"961\":1,\"1061\":1,\"1176\":1,\"1259\":1,\"1353\":1}}],[\"124781454\",{\"1\":{\"987\":1}}],[\"124857707\",{\"1\":{\"738\":1}}],[\"12<\",{\"1\":{\"819\":1,\"875\":2}}],[\"12k\",{\"1\":{\"722\":1}}],[\"12+5\",{\"1\":{\"441\":1}}],[\"12l\",{\"1\":{\"441\":1}}],[\"12位的计数顺序号支持每个节点每毫秒\",{\"1\":{\"441\":1}}],[\"12位序列\",{\"1\":{\"441\":1}}],[\"12位\",{\"1\":{\"440\":2}}],[\"127\",{\"1\":{\"123\":10,\"176\":1,\"293\":1,\"296\":1,\"654\":1,\"660\":1,\"711\":1,\"717\":1,\"718\":2,\"722\":3,\"753\":2,\"800\":1,\"806\":2,\"808\":1,\"951\":1,\"1042\":3,\"1243\":3}}],[\"122\",{\"1\":{\"123\":1,\"183\":1}}],[\"121\",{\"1\":{\"123\":1}}],[\"1280x720\",{\"1\":{\"163\":1}}],[\"128kbps\",{\"1\":{\"151\":1}}],[\"128k\",{\"1\":{\"123\":1}}],[\"128\",{\"1\":{\"123\":1,\"306\":2,\"852\":1,\"1042\":4,\"1243\":4}}],[\"12345678910l\",{\"1\":{\"891\":2,\"893\":1}}],[\"123456\",{\"1\":{\"711\":1,\"799\":2,\"800\":1,\"806\":2,\"808\":1,\"820\":1,\"822\":1,\"826\":3,\"849\":1,\"852\":6,\"853\":2,\"1133\":1,\"1318\":1}}],[\"1234\",{\"1\":{\"497\":1}}],[\"123\",{\"1\":{\"111\":3,\"123\":1,\"183\":1,\"492\":1}}],[\"12\",{\"0\":{\"162\":1,\"568\":1,\"600\":1,\"643\":1,\"854\":1,\"855\":1,\"856\":1,\"857\":1,\"858\":1,\"859\":1,\"860\":1,\"1095\":1,\"1288\":1},\"1\":{\"111\":2,\"341\":1,\"342\":1,\"382\":1,\"440\":1,\"459\":2,\"497\":1,\"668\":1,\"669\":1,\"670\":1,\"722\":1,\"887\":1,\"912\":1,\"1176\":1,\"1353\":1}}],[\"12084012\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"120284492\",{\"1\":{\"328\":1}}],[\"120\",{\"1\":{\"111\":1}}],[\"11228555\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"11248192\",{\"1\":{\"691\":1}}],[\"110\",{\"1\":{\"806\":2,\"928\":4}}],[\"110000次\",{\"1\":{\"654\":1,\"1418\":1}}],[\"115556\",{\"1\":{\"723\":1}}],[\"11306690\",{\"1\":{\"696\":1}}],[\"11434\",{\"1\":{\"293\":2,\"294\":2}}],[\"11条军规\",{\"1\":{\"203\":1}}],[\"11\",{\"0\":{\"159\":1,\"160\":1,\"161\":1,\"200\":1,\"214\":1,\"567\":1,\"599\":1,\"639\":1,\"640\":1,\"641\":1,\"642\":1,\"778\":1,\"779\":1,\"851\":1,\"852\":1,\"853\":1,\"1035\":1,\"1036\":1,\"1094\":1,\"1240\":1,\"1287\":1},\"1\":{\"111\":1,\"390\":1,\"668\":1,\"669\":1,\"670\":1,\"789\":1,\"855\":2,\"858\":6,\"887\":1}}],[\"10485760\",{\"1\":{\"1440\":1}}],[\"10道不得不会的springboot面试题\",{\"1\":{\"1010\":1,\"1021\":1,\"1037\":1,\"1051\":1,\"1065\":1,\"1080\":1,\"1095\":1,\"1109\":1,\"1125\":1,\"1138\":1,\"1151\":1,\"1164\":1,\"1177\":1,\"1190\":1,\"1203\":1}}],[\"10道不得不会的spring面试题\",{\"0\":{\"1167\":1},\"1\":{\"984\":1,\"993\":1,\"1010\":1,\"1021\":1,\"1037\":1,\"1051\":1,\"1065\":1,\"1080\":1,\"1095\":1,\"1109\":1,\"1125\":1,\"1138\":1,\"1151\":1,\"1164\":1,\"1167\":1,\"1177\":1,\"1190\":1,\"1203\":1}}],[\"10道不得不会的缓存面试题\",{\"0\":{\"998\":1},\"1\":{\"1010\":1,\"1021\":1,\"1037\":1,\"1051\":1,\"1065\":1,\"1080\":1,\"1095\":1,\"1109\":1,\"1125\":1,\"1138\":1,\"1151\":1,\"1164\":1,\"1177\":1,\"1190\":1,\"1203\":1}}],[\"10道不得不会的netty面试题\",{\"1\":{\"984\":1,\"993\":1}}],[\"10道不得不会的docker面试题\",{\"1\":{\"984\":1,\"993\":1,\"1010\":1,\"1021\":1,\"1037\":1,\"1051\":1,\"1065\":1,\"1080\":1,\"1095\":1,\"1109\":1,\"1125\":1,\"1138\":1,\"1151\":1,\"1164\":1,\"1177\":1,\"1190\":1,\"1203\":1}}],[\"10道不得不会的zookeeper面试题\",{\"1\":{\"984\":1,\"993\":1,\"1010\":1,\"1021\":1,\"1037\":1,\"1051\":1,\"1065\":1,\"1080\":1,\"1095\":1,\"1109\":1,\"1125\":1,\"1138\":1,\"1151\":1,\"1164\":1,\"1177\":1,\"1190\":1,\"1203\":1}}],[\"10道不得不会的kafka面试题\",{\"1\":{\"984\":1,\"993\":1,\"1010\":1,\"1021\":1,\"1037\":1,\"1051\":1,\"1065\":1,\"1080\":1,\"1095\":1,\"1109\":1,\"1125\":1,\"1138\":1,\"1151\":1,\"1164\":1,\"1177\":1,\"1190\":1,\"1203\":1}}],[\"10道不得不会的redis面试题\",{\"0\":{\"1154\":1},\"1\":{\"984\":1,\"993\":1,\"1010\":1,\"1021\":1,\"1037\":1,\"1051\":1,\"1065\":1,\"1080\":1,\"1095\":1,\"1109\":1,\"1125\":1,\"1138\":1,\"1151\":1,\"1164\":1,\"1177\":1,\"1190\":1,\"1203\":1}}],[\"10道不得不会的elasticsearch面试题\",{\"0\":{\"1024\":1},\"1\":{\"984\":1,\"993\":1,\"1010\":1,\"1021\":1,\"1024\":1,\"1037\":1,\"1051\":1,\"1065\":1,\"1080\":1,\"1095\":1,\"1109\":1,\"1125\":1,\"1138\":1,\"1151\":1,\"1164\":1,\"1177\":1,\"1190\":1,\"1203\":1}}],[\"10道不得不会的mybatis面试题\",{\"1\":{\"984\":1,\"993\":1,\"1010\":1,\"1021\":1,\"1037\":1,\"1051\":1,\"1065\":1,\"1080\":1,\"1095\":1,\"1109\":1,\"1125\":1,\"1138\":1,\"1151\":1,\"1164\":1,\"1177\":1,\"1190\":1,\"1203\":1}}],[\"10道不得不会的mysql基础面试题\",{\"0\":{\"1141\":1},\"1\":{\"984\":1,\"993\":1,\"1010\":1,\"1021\":1,\"1037\":1,\"1051\":1,\"1065\":1,\"1080\":1,\"1095\":1,\"1109\":1,\"1125\":1,\"1138\":1,\"1141\":1,\"1151\":1,\"1164\":1,\"1177\":1,\"1190\":1,\"1203\":1}}],[\"10道不得不会的jvm面试题\",{\"0\":{\"1098\":1},\"1\":{\"984\":1,\"993\":1,\"1010\":1,\"1021\":1,\"1037\":1,\"1051\":1,\"1065\":1,\"1080\":1,\"1095\":1,\"1098\":1,\"1109\":1,\"1125\":1,\"1138\":1,\"1151\":1,\"1164\":1,\"1177\":1,\"1190\":1,\"1203\":1}}],[\"10道不得不会的java容器面试题\",{\"0\":{\"1068\":1},\"1\":{\"1010\":1,\"1021\":1,\"1037\":1,\"1051\":1,\"1065\":1,\"1068\":1,\"1080\":1,\"1095\":1,\"1109\":1,\"1125\":1,\"1138\":1,\"1151\":1,\"1164\":1,\"1177\":1,\"1190\":1,\"1203\":1}}],[\"10道不得不会的javaee面试题\",{\"1\":{\"984\":1,\"993\":1,\"1010\":1,\"1021\":1,\"1037\":1,\"1051\":1,\"1065\":1,\"1080\":1,\"1095\":1,\"1109\":1,\"1125\":1,\"1138\":1,\"1151\":1,\"1164\":1,\"1177\":1,\"1190\":1,\"1203\":1}}],[\"10道不得不会的java并发基础面试题\",{\"0\":{\"1054\":1},\"1\":{\"984\":1,\"993\":1,\"1010\":1,\"1021\":1,\"1037\":1,\"1051\":1,\"1054\":1,\"1065\":1,\"1080\":1,\"1095\":1,\"1109\":1,\"1125\":1,\"1138\":1,\"1151\":1,\"1164\":1,\"1177\":1,\"1190\":1,\"1203\":1}}],[\"10道不得不会的java基础面试题\",{\"0\":{\"1040\":1},\"1\":{\"984\":1,\"993\":1,\"1010\":1,\"1021\":1,\"1037\":1,\"1040\":1,\"1051\":1,\"1065\":1,\"1080\":1,\"1095\":1,\"1109\":1,\"1125\":1,\"1138\":1,\"1151\":1,\"1164\":1,\"1177\":1,\"1190\":1,\"1203\":1}}],[\"10道不得不会的\",{\"0\":{\"983\":1,\"987\":1,\"1013\":1,\"1083\":1,\"1112\":1,\"1128\":1,\"1180\":1,\"1193\":1},\"1\":{\"983\":1,\"987\":1,\"998\":1,\"1013\":1,\"1083\":1,\"1112\":1,\"1128\":1,\"1154\":1,\"1180\":1,\"1193\":1}}],[\"10s\",{\"1\":{\"950\":1}}],[\"10<\",{\"1\":{\"778\":1}}],[\"103\",{\"1\":{\"723\":1}}],[\"103z\",{\"1\":{\"492\":1}}],[\"102\",{\"1\":{\"666\":1}}],[\"1024\",{\"1\":{\"123\":1,\"440\":1,\"711\":1,\"1478\":1}}],[\"101\",{\"1\":{\"666\":1}}],[\"10位的数据机器位\",{\"1\":{\"441\":1}}],[\"10位\",{\"1\":{\"440\":1}}],[\"10^7\",{\"1\":{\"305\":1}}],[\"1089\",{\"1\":{\"176\":1}}],[\"1056\",{\"1\":{\"176\":1}}],[\"10d\",{\"1\":{\"123\":1}}],[\"10mb\",{\"1\":{\"1440\":1}}],[\"10m\",{\"1\":{\"123\":2}}],[\"106\",{\"1\":{\"111\":1}}],[\"10\",{\"0\":{\"158\":1,\"199\":1,\"213\":1,\"303\":1,\"566\":1,\"598\":1,\"638\":1,\"846\":1,\"847\":1,\"848\":1,\"849\":1,\"850\":1,\"1008\":1,\"1031\":2,\"1034\":1,\"1050\":1,\"1064\":1,\"1079\":1,\"1093\":1,\"1108\":1,\"1124\":1,\"1138\":1,\"1177\":1,\"1190\":1,\"1217\":1,\"1235\":2,\"1239\":1,\"1251\":1,\"1262\":1,\"1274\":1,\"1286\":1,\"1299\":1,\"1312\":1,\"1323\":1,\"1354\":1,\"1365\":1},\"1\":{\"111\":1,\"158\":1,\"210\":1,\"270\":1,\"303\":2,\"304\":1,\"305\":3,\"306\":1,\"319\":1,\"338\":1,\"382\":1,\"412\":2,\"430\":5,\"440\":3,\"619\":1,\"621\":1,\"666\":3,\"668\":1,\"669\":1,\"670\":1,\"718\":1,\"788\":1,\"789\":1,\"799\":1,\"852\":8,\"858\":3,\"878\":1,\"984\":1,\"1029\":2,\"1113\":1,\"1134\":3,\"1138\":1,\"1233\":2,\"1301\":1,\"1319\":3,\"1323\":1,\"1404\":1,\"1440\":2}}],[\"1003\",{\"1\":{\"894\":1}}],[\"100491744\",{\"1\":{\"583\":1}}],[\"100g\",{\"1\":{\"578\":1}}],[\"10000个partition\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"10000\",{\"1\":{\"711\":2,\"858\":1,\"878\":1}}],[\"100000\",{\"1\":{\"654\":1}}],[\"1000000+\",{\"1\":{\"441\":1}}],[\"10000000\",{\"1\":{\"306\":1}}],[\"1000w\",{\"1\":{\"578\":1}}],[\"1000l\",{\"1\":{\"441\":1}}],[\"1000\",{\"1\":{\"440\":1,\"665\":3,\"891\":4,\"893\":1,\"1061\":1,\"1259\":1,\"1448\":1,\"1466\":1}}],[\"100一次就能筛选走四分之三的数据\",{\"1\":{\"319\":1}}],[\"100个数\",{\"1\":{\"319\":1}}],[\"100w+\",{\"1\":{\"263\":1}}],[\"1002\",{\"1\":{\"214\":1,\"564\":1}}],[\"1001\",{\"1\":{\"214\":1,\"893\":1}}],[\"100\",{\"1\":{\"72\":1,\"157\":1,\"263\":2,\"267\":1,\"316\":3,\"319\":1,\"430\":2,\"493\":1,\"540\":1,\"541\":1,\"563\":1,\"574\":1,\"666\":2,\"698\":2,\"833\":1,\"887\":1,\"928\":3,\"1042\":2,\"1062\":2,\"1243\":2,\"1260\":2,\"1416\":1,\"1440\":2,\"1442\":1}}],[\"100本豆瓣高分必读书单\",{\"0\":{\"56\":1}}],[\"190\",{\"1\":{\"928\":2}}],[\"1999\",{\"1\":{\"928\":1}}],[\"1993\",{\"1\":{\"799\":1,\"822\":1}}],[\"1990\",{\"1\":{\"799\":1,\"820\":1}}],[\"1996年\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"1996\",{\"1\":{\"255\":1,\"261\":1,\"1044\":2,\"1245\":2}}],[\"19765415\",{\"1\":{\"791\":1}}],[\"1970\",{\"1\":{\"498\":1}}],[\"1937\",{\"1\":{\"176\":1}}],[\"1935\",{\"1\":{\"163\":1}}],[\"19\",{\"0\":{\"607\":1},\"1\":{\"111\":1,\"341\":1,\"342\":1,\"492\":1,\"670\":1,\"858\":2}}],[\"192\",{\"1\":{\"111\":1,\"123\":7}}],[\"19a1w3chladtnsslhtteh8q\",{\"1\":{\"56\":1}}],[\"19th\",{\"1\":{\"36\":1}}],[\"1\",{\"0\":{\"99\":1,\"139\":1,\"141\":1,\"144\":1,\"146\":1,\"155\":1,\"160\":1,\"168\":1,\"169\":1,\"170\":1,\"174\":1,\"190\":1,\"204\":1,\"239\":1,\"316\":1,\"384\":2,\"385\":3,\"386\":2,\"387\":2,\"388\":1,\"389\":1,\"390\":1,\"391\":1,\"392\":2,\"393\":1,\"395\":1,\"401\":1,\"403\":1,\"410\":2,\"411\":1,\"413\":1,\"414\":1,\"422\":1,\"423\":2,\"424\":1,\"425\":1,\"427\":1,\"430\":1,\"557\":1,\"589\":1,\"616\":1,\"618\":1,\"640\":1,\"651\":1,\"654\":1,\"659\":1,\"660\":2,\"661\":1,\"664\":1,\"677\":1,\"681\":1,\"682\":2,\"683\":1,\"687\":1,\"691\":1,\"695\":1,\"698\":1,\"705\":1,\"706\":2,\"709\":1,\"710\":2,\"711\":1,\"734\":1,\"749\":1,\"762\":1,\"764\":1,\"766\":1,\"769\":1,\"774\":1,\"778\":1,\"786\":1,\"788\":1,\"796\":1,\"797\":2,\"798\":1,\"799\":1,\"800\":1,\"801\":1,\"805\":1,\"813\":1,\"816\":1,\"824\":1,\"829\":1,\"837\":1,\"838\":2,\"839\":1,\"840\":1,\"841\":1,\"847\":1,\"852\":1,\"855\":1,\"863\":1,\"959\":1,\"984\":1,\"988\":1,\"999\":1,\"1014\":1,\"1025\":1,\"1041\":1,\"1055\":1,\"1069\":1,\"1078\":1,\"1084\":1,\"1099\":1,\"1115\":1,\"1129\":1,\"1142\":1,\"1155\":1,\"1168\":1,\"1181\":1,\"1194\":1,\"1208\":1,\"1220\":1,\"1229\":1,\"1242\":1,\"1253\":1,\"1264\":1,\"1273\":1,\"1277\":1,\"1290\":1,\"1303\":1,\"1314\":1,\"1325\":1,\"1335\":1,\"1345\":1,\"1356\":1,\"1367\":1,\"1514\":1,\"1522\":1},\"1\":{\"33\":1,\"34\":1,\"42\":2,\"44\":2,\"85\":1,\"86\":1,\"111\":1,\"123\":17,\"142\":3,\"151\":2,\"155\":2,\"157\":1,\"158\":2,\"160\":4,\"162\":4,\"163\":1,\"170\":1,\"176\":10,\"183\":6,\"200\":2,\"223\":1,\"238\":2,\"293\":1,\"296\":1,\"306\":9,\"316\":1,\"318\":1,\"319\":1,\"323\":4,\"337\":1,\"338\":8,\"339\":4,\"341\":7,\"342\":5,\"390\":2,\"392\":3,\"393\":1,\"404\":1,\"405\":9,\"406\":3,\"412\":6,\"413\":5,\"414\":1,\"417\":6,\"428\":2,\"430\":2,\"440\":8,\"441\":1,\"459\":5,\"473\":1,\"482\":1,\"484\":1,\"487\":1,\"489\":8,\"492\":2,\"493\":1,\"504\":1,\"510\":4,\"540\":1,\"541\":1,\"588\":1,\"592\":2,\"595\":1,\"598\":1,\"619\":2,\"636\":5,\"642\":1,\"654\":1,\"657\":1,\"660\":1,\"666\":5,\"667\":8,\"668\":2,\"669\":2,\"670\":3,\"682\":1,\"683\":1,\"687\":4,\"688\":5,\"692\":1,\"711\":3,\"717\":1,\"718\":3,\"721\":9,\"722\":5,\"726\":1,\"727\":1,\"751\":2,\"752\":2,\"753\":3,\"764\":1,\"765\":1,\"766\":2,\"767\":2,\"771\":2,\"772\":2,\"773\":1,\"778\":4,\"786\":2,\"788\":2,\"789\":4,\"790\":4,\"798\":1,\"799\":2,\"800\":3,\"806\":3,\"807\":1,\"808\":2,\"810\":2,\"814\":2,\"818\":1,\"820\":4,\"826\":6,\"842\":3,\"845\":1,\"848\":1,\"849\":1,\"850\":1,\"852\":26,\"853\":6,\"858\":6,\"863\":5,\"864\":1,\"870\":1,\"875\":8,\"878\":2,\"880\":1,\"881\":1,\"882\":4,\"883\":3,\"884\":1,\"890\":3,\"892\":2,\"893\":1,\"900\":1,\"901\":1,\"902\":1,\"907\":2,\"912\":1,\"917\":1,\"918\":1,\"925\":1,\"928\":1,\"950\":2,\"951\":1,\"979\":2,\"1001\":5,\"1004\":4,\"1006\":4,\"1025\":1,\"1028\":4,\"1029\":2,\"1034\":3,\"1042\":1,\"1043\":3,\"1045\":1,\"1049\":1,\"1056\":2,\"1057\":1,\"1061\":10,\"1062\":3,\"1064\":2,\"1074\":2,\"1079\":1,\"1095\":1,\"1108\":1,\"1119\":1,\"1120\":5,\"1123\":1,\"1124\":1,\"1133\":2,\"1147\":1,\"1150\":1,\"1168\":1,\"1169\":1,\"1173\":1,\"1174\":1,\"1176\":3,\"1177\":1,\"1210\":5,\"1213\":4,\"1215\":4,\"1229\":1,\"1232\":4,\"1233\":2,\"1238\":3,\"1243\":1,\"1244\":3,\"1246\":1,\"1250\":1,\"1254\":2,\"1255\":1,\"1259\":10,\"1260\":3,\"1262\":2,\"1269\":2,\"1274\":1,\"1288\":1,\"1299\":1,\"1307\":1,\"1308\":5,\"1311\":1,\"1312\":1,\"1318\":2,\"1330\":1,\"1333\":1,\"1345\":1,\"1346\":1,\"1350\":1,\"1351\":1,\"1353\":3,\"1354\":1,\"1380\":3,\"1382\":1,\"1386\":5,\"1390\":6,\"1392\":1,\"1404\":1,\"1406\":2,\"1410\":2,\"1416\":1,\"1420\":1,\"1424\":4,\"1440\":1,\"1456\":1,\"1476\":1,\"1478\":1,\"1480\":1,\"1492\":1,\"1494\":5,\"1507\":1,\"1514\":3,\"1515\":2,\"1524\":1}}],[\"illegalstateexception\",{\"1\":{\"1408\":1}}],[\"illegalargumentexception\",{\"1\":{\"199\":1,\"441\":2}}],[\"i4\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"i3==i4\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"i3\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"i2\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"i1==i2\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"i1\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"ibatis\",{\"1\":{\"810\":4,\"817\":1,\"820\":4,\"825\":4,\"826\":4,\"842\":3,\"852\":6,\"853\":4,\"889\":2,\"1507\":1}}],[\"ix\",{\"1\":{\"620\":1}}],[\"ignore来避免违反唯一约束时产生的错误\",{\"1\":{\"640\":1}}],[\"ignore\",{\"1\":{\"493\":4,\"640\":1,\"890\":2}}],[\"ik\",{\"1\":{\"464\":1,\"465\":5,\"466\":1,\"493\":2}}],[\"ik分词器插件安装\",{\"0\":{\"465\":1},\"1\":{\"447\":1}}],[\"ietf\",{\"1\":{\"438\":1}}],[\"ih2\",{\"1\":{\"392\":1}}],[\"i++\",{\"1\":{\"338\":7,\"339\":2,\"342\":1,\"390\":2,\"405\":2,\"413\":3,\"430\":1,\"441\":1,\"755\":5,\"1061\":1,\"1062\":1,\"1259\":1,\"1260\":1,\"1386\":1,\"1390\":2}}],[\"i+1\",{\"1\":{\"33\":1}}],[\"idempotent\",{\"1\":{\"1454\":1}}],[\"identified\",{\"1\":{\"1494\":1}}],[\"identifier\",{\"1\":{\"540\":1,\"541\":1}}],[\"identityhashmap\",{\"1\":{\"1406\":1}}],[\"ide\",{\"1\":{\"900\":1,\"1507\":1}}],[\"idea\",{\"0\":{\"901\":1},\"1\":{\"871\":1,\"874\":1,\"917\":2,\"918\":2,\"1522\":1}}],[\"ids\",{\"1\":{\"850\":4,\"1466\":1}}],[\"id属性\",{\"1\":{\"838\":1,\"840\":1,\"841\":1}}],[\"id`\",{\"1\":{\"789\":1,\"887\":6}}],[\"idle\",{\"1\":{\"711\":2}}],[\"id>\",{\"1\":{\"644\":1,\"907\":1}}],[\"id为3时\",{\"1\":{\"787\":1}}],[\"id为1时\",{\"1\":{\"787\":1}}],[\"id为1的行将被锁定\",{\"1\":{\"619\":1}}],[\"id为2的记录\",{\"1\":{\"487\":1}}],[\"idx\",{\"1\":{\"568\":2}}],[\"idf算法和其他评分算法来计算文档的相关性得分\",{\"1\":{\"1460\":1}}],[\"idf算法\",{\"1\":{\"493\":1}}],[\"idworker\",{\"1\":{\"441\":3}}],[\"id才算是有效的\",{\"1\":{\"436\":1}}],[\"id生成器\",{\"0\":{\"435\":1}}],[\"id=2507\",{\"1\":{\"929\":1}}],[\"id=i\",{\"1\":{\"858\":1}}],[\"id=od\",{\"1\":{\"857\":1,\"858\":1}}],[\"id=u\",{\"1\":{\"856\":2,\"857\":1,\"858\":1}}],[\"id=1669639041722396699\",{\"1\":{\"987\":1}}],[\"id=1\",{\"1\":{\"618\":1,\"753\":1}}],[\"id=\",{\"1\":{\"229\":2,\"787\":2,\"788\":2,\"790\":4,\"800\":1,\"806\":2,\"807\":1,\"808\":1,\"818\":7,\"822\":2,\"826\":8,\"842\":7,\"843\":2,\"845\":7,\"847\":1,\"848\":1,\"849\":2,\"850\":1,\"852\":6,\"853\":2,\"856\":3,\"857\":2,\"858\":2,\"860\":1,\"878\":2,\"881\":1,\"890\":5,\"928\":31,\"1132\":1,\"1133\":1,\"1176\":2,\"1317\":1,\"1318\":1,\"1353\":2,\"1410\":2,\"1416\":2}}],[\"id\",{\"0\":{\"229\":1},\"1\":{\"220\":1,\"228\":2,\"434\":2,\"436\":2,\"438\":1,\"440\":3,\"441\":5,\"473\":1,\"486\":4,\"489\":1,\"510\":2,\"564\":7,\"568\":1,\"570\":2,\"589\":2,\"591\":3,\"592\":2,\"593\":2,\"594\":2,\"595\":2,\"619\":2,\"621\":2,\"622\":1,\"636\":4,\"642\":2,\"644\":1,\"721\":2,\"787\":1,\"788\":1,\"790\":6,\"799\":2,\"806\":1,\"807\":3,\"808\":1,\"810\":5,\"816\":4,\"817\":4,\"818\":10,\"822\":4,\"826\":16,\"839\":1,\"845\":6,\"849\":2,\"850\":3,\"852\":6,\"853\":1,\"855\":4,\"856\":7,\"857\":10,\"858\":24,\"860\":1,\"889\":3,\"890\":16,\"894\":1,\"901\":1,\"902\":1,\"948\":1,\"1028\":3,\"1029\":2,\"1062\":2,\"1132\":3,\"1133\":6,\"1134\":3,\"1136\":1,\"1232\":3,\"1233\":2,\"1260\":2,\"1317\":3,\"1318\":6,\"1319\":3,\"1321\":1,\"1416\":3,\"1442\":1,\"1448\":1,\"1494\":5,\"1507\":6}}],[\"ivan\",{\"1\":{\"176\":2}}],[\"iz2zehz5b1m03ahtrhebcaz\",{\"1\":{\"175\":1,\"176\":2}}],[\"ioexception\",{\"1\":{\"1408\":1,\"1478\":3}}],[\"io线程\",{\"1\":{\"1143\":1,\"1326\":1}}],[\"ioc容器会在运行时检测此循环引用\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"ioc容器会主动创建一个对象b注入到对象a需要的地方\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"ioc容器的核心接口\",{\"1\":{\"1170\":1,\"1347\":1}}],[\"ioc容器成了整个系统的关键核心\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"ioc容器\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"ioc解耦过程\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"ioc理论提出的观点大体是这样的\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"ioc理论的背景\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"ioc是inversion\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"ioc\",{\"0\":{\"1169\":1,\"1170\":1,\"1346\":1,\"1347\":1},\"1\":{\"1090\":1,\"1169\":2,\"1170\":2,\"1283\":1,\"1346\":2,\"1347\":2,\"1408\":8}}],[\"io\",{\"1\":{\"129\":1,\"133\":1,\"296\":1,\"319\":8,\"320\":2,\"323\":7,\"562\":1,\"582\":1,\"652\":1,\"661\":1,\"677\":1,\"810\":2,\"820\":2,\"826\":2,\"900\":1,\"915\":1,\"939\":1,\"950\":1,\"976\":1,\"988\":1,\"1124\":1,\"1312\":1,\"1404\":1,\"1478\":1}}],[\"ipc\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"ipv6\",{\"1\":{\"509\":1}}],[\"ipv4\",{\"1\":{\"509\":1}}],[\"ip+9200\",{\"1\":{\"460\":1}}],[\"ip+port\",{\"1\":{\"459\":1}}],[\"ip地址是服务器对外访问地址\",{\"1\":{\"459\":1}}],[\"ip\",{\"0\":{\"509\":1},\"1\":{\"111\":4,\"123\":6,\"440\":3,\"508\":2,\"509\":4,\"711\":1,\"722\":1,\"969\":1}}],[\"isvalid\",{\"1\":{\"1478\":1}}],[\"isvip\",{\"1\":{\"228\":1,\"492\":1}}],[\"isacceptable\",{\"1\":{\"1478\":1}}],[\"isadmin\",{\"1\":{\"492\":1}}],[\"isproduced\",{\"1\":{\"1446\":5}}],[\"isheldexclusively\",{\"1\":{\"1390\":2}}],[\"isholiday\",{\"1\":{\"198\":2}}],[\"ismodified\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"issingletoncurrentlyincreation\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"issuccess\",{\"1\":{\"892\":1}}],[\"isolation\",{\"1\":{\"1144\":1,\"1177\":5,\"1327\":1,\"1354\":5}}],[\"isreadable\",{\"1\":{\"1478\":1}}],[\"isr集合当中的\",{\"1\":{\"1118\":1,\"1306\":1}}],[\"isr是由leader维护\",{\"1\":{\"1113\":1,\"1301\":1}}],[\"isr\",{\"1\":{\"1113\":1,\"1117\":5,\"1118\":2,\"1120\":2,\"1301\":1,\"1305\":5,\"1306\":2,\"1308\":2}}],[\"isr的伸缩又指什么\",{\"0\":{\"1113\":1,\"1301\":1}}],[\"isinterrupted\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"isexternallymanagedinitmethod\",{\"1\":{\"1410\":2}}],[\"isexecutable=\",{\"1\":{\"928\":1}}],[\"iselignored=\",{\"1\":{\"895\":1}}],[\"isempty\",{\"1\":{\"337\":1,\"338\":1,\"339\":1}}],[\"isclosed\",{\"1\":{\"833\":1}}],[\"isfull\",{\"1\":{\"341\":3}}],[\"isnull\",{\"1\":{\"341\":3,\"342\":5}}],[\"isdebugenabled\",{\"1\":{\"223\":1}}],[\"isweekend\",{\"1\":{\"198\":2}}],[\"is\",{\"1\":{\"107\":1,\"129\":1,\"169\":3,\"223\":1,\"293\":1,\"306\":3,\"464\":1,\"473\":1,\"510\":2,\"589\":1,\"590\":2,\"611\":1,\"620\":1,\"677\":1,\"820\":2,\"825\":1,\"950\":4,\"1042\":1,\"1058\":2,\"1243\":1,\"1256\":2,\"1390\":2,\"1474\":3,\"1481\":4}}],[\"immediately\",{\"1\":{\"666\":1}}],[\"impl\",{\"1\":{\"820\":1,\"893\":3,\"1507\":1}}],[\"implements\",{\"1\":{\"193\":1,\"196\":2,\"197\":2,\"338\":1,\"339\":1,\"817\":1,\"833\":1,\"853\":1,\"893\":1,\"1049\":2,\"1250\":2,\"1404\":1,\"1416\":1,\"1474\":2}}],[\"implementing\",{\"1\":{\"169\":1}}],[\"implement\",{\"1\":{\"169\":1}}],[\"import\",{\"1\":{\"222\":2,\"390\":1,\"405\":1,\"417\":1,\"430\":1,\"441\":5,\"751\":1,\"752\":8,\"769\":1,\"800\":4,\"810\":8,\"816\":2,\"817\":4,\"820\":12,\"826\":11,\"888\":8,\"889\":5,\"891\":12,\"892\":3,\"893\":25,\"894\":14,\"912\":3,\"939\":7,\"1061\":2,\"1062\":4,\"1259\":2,\"1260\":4,\"1390\":4,\"1442\":5,\"1448\":5,\"1478\":8}}],[\"images``\",{\"1\":{\"1019\":1,\"1225\":1}}],[\"images\",{\"1\":{\"917\":1}}],[\"image2\",{\"1\":{\"158\":2}}],[\"image\",{\"1\":{\"98\":2,\"107\":2,\"108\":7,\"158\":1,\"189\":1,\"211\":1,\"212\":1,\"213\":1,\"214\":1,\"218\":1,\"219\":1,\"220\":1,\"221\":1,\"222\":1,\"223\":1,\"225\":1,\"226\":1,\"227\":1,\"229\":1,\"238\":1,\"296\":2,\"556\":1,\"557\":1,\"558\":1,\"565\":1,\"573\":1,\"617\":1,\"644\":1,\"717\":1,\"719\":6,\"720\":2,\"734\":1,\"764\":1,\"765\":1,\"766\":1,\"767\":1,\"768\":1,\"907\":8,\"917\":2,\"918\":2,\"930\":3,\"944\":1,\"948\":2,\"950\":4,\"951\":4,\"952\":8,\"958\":1,\"959\":1,\"961\":1,\"962\":2,\"969\":2,\"972\":1,\"976\":4,\"991\":1,\"1017\":1,\"1018\":1,\"1223\":1,\"1224\":1,\"1290\":1,\"1295\":2,\"1296\":1,\"1298\":1,\"1299\":2,\"1341\":1,\"1342\":2,\"1507\":4,\"1514\":1,\"1520\":1,\"1523\":3,\"1525\":1}}],[\"img\",{\"1\":{\"72\":3,\"108\":1,\"204\":1,\"208\":1,\"399\":1,\"401\":1,\"404\":1,\"406\":1,\"411\":1,\"412\":4,\"618\":1,\"620\":1}}],[\"if>\",{\"1\":{\"787\":1,\"790\":2,\"818\":6,\"826\":6,\"847\":1,\"849\":8,\"863\":2,\"1416\":1}}],[\"ifconfig\",{\"1\":{\"107\":1}}],[\"if\",{\"0\":{\"847\":1},\"1\":{\"89\":1,\"92\":3,\"93\":2,\"123\":1,\"190\":2,\"191\":2,\"192\":2,\"194\":2,\"195\":4,\"196\":2,\"197\":2,\"198\":1,\"199\":1,\"200\":1,\"223\":1,\"228\":2,\"306\":7,\"320\":2,\"338\":13,\"339\":16,\"341\":5,\"342\":4,\"390\":1,\"405\":5,\"406\":3,\"413\":1,\"417\":3,\"430\":1,\"441\":5,\"589\":1,\"687\":1,\"711\":2,\"727\":1,\"799\":1,\"800\":3,\"850\":2,\"887\":2,\"892\":1,\"893\":2,\"894\":3,\"939\":2,\"1001\":1,\"1042\":2,\"1049\":1,\"1058\":3,\"1062\":4,\"1133\":1,\"1134\":1,\"1173\":4,\"1210\":1,\"1243\":2,\"1250\":1,\"1256\":3,\"1260\":4,\"1318\":1,\"1319\":1,\"1350\":4,\"1380\":7,\"1382\":2,\"1386\":10,\"1390\":1,\"1398\":1,\"1404\":1,\"1406\":2,\"1410\":7,\"1412\":1,\"1416\":1,\"1418\":1,\"1420\":2,\"1422\":5,\"1428\":2,\"1462\":1,\"1466\":2,\"1478\":6,\"1481\":5,\"1494\":2}}],[\"inetsocketaddress\",{\"1\":{\"1478\":2}}],[\"inet4address\",{\"1\":{\"441\":2}}],[\"injection\",{\"1\":{\"1408\":1,\"1410\":1}}],[\"inline\",{\"1\":{\"1382\":15}}],[\"inherently\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"inherited\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"inner\",{\"1\":{\"890\":1,\"892\":1,\"893\":2,\"894\":1}}],[\"innodb使用意向锁\",{\"1\":{\"638\":1}}],[\"innodb可能会使用自增锁\",{\"1\":{\"638\":1}}],[\"innodb可能会将行锁升级为表锁\",{\"1\":{\"638\":1}}],[\"innodb会使用next\",{\"1\":{\"638\":1}}],[\"innodb会在查询涉及的范围上加上足够的间隙锁\",{\"1\":{\"638\":1}}],[\"innodb会在相关索引的间隙上加上间隙锁\",{\"1\":{\"638\":1}}],[\"innodb会在这些具体的索引项上加上行锁\",{\"1\":{\"638\":1}}],[\"innodb存储引擎采用了一系列加锁规则来保证事务的隔离性\",{\"1\":{\"638\":1}}],[\"innodb存储引擎都有各自的最小存储单元\",{\"1\":{\"325\":1}}],[\"innodb分配自增值并锁定它\",{\"1\":{\"622\":1}}],[\"innodb\",{\"0\":{\"617\":1},\"1\":{\"558\":2,\"574\":2,\"589\":2,\"621\":2,\"622\":2,\"643\":1,\"644\":1}}],[\"inverse\",{\"1\":{\"1408\":1}}],[\"inversion\",{\"1\":{\"1170\":1,\"1347\":1}}],[\"inverted\",{\"1\":{\"477\":2,\"1460\":1}}],[\"invoke\",{\"1\":{\"1410\":2,\"1468\":2,\"1474\":4}}],[\"invoking\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"invocationhandler\",{\"1\":{\"1474\":2}}],[\"invocation\",{\"1\":{\"833\":3,\"1416\":3}}],[\"indicates\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"indicate\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"indian\",{\"1\":{\"652\":1}}],[\"indexfor\",{\"1\":{\"1380\":1}}],[\"index文件\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"index文件的内容跟我们暂存前是一样的\",{\"1\":{\"979\":1}}],[\"indexcontroller\",{\"1\":{\"1049\":2,\"1250\":2}}],[\"index=\",{\"1\":{\"787\":2,\"790\":3,\"1176\":6,\"1353\":6}}],[\"indexes\",{\"1\":{\"590\":1}}],[\"indexed\",{\"1\":{\"589\":1}}],[\"index属性控制\",{\"1\":{\"485\":1}}],[\"index++\",{\"1\":{\"339\":2,\"413\":1}}],[\"indexoutofboundsexception\",{\"1\":{\"338\":4,\"339\":4}}],[\"indexof\",{\"1\":{\"337\":1,\"338\":2,\"339\":1}}],[\"index\",{\"0\":{\"471\":1,\"485\":1,\"486\":1},\"1\":{\"123\":15,\"238\":1,\"337\":6,\"338\":22,\"339\":23,\"405\":3,\"413\":1,\"477\":1,\"485\":2,\"486\":2,\"489\":4,\"490\":3,\"493\":3,\"510\":3,\"568\":2,\"569\":8,\"570\":3,\"589\":1,\"621\":1,\"667\":2,\"787\":2,\"790\":3,\"892\":2,\"967\":1,\"974\":1,\"1123\":1,\"1311\":1,\"1456\":5,\"1460\":2}}],[\"inclusion\",{\"1\":{\"1392\":1}}],[\"include>\",{\"1\":{\"845\":4}}],[\"include\",{\"1\":{\"123\":2,\"493\":1,\"948\":1}}],[\"inconsistent\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"incrby\",{\"1\":{\"666\":2}}],[\"incr\",{\"1\":{\"657\":1,\"666\":3,\"1156\":1,\"1336\":1}}],[\"increament\",{\"1\":{\"493\":1}}],[\"increments\",{\"1\":{\"1404\":1}}],[\"increment=1004\",{\"1\":{\"887\":1}}],[\"increment=3\",{\"1\":{\"858\":1}}],[\"increment=2\",{\"1\":{\"855\":1,\"858\":1}}],[\"increment=5\",{\"1\":{\"789\":1}}],[\"increment\",{\"1\":{\"436\":1,\"570\":1,\"622\":5,\"638\":1,\"668\":4,\"670\":2,\"789\":1,\"855\":1,\"858\":2,\"887\":1,\"1480\":2}}],[\"initmethod\",{\"1\":{\"1410\":2}}],[\"initmethodname\",{\"1\":{\"1410\":5}}],[\"initbeandefinitionreader\",{\"1\":{\"1408\":1}}],[\"initinstance\",{\"1\":{\"1056\":2,\"1254\":2}}],[\"initiator\",{\"1\":{\"928\":2}}],[\"initialmark\",{\"1\":{\"1396\":1,\"1398\":1}}],[\"initializebean\",{\"1\":{\"1410\":2}}],[\"initialized\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"initializingbean\",{\"1\":{\"1410\":6}}],[\"initialization\",{\"1\":{\"1392\":1,\"1408\":1,\"1410\":1}}],[\"initializr\",{\"1\":{\"901\":1}}],[\"initial\",{\"1\":{\"459\":1,\"895\":1,\"1107\":1,\"1298\":1,\"1386\":1,\"1398\":1,\"1406\":1}}],[\"initialcapacity\",{\"1\":{\"338\":3,\"1404\":3}}],[\"initiallist\",{\"1\":{\"338\":3}}],[\"init\",{\"1\":{\"390\":2,\"883\":1,\"973\":1,\"976\":2,\"1085\":1,\"1278\":1,\"1410\":6,\"1507\":1}}],[\"initqueue\",{\"1\":{\"341\":1,\"342\":2}}],[\"initlimit\",{\"1\":{\"174\":1}}],[\"initlimit这个配置项是用来配置zookeeper接受客户端\",{\"1\":{\"174\":1}}],[\"instead\",{\"1\":{\"1412\":1}}],[\"instantiation\",{\"1\":{\"1410\":1}}],[\"instantiated\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"instanceof\",{\"0\":{\"1041\":1,\"1242\":1},\"1\":{\"1041\":6,\"1242\":6,\"1380\":1,\"1410\":2,\"1478\":1}}],[\"instance\",{\"1\":{\"88\":2,\"89\":4,\"92\":6,\"93\":5,\"778\":2,\"863\":1,\"875\":1,\"878\":1,\"881\":1,\"882\":1,\"883\":1,\"907\":1,\"928\":1,\"1056\":4,\"1254\":4,\"1412\":1}}],[\"installed\",{\"1\":{\"915\":1}}],[\"install\",{\"1\":{\"99\":1,\"100\":1,\"126\":4,\"131\":1,\"142\":2,\"292\":1,\"735\":1,\"768\":2,\"774\":1,\"776\":2,\"915\":2,\"959\":5,\"961\":2}}],[\"insert=\",{\"1\":{\"891\":1}}],[\"insertappointment\",{\"1\":{\"889\":1,\"890\":1,\"891\":1,\"893\":1}}],[\"insert>\",{\"1\":{\"818\":1,\"826\":1,\"890\":1,\"1133\":1,\"1318\":1}}],[\"insertuser\",{\"1\":{\"816\":1,\"817\":2,\"818\":1,\"820\":2,\"826\":3}}],[\"insert\",{\"0\":{\"600\":1,\"839\":1},\"1\":{\"589\":1,\"600\":1,\"621\":1,\"622\":1,\"640\":1,\"789\":1,\"799\":2,\"817\":1,\"818\":1,\"826\":1,\"839\":1,\"852\":1,\"858\":5,\"887\":4,\"890\":1,\"891\":2,\"893\":2,\"1133\":3,\"1145\":1,\"1318\":3,\"1328\":1,\"1507\":5}}],[\"insertsort\",{\"1\":{\"405\":5}}],[\"insertelem\",{\"1\":{\"337\":1,\"338\":1,\"339\":1}}],[\"intptr\",{\"1\":{\"1481\":19}}],[\"int类型\",{\"1\":{\"1077\":1,\"1272\":1}}],[\"intvalue\",{\"1\":{\"1042\":1,\"1243\":1,\"1424\":1}}],[\"int的默认值是0\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"int8\",{\"1\":{\"693\":1}}],[\"int32\",{\"1\":{\"693\":1}}],[\"int16\",{\"1\":{\"693\":1}}],[\"int64\",{\"1\":{\"687\":2,\"693\":1}}],[\"into\",{\"0\":{\"605\":1},\"1\":{\"589\":1,\"605\":1,\"622\":1,\"640\":1,\"789\":1,\"799\":2,\"818\":1,\"826\":1,\"858\":5,\"887\":4,\"890\":1,\"1133\":1,\"1318\":1,\"1394\":1,\"1507\":5}}],[\"intset\",{\"1\":{\"693\":3}}],[\"ints\",{\"1\":{\"441\":4}}],[\"introduction\",{\"1\":{\"277\":1,\"1174\":1,\"1351\":1}}],[\"intellij\",{\"0\":{\"901\":1}}],[\"integration\",{\"1\":{\"776\":3}}],[\"integercachehighpropvalue\",{\"1\":{\"1042\":2,\"1243\":2}}],[\"integercache\",{\"1\":{\"1042\":4,\"1243\":4}}],[\"integer的默认值是null\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"integer实际是对象的引用\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"integer变量必须实例化后才能使用\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"integer>\",{\"1\":{\"406\":1,\"1001\":3,\"1210\":3,\"1406\":4}}],[\"integers\",{\"1\":{\"406\":1}}],[\"integer\",{\"1\":{\"220\":1,\"497\":1,\"501\":1,\"666\":9,\"667\":6,\"711\":4,\"723\":1,\"788\":2,\"810\":6,\"848\":1,\"849\":1,\"855\":1,\"856\":3,\"857\":4,\"858\":4,\"1041\":1,\"1042\":13,\"1043\":3,\"1242\":1,\"1243\":13,\"1244\":3}}],[\"intention\",{\"1\":{\"621\":1,\"638\":3}}],[\"interpreterruntime\",{\"1\":{\"1481\":4}}],[\"interpreter\",{\"1\":{\"1481\":2}}],[\"interview\",{\"1\":{\"1150\":2,\"1333\":2}}],[\"interval设置为\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"interval\",{\"1\":{\"950\":4}}],[\"interruptedexception\",{\"1\":{\"1061\":1,\"1062\":3,\"1064\":2,\"1259\":1,\"1260\":3,\"1262\":2,\"1390\":2,\"1446\":2}}],[\"interrupt\",{\"1\":{\"1057\":1,\"1058\":3,\"1255\":1,\"1256\":3}}],[\"interger\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"interface自定义注解\",{\"1\":{\"1402\":1}}],[\"interface\",{\"1\":{\"193\":1,\"196\":1,\"197\":1,\"337\":1,\"751\":1,\"816\":1,\"825\":1,\"826\":1,\"856\":1,\"889\":2,\"893\":1,\"1049\":2,\"1100\":1,\"1250\":2,\"1291\":1,\"1402\":3,\"1414\":5,\"1416\":1,\"1474\":1}}],[\"interceptorregistry\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"interceptortrainconfigurer\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"interceptor=\",{\"1\":{\"833\":1,\"1416\":1}}],[\"interceptor\",{\"1\":{\"833\":1,\"1416\":2}}],[\"intercepts\",{\"1\":{\"833\":1}}],[\"intercept\",{\"1\":{\"123\":1,\"833\":1,\"1416\":1}}],[\"internalresourceviewresolver\",{\"1\":{\"882\":1}}],[\"internal\",{\"1\":{\"123\":1,\"296\":1,\"1494\":1}}],[\"int\",{\"1\":{\"190\":4,\"191\":2,\"198\":3,\"199\":2,\"200\":6,\"306\":1,\"337\":7,\"338\":23,\"339\":17,\"341\":7,\"342\":2,\"390\":11,\"393\":2,\"405\":30,\"406\":6,\"413\":11,\"417\":21,\"430\":14,\"441\":7,\"564\":1,\"568\":2,\"570\":1,\"682\":2,\"684\":1,\"687\":3,\"691\":1,\"698\":1,\"711\":1,\"755\":2,\"789\":1,\"799\":2,\"855\":2,\"858\":7,\"887\":1,\"888\":1,\"889\":4,\"891\":2,\"892\":5,\"893\":2,\"1001\":2,\"1041\":1,\"1042\":8,\"1061\":2,\"1062\":1,\"1133\":1,\"1210\":2,\"1242\":1,\"1243\":8,\"1259\":2,\"1260\":1,\"1318\":1,\"1380\":3,\"1386\":20,\"1390\":6,\"1392\":2,\"1404\":3,\"1406\":4,\"1416\":1,\"1420\":1,\"1446\":1,\"1476\":3,\"1478\":3,\"1480\":2,\"1481\":19,\"1494\":4,\"1507\":1}}],[\"inputstream\",{\"1\":{\"809\":3,\"810\":4,\"820\":2,\"826\":4}}],[\"input\",{\"1\":{\"146\":1,\"148\":2,\"150\":1,\"151\":3,\"152\":4,\"153\":1,\"155\":1,\"156\":4,\"157\":1,\"158\":3,\"160\":1}}],[\"inflexdb\",{\"1\":{\"947\":1}}],[\"inf\",{\"1\":{\"882\":1,\"883\":1,\"894\":1,\"1185\":2,\"1189\":1,\"1360\":2,\"1364\":1}}],[\"infile\",{\"1\":{\"144\":2}}],[\"information\",{\"1\":{\"569\":3,\"574\":3,\"643\":1}}],[\"info\",{\"1\":{\"123\":2,\"160\":1,\"219\":3,\"221\":1,\"223\":3,\"226\":2,\"228\":2,\"229\":2,\"752\":6,\"753\":2,\"948\":1}}],[\"inactive=60s\",{\"1\":{\"123\":1}}],[\"inactive是指经过多长时间文件没被请求后删除缓存\",{\"1\":{\"123\":1}}],[\"in\",{\"0\":{\"592\":2,\"598\":1},\"1\":{\"41\":1,\"123\":1,\"129\":1,\"169\":1,\"306\":3,\"335\":1,\"340\":1,\"493\":1,\"558\":1,\"569\":1,\"590\":2,\"592\":2,\"598\":3,\"618\":2,\"621\":2,\"638\":1,\"677\":1,\"687\":1,\"787\":1,\"788\":1,\"790\":1,\"850\":1,\"1001\":1,\"1029\":1,\"1050\":2,\"1058\":3,\"1113\":1,\"1122\":1,\"1149\":3,\"1210\":1,\"1233\":1,\"1251\":2,\"1256\":3,\"1301\":1,\"1310\":1,\"1332\":3,\"1400\":1}}],[\"i\",{\"1\":{\"33\":1,\"44\":1,\"111\":2,\"144\":2,\"146\":1,\"148\":2,\"149\":2,\"150\":1,\"151\":3,\"152\":4,\"153\":1,\"155\":1,\"156\":8,\"157\":1,\"158\":3,\"162\":8,\"163\":4,\"229\":1,\"306\":5,\"324\":1,\"338\":28,\"339\":5,\"342\":2,\"390\":7,\"405\":9,\"406\":9,\"411\":2,\"413\":11,\"417\":21,\"430\":7,\"441\":4,\"473\":1,\"755\":6,\"787\":6,\"858\":1,\"959\":2,\"972\":1,\"991\":1,\"1041\":3,\"1042\":9,\"1061\":2,\"1062\":2,\"1124\":1,\"1242\":3,\"1243\":9,\"1259\":2,\"1260\":2,\"1312\":1,\"1380\":3,\"1386\":27,\"1390\":4,\"1478\":8}}],[\"i=1\",{\"1\":{\"33\":1}}],[\"its\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"itself\",{\"1\":{\"950\":1}}],[\"itemdetail\",{\"1\":{\"858\":2}}],[\"itemprice\",{\"1\":{\"858\":2}}],[\"itemname\",{\"1\":{\"858\":2}}],[\"item=\",{\"1\":{\"787\":2,\"790\":3,\"850\":1}}],[\"item\",{\"1\":{\"389\":1,\"790\":10,\"850\":1,\"858\":12}}],[\"items\",{\"1\":{\"306\":1,\"1494\":1}}],[\"iterator<selectionkey>\",{\"1\":{\"1478\":1}}],[\"iterator\",{\"1\":{\"339\":67,\"1478\":6}}],[\"it\",{\"1\":{\"27\":2,\"129\":1,\"169\":3,\"919\":1,\"950\":1,\"1058\":3,\"1256\":3,\"1481\":2}}],[\"+heapdumponoutofmemoryerror\",{\"1\":{\"1400\":1}}],[\"+printgcdatestamps\",{\"1\":{\"1400\":1}}],[\"+printgcdetails\",{\"1\":{\"1108\":1,\"1299\":1,\"1400\":1}}],[\"+printgc\",{\"1\":{\"1108\":1,\"1299\":1}}],[\"+useg1gc\",{\"1\":{\"1400\":2}}],[\"+useconcmarksweepgc\",{\"1\":{\"1108\":1,\"1299\":1}}],[\"+useparalleloldgc\",{\"1\":{\"1108\":1,\"1299\":1}}],[\"+useparnewgc\",{\"1\":{\"1108\":1,\"1299\":1}}],[\"+uuid\",{\"1\":{\"939\":1}}],[\"+string\",{\"1\":{\"1043\":3,\"1244\":3}}],[\"+statementid\",{\"1\":{\"810\":2}}],[\"+n\",{\"1\":{\"1043\":3,\"1244\":3}}],[\"+null\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"++j\",{\"1\":{\"1380\":1}}],[\"++size\",{\"1\":{\"1380\":1,\"1386\":1}}],[\"++\",{\"1\":{\"413\":1,\"430\":1}}],[\"+=\",{\"1\":{\"338\":1,\"441\":2,\"540\":1,\"541\":1}}],[\"+tree作为索引的效率\",{\"1\":{\"324\":1}}],[\"+tree作为索引的理论基础\",{\"1\":{\"324\":1}}],[\"+tree作为索引结构\",{\"1\":{\"324\":1}}],[\"+92\",{\"1\":{\"111\":1}}],[\"+\",{\"0\":{\"93\":1},\"1\":{\"33\":1,\"44\":1,\"199\":2,\"223\":3,\"306\":4,\"338\":8,\"339\":2,\"341\":6,\"342\":1,\"390\":1,\"392\":1,\"405\":3,\"406\":1,\"413\":1,\"417\":2,\"441\":4,\"540\":1,\"541\":1,\"636\":1,\"642\":1,\"727\":2,\"752\":12,\"755\":3,\"891\":2,\"893\":1,\"894\":1,\"900\":1,\"912\":1,\"939\":7,\"982\":1,\"1001\":7,\"1029\":4,\"1042\":2,\"1043\":2,\"1049\":5,\"1061\":5,\"1108\":3,\"1133\":1,\"1190\":1,\"1210\":7,\"1233\":4,\"1243\":2,\"1244\":2,\"1250\":5,\"1259\":5,\"1299\":3,\"1318\":1,\"1365\":1,\"1386\":1,\"1390\":2,\"1394\":20,\"1404\":1,\"1442\":1,\"1448\":1,\"1474\":4,\"1476\":3,\"1478\":3}}],[\"yonggen\",{\"1\":{\"1398\":2}}],[\"you\",{\"1\":{\"589\":4}}],[\"yourapp\",{\"1\":{\"1524\":2}}],[\"your\",{\"1\":{\"569\":3,\"574\":1,\"1030\":1,\"1234\":1}}],[\"y和z\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"yao\",{\"1\":{\"982\":1}}],[\"yasm\",{\"1\":{\"142\":1}}],[\"y=\",{\"1\":{\"928\":25}}],[\"yyyy\",{\"1\":{\"863\":2,\"864\":2}}],[\"yiidian\",{\"1\":{\"766\":2,\"767\":2,\"769\":1,\"777\":1,\"779\":1}}],[\"yuv\",{\"1\":{\"162\":1}}],[\"yum\",{\"1\":{\"142\":1,\"915\":8}}],[\"yml增加以下配置项\",{\"1\":{\"948\":1}}],[\"yml\",{\"1\":{\"126\":1,\"459\":1,\"950\":3,\"1017\":1,\"1183\":2,\"1223\":1,\"1358\":2,\"1507\":1}}],[\"y\",{\"1\":{\"33\":2,\"157\":2,\"386\":1,\"392\":1,\"621\":2,\"768\":1,\"915\":1,\"1044\":4,\"1245\":4}}],[\"y^\",{\"1\":{\"33\":2}}],[\"=a\",{\"1\":{\"1382\":2}}],[\"=1\",{\"1\":{\"864\":1}}],[\"=null\",{\"1\":{\"787\":1,\"790\":2,\"818\":6,\"826\":6,\"847\":1,\"848\":2,\"849\":8,\"863\":2,\"1056\":1,\"1254\":1}}],[\"=case\",{\"1\":{\"787\":1,\"788\":1,\"790\":1}}],[\"=或<>操作符\",{\"0\":{\"590\":1}}],[\"=>\",{\"1\":{\"540\":1,\"541\":1}}],[\"==>\",{\"1\":{\"711\":2,\"788\":2,\"852\":12,\"853\":2}}],[\"==============================test=============================================\",{\"1\":{\"441\":1}}],[\"==============================methods==========================================\",{\"1\":{\"441\":1}}],[\"==============================constructors=====================================\",{\"1\":{\"441\":1}}],[\"==============================fields===========================================\",{\"1\":{\"441\":1}}],[\"==\",{\"1\":{\"89\":1,\"92\":3,\"93\":2,\"198\":4,\"200\":1,\"306\":7,\"320\":2,\"338\":8,\"339\":12,\"341\":2,\"342\":3,\"405\":1,\"406\":2,\"441\":2,\"540\":1,\"541\":1,\"687\":1,\"727\":1,\"892\":1,\"894\":3,\"1001\":1,\"1044\":1,\"1049\":1,\"1173\":2,\"1210\":1,\"1245\":1,\"1250\":1,\"1350\":2,\"1380\":4,\"1386\":6,\"1390\":1,\"1406\":2,\"1410\":1,\"1420\":1,\"1422\":2,\"1428\":1,\"1478\":1,\"1481\":6}}],[\"=\",{\"0\":{\"596\":1},\"1\":{\"33\":1,\"88\":1,\"89\":2,\"92\":2,\"93\":2,\"123\":1,\"151\":5,\"160\":6,\"174\":5,\"190\":2,\"197\":1,\"220\":1,\"222\":1,\"223\":2,\"305\":3,\"306\":19,\"320\":2,\"338\":25,\"339\":81,\"341\":17,\"342\":22,\"390\":19,\"392\":1,\"405\":26,\"406\":6,\"413\":11,\"417\":16,\"430\":15,\"440\":4,\"441\":33,\"540\":4,\"541\":4,\"558\":1,\"564\":3,\"568\":2,\"569\":2,\"574\":1,\"590\":1,\"595\":1,\"618\":1,\"619\":1,\"621\":1,\"634\":1,\"636\":8,\"640\":1,\"641\":1,\"642\":4,\"667\":1,\"711\":14,\"721\":1,\"752\":9,\"755\":14,\"790\":2,\"800\":13,\"807\":1,\"809\":3,\"810\":16,\"817\":1,\"818\":10,\"820\":8,\"822\":1,\"826\":20,\"829\":2,\"833\":2,\"842\":8,\"845\":2,\"847\":2,\"848\":3,\"849\":12,\"850\":1,\"852\":8,\"853\":4,\"856\":4,\"857\":2,\"858\":2,\"863\":3,\"890\":6,\"891\":11,\"892\":9,\"893\":11,\"894\":19,\"895\":2,\"912\":2,\"939\":12,\"982\":1,\"1001\":3,\"1028\":1,\"1041\":2,\"1042\":15,\"1043\":1,\"1044\":4,\"1049\":5,\"1050\":8,\"1056\":5,\"1061\":7,\"1062\":3,\"1064\":5,\"1120\":5,\"1131\":4,\"1132\":1,\"1133\":6,\"1134\":4,\"1149\":1,\"1173\":6,\"1210\":3,\"1232\":1,\"1242\":2,\"1243\":15,\"1244\":1,\"1245\":4,\"1250\":5,\"1251\":8,\"1254\":5,\"1259\":7,\"1260\":3,\"1262\":5,\"1308\":5,\"1316\":4,\"1317\":1,\"1318\":6,\"1319\":4,\"1332\":1,\"1350\":6,\"1380\":21,\"1382\":6,\"1386\":54,\"1390\":7,\"1392\":7,\"1394\":6,\"1398\":1,\"1402\":6,\"1404\":9,\"1406\":12,\"1408\":2,\"1410\":10,\"1412\":3,\"1416\":5,\"1420\":3,\"1422\":4,\"1424\":7,\"1440\":2,\"1442\":3,\"1446\":4,\"1448\":7,\"1450\":5,\"1462\":3,\"1466\":6,\"1468\":11,\"1474\":5,\"1476\":1,\"1478\":15,\"1480\":1,\"1481\":4,\"1494\":7}}],[\"lw\",{\"1\":{\"1114\":1,\"1302\":1}}],[\"lw等分别代表什么\",{\"0\":{\"1114\":1,\"1302\":1}}],[\"lfence\",{\"1\":{\"1382\":1}}],[\"lfu\",{\"1\":{\"1001\":1,\"1210\":1}}],[\"lfd\",{\"1\":{\"961\":1}}],[\"lvm2\",{\"1\":{\"915\":1}}],[\"lpop\",{\"1\":{\"667\":1,\"718\":1}}],[\"lpushx\",{\"1\":{\"667\":1}}],[\"lpush\",{\"1\":{\"667\":2,\"718\":1}}],[\"lpush可以在列表头部插入一个内容id作为关键字\",{\"1\":{\"657\":1}}],[\"lrem\",{\"1\":{\"667\":1}}],[\"lrange\",{\"1\":{\"667\":4,\"718\":2}}],[\"lrulinkedmap<string\",{\"1\":{\"1001\":1,\"1210\":1}}],[\"lrulinkedmap<k\",{\"1\":{\"1001\":1,\"1210\":1}}],[\"lrulinkedmap\",{\"1\":{\"1001\":2,\"1210\":2}}],[\"lru等其他知识点\",{\"1\":{\"699\":1}}],[\"lru\",{\"0\":{\"1001\":1,\"1210\":1},\"1\":{\"664\":1,\"698\":2,\"699\":1,\"1001\":1,\"1210\":1}}],[\"lru驱动事件\",{\"1\":{\"664\":1}}],[\"luxian\",{\"1\":{\"969\":1}}],[\"lua\",{\"1\":{\"664\":1}}],[\"lua脚本\",{\"1\":{\"664\":1}}],[\"lucene是一个开源的全文搜索引擎库\",{\"1\":{\"1458\":1}}],[\"lucene\",{\"1\":{\"453\":4,\"496\":2,\"503\":2,\"587\":1,\"1028\":3,\"1232\":3}}],[\"lucene™\",{\"1\":{\"453\":1}}],[\"lt\",{\"1\":{\"863\":1}}],[\"ltrim\",{\"1\":{\"667\":1}}],[\"ltrim可用来限制列表的数量\",{\"1\":{\"657\":1}}],[\"lts\",{\"1\":{\"239\":1}}],[\"lq\",{\"1\":{\"342\":8}}],[\"lmenezes\",{\"1\":{\"461\":1}}],[\"lmstudio\",{\"2\":{\"284\":1,\"285\":1}}],[\"lm\",{\"0\":{\"280\":1,\"283\":1},\"1\":{\"283\":1},\"2\":{\"281\":1,\"282\":1}}],[\"llen\",{\"1\":{\"667\":1}}],[\"llama3\",{\"1\":{\"292\":2,\"294\":2,\"296\":3},\"2\":{\"299\":1}}],[\"ll\",{\"1\":{\"176\":1}}],[\"ldconfig\",{\"1\":{\"142\":1}}],[\"ld\",{\"1\":{\"142\":1}}],[\"lifecycle\",{\"1\":{\"774\":3}}],[\"lifo\",{\"1\":{\"335\":1}}],[\"liawan\",{\"1\":{\"731\":1,\"1019\":1,\"1225\":1}}],[\"like\",{\"1\":{\"564\":1,\"574\":1,\"593\":2,\"595\":1,\"845\":2,\"847\":1,\"848\":1,\"849\":1,\"1025\":1,\"1149\":1,\"1229\":1,\"1332\":1,\"1416\":1}}],[\"licensed\",{\"1\":{\"677\":1}}],[\"license\",{\"1\":{\"540\":1,\"541\":1,\"751\":1,\"752\":1,\"912\":1,\"1061\":2,\"1062\":1,\"1064\":1,\"1259\":2,\"1260\":1,\"1262\":1}}],[\"li\",{\"1\":{\"489\":3}}],[\"livereload\",{\"1\":{\"975\":1}}],[\"live\",{\"1\":{\"163\":5,\"1195\":1,\"1368\":1}}],[\"library\",{\"1\":{\"286\":1,\"296\":1,\"297\":1}}],[\"libc\",{\"1\":{\"244\":1}}],[\"libfdk\",{\"1\":{\"162\":1}}],[\"libx264\",{\"1\":{\"152\":1,\"162\":1,\"163\":1}}],[\"libx265\",{\"1\":{\"152\":1}}],[\"lib\",{\"1\":{\"142\":1,\"764\":1,\"915\":1}}],[\"libavcodec里很多code都是从头开发的\",{\"1\":{\"139\":1}}],[\"list各实现类的序列化与反序列化实现\",{\"1\":{\"1404\":1}}],[\"list各实现类在并发环境下的表现\",{\"1\":{\"1404\":1}}],[\"listiterator与iterator的区别与使用场景\",{\"1\":{\"1404\":1}}],[\"list迭代器\",{\"1\":{\"1404\":1}}],[\"list子列表的实现原理与边界情况\",{\"1\":{\"1404\":1}}],[\"list及其相关知识还有很多值得我继续学习与探索的地方\",{\"1\":{\"1404\":1}}],[\"list接口表示一个有序集合\",{\"1\":{\"1404\":1}}],[\"list和预留空间等手段减轻空间碎片问题\",{\"1\":{\"1396\":1}}],[\"list维护小块空闲空间\",{\"1\":{\"1396\":1}}],[\"list>\",{\"1\":{\"883\":2}}],[\"listnode\",{\"1\":{\"684\":8,\"685\":1}}],[\"lists\",{\"0\":{\"667\":1},\"1\":{\"656\":1,\"664\":1,\"667\":4,\"1394\":1,\"1398\":1}}],[\"list<string>\",{\"1\":{\"1466\":2}}],[\"list<document>\",{\"1\":{\"1462\":3}}],[\"list<topicpartition>\",{\"1\":{\"1444\":1}}],[\"list<producerrecord<string\",{\"1\":{\"1440\":1}}],[\"list<book>\",{\"1\":{\"889\":1,\"891\":1,\"893\":2,\"894\":1}}],[\"list<orderdetail>\",{\"1\":{\"857\":1}}],[\"list<user>\",{\"1\":{\"816\":1,\"817\":1,\"820\":1,\"826\":4,\"842\":2,\"847\":2,\"848\":2,\"849\":2,\"850\":2}}],[\"list<integer>\",{\"1\":{\"337\":1,\"338\":3,\"339\":2,\"406\":3}}],[\"list<\",{\"1\":{\"337\":1,\"338\":2,\"339\":2}}],[\"list<e>\",{\"1\":{\"337\":1,\"338\":1,\"339\":1,\"1404\":1}}],[\"list\",{\"0\":{\"718\":1,\"1071\":1,\"1266\":1,\"1404\":1},\"1\":{\"131\":1,\"162\":1,\"292\":1,\"337\":2,\"338\":9,\"339\":11,\"406\":8,\"652\":1,\"655\":1,\"682\":1,\"684\":3,\"685\":1,\"718\":4,\"787\":2,\"790\":4,\"816\":1,\"817\":1,\"820\":1,\"826\":1,\"857\":1,\"858\":1,\"860\":1,\"889\":1,\"891\":1,\"893\":2,\"894\":12,\"915\":1,\"929\":1,\"979\":1,\"1057\":1,\"1069\":1,\"1070\":2,\"1071\":1,\"1136\":2,\"1155\":1,\"1255\":1,\"1264\":1,\"1265\":2,\"1266\":1,\"1321\":2,\"1335\":1,\"1404\":3,\"1418\":1}}],[\"listeners\",{\"1\":{\"1187\":1,\"1362\":1}}],[\"listener\",{\"1\":{\"928\":2}}],[\"listening\",{\"1\":{\"123\":2}}],[\"listen\",{\"1\":{\"123\":4}}],[\"limit\",{\"1\":{\"123\":1,\"670\":2,\"889\":3,\"890\":2,\"1138\":1,\"1323\":1}}],[\"linenumber\",{\"1\":{\"863\":1}}],[\"linsert\",{\"1\":{\"667\":3}}],[\"lindex\",{\"1\":{\"667\":1}}],[\"linkedhashset\",{\"1\":{\"1069\":1,\"1264\":1}}],[\"linkedhashmap<>\",{\"1\":{\"1406\":1}}],[\"linkedhashmap<string\",{\"1\":{\"1406\":1}}],[\"linkedhashmap<k\",{\"1\":{\"1001\":1,\"1210\":1}}],[\"linkedhashmap\",{\"1\":{\"1001\":2,\"1069\":1,\"1132\":1,\"1210\":2,\"1264\":1,\"1317\":1,\"1380\":1,\"1406\":1}}],[\"linked\",{\"1\":{\"667\":1}}],[\"linkedlist<>\",{\"1\":{\"1404\":1}}],[\"linkedlist<integer>\",{\"1\":{\"1404\":1}}],[\"linkedlist<e>\",{\"1\":{\"339\":1}}],[\"linkedlist的底层是双向链表\",{\"1\":{\"1074\":1,\"1269\":1}}],[\"linkedlist\",{\"0\":{\"339\":1,\"1074\":1,\"1269\":1},\"1\":{\"339\":2,\"1069\":1,\"1264\":1,\"1404\":1}}],[\"linkqueue<integer>\",{\"1\":{\"342\":2}}],[\"linkqueue<t>\",{\"1\":{\"342\":1}}],[\"linkqueue\",{\"1\":{\"342\":1}}],[\"linktr\",{\"1\":{\"3\":1}}],[\"linux中的pid\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"linux下docker安装\",{\"0\":{\"915\":1}}],[\"linux下redis安装\",{\"0\":{\"730\":1}}],[\"linux下\",{\"0\":{\"661\":1}}],[\"linux安装jdk\",{\"0\":{\"457\":1}}],[\"linux安装es\",{\"0\":{\"458\":1},\"1\":{\"447\":1}}],[\"linux安装\",{\"0\":{\"142\":1}}],[\"linux\",{\"0\":{\"105\":1,\"244\":1,\"292\":1,\"1030\":1,\"1234\":1},\"1\":{\"107\":6,\"237\":1,\"238\":1,\"458\":2,\"654\":2,\"661\":1,\"915\":1}}],[\"latch\",{\"1\":{\"1390\":3}}],[\"later\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"latest\",{\"1\":{\"915\":3}}],[\"lag\",{\"1\":{\"1113\":3,\"1301\":3}}],[\"label\",{\"1\":{\"950\":1,\"1016\":4,\"1222\":4}}],[\"lazy\",{\"1\":{\"493\":1,\"1410\":1}}],[\"lazyloadingsingleton\",{\"1\":{\"89\":5}}],[\"lang\",{\"1\":{\"751\":1,\"752\":5,\"826\":1,\"967\":1,\"1049\":1,\"1050\":1,\"1099\":1,\"1106\":1,\"1250\":1,\"1251\":1,\"1290\":1,\"1297\":1,\"1481\":2}}],[\"language=\",{\"1\":{\"895\":1}}],[\"language\",{\"1\":{\"464\":1,\"900\":1,\"1134\":1,\"1319\":1}}],[\"lang3\",{\"1\":{\"441\":3}}],[\"langchain\",{\"0\":{\"274\":1,\"277\":1},\"1\":{\"277\":1},\"2\":{\"275\":1,\"276\":1,\"278\":1,\"279\":1}}],[\"lastest\",{\"1\":{\"1019\":1,\"1225\":1}}],[\"lastname\",{\"1\":{\"485\":1,\"487\":3,\"489\":3,\"492\":1}}],[\"lasttimestamp\",{\"1\":{\"441\":9}}],[\"last\",{\"1\":{\"335\":1,\"489\":5,\"503\":2,\"504\":6,\"1114\":1,\"1302\":1}}],[\"layouts\",{\"1\":{\"161\":1}}],[\"largest\",{\"1\":{\"417\":8}}],[\"large\",{\"1\":{\"123\":1,\"1380\":1}}],[\"lotail\",{\"1\":{\"1380\":1}}],[\"lohead\",{\"1\":{\"1380\":1}}],[\"low\",{\"1\":{\"1042\":4,\"1114\":1,\"1243\":4,\"1302\":1}}],[\"lombok\",{\"1\":{\"752\":1,\"875\":1,\"888\":7,\"892\":1,\"893\":1}}],[\"loadbeandefinitions\",{\"1\":{\"1408\":3}}],[\"loadclass\",{\"1\":{\"1392\":1}}],[\"loadstore\",{\"1\":{\"1382\":1}}],[\"loadload\",{\"1\":{\"1382\":1}}],[\"load\",{\"1\":{\"688\":1,\"883\":1,\"950\":1,\"1382\":4,\"1386\":2,\"1406\":1}}],[\"loading\",{\"1\":{\"493\":2,\"1408\":2}}],[\"love\",{\"1\":{\"473\":1}}],[\"lock函数中\",{\"1\":{\"1428\":2}}],[\"lock2\",{\"1\":{\"1062\":7,\"1260\":7}}],[\"lock1\",{\"1\":{\"1062\":7,\"1260\":7}}],[\"locked\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"lockobj\",{\"1\":{\"1057\":2,\"1255\":2}}],[\"lock`\",{\"1\":{\"640\":1}}],[\"locks\",{\"0\":{\"627\":1,\"628\":1,\"629\":1},\"1\":{\"621\":2,\"622\":2,\"624\":2,\"637\":1,\"638\":4,\"1062\":2,\"1260\":2,\"1390\":1}}],[\"lock\",{\"1\":{\"459\":1,\"618\":2,\"621\":2,\"624\":1,\"635\":3,\"638\":5,\"640\":6,\"643\":2,\"727\":2,\"1062\":3,\"1063\":1,\"1150\":1,\"1163\":1,\"1201\":3,\"1260\":3,\"1261\":1,\"1333\":1,\"1343\":1,\"1374\":3,\"1382\":3,\"1390\":2,\"1428\":14,\"1446\":1,\"1480\":6,\"1481\":13},\"2\":{\"729\":1}}],[\"locateelements\",{\"1\":{\"337\":1,\"338\":2,\"339\":1}}],[\"locateelem\",{\"1\":{\"337\":1,\"338\":1,\"339\":1}}],[\"locations\",{\"1\":{\"1507\":2}}],[\"location=\",{\"1\":{\"878\":1}}],[\"location对url进行匹配\",{\"1\":{\"123\":1}}],[\"location\",{\"1\":{\"123\":17}}],[\"locale\",{\"1\":{\"1414\":2}}],[\"localcache\",{\"1\":{\"1002\":2,\"1211\":2}}],[\"localhost\",{\"1\":{\"123\":1,\"126\":3,\"163\":1,\"294\":2,\"465\":1,\"466\":1,\"489\":3,\"515\":2,\"879\":1,\"887\":2,\"894\":1,\"929\":4,\"948\":1,\"950\":2,\"975\":1,\"1442\":1,\"1448\":1,\"1466\":1}}],[\"localhost是根据用户请求的url进行匹配\",{\"1\":{\"123\":1}}],[\"local\",{\"1\":{\"111\":5,\"123\":3,\"126\":1,\"142\":3,\"1388\":1,\"1402\":1}}],[\"long这几个类的valueof方法的实现是类似的\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"long\",{\"1\":{\"393\":5,\"440\":2,\"441\":30,\"492\":2,\"497\":1,\"501\":1,\"684\":1,\"687\":3,\"752\":3,\"788\":4,\"826\":2,\"853\":1,\"855\":1,\"856\":1,\"857\":1,\"888\":3,\"889\":6,\"890\":1,\"891\":6,\"892\":3,\"893\":8,\"894\":3,\"1042\":2,\"1057\":1,\"1058\":1,\"1243\":2,\"1255\":1,\"1256\":1,\"1494\":1}}],[\"looking\",{\"1\":{\"1196\":2,\"1369\":2}}],[\"look\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"lookuptableexample\",{\"1\":{\"194\":1}}],[\"loopback\",{\"1\":{\"654\":1}}],[\"loop++\",{\"1\":{\"339\":1}}],[\"loop\",{\"1\":{\"339\":1}}],[\"logging\",{\"1\":{\"1507\":1}}],[\"loggerfactory\",{\"1\":{\"222\":2,\"893\":2,\"894\":2}}],[\"logger\",{\"1\":{\"222\":3,\"223\":5,\"884\":1,\"893\":4,\"894\":3}}],[\"log实现的\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"log中的语句\",{\"1\":{\"1143\":1,\"1326\":1}}],[\"log中\",{\"1\":{\"1143\":1,\"1326\":1}}],[\"logendoffset\",{\"1\":{\"1114\":1,\"1302\":1}}],[\"logaround\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"logaspect\",{\"1\":{\"752\":1}}],[\"loglog\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"logrotate\",{\"1\":{\"915\":2}}],[\"logpointcut\",{\"1\":{\"752\":6,\"1049\":3,\"1250\":3}}],[\"loginrequired\",{\"1\":{\"1049\":8,\"1250\":8}}],[\"login\",{\"1\":{\"826\":3,\"842\":6,\"951\":1}}],[\"logindate\",{\"1\":{\"492\":1}}],[\"logic\",{\"1\":{\"195\":3}}],[\"log2\",{\"1\":{\"417\":2}}],[\"logn\",{\"1\":{\"323\":2,\"558\":1,\"1079\":1,\"1274\":1,\"1380\":1}}],[\"logback<\",{\"1\":{\"875\":1}}],[\"logback\",{\"0\":{\"222\":1},\"1\":{\"884\":3}}],[\"log4j12\",{\"1\":{\"771\":1}}],[\"log4j12<\",{\"1\":{\"771\":1,\"772\":1,\"778\":1}}],[\"log4j\",{\"0\":{\"222\":1}}],[\"log404\",{\"1\":{\"123\":1}}],[\"logopath\",{\"1\":{\"939\":3}}],[\"logo的宽和高\",{\"1\":{\"157\":1}}],[\"logo\",{\"1\":{\"156\":4,\"270\":1,\"939\":2}}],[\"logstartoffset\",{\"1\":{\"1114\":1,\"1302\":1}}],[\"logstash\",{\"1\":{\"453\":1}}],[\"logs\",{\"1\":{\"123\":7,\"919\":1}}],[\"log\",{\"0\":{\"605\":1},\"1\":{\"33\":2,\"111\":8,\"123\":14,\"174\":1,\"220\":2,\"221\":2,\"223\":4,\"224\":1,\"225\":1,\"226\":4,\"228\":2,\"229\":4,\"317\":1,\"319\":3,\"323\":2,\"393\":4,\"401\":1,\"410\":2,\"566\":1,\"751\":2,\"752\":7,\"1142\":5,\"1177\":1,\"1325\":5,\"1354\":1,\"1507\":1},\"2\":{\"754\":1}}],[\"lso\",{\"0\":{\"1114\":1,\"1302\":1},\"1\":{\"1114\":2,\"1302\":2}}],[\"lset\",{\"1\":{\"667\":1}}],[\"lsd\",{\"1\":{\"428\":4,\"430\":4}}],[\"lsd的排序方式由键值的最右边开始\",{\"1\":{\"427\":1}}],[\"ls\",{\"1\":{\"107\":1,\"108\":2,\"176\":3,\"1198\":1,\"1371\":1}}],[\"ln\",{\"1\":{\"101\":1}}],[\"leo这两个都是指最后一条的下一条的位置而不是指最后一条的位置\",{\"1\":{\"1114\":1,\"1302\":1}}],[\"leo\",{\"0\":{\"1114\":1,\"1302\":1},\"1\":{\"1114\":1,\"1118\":3,\"1120\":1,\"1302\":1,\"1306\":3,\"1308\":1}}],[\"lexicon\",{\"1\":{\"477\":1}}],[\"learner\",{\"1\":{\"1200\":2,\"1373\":2}}],[\"leading\",{\"1\":{\"1196\":2,\"1369\":2}}],[\"leader负责处理读写请求\",{\"1\":{\"1444\":1}}],[\"leader的选举\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"leader挂后\",{\"1\":{\"183\":1}}],[\"leader与非leader服务器各司其职\",{\"1\":{\"183\":1}}],[\"leader选举是保证分布式数据一致性的关键所在\",{\"1\":{\"183\":1}}],[\"leader是干嘛用的\",{\"1\":{\"170\":1}}],[\"leader\",{\"0\":{\"1122\":1,\"1310\":1},\"1\":{\"129\":2,\"1116\":7,\"1117\":6,\"1120\":4,\"1121\":2,\"1122\":1,\"1123\":1,\"1196\":3,\"1199\":5,\"1200\":5,\"1304\":7,\"1305\":6,\"1308\":4,\"1309\":2,\"1310\":1,\"1311\":1,\"1369\":3,\"1372\":5,\"1373\":5}}],[\"least\",{\"1\":{\"427\":1,\"1001\":2,\"1210\":2}}],[\"lenght\",{\"1\":{\"695\":1}}],[\"length+1\",{\"1\":{\"406\":1}}],[\"length\",{\"1\":{\"123\":1,\"337\":1,\"338\":13,\"339\":3,\"390\":2,\"405\":8,\"406\":1,\"413\":4,\"417\":3,\"430\":1,\"574\":1,\"693\":1,\"1042\":1,\"1243\":1,\"1380\":1,\"1386\":6,\"1406\":1}}],[\"len\",{\"1\":{\"390\":2,\"417\":12,\"682\":1,\"684\":1,\"1386\":11,\"1478\":4}}],[\"level=\",{\"1\":{\"884\":1}}],[\"level\",{\"1\":{\"123\":1,\"169\":1,\"691\":2,\"1452\":1}}],[\"less\",{\"1\":{\"107\":1,\"392\":1,\"441\":2}}],[\"let\",{\"1\":{\"98\":1,\"103\":1}}],[\"left\",{\"1\":{\"33\":3,\"417\":4,\"856\":2,\"857\":2,\"858\":3}}],[\"导出oom时的堆转储文件\",{\"1\":{\"1400\":1}}],[\"导入相关的库和类\",{\"1\":{\"1466\":1}}],[\"导入和各种版本冲突\",{\"1\":{\"1182\":1,\"1357\":1}}],[\"导入依赖\",{\"0\":{\"875\":1,\"925\":1}}],[\"导入文件\",{\"0\":{\"32\":1}}],[\"导致版本号更新并不完全正确\",{\"1\":{\"1476\":1}}],[\"导致性能下降比较严重\",{\"1\":{\"1476\":1}}],[\"导致的问题是\",{\"1\":{\"1476\":1}}],[\"导致系统难以演进\",{\"1\":{\"1408\":1}}],[\"导致事务管理不生效\",{\"1\":{\"1408\":1}}],[\"导致依赖注入错误\",{\"1\":{\"1408\":1}}],[\"导致用户每次请求该数据都要去数据库中查询一遍\",{\"1\":{\"1159\":1,\"1339\":1}}],[\"导致大量网络阻塞\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"导致不一致\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"导致读取老的\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"导致\",{\"1\":{\"1005\":1,\"1122\":1,\"1214\":1,\"1310\":1,\"1408\":2}}],[\"导致控制层无法具体识别是哪个异常\",{\"1\":{\"893\":1}}],[\"导致整个系统崩溃\",{\"1\":{\"708\":1}}],[\"导致这些事务都无法继续执行\",{\"1\":{\"625\":1}}],[\"导致全表扫描\",{\"1\":{\"564\":1}}],[\"导致我们的日志信息不规整\",{\"1\":{\"224\":1}}],[\"导航栏\",{\"1\":{\"18\":1,\"21\":1}}],[\"此为\",{\"1\":{\"1408\":1}}],[\"此场景下zookeeper\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"此阶段清理删除掉标记阶段判断的已经死亡的对象\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"此内存区域的唯一目的就是存放对象实例\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"此处的切点是注解的方式\",{\"1\":{\"752\":1}}],[\"此时会阻塞当前\",{\"1\":{\"1420\":1}}],[\"此时会进入默认\",{\"1\":{\"981\":1}}],[\"此时事务\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"此时连接取消\",{\"1\":{\"1091\":1,\"1284\":1}}],[\"此时连接建立\",{\"1\":{\"1091\":1,\"1284\":1}}],[\"此时处于就绪状态\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"此时对象还未初始化\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"此时只需一看源码便知究竟\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"此时工作区\",{\"1\":{\"979\":1}}],[\"此时我们从最后一个非叶子结点开始\",{\"1\":{\"417\":1}}],[\"此时末尾就为最大值\",{\"1\":{\"417\":1}}],[\"此时如果使用计数排序的话\",{\"1\":{\"414\":1}}],[\"此时有个key\",{\"1\":{\"386\":1,\"392\":1}}],[\"此时系统会向磁盘发出读盘信号\",{\"1\":{\"327\":1}}],[\"此时进行一次磁盘\",{\"1\":{\"320\":1}}],[\"此时\",{\"1\":{\"183\":1,\"417\":2,\"487\":1,\"1008\":1,\"1217\":1}}],[\"此时假定server1的zxid为123\",{\"1\":{\"183\":1}}],[\"此时便开始leader选举\",{\"1\":{\"183\":1}}],[\"此时便认为已经选出了leader\",{\"1\":{\"183\":1}}],[\"此时也不会影响leader\",{\"1\":{\"183\":1}}],[\"此时server2的myid最大\",{\"1\":{\"183\":1}}],[\"此时server1的投票为\",{\"1\":{\"183\":1}}],[\"此时两台机器可以相互通信\",{\"1\":{\"183\":1}}],[\"此选项仅在使用sendfile的时候使用\",{\"1\":{\"123\":1}}],[\"此选项允许或禁止使用socke的tcp\",{\"1\":{\"123\":1}}],[\"此文字有脚注^first\",{\"1\":{\"31\":1}}],[\"此外\",{\"1\":{\"5\":1,\"212\":1,\"574\":1,\"776\":1,\"1384\":1,\"1410\":1,\"1426\":1,\"1438\":3,\"1450\":1,\"1474\":2,\"1480\":1}}],[\"提前将对象注入到\",{\"1\":{\"1412\":1}}],[\"提前演练\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"提议者\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"提议者服务器只负责发送提交指令\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"提升读取性能\",{\"1\":{\"1000\":1,\"1209\":1}}],[\"提升我们的认知\",{\"1\":{\"56\":1}}],[\"提到的这些关键点imovativ析得很透彻\",{\"1\":{\"1398\":1}}],[\"提到\",{\"1\":{\"982\":1}}],[\"提示用户登录\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"提示用户冲突发生\",{\"1\":{\"636\":1}}],[\"提示\",{\"1\":{\"889\":1}}],[\"提交操作\",{\"1\":{\"1476\":1}}],[\"提交之前先提交了\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"提交新的合并段到磁盘\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"提交\",{\"1\":{\"980\":3}}],[\"提交代码\",{\"1\":{\"978\":2}}],[\"提交成功\",{\"1\":{\"929\":1}}],[\"提交流程\",{\"1\":{\"929\":1}}],[\"提交事务\",{\"1\":{\"814\":1}}],[\"提交时检查版本号是否发生变化\",{\"1\":{\"632\":1}}],[\"提交一个比较大\",{\"1\":{\"123\":1}}],[\"提高消费者的处理能力\",{\"1\":{\"1440\":1}}],[\"提高开发效率\",{\"1\":{\"1408\":1}}],[\"提高运用能力\",{\"1\":{\"1404\":1}}],[\"提高效率\",{\"1\":{\"1398\":1,\"1440\":1}}],[\"提高自己的工程化水平与解决问题的能力\",{\"1\":{\"1380\":1}}],[\"提高查询性能\",{\"1\":{\"1380\":1,\"1460\":1}}],[\"提高查询效率\",{\"1\":{\"562\":1}}],[\"提高系统的并发处理能力\",{\"1\":{\"1442\":1}}],[\"提高系统的安全性\",{\"1\":{\"1131\":1,\"1316\":1}}],[\"提高系统吞吐量\",{\"1\":{\"1408\":1}}],[\"提高系统灵活性\",{\"1\":{\"1408\":1}}],[\"提高系统扩展性\",{\"1\":{\"1408\":1}}],[\"提高系统扩展性和复用性\",{\"1\":{\"1380\":1}}],[\"提高系统并发能力\",{\"0\":{\"610\":1}}],[\"提高\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"提高检索效率\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"提高检索性能\",{\"1\":{\"582\":1}}],[\"提高性能和可扩展性\",{\"1\":{\"1462\":1}}],[\"提高性能\",{\"1\":{\"637\":1,\"1380\":1,\"1428\":1}}],[\"提高了数据的写入和读取效率\",{\"1\":{\"1438\":1}}],[\"提高了redis集群高可用的特性\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"提高了redis的性能\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"提高了并发性\",{\"1\":{\"629\":1}}],[\"提高了并发性能\",{\"1\":{\"624\":1}}],[\"提高了系统的稳定性及可用性\",{\"1\":{\"581\":1}}],[\"提高了范围查询\",{\"1\":{\"317\":1}}],[\"提高集群的吞吐和性能\",{\"1\":{\"475\":1}}],[\"提出\",{\"1\":{\"410\":1}}],[\"提出的一个技巧\",{\"1\":{\"392\":1}}],[\"提问答疑\",{\"1\":{\"249\":1}}],[\"提问的智慧\",{\"1\":{\"12\":1}}],[\"提取重复代码块\",{\"1\":{\"1416\":1}}],[\"提取javapub讲坛\",{\"1\":{\"149\":1}}],[\"提取音频\",{\"0\":{\"149\":1,\"150\":1}}],[\"提取码\",{\"1\":{\"56\":1}}],[\"提供出色的性能\",{\"1\":{\"1438\":1}}],[\"提供两种持久化方案\",{\"1\":{\"1420\":1}}],[\"提供事务管理\",{\"1\":{\"1408\":1}}],[\"提供广泛的事务管理接口\",{\"1\":{\"1408\":1}}],[\"提供\",{\"1\":{\"1408\":1}}],[\"提供一个\",{\"1\":{\"1507\":1}}],[\"提供一系列端点可以监控服务及应用\",{\"1\":{\"1182\":1,\"1357\":1}}],[\"提供一些列\",{\"1\":{\"882\":1}}],[\"提供在监听器中注册bean的事件\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"提供对常用orm框架的管理和支持\",{\"1\":{\"1168\":1,\"1345\":1}}],[\"提供映射标签支持字段关系映射\",{\"1\":{\"1130\":1,\"1315\":1}}],[\"提供视频+完善文档\",{\"1\":{\"1019\":1,\"1225\":1}}],[\"提供多种操作\",{\"1\":{\"958\":1}}],[\"提供高可用性\",{\"1\":{\"664\":1}}],[\"提供了一个\",{\"1\":{\"1522\":1}}],[\"提供了选择器来实现多路复用\",{\"1\":{\"1478\":1}}],[\"提供了扩展点可以在\",{\"1\":{\"1410\":1}}],[\"提供了在\",{\"1\":{\"1408\":1}}],[\"提供了快速开发单个微服务的能力\",{\"1\":{\"1408\":1}}],[\"提供了几种垃圾收集器\",{\"1\":{\"1394\":1}}],[\"提供了aop\",{\"1\":{\"1168\":1,\"1345\":1}}],[\"提供了两种持久化的方式\",{\"1\":{\"1158\":1,\"1338\":1}}],[\"提供了9种动态sql标签\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"提供了副本机制\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"提供了\",{\"1\":{\"991\":2,\"1410\":2}}],[\"提供了发布\",{\"1\":{\"657\":1}}],[\"提供了键过期功能\",{\"1\":{\"657\":1}}],[\"提供了30多种常见语言的分词器\",{\"1\":{\"464\":1}}],[\"提供了分布式独享锁\",{\"1\":{\"171\":1}}],[\"提供最新特性和创新\",{\"1\":{\"242\":1}}],[\"提供全面且用户友好的文档\",{\"1\":{\"239\":1}}],[\"提供长达五年的支持\",{\"1\":{\"239\":1}}],[\"提供java和c的接口\",{\"1\":{\"171\":1}}],[\"提供的插件接口\",{\"1\":{\"1138\":1,\"1323\":1}}],[\"提供的首个近似聚合是cardinality\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"提供的别名机制使用非常广泛\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"提供的用来简化\",{\"1\":{\"907\":1}}],[\"提供的\",{\"1\":{\"657\":1}}],[\"提供的有序集合数据类构能实现各种复杂的排行榜应用\",{\"1\":{\"657\":1}}],[\"提供的功能包括\",{\"1\":{\"171\":1}}],[\"提供的一个免费的\",{\"1\":{\"98\":1}}],[\"提供更加丰富的写作功能\",{\"1\":{\"29\":1}}],[\"ephemeral\",{\"1\":{\"1466\":1}}],[\"epsilon等算法与案例\",{\"1\":{\"1396\":1}}],[\"epoch\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"edt\",{\"1\":{\"1476\":1}}],[\"eden\",{\"1\":{\"1108\":1,\"1299\":1}}],[\"edu\",{\"1\":{\"174\":1,\"915\":1,\"959\":2,\"961\":1}}],[\"e系统设计的一种避免死锁产生的算法\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"ehcache\",{\"1\":{\"1002\":2,\"1005\":1,\"1211\":2,\"1214\":1}}],[\"e2\",{\"1\":{\"894\":1}}],[\"e1\",{\"1\":{\"893\":2,\"894\":1}}],[\"evaluate\",{\"1\":{\"950\":2}}],[\"evaluation\",{\"1\":{\"950\":2}}],[\"evanjin\",{\"1\":{\"820\":1}}],[\"evan\",{\"1\":{\"800\":1,\"820\":1}}],[\"eviction\",{\"1\":{\"664\":1}}],[\"every\",{\"1\":{\"950\":4}}],[\"everyone\",{\"1\":{\"169\":1}}],[\"everything\",{\"1\":{\"107\":1}}],[\"eventloopgroup\",{\"1\":{\"991\":1}}],[\"eventloop\",{\"1\":{\"991\":1}}],[\"event=\",{\"1\":{\"928\":2}}],[\"events\",{\"1\":{\"123\":1}}],[\"even\",{\"1\":{\"129\":1}}],[\"ether\",{\"1\":{\"540\":1,\"541\":1}}],[\"etcdctl\",{\"1\":{\"132\":4,\"133\":1}}],[\"etcd\",{\"0\":{\"131\":1,\"132\":1},\"1\":{\"129\":2,\"131\":5,\"133\":2},\"2\":{\"134\":1,\"135\":1}}],[\"etc\",{\"1\":{\"111\":1,\"126\":1,\"142\":3,\"456\":1,\"915\":1}}],[\"erlang等客户端\",{\"1\":{\"652\":1}}],[\"erc721\",{\"1\":{\"537\":1}}],[\"erc20\",{\"1\":{\"537\":1}}],[\"errorlog\",{\"1\":{\"1142\":1,\"1325\":1}}],[\"error错误\",{\"1\":{\"123\":1}}],[\"errors\",{\"1\":{\"123\":4,\"169\":1}}],[\"error\",{\"1\":{\"123\":10,\"160\":2,\"219\":2,\"224\":1,\"225\":1,\"338\":1,\"842\":1,\"892\":1,\"893\":7,\"894\":1,\"1494\":3}}],[\"es里面分布式search的查询流程\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"es里面分布式search的查询流程如下\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"es作为一个分布式的存储和检索系统\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"es的索引名不能改变\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"es字段数据类型\",{\"1\":{\"494\":1}}],[\"es映射的文件会很多\",{\"1\":{\"456\":1}}],[\"es\",{\"0\":{\"1025\":1,\"1229\":1},\"1\":{\"447\":1,\"457\":1,\"464\":1,\"481\":2,\"482\":1,\"484\":1,\"487\":1,\"492\":4,\"494\":2,\"496\":2,\"498\":2,\"499\":1,\"503\":2,\"504\":1,\"510\":1,\"513\":1,\"1028\":1,\"1232\":1}}],[\"es集群\",{\"0\":{\"459\":1},\"1\":{\"447\":1}}],[\"especially\",{\"1\":{\"169\":1}}],[\"emp5\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"emp4\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"emp3\",{\"1\":{\"1050\":2,\"1251\":2}}],[\"emp2\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"emp\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"employee\",{\"1\":{\"1050\":11,\"1251\":11}}],[\"emptydb\",{\"1\":{\"1420\":1}}],[\"empty\",{\"1\":{\"406\":1}}],[\"email\",{\"1\":{\"4\":1,\"1507\":6}}],[\"e技能\",{\"1\":{\"382\":1}}],[\"e>\",{\"1\":{\"337\":1,\"338\":2,\"339\":2}}],[\"ecs\",{\"1\":{\"238\":1}}],[\"eb21c081\",{\"1\":{\"206\":1}}],[\"exnteds\",{\"1\":{\"1047\":2,\"1248\":2}}],[\"exactly\",{\"1\":{\"950\":1}}],[\"example<\",{\"1\":{\"907\":1}}],[\"exampleplugin\",{\"1\":{\"833\":3}}],[\"example\",{\"1\":{\"829\":1,\"833\":1,\"907\":1,\"967\":1,\"1058\":1,\"1256\":1,\"1394\":7,\"1416\":1}}],[\"ex\",{\"1\":{\"666\":1,\"1049\":1,\"1163\":1,\"1250\":1,\"1343\":1,\"1410\":1}}],[\"exec\",{\"1\":{\"919\":1}}],[\"executor\",{\"1\":{\"833\":4,\"927\":1,\"1136\":3,\"1321\":3}}],[\"executeupdate\",{\"1\":{\"1133\":1,\"1318\":1}}],[\"executequery\",{\"1\":{\"800\":1}}],[\"executecommand\",{\"1\":{\"196\":1}}],[\"executed\",{\"1\":{\"193\":1}}],[\"execute\",{\"1\":{\"193\":3,\"196\":4}}],[\"execution方式可以用路径表达式指定对哪些方法拦截\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"executions>\",{\"1\":{\"907\":1}}],[\"execution>\",{\"1\":{\"907\":1}}],[\"execution\",{\"1\":{\"193\":1,\"752\":1,\"893\":2,\"894\":7,\"1100\":1,\"1291\":1}}],[\"exe\",{\"1\":{\"660\":2,\"950\":1}}],[\"exchange\",{\"1\":{\"1382\":9}}],[\"exclusivegateway>\",{\"1\":{\"928\":1}}],[\"exclusive\",{\"1\":{\"638\":1}}],[\"exclusion\",{\"1\":{\"625\":1,\"1063\":1,\"1261\":1}}],[\"exception异常前先catch住再抛出\",{\"1\":{\"893\":1}}],[\"exceptions\",{\"1\":{\"842\":1}}],[\"exception\",{\"1\":{\"224\":2,\"225\":1,\"405\":4,\"417\":2,\"711\":3,\"755\":2,\"800\":1,\"810\":1,\"820\":6,\"826\":1,\"848\":1,\"849\":1,\"850\":1,\"856\":2,\"857\":1,\"858\":1,\"891\":5,\"892\":4,\"893\":5,\"894\":3,\"939\":4,\"1001\":1,\"1049\":5,\"1058\":1,\"1061\":1,\"1084\":1,\"1210\":1,\"1250\":5,\"1256\":1,\"1259\":1,\"1277\":1,\"1392\":1,\"1414\":5,\"1494\":1}}],[\"exceptionhandlingexample\",{\"1\":{\"200\":1}}],[\"exists\",{\"0\":{\"598\":1},\"1\":{\"598\":1,\"666\":3,\"799\":1,\"887\":2,\"1149\":1,\"1332\":1,\"1418\":1}}],[\"extension\",{\"1\":{\"1392\":3}}],[\"extensionelements>\",{\"1\":{\"928\":3}}],[\"extendedtypesenabled\",{\"1\":{\"1195\":1,\"1368\":1}}],[\"extendedlength\",{\"1\":{\"338\":5}}],[\"extendedcapacity\",{\"1\":{\"338\":2}}],[\"extends\",{\"1\":{\"337\":1,\"338\":2,\"339\":2,\"755\":2,\"856\":1,\"891\":2,\"892\":3,\"893\":1,\"1061\":3,\"1064\":3,\"1259\":3,\"1262\":3,\"1386\":1,\"1390\":1,\"1392\":3,\"1404\":1,\"1414\":1,\"1424\":9}}],[\"extern\",{\"1\":{\"752\":1}}],[\"ext4\",{\"1\":{\"325\":1}}],[\"expungestaleentry\",{\"1\":{\"1386\":2}}],[\"expungestaleentries\",{\"1\":{\"1386\":3}}],[\"expectmodcount\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"expectedmodcount\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"expense\",{\"1\":{\"928\":4,\"929\":4}}],[\"expenseprocess\",{\"1\":{\"928\":2}}],[\"expressionlanguage=\",{\"1\":{\"928\":1}}],[\"expiration\",{\"1\":{\"727\":1}}],[\"expire\",{\"1\":{\"666\":2,\"727\":3,\"1428\":1}}],[\"expires\",{\"1\":{\"123\":4}}],[\"explain\",{\"1\":{\"564\":2,\"588\":1}}],[\"exposure\",{\"1\":{\"948\":1}}],[\"expose\",{\"1\":{\"913\":1,\"1514\":1}}],[\"exposes\",{\"1\":{\"169\":1}}],[\"exporter\",{\"1\":{\"946\":2}}],[\"export\",{\"1\":{\"142\":2,\"948\":1}}],[\"equals与==区别\",{\"0\":{\"1044\":1,\"1245\":1}}],[\"equals\",{\"1\":{\"192\":2,\"194\":2,\"195\":4,\"196\":2,\"197\":2,\"338\":3,\"339\":4,\"894\":1,\"1044\":12,\"1245\":12,\"1380\":1,\"1406\":1,\"1410\":1,\"1466\":1,\"1478\":1}}],[\"eager\",{\"1\":{\"493\":1}}],[\"earlysingletonobjects\",{\"1\":{\"1173\":2,\"1350\":2}}],[\"earlyreturnexample\",{\"1\":{\"190\":1}}],[\"early\",{\"0\":{\"190\":1},\"1\":{\"1173\":2,\"1350\":2}}],[\"easy\",{\"1\":{\"169\":1}}],[\"eldest\",{\"1\":{\"1001\":1,\"1210\":1}}],[\"elastic\",{\"1\":{\"453\":1,\"472\":1,\"484\":1,\"488\":1,\"510\":1,\"1024\":1,\"1029\":1,\"1030\":1,\"1233\":1,\"1234\":1}}],[\"elasticsearch搜索文档过程\",{\"0\":{\"1472\":1}}],[\"elasticsearch能够高效地处理大量的文档和复杂的搜索需求\",{\"1\":{\"1470\":1}}],[\"elasticsearch可以从磁盘中读取文档内容并返回给我们\",{\"1\":{\"1470\":1}}],[\"elasticsearch索引文档底层过程\",{\"0\":{\"1470\":1}}],[\"elasticsearch会将原始文档和相关的元数据存储在磁盘上\",{\"1\":{\"1470\":1}}],[\"elasticsearch会将文档的副本分配给其他节点上的分片\",{\"1\":{\"1470\":1}}],[\"elasticsearch会将文档内容进行分析\",{\"1\":{\"1470\":1}}],[\"elasticsearch会使用分布式写入协调器来确保数据的一致性\",{\"1\":{\"1470\":1}}],[\"elasticsearch会为每个词条创建倒排索引\",{\"1\":{\"1470\":1}}],[\"elasticsearch会根据文档的路由值确定将文档索引到哪个分片\",{\"1\":{\"1470\":1}}],[\"elasticsearch会根据一定的规则将数据均匀地分配到不同的分片上\",{\"1\":{\"1462\":1}}],[\"elasticsearch会执行以下几个步骤\",{\"1\":{\"1470\":1}}],[\"elasticsearch会自动处理选主过程\",{\"1\":{\"1466\":1}}],[\"elasticsearch会如何重新选举新的主节点\",{\"1\":{\"1466\":1}}],[\"elasticsearch选主\",{\"0\":{\"1466\":1}}],[\"elasticsearch倒排索引\",{\"0\":{\"1464\":1},\"1\":{\"1464\":1}}],[\"elasticsearch集群就像是一个大家庭\",{\"1\":{\"1462\":1}}],[\"elasticsearch集群是如何工作的呢\",{\"1\":{\"1462\":1}}],[\"elasticsearch集群索引分片\",{\"0\":{\"1462\":1}}],[\"elasticsearch就像是一群小伙伴组成的团队\",{\"1\":{\"1462\":1}}],[\"elasticsearch不仅仅是一个搜索引擎\",{\"1\":{\"1460\":1}}],[\"elasticsearch提供了缓存机制\",{\"1\":{\"1460\":1}}],[\"elasticsearch将搜索请求发送到所有相关的分片上\",{\"1\":{\"1460\":1}}],[\"elasticsearch使用tf\",{\"1\":{\"1460\":1}}],[\"elasticsearch使用倒排索引来加速搜索\",{\"1\":{\"1460\":1}}],[\"elasticsearch使用分片和复制机制来实现数据的分布式存储和高可用性\",{\"1\":{\"1458\":1}}],[\"elasticsearch的应用非常广泛\",{\"1\":{\"1460\":1}}],[\"elasticsearch的性能优化\",{\"1\":{\"1460\":1}}],[\"elasticsearch的搜索原理可以简单概括为以下几个步骤\",{\"1\":{\"1460\":1}}],[\"elasticsearch的搜索原理\",{\"1\":{\"1460\":1}}],[\"elasticsearch的核心组件包括\",{\"1\":{\"1460\":1}}],[\"elasticsearch的核心组件\",{\"1\":{\"1460\":1}}],[\"elasticsearch的核心概念包括索引\",{\"1\":{\"1456\":1}}],[\"elasticsearch架构设计\",{\"0\":{\"1460\":1}}],[\"elasticsearch通过提供restful\",{\"1\":{\"1458\":1}}],[\"elasticsearch通过文件映射\",{\"1\":{\"456\":1}}],[\"elasticsearch实际上是在lucene的基础上构建的\",{\"1\":{\"1458\":1}}],[\"elasticsearch和lucene\",{\"0\":{\"1458\":1}}],[\"elasticsearch是一个基于lucene构建的分布式搜索和分析引擎\",{\"1\":{\"1458\":1}}],[\"elasticsearch是一个开源的分布式搜索和分析引擎\",{\"1\":{\"1456\":1,\"1460\":1}}],[\"elasticsearch是个非常强大且灵活的工具\",{\"1\":{\"1456\":1}}],[\"elasticsearch还支持聚合\",{\"1\":{\"1456\":1}}],[\"elasticsearch真是太棒了\",{\"1\":{\"1456\":1}}],[\"elasticsearch基础\",{\"0\":{\"1456\":1}}],[\"elasticsearch中的最小的数据存储单元\",{\"1\":{\"473\":1}}],[\"elasticsearch核心概念\",{\"0\":{\"468\":1},\"1\":{\"447\":1}}],[\"elasticsearch\",{\"0\":{\"444\":1,\"452\":1,\"453\":1,\"1026\":1,\"1027\":1,\"1028\":1,\"1029\":1,\"1030\":1,\"1031\":1,\"1033\":1,\"1034\":1,\"1035\":1,\"1228\":1,\"1230\":1,\"1231\":1,\"1232\":1,\"1233\":1,\"1234\":1,\"1235\":1,\"1237\":1,\"1238\":1,\"1239\":1},\"1\":{\"176\":16,\"447\":1,\"450\":2,\"453\":4,\"455\":1,\"458\":4,\"459\":1,\"460\":1,\"464\":2,\"465\":3,\"466\":2,\"467\":1,\"469\":1,\"470\":1,\"472\":2,\"475\":1,\"481\":1,\"484\":1,\"488\":1,\"493\":2,\"510\":1,\"513\":1,\"570\":1,\"587\":1,\"947\":1,\"1024\":1,\"1027\":1,\"1028\":1,\"1029\":1,\"1030\":1,\"1032\":1,\"1033\":2,\"1034\":1,\"1036\":1,\"1231\":1,\"1232\":1,\"1233\":1,\"1234\":1,\"1236\":1,\"1237\":2,\"1238\":1,\"1240\":1,\"1456\":1},\"2\":{\"445\":1,\"446\":1,\"448\":1,\"449\":1,\"462\":1,\"463\":1,\"479\":1,\"480\":1,\"511\":1,\"512\":1,\"529\":1,\"530\":1,\"1039\":1,\"1487\":1,\"1491\":1}}],[\"elementdata\",{\"1\":{\"1404\":5,\"1446\":2}}],[\"elementtype\",{\"1\":{\"751\":1,\"1049\":2,\"1250\":2,\"1402\":9}}],[\"element\",{\"1\":{\"722\":2}}],[\"elements\",{\"1\":{\"406\":2}}],[\"elemdata\",{\"1\":{\"338\":26}}],[\"elem\",{\"1\":{\"337\":10,\"338\":12,\"339\":34}}],[\"election方案解决了上述问题\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"election\",{\"1\":{\"174\":1,\"1466\":2}}],[\"elections\",{\"1\":{\"129\":1}}],[\"elif\",{\"1\":{\"306\":1}}],[\"elk\",{\"1\":{\"224\":1,\"453\":1}}],[\"else中编写逻辑\",{\"1\":{\"195\":1}}],[\"else中调用这些函数\",{\"0\":{\"195\":1}}],[\"else\",{\"0\":{\"190\":1},\"1\":{\"191\":2,\"192\":2,\"194\":3,\"195\":4,\"196\":1,\"197\":1,\"228\":2,\"306\":2,\"320\":1,\"338\":3,\"339\":4,\"341\":4,\"342\":4,\"390\":1,\"405\":1,\"406\":1,\"441\":1,\"711\":1,\"850\":2,\"893\":2,\"1001\":1,\"1042\":1,\"1210\":1,\"1243\":1,\"1380\":4,\"1382\":1,\"1386\":3,\"1398\":1,\"1404\":1,\"1416\":1,\"1466\":1,\"1478\":2,\"1494\":1}}],[\"else的11种方案\",{\"0\":{\"189\":1}}],[\"e\",{\"1\":{\"111\":1,\"200\":1,\"224\":6,\"225\":2,\"337\":9,\"338\":12,\"339\":13,\"382\":1,\"441\":1,\"711\":6,\"765\":1,\"893\":4,\"894\":1,\"939\":4,\"946\":1,\"980\":2,\"1001\":6,\"1025\":1,\"1061\":4,\"1062\":4,\"1064\":4,\"1171\":1,\"1210\":6,\"1229\":1,\"1259\":4,\"1260\":4,\"1262\":4,\"1348\":1,\"1380\":15,\"1386\":22,\"1390\":2,\"1404\":3,\"1446\":4,\"1494\":1}}],[\"effect\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"eff\",{\"1\":{\"98\":1}}],[\"env\",{\"1\":{\"948\":1}}],[\"environments\",{\"0\":{\"834\":1}}],[\"environments>\",{\"1\":{\"806\":1,\"808\":1}}],[\"environment\",{\"1\":{\"829\":1,\"1187\":1,\"1362\":1,\"1408\":1}}],[\"environment>\",{\"1\":{\"806\":2,\"808\":1}}],[\"enum中的注解呢\",{\"1\":{\"1402\":1}}],[\"enummap\",{\"1\":{\"1380\":1}}],[\"enum\",{\"1\":{\"892\":1,\"1402\":2,\"1494\":1}}],[\"enums\",{\"1\":{\"892\":3,\"893\":1,\"894\":1}}],[\"entrylist\",{\"1\":{\"1481\":2}}],[\"entry<>\",{\"1\":{\"1406\":1}}],[\"entry<string\",{\"1\":{\"1001\":2,\"1210\":2}}],[\"entry<k\",{\"1\":{\"1001\":2,\"1210\":2,\"1406\":2}}],[\"entryset\",{\"1\":{\"1001\":1,\"1210\":1}}],[\"entry\",{\"1\":{\"1001\":1,\"1210\":1,\"1380\":1,\"1386\":13}}],[\"entrypoint\",{\"1\":{\"913\":1,\"1514\":1}}],[\"entries\",{\"1\":{\"160\":2}}],[\"enter\",{\"1\":{\"900\":1}}],[\"entity\",{\"1\":{\"878\":1,\"880\":1,\"888\":3,\"889\":2,\"891\":2,\"892\":1,\"893\":3,\"894\":1,\"1507\":2}}],[\"enough\",{\"1\":{\"540\":1,\"541\":1}}],[\"english\",{\"1\":{\"490\":4}}],[\"engine=innodb\",{\"1\":{\"574\":1,\"640\":1,\"789\":1,\"799\":1,\"855\":1,\"858\":3,\"887\":2}}],[\"engine=myisam\",{\"1\":{\"570\":1}}],[\"engine\",{\"1\":{\"72\":1,\"589\":1,\"644\":1,\"915\":2,\"1100\":1,\"1291\":1}}],[\"en\",{\"1\":{\"396\":1,\"472\":1,\"484\":1,\"510\":1,\"589\":1,\"590\":3,\"611\":1,\"806\":1,\"807\":1,\"808\":1,\"818\":1,\"826\":1,\"845\":1,\"880\":1,\"890\":2}}],[\"enqueue|push\",{\"1\":{\"340\":1}}],[\"ensurecapacityinternal\",{\"1\":{\"1404\":1}}],[\"ensurecapacity\",{\"1\":{\"338\":4}}],[\"endpoint\",{\"1\":{\"950\":1}}],[\"endpoints\",{\"1\":{\"948\":1}}],[\"endevent>\",{\"1\":{\"928\":1}}],[\"enddatetime\",{\"1\":{\"863\":2,\"864\":1}}],[\"end\",{\"1\":{\"220\":1,\"787\":1,\"788\":1,\"790\":4,\"863\":3,\"928\":5,\"1410\":2}}],[\"enabletransactionmanagement\",{\"1\":{\"1402\":1}}],[\"enableautoconfiguration=\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"enableautoconfiguration\",{\"1\":{\"1184\":1,\"1185\":3,\"1359\":1,\"1360\":3,\"1402\":1}}],[\"enabled\",{\"1\":{\"175\":1,\"459\":3,\"493\":1,\"948\":1}}],[\"enable\",{\"1\":{\"142\":1,\"493\":2,\"1402\":1}}],[\"encode\",{\"1\":{\"939\":2}}],[\"encoder>\",{\"1\":{\"884\":1}}],[\"encoder\",{\"1\":{\"884\":1}}],[\"encoders\",{\"1\":{\"161\":1,\"884\":1}}],[\"encoding>\",{\"1\":{\"907\":1}}],[\"encoding=\",{\"1\":{\"806\":1,\"807\":1,\"808\":1,\"818\":1,\"826\":1,\"845\":1,\"875\":1,\"878\":1,\"880\":1,\"881\":1,\"882\":1,\"884\":1,\"890\":2,\"907\":1,\"928\":1}}],[\"encoding\",{\"1\":{\"123\":1,\"211\":1,\"693\":1,\"698\":2,\"887\":1}}],[\"encrypt\",{\"1\":{\"98\":1,\"103\":1}}],[\"enhance\",{\"1\":{\"29\":1}}],[\"对后续学习各种并发工具和框架\",{\"1\":{\"1476\":1}}],[\"对吧\",{\"1\":{\"1464\":1}}],[\"对吗\",{\"1\":{\"1444\":1}}],[\"对kafka的性能有了深入的理解\",{\"1\":{\"1438\":1}}],[\"对的\",{\"1\":{\"1424\":1}}],[\"对构造器循环依赖\",{\"1\":{\"1412\":1}}],[\"对代理循环依赖\",{\"1\":{\"1412\":1}}],[\"对长连接使用主从\",{\"1\":{\"1408\":1}}],[\"对非关键性计算使用异步处理\",{\"1\":{\"1408\":1}}],[\"对频繁读取数据的接口使用缓存\",{\"1\":{\"1408\":1}}],[\"对关系型数据库进行分库分表\",{\"1\":{\"1408\":1}}],[\"对其设计与实现有深入理解\",{\"1\":{\"1398\":1}}],[\"对其的理解也只是停留在理论的层面上\",{\"1\":{\"755\":1}}],[\"对超大对象特殊处理\",{\"1\":{\"1398\":1}}],[\"对标记和筛选阶段误差产生的垃圾链进行清理\",{\"1\":{\"1398\":1}}],[\"对标记和筛选阶段差异化技术产生的垃圾链进行清理\",{\"1\":{\"1394\":1}}],[\"对内存进行复制然后清理\",{\"1\":{\"1394\":1}}],[\"对整个堆进行垃圾回收\",{\"1\":{\"1388\":1}}],[\"对整体项目有一个了解\",{\"1\":{\"115\":1}}],[\"对它的设计和实现有了比较深入的理解\",{\"1\":{\"1380\":1}}],[\"对实现不同应用间的相互隔离非常有帮助\",{\"1\":{\"1202\":1,\"1375\":1}}],[\"对运行时指标进行检查和监控\",{\"1\":{\"1188\":1,\"1363\":1}}],[\"对类进行方法级别的切面增强\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"对bean进行一些自定义的前置处理\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"对struts2的支持\",{\"1\":{\"1168\":1,\"1345\":1}}],[\"对jdbc进行封装\",{\"1\":{\"1168\":1,\"1345\":1}}],[\"对一定不存在的key进行过滤\",{\"1\":{\"1159\":1,\"1339\":1}}],[\"对一个列表进行修剪\",{\"1\":{\"667\":1}}],[\"对一个整数进行质因数分解\",{\"1\":{\"306\":1}}],[\"对查询结果为空的情况也进行缓存\",{\"1\":{\"1159\":1,\"1339\":1}}],[\"对查询进行优化\",{\"1\":{\"1149\":1,\"1332\":1}}],[\"对数据加上排他锁\",{\"1\":{\"1150\":1,\"1333\":1}}],[\"对数据加上共享锁\",{\"1\":{\"1150\":1,\"1333\":1}}],[\"对此\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"对某些行的内容作了更改\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"对结果集的解析过程\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"对已完成的事务而言\",{\"1\":{\"1114\":1,\"1302\":1}}],[\"对未完成的事务而言\",{\"1\":{\"1114\":1,\"1302\":1}}],[\"对静态变量和静态代码块执行初始化工作\",{\"1\":{\"1105\":1,\"1296\":1}}],[\"对静态资源处理\",{\"1\":{\"882\":1}}],[\"对称性\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"对所有可以成为\",{\"1\":{\"1027\":1,\"1231\":1}}],[\"对所有的计数累加\",{\"1\":{\"411\":1}}],[\"对缓存的负荷更小\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"对工作区的修改内容已经没有了\",{\"1\":{\"979\":1}}],[\"对mybatis有一定了解的\",{\"1\":{\"795\":1}}],[\"对maven的理解停留在能管理依赖\",{\"1\":{\"761\":1}}],[\"对日志描述的优化处理\",{\"1\":{\"752\":1}}],[\"对方法前后进行拦截\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"对方法名\",{\"1\":{\"752\":1}}],[\"对方法运行时间进行监控\",{\"1\":{\"752\":1}}],[\"对使用了自定义注解的方法进行aop切面处理\",{\"1\":{\"752\":1}}],[\"对设置到哈希表\",{\"1\":{\"668\":1}}],[\"对小型数据集使用\",{\"0\":{\"609\":1}}],[\"对接服务端玩法\",{\"1\":{\"550\":1}}],[\"对象与之对应\",{\"1\":{\"1481\":1}}],[\"对象与对象之间会彼此失去联系\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"对象指针偏移量\",{\"1\":{\"1481\":1}}],[\"对象指针\",{\"1\":{\"1481\":1}}],[\"对象头偏移量\",{\"1\":{\"1481\":1}}],[\"对象头\",{\"1\":{\"1481\":1}}],[\"对象头中的标记字被重新设计\",{\"1\":{\"1480\":1}}],[\"对象头中的标记字是\",{\"1\":{\"1480\":1}}],[\"对象或方法内部的状态能保证正确\",{\"1\":{\"1446\":1}}],[\"对象并返回\",{\"1\":{\"1416\":1}}],[\"对象负责填充\",{\"1\":{\"1414\":1}}],[\"对象晋升到老年代时预留一定空间减少碎片\",{\"1\":{\"1396\":1}}],[\"对象在eden出生\",{\"1\":{\"1394\":1}}],[\"对象example引用为null\",{\"1\":{\"1394\":1}}],[\"对象通过引用计数算法判断是否为垃圾\",{\"1\":{\"1394\":1}}],[\"对象如何判断为\",{\"1\":{\"1394\":1}}],[\"对象对应的变量值\",{\"1\":{\"1386\":1}}],[\"对象中查找当前\",{\"1\":{\"1386\":1}}],[\"对象中存储了一个键值对\",{\"1\":{\"1386\":1}}],[\"对象中属性有\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"对象来存储每个线程的变量副本的\",{\"1\":{\"1386\":1}}],[\"对象a获得依赖对象b的过程\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"对象a与对象b之间失去了直接联系\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"对象a依赖于对象b\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"对象粘合在一起发挥作用\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"对象之间复杂的依赖关系\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"对象之间耦合度过高的系统\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"对象之间的关系由容器来创建和维护\",{\"1\":{\"1170\":1,\"1347\":1}}],[\"对象之间的关系本来是由我们开发者自己创建和维护的\",{\"1\":{\"1170\":1,\"1347\":1}}],[\"对象之间的依赖关系已经降低到了最低程度\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"对象之间的依赖关系也越来越复杂\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"对象之间的耦合关系是无法避免的\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"对象进行分页\",{\"1\":{\"1138\":1,\"1323\":1}}],[\"对象设置参数的过程\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"对象关系图如下\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"对象关系映射\",{\"1\":{\"1129\":1,\"1314\":1}}],[\"对象图导航语言\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"对象的创建和销毁是非常频繁的操作\",{\"1\":{\"1388\":1}}],[\"对象的创建和销毁\",{\"1\":{\"1388\":1}}],[\"对象的方法将响应回传给客户端\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"对象的空转时长\",{\"1\":{\"698\":1}}],[\"对象获得请求信息\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"对象资源\",{\"1\":{\"711\":2}}],[\"对象会记录自己的最后一次被访问的时间\",{\"1\":{\"699\":1}}],[\"对象共享池指redis内部维护\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"对象共享\",{\"1\":{\"698\":1}}],[\"对象结构\",{\"1\":{\"698\":1}}],[\"对象拷贝\",{\"1\":{\"587\":1}}],[\"对象作为独立的隐藏文档来存储\",{\"1\":{\"504\":1}}],[\"对象\",{\"1\":{\"504\":2,\"878\":1,\"1085\":1,\"1090\":2,\"1136\":2,\"1278\":1,\"1283\":2,\"1321\":2,\"1386\":4,\"1388\":1,\"1390\":4,\"1414\":3,\"1416\":1,\"1468\":4,\"1481\":1}}],[\"对象类型\",{\"0\":{\"503\":1}}],[\"对象是\",{\"1\":{\"221\":1}}],[\"对快速高亮fast\",{\"1\":{\"493\":1}}],[\"对排序和聚合能提升较大性能\",{\"1\":{\"493\":1}}],[\"对排查故障造成感染\",{\"1\":{\"227\":1}}],[\"对not\",{\"1\":{\"493\":1}}],[\"对比可重复读\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"对比键的函数\",{\"1\":{\"687\":1}}],[\"对比\",{\"0\":{\"423\":1},\"1\":{\"1044\":1,\"1245\":1}}],[\"对树中的结点按从上至下\",{\"1\":{\"417\":1}}],[\"对应监控每一个redis实例\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"对应了操作系统上的一个文件夹\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"对应方法名\",{\"1\":{\"890\":1}}],[\"对应的栈帧会被弹出\",{\"1\":{\"1388\":1}}],[\"对应的\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"对应的值不为空\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"对应的配置\",{\"1\":{\"907\":1}}],[\"对应的接口全名\",{\"1\":{\"890\":1}}],[\"对应的技术入门在\",{\"1\":{\"871\":1}}],[\"对应原userdao\",{\"1\":{\"826\":1}}],[\"对应数组下标的元素进行\",{\"1\":{\"412\":1}}],[\"对应位置\",{\"1\":{\"386\":1,\"392\":1}}],[\"对每一个桶中元素进行排序\",{\"1\":{\"404\":1}}],[\"对每个桶进行排序\",{\"1\":{\"401\":1,\"405\":1}}],[\"对每个桶中元素进行排序\",{\"1\":{\"401\":1}}],[\"对空无法出队\",{\"1\":{\"341\":1}}],[\"对我来说值博率很高\",{\"1\":{\"264\":1}}],[\"对外获取线索\",{\"1\":{\"264\":1}}],[\"对这个行业也有了自己的认识\",{\"1\":{\"264\":1}}],[\"对寻求长期稳定性的用户可能不理想\",{\"1\":{\"242\":1}}],[\"对故障排查意义不大\",{\"1\":{\"229\":1}}],[\"对低级别的日志输出\",{\"0\":{\"223\":1}}],[\"对不同时代的读者产生影响\",{\"1\":{\"56\":1}}],[\"对于目标分片\",{\"1\":{\"1470\":1}}],[\"对于技术人员来说是一个必备的技能\",{\"1\":{\"1460\":1}}],[\"对于处理大数据和构建搜索引擎来说\",{\"1\":{\"1456\":1}}],[\"对于刚入行的技术人员来说\",{\"1\":{\"1436\":1}}],[\"对于自定义类型作为键\",{\"1\":{\"1380\":1}}],[\"对于自增字段\",{\"1\":{\"638\":1}}],[\"对于线程安全的需求\",{\"1\":{\"1380\":1}}],[\"对于第二类\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"对于第一类\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"对于系统开发而言\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"对于面向对象设计及编程的基本思想\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"对于面试的同学\",{\"1\":{\"117\":1}}],[\"对于浏览量\",{\"1\":{\"1156\":1,\"1336\":1}}],[\"对于到达服务器的客户机请求\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"对于成员变量来说\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"对于引用类型来说\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"对于基本类型来说\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"对于类\",{\"1\":{\"1048\":1,\"1249\":1}}],[\"对于需要下车的人\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"对于需要保证唯一性的列\",{\"1\":{\"565\":1}}],[\"对于nio来说通过channel发起io操作请求后\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"对于没有分配到处理线程的连接就会被阻塞或者拒绝\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"对于任意非空引用x\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"对于任何引用x\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"对于任何引用x和y\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"对于任何非空引用x\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"对于读操作\",{\"1\":{\"1035\":1,\"1239\":1}}],[\"对于大数据量\",{\"0\":{\"1034\":1,\"1238\":1}}],[\"对于每一个搜索请求而言\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"对于宿主机来说\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"对于这种情况\",{\"1\":{\"979\":1}}],[\"对于这些参数的描述主要基于笔者的理解\",{\"1\":{\"493\":1}}],[\"对于后端接口\",{\"1\":{\"892\":1}}],[\"对于传递性依赖\",{\"1\":{\"770\":1}}],[\"对于编译\",{\"1\":{\"769\":2}}],[\"对于下面操作\",{\"1\":{\"664\":1}}],[\"对于范围查询\",{\"1\":{\"638\":1}}],[\"对于索引项的查询\",{\"1\":{\"638\":1}}],[\"对于索引优化和原理理解都非常重要\",{\"1\":{\"315\":1}}],[\"对于一些设置了过期时间的\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"对于一次性事件\",{\"1\":{\"604\":1}}],[\"对于一个后端开发来说\",{\"1\":{\"107\":1}}],[\"对于连续的数值\",{\"1\":{\"592\":1}}],[\"对于慢查询我们一般通过如下思路解决\",{\"1\":{\"588\":1}}],[\"对于列的值分布进行分析\",{\"1\":{\"573\":1}}],[\"对于经常更新的字段\",{\"1\":{\"571\":1}}],[\"对于经常出现在查询条件中的列\",{\"1\":{\"565\":1}}],[\"对于频繁执行的复杂查询\",{\"1\":{\"567\":1}}],[\"对于只读或几乎只读的表\",{\"1\":{\"565\":1}}],[\"对于数据量小的表\",{\"1\":{\"565\":1}}],[\"对于数据量较大的表\",{\"1\":{\"565\":1}}],[\"对于数据量的大小评估\",{\"1\":{\"562\":1}}],[\"对于复合索引\",{\"1\":{\"561\":1,\"564\":1}}],[\"对于浮点数\",{\"1\":{\"497\":1}}],[\"对于初学者可以对\",{\"1\":{\"464\":1,\"481\":1,\"513\":1}}],[\"对于初始化或leader宕机时\",{\"1\":{\"183\":1}}],[\"对于出现频率不同的数字集合\",{\"1\":{\"406\":1}}],[\"对于桶中元素的排序\",{\"1\":{\"401\":1}}],[\"对于现在大趋势分布式架构\",{\"1\":{\"395\":1}}],[\"对于普通队列的\",{\"1\":{\"341\":1}}],[\"对于普通应用\",{\"1\":{\"123\":1}}],[\"对于普通应用设为\",{\"1\":{\"123\":1}}],[\"对于固定数量的条件分支\",{\"0\":{\"194\":1}}],[\"对于server1\",{\"1\":{\"183\":1}}],[\"对于server1而言\",{\"1\":{\"183\":1}}],[\"对于server2而言\",{\"1\":{\"183\":1}}],[\"对于软件系统的某些类\",{\"1\":{\"86\":1}}],[\"对于游戏来说\",{\"1\":{\"72\":1}}],[\"对于\",{\"1\":{\"43\":1,\"223\":1,\"574\":3,\"1048\":1,\"1249\":1,\"1382\":2}}],[\"对\",{\"0\":{\"1030\":1,\"1234\":1},\"1\":{\"28\":1,\"123\":1,\"405\":2,\"417\":1,\"666\":1,\"676\":1,\"710\":1,\"770\":3,\"870\":1,\"1136\":1,\"1321\":1,\"1398\":1,\"1408\":1,\"1410\":2,\"1412\":1,\"1414\":2}}],[\"为空或者为\",{\"1\":{\"1494\":1}}],[\"为何不用\",{\"1\":{\"1494\":1}}],[\"为类添加额外的功能\",{\"1\":{\"1474\":2}}],[\"为啥泛型类不能有静态方法\",{\"1\":{\"1424\":1}}],[\"为多个小\",{\"1\":{\"1412\":1}}],[\"为解决这个问题\",{\"1\":{\"1396\":1}}],[\"为下次gc做准备\",{\"1\":{\"1398\":1}}],[\"为下一次gc做准备\",{\"1\":{\"1396\":1}}],[\"为下面几条jvm指令\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"为每一个bean提供一个实例\",{\"1\":{\"1172\":1,\"1349\":1}}],[\"为每个session创建一个实例\",{\"1\":{\"1172\":1,\"1349\":1}}],[\"为每个\",{\"1\":{\"26\":1}}],[\"为3\",{\"1\":{\"1118\":1,\"1306\":1}}],[\"为4\",{\"1\":{\"1118\":1,\"1306\":1}}],[\"为保证集群中的某个节点发生故障时\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"为对象的属性赋值\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"为对象分配空间\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"为目的对它们进行重排序\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"为后续的指令建立基础映像\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"为异步非阻塞\",{\"1\":{\"991\":1}}],[\"为事务做准备\",{\"1\":{\"892\":1}}],[\"为dao接口方法提供sql语句配置\",{\"1\":{\"890\":1}}],[\"为客户端模式\",{\"1\":{\"755\":1}}],[\"为单位的数组\",{\"1\":{\"721\":1}}],[\"为哈希表\",{\"1\":{\"668\":2}}],[\"为已存在的列表添加值\",{\"1\":{\"667\":1}}],[\"为一个long型\",{\"1\":{\"441\":1}}],[\"为一页\",{\"1\":{\"322\":1}}],[\"为堆数\",{\"1\":{\"424\":1,\"425\":1}}],[\"为所采取的基数\",{\"1\":{\"424\":1,\"425\":1}}],[\"为所有叶子结点增加了一个链指针\",{\"1\":{\"322\":1}}],[\"为1\",{\"1\":{\"395\":1}}],[\"为止\",{\"1\":{\"320\":1}}],[\"为\",{\"1\":{\"320\":1,\"323\":4,\"496\":1,\"504\":2,\"510\":3,\"688\":1,\"1035\":3,\"1041\":1,\"1118\":1,\"1119\":1,\"1136\":1,\"1239\":3,\"1242\":1,\"1306\":1,\"1307\":1,\"1321\":1}}],[\"为底数很大的\",{\"1\":{\"319\":1}}],[\"为用户提供数据节点的监听注册服务\",{\"1\":{\"184\":1}}],[\"为用户提供数据的注册和查询服务\",{\"1\":{\"184\":1}}],[\"为什么redis是单线程的\",{\"0\":{\"1157\":1,\"1337\":1}}],[\"为什么这么快\",{\"0\":{\"1124\":1,\"1312\":1}}],[\"为什么红黑树转换回链表的阈值不是7而是6呢\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"为什么不直接用key的hashcode\",{\"0\":{\"1078\":1,\"1273\":1}}],[\"为什么计算key的hash时要把hashcode的高16位与低16位进行异或\",{\"0\":{\"1078\":1,\"1273\":1}}],[\"为什么重写equals还要重写hashcode\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"为什么呢\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"为什么我在主线程\",{\"1\":{\"755\":1}}],[\"为什么使用maven\",{\"0\":{\"763\":1}}],[\"为什么使用redis\",{\"1\":{\"676\":1}}],[\"为什么使用单例模式\",{\"0\":{\"86\":1}}],[\"为什么大字段io效率低\",{\"1\":{\"579\":1}}],[\"为什么要有不同的作用域\",{\"1\":{\"1410\":1}}],[\"为什么要进行两倍扩容\",{\"1\":{\"1380\":1}}],[\"为什么要进行依赖管理\",{\"1\":{\"762\":1}}],[\"为什么要选择数组和链表这两种数据结构呢\",{\"1\":{\"1380\":1}}],[\"为什么要写\",{\"1\":{\"1378\":1}}],[\"为什么要使用双亲委派模型\",{\"0\":{\"1106\":1,\"1297\":1},\"1\":{\"1106\":1,\"1297\":1}}],[\"为什么要使用缓存\",{\"0\":{\"679\":1}}],[\"为什么要把链表转为红黑树\",{\"0\":{\"1079\":1,\"1274\":1}}],[\"为什么要在数据库中加锁\",{\"0\":{\"616\":1}}],[\"为什么要用缓存\",{\"0\":{\"1000\":1,\"1209\":1}}],[\"为什么要用redis\",{\"0\":{\"678\":1}}],[\"为什么要用\",{\"0\":{\"566\":1,\"989\":1,\"1181\":1,\"1356\":1}}],[\"为什么要用zookeeper\",{\"0\":{\"170\":1}}],[\"为什么要三次握手\",{\"1\":{\"121\":1}}],[\"为什么\",{\"0\":{\"563\":1,\"1080\":1,\"1275\":1},\"1\":{\"121\":1}}],[\"为例\",{\"0\":{\"292\":1},\"1\":{\"98\":1,\"296\":1,\"428\":1,\"588\":1,\"1507\":1}}],[\"为了优化\",{\"1\":{\"1480\":1}}],[\"为了进一步的查询优化\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"为了不影响集群正常的性能\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"为了实现扩展性\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"为了实现这一点\",{\"1\":{\"327\":1}}],[\"为了能够在这种极端情况下仍保证较为高效的查询效率\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"为了让hashcode的高16位能够参与到按位与操作中\",{\"1\":{\"1078\":1,\"1273\":1}}],[\"为了让哈希表的\",{\"1\":{\"688\":1}}],[\"为了反序列化一个对象\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"为了解决对象之间的耦合度过高的问题\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"为了解决该问题就出现了分区再分配\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"为了解决这个问题\",{\"1\":{\"1028\":1,\"1232\":1,\"1454\":1}}],[\"为了解决线程并发的问题\",{\"1\":{\"755\":1}}],[\"为了控制容器中进程对资源的访问\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"为了控制我们的执行顺序\",{\"1\":{\"1017\":1,\"1223\":1}}],[\"为了支持各种协议和处理数据的方式\",{\"1\":{\"991\":1}}],[\"为了使用接口动态代理\",{\"1\":{\"826\":1}}],[\"为了使桶排序更加高效\",{\"1\":{\"401\":1}}],[\"为了提高内存分配的效率\",{\"1\":{\"1388\":1}}],[\"为了提高垃圾回收的效率\",{\"1\":{\"1388\":1}}],[\"为了提高程序的性能\",{\"1\":{\"1388\":1}}],[\"为了提高查询效率\",{\"1\":{\"588\":1}}],[\"为了提供性能而做的优化\",{\"1\":{\"755\":1}}],[\"为了代码简洁易懂就不加了\",{\"1\":{\"752\":1}}],[\"为了防止幻读\",{\"1\":{\"638\":1}}],[\"为了缓和系统表的资源\",{\"0\":{\"605\":1}}],[\"为了快速开发\",{\"1\":{\"588\":1}}],[\"为了避免应用出现单点故障\",{\"1\":{\"727\":1}}],[\"为了避免io争抢并减少锁表的几率\",{\"1\":{\"579\":1}}],[\"为了避免线程的上下文切换消耗大量时间\",{\"1\":{\"91\":1}}],[\"为了用户有参与感\",{\"1\":{\"536\":1}}],[\"为了系统后续处理方便\",{\"1\":{\"478\":1}}],[\"为了估算出k和m的值\",{\"1\":{\"392\":1}}],[\"为了便于操作\",{\"1\":{\"342\":1}}],[\"为了达到这个目的\",{\"1\":{\"327\":1}}],[\"为了读取这个扇区的数据\",{\"1\":{\"327\":1}}],[\"为了简单起见\",{\"1\":{\"327\":1}}],[\"为了增加\",{\"1\":{\"322\":1}}],[\"为了更快\",{\"1\":{\"319\":1}}],[\"为了打印一行日志\",{\"1\":{\"221\":1}}],[\"为了保证数据实时效\",{\"1\":{\"657\":1}}],[\"为了保证效率\",{\"1\":{\"652\":1}}],[\"为了保证高可移植性和编解码质量\",{\"1\":{\"139\":1}}],[\"为了保留系统运行关键指标\",{\"1\":{\"219\":1}}],[\"为了丰富文档写作\",{\"1\":{\"28\":1}}],[\"语句实现物理分页\",{\"1\":{\"1416\":1}}],[\"语句才会添加\",{\"1\":{\"1416\":1}}],[\"语句本身\",{\"1\":{\"1416\":1}}],[\"语句执行中\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"语句的\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"语句的所有方法\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"语句\",{\"1\":{\"1136\":2,\"1321\":2,\"1416\":1}}],[\"语句中的\",{\"1\":{\"619\":1}}],[\"语句都是以实现功能为主\",{\"1\":{\"588\":1}}],[\"语句优化\",{\"1\":{\"588\":1}}],[\"语句在执行查询时\",{\"1\":{\"560\":1}}],[\"语句产生的字符串记录的是堆栈信息\",{\"1\":{\"224\":1}}],[\"语言是支持多线程的\",{\"1\":{\"755\":1}}],[\"语言编写\",{\"1\":{\"711\":1}}],[\"语言并不具备自动的内存回收功能\",{\"1\":{\"698\":1}}],[\"语言传统的字符串表示\",{\"1\":{\"682\":1}}],[\"语言\",{\"1\":{\"296\":1,\"430\":1}}],[\"语言写一个业务极度复杂的管理系统\",{\"1\":{\"72\":1}}],[\"语法\",{\"0\":{\"33\":1},\"1\":{\"29\":1,\"44\":1,\"123\":3,\"157\":1,\"717\":1,\"790\":1,\"1134\":1,\"1319\":1}}],[\"语法进行了扩展\",{\"1\":{\"28\":1}}],[\"语法扩展\",{\"1\":{\"27\":1}}],[\"语雀\",{\"1\":{\"3\":1}}],[\"是你的\",{\"1\":{\"1524\":1}}],[\"是两个流行的自动化构建工具\",{\"1\":{\"1520\":1}}],[\"是要做一个用户相关的系统\",{\"1\":{\"1502\":1}}],[\"是实现java并发编程的基础工具之一\",{\"1\":{\"1476\":1}}],[\"是java并发编程的基础之一\",{\"1\":{\"1476\":1}}],[\"是java程序员用得最频繁的集合之一\",{\"1\":{\"1380\":1}}],[\"是最小的数据单元\",{\"1\":{\"1460\":1}}],[\"是最基础的锁类型\",{\"1\":{\"618\":1}}],[\"是遗留的线程安全\",{\"1\":{\"1446\":1}}],[\"是遗留类\",{\"1\":{\"1072\":1,\"1267\":1}}],[\"是吗\",{\"1\":{\"1428\":1,\"1444\":1,\"1452\":1,\"1454\":1}}],[\"是真的吗\",{\"1\":{\"1412\":1}}],[\"是真实存在对应的值的\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"是基于内存的数据库\",{\"1\":{\"1418\":1}}],[\"是基于\",{\"1\":{\"1408\":1,\"1414\":1}}],[\"是如何解决循环依赖问题的呢\",{\"1\":{\"1412\":1}}],[\"是如何调用这些方法的\",{\"1\":{\"1410\":1}}],[\"是如何工作的\",{\"1\":{\"1408\":1}}],[\"是如何实现\",{\"0\":{\"1027\":1,\"1231\":1}}],[\"是的\",{\"1\":{\"1392\":1,\"1396\":2,\"1398\":1,\"1420\":1,\"1428\":1,\"1436\":2,\"1438\":1,\"1440\":1,\"1444\":2,\"1446\":1,\"1452\":1,\"1454\":2,\"1458\":1,\"1468\":1,\"1470\":1,\"1476\":1,\"1480\":1}}],[\"是默认的拒绝策略\",{\"1\":{\"1384\":1}}],[\"是hashmap的线程安全替代方案\",{\"1\":{\"1380\":1}}],[\"是hadoop和hbase的重要组件\",{\"1\":{\"171\":1}}],[\"是当前推荐的线程安全\",{\"1\":{\"1380\":1}}],[\"是映射中的键值\",{\"1\":{\"1380\":1}}],[\"是多台\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"是ioc的核心\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"是软件工程永远追求的目标之一\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"是不是太武断了\",{\"1\":{\"1398\":1}}],[\"是不是有点懵\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"是不是很开心~\",{\"1\":{\"893\":1}}],[\"是拼接符\",{\"1\":{\"1131\":1,\"1316\":1}}],[\"是字符串替换\",{\"1\":{\"1131\":1,\"1316\":1}}],[\"是字符串且格式为日期格式\",{\"1\":{\"492\":1}}],[\"是占位符\",{\"1\":{\"1131\":1,\"1316\":1}}],[\"是按\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"是怎么选举的\",{\"0\":{\"1122\":1,\"1310\":1}}],[\"是其它编程语言交互的接口\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"是各个线程共享的内存区域\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"是浏览器对\",{\"1\":{\"1093\":1,\"1286\":1}}],[\"是在\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"是在线程工作内存当中获取\",{\"1\":{\"755\":1}}],[\"是服务器内部的处理\",{\"1\":{\"1089\":1,\"1282\":1}}],[\"是sun公司提供的一套规范\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"是同步的\",{\"1\":{\"1072\":1,\"1267\":1}}],[\"是非常强大的一个功能\",{\"1\":{\"1416\":1}}],[\"是非常重要且非常实用的一个命令\",{\"1\":{\"980\":1}}],[\"是非线程安全的\",{\"1\":{\"1072\":1,\"1267\":1,\"1380\":1}}],[\"是线程安全的\",{\"1\":{\"1046\":1,\"1072\":1,\"1247\":1,\"1267\":1,\"1446\":1}}],[\"是判断两个变量或实例所指向的内存空间的值是不是相同\",{\"1\":{\"1044\":2,\"1245\":2}}],[\"是判断两个变量或实例是不是指向同一个内存空间\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"是完全可行的\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"是docker的管理工具\",{\"1\":{\"1017\":1,\"1223\":1}}],[\"是轻量级的沙盒\",{\"1\":{\"1015\":1,\"1221\":1}}],[\"是比较麻烦的\",{\"1\":{\"1009\":1,\"1218\":1}}],[\"是项目开发中最常修改的地方\",{\"1\":{\"907\":1}}],[\"是项目中用到的一些属性\",{\"1\":{\"907\":1}}],[\"是参数类型\",{\"1\":{\"890\":1}}],[\"是返回值类型\",{\"1\":{\"890\":1}}],[\"是因为该方法有两个或以上的参数\",{\"1\":{\"889\":1}}],[\"是因为词频信息在搜索结果排序时\",{\"1\":{\"478\":1}}],[\"是进行字符串拼接\",{\"1\":{\"842\":1}}],[\"是负责执行低层映射语句的内部对象\",{\"1\":{\"833\":1}}],[\"是传递依赖\",{\"1\":{\"770\":1}}],[\"是第一条指令\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"是第一直接依赖\",{\"1\":{\"770\":1}}],[\"是第二直接依赖\",{\"1\":{\"770\":1}}],[\"是单线程应用\",{\"1\":{\"727\":1}}],[\"是区分大小写的\",{\"1\":{\"715\":1}}],[\"是什么\",{\"0\":{\"1115\":1,\"1303\":1},\"1\":{\"677\":1}}],[\"是通过hash值与数组长度减一的值进行按位与操作的\",{\"1\":{\"1078\":1,\"1273\":1}}],[\"是通过\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"是通过哈希表实现的\",{\"1\":{\"669\":1}}],[\"是通往卓越之路的钥匙\",{\"1\":{\"56\":1}}],[\"是简单的字符串列表\",{\"1\":{\"667\":1}}],[\"是批量操作\",{\"1\":{\"666\":1}}],[\"是运行\",{\"1\":{\"654\":1}}],[\"是british\",{\"1\":{\"652\":1}}],[\"是redis\",{\"1\":{\"652\":1}}],[\"是mysql数据库中innodb存储引擎特有的一种锁机制\",{\"1\":{\"622\":1}}],[\"是根据表中数据来进行查询优化的\",{\"0\":{\"599\":1}}],[\"是数据库使用中最长遇见的问题\",{\"1\":{\"564\":1}}],[\"是性能瓶颈\",{\"1\":{\"562\":1}}],[\"是可以通过我们插入的文档自动生成索引\",{\"1\":{\"491\":1}}],[\"是elasticsearch\",{\"1\":{\"482\":1}}],[\"是整个\",{\"1\":{\"481\":1}}],[\"是整个搜索的核心\",{\"1\":{\"477\":1}}],[\"是由艾兹格\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"是由c语言编写的\",{\"1\":{\"682\":1}}],[\"是由\",{\"1\":{\"454\":1,\"1378\":1}}],[\"是由高位数为基底开始进行分配\",{\"1\":{\"428\":1}}],[\"是与名为\",{\"1\":{\"453\":1}}],[\"是我用\",{\"1\":{\"1524\":1}}],[\"是我最喜欢的\",{\"1\":{\"1418\":1}}],[\"是我最喜欢且熟练使用的持久层框架之一\",{\"1\":{\"1416\":1}}],[\"是我们比较先想到的方法\",{\"1\":{\"438\":1}}],[\"是我们在数据量较小的系统中经常使用的\",{\"1\":{\"436\":1}}],[\"是我花费一个月时间整理的\",{\"1\":{\"56\":1}}],[\"是1970年由布隆提出的\",{\"1\":{\"385\":1}}],[\"是聚合在一起的\",{\"1\":{\"320\":1}}],[\"是支持你做下去的重要一点\",{\"1\":{\"264\":1}}],[\"是突破职业瓶颈的最佳选择\",{\"1\":{\"263\":1}}],[\"是合规的\",{\"1\":{\"263\":1}}],[\"是使用门面模式的日志框架\",{\"1\":{\"222\":1}}],[\"是google的chubby一个开源的实现\",{\"1\":{\"171\":1}}],[\"是video的缩写\",{\"1\":{\"162\":1}}],[\"是指向下一个节点的指针\",{\"1\":{\"1380\":1}}],[\"是指某个极度\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"是指缓存由于某些原因无法提供服务\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"是指查询一个一定不存在的数据\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"是指利用堆这种数据结构所设计的一种排序算法\",{\"1\":{\"417\":1}}],[\"是指当前server编号\",{\"1\":{\"183\":1}}],[\"是指当前服务器数据越新\",{\"1\":{\"183\":1}}],[\"是指每隔几帧输出一帧\",{\"1\":{\"158\":1}}],[\"是指\",{\"1\":{\"158\":1}}],[\"是独立的一个开源代码\",{\"1\":{\"152\":1}}],[\"是视频容器转换\",{\"1\":{\"148\":1}}],[\"是否相等\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"是否允许元素重复\",{\"1\":{\"1071\":1,\"1266\":1}}],[\"是否超过了该资源剩余的总量\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"是否能转换成右边的class类型\",{\"1\":{\"1041\":1,\"1242\":1}}],[\"是否能手写一下\",{\"0\":{\"1001\":1,\"1210\":1}}],[\"是否需要存储等\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"是否需要检索\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"是否存在\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"是否存在时\",{\"1\":{\"386\":1,\"392\":1}}],[\"是否成功标志\",{\"1\":{\"893\":1}}],[\"是否喜欢的文章\",{\"1\":{\"716\":1}}],[\"是否提前进行\",{\"1\":{\"711\":1}}],[\"是否是大字段的原则拆分为多个表\",{\"1\":{\"583\":1}}],[\"是否单独设置此字段的是否存储而从\",{\"1\":{\"493\":1}}],[\"是否准确\",{\"1\":{\"204\":1}}],[\"是否来自looking状态的服务器\",{\"1\":{\"183\":1}}],[\"是否在http\",{\"1\":{\"123\":1}}],[\"是否调用sendfile\",{\"1\":{\"123\":1}}],[\"是一款优秀的持久层框架\",{\"1\":{\"1416\":1}}],[\"是一款高性能\",{\"1\":{\"1398\":1}}],[\"是一款比较经典的低停顿收集器\",{\"1\":{\"1396\":1}}],[\"是一种标记\",{\"1\":{\"1396\":1}}],[\"是一种并发标记清除算法\",{\"1\":{\"1396\":1}}],[\"是一种错误检测机制\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"是一种以空间换时间的做法\",{\"1\":{\"1060\":1,\"1258\":1}}],[\"是一种流行的开源软件平台\",{\"1\":{\"1014\":1,\"1220\":1}}],[\"是一种非常\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"是一种特殊的远程仓库\",{\"1\":{\"768\":1}}],[\"是一种基数估算算法\",{\"1\":{\"722\":1}}],[\"是一种数据库完整性约束\",{\"1\":{\"623\":1}}],[\"是一种难得的奢侈\",{\"1\":{\"56\":1}}],[\"是一棵自平衡的搜索树\",{\"1\":{\"319\":1}}],[\"是一个强大的分布式消息系统\",{\"1\":{\"1440\":1}}],[\"是一个水果啊\",{\"1\":{\"1424\":1}}],[\"是一个简单直接的替代方案\",{\"1\":{\"1380\":1}}],[\"是一个散列映射表\",{\"1\":{\"1380\":1}}],[\"是一个以对话形式讲解知识点的文章合集\",{\"1\":{\"1378\":1}}],[\"是一个基于观察者模式设计的分布式服务管理框架\",{\"1\":{\"1194\":1,\"1367\":1}}],[\"是一个基于内存的\",{\"1\":{\"1155\":1,\"1335\":1}}],[\"是一个模板方法\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"是一个有序的队列\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"是一个分布式的流式处理平台\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"是一个w3c标准\",{\"1\":{\"1093\":1,\"1286\":1}}],[\"是一个包装类\",{\"1\":{\"1070\":1,\"1265\":1}}],[\"是一个避免死锁\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"是一个计数器\",{\"1\":{\"1061\":1,\"1259\":1,\"1390\":1}}],[\"是一个同步的辅助类\",{\"1\":{\"1061\":2,\"1259\":2}}],[\"是一个实现线程安全的方式\",{\"1\":{\"1060\":1,\"1258\":1}}],[\"是一个用来定义和运行复杂应用的docker工具\",{\"1\":{\"1017\":1,\"1223\":1}}],[\"是一个文本文件\",{\"1\":{\"1016\":1,\"1222\":1,\"1512\":1}}],[\"是一个异步的\",{\"1\":{\"988\":1}}],[\"是一个比较优秀的工具\",{\"1\":{\"947\":1}}],[\"是一个快速开发框架\",{\"1\":{\"899\":1}}],[\"是一个采用纯java编写的开源项目管理工具\",{\"1\":{\"761\":1}}],[\"是一个类似于\",{\"1\":{\"717\":1}}],[\"是一个高性能的key\",{\"1\":{\"652\":1}}],[\"是一个\",{\"1\":{\"652\":1,\"668\":1,\"1386\":1}}],[\"是一个自增字段\",{\"1\":{\"622\":1}}],[\"是一个好的选择\",{\"0\":{\"598\":1},\"1\":{\"1149\":1,\"1332\":1}}],[\"是一个开源框架\",{\"1\":{\"1408\":1}}],[\"是一个开源\",{\"1\":{\"664\":1}}],[\"是一个开源的分布式协调服务\",{\"1\":{\"1194\":1,\"1367\":1}}],[\"是一个开源的dashboard展示工具\",{\"1\":{\"947\":1}}],[\"是一个开源的系统监控和告警的工具包\",{\"1\":{\"946\":1}}],[\"是一个开源的\",{\"1\":{\"677\":1}}],[\"是一个开源的使用ansi\",{\"1\":{\"652\":1}}],[\"是一个开源的搜索引擎\",{\"1\":{\"453\":1}}],[\"是一个开源大语言模型工具\",{\"1\":{\"290\":1}}],[\"是一个排序算法\",{\"1\":{\"401\":1}}],[\"是一个集合接口\",{\"1\":{\"1070\":1,\"1265\":1}}],[\"是一个集合\",{\"1\":{\"386\":1,\"392\":1}}],[\"是一个完全由\",{\"1\":{\"305\":1}}],[\"是一个很好的高薪职业\",{\"1\":{\"263\":1}}],[\"是一定要看的\",{\"1\":{\"117\":1}}],[\"是用来构建分布式一致性状态机系统\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"是用来编译源代码的\",{\"1\":{\"907\":1}}],[\"是用来创建文件的命令\",{\"1\":{\"108\":1}}],[\"是用什么编程语言开发的\",{\"1\":{\"72\":1}}],[\"是全世界最好的编程语言\",{\"1\":{\"72\":1}}],[\"是获取知识和智慧的宝贵途径\",{\"1\":{\"56\":1}}],[\"是\",{\"1\":{\"26\":1,\"162\":4,\"316\":1,\"317\":1,\"503\":1,\"510\":1,\"564\":1,\"569\":1,\"660\":1,\"669\":1,\"678\":1,\"693\":1,\"696\":1,\"890\":1,\"907\":3,\"1041\":1,\"1090\":3,\"1134\":1,\"1188\":1,\"1195\":1,\"1242\":1,\"1283\":3,\"1319\":1,\"1363\":1,\"1368\":1,\"1380\":1,\"1408\":1,\"1414\":1,\"1478\":1,\"1480\":1}}],[\"请将\",{\"1\":{\"1514\":1}}],[\"请随时提问\",{\"1\":{\"1442\":1}}],[\"请随时联系我\",{\"1\":{\"4\":1}}],[\"请开始你的表演\",{\"1\":{\"1428\":1}}],[\"请问你叫什么名字\",{\"1\":{\"1414\":1}}],[\"请问你对jvm内存模型有了解吗\",{\"1\":{\"1388\":1}}],[\"请问你对\",{\"1\":{\"1386\":1,\"1468\":1}}],[\"请问你对线程池有什么了解\",{\"1\":{\"1384\":1}}],[\"请王哥考考我\",{\"1\":{\"1412\":1}}],[\"请谈一谈\",{\"0\":{\"1076\":1,\"1271\":1}}],[\"请谈谈你对\",{\"0\":{\"574\":1}}],[\"请说一下java容器集合的分类\",{\"0\":{\"1069\":1,\"1264\":1}}],[\"请说说有哪些缓存算法\",{\"0\":{\"1001\":1,\"1210\":1}}],[\"请注意这里说的是\",{\"1\":{\"774\":1}}],[\"请看代码\",{\"1\":{\"755\":1}}],[\"请求映射到\",{\"1\":{\"1414\":1}}],[\"请求都会创建一个\",{\"1\":{\"1410\":1}}],[\"请求直接落到数据库上\",{\"1\":{\"1160\":1,\"1340\":1}}],[\"请求最终将到达顶层的启动类加载器\",{\"1\":{\"1106\":1,\"1297\":1}}],[\"请求管道化\",{\"1\":{\"1095\":1,\"1288\":1}}],[\"请求对象不会变\",{\"1\":{\"1089\":1,\"1282\":1}}],[\"请求对象\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"请求处理\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"请求到\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"请求会被转发到\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"请求发现缓存不存在后\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"请求时从\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"请求等等\",{\"1\":{\"990\":1}}],[\"请求\",{\"1\":{\"990\":1,\"1005\":1,\"1029\":1,\"1085\":2,\"1214\":1,\"1233\":1,\"1278\":2}}],[\"请求的整个过程\",{\"1\":{\"984\":1}}],[\"请求的方法名\",{\"1\":{\"752\":1}}],[\"请求先不展示了\",{\"1\":{\"296\":1}}],[\"请求相应参数等信息\",{\"1\":{\"207\":1}}],[\"请求参数错误\",{\"1\":{\"1494\":1}}],[\"请求参数\",{\"1\":{\"207\":1}}],[\"请求方式\",{\"1\":{\"984\":1}}],[\"请求方式常用的有如下几种\",{\"1\":{\"206\":1}}],[\"请求方式规范\",{\"0\":{\"206\":1}}],[\"请求和应答时间长度\",{\"1\":{\"174\":1}}],[\"请求backup机器\",{\"1\":{\"123\":1}}],[\"请求有哪些区别\",{\"1\":{\"121\":1}}],[\"请点一个免费的\",{\"1\":{\"53\":1}}],[\"请使用绝对链接\",{\"1\":{\"43\":1}}],[\"请阅读\",{\"1\":{\"26\":1,\"28\":1}}],[\"请先阅读\",{\"1\":{\"25\":1}}],[\"文中大多是以实际面试中遇到的情况编写\",{\"1\":{\"1378\":1}}],[\"文末还会提供无剪辑版的完整搭建视频\",{\"1\":{\"969\":1}}],[\"文末源码\",{\"1\":{\"910\":1}}],[\"文本检索\",{\"1\":{\"1464\":1}}],[\"文本执行使用\",{\"1\":{\"654\":1}}],[\"文本类型\",{\"1\":{\"493\":1}}],[\"文档3\",{\"1\":{\"1464\":1}}],[\"文档2\",{\"1\":{\"1464\":1}}],[\"文档1\",{\"1\":{\"1464\":1}}],[\"文档就是具体的记录\",{\"1\":{\"1456\":1}}],[\"文档并没有真\",{\"1\":{\"1033\":1,\"1237\":1}}],[\"文档的根元素\",{\"1\":{\"907\":1}}],[\"文档及统计数据自动生成\",{\"1\":{\"777\":1}}],[\"文档中并不属于同一个\",{\"1\":{\"504\":1}}],[\"文档中\",{\"1\":{\"504\":1}}],[\"文档中同样存在布尔类型\",{\"1\":{\"499\":1}}],[\"文档扁平化\",{\"1\":{\"503\":1}}],[\"文档号+词频+位置+偏移量\",{\"1\":{\"493\":1}}],[\"文档号+词频+位置\",{\"1\":{\"493\":1}}],[\"文档号+词频\",{\"1\":{\"493\":1}}],[\"文档频率信息\",{\"1\":{\"478\":2}}],[\"文档矩阵\",{\"1\":{\"477\":1}}],[\"文档类似于关系型数据库中表内的一行记录\",{\"1\":{\"473\":1}}],[\"文档\",{\"1\":{\"473\":1,\"1029\":1,\"1233\":1,\"1456\":1,\"1460\":1}}],[\"文章点赞打赏截图\",{\"1\":{\"716\":1}}],[\"文章结构由简到难\",{\"1\":{\"588\":1}}],[\"文章\",{\"1\":{\"266\":1}}],[\"文章标题列表\",{\"1\":{\"21\":1}}],[\"文件名\",{\"1\":{\"1524\":1}}],[\"文件是一个可执行的\",{\"1\":{\"1524\":1}}],[\"文件下执行测试案例\",{\"1\":{\"1507\":1}}],[\"文件后载入\",{\"1\":{\"1422\":1}}],[\"文件发送给从服务器\",{\"1\":{\"1422\":1}}],[\"文件并获得数据集\",{\"1\":{\"1422\":1}}],[\"文件并发送给从服务器\",{\"1\":{\"1422\":1}}],[\"文件创建完成之前是不能处理其他客户端发送的任何命令请求\",{\"1\":{\"1420\":1}}],[\"文件追加数据更完整\",{\"1\":{\"1158\":1,\"1338\":1}}],[\"文件可以加载多个映射文件\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"文件句柄和一个数据文件句柄\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"文件句柄和内存\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"文件句柄的开销\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"文件的正确性\",{\"1\":{\"1105\":1,\"1296\":1}}],[\"文件的内容都可以\",{\"1\":{\"665\":1}}],[\"文件然后装载入内存中\",{\"1\":{\"1105\":1,\"1296\":1}}],[\"文件中包含这个插件\",{\"1\":{\"1522\":1}}],[\"文件中设置的<load\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"文件中被标记为删除的文档将不会被写入\",{\"1\":{\"1033\":1,\"1237\":1}}],[\"文件中被标记为删除\",{\"1\":{\"1033\":2,\"1237\":2}}],[\"文件中使用的示例\",{\"1\":{\"1017\":1,\"1223\":1}}],[\"文件中\",{\"1\":{\"1016\":1,\"1090\":1,\"1222\":1,\"1283\":1}}],[\"文件中对应的值来替换\",{\"1\":{\"829\":1}}],[\"文件准备\",{\"0\":{\"914\":1}}],[\"文件其他位置的属性值\",{\"1\":{\"907\":1}}],[\"文件了\",{\"1\":{\"883\":1}}],[\"文件夹里新建logback\",{\"1\":{\"884\":1}}],[\"文件夹里新建\",{\"1\":{\"881\":1,\"882\":1}}],[\"文件夹里新建一个\",{\"1\":{\"879\":1}}],[\"文件夹的图片\",{\"1\":{\"43\":1}}],[\"文件没有分离\",{\"1\":{\"835\":1}}],[\"文件最后添加一行\",{\"1\":{\"456\":1}}],[\"文件系统\",{\"1\":{\"325\":1}}],[\"文件系统中一个文件大小只有1个字节\",{\"1\":{\"325\":1}}],[\"文件太大\",{\"1\":{\"151\":1}}],[\"文件扩展名与文件类型映射表\",{\"1\":{\"123\":1}}],[\"文件描述符在cache中总是打开状态\",{\"1\":{\"123\":1}}],[\"文件授权\",{\"1\":{\"111\":1}}],[\"文件\",{\"1\":{\"111\":1,\"711\":1,\"879\":1,\"881\":1,\"882\":1,\"884\":1,\"1033\":1,\"1237\":1,\"1522\":1,\"1523\":1,\"1525\":1}}],[\"文件搜索\",{\"1\":{\"107\":1}}],[\"文件权限\",{\"1\":{\"107\":1}}],[\"文件压缩\",{\"1\":{\"107\":1}}],[\"文件查看\",{\"1\":{\"107\":1}}],[\"文件操作\",{\"0\":{\"108\":1},\"1\":{\"107\":1,\"1478\":1}}],[\"文件放置在一起使用相对路径进行引用\",{\"1\":{\"43\":1}}],[\"文件生成页面\",{\"1\":{\"24\":1}}],[\"v的值变为了其他值\",{\"1\":{\"1476\":1}}],[\"v的确为a\",{\"1\":{\"1476\":1}}],[\"v在jdk9后g1成为了更好的选择\",{\"1\":{\"1396\":1}}],[\"v>>\",{\"1\":{\"1001\":2,\"1210\":2}}],[\"v>\",{\"1\":{\"1001\":2,\"1210\":2,\"1380\":8,\"1406\":2,\"1446\":1}}],[\"vt线程在运行的时候会把\",{\"1\":{\"755\":1}}],[\"vt\",{\"1\":{\"755\":24}}],[\"v6\",{\"1\":{\"727\":1}}],[\"vert\",{\"1\":{\"1408\":1}}],[\"verify\",{\"1\":{\"776\":1}}],[\"version=\",{\"1\":{\"806\":1,\"807\":1,\"808\":1,\"818\":1,\"826\":1,\"845\":1,\"875\":1,\"878\":1,\"880\":1,\"881\":1,\"882\":1,\"883\":1,\"884\":1,\"890\":2,\"907\":1,\"928\":1}}],[\"version等\",{\"1\":{\"778\":1}}],[\"version简称为gav\",{\"1\":{\"768\":1}}],[\"version>2\",{\"1\":{\"907\":1}}],[\"version>1\",{\"1\":{\"778\":1,\"907\":1}}],[\"version>4\",{\"1\":{\"778\":2,\"875\":1}}],[\"version>\",{\"1\":{\"711\":1,\"771\":2,\"772\":4,\"773\":2,\"778\":12,\"798\":1,\"805\":1,\"819\":1,\"875\":25,\"907\":6,\"925\":2,\"937\":2,\"1507\":1}}],[\"version\",{\"1\":{\"123\":1,\"132\":1,\"161\":2,\"489\":1,\"636\":5,\"642\":4,\"751\":1,\"752\":1,\"755\":2,\"765\":2,\"768\":1,\"778\":6,\"875\":8,\"887\":2,\"907\":2,\"912\":1,\"915\":1,\"1017\":1,\"1061\":2,\"1062\":1,\"1064\":1,\"1148\":7,\"1223\":1,\"1259\":2,\"1260\":1,\"1262\":1,\"1331\":7,\"1494\":1}}],[\"vector<>\",{\"1\":{\"1404\":1}}],[\"vector<integer>\",{\"1\":{\"1404\":1}}],[\"vector可以指定扩容的大小\",{\"1\":{\"1075\":1,\"1270\":1}}],[\"vector的性能是不如arraylist的\",{\"1\":{\"1075\":1,\"1270\":1}}],[\"vector\",{\"1\":{\"493\":2,\"1069\":1,\"1264\":1,\"1404\":1}}],[\"v7\",{\"1\":{\"465\":1,\"466\":1}}],[\"vmstructs\",{\"1\":{\"1481\":1}}],[\"vmsymbols\",{\"1\":{\"1481\":2}}],[\"vmware在资助着\",{\"1\":{\"652\":1}}],[\"vm\",{\"1\":{\"456\":1}}],[\"vd\",{\"1\":{\"296\":1}}],[\"vs\",{\"1\":{\"283\":1,\"423\":2}}],[\"vsync\",{\"1\":{\"158\":1}}],[\"v0\",{\"1\":{\"277\":1,\"461\":1,\"513\":1}}],[\"v1\",{\"1\":{\"209\":1}}],[\"void\",{\"1\":{\"192\":2,\"193\":4,\"194\":2,\"195\":5,\"196\":5,\"197\":6,\"199\":2,\"221\":1,\"223\":2,\"224\":2,\"225\":1,\"226\":2,\"228\":1,\"229\":2,\"337\":4,\"338\":7,\"339\":5,\"341\":2,\"342\":4,\"390\":2,\"405\":1,\"413\":1,\"417\":4,\"430\":2,\"441\":1,\"684\":7,\"687\":19,\"698\":1,\"711\":1,\"752\":6,\"755\":4,\"800\":1,\"810\":10,\"816\":3,\"817\":3,\"820\":6,\"826\":11,\"833\":1,\"847\":1,\"848\":1,\"849\":3,\"850\":1,\"852\":3,\"853\":1,\"856\":2,\"857\":1,\"858\":1,\"891\":5,\"893\":1,\"939\":2,\"1001\":2,\"1042\":1,\"1043\":6,\"1049\":5,\"1057\":1,\"1061\":6,\"1062\":4,\"1064\":4,\"1210\":2,\"1243\":1,\"1244\":6,\"1250\":5,\"1255\":1,\"1259\":6,\"1260\":4,\"1262\":4,\"1382\":11,\"1386\":6,\"1390\":4,\"1392\":1,\"1394\":2,\"1396\":2,\"1398\":5,\"1402\":2,\"1406\":1,\"1408\":2,\"1410\":1,\"1420\":2,\"1422\":1,\"1424\":8,\"1442\":1,\"1444\":2,\"1446\":2,\"1448\":1,\"1462\":1,\"1466\":1,\"1474\":3,\"1478\":2,\"1480\":4,\"1481\":2}}],[\"volatileexample\",{\"1\":{\"1382\":2}}],[\"volatile有两大特性\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"volatile不保证原子性\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"volatile关键字方式\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"volatile关键字修饰的变量看到的随时是自己的最新值\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"volatile关键字的作用\",{\"0\":{\"755\":1,\"1056\":1,\"1254\":1}}],[\"volatile写\",{\"1\":{\"755\":1}}],[\"volatiletest\",{\"1\":{\"755\":9}}],[\"volatile\",{\"0\":{\"93\":1,\"1382\":1},\"1\":{\"93\":2,\"699\":1,\"755\":10,\"1056\":1,\"1254\":1,\"1378\":1,\"1382\":41,\"1476\":1,\"1480\":4,\"1481\":19},\"2\":{\"756\":1}}],[\"v2\",{\"1\":{\"162\":3,\"209\":1,\"210\":1,\"878\":1}}],[\"v表示存储jpeg的图像质量\",{\"1\":{\"158\":1}}],[\"vf\",{\"1\":{\"155\":1,\"157\":2,\"158\":1}}],[\"v时\",{\"1\":{\"151\":1}}],[\"v\",{\"1\":{\"151\":5,\"152\":2,\"158\":2,\"160\":4,\"162\":3,\"163\":2,\"296\":1,\"515\":1,\"687\":1,\"979\":1,\"1001\":2,\"1210\":2,\"1386\":2,\"1406\":1,\"1476\":1}}],[\"vcodec\",{\"1\":{\"144\":1,\"146\":1,\"150\":1,\"152\":2,\"153\":1,\"162\":1}}],[\"vn\",{\"1\":{\"144\":1,\"149\":2}}],[\"v3\",{\"1\":{\"133\":1,\"1195\":1,\"1202\":1,\"1368\":1,\"1375\":1}}],[\"visible\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"visibility\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"visit\",{\"1\":{\"976\":1}}],[\"visitor\",{\"1\":{\"5\":1}}],[\"visualizer\",{\"1\":{\"924\":1}}],[\"viewname\",{\"1\":{\"1414\":1}}],[\"viewresolver\",{\"1\":{\"1408\":1,\"1414\":8}}],[\"viewport\",{\"1\":{\"895\":1}}],[\"viewclass\",{\"1\":{\"882\":1}}],[\"view\",{\"1\":{\"882\":2,\"1408\":3,\"1414\":10}}],[\"video\",{\"1\":{\"151\":1,\"296\":1,\"923\":1,\"941\":1,\"1502\":1}}],[\"video的就是\",{\"1\":{\"151\":1}}],[\"vim编辑器\",{\"1\":{\"981\":1}}],[\"vim\",{\"1\":{\"142\":1,\"456\":1,\"915\":1}}],[\"virtual\",{\"1\":{\"123\":1}}],[\"variable\",{\"1\":{\"1058\":4,\"1256\":4,\"1402\":1}}],[\"var\",{\"1\":{\"915\":1}}],[\"varchar\",{\"0\":{\"602\":1},\"1\":{\"564\":2,\"568\":2,\"570\":1,\"640\":1,\"789\":2,\"799\":3,\"855\":1,\"858\":3,\"887\":1,\"1507\":2}}],[\"vary\",{\"1\":{\"123\":1}}],[\"valdestructor\",{\"1\":{\"687\":1}}],[\"valdup\",{\"1\":{\"687\":1}}],[\"val\",{\"1\":{\"390\":4,\"687\":1}}],[\"validate\",{\"1\":{\"711\":1,\"776\":1}}],[\"valid\",{\"1\":{\"123\":3,\"306\":3}}],[\"value3\",{\"1\":{\"1440\":1}}],[\"value又是什么作用\",{\"1\":{\"1418\":1}}],[\"value呢\",{\"1\":{\"1418\":1}}],[\"valueof\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"value>\",{\"1\":{\"883\":1}}],[\"value>classpath\",{\"1\":{\"883\":1}}],[\"value=\",{\"1\":{\"806\":12,\"808\":4,\"829\":6,\"830\":1,\"833\":1,\"853\":2,\"878\":14,\"880\":3,\"882\":4,\"1176\":6,\"1353\":6,\"1416\":1}}],[\"value2\",{\"1\":{\"667\":2,\"668\":1,\"1440\":1}}],[\"value存储的不足\",{\"1\":{\"652\":1}}],[\"value数据库\",{\"1\":{\"652\":2}}],[\"value1\",{\"1\":{\"622\":1,\"642\":1,\"667\":2,\"668\":1,\"1440\":1}}],[\"values\",{\"1\":{\"493\":2,\"589\":1,\"622\":1,\"640\":1,\"789\":1,\"799\":2,\"818\":1,\"826\":1,\"858\":5,\"887\":4,\"890\":1,\"892\":1,\"1507\":5}}],[\"value\",{\"0\":{\"487\":1},\"1\":{\"123\":1,\"129\":1,\"199\":10,\"405\":10,\"430\":3,\"487\":4,\"493\":2,\"618\":1,\"634\":3,\"636\":2,\"641\":1,\"652\":2,\"655\":2,\"666\":2,\"667\":8,\"668\":5,\"678\":1,\"684\":1,\"716\":1,\"717\":1,\"727\":1,\"751\":1,\"826\":1,\"842\":1,\"894\":4,\"895\":1,\"939\":2,\"1001\":2,\"1006\":3,\"1042\":3,\"1073\":3,\"1132\":1,\"1133\":1,\"1155\":1,\"1163\":1,\"1210\":2,\"1215\":3,\"1243\":3,\"1268\":3,\"1317\":1,\"1318\":1,\"1335\":1,\"1343\":1,\"1380\":7,\"1382\":12,\"1386\":11,\"1402\":1,\"1406\":2,\"1418\":7,\"1428\":4,\"1442\":2,\"1446\":1,\"1448\":3,\"1476\":1}}],[\"vue\",{\"1\":{\"44\":2,\"1019\":1,\"1225\":1}}],[\"vuepress\",{\"0\":{\"28\":1},\"1\":{\"24\":2,\"26\":2,\"27\":1,\"28\":2,\"29\":1,\"43\":1}}],[\"展示如何增加\",{\"1\":{\"1440\":1}}],[\"展示如何增加分区数\",{\"1\":{\"1440\":1}}],[\"展示如何使用批量发送消息\",{\"1\":{\"1440\":1}}],[\"展示如何调整\",{\"1\":{\"1440\":1}}],[\"展示\",{\"0\":{\"24\":1}}],[\"m3\",{\"1\":{\"1450\":1}}],[\"m1\",{\"1\":{\"1450\":1}}],[\"mbd\",{\"1\":{\"1410\":6,\"1412\":1}}],[\"mfence\",{\"1\":{\"1382\":2}}],[\"mw08tjgs\",{\"1\":{\"927\":1}}],[\"mchange\",{\"1\":{\"878\":1}}],[\"mm\",{\"1\":{\"863\":4,\"864\":4,\"884\":1}}],[\"mmap\",{\"1\":{\"456\":1,\"1124\":1,\"1312\":1}}],[\"m2\",{\"1\":{\"764\":1,\"765\":1,\"768\":1,\"1450\":1}}],[\"mget\",{\"1\":{\"666\":3}}],[\"mx\",{\"1\":{\"504\":2}}],[\"m++\",{\"1\":{\"430\":1}}],[\"m是bit数组长度\",{\"1\":{\"393\":1}}],[\"mutex\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"mutual\",{\"1\":{\"625\":1,\"1063\":1,\"1261\":1}}],[\"multi\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"multipliers\",{\"1\":{\"306\":6}}],[\"murmurhash2\",{\"1\":{\"689\":1}}],[\"must\",{\"1\":{\"199\":2,\"589\":1}}],[\"muxers\",{\"1\":{\"161\":1}}],[\"momery\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"momerybuffer\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"monitorexit\",{\"1\":{\"1480\":2,\"1481\":5}}],[\"monitorenter\",{\"1\":{\"1480\":2,\"1481\":5}}],[\"monitors\",{\"1\":{\"1058\":2,\"1256\":2}}],[\"money=2000\",{\"1\":{\"929\":1}}],[\"money\",{\"1\":{\"928\":2}}],[\"mongodb\",{\"1\":{\"651\":1}}],[\"mobile\",{\"1\":{\"485\":1,\"487\":3}}],[\"moved\",{\"1\":{\"441\":1}}],[\"most\",{\"1\":{\"406\":1,\"427\":1}}],[\"motivation\",{\"1\":{\"169\":1}}],[\"modify\",{\"1\":{\"1412\":1}}],[\"modifies\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"modcount\",{\"1\":{\"1076\":5,\"1271\":5,\"1404\":1}}],[\"modules>\",{\"1\":{\"779\":1}}],[\"module>\",{\"1\":{\"779\":3}}],[\"mode时\",{\"1\":{\"638\":1}}],[\"modeler\",{\"1\":{\"928\":2}}],[\"modeler=\",{\"1\":{\"928\":1}}],[\"modelandview\",{\"1\":{\"894\":9,\"895\":8,\"1049\":2,\"1250\":2,\"1408\":2,\"1414\":8}}],[\"modelversion>\",{\"1\":{\"778\":2,\"875\":1,\"907\":1}}],[\"model\",{\"1\":{\"169\":1,\"294\":2,\"761\":2,\"894\":8,\"928\":1,\"1408\":1,\"1414\":1}}],[\"mode\",{\"1\":{\"158\":1,\"618\":2,\"621\":2,\"736\":1}}],[\"mod\",{\"1\":{\"158\":1}}],[\"more\",{\"1\":{\"40\":1,\"107\":1}}],[\"m4v\",{\"1\":{\"153\":1}}],[\"myfield\",{\"1\":{\"1468\":2}}],[\"myfirstplugin\",{\"1\":{\"1416\":2}}],[\"mymethod\",{\"1\":{\"1468\":2,\"1474\":5}}],[\"mymapper\",{\"0\":{\"807\":1},\"1\":{\"807\":1,\"808\":1,\"810\":2,\"818\":1,\"826\":1,\"835\":1}}],[\"myclass\",{\"1\":{\"1402\":2,\"1468\":21}}],[\"myannotation\",{\"1\":{\"1402\":4}}],[\"myanno\",{\"1\":{\"1402\":4}}],[\"mylock\",{\"1\":{\"1390\":3}}],[\"mylogaspect\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"mylog\",{\"1\":{\"1049\":4,\"1250\":4}}],[\"mylist\",{\"1\":{\"667\":8}}],[\"mydatabase\",{\"1\":{\"799\":3,\"800\":1,\"808\":1}}],[\"mybatisplus\",{\"1\":{\"1506\":1}}],[\"mybatis等\",{\"1\":{\"1168\":1,\"1345\":1}}],[\"mybatis等定义的注解\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"mybatis的分页原理\",{\"0\":{\"1138\":1,\"1323\":1}}],[\"mybatis的工作原理\",{\"0\":{\"1136\":1,\"1321\":1}}],[\"mybatis的优点\",{\"0\":{\"1130\":1,\"1315\":1}}],[\"mybatis运行时会使用jdk动态代理为dao接口生成代理proxy对象\",{\"1\":{\"1132\":1,\"1317\":1}}],[\"mybatis在处理\",{\"1\":{\"1131\":2,\"1316\":2}}],[\"mybatis可以使用xml或者注解来配置映射原生信息\",{\"1\":{\"1129\":1,\"1314\":1}}],[\"mybatis是一个orm\",{\"1\":{\"1129\":1,\"1314\":1}}],[\"mybatis会帮我们动态实现\",{\"1\":{\"890\":1}}],[\"mybatis已经为普通的\",{\"1\":{\"831\":1}}],[\"mybatis使用步骤总结\",{\"0\":{\"814\":1}}],[\"mybatistest\",{\"0\":{\"809\":1,\"810\":1},\"1\":{\"810\":2}}],[\"mybatis<\",{\"1\":{\"805\":1,\"875\":2}}],[\"mybatis整体架构\",{\"0\":{\"803\":1}}],[\"mybatis介绍\",{\"0\":{\"802\":1}}],[\"mybatissql批量更新\",{\"0\":{\"785\":1}}],[\"mybatis\",{\"0\":{\"782\":1,\"787\":1,\"806\":1,\"808\":1,\"828\":1,\"880\":1,\"1128\":1,\"1134\":1,\"1313\":1,\"1319\":1,\"1416\":1},\"1\":{\"587\":1,\"785\":1,\"802\":2,\"806\":5,\"807\":4,\"808\":3,\"809\":1,\"810\":1,\"816\":1,\"817\":2,\"818\":9,\"820\":5,\"822\":2,\"825\":4,\"826\":13,\"828\":1,\"829\":2,\"831\":3,\"832\":1,\"833\":4,\"834\":1,\"835\":9,\"842\":7,\"843\":2,\"845\":4,\"847\":1,\"848\":1,\"849\":2,\"850\":1,\"852\":18,\"853\":7,\"856\":4,\"857\":3,\"858\":4,\"870\":2,\"875\":1,\"878\":5,\"880\":4,\"883\":1,\"889\":1,\"890\":6,\"1128\":3,\"1133\":1,\"1134\":3,\"1135\":1,\"1136\":9,\"1137\":1,\"1138\":2,\"1318\":1,\"1319\":3,\"1320\":1,\"1321\":9,\"1322\":1,\"1323\":2,\"1416\":16,\"1505\":1,\"1506\":2,\"1507\":6},\"2\":{\"783\":1,\"784\":1,\"792\":1,\"865\":1,\"866\":1,\"1140\":1,\"1509\":1}}],[\"myinvocationhandler\",{\"1\":{\"1474\":7}}],[\"myinterfaceimpl\",{\"1\":{\"1474\":3}}],[\"myinterface\",{\"1\":{\"1474\":8}}],[\"myisam\",{\"1\":{\"574\":2,\"589\":2}}],[\"myid较大的服务器作为leader服务器\",{\"1\":{\"183\":1}}],[\"myid\",{\"1\":{\"183\":3}}],[\"my\",{\"1\":{\"341\":1,\"342\":1,\"441\":1,\"459\":1,\"489\":5,\"490\":3,\"509\":1,\"510\":7,\"640\":2,\"901\":1,\"902\":1,\"950\":1,\"1442\":2,\"1448\":2,\"1456\":4}}],[\"mysql有哪几种log\",{\"0\":{\"1142\":1,\"1325\":1}}],[\"mysql常见面试题\",{\"1\":{\"1141\":1}}],[\"mysql``\",{\"1\":{\"1019\":1,\"1225\":1}}],[\"mysql依赖\",{\"1\":{\"925\":1}}],[\"mysql5\",{\"1\":{\"871\":1}}],[\"mysql的复制原理以及流程\",{\"0\":{\"1143\":1,\"1326\":1}}],[\"mysql的配置参数\",{\"1\":{\"637\":1}}],[\"mysql的b树和b+树原理就说到这里了\",{\"1\":{\"328\":1}}],[\"mysql提供了lock\",{\"1\":{\"635\":1}}],[\"mysql不支持\",{\"1\":{\"605\":1}}],[\"mysql需要再次访问表中的数据行\",{\"1\":{\"567\":1}}],[\"mysql数据库几个基本的索引类型\",{\"0\":{\"1146\":1,\"1329\":1}}],[\"mysql数据库引擎在通过索引定位到数据行后\",{\"1\":{\"567\":1}}],[\"mysql数据导入elasticsearch搜索引擎\",{\"1\":{\"447\":1}}],[\"mysql回表查询是指在使用索引进行查询时\",{\"1\":{\"567\":1}}],[\"mysql可\",{\"1\":{\"564\":1}}],[\"mysql可以用主键的\",{\"1\":{\"436\":1}}],[\"mysql会按照索引中列的顺序从左到右进行匹配\",{\"1\":{\"561\":1}}],[\"mysql索引有哪些类型\",{\"0\":{\"558\":1}}],[\"mysql索引18连问\",{\"0\":{\"555\":1},\"1\":{\"555\":1}}],[\"mysql索引使用的数据结构\",{\"1\":{\"315\":1}}],[\"mysql\",{\"0\":{\"554\":1,\"574\":1,\"635\":1,\"637\":1,\"638\":1,\"1324\":1},\"1\":{\"494\":1,\"556\":1,\"558\":2,\"564\":2,\"569\":1,\"578\":1,\"587\":1,\"588\":1,\"589\":3,\"590\":5,\"591\":1,\"611\":1,\"621\":1,\"643\":1,\"800\":2,\"806\":4,\"808\":2,\"853\":1,\"879\":2,\"887\":2,\"907\":1,\"927\":2,\"947\":1,\"1000\":4,\"1017\":1,\"1019\":2,\"1141\":1,\"1148\":2,\"1150\":2,\"1209\":4,\"1223\":1,\"1225\":2,\"1331\":2,\"1333\":2,\"1507\":4},\"2\":{\"575\":1,\"576\":1,\"612\":1,\"613\":1,\"645\":1,\"646\":1,\"1153\":1}}],[\"mysql和elasticsearch区别\",{\"1\":{\"447\":1}}],[\"mysql为什么使用b\",{\"0\":{\"324\":1}}],[\"myvalue\",{\"1\":{\"132\":1}}],[\"mykey\",{\"1\":{\"132\":3,\"660\":2,\"666\":10}}],[\"myproject\",{\"1\":{\"111\":1}}],[\"mission\",{\"1\":{\"1400\":1}}],[\"mistral\",{\"1\":{\"290\":1}}],[\"michael\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"micrometer<\",{\"1\":{\"948\":1}}],[\"mian\",{\"1\":{\"755\":1}}],[\"mi\",{\"1\":{\"723\":1,\"863\":2,\"864\":2}}],[\"millis\",{\"1\":{\"711\":2}}],[\"milliseconds\",{\"1\":{\"441\":1}}],[\"mit\",{\"1\":{\"540\":1,\"541\":1}}],[\"mirrors\",{\"1\":{\"174\":1,\"458\":2,\"734\":1,\"915\":2,\"951\":1,\"959\":2}}],[\"mixed\",{\"1\":{\"981\":2}}],[\"mix\",{\"1\":{\"123\":1}}],[\"mime\",{\"1\":{\"123\":1}}],[\"minute\",{\"1\":{\"950\":2}}],[\"minpoolsize\",{\"1\":{\"878\":1}}],[\"minimum\",{\"1\":{\"459\":1,\"895\":1,\"1027\":1,\"1031\":1,\"1231\":1,\"1235\":1}}],[\"minisite\",{\"1\":{\"238\":1}}],[\"minvalue\",{\"1\":{\"405\":5}}],[\"minrate\",{\"1\":{\"151\":2}}],[\"min\",{\"1\":{\"123\":4,\"670\":7,\"1030\":1,\"1042\":1,\"1234\":1,\"1243\":1}}],[\"mandatory\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"many\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"man\",{\"1\":{\"1044\":2,\"1245\":2}}],[\"management\",{\"1\":{\"948\":1}}],[\"managertaskhandler\",{\"1\":{\"928\":1}}],[\"manager=\",{\"1\":{\"881\":1}}],[\"manager比较喜欢\",{\"1\":{\"777\":1}}],[\"manager\",{\"0\":{\"706\":1},\"1\":{\"706\":1,\"915\":1}}],[\"markedobjects\",{\"1\":{\"1396\":1}}],[\"markfromroots\",{\"1\":{\"1394\":1}}],[\"mark\",{\"1\":{\"1107\":2,\"1298\":2,\"1396\":2,\"1398\":3}}],[\"mark数据\",{\"1\":{\"654\":1}}],[\"markdown\",{\"0\":{\"24\":1,\"25\":1,\"26\":1,\"27\":1},\"1\":{\"24\":2,\"25\":3,\"26\":1,\"27\":3,\"28\":2,\"29\":1,\"41\":3,\"42\":1,\"43\":2,\"44\":2,\"1380\":1,\"1382\":1,\"1384\":1,\"1386\":1,\"1388\":1,\"1390\":1,\"1392\":1,\"1394\":1,\"1396\":1,\"1398\":1,\"1400\":1,\"1402\":1,\"1404\":1,\"1406\":1,\"1408\":1,\"1410\":1,\"1412\":1,\"1414\":1,\"1416\":1,\"1418\":1,\"1420\":1,\"1422\":1,\"1424\":1,\"1426\":1,\"1428\":1,\"1430\":1,\"1432\":1,\"1434\":1,\"1436\":1,\"1438\":1,\"1440\":1,\"1446\":1,\"1448\":1,\"1450\":1,\"1452\":1,\"1454\":1,\"1456\":1,\"1458\":1,\"1460\":1,\"1462\":1,\"1464\":1,\"1466\":1,\"1468\":1,\"1470\":1,\"1474\":1,\"1476\":1,\"1478\":1,\"1480\":1},\"2\":{\"39\":1}}],[\"male\",{\"1\":{\"599\":1}}],[\"malformed\",{\"1\":{\"493\":1}}],[\"mattson在一篇有关探讨面向对象框架的文章中\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"mattson提出了ioc理论\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"match\",{\"1\":{\"487\":1,\"489\":1,\"668\":1,\"669\":1,\"670\":1,\"684\":1,\"1456\":1}}],[\"math\",{\"1\":{\"393\":6,\"405\":2,\"417\":1,\"1042\":2,\"1243\":2}}],[\"masterelection\",{\"1\":{\"1466\":1}}],[\"masterauth\",{\"1\":{\"1422\":1}}],[\"masteruser\",{\"1\":{\"1422\":1}}],[\"masterhost\",{\"1\":{\"1422\":1}}],[\"master每执行一次数据变更的命令就会同步至slave节点\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"master分支的末尾增加了一个提交f\",{\"1\":{\"980\":1}}],[\"master\",{\"0\":{\"1027\":1,\"1031\":2,\"1231\":1,\"1235\":2},\"1\":{\"459\":3,\"652\":1,\"655\":1,\"980\":4,\"1027\":4,\"1031\":3,\"1162\":6,\"1194\":1,\"1201\":2,\"1231\":4,\"1235\":3,\"1342\":6,\"1367\":1,\"1374\":2,\"1422\":7}}],[\"maven首先从当前构建项目开始查找父项目的pom文件\",{\"1\":{\"778\":1}}],[\"maven继承\",{\"0\":{\"778\":1}}],[\"maven有三套相互独立的生命周期\",{\"1\":{\"774\":1}}],[\"maven生命周期就是为了对所有的构建过程进行抽象和统一\",{\"1\":{\"774\":1}}],[\"maven生命周期\",{\"0\":{\"774\":1}}],[\"maven不会在repository查找它\",{\"1\":{\"769\":1}}],[\"maven世界拥有大量构件\",{\"1\":{\"768\":1}}],[\"maven为什么使用坐标\",{\"1\":{\"768\":1}}],[\"maven坐标主要组成\",{\"1\":{\"768\":1}}],[\"maven2\",{\"1\":{\"768\":1}}],[\"maven本地仓库的默认位置\",{\"1\":{\"768\":1}}],[\"maven在某个统一的位置存储所有项目的共享的构件\",{\"1\":{\"768\":1}}],[\"maven项目的模板\",{\"1\":{\"766\":1,\"767\":1}}],[\"maven项目的目录结构遵守以下规范\",{\"1\":{\"765\":1}}],[\"maven项目目录\",{\"1\":{\"765\":1}}],[\"maven的插件机制是完全依赖maven的生命周期的\",{\"1\":{\"776\":1}}],[\"maven的本地仓库\",{\"1\":{\"768\":1}}],[\"maven的仓库有两大类\",{\"1\":{\"768\":1}}],[\"maven的默认本地仓库在\",{\"1\":{\"765\":1}}],[\"maven的功能\",{\"0\":{\"762\":1}}],[\"maven下载的jar包都会存储到此仓库中\",{\"1\":{\"764\":1}}],[\"maven可以指定jar的依赖范围\",{\"1\":{\"763\":1}}],[\"maven正是为了将开发人员从这些任务中解脱出来而诞生的一个项目管理工具\",{\"1\":{\"761\":1}}],[\"maven采用了一种被称之为project\",{\"1\":{\"761\":1}}],[\"maven翻译为\",{\"1\":{\"761\":1}}],[\"maven是跨平台的项目管理工具\",{\"1\":{\"762\":1}}],[\"maven是基于项目对象模型\",{\"1\":{\"761\":1}}],[\"maven是什么\",{\"1\":{\"761\":1}}],[\"maven\",{\"0\":{\"757\":1,\"902\":1,\"913\":1,\"1522\":1},\"1\":{\"454\":1,\"711\":1,\"761\":1,\"764\":2,\"765\":8,\"767\":1,\"768\":1,\"769\":2,\"777\":2,\"778\":8,\"779\":2,\"871\":1,\"874\":1,\"875\":6,\"900\":2,\"902\":1,\"907\":11,\"1182\":2,\"1189\":1,\"1357\":2,\"1364\":1,\"1520\":3,\"1522\":3,\"1523\":1,\"1525\":2},\"2\":{\"758\":1,\"759\":1,\"780\":1,\"781\":1}}],[\"map在日常开发中用途广泛\",{\"1\":{\"1406\":1}}],[\"map接口表示一个键值对集合\",{\"1\":{\"1406\":1}}],[\"map这个接口的确非常重要且强大\",{\"1\":{\"1406\":1}}],[\"map包括\",{\"1\":{\"1069\":1,\"1264\":1}}],[\"map工具类\",{\"1\":{\"875\":1}}],[\"mapunderscoretocamelcase\",{\"1\":{\"830\":1,\"853\":1,\"880\":1}}],[\"mappedstatement维护了一条\",{\"1\":{\"1132\":1,\"1317\":1}}],[\"mappedstatement\",{\"1\":{\"833\":1,\"1132\":2,\"1136\":2,\"1317\":2,\"1321\":2}}],[\"mapperlocations\",{\"1\":{\"878\":1}}],[\"mapper需要的xml文件\",{\"1\":{\"878\":1}}],[\"mapper文件示例代码\",{\"1\":{\"864\":1}}],[\"mapper配置\",{\"1\":{\"858\":1}}],[\"mapper映射\",{\"1\":{\"857\":1}}],[\"mapper中开启了也没用\",{\"1\":{\"853\":1}}],[\"mapper中namespace的定义本身是没有限制的\",{\"1\":{\"825\":1}}],[\"mapper接口中方法的输出参数类型必须和sql定义的resulttype一致\",{\"1\":{\"827\":1}}],[\"mapper接口中方法的输入参数类型必须和sql定义的parametertype一致\",{\"1\":{\"827\":1}}],[\"mapper接口的方法名必须和sql定义的id一致\",{\"1\":{\"827\":1}}],[\"mapper的namespace必须和mapper接口的全路径一致\",{\"1\":{\"827\":1}}],[\"mapperregistry\",{\"1\":{\"825\":3}}],[\"mapper具体的配置的时候\",{\"1\":{\"822\":1}}],[\"mapperscannerconfigurer\",{\"1\":{\"878\":1}}],[\"mappers>\",{\"1\":{\"808\":1,\"818\":1,\"826\":1,\"835\":3,\"845\":1}}],[\"mappers\",{\"0\":{\"835\":1},\"1\":{\"808\":1,\"818\":2,\"826\":3,\"835\":2}}],[\"mapper>\",{\"1\":{\"807\":1,\"818\":1,\"826\":1,\"845\":1,\"853\":1,\"856\":1,\"890\":2}}],[\"mapper\",{\"0\":{\"836\":1},\"1\":{\"807\":4,\"818\":4,\"824\":1,\"825\":1,\"826\":4,\"835\":3,\"845\":4,\"853\":2,\"872\":1,\"878\":2,\"890\":9,\"915\":1,\"1132\":1,\"1135\":1,\"1317\":1,\"1320\":1,\"1416\":7,\"1507\":4}}],[\"mapping阶段充分结合各个字段的属性\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"mapping>\",{\"1\":{\"883\":2}}],[\"mappings\",{\"1\":{\"484\":1,\"485\":1,\"487\":1,\"489\":2,\"490\":1,\"493\":1,\"509\":1,\"510\":1,\"1456\":1}}],[\"mapping\",{\"0\":{\"482\":1},\"1\":{\"481\":1,\"482\":5,\"484\":2,\"491\":1,\"492\":7,\"510\":1,\"540\":1,\"541\":1,\"824\":1,\"1456\":1,\"1460\":1}}],[\"mapping详解\",{\"1\":{\"447\":1}}],[\"map<object\",{\"1\":{\"717\":1}}],[\"map<string\",{\"1\":{\"194\":1,\"717\":1}}],[\"map是\",{\"1\":{\"678\":1}}],[\"maping设置\",{\"0\":{\"483\":1}}],[\"map\",{\"0\":{\"1071\":1,\"1266\":1,\"1406\":1},\"1\":{\"406\":7,\"456\":2,\"678\":1,\"717\":1,\"1001\":10,\"1069\":1,\"1071\":1,\"1136\":2,\"1210\":10,\"1264\":1,\"1266\":1,\"1321\":2,\"1406\":4}}],[\"may\",{\"1\":{\"176\":1,\"1042\":1,\"1243\":1}}],[\"make\",{\"1\":{\"142\":2,\"661\":1,\"735\":1}}],[\"machine\",{\"1\":{\"129\":1,\"427\":1}}],[\"machines\",{\"1\":{\"129\":1}}],[\"mac\",{\"1\":{\"125\":1,\"131\":1,\"139\":1,\"438\":1}}],[\"mainclass>\",{\"1\":{\"907\":1}}],[\"maintenance\",{\"1\":{\"169\":1}}],[\"main\",{\"1\":{\"123\":3,\"133\":1,\"296\":1,\"306\":3,\"341\":1,\"342\":1,\"390\":1,\"405\":1,\"417\":1,\"430\":1,\"441\":1,\"744\":1,\"753\":1,\"755\":5,\"800\":1,\"810\":1,\"852\":24,\"853\":8,\"872\":1,\"902\":2,\"919\":1,\"976\":2,\"1042\":2,\"1043\":1,\"1061\":2,\"1062\":1,\"1064\":1,\"1181\":1,\"1243\":2,\"1244\":1,\"1259\":2,\"1260\":1,\"1262\":1,\"1356\":1,\"1386\":1,\"1390\":2,\"1402\":2,\"1442\":1,\"1448\":1,\"1466\":1,\"1474\":3,\"1478\":1}}],[\"maxpoolsize\",{\"1\":{\"878\":1}}],[\"maxwaitmillis\",{\"1\":{\"711\":1}}],[\"maxwait\",{\"1\":{\"711\":1}}],[\"maxworkerid\",{\"1\":{\"441\":3}}],[\"maxtotal\",{\"1\":{\"711\":1}}],[\"maxactive\",{\"1\":{\"711\":1}}],[\"maxdatacenterid\",{\"1\":{\"441\":3}}],[\"maxvalue\",{\"1\":{\"405\":4}}],[\"maxsize++\",{\"1\":{\"342\":2}}],[\"maxsize\",{\"1\":{\"341\":13,\"342\":6}}],[\"maxrate就简单了\",{\"1\":{\"151\":1}}],[\"maxrate\",{\"1\":{\"151\":2}}],[\"max\",{\"1\":{\"123\":6,\"393\":1,\"413\":4,\"456\":2,\"670\":7,\"711\":6,\"1042\":3,\"1113\":3,\"1243\":3,\"1301\":3,\"1440\":6}}],[\"max=65535\",{\"1\":{\"123\":1}}],[\"max指定缓存数量\",{\"1\":{\"123\":1}}],[\"maximum\",{\"1\":{\"123\":1,\"895\":1,\"1042\":1,\"1243\":1,\"1406\":1}}],[\"m\",{\"1\":{\"111\":1,\"393\":2,\"424\":2,\"425\":2,\"430\":2,\"959\":1,\"976\":1,\"978\":1,\"981\":1,\"1382\":2,\"1402\":2}}],[\"mvnrepository\",{\"1\":{\"768\":1,\"875\":1,\"1507\":1}}],[\"mvn\",{\"1\":{\"765\":1,\"766\":3,\"767\":3,\"768\":9,\"774\":1,\"775\":4,\"913\":1,\"1523\":1}}],[\"mvc和spring有什么区别\",{\"0\":{\"1186\":1,\"1361\":1}}],[\"mvc模块为spring提供了一套轻量级的mvc实现\",{\"1\":{\"1168\":1,\"1345\":1}}],[\"mvc=\",{\"1\":{\"882\":1}}],[\"mvcc\",{\"1\":{\"621\":1}}],[\"mvc\",{\"1\":{\"587\":1,\"870\":1,\"882\":4,\"895\":1,\"1168\":2,\"1345\":2,\"1408\":6,\"1414\":1}}],[\"mv\",{\"1\":{\"107\":1,\"108\":2}}],[\"mkdir\",{\"1\":{\"107\":1,\"108\":2,\"465\":1,\"466\":1}}],[\"mpeg4\",{\"1\":{\"152\":1}}],[\"mp4的第20s时间开始\",{\"1\":{\"158\":1}}],[\"mp4`\",{\"1\":{\"155\":1}}],[\"mp4音频到output\",{\"1\":{\"149\":1}}],[\"mp4文件转为ts\",{\"1\":{\"148\":1}}],[\"mp4\",{\"1\":{\"146\":4,\"148\":2,\"149\":2,\"150\":2,\"151\":6,\"152\":8,\"153\":1,\"155\":1,\"156\":8,\"157\":2,\"158\":3,\"160\":1,\"162\":1,\"163\":1}}],[\"mp\",{\"1\":{\"80\":1,\"164\":1,\"895\":1,\"1056\":1,\"1141\":1,\"1254\":1,\"1324\":1,\"1382\":2}}],[\"ms这个维度\",{\"1\":{\"1113\":1,\"1301\":1}}],[\"ms和延迟条数replica\",{\"1\":{\"1113\":1,\"1301\":1}}],[\"mset\",{\"1\":{\"666\":2}}],[\"msg\",{\"1\":{\"540\":5,\"541\":5,\"884\":1,\"1494\":3}}],[\"msd\",{\"1\":{\"428\":2}}],[\"ms\",{\"1\":{\"42\":1,\"319\":1,\"441\":1,\"711\":1,\"1057\":1,\"1123\":1,\"1255\":1,\"1311\":1}}],[\"md5\",{\"1\":{\"123\":1}}],[\"md\",{\"1\":{\"29\":1,\"974\":2}}],[\"merged\",{\"1\":{\"1412\":1}}],[\"merge操作\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"merge\",{\"1\":{\"978\":1,\"980\":1,\"982\":1}}],[\"meta\",{\"1\":{\"1049\":1,\"1185\":2,\"1189\":1,\"1250\":1,\"1360\":2,\"1364\":1}}],[\"metadata\",{\"1\":{\"883\":1,\"900\":1,\"1185\":1,\"1360\":1}}],[\"metrics\",{\"1\":{\"946\":1,\"948\":2,\"950\":3}}],[\"method=\",{\"1\":{\"1410\":2}}],[\"method指定静态方法名称\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"method等自定义的销毁方法\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"method等\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"methods\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"methodsignature\",{\"1\":{\"752\":3}}],[\"methodname\",{\"1\":{\"752\":2,\"1049\":3,\"1250\":3}}],[\"method\",{\"1\":{\"123\":1,\"220\":2,\"751\":1,\"752\":4,\"833\":1,\"894\":3,\"990\":1,\"1049\":2,\"1058\":3,\"1099\":2,\"1250\":2,\"1256\":3,\"1290\":2,\"1392\":2,\"1402\":4,\"1410\":11,\"1468\":3,\"1474\":5}}],[\"method是使用的hash算法\",{\"1\":{\"123\":1}}],[\"message3\",{\"1\":{\"1450\":1}}],[\"message2\",{\"1\":{\"1450\":1}}],[\"message1\",{\"1\":{\"1450\":1}}],[\"message\",{\"1\":{\"677\":1,\"892\":13,\"979\":1,\"1124\":2,\"1312\":2,\"1442\":1,\"1444\":4,\"1448\":1,\"1478\":6,\"1494\":10}}],[\"messages两个维度\",{\"1\":{\"1113\":1,\"1301\":1}}],[\"messages\",{\"1\":{\"294\":1}}],[\"member\",{\"1\":{\"669\":4,\"670\":6}}],[\"member2\",{\"1\":{\"669\":2,\"670\":1}}],[\"member1\",{\"1\":{\"669\":2,\"670\":1}}],[\"memcached\",{\"1\":{\"652\":3,\"1002\":1,\"1211\":1}}],[\"memorybuffer\",{\"1\":{\"1028\":2,\"1232\":2}}],[\"memory\",{\"1\":{\"459\":1,\"589\":2,\"677\":1,\"950\":1,\"952\":1,\"1056\":7,\"1254\":7,\"1382\":7}}],[\"medcl\",{\"1\":{\"465\":1,\"466\":1}}],[\"medium\",{\"1\":{\"406\":1}}],[\"me\",{\"1\":{\"4\":1}}],[\"中查看\",{\"1\":{\"1522\":1}}],[\"中查询\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"中查询时传入的参数对象为\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"中与\",{\"1\":{\"1481\":2}}],[\"中内置的同步机制\",{\"1\":{\"1480\":1}}],[\"中多次调用同一个\",{\"1\":{\"1416\":1}}],[\"中非常重要的一个组件\",{\"1\":{\"1416\":1}}],[\"中对应的占位符\",{\"1\":{\"1416\":1}}],[\"中对应字段的\",{\"1\":{\"496\":1}}],[\"中提供的一种更加灵活的同步机制\",{\"1\":{\"1480\":1}}],[\"中提供\",{\"1\":{\"1412\":1}}],[\"中提到的已排序集合\",{\"1\":{\"404\":1}}],[\"中配置\",{\"1\":{\"1410\":2,\"1525\":1}}],[\"中配置了\",{\"1\":{\"1410\":1}}],[\"中配置的属性值注入到\",{\"1\":{\"1410\":1}}],[\"中配置接口的全路径\",{\"1\":{\"825\":1}}],[\"中用到的管理方式方式\",{\"1\":{\"1520\":1}}],[\"中用于多线程编程的工具类\",{\"1\":{\"1390\":1}}],[\"中用悲观锁务必要确定走了索引\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"中名字为\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"中都包含一个\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"中原本就有的\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"中会用到它\",{\"1\":{\"1183\":1,\"1358\":1}}],[\"中执行增强逻辑\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"中继日志也是二进制日志\",{\"1\":{\"1142\":1,\"1325\":1}}],[\"中继日志\",{\"1\":{\"1142\":2,\"1325\":2}}],[\"中任意定义接口\",{\"1\":{\"1137\":1,\"1322\":1}}],[\"中加载\",{\"1\":{\"1136\":1,\"1321\":1}}],[\"中恢复元数据时每个\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"中读取每一个\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"中只有leader\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"中同步数据\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"中断正常执行的逻辑\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"中实现的\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"中指定一组键值对\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"中存储对应的\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"中有哪些状态码\",{\"1\":{\"984\":1}}],[\"中有哪些锁\",{\"0\":{\"617\":1}}],[\"中通过\",{\"1\":{\"907\":1}}],[\"中通过class路径\",{\"1\":{\"835\":1}}],[\"中填写的是方法的参数\",{\"1\":{\"890\":1}}],[\"中去关闭二级缓存\",{\"1\":{\"853\":1}}],[\"中央仓库的地址\",{\"1\":{\"768\":1}}],[\"中央仓库\",{\"1\":{\"768\":2}}],[\"中默认的用户库\",{\"1\":{\"764\":1}}],[\"中取值\",{\"1\":{\"755\":1}}],[\"中获取目标对象完成依赖注入\",{\"1\":{\"1412\":1}}],[\"中获取已经提前实例化的对象\",{\"1\":{\"1412\":1}}],[\"中获取\",{\"1\":{\"755\":1}}],[\"中叫做\",{\"1\":{\"721\":1}}],[\"中启用了此方法\",{\"1\":{\"711\":1}}],[\"中当我们创建一个键值对时\",{\"1\":{\"698\":1}}],[\"中没有其他应用\",{\"1\":{\"692\":1}}],[\"中一种典型且常用的数据构\",{\"1\":{\"684\":1}}],[\"中一种术语\",{\"1\":{\"482\":1}}],[\"中每个\",{\"1\":{\"668\":1}}],[\"中文意思是比较与交换\",{\"1\":{\"1476\":1}}],[\"中文基础知识\",{\"1\":{\"967\":1}}],[\"中文官网\",{\"1\":{\"650\":1}}],[\"中文参考文档\",{\"1\":{\"297\":1}}],[\"中包含元数据的特殊数据库\",{\"1\":{\"569\":1}}],[\"中最基本的索引类型\",{\"1\":{\"558\":1}}],[\"中日期可以为以下形式\",{\"1\":{\"498\":1}}],[\"中field定义选择\",{\"1\":{\"493\":1}}],[\"中建立\",{\"1\":{\"428\":1}}],[\"中6最大\",{\"1\":{\"417\":1}}],[\"中9元素最大\",{\"1\":{\"417\":1}}],[\"中\",{\"0\":{\"1061\":1,\"1063\":1,\"1259\":1,\"1261\":1},\"1\":{\"323\":1,\"395\":1,\"424\":1,\"428\":1,\"440\":2,\"668\":2,\"669\":3,\"670\":2,\"698\":1,\"711\":1,\"717\":1,\"722\":1,\"751\":2,\"769\":1,\"980\":1,\"1000\":1,\"1005\":2,\"1007\":2,\"1016\":1,\"1028\":1,\"1209\":1,\"1214\":2,\"1216\":2,\"1222\":1,\"1232\":1,\"1382\":1,\"1408\":1,\"1410\":1,\"1412\":1,\"1438\":1,\"1476\":1,\"1480\":4,\"1481\":1}}],[\"中增加\",{\"1\":{\"142\":1}}],[\"中创建仪表板\",{\"1\":{\"126\":1}}],[\"中使用\",{\"1\":{\"44\":1}}],[\"中的一个关键字\",{\"1\":{\"1480\":1}}],[\"中的一个概念\",{\"1\":{\"687\":1}}],[\"中的某个方法名\",{\"1\":{\"1410\":2}}],[\"中的信息实例化\",{\"1\":{\"1410\":1}}],[\"中的独占模式来实现线程的等待和唤醒\",{\"1\":{\"1390\":1}}],[\"中的共享模式来实现线程的等待和唤醒\",{\"1\":{\"1390\":1}}],[\"中的类\",{\"1\":{\"1386\":1}}],[\"中的代理过滤器实现\",{\"1\":{\"1190\":1,\"1365\":1}}],[\"中的starter到底是什么\",{\"0\":{\"1189\":1,\"1364\":1}}],[\"中的监视器是什么\",{\"0\":{\"1188\":1,\"1363\":1}}],[\"中的所有\",{\"1\":{\"1135\":1,\"1320\":1}}],[\"中的所有副本都成功写入消息后才能收到服务端的响应\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"中的对象为\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"中的数据行的行锁\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"中的数据又是按照一个一个的\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"中的数据写入到磁盘中时\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"中的副本才有资格晋升为\",{\"1\":{\"1117\":1,\"1305\":1}}],[\"中的文档是不可变的\",{\"1\":{\"1033\":1,\"1237\":1}}],[\"中的节点\",{\"0\":{\"1031\":1,\"1235\":1}}],[\"中的指令被顺序执行\",{\"1\":{\"1512\":1}}],[\"中的指令自动构建镜像\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"中的指定字段的浮点数值加上增量\",{\"1\":{\"668\":1}}],[\"中的指定字段的整数值加上增量\",{\"1\":{\"668\":1}}],[\"中的名称空间是类的接口的全路径\",{\"1\":{\"835\":1}}],[\"中的内容\",{\"1\":{\"787\":1}}],[\"中的clean就是上面的clean\",{\"1\":{\"775\":1}}],[\"中的字典使用哈希表作为底层实现\",{\"1\":{\"689\":1}}],[\"中的字典由\",{\"1\":{\"687\":1}}],[\"中的字段\",{\"1\":{\"668\":1}}],[\"中的字段类型\",{\"1\":{\"494\":1}}],[\"中的锁升级是什么\",{\"0\":{\"637\":1}}],[\"中的倒排索引到内存中\",{\"1\":{\"493\":1}}],[\"中的待排序集合是同一个集合\",{\"1\":{\"404\":1}}],[\"中的第一个\",{\"1\":{\"41\":1}}],[\"中的\",{\"1\":{\"28\":1,\"717\":1,\"719\":1,\"890\":1,\"1124\":1,\"1312\":1,\"1382\":3,\"1390\":2,\"1414\":1,\"1474\":1,\"1480\":1}}],[\"中很重要的一个概念\",{\"1\":{\"26\":1}}],[\"中自定义它们\",{\"1\":{\"21\":1}}],[\"中设置一个参数时\",{\"1\":{\"832\":1}}],[\"中设置了\",{\"1\":{\"755\":1}}],[\"中设置了vt\",{\"1\":{\"755\":1}}],[\"中设置页面信息\",{\"1\":{\"42\":1}}],[\"中设置页面标题\",{\"1\":{\"41\":1}}],[\"中设置\",{\"1\":{\"8\":1}}],[\"夜间模式按钮\",{\"1\":{\"21\":1}}],[\"主节点负责协调整个集群的工作\",{\"1\":{\"1462\":1}}],[\"主节点负责处理写操作\",{\"1\":{\"1426\":1}}],[\"主服务器将\",{\"1\":{\"1422\":1}}],[\"主服务器接收到\",{\"1\":{\"1422\":1}}],[\"主服务器继续接收写命令\",{\"1\":{\"1422\":1}}],[\"主服务器执行\",{\"1\":{\"1422\":1}}],[\"主服务器的数据可以在从服务器中备份\",{\"1\":{\"1422\":1}}],[\"主服务器处理写请求\",{\"1\":{\"1422\":1}}],[\"主进程加载新aof\",{\"1\":{\"1420\":1}}],[\"主进程fork一个子进程\",{\"1\":{\"1420\":1}}],[\"主进程仍然处理客户端请求\",{\"1\":{\"1420\":1}}],[\"主缓存更新时需要同步更新备份缓存\",{\"1\":{\"1160\":1,\"1340\":1}}],[\"主缓存失效后从数据库加载最新值\",{\"1\":{\"1160\":1,\"1340\":1}}],[\"主缓存\",{\"1\":{\"1160\":1,\"1340\":1}}],[\"主\",{\"0\":{\"1133\":1,\"1318\":1},\"1\":{\"1143\":1,\"1326\":1}}],[\"主副本\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"主shard或副本shard\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"主内存\",{\"1\":{\"755\":4}}],[\"主线程将\",{\"1\":{\"755\":1}}],[\"主线程结束\",{\"1\":{\"755\":1}}],[\"主线程暂停2秒结束以后将\",{\"1\":{\"755\":1}}],[\"主从复制\",{\"1\":{\"1426\":1}}],[\"主从复制得以顺利进行\",{\"1\":{\"1422\":1}}],[\"主从复制的同步实现\",{\"1\":{\"1422\":1}}],[\"主从复制的同步工作是在\",{\"1\":{\"1422\":1}}],[\"主从复制的同步工作是如何实现的\",{\"1\":{\"1422\":1}}],[\"主从复制的工作流程如下\",{\"1\":{\"1422\":1}}],[\"主从复制的工作流程是怎样的\",{\"1\":{\"1422\":1}}],[\"主从服务器保持数据一致\",{\"1\":{\"1422\":1}}],[\"主从架构就是将一台\",{\"1\":{\"1422\":1}}],[\"主从之间同步分为全量或增量\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"主从部署\",{\"1\":{\"1162\":2,\"1342\":2}}],[\"主从\",{\"1\":{\"652\":1}}],[\"主键id\",{\"1\":{\"1507\":1}}],[\"主键冲突\",{\"1\":{\"890\":1}}],[\"主键对应的pojo属性名\",{\"1\":{\"826\":1,\"839\":1}}],[\"主键可以被其他表作为外键\",{\"1\":{\"559\":1}}],[\"主键索引不可以\",{\"1\":{\"559\":1}}],[\"主键索引和唯一索引有什么区别\",{\"0\":{\"559\":1}}],[\"主键索引是一种特殊的唯一索引\",{\"1\":{\"558\":1}}],[\"主键索引\",{\"1\":{\"558\":1,\"1146\":1,\"1329\":1}}],[\"主主数据库同步\",{\"1\":{\"436\":1}}],[\"主存和磁盘以页为单位交换数据\",{\"1\":{\"327\":1}}],[\"主存存取的时间仅与存取次数呈线性关系\",{\"1\":{\"326\":1}}],[\"主存存取原理\",{\"0\":{\"326\":1}}],[\"主存读取两个总线的内容\",{\"1\":{\"326\":1}}],[\"主存读到地址信号后\",{\"1\":{\"326\":1}}],[\"主存的存取过程如下\",{\"1\":{\"326\":1}}],[\"主存是一系列的存储单元组成的矩阵\",{\"1\":{\"326\":1}}],[\"主函数\",{\"1\":{\"306\":1}}],[\"主页\",{\"1\":{\"247\":1}}],[\"主体是一个select\",{\"1\":{\"158\":1}}],[\"主题\",{\"1\":{\"1444\":1}}],[\"主题扩展了更多\",{\"1\":{\"29\":1}}],[\"主题扩展\",{\"0\":{\"29\":1}}],[\"主题也带有以下元素\",{\"1\":{\"21\":1}}],[\"主要区别在于泛型类的类型参数可以用在整个类的方法和属性上\",{\"1\":{\"1424\":1}}],[\"主要的工作流程是\",{\"1\":{\"1422\":1}}],[\"主要的源码在rewriteappendonlyfile方法中\",{\"1\":{\"1420\":1}}],[\"主要有以下几种方式可以避免\",{\"1\":{\"1412\":1}}],[\"主要有三种场景\",{\"1\":{\"1412\":1}}],[\"主要有两个\",{\"1\":{\"1394\":1}}],[\"主要有两种情况\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"主要通过\",{\"1\":{\"1408\":1,\"1412\":1}}],[\"主要流程是\",{\"1\":{\"1408\":1}}],[\"主要工作流程是\",{\"1\":{\"1408\":1}}],[\"主要包括\",{\"1\":{\"1406\":1}}],[\"主要为了第2步做准备\",{\"1\":{\"1394\":1}}],[\"主要为了裂变\",{\"1\":{\"536\":1}}],[\"主要以场景化的方式\",{\"1\":{\"1380\":1,\"1382\":1,\"1384\":1,\"1386\":1,\"1388\":1,\"1390\":1,\"1392\":1,\"1394\":1,\"1396\":1,\"1398\":1,\"1400\":1,\"1402\":1,\"1404\":1,\"1406\":1,\"1408\":1,\"1410\":1,\"1412\":1,\"1414\":1,\"1416\":1,\"1418\":1,\"1420\":1,\"1422\":1,\"1424\":1,\"1426\":1,\"1428\":1,\"1430\":1,\"1432\":1,\"1434\":1,\"1436\":1,\"1438\":1,\"1440\":1,\"1446\":1,\"1448\":1,\"1450\":1,\"1452\":1,\"1454\":1,\"1456\":1,\"1458\":1,\"1460\":1,\"1462\":1,\"1464\":1,\"1466\":1,\"1468\":1,\"1470\":1,\"1474\":1,\"1476\":1,\"1478\":1,\"1481\":1}}],[\"主要创建了配置环境\",{\"1\":{\"1187\":1,\"1362\":1}}],[\"主要功能体现于三点\",{\"1\":{\"1115\":1,\"1303\":1}}],[\"主要功能与配置演示\",{\"0\":{\"16\":1}}],[\"主要分为以下几个阶段\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"主要是用来做web开发\",{\"1\":{\"1186\":1,\"1361\":1}}],[\"主要是通过二级缓存和三级缓存来解决的\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"主要是设置注解的生命周期\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"主要是当字段遇到\",{\"1\":{\"487\":1}}],[\"主要指的是\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"主要已通过和\",{\"1\":{\"982\":1}}],[\"主要服务于基于java平台的项目构建\",{\"1\":{\"762\":1}}],[\"主要内容有\",{\"1\":{\"676\":1}}],[\"主要用于实现非阻塞算法\",{\"1\":{\"1476\":1}}],[\"主要用于暂停线程指定时间\",{\"1\":{\"1446\":1}}],[\"主要用于存放类信息\",{\"1\":{\"1388\":1}}],[\"主要用于业务解耦\",{\"1\":{\"657\":1}}],[\"主要用来创建ioc容器\",{\"1\":{\"1186\":1,\"1361\":1}}],[\"主要用来做\",{\"1\":{\"990\":1}}],[\"主要用来做父子查询\",{\"1\":{\"510\":1}}],[\"主要对创建索引和搜索做讲解\",{\"1\":{\"513\":1}}],[\"主要敢于出发\",{\"1\":{\"263\":1}}],[\"主要参数\",{\"1\":{\"144\":1}}],[\"主要从\",{\"1\":{\"24\":1}}],[\"t4njraxo75r1e4jlevo\",{\"1\":{\"1507\":1}}],[\"t可以替换为任何类型\",{\"1\":{\"1424\":1}}],[\"t>\",{\"1\":{\"1424\":4}}],[\"t>表示从t类型到其子类型之间的某种类型\",{\"1\":{\"1424\":1}}],[\"t>分别代表什么含义\",{\"1\":{\"1424\":1}}],[\"t3\",{\"0\":{\"1064\":1,\"1262\":1},\"1\":{\"1064\":1,\"1262\":1}}],[\"t2\",{\"0\":{\"1064\":1,\"1262\":1},\"1\":{\"1064\":1,\"1262\":1,\"1392\":1}}],[\"tls\",{\"1\":{\"989\":1}}],[\"tx\",{\"1\":{\"881\":4}}],[\"tx=\",{\"1\":{\"881\":1}}],[\"tx<\",{\"1\":{\"875\":1}}],[\"txt\",{\"1\":{\"111\":4,\"176\":1,\"438\":1}}],[\"t1\",{\"0\":{\"1064\":1,\"1262\":1},\"1\":{\"864\":3,\"1064\":1,\"1262\":1,\"1392\":1}}],[\"ttime\",{\"1\":{\"863\":2,\"864\":2}}],[\"ttl\",{\"1\":{\"666\":2,\"1195\":9,\"1368\":9}}],[\"tb\",{\"1\":{\"799\":4,\"800\":1,\"807\":2,\"818\":7,\"822\":1,\"826\":7,\"835\":1,\"842\":5,\"843\":2,\"845\":4,\"847\":1,\"848\":1,\"849\":2,\"850\":1,\"852\":6,\"853\":1,\"855\":1,\"856\":4,\"857\":3,\"858\":12}}],[\"tm\",{\"1\":{\"755\":2}}],[\"tmpfile\",{\"1\":{\"1420\":4}}],[\"tmp\",{\"1\":{\"405\":3}}],[\"t整数\",{\"1\":{\"687\":2}}],[\"tporadowski\",{\"1\":{\"660\":1}}],[\"tuser\",{\"1\":{\"818\":11,\"822\":11}}],[\"ture\",{\"1\":{\"493\":1}}],[\"tuna\",{\"1\":{\"174\":1}}],[\"tgz\",{\"1\":{\"461\":2}}],[\"twepoch\",{\"1\":{\"441\":2}}],[\"twitter\",{\"1\":{\"439\":2,\"441\":1}}],[\"tsinghua\",{\"1\":{\"174\":1}}],[\"ts\",{\"1\":{\"148\":1}}],[\"trim>\",{\"1\":{\"787\":2,\"790\":3,\"818\":1,\"826\":1,\"849\":1}}],[\"trim\",{\"1\":{\"667\":1,\"787\":1,\"847\":1,\"848\":1,\"849\":1,\"850\":1,\"939\":1,\"1134\":1,\"1319\":1}}],[\"truncate都表示删除\",{\"1\":{\"1147\":1,\"1330\":1}}],[\"truncate\",{\"0\":{\"606\":1},\"1\":{\"604\":1,\"1147\":2,\"1330\":2}}],[\"true\",{\"1\":{\"8\":2,\"162\":1,\"190\":2,\"198\":1,\"337\":1,\"341\":5,\"342\":2,\"390\":4,\"459\":5,\"484\":2,\"485\":1,\"489\":1,\"492\":1,\"493\":1,\"499\":1,\"540\":1,\"541\":2,\"711\":2,\"755\":8,\"826\":2,\"830\":1,\"853\":1,\"856\":2,\"857\":3,\"858\":4,\"860\":2,\"880\":4,\"883\":1,\"884\":1,\"892\":1,\"894\":1,\"927\":3,\"928\":1,\"939\":1,\"948\":3,\"1001\":2,\"1027\":1,\"1041\":1,\"1042\":1,\"1049\":2,\"1062\":2,\"1133\":2,\"1195\":1,\"1210\":2,\"1231\":1,\"1242\":1,\"1243\":1,\"1250\":2,\"1260\":2,\"1318\":2,\"1368\":1,\"1382\":3,\"1390\":2,\"1404\":1,\"1428\":2,\"1442\":1,\"1446\":1,\"1466\":1,\"1478\":1,\"1494\":2}}],[\"transient\",{\"1\":{\"1404\":1,\"1446\":2}}],[\"translog\",{\"1\":{\"1028\":6,\"1232\":6}}],[\"transactiontemplate\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"transactional注解的方式\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"transactional\",{\"1\":{\"893\":2}}],[\"transactionmanager\",{\"1\":{\"881\":2}}],[\"transactions\",{\"1\":{\"664\":1}}],[\"transaction\",{\"1\":{\"618\":1,\"619\":2,\"621\":2,\"622\":1,\"634\":1,\"636\":2,\"852\":3,\"853\":2,\"881\":2,\"893\":1}}],[\"transfer\",{\"1\":{\"540\":2,\"541\":2,\"887\":1}}],[\"transport\",{\"1\":{\"459\":2}}],[\"trace\",{\"1\":{\"223\":2,\"229\":1}}],[\"traceid\",{\"1\":{\"220\":1}}],[\"trac\",{\"1\":{\"139\":1}}],[\"tryrelease\",{\"1\":{\"1390\":2}}],[\"tryacquire\",{\"1\":{\"1390\":2}}],[\"trylock\",{\"1\":{\"1062\":6,\"1260\":6}}],[\"try\",{\"1\":{\"200\":1,\"224\":2,\"225\":1,\"338\":1,\"441\":1,\"677\":1,\"711\":3,\"752\":1,\"800\":1,\"810\":1,\"893\":1,\"894\":1,\"939\":2,\"1049\":1,\"1061\":2,\"1062\":6,\"1064\":2,\"1250\":1,\"1259\":2,\"1260\":6,\"1262\":2,\"1390\":1,\"1410\":2,\"1446\":2,\"1481\":1,\"1494\":1}}],[\"treenode<k\",{\"1\":{\"1380\":1}}],[\"treenode\",{\"1\":{\"1380\":1}}],[\"treeifybin\",{\"1\":{\"1380\":1}}],[\"treeify\",{\"1\":{\"1380\":1}}],[\"treemap<>\",{\"1\":{\"1406\":1}}],[\"treemap<string\",{\"1\":{\"1406\":1}}],[\"treemap\",{\"1\":{\"1069\":1,\"1264\":1,\"1380\":1,\"1406\":1}}],[\"treeset\",{\"1\":{\"1069\":1,\"1264\":1}}],[\"tree索引适合范围查询和排序操作\",{\"1\":{\"573\":1}}],[\"tree\",{\"0\":{\"324\":1},\"1\":{\"169\":1,\"558\":1,\"744\":1,\"753\":1,\"919\":1}}],[\"typeparams\",{\"1\":{\"1468\":1}}],[\"typevariable<\",{\"1\":{\"1468\":1}}],[\"typelanguage=\",{\"1\":{\"928\":1}}],[\"type>\",{\"1\":{\"907\":1}}],[\"typehandlers\",{\"0\":{\"832\":1}}],[\"typealiasespackage\",{\"1\":{\"878\":1}}],[\"typealiases>\",{\"1\":{\"831\":2}}],[\"typealiases\",{\"0\":{\"831\":1}}],[\"type=datasource\",{\"1\":{\"947\":1}}],[\"type=\",{\"1\":{\"806\":4,\"808\":2,\"829\":1,\"831\":2,\"833\":1,\"856\":1,\"857\":1,\"858\":1,\"860\":1,\"928\":6}}],[\"typedef\",{\"1\":{\"684\":2,\"687\":4,\"691\":1,\"693\":1,\"698\":3}}],[\"type\",{\"0\":{\"472\":1},\"1\":{\"123\":1,\"472\":1,\"482\":3,\"485\":3,\"487\":3,\"489\":11,\"490\":2,\"493\":2,\"496\":1,\"509\":1,\"510\":1,\"569\":1,\"665\":1,\"666\":3,\"687\":1,\"698\":2,\"825\":1,\"831\":1,\"860\":1,\"884\":1,\"887\":1,\"1402\":1,\"1420\":2,\"1456\":4,\"1460\":1,\"1468\":1,\"1507\":1}}],[\"types\",{\"1\":{\"123\":2,\"472\":1}}],[\"tinyint\",{\"1\":{\"599\":1,\"789\":2}}],[\"tilnextmillis\",{\"1\":{\"441\":2}}],[\"tirestay\",{\"1\":{\"296\":1}}],[\"ticktime\",{\"1\":{\"174\":1}}],[\"ticktime这个时间是作为zookeeper服务器之间或客户端与服务器之间维持心跳的时间间隔\",{\"1\":{\"174\":1}}],[\"tips\",{\"1\":{\"123\":1}}],[\"timeunit\",{\"1\":{\"1062\":3,\"1260\":3}}],[\"timed\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"timeseries\",{\"1\":{\"950\":1}}],[\"timestamp\",{\"1\":{\"441\":11,\"887\":3,\"1148\":1,\"1331\":1,\"1456\":2}}],[\"timestampleftshift\",{\"1\":{\"441\":2}}],[\"time`\",{\"1\":{\"887\":3}}],[\"timegen\",{\"1\":{\"441\":4}}],[\"time\",{\"1\":{\"123\":1,\"666\":1,\"727\":1,\"752\":4,\"880\":2,\"890\":1,\"948\":1,\"1113\":2,\"1195\":1,\"1301\":2,\"1368\":1,\"1400\":1,\"1494\":1}}],[\"timeout\",{\"1\":{\"123\":8,\"667\":3,\"711\":2,\"950\":1,\"1428\":2}}],[\"title>\",{\"1\":{\"895\":1}}],[\"title1\",{\"1\":{\"790\":1}}],[\"title的值为new\",{\"1\":{\"790\":1}}],[\"title\",{\"1\":{\"41\":3,\"473\":1,\"570\":3,\"790\":7,\"1416\":5,\"1456\":2,\"1494\":1}}],[\"threshold\",{\"1\":{\"1380\":3,\"1386\":5,\"1406\":1}}],[\"threadfactory\",{\"1\":{\"1384\":1}}],[\"threadpoolexecutor\",{\"1\":{\"1384\":2}}],[\"threadprimitivedeprecation\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"threadc\",{\"1\":{\"1064\":6,\"1262\":6}}],[\"thread2\",{\"1\":{\"1062\":2,\"1260\":2,\"1386\":3}}],[\"thread1\",{\"1\":{\"1062\":2,\"1260\":2,\"1386\":3}}],[\"threadnum\",{\"1\":{\"1061\":3,\"1259\":3}}],[\"threadb\",{\"1\":{\"1061\":3,\"1064\":13,\"1259\":3,\"1262\":13}}],[\"threada\",{\"1\":{\"1061\":3,\"1064\":11,\"1259\":3,\"1262\":11}}],[\"threadlocalhashcode\",{\"1\":{\"1386\":4}}],[\"threadlocal<\",{\"1\":{\"1386\":6}}],[\"threadlocal<>\",{\"1\":{\"1386\":1}}],[\"threadlocal<string>\",{\"1\":{\"1386\":1}}],[\"threadlocaldemo\",{\"1\":{\"1386\":1}}],[\"threadlocalmap\",{\"1\":{\"1060\":1,\"1258\":1,\"1386\":5}}],[\"threadlocal\",{\"0\":{\"1386\":1},\"1\":{\"1060\":2,\"1258\":2,\"1386\":24}}],[\"threadlocal类\",{\"1\":{\"1060\":1,\"1258\":1}}],[\"threadlocal方式的线程通信\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"threadlocal方式\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"threads\",{\"1\":{\"1058\":1,\"1256\":1,\"1390\":4}}],[\"threaddump\",{\"1\":{\"948\":1}}],[\"thread\",{\"1\":{\"755\":5,\"884\":1,\"939\":2,\"1058\":7,\"1060\":1,\"1061\":28,\"1062\":2,\"1064\":7,\"1256\":7,\"1258\":1,\"1259\":28,\"1260\":2,\"1262\":7,\"1386\":4,\"1388\":1,\"1390\":5,\"1466\":1,\"1481\":5}}],[\"throwing\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"throwable\",{\"1\":{\"752\":2,\"833\":1,\"892\":3,\"1049\":3,\"1250\":3,\"1416\":1,\"1474\":1}}],[\"throwss\",{\"1\":{\"752\":1}}],[\"throws\",{\"1\":{\"338\":4,\"339\":2,\"405\":4,\"417\":2,\"752\":2,\"755\":2,\"800\":1,\"810\":1,\"820\":6,\"826\":1,\"833\":1,\"848\":1,\"849\":1,\"850\":1,\"856\":2,\"857\":1,\"858\":1,\"891\":5,\"893\":1,\"939\":2,\"1001\":1,\"1049\":4,\"1062\":1,\"1210\":1,\"1250\":4,\"1260\":1,\"1390\":1,\"1408\":2,\"1414\":5,\"1416\":1,\"1474\":1,\"1478\":2}}],[\"throw\",{\"1\":{\"199\":1,\"338\":3,\"339\":2,\"441\":3,\"893\":4,\"1410\":2,\"1481\":2}}],[\"than\",{\"1\":{\"441\":4}}],[\"that\",{\"1\":{\"123\":1,\"129\":2,\"169\":1,\"589\":1,\"1042\":1,\"1058\":4,\"1243\":1,\"1256\":4}}],[\"this\",{\"1\":{\"123\":1,\"197\":1,\"338\":1,\"339\":1,\"341\":10,\"342\":8,\"390\":1,\"441\":2,\"510\":2,\"540\":1,\"541\":1,\"810\":9,\"817\":6,\"820\":9,\"826\":8,\"833\":1,\"847\":1,\"848\":1,\"849\":2,\"850\":1,\"852\":6,\"853\":1,\"892\":9,\"893\":5,\"894\":1,\"950\":1,\"1001\":1,\"1029\":1,\"1058\":3,\"1061\":3,\"1064\":2,\"1173\":6,\"1210\":1,\"1233\":1,\"1256\":3,\"1259\":3,\"1262\":2,\"1350\":6,\"1380\":1,\"1382\":1,\"1404\":3,\"1408\":4,\"1424\":2,\"1462\":2,\"1474\":1,\"1480\":2,\"1481\":1,\"1494\":6}}],[\"these\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"them\",{\"1\":{\"950\":1,\"1394\":1}}],[\"then\",{\"1\":{\"787\":1,\"788\":2,\"790\":8,\"1029\":1,\"1233\":1,\"1408\":1}}],[\"there\",{\"1\":{\"667\":2}}],[\"they\",{\"1\":{\"169\":1}}],[\"the\",{\"1\":{\"41\":1,\"123\":4,\"129\":1,\"169\":3,\"406\":1,\"464\":1,\"490\":2,\"567\":1,\"589\":2,\"825\":1,\"884\":1,\"950\":5,\"1058\":11,\"1107\":2,\"1173\":5,\"1256\":11,\"1298\":2,\"1350\":5,\"1394\":1,\"1396\":2,\"1398\":1,\"1408\":4,\"1412\":2,\"1422\":1}}],[\"tcp和udp的区别\",{\"0\":{\"1092\":1,\"1285\":1},\"1\":{\"984\":1}}],[\"tcp\",{\"1\":{\"121\":3,\"123\":3,\"459\":1,\"989\":1,\"1092\":3,\"1285\":3}}],[\"tformalexpression\",{\"1\":{\"928\":6}}],[\"tf\",{\"1\":{\"111\":2,\"478\":1,\"1026\":1,\"1230\":1}}],[\"technotes\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"tencentcdb\",{\"1\":{\"927\":1}}],[\"telegrambot自动回复\",{\"0\":{\"547\":1}}],[\"telegram\",{\"0\":{\"544\":1},\"2\":{\"545\":1,\"546\":1,\"552\":1,\"553\":1}}],[\"territory\",{\"1\":{\"652\":1}}],[\"terminated\",{\"1\":{\"1057\":1,\"1255\":1,\"1384\":1}}],[\"term+偏移量\",{\"1\":{\"493\":1}}],[\"term+位置+偏移量\",{\"1\":{\"493\":1}}],[\"term+位置\",{\"1\":{\"493\":1}}],[\"term存储\",{\"1\":{\"493\":1}}],[\"term\",{\"1\":{\"486\":5,\"489\":2,\"493\":1,\"1026\":1,\"1230\":1}}],[\"ternaryoperatorexample\",{\"1\":{\"191\":1}}],[\"test5\",{\"1\":{\"1507\":1}}],[\"test4\",{\"1\":{\"1507\":1}}],[\"test3\",{\"1\":{\"1507\":1}}],[\"test2\",{\"1\":{\"1507\":1}}],[\"test就是告诉测试运行器哪些是测试方法\",{\"1\":{\"1402\":1}}],[\"test1\",{\"1\":{\"1064\":1,\"1262\":1,\"1507\":1}}],[\"testappoint\",{\"1\":{\"893\":1}}],[\"testinsertappointment\",{\"1\":{\"891\":1}}],[\"testinsertuser\",{\"1\":{\"826\":1}}],[\"testreducenumber\",{\"1\":{\"891\":1}}],[\"testquerybykeywithbook\",{\"1\":{\"891\":1}}],[\"testquerybyid\",{\"1\":{\"891\":2}}],[\"testqueryall\",{\"1\":{\"891\":1}}],[\"testqueryuserlist\",{\"1\":{\"847\":1}}],[\"testqueryuserall\",{\"1\":{\"826\":1}}],[\"testqueryuserbyid\",{\"1\":{\"826\":1,\"852\":3}}],[\"testqueryuserbytablename\",{\"1\":{\"826\":1}}],[\"test<\",{\"1\":{\"875\":1,\"907\":1}}],[\"testcache\",{\"1\":{\"853\":1}}],[\"test参考if\",{\"1\":{\"850\":1}}],[\"testognl表达式或者简单java代码\",{\"1\":{\"850\":1}}],[\"testdeleteuserbyid\",{\"1\":{\"826\":1}}],[\"testupdateuser\",{\"1\":{\"826\":1,\"849\":1}}],[\"testlogin\",{\"1\":{\"826\":1}}],[\"test=\",{\"1\":{\"787\":1,\"790\":2,\"818\":6,\"826\":6,\"847\":1,\"848\":2,\"849\":8,\"863\":2,\"1416\":1}}],[\"test\",{\"1\":{\"413\":1,\"430\":1,\"485\":1,\"492\":3,\"711\":2,\"768\":3,\"769\":1,\"776\":10,\"788\":1,\"789\":2,\"806\":2,\"808\":2,\"810\":1,\"819\":1,\"820\":6,\"825\":1,\"826\":8,\"847\":1,\"848\":1,\"849\":2,\"850\":1,\"852\":3,\"853\":1,\"856\":2,\"857\":1,\"858\":1,\"863\":2,\"875\":1,\"891\":10,\"893\":2,\"894\":3,\"895\":6,\"917\":2,\"918\":2,\"1001\":1,\"1061\":3,\"1062\":1,\"1064\":1,\"1210\":1,\"1259\":3,\"1260\":1,\"1262\":1,\"1392\":12,\"1507\":7}}],[\"testname\",{\"1\":{\"111\":1}}],[\"templates\",{\"1\":{\"939\":2}}],[\"temp\",{\"1\":{\"123\":3,\"417\":2,\"430\":3,\"976\":4}}],[\"text\",{\"1\":{\"211\":2,\"485\":3,\"486\":1,\"487\":2,\"489\":5,\"490\":7,\"492\":5,\"493\":1,\"496\":5,\"510\":2,\"558\":1,\"570\":1,\"810\":1,\"882\":1,\"895\":1,\"1456\":2}}],[\"textjson\",{\"1\":{\"111\":3}}],[\"tex\",{\"0\":{\"33\":1}}],[\"t\",{\"0\":{\"603\":1},\"1\":{\"111\":5,\"146\":2,\"157\":2,\"158\":1,\"250\":1,\"341\":6,\"342\":4,\"441\":2,\"564\":3,\"589\":2,\"591\":3,\"592\":2,\"593\":2,\"594\":2,\"595\":2,\"640\":2,\"687\":2,\"693\":6,\"893\":2,\"917\":1,\"1001\":2,\"1047\":2,\"1138\":2,\"1210\":2,\"1248\":2,\"1323\":2,\"1392\":1,\"1422\":1,\"1424\":14,\"1481\":19,\"1494\":2,\"1515\":1}}],[\"tair\",{\"1\":{\"1002\":1,\"1211\":1}}],[\"tail=100\",{\"1\":{\"919\":1}}],[\"tail\",{\"1\":{\"107\":1,\"111\":2,\"684\":1}}],[\"ta来了\",{\"1\":{\"980\":1}}],[\"taskthread\",{\"1\":{\"1061\":3,\"1259\":3}}],[\"taskid=2507\",{\"1\":{\"929\":1}}],[\"task\",{\"1\":{\"929\":1,\"1201\":3,\"1374\":3}}],[\"tasklistener>\",{\"1\":{\"928\":2}}],[\"tasklistener\",{\"1\":{\"928\":2}}],[\"taskuser\",{\"1\":{\"928\":1}}],[\"tab\",{\"1\":{\"1380\":1,\"1386\":12}}],[\"table结果筛选回收区域\",{\"1\":{\"1398\":1}}],[\"tablename\",{\"1\":{\"787\":1,\"826\":4,\"842\":8}}],[\"table2\",{\"1\":{\"635\":1}}],[\"table1\",{\"1\":{\"635\":1}}],[\"tables进行优化\",{\"1\":{\"1398\":1}}],[\"tables进行概括性标记\",{\"1\":{\"1398\":1}}],[\"tables外\",{\"1\":{\"1398\":1}}],[\"tables实现了分代回收和空间整合\",{\"1\":{\"1398\":1}}],[\"tables是g1高效率回收的关键\",{\"1\":{\"1398\":1}}],[\"tables都是g1用来管理堆和处理垃圾回收的重要数据结构\",{\"1\":{\"1398\":1}}],[\"tables语句来显式地锁定一个或多个表\",{\"1\":{\"635\":1}}],[\"tables语句显式地对表加锁和解锁\",{\"1\":{\"628\":1}}],[\"tables和unlock\",{\"1\":{\"628\":1}}],[\"tables\",{\"1\":{\"569\":1,\"574\":3,\"624\":2,\"635\":3,\"1398\":4}}],[\"table\",{\"0\":{\"605\":2,\"606\":2,\"628\":1},\"1\":{\"567\":1,\"568\":1,\"569\":6,\"570\":3,\"574\":15,\"604\":3,\"605\":5,\"618\":2,\"619\":2,\"621\":2,\"622\":1,\"624\":2,\"634\":1,\"635\":2,\"636\":4,\"637\":1,\"640\":1,\"641\":1,\"642\":1,\"687\":1,\"789\":1,\"799\":2,\"855\":1,\"858\":3,\"880\":1,\"887\":6,\"1380\":4,\"1386\":13,\"1406\":3,\"1446\":1,\"1507\":1}}],[\"tabulation\",{\"1\":{\"427\":1}}],[\"tag\",{\"1\":{\"465\":1,\"1019\":1,\"1225\":1}}],[\"target有\",{\"1\":{\"1402\":1}}],[\"target定义可以用于什么地方\",{\"1\":{\"1402\":1}}],[\"target表示这个注解可以修饰那些地方\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"targets\",{\"1\":{\"950\":2}}],[\"targetref=\",{\"1\":{\"928\":8}}],[\"targetnamespace=\",{\"1\":{\"928\":1}}],[\"target>\",{\"1\":{\"875\":1,\"907\":1}}],[\"target\",{\"1\":{\"306\":7,\"337\":2,\"338\":3,\"339\":3,\"751\":1,\"833\":2,\"887\":2,\"1049\":4,\"1058\":3,\"1174\":2,\"1250\":4,\"1256\":3,\"1351\":2,\"1402\":2,\"1412\":1,\"1474\":9,\"1514\":1,\"1523\":1,\"1524\":1}}],[\"tar\",{\"1\":{\"107\":1,\"111\":5,\"142\":3,\"174\":3,\"458\":3,\"461\":1,\"661\":3,\"735\":2}}],[\"tool用\",{\"1\":{\"1402\":1}}],[\"tolerance\",{\"1\":{\"1035\":2,\"1197\":1,\"1239\":1,\"1370\":1}}],[\"tolerate\",{\"1\":{\"129\":1}}],[\"tosting\",{\"1\":{\"888\":2}}],[\"tostring方法等\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"tostring方法\",{\"1\":{\"888\":2,\"892\":1}}],[\"tostring\",{\"1\":{\"223\":1,\"405\":1,\"413\":1,\"417\":1,\"430\":1,\"438\":1,\"752\":1,\"888\":4,\"939\":1,\"1049\":1,\"1250\":1,\"1466\":1}}],[\"tomat\",{\"1\":{\"1182\":1,\"1357\":1}}],[\"tom\",{\"1\":{\"786\":1,\"789\":1}}],[\"tomcat\",{\"1\":{\"111\":1,\"895\":1,\"990\":1,\"1093\":1,\"1286\":1}}],[\"token\",{\"1\":{\"657\":1,\"1094\":1,\"1287\":1}}],[\"tokens\",{\"1\":{\"540\":1,\"541\":1}}],[\"to的目标字段不出现在\",{\"1\":{\"489\":1}}],[\"to将字段数值拷贝到目标字段\",{\"1\":{\"489\":1}}],[\"to所代替\",{\"1\":{\"489\":1}}],[\"toarray\",{\"1\":{\"337\":1,\"338\":2,\"339\":2}}],[\"totalprice\",{\"1\":{\"857\":1,\"858\":1}}],[\"totalsupply\",{\"1\":{\"540\":7,\"541\":7}}],[\"totalclaimed\",{\"1\":{\"540\":5,\"541\":5}}],[\"total\",{\"1\":{\"176\":1,\"711\":2,\"852\":5,\"853\":1,\"858\":1}}],[\"to\",{\"0\":{\"489\":1},\"1\":{\"123\":4,\"129\":2,\"169\":7,\"174\":2,\"441\":1,\"489\":5,\"493\":1,\"567\":1,\"665\":1,\"825\":1,\"853\":1,\"863\":2,\"864\":2,\"950\":7,\"1030\":1,\"1042\":2,\"1058\":5,\"1173\":2,\"1195\":1,\"1234\":1,\"1243\":2,\"1256\":5,\"1350\":2,\"1368\":1,\"1398\":2,\"1408\":1,\"1412\":2,\"1422\":1,\"1481\":1}}],[\"todo\",{\"0\":{\"121\":1,\"1472\":1},\"1\":{\"277\":1,\"283\":1,\"727\":1,\"1489\":1}}],[\"topic的主题中\",{\"1\":{\"1448\":1}}],[\"topic是消息的类别\",{\"1\":{\"1444\":1}}],[\"topicpartition\",{\"1\":{\"1442\":1}}],[\"topic分\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"topic\",{\"1\":{\"1116\":5,\"1124\":1,\"1304\":5,\"1312\":1,\"1438\":1,\"1440\":5,\"1442\":1,\"1444\":1,\"1448\":4}}],[\"topkfrequent\",{\"1\":{\"406\":1}}],[\"top\",{\"1\":{\"107\":2,\"335\":1,\"406\":1,\"1481\":2}}],[\"touch\",{\"1\":{\"107\":1,\"108\":2}}],[\"tocodepoints\",{\"1\":{\"441\":2}}],[\"toc\",{\"1\":{\"21\":1,\"85\":1,\"125\":1,\"137\":1,\"166\":1,\"314\":1,\"330\":1,\"381\":1,\"399\":1,\"409\":1,\"421\":1,\"433\":1,\"447\":1,\"450\":1,\"481\":1,\"513\":1,\"534\":1,\"547\":1,\"578\":1,\"588\":1,\"649\":1,\"675\":1,\"703\":1,\"744\":1,\"761\":1,\"785\":1,\"794\":1,\"870\":1,\"910\":1,\"922\":1,\"934\":1,\"944\":1,\"958\":1,\"977\":1,\"983\":1,\"987\":1,\"998\":1,\"1013\":1,\"1024\":1,\"1040\":1,\"1054\":1,\"1068\":1,\"1083\":1,\"1098\":1,\"1112\":1,\"1128\":1,\"1141\":1,\"1154\":1,\"1167\":1,\"1180\":1,\"1193\":1,\"1206\":1}}],[\"页签\",{\"1\":{\"976\":1}}],[\"页锁适用于需要较高并发的场景\",{\"1\":{\"630\":1}}],[\"页锁和表锁的冲突较少\",{\"1\":{\"630\":1}}],[\"页锁次之\",{\"1\":{\"630\":1}}],[\"页锁可以用于控制对表中特定数据页的访问\",{\"1\":{\"629\":1}}],[\"页锁可能导致较少的锁冲突\",{\"1\":{\"629\":1}}],[\"页锁允许多个事务同时访问不同的数据页\",{\"1\":{\"629\":1}}],[\"页锁允许多个事务同时访问不同的页\",{\"1\":{\"624\":1}}],[\"页锁通常由数据库管理系统自动管理\",{\"1\":{\"624\":1,\"629\":1}}],[\"页锁锁定的是数据页\",{\"1\":{\"624\":1}}],[\"页锁是锁定数据库中的一个数据页\",{\"1\":{\"629\":1}}],[\"页锁是锁定数据库中的一个\",{\"1\":{\"624\":1}}],[\"页锁\",{\"0\":{\"624\":1,\"629\":1},\"1\":{\"624\":2,\"630\":1}}],[\"页是数据库存储单位\",{\"1\":{\"579\":1}}],[\"页是计算机管理存储器的逻辑块\",{\"1\":{\"327\":1}}],[\"页的目录\",{\"1\":{\"563\":1}}],[\"页得大小通常为4k\",{\"1\":{\"327\":1}}],[\"页\",{\"1\":{\"325\":1,\"563\":1,\"624\":1,\"1029\":1,\"1233\":1}}],[\"页面锁有什么区别\",{\"0\":{\"626\":1}}],[\"页面都会被转换为一个\",{\"1\":{\"44\":1}}],[\"页面内容\",{\"0\":{\"43\":1}}],[\"页面标题\",{\"0\":{\"41\":1},\"1\":{\"41\":1}}],[\"页面配置\",{\"0\":{\"40\":1},\"1\":{\"42\":1},\"2\":{\"46\":1}}],[\"页面引入配置\",{\"1\":{\"26\":1}}],[\"页面信息\",{\"0\":{\"42\":1},\"1\":{\"18\":1}}],[\"页脚\",{\"1\":{\"18\":1,\"21\":1}}],[\"贡献者\",{\"1\":{\"18\":1,\"21\":1}}],[\"侧边栏\",{\"1\":{\"18\":1,\"21\":1}}],[\"在企业中\",{\"1\":{\"1502\":1}}],[\"在后端接口封装中\",{\"1\":{\"1494\":1}}],[\"在文件操作中\",{\"1\":{\"1478\":1}}],[\"在网络编程中\",{\"1\":{\"1478\":1}}],[\"在变量前面追加版本号version\",{\"1\":{\"1476\":1}}],[\"在底层\",{\"1\":{\"1470\":1}}],[\"在elasticsearch中\",{\"1\":{\"1470\":1}}],[\"在电商网站中\",{\"1\":{\"1464\":1}}],[\"在发送消息之前\",{\"1\":{\"1454\":1}}],[\"在生产者部分\",{\"1\":{\"1448\":1}}],[\"在生产中通常包括\",{\"1\":{\"578\":1}}],[\"在kafka中\",{\"1\":{\"1448\":1,\"1452\":1,\"1454\":1}}],[\"在消费者消费消息后\",{\"1\":{\"1442\":1}}],[\"在选择是否启用压缩时\",{\"1\":{\"1430\":1}}],[\"在选举时每个节点都有一个\",{\"1\":{\"183\":1}}],[\"在聊了泛型这么多后\",{\"1\":{\"1424\":1}}],[\"在实际工作中\",{\"1\":{\"1502\":1}}],[\"在实际开发中的应用吗\",{\"1\":{\"1478\":1}}],[\"在实际的索引系统里可以包含\",{\"1\":{\"478\":1}}],[\"在实例化对象后\",{\"1\":{\"1412\":1}}],[\"在源码层面\",{\"1\":{\"1410\":3}}],[\"在满足需求前提下保持最简实现\",{\"1\":{\"1408\":1}}],[\"在你的项目根目录下创建一个名为\",{\"1\":{\"1514\":1}}],[\"在你的项目中是如何设计一个高并发的系统的\",{\"1\":{\"1408\":1}}],[\"在你的工作中\",{\"1\":{\"1452\":1}}],[\"在你的系统中检查这个目录是否存在\",{\"1\":{\"174\":1}}],[\"在目标方法抛出异常后执行\",{\"1\":{\"1402\":1}}],[\"在目标方法正常返回后执行\",{\"1\":{\"1402\":1}}],[\"在目标方法调用前执行\",{\"1\":{\"1402\":1}}],[\"在目标对象\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"在gc日志前输出时间戳\",{\"1\":{\"1400\":1}}],[\"在gc时优先处理\",{\"1\":{\"1398\":1}}],[\"在gc时结合使用\",{\"1\":{\"1398\":1}}],[\"在gc的时候也要考虑到不连续的分配\",{\"1\":{\"1101\":1,\"1292\":1}}],[\"在回收时只处理\",{\"1\":{\"1398\":1}}],[\"在标记过程中对象图可能被修改\",{\"1\":{\"1396\":1}}],[\"在工作实践中不断进步\",{\"1\":{\"1392\":1}}],[\"在工程实践中\",{\"1\":{\"722\":1}}],[\"在类加载过程中\",{\"1\":{\"1392\":1}}],[\"在项目根目录下运行以下命令来构建docker镜像\",{\"1\":{\"1515\":1}}],[\"在项目我玩的贼6\",{\"1\":{\"1476\":1}}],[\"在项目中\",{\"1\":{\"1476\":1}}],[\"在项目开发中可以\",{\"1\":{\"1380\":1}}],[\"在项目上线前\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"在扩容时\",{\"1\":{\"1380\":1}}],[\"在扩展空间时\",{\"1\":{\"683\":1}}],[\"在内存映射中\",{\"1\":{\"1478\":1}}],[\"在内存去重\",{\"1\":{\"719\":1}}],[\"在内部实现上主要包含以下几个结构\",{\"1\":{\"1380\":1}}],[\"在哪里可以看到全集\",{\"1\":{\"1378\":1}}],[\"在那些多个应用共用一个\",{\"1\":{\"1202\":1,\"1375\":1}}],[\"在特定的目录下创建\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"在约定目录下创建临时目录节点\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"在以前通过增\",{\"1\":{\"1196\":1,\"1369\":1}}],[\"在以前没有开源连接池时\",{\"1\":{\"710\":1}}],[\"在微服务中\",{\"1\":{\"1190\":1,\"1365\":1}}],[\"在容器中开始实例化我们需要的\",{\"1\":{\"1187\":1,\"1362\":1}}],[\"在容器启动时\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"在new对象的时候就会堵塞住了\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"在采用面向对象方法设计的软件系统中\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"在恢复时\",{\"1\":{\"1158\":1,\"1338\":1}}],[\"在写入消息之前\",{\"1\":{\"1454\":1}}],[\"在写入的时候先把当前的数据以rdb的形式写入到文件的开头\",{\"1\":{\"1158\":1,\"1338\":1}}],[\"在写请求时\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"在插件的拦截方法内\",{\"1\":{\"1138\":1,\"1323\":1}}],[\"在第\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"在第一轮投票中\",{\"1\":{\"183\":1}}],[\"在默认情况下\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"在复制完成后\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"在复合索引中\",{\"1\":{\"561\":1}}],[\"在其他机器上选举出新的\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"在其中运行的只是应用\",{\"1\":{\"1015\":1,\"1221\":1}}],[\"在保证同一个\",{\"1\":{\"1119\":1,\"1307\":1}}],[\"在2\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"在面试kafka中\",{\"1\":{\"1112\":1,\"1300\":1}}],[\"在面试中\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"在虚拟机启动时创建\",{\"1\":{\"1099\":1,\"1290\":1}}],[\"在请求完毕后\",{\"1\":{\"1172\":1,\"1349\":1}}],[\"在请求bean范围内为每一个来自客户端的网络请求创建一个实例\",{\"1\":{\"1172\":1,\"1349\":1}}],[\"在请求地址中添加\",{\"1\":{\"1094\":1,\"1287\":1}}],[\"在请求头中\",{\"1\":{\"211\":1}}],[\"在只在\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"在jdk8之后\",{\"1\":{\"1388\":1}}],[\"在jdk8之前\",{\"1\":{\"1388\":1}}],[\"在jsp运行过程中\",{\"1\":{\"1087\":1,\"1280\":1}}],[\"在java程序中\",{\"1\":{\"1388\":1}}],[\"在java8之前使用分段锁\",{\"1\":{\"1380\":1}}],[\"在java中\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"在java编程中\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"在java线程并发处理中\",{\"1\":{\"755\":1}}],[\"在java实例化对象会分为三步\",{\"1\":{\"89\":1}}],[\"在初始化阶段\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"在下列时刻会加载servlet\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"在笔试的时候可能还会考一些集合的使用\",{\"1\":{\"1080\":1,\"1275\":1}}],[\"在计算机中\",{\"1\":{\"1080\":1,\"1275\":1}}],[\"在计算机中磁盘存储数据最小单元是扇区\",{\"1\":{\"325\":1}}],[\"在极端情况下\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"在上面的代码中\",{\"1\":{\"1480\":3,\"1481\":3}}],[\"在上面举的例子中\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"在上述情况下没有抛出异常\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"在适合单线程使用的集合容器中很好地实现了\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"在适当的时候自动释放对象并进行内存回收\",{\"1\":{\"698\":1}}],[\"在日常的使用中\",{\"1\":{\"1074\":1,\"1269\":1}}],[\"在日常使用中\",{\"1\":{\"181\":1}}],[\"在涉及到要同时申请两个锁的方法中\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"在每一个\",{\"1\":{\"1060\":1,\"1258\":1}}],[\"在每个分支首行都打印日志\",{\"0\":{\"228\":1}}],[\"在lockobj\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"在基于偏序关系的happens\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"在并发清除阶段\",{\"1\":{\"1396\":1}}],[\"在并发标记阶段\",{\"1\":{\"1396\":1}}],[\"在并发环境下一定会发生脏数据问题\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"在并发情况下\",{\"0\":{\"1035\":1,\"1239\":1}}],[\"在反序列化时\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"在步骤二中的indexcontroller写一个sourcec进行测试\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"在阻塞式里面\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"在任意子类中定义了重名和同样的参数列表就构成方法重写\",{\"1\":{\"1043\":1,\"1244\":1}}],[\"在通过valueof方法创建integer对象的时候\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"在主分片上面执行请求\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"在该机制下这些资源就不再是全局的了\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"在该示例中\",{\"1\":{\"568\":1}}],[\"在继续下一个容器之前不会等待容器准备就绪\",{\"1\":{\"1017\":1,\"1223\":1}}],[\"在自定义线程池时\",{\"1\":{\"1384\":1}}],[\"在自动化布署方面\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"在自己的对象系统中构建了一个\",{\"1\":{\"698\":1}}],[\"在所有有效的\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"在刚启动的缓存系统中\",{\"1\":{\"1008\":1,\"1217\":1}}],[\"在刚开始使用时\",{\"1\":{\"263\":1}}],[\"在读请求时\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"在开始说解决方案之前\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"在开发初期未考虑系统扩展性\",{\"1\":{\"1408\":1}}],[\"在开发调试阶段\",{\"1\":{\"219\":1}}],[\"在开发中我们有常见的四种日志打印等级\",{\"1\":{\"219\":1}}],[\"在前端查询钱包余额时\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"在前面的判断中\",{\"1\":{\"387\":1}}],[\"在低并发量下没什么问题\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"在缓存服务的基础上\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"在流量大时\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"在理解核心组件以前\",{\"1\":{\"990\":1}}],[\"在当前线程掉用了join\",{\"1\":{\"1064\":1,\"1262\":1}}],[\"在当前线程内可以任意存取数据\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"在当前分支进行紧急需求开发提交\",{\"1\":{\"979\":1}}],[\"在当时一个素人号\",{\"1\":{\"264\":1}}],[\"在搭建之前\",{\"1\":{\"970\":1}}],[\"在cmd中安装\",{\"1\":{\"961\":1}}],[\"在conf目录下\",{\"1\":{\"174\":1}}],[\"在acquire\",{\"1\":{\"1428\":1}}],[\"在activiti启动时删除原来的旧表\",{\"1\":{\"927\":1}}],[\"在activiti启动时创建表\",{\"1\":{\"927\":1}}],[\"在application\",{\"1\":{\"948\":1}}],[\"在关闭时删除表\",{\"1\":{\"927\":1}}],[\"在关键字全集内做一次查找\",{\"1\":{\"318\":1}}],[\"在stw阶段\",{\"1\":{\"1398\":1}}],[\"在spring中\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"在spring中有两种表现\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"在spring\",{\"1\":{\"1174\":2,\"1351\":2}}],[\"在source下面选择master\",{\"1\":{\"976\":1}}],[\"在service包下新建bookservice\",{\"1\":{\"893\":1}}],[\"在sql语句中使用别名\",{\"1\":{\"822\":2}}],[\"在里面新建一个枚举类\",{\"1\":{\"892\":1}}],[\"在dao包新建接口\",{\"1\":{\"889\":1}}],[\"在doc下面输入\",{\"1\":{\"755\":1}}],[\"在release\",{\"1\":{\"1428\":1}}],[\"在redis分片集群中\",{\"1\":{\"1426\":1}}],[\"在recources文件夹里新建mybatis\",{\"1\":{\"880\":1}}],[\"在rr隔离级别下\",{\"1\":{\"638\":2}}],[\"在接口所在的包中定义mapper\",{\"1\":{\"835\":1}}],[\"在接下来还会持续更新\",{\"1\":{\"584\":1}}],[\"在mybatis\",{\"1\":{\"835\":1}}],[\"在mybatis中\",{\"1\":{\"835\":1,\"852\":1}}],[\"在mysql的可重复读\",{\"1\":{\"638\":1}}],[\"在mysql中\",{\"1\":{\"628\":1}}],[\"在mysql中我们的innodb页的大小默认是16k\",{\"1\":{\"325\":1}}],[\"在mysql\",{\"1\":{\"570\":1}}],[\"在预处理语句\",{\"1\":{\"832\":1}}],[\"在子工程中的pom\",{\"1\":{\"778\":1}}],[\"在依赖节点dependency中的<optional>可以控制当前的依赖是否向下传递\",{\"1\":{\"771\":1}}],[\"在平面几何中坐标\",{\"1\":{\"768\":1}}],[\"在用户的目录下都只有一个\",{\"1\":{\"768\":1}}],[\"在用一个\",{\"1\":{\"711\":1}}],[\"在安装maven后并不会创建\",{\"1\":{\"768\":1}}],[\"在远程仓库中又分成了3种\",{\"1\":{\"768\":1}}],[\"在命令行中可以通过maven中的命令\",{\"1\":{\"766\":1}}],[\"在pom中的依赖节点中\",{\"1\":{\"773\":1}}],[\"在postgresql中\",{\"1\":{\"629\":1}}],[\"在path中追加\",{\"1\":{\"765\":1}}],[\"在试试我们的程序吧\",{\"1\":{\"755\":1}}],[\"在修改完之后的某一个时刻\",{\"1\":{\"755\":1}}],[\"在运行时\",{\"1\":{\"1474\":1}}],[\"在运行时期间不会存在任何泛型类型的参数信息\",{\"1\":{\"1424\":1}}],[\"在运行时候的内存分配过程\",{\"1\":{\"755\":1}}],[\"在运行期间\",{\"1\":{\"183\":1}}],[\"在多线程下也可能产生死循环\",{\"1\":{\"1446\":1}}],[\"在多线程并发环境下\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"在多线程访问的时候\",{\"1\":{\"755\":1}}],[\"在多粒度锁定协议中\",{\"1\":{\"638\":1}}],[\"在语言内部引入了\",{\"1\":{\"755\":1}}],[\"在进行io操作的时候再用一个线程去处理就可以了\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"在进行真正的构建之前进行一些清理工作\",{\"1\":{\"774\":1}}],[\"在进行多线程并发处理的时候就可以万事大吉\",{\"1\":{\"755\":1}}],[\"在进行完最低位数的分配后再合并回单一的数组中\",{\"1\":{\"428\":1}}],[\"在切点返回内容后\",{\"1\":{\"752\":1}}],[\"在切点之前\",{\"1\":{\"752\":1}}],[\"在方法上增加\",{\"1\":{\"752\":1}}],[\"在签到统计中\",{\"1\":{\"721\":1}}],[\"在程序运行时通过反射读取注解\",{\"1\":{\"1402\":1}}],[\"在程序开发过程中\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"在程序中用\",{\"1\":{\"722\":1}}],[\"在程序中也用\",{\"1\":{\"721\":1}}],[\"在程序出现大量请求是就会出现\",{\"1\":{\"679\":1}}],[\"在处理一个任务时\",{\"1\":{\"708\":1}}],[\"在有需要时\",{\"1\":{\"693\":1}}],[\"在有序集合中计算指定字典区间内成员数量\",{\"1\":{\"670\":1}}],[\"在同一个\",{\"1\":{\"1416\":1}}],[\"在同一个事务内\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"在同一个命名空间下保持唯一\",{\"1\":{\"807\":1,\"818\":1,\"826\":4,\"839\":1}}],[\"在同一个跳跃表中\",{\"1\":{\"692\":1}}],[\"在同一台机器上启动两个elasticsearch实例\",{\"1\":{\"470\":1}}],[\"在字典中维持一个索引计数器变量\",{\"1\":{\"688\":1}}],[\"在列表中添加一个或多个值\",{\"1\":{\"667\":1}}],[\"在列表的元素前或者后插入元素\",{\"1\":{\"667\":1}}],[\"在很多互联网公司中都使用了分布式技术\",{\"1\":{\"657\":1}}],[\"在应用不多的情况下一般使用容器自带的\",{\"1\":{\"657\":1}}],[\"在应用程序中\",{\"1\":{\"435\":1}}],[\"在部署时\",{\"0\":{\"1030\":1,\"1234\":1}}],[\"在部\",{\"1\":{\"652\":1}}],[\"在高冲突环境下\",{\"1\":{\"633\":1}}],[\"在高并发的更新操作中\",{\"1\":{\"571\":1}}],[\"在事务\",{\"1\":{\"1145\":1,\"1328\":1}}],[\"在事务提交时检测冲突\",{\"1\":{\"632\":1}}],[\"在事务使用完毕之前\",{\"1\":{\"625\":1}}],[\"在冲突较少的情况下\",{\"1\":{\"632\":1}}],[\"在innodb存储引擎中\",{\"1\":{\"624\":1,\"627\":1}}],[\"在id为10到20的范围内设置间隙锁\",{\"1\":{\"621\":1}}],[\"在许多数据库系统中\",{\"1\":{\"624\":1}}],[\"在许多操作系统中\",{\"1\":{\"327\":1}}],[\"在此复制期间还会有一系列保证性能的操作\",{\"1\":{\"1121\":1,\"1309\":1}}],[\"在此同时由于\",{\"1\":{\"755\":1}}],[\"在此分享给大家\",{\"1\":{\"755\":1}}],[\"在此基础上做一些预案设定\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"在此基础上\",{\"1\":{\"652\":1}}],[\"在此期间\",{\"1\":{\"624\":1}}],[\"在此事务中\",{\"1\":{\"619\":1,\"634\":1}}],[\"在编程中提升设计能力也非常重要\",{\"1\":{\"615\":1}}],[\"在编写代码时\",{\"1\":{\"1446\":1}}],[\"在编写代码时要时刻考虑清楚\",{\"1\":{\"1446\":1}}],[\"在编写查询时\",{\"1\":{\"567\":1}}],[\"在编写核心业务逻辑代码时\",{\"1\":{\"228\":1}}],[\"在编写接口文档时\",{\"1\":{\"213\":1}}],[\"在结果集中包括\",{\"1\":{\"609\":1}}],[\"在存储过程的最后务必将所有的临时表显式删除\",{\"0\":{\"606\":1}}],[\"在存储和检索中有至关重要的作用\",{\"1\":{\"434\":1}}],[\"在新的文档被创建时\",{\"1\":{\"1033\":1,\"1237\":1}}],[\"在新版本中\",{\"1\":{\"711\":1}}],[\"在新版的elasticsearch中已经废弃\",{\"1\":{\"472\":1}}],[\"在新建临时表时\",{\"0\":{\"605\":1}}],[\"在使用反射时需要格外小心\",{\"1\":{\"1468\":1}}],[\"在使用kafka的push模式时\",{\"1\":{\"1448\":1}}],[\"在使用redis分布式锁时\",{\"1\":{\"1428\":1}}],[\"在使用注解时可以忽略该值\",{\"1\":{\"1402\":1}}],[\"在使用start\",{\"1\":{\"1143\":1,\"1326\":1}}],[\"在使用钱包余额时\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"在使用的时候子工程直接继承父工程的依赖版本号\",{\"1\":{\"778\":1}}],[\"在使用时要注意\",{\"1\":{\"604\":1}}],[\"在使用索引字段作为条件时\",{\"0\":{\"597\":1},\"1\":{\"1149\":1,\"1332\":1}}],[\"在数据更新时\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"在数据表中添加一个版本号字段或时间戳字段\",{\"1\":{\"632\":1}}],[\"在数据量及访问压力不是特别大的情况\",{\"1\":{\"583\":1}}],[\"在数学的世界里\",{\"1\":{\"303\":1,\"307\":1}}],[\"在系统设计阶段就应该根据业务耦合松紧来确定垂直分库\",{\"1\":{\"583\":1}}],[\"在执行完目标方法之后根据执行情况提交或者回滚事务\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"在执行时\",{\"1\":{\"863\":1}}],[\"在执行这些操作之前\",{\"1\":{\"574\":1}}],[\"在执行表连接操作时\",{\"1\":{\"565\":1}}],[\"在建表时就要添加必要的索引\",{\"1\":{\"572\":1}}],[\"在二叉树中\",{\"1\":{\"566\":1}}],[\"在最坏的情况下\",{\"1\":{\"566\":1}}],[\"在最短的时间学会使用elasticsearch7\",{\"1\":{\"447\":1}}],[\"在考虑建立索引时\",{\"1\":{\"565\":1}}],[\"在order对象中添加user属性\",{\"1\":{\"856\":1}}],[\"在order对象中添加user对象\",{\"1\":{\"856\":1}}],[\"在order\",{\"1\":{\"565\":1}}],[\"在等值查询下\",{\"1\":{\"562\":1}}],[\"在叶子节点存储的是表主键和索引列\",{\"1\":{\"558\":1}}],[\"在原\",{\"1\":{\"504\":1}}],[\"在创建消息是\",{\"1\":{\"1119\":1,\"1307\":1}}],[\"在创建多列索引时\",{\"1\":{\"573\":1}}],[\"在创建复合索引时\",{\"1\":{\"561\":1}}],[\"在创建一个索引的时候\",{\"1\":{\"484\":1}}],[\"在创建索引的时候可以直接指定分片的数量即可\",{\"1\":{\"474\":1}}],[\"在单词对应的倒排列表中不仅记录了文档编号\",{\"1\":{\"478\":1}}],[\"在如此处理结束后\",{\"1\":{\"478\":1}}],[\"在7\",{\"1\":{\"472\":1}}],[\"在索引中内进行逻辑细分\",{\"1\":{\"472\":1}}],[\"在看和分享是对我最大的鼓励\",{\"1\":{\"461\":1,\"478\":1}}],[\"在启动前\",{\"1\":{\"459\":1}}],[\"在研究底层代码\",{\"1\":{\"450\":1}}],[\"在大数据搜索中\",{\"1\":{\"450\":1}}],[\"在大数量\",{\"1\":{\"438\":1}}],[\"在大多数服务中要用到\",{\"1\":{\"123\":1}}],[\"在走访数值时将它们分配至编号\",{\"1\":{\"428\":1}}],[\"在某些时候\",{\"1\":{\"424\":1}}],[\"在某些情况下\",{\"0\":{\"199\":1,\"200\":1},\"1\":{\"564\":1,\"637\":1,\"644\":1}}],[\"在交换并重建堆的过程中\",{\"1\":{\"417\":1}}],[\"在取值范围不是很大的情况下\",{\"1\":{\"412\":1}}],[\"在对象实例化之后\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"在对哈希表进行扩展或者收缩操作时\",{\"1\":{\"688\":1,\"689\":1}}],[\"在对各个桶中元素进行排序时\",{\"1\":{\"403\":1}}],[\"在对准确率要求不高的业务场景使用广泛\",{\"1\":{\"383\":1}}],[\"在额外空间上对桶进行排序\",{\"1\":{\"401\":1}}],[\"在额外空间充足的情况下\",{\"1\":{\"401\":1}}],[\"在吴军博士的\",{\"1\":{\"392\":1}}],[\"在构造一个布隆过滤器时\",{\"1\":{\"392\":1}}],[\"在磁盘的一侧有磁头支架\",{\"1\":{\"327\":1}}],[\"在一定条件下\",{\"1\":{\"1123\":1,\"1311\":1}}],[\"在一个聊天室应用中\",{\"1\":{\"1478\":1}}],[\"在一个循环中\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"在一个线程内调用该线程锁对象的wait方法\",{\"1\":{\"1059\":1,\"1257\":1}}],[\"在一个生命周期中\",{\"1\":{\"775\":1}}],[\"在一个相对较小的字段内搜索效率显然要高些\",{\"0\":{\"602\":1}}],[\"在一次磁盘i\",{\"1\":{\"566\":1}}],[\"在一次\",{\"1\":{\"323\":1}}],[\"在一起\",{\"1\":{\"323\":1}}],[\"在一家大型安全公司实习\",{\"1\":{\"270\":1}}],[\"在树中的位置有关\",{\"1\":{\"323\":1}}],[\"在找到可能的解决方案后\",{\"1\":{\"306\":1}}],[\"在行首打印日志\",{\"1\":{\"228\":1}}],[\"在嵌套逻辑代码中打印重复日志\",{\"1\":{\"226\":1}}],[\"在服务器更新资源\",{\"1\":{\"206\":2}}],[\"在服务器新建一个资源\",{\"1\":{\"206\":1}}],[\"在条件简单的情况下\",{\"0\":{\"191\":1}}],[\"在zookeeper运行期间\",{\"1\":{\"183\":1}}],[\"在集群初始化阶段\",{\"1\":{\"183\":1}}],[\"在我们使用spring框架后\",{\"1\":{\"1170\":1,\"1347\":1}}],[\"在我们正常人的思维中\",{\"1\":{\"1080\":1,\"1275\":1}}],[\"在我们需要保证原子性操作时\",{\"1\":{\"666\":1}}],[\"在我们开发过程中\",{\"1\":{\"436\":1}}],[\"在我们日常的开发中\",{\"1\":{\"180\":1}}],[\"在我的mac上\",{\"1\":{\"162\":1}}],[\"在分布式系统中\",{\"1\":{\"170\":1,\"1035\":1,\"1239\":1}}],[\"在线创建\",{\"0\":{\"900\":1}}],[\"在线地址\",{\"1\":{\"731\":1}}],[\"在线视频有时候\",{\"1\":{\"151\":1}}],[\"在线markdown转微信格式网站\",{\"1\":{\"2\":1}}],[\"在操作前\",{\"1\":{\"144\":1}}],[\"在需要使用负载均衡的server中增加\",{\"1\":{\"123\":1}}],[\"在upstream中加入hash语句\",{\"1\":{\"123\":1}}],[\"在减少了在内存中的存取次数后\",{\"1\":{\"123\":1}}],[\"在学习的同学\",{\"1\":{\"118\":1}}],[\"在学习\",{\"0\":{\"118\":1}}],[\"在准备面试\",{\"0\":{\"117\":1}}],[\"在准备面试的朋友可以优先阅读面试专栏\",{\"1\":{\"53\":1}}],[\"在fs之前强制加个begin\",{\"1\":{\"111\":1}}],[\"在\",{\"1\":{\"93\":1,\"98\":1,\"263\":1,\"438\":1,\"482\":1,\"496\":2,\"498\":1,\"558\":1,\"589\":1,\"688\":1,\"698\":1,\"755\":2,\"825\":1,\"829\":1,\"870\":1,\"879\":1,\"881\":1,\"882\":1,\"884\":1,\"888\":1,\"890\":1,\"892\":2,\"893\":1,\"902\":1,\"1002\":1,\"1004\":1,\"1007\":1,\"1016\":2,\"1028\":1,\"1033\":1,\"1034\":1,\"1049\":1,\"1094\":1,\"1123\":1,\"1133\":1,\"1136\":1,\"1189\":1,\"1211\":1,\"1213\":1,\"1216\":1,\"1222\":2,\"1232\":1,\"1237\":1,\"1238\":1,\"1250\":1,\"1287\":1,\"1311\":1,\"1318\":1,\"1321\":1,\"1364\":1,\"1378\":1,\"1382\":2,\"1410\":5,\"1412\":2,\"1420\":1,\"1480\":6,\"1481\":1,\"1507\":2}}],[\"在这样的齿轮组中\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"在这种情况下\",{\"1\":{\"562\":1,\"1123\":1,\"1137\":1,\"1311\":1,\"1322\":1,\"1382\":1}}],[\"在这里整理这些容易忘记的重点知识及\",{\"1\":{\"983\":1,\"987\":1,\"1206\":1}}],[\"在这里定义好后\",{\"1\":{\"907\":1}}],[\"在这里我需要说明一下\",{\"1\":{\"755\":1}}],[\"在这里简单介绍下\",{\"1\":{\"508\":1}}],[\"在这里插入图片描述\",{\"1\":{\"85\":1,\"316\":1,\"317\":1,\"322\":1,\"447\":1,\"548\":1,\"551\":1,\"578\":2,\"649\":1,\"650\":1,\"660\":1,\"676\":1,\"677\":1,\"679\":1,\"682\":1,\"684\":1,\"687\":3,\"691\":2,\"693\":1,\"696\":1,\"711\":1,\"747\":1,\"752\":1,\"753\":1,\"918\":1,\"923\":1,\"1049\":2,\"1055\":1,\"1232\":1,\"1233\":1,\"1250\":2,\"1253\":1}}],[\"在这个例子中\",{\"1\":{\"1468\":4,\"1474\":1}}],[\"在这个流程中\",{\"1\":{\"1414\":1}}],[\"在这个配置类中通过条件注解来决定一个配置是否生效\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"在这个阶段中\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"在这个示例中\",{\"1\":{\"622\":1,\"634\":1,\"1382\":1}}],[\"在这个问题中\",{\"1\":{\"305\":1}}],[\"在这个充满变数的时代\",{\"1\":{\"264\":1}}],[\"在这个信息爆炸的时代\",{\"1\":{\"56\":1}}],[\"在追求专业精进的道路上\",{\"1\":{\"56\":1}}],[\"在知识的海洋中\",{\"1\":{\"56\":1}}],[\"在页面禁用功能与布局\",{\"1\":{\"18\":1}}],[\"你需要在你的\",{\"1\":{\"1522\":1}}],[\"你需要创建并编写\",{\"1\":{\"24\":1}}],[\"你帮我安排一下\",{\"1\":{\"1502\":1}}],[\"你已进入候补名单\",{\"1\":{\"1481\":1}}],[\"你已经掌握了jvm调优的基础知识和日常工具\",{\"1\":{\"1400\":1}}],[\"你已经运用了自己网站\",{\"1\":{\"975\":1}}],[\"你给我看这\",{\"1\":{\"1480\":1,\"1481\":1}}],[\"你给出的这些方法都很实用\",{\"1\":{\"1440\":1}}],[\"你准备好聊一聊elasticsearch索引文档的底层过程了吗\",{\"1\":{\"1470\":1}}],[\"你不仅解释得很清楚\",{\"1\":{\"1462\":1}}],[\"你不知道是苹果还是香蕉\",{\"1\":{\"1424\":1}}],[\"你刚刚创建了一个名为\",{\"1\":{\"1456\":1}}],[\"你用代码很好地解释了kafka的工作原理\",{\"1\":{\"1450\":1}}],[\"你用过\",{\"1\":{\"1390\":1}}],[\"你真的写了一段kafka\",{\"1\":{\"1444\":1}}],[\"你真是个elasticsearch小能手\",{\"1\":{\"1456\":1}}],[\"你真是个天才\",{\"1\":{\"1442\":1}}],[\"你真是一个有趣的候选人\",{\"1\":{\"1384\":1}}],[\"你真是一个线程池的专家啊\",{\"1\":{\"1384\":1}}],[\"你还有其他的建议吗\",{\"1\":{\"1430\":1}}],[\"你都理解得非常透彻\",{\"1\":{\"1422\":1}}],[\"你解释得很详细\",{\"1\":{\"1422\":1}}],[\"你解释的很透彻\",{\"1\":{\"1414\":1}}],[\"你通过详细的说明和示意图\",{\"1\":{\"1414\":1}}],[\"你觉得kafka和传统消息系统相比\",{\"1\":{\"1450\":1}}],[\"你觉得还可以在哪些方面加深对\",{\"1\":{\"1410\":1}}],[\"你觉查询起来还会方便吗\",{\"1\":{\"563\":1}}],[\"你之前提到也有些不太理解的地方\",{\"1\":{\"1406\":1}}],[\"你理解得比较透彻\",{\"1\":{\"1406\":1}}],[\"你先等一下\",{\"1\":{\"1396\":1}}],[\"你这种围绕一个场景作解释的方式很形象\",{\"1\":{\"1392\":1}}],[\"你这个朋友我知道是谁了\",{\"1\":{\"115\":1}}],[\"你会有什么疑惑或者过程\",{\"1\":{\"1392\":1}}],[\"你会发现一切如此简单\",{\"1\":{\"138\":1}}],[\"你了解什么\",{\"1\":{\"1476\":1}}],[\"你了解java的类加载过程吗\",{\"1\":{\"1392\":1}}],[\"你了解pomxml吗\",{\"0\":{\"907\":1}}],[\"你说的很详细\",{\"1\":{\"1476\":1}}],[\"你说的很具体\",{\"1\":{\"1408\":1}}],[\"你说的很全面和深入\",{\"1\":{\"1380\":1}}],[\"你说的真是五花八门\",{\"1\":{\"1408\":1}}],[\"你说得很好\",{\"1\":{\"1384\":1}}],[\"你说得不错\",{\"1\":{\"1384\":1}}],[\"你好呀\",{\"1\":{\"1506\":1}}],[\"你好\",{\"1\":{\"1384\":2,\"1386\":1,\"1388\":1,\"1430\":1,\"1468\":1,\"1478\":1,\"1480\":1}}],[\"你回答的很好\",{\"1\":{\"1382\":1}}],[\"你认为kafka有哪些缺点呢\",{\"1\":{\"1436\":1}}],[\"你认为\",{\"1\":{\"1382\":1}}],[\"你能够给我讲讲\",{\"1\":{\"1480\":2}}],[\"你能够准确定位自己尚未完全掌握的知识点\",{\"1\":{\"1404\":1}}],[\"你能告诉我如何避免\",{\"1\":{\"1480\":1}}],[\"你能告诉我\",{\"1\":{\"1480\":4}}],[\"你能举个例子来说明\",{\"1\":{\"1480\":1}}],[\"你能详细解释一下选主的过程吗\",{\"1\":{\"1466\":1}}],[\"你能给我讲讲它的作用吗\",{\"1\":{\"1480\":1}}],[\"你能给我展示一下选主过程的源码示例吗\",{\"1\":{\"1466\":1}}],[\"你能给我举个例子来说明kafka的工作原理吗\",{\"1\":{\"1450\":1}}],[\"你能给我举个例子来说明kafka的性能吗\",{\"1\":{\"1438\":1}}],[\"你能给我一些指导吗\",{\"1\":{\"1432\":1}}],[\"你能不能不那么书呆子\",{\"1\":{\"1424\":1}}],[\"你能否简单介绍一下jvm内存模型的优化策略\",{\"1\":{\"1388\":1}}],[\"你能否举一个例子来说明\",{\"1\":{\"1382\":1}}],[\"你能具体说明一下\",{\"1\":{\"1382\":1}}],[\"你能解释一下代码中的关键部分吗\",{\"1\":{\"1448\":1}}],[\"你能解释一下\",{\"1\":{\"1382\":1,\"1480\":1}}],[\"你也提出了很好的问题\",{\"1\":{\"1380\":1}}],[\"你也可以创建并引入你自己的组件\",{\"1\":{\"44\":1}}],[\"你继续加深对各种设计模式的理解和运用\",{\"1\":{\"1380\":1}}],[\"你对锁机制的理解已经深入到能够在实践中运用并解决遇到的问题的地步\",{\"1\":{\"1476\":1}}],[\"你对动态代理的了解很深入\",{\"1\":{\"1474\":1}}],[\"你对反射和动态代理的了解很深入\",{\"1\":{\"1474\":1}}],[\"你对elasticsearch集群架构\",{\"1\":{\"1462\":1}}],[\"你对elasticsearch的架构设计有很好的理解\",{\"1\":{\"1460\":1}}],[\"你对elasticsearch的理解非常透彻\",{\"1\":{\"1456\":1}}],[\"你对elasticsearch和lucene的理解非常透彻\",{\"1\":{\"1458\":1}}],[\"你对elasticsearch和lucene的解释非常清晰\",{\"1\":{\"1458\":1}}],[\"你对elasticsearch有了解吗\",{\"1\":{\"1456\":1}}],[\"你对kafka和传统消息系统的区别有很清晰的认识\",{\"1\":{\"1450\":1}}],[\"你对kafka的push和pull模式的理解非常到位\",{\"1\":{\"1448\":1}}],[\"你对kafka的push和pull模式有很好的理解\",{\"1\":{\"1448\":1}}],[\"你对kafka的理解非常出色\",{\"1\":{\"1450\":1}}],[\"你对kafka的理解真是深入透彻\",{\"1\":{\"1442\":1}}],[\"你对kafka的理解很深入\",{\"1\":{\"1434\":1}}],[\"你对kafka的理解很透彻\",{\"1\":{\"1432\":1}}],[\"你对kafka的性能有了很好的理解\",{\"1\":{\"1438\":1}}],[\"你对kafka的性能优化有什么建议吗\",{\"1\":{\"1438\":1}}],[\"你对kafka的了解非常全面\",{\"1\":{\"1432\":1}}],[\"你对kafka有了解吗\",{\"1\":{\"1432\":1,\"1434\":1,\"1438\":1}}],[\"你对此有什么了解吗\",{\"1\":{\"1430\":1}}],[\"你对分布式锁的理解非常全面\",{\"1\":{\"1428\":1}}],[\"你对redis分布式锁的了解令人印象深刻\",{\"1\":{\"1428\":1}}],[\"你对redis分片集群的理解非常全面\",{\"1\":{\"1426\":1}}],[\"你对redis分片集群的理解非常透彻\",{\"1\":{\"1426\":1}}],[\"你对这个概念了解多少呢\",{\"1\":{\"1464\":1}}],[\"你对这个话题有了解吗\",{\"1\":{\"1466\":1}}],[\"你对这个话题有什么了解吗\",{\"1\":{\"1460\":1}}],[\"你对这个话题了解多少\",{\"1\":{\"1426\":1}}],[\"你对这些有了解吗\",{\"1\":{\"1462\":1}}],[\"你对这些知识已经有一定理解\",{\"1\":{\"1404\":1}}],[\"你对这两个技术有了解吗\",{\"1\":{\"1458\":1}}],[\"你对它的理解很深入\",{\"1\":{\"1416\":1}}],[\"你对它的理解已经相当深刻了\",{\"1\":{\"1380\":1}}],[\"你对map及其实现类一定有比较深入的理解和认知\",{\"1\":{\"1406\":1}}],[\"你对map有比较扎实的认知基础\",{\"1\":{\"1406\":1}}],[\"你对list还有哪些不太理解的地方\",{\"1\":{\"1404\":1}}],[\"你对g1的理解已经相当深入全面\",{\"1\":{\"1398\":1}}],[\"你对cms收集器的理解已经相当透彻\",{\"1\":{\"1396\":1}}],[\"你对类的生命周期及其与类初始化的关系理解很透彻\",{\"1\":{\"1392\":1}}],[\"你对java类加载机制有很深入的理解\",{\"1\":{\"1392\":1}}],[\"你对jvm内存模型的了解非常深入\",{\"1\":{\"1388\":2}}],[\"你对\",{\"1\":{\"1382\":1,\"1386\":1,\"1408\":1,\"1410\":1,\"1414\":1,\"1416\":1,\"1468\":2,\"1480\":1}}],[\"你对自己的提高有清醒的认识\",{\"1\":{\"1380\":1}}],[\"你们redis使用哪种部署方式\",{\"0\":{\"1162\":1,\"1342\":1}}],[\"你们产品自己去协调去\",{\"1\":{\"170\":1}}],[\"你在高并发系统设计方面有很强的理解力和丰富经验\",{\"1\":{\"1408\":1}}],[\"你在list及相关接口的理解上一定会有大的提高\",{\"1\":{\"1404\":1}}],[\"你在哪些场景使用redis\",{\"0\":{\"1156\":1,\"1336\":1}}],[\"你在代码使用了那些设计模式\",{\"1\":{\"85\":1}}],[\"你访问的资源需要登录\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"你正在访问sourcec资源\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"你正在访问sourceb资源\",{\"1\":{\"1049\":2,\"1250\":2}}],[\"你正在访问sourcea资源\",{\"1\":{\"1049\":2,\"1250\":2}}],[\"你是怎么使用的\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"你是怎么怎么使用的\",{\"1\":{\"85\":1}}],[\"你一定经常能见到类似这种写法\",{\"1\":{\"1047\":1,\"1248\":1}}],[\"你一定不陌生\",{\"1\":{\"622\":1}}],[\"你快点处理一下\",{\"1\":{\"979\":1}}],[\"你怎么处理的\",{\"0\":{\"644\":1}}],[\"你遇到过死锁吗\",{\"0\":{\"644\":1}}],[\"你应如何优化这个字段的索引以提高排序操作的性能\",{\"0\":{\"572\":1}}],[\"你应该在页面\",{\"1\":{\"8\":1}}],[\"你有一个应用程序需要处理大量的日志数据\",{\"1\":{\"1438\":1}}],[\"你有一个箱子\",{\"1\":{\"1424\":1}}],[\"你有哪些学习计划\",{\"1\":{\"1400\":1}}],[\"你有什么建议来优化redis分布式锁的性能吗\",{\"1\":{\"1428\":1}}],[\"你有什么问题想要提问吗\",{\"1\":{\"1380\":1}}],[\"你有什么想看的可以催更\",{\"1\":{\"167\":1}}],[\"你有实战经验\",{\"1\":{\"1156\":1,\"1336\":1}}],[\"你有没有使用过\",{\"1\":{\"1480\":1}}],[\"你有没有想过这样一些问题\",{\"1\":{\"935\":1}}],[\"你有没有想过这样一件事\",{\"1\":{\"934\":1,\"935\":1}}],[\"你有没有这样疑问\",{\"1\":{\"400\":1}}],[\"你知道分片和副本是什么吗\",{\"1\":{\"1470\":1}}],[\"你知道搜索引擎是怎么找到相关结果的吗\",{\"1\":{\"1464\":1}}],[\"你知道kafka的ack机制是用来做什么的吗\",{\"1\":{\"1452\":1}}],[\"你知道kafka消息系统是如何工作的吗\",{\"1\":{\"1448\":1}}],[\"你知道kafka有哪些优点吗\",{\"1\":{\"1436\":1}}],[\"你知道吗\",{\"1\":{\"1434\":3,\"1440\":1}}],[\"你知道redis是如何实现分布式锁的吗\",{\"1\":{\"1428\":1}}],[\"你知道\",{\"1\":{\"294\":2,\"984\":1}}],[\"你知道怎么联系我的\",{\"1\":{\"263\":1}}],[\"你可能需要安装\",{\"1\":{\"962\":1}}],[\"你可能会有这几个顾虑\",{\"1\":{\"264\":1}}],[\"你可以这样使用\",{\"1\":{\"1480\":2}}],[\"你可以将\",{\"1\":{\"1525\":1}}],[\"你可以将这些日志数据发送到一个主题\",{\"1\":{\"1438\":1}}],[\"你可以将图片和\",{\"1\":{\"43\":1}}],[\"你可以找到各种有用的注释和解释\",{\"1\":{\"1432\":1}}],[\"你可以把消息当作咖啡订单\",{\"1\":{\"1432\":1}}],[\"你可以根据你的需求选择适合的方式\",{\"1\":{\"1430\":1}}],[\"你可以通过用\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"你可以通过设置页面的\",{\"1\":{\"18\":1}}],[\"你可以添加一个元素到列表的头部\",{\"1\":{\"667\":1}}],[\"你可以直接翻到对应的页码\",{\"1\":{\"1464\":1}}],[\"你可以直接发送到我的邮箱\",{\"1\":{\"249\":1}}],[\"你可以直接看最后一个案例\",{\"1\":{\"87\":1}}],[\"你可以访问\",{\"1\":{\"247\":1}}],[\"你可以使用kafka来构建一个实时的数据管道\",{\"1\":{\"1432\":1}}],[\"你可以使用一个引入来使bean实现\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"你可以使用相对于类路径的资源引用\",{\"1\":{\"835\":1}}],[\"你可以使用\",{\"1\":{\"98\":1,\"1480\":1}}],[\"你可以使用它轻松生成文档或博客站点\",{\"1\":{\"24\":1}}],[\"你可以自由在这里书写你的\",{\"1\":{\"43\":1}}],[\"你可以在官方的github仓库上找到\",{\"1\":{\"1432\":1}}],[\"你可以在\",{\"1\":{\"41\":1,\"42\":1,\"1525\":1}}],[\"你可以在主题选项和页面的\",{\"1\":{\"21\":1}}],[\"你起码要懂\",{\"1\":{\"263\":1}}],[\"你就有很大的优势领先于你身边的人\",{\"1\":{\"263\":1}}],[\"你就可以在\",{\"1\":{\"126\":1}}],[\"你将获得以下特权\",{\"1\":{\"249\":1}}],[\"你的经验很丰富\",{\"1\":{\"1480\":1}}],[\"你的问题很棒\",{\"1\":{\"1466\":1}}],[\"你的源码示例非常清晰\",{\"1\":{\"1466\":1}}],[\"你的比喻真是越来越有意思了\",{\"1\":{\"1434\":1}}],[\"你的解释让我受益匪浅\",{\"1\":{\"1424\":1}}],[\"你的解释简直让人眼前一亮\",{\"1\":{\"1424\":1}}],[\"你的解释很到位\",{\"1\":{\"1408\":1}}],[\"你的java基础会更加牢固\",{\"1\":{\"1406\":1}}],[\"你的理解已经趋于准确和清晰\",{\"1\":{\"1398\":1}}],[\"你的理解和应用已经相当不错了\",{\"1\":{\"1380\":1}}],[\"你的谢意我心领了\",{\"1\":{\"1392\":1}}],[\"你的回答非常详细\",{\"1\":{\"1442\":1}}],[\"你的回答非常出色\",{\"1\":{\"1438\":1}}],[\"你的回答很全面\",{\"1\":{\"1481\":1}}],[\"你的回答很全面和到位\",{\"1\":{\"1392\":1}}],[\"你的回答很详细\",{\"1\":{\"1480\":2}}],[\"你的回答很清晰\",{\"1\":{\"1480\":1}}],[\"你的回答很不错\",{\"1\":{\"1480\":1}}],[\"你的回答很棒\",{\"1\":{\"1434\":1}}],[\"你的回答已经很全面和深入\",{\"1\":{\"1410\":1}}],[\"你的回答真是太棒了\",{\"1\":{\"1384\":1}}],[\"你的态度很好\",{\"1\":{\"1380\":1}}],[\"你的项目已经可以打包\",{\"1\":{\"765\":1}}],[\"你的\",{\"1\":{\"98\":1}}],[\"你玩了吗\",{\"1\":{\"72\":1}}],[\"p3\",{\"1\":{\"1450\":2}}],[\"p2\",{\"1\":{\"1450\":2}}],[\"p2和p3\",{\"1\":{\"1450\":1}}],[\"p1\",{\"1\":{\"1450\":3}}],[\"pgving\",{\"1\":{\"987\":1}}],[\"p哥不想开新分支\",{\"1\":{\"979\":1}}],[\"p哥\",{\"1\":{\"979\":1}}],[\"pypi\",{\"1\":{\"959\":2}}],[\"pythonlibs\",{\"1\":{\"961\":1}}],[\"python3\",{\"1\":{\"959\":1,\"960\":2}}],[\"python安装cv2\",{\"0\":{\"957\":1}}],[\"python\",{\"0\":{\"956\":1,\"958\":1},\"1\":{\"263\":1,\"277\":1,\"652\":1,\"959\":2,\"960\":1,\"961\":1},\"2\":{\"963\":1,\"964\":1}}],[\"pd24\",{\"1\":{\"895\":1}}],[\"pdf|xls|mp3|wma\",{\"1\":{\"123\":1}}],[\"pdf\",{\"1\":{\"12\":1}}],[\"pc\",{\"1\":{\"870\":1}}],[\"phase\",{\"1\":{\"775\":1,\"1396\":1}}],[\"php$\",{\"1\":{\"123\":2}}],[\"php\",{\"1\":{\"72\":2,\"123\":4,\"652\":1}}],[\"pfmerge\",{\"1\":{\"722\":2}}],[\"pfcount\",{\"1\":{\"722\":2}}],[\"pfadd\",{\"1\":{\"722\":2}}],[\"ptr\",{\"1\":{\"684\":3,\"698\":2}}],[\"px\",{\"1\":{\"503\":2,\"504\":2}}],[\"pb\",{\"1\":{\"453\":1}}],[\"p是误判率\",{\"1\":{\"393\":1}}],[\"pessimism\",{\"1\":{\"1150\":1,\"1333\":1}}],[\"perpetualcache\",{\"1\":{\"1135\":2,\"1320\":2}}],[\"person\",{\"1\":{\"1133\":2,\"1176\":3,\"1318\":2,\"1353\":3}}],[\"persistent\",{\"1\":{\"915\":1,\"1201\":1,\"1374\":1}}],[\"persistenceexception\",{\"1\":{\"842\":1}}],[\"persistence\",{\"1\":{\"664\":1}}],[\"persist\",{\"1\":{\"666\":1}}],[\"periods\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"periodically\",{\"1\":{\"950\":1}}],[\"perl\",{\"1\":{\"652\":1}}],[\"performance\",{\"1\":{\"392\":1}}],[\"performaction\",{\"1\":{\"192\":2,\"194\":2,\"196\":1}}],[\"pem\",{\"1\":{\"123\":1}}],[\"pk规则如下\",{\"1\":{\"183\":1}}],[\"png\",{\"1\":{\"156\":4,\"882\":1}}],[\"p\",{\"1\":{\"127\":1,\"296\":2,\"342\":4,\"393\":2,\"660\":1,\"691\":1,\"696\":1,\"918\":1,\"979\":3,\"1025\":1,\"1035\":2,\"1045\":2,\"1062\":1,\"1229\":1,\"1239\":1,\"1246\":2,\"1260\":1,\"1380\":1,\"1382\":16}}],[\"pip3\",{\"1\":{\"959\":2}}],[\"pip\",{\"1\":{\"959\":4,\"961\":2}}],[\"pivot\",{\"1\":{\"667\":1}}],[\"pivotal\",{\"1\":{\"454\":1}}],[\"pinyin\",{\"1\":{\"464\":1,\"466\":3}}],[\"ping\",{\"1\":{\"107\":1,\"1162\":1,\"1342\":1}}],[\"pix\",{\"1\":{\"161\":1}}],[\"pick命令的参数\",{\"1\":{\"980\":1}}],[\"pick命令的作用\",{\"1\":{\"980\":1}}],[\"pick\",{\"0\":{\"980\":1},\"1\":{\"980\":13,\"982\":1}}],[\"pic\",{\"1\":{\"158\":2}}],[\"pid\",{\"1\":{\"123\":2}}],[\"poll\",{\"1\":{\"1440\":4,\"1442\":1,\"1448\":2}}],[\"pong其中节点没有回复且超过了一定时间\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"potentially\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"pool\",{\"1\":{\"853\":1}}],[\"pooleddatasource\",{\"1\":{\"852\":3,\"853\":2}}],[\"pooled\",{\"1\":{\"806\":2,\"808\":1,\"829\":1,\"852\":3,\"853\":2}}],[\"pojo中的属性名字是username\",{\"1\":{\"822\":1}}],[\"pojo\",{\"1\":{\"810\":1,\"816\":1,\"817\":1,\"818\":5,\"820\":1,\"822\":1,\"826\":7,\"831\":3,\"842\":7,\"843\":2,\"847\":1,\"848\":1,\"849\":2,\"850\":1,\"856\":3,\"857\":3,\"858\":4,\"1136\":2,\"1176\":2,\"1321\":2,\"1353\":2}}],[\"pom\",{\"0\":{\"805\":1},\"1\":{\"711\":2,\"761\":2,\"768\":1,\"778\":5,\"819\":1,\"875\":3,\"902\":1,\"907\":8,\"948\":1,\"1189\":1,\"1364\":1,\"1522\":2,\"1525\":1}}],[\"point进行拦截\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"pointcut切点\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"pointcut表示这是一个切点\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"pointcut\",{\"1\":{\"752\":5,\"1049\":1,\"1174\":1,\"1250\":1,\"1351\":1,\"1402\":1}}],[\"point\",{\"1\":{\"506\":1,\"1174\":3,\"1351\":3}}],[\"popdata\",{\"1\":{\"341\":2}}],[\"pop\",{\"1\":{\"335\":1,\"341\":3,\"342\":3,\"652\":1,\"979\":6}}],[\"power\",{\"1\":{\"306\":10}}],[\"positions\",{\"1\":{\"486\":2,\"493\":3}}],[\"position\",{\"1\":{\"482\":1,\"486\":2,\"493\":1}}],[\"positive\",{\"1\":{\"199\":2}}],[\"postprocessafterinstantiation\",{\"1\":{\"1412\":1}}],[\"postconstruct\",{\"1\":{\"1410\":2}}],[\"postconstruct等实现依赖注入和初始化方法调用\",{\"1\":{\"1402\":1}}],[\"posthandle\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"postgresql\",{\"1\":{\"947\":1}}],[\"postmapper\",{\"1\":{\"835\":2}}],[\"posting\",{\"1\":{\"477\":1,\"1026\":1,\"1230\":1}}],[\"postinglist\",{\"1\":{\"477\":1}}],[\"posts\",{\"1\":{\"297\":1,\"727\":1}}],[\"post过来的数据记录到文件中用来做debug\",{\"1\":{\"123\":1}}],[\"post\",{\"1\":{\"121\":1,\"206\":3,\"726\":1,\"775\":2,\"776\":1,\"777\":1,\"894\":1,\"984\":1,\"990\":1,\"1410\":1,\"1412\":1,\"1456\":1}}],[\"portlet\",{\"1\":{\"1408\":1}}],[\"port\",{\"1\":{\"123\":1,\"174\":1,\"459\":2,\"711\":2,\"927\":1,\"948\":1,\"1478\":4,\"1507\":1}}],[\"port=9215\",{\"1\":{\"111\":1}}],[\"portfolio\",{\"1\":{\"8\":1}}],[\"pull\",{\"1\":{\"982\":2,\"1019\":2,\"1225\":2,\"1448\":1}}],[\"publish\",{\"1\":{\"656\":1}}],[\"public\",{\"1\":{\"43\":1,\"88\":3,\"89\":2,\"92\":2,\"93\":2,\"190\":4,\"191\":4,\"192\":4,\"193\":6,\"194\":4,\"195\":4,\"196\":8,\"197\":10,\"198\":4,\"199\":4,\"200\":4,\"220\":1,\"221\":1,\"223\":2,\"224\":2,\"225\":1,\"226\":1,\"228\":1,\"229\":2,\"337\":1,\"338\":17,\"339\":16,\"341\":12,\"342\":12,\"390\":2,\"393\":2,\"405\":4,\"406\":1,\"413\":1,\"417\":3,\"430\":3,\"441\":5,\"540\":6,\"541\":6,\"711\":3,\"751\":1,\"752\":7,\"755\":6,\"800\":2,\"806\":1,\"807\":1,\"808\":1,\"810\":21,\"816\":6,\"817\":8,\"818\":1,\"820\":9,\"826\":19,\"833\":4,\"842\":4,\"845\":1,\"847\":1,\"848\":1,\"849\":3,\"850\":1,\"852\":3,\"853\":2,\"855\":1,\"856\":5,\"857\":3,\"858\":3,\"880\":1,\"888\":2,\"889\":2,\"890\":2,\"891\":8,\"892\":17,\"893\":11,\"894\":2,\"895\":1,\"912\":1,\"939\":3,\"1001\":6,\"1042\":3,\"1043\":7,\"1048\":1,\"1049\":19,\"1061\":11,\"1062\":5,\"1064\":8,\"1210\":6,\"1243\":3,\"1244\":7,\"1249\":1,\"1250\":19,\"1259\":11,\"1260\":5,\"1262\":8,\"1382\":3,\"1386\":2,\"1390\":7,\"1392\":13,\"1394\":1,\"1402\":7,\"1404\":4,\"1408\":1,\"1414\":6,\"1416\":3,\"1424\":15,\"1442\":2,\"1444\":3,\"1446\":4,\"1448\":2,\"1462\":4,\"1466\":2,\"1474\":8,\"1476\":1,\"1478\":2,\"1480\":6,\"1481\":1,\"1494\":7,\"1514\":3,\"1515\":2,\"1524\":1}}],[\"pub\",{\"1\":{\"461\":1,\"478\":1}}],[\"put方法将键值对添加到表中\",{\"1\":{\"1406\":1}}],[\"put\",{\"1\":{\"132\":1,\"206\":1,\"406\":2,\"484\":1,\"485\":1,\"487\":3,\"489\":2,\"490\":1,\"492\":2,\"510\":3,\"1001\":7,\"1073\":1,\"1173\":1,\"1210\":7,\"1268\":1,\"1350\":1,\"1380\":2,\"1394\":1,\"1440\":2,\"1442\":4,\"1446\":1,\"1448\":7,\"1456\":1}}],[\"push\",{\"1\":{\"111\":1,\"335\":1,\"341\":5,\"342\":5,\"976\":1,\"978\":1,\"980\":1,\"1448\":1}}],[\"plus这么好用\",{\"1\":{\"1505\":1}}],[\"plus\",{\"0\":{\"1505\":1},\"1\":{\"1505\":1,\"1506\":1,\"1507\":5},\"2\":{\"1509\":1}}],[\"plugin>\",{\"1\":{\"833\":1,\"875\":1,\"907\":2,\"1416\":1,\"1522\":1,\"1525\":1}}],[\"plugin<\",{\"1\":{\"772\":1,\"773\":1,\"875\":1,\"907\":2,\"1522\":1,\"1525\":1}}],[\"plugin为准\",{\"1\":{\"772\":1}}],[\"plugins<\",{\"1\":{\"875\":1,\"907\":1}}],[\"plugins>\",{\"1\":{\"833\":1,\"875\":1,\"907\":1,\"1416\":1,\"1522\":1}}],[\"plugins\",{\"0\":{\"833\":1},\"1\":{\"465\":3,\"466\":3,\"777\":1,\"947\":1}}],[\"plugin\",{\"1\":{\"29\":1,\"833\":2,\"907\":2}}],[\"platfromtransactionmanager\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"placeholder\",{\"1\":{\"878\":1}}],[\"plain\",{\"1\":{\"211\":1}}],[\"play\",{\"1\":{\"107\":1}}],[\"pswd\",{\"1\":{\"1133\":2,\"1318\":2}}],[\"ps\",{\"1\":{\"107\":1,\"111\":1,\"155\":1,\"1101\":1,\"1292\":1}}],[\"pwd\",{\"1\":{\"107\":1,\"108\":2,\"176\":1,\"665\":1,\"711\":2}}],[\"pwd=gbu6\",{\"1\":{\"56\":1}}],[\"pragma\",{\"1\":{\"540\":1,\"541\":1}}],[\"prehandle\",{\"1\":{\"1049\":2,\"1250\":2}}],[\"preparing\",{\"1\":{\"788\":1,\"852\":6,\"853\":1}}],[\"preparestatement\",{\"1\":{\"800\":7,\"1133\":2,\"1318\":2}}],[\"preparedstatement\",{\"1\":{\"800\":3,\"832\":1,\"1133\":1,\"1136\":1,\"1318\":1,\"1321\":1}}],[\"prepare\",{\"1\":{\"776\":1,\"833\":1}}],[\"pre\",{\"1\":{\"775\":3,\"776\":1,\"777\":1}}],[\"preemption\",{\"1\":{\"625\":1}}],[\"pretty\",{\"1\":{\"489\":3}}],[\"previously\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"prev\",{\"1\":{\"339\":15,\"684\":1}}],[\"prefixoverrides\",{\"1\":{\"787\":2,\"850\":1}}],[\"prefix\",{\"1\":{\"787\":2,\"850\":1,\"882\":1}}],[\"prefix=\",{\"1\":{\"142\":1,\"787\":2,\"790\":3,\"818\":1,\"826\":1,\"849\":1}}],[\"preference\",{\"1\":{\"1035\":1,\"1239\":1}}],[\"prefer\",{\"1\":{\"123\":1}}],[\"preloadsingleton\",{\"1\":{\"88\":5}}],[\"problemas\",{\"1\":{\"1408\":1}}],[\"problems\",{\"1\":{\"589\":1}}],[\"produce\",{\"1\":{\"1446\":1}}],[\"producer<string\",{\"1\":{\"1448\":1}}],[\"producerconfig\",{\"1\":{\"1448\":3}}],[\"producerconsumer\",{\"1\":{\"1446\":1}}],[\"producerprops\",{\"1\":{\"1448\":5}}],[\"producer负责将消息发送到kafka集群\",{\"1\":{\"1444\":1}}],[\"producerrecord<>\",{\"1\":{\"1440\":3,\"1448\":1}}],[\"producerrecord\",{\"1\":{\"1440\":1}}],[\"producer\",{\"1\":{\"1116\":3,\"1304\":3,\"1440\":1,\"1444\":1,\"1448\":4,\"1450\":6}}],[\"produces\",{\"1\":{\"894\":1}}],[\"product++\",{\"1\":{\"1446\":1}}],[\"products\",{\"1\":{\"962\":1}}],[\"product\",{\"1\":{\"238\":1,\"306\":7,\"1446\":2}}],[\"proposer\",{\"1\":{\"1200\":1,\"1203\":1,\"1373\":1,\"1376\":1}}],[\"proposal\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"propagation\",{\"1\":{\"1177\":7,\"1354\":7}}],[\"propagating\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"property\",{\"1\":{\"856\":1,\"857\":1,\"860\":1,\"878\":1,\"1042\":1,\"1243\":1}}],[\"property=\",{\"1\":{\"856\":3,\"857\":5,\"858\":7,\"860\":2}}],[\"properties类\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"properties配置的属性都是可外部配置且可动态替换的\",{\"1\":{\"829\":1}}],[\"properties属性读取外部资源\",{\"0\":{\"829\":1}}],[\"properties>\",{\"1\":{\"778\":1,\"806\":1,\"829\":1,\"875\":1,\"907\":1}}],[\"properties\",{\"0\":{\"879\":1},\"1\":{\"485\":1,\"487\":1,\"489\":2,\"490\":1,\"509\":1,\"510\":1,\"829\":7,\"833\":2,\"878\":1,\"879\":1,\"907\":1,\"1183\":2,\"1358\":2,\"1442\":3,\"1448\":5,\"1456\":1}}],[\"props\",{\"1\":{\"829\":2,\"1440\":2,\"1442\":6}}],[\"projectlombok<\",{\"1\":{\"875\":1}}],[\"projectlombok\",{\"1\":{\"875\":1}}],[\"project>\",{\"1\":{\"778\":2,\"875\":1,\"907\":1}}],[\"project\",{\"1\":{\"761\":1,\"778\":1,\"779\":1,\"875\":1,\"900\":2,\"907\":2,\"1494\":1,\"1502\":1,\"1507\":1,\"1515\":1,\"1525\":1}}],[\"proceed\",{\"1\":{\"752\":1,\"833\":1,\"1049\":1,\"1250\":1,\"1408\":1,\"1416\":1}}],[\"proceedingjoinpoint\",{\"1\":{\"752\":3,\"1049\":1,\"1250\":1}}],[\"processors\",{\"1\":{\"1412\":1}}],[\"processid=2501\",{\"1\":{\"929\":1}}],[\"processing\",{\"1\":{\"199\":2}}],[\"processdiagram\",{\"1\":{\"929\":1}}],[\"processdef\",{\"1\":{\"928\":1}}],[\"processed\",{\"1\":{\"929\":1}}],[\"processes\",{\"1\":{\"123\":1,\"928\":1}}],[\"process>\",{\"1\":{\"928\":1}}],[\"processlist\",{\"1\":{\"644\":1}}],[\"process\",{\"1\":{\"123\":1,\"199\":2,\"776\":6}}],[\"progress\",{\"1\":{\"687\":1}}],[\"programming\",{\"1\":{\"1408\":1}}],[\"program\",{\"1\":{\"169\":1}}],[\"prot=8080\",{\"1\":{\"913\":1}}],[\"prototype\",{\"1\":{\"1172\":1,\"1349\":1,\"1410\":3}}],[\"protostuff\",{\"1\":{\"1161\":1,\"1341\":1}}],[\"protostuff<\",{\"1\":{\"875\":2}}],[\"protocols\",{\"1\":{\"161\":1}}],[\"protected\",{\"1\":{\"441\":2,\"736\":1,\"1001\":1,\"1058\":1,\"1173\":1,\"1210\":1,\"1256\":1,\"1350\":1,\"1390\":3,\"1408\":1,\"1410\":2}}],[\"prompt\",{\"1\":{\"294\":1}}],[\"prometheus安装\",{\"0\":{\"950\":1}}],[\"prometheus安装包\",{\"1\":{\"949\":1}}],[\"prometheus<\",{\"1\":{\"948\":1}}],[\"prometheus\",{\"0\":{\"127\":1,\"946\":1},\"1\":{\"126\":12,\"946\":1,\"947\":1,\"948\":4,\"950\":6,\"952\":1},\"2\":{\"920\":1,\"921\":1,\"953\":1,\"954\":1}}],[\"prometheus+grafana\",{\"0\":{\"125\":1}}],[\"provide\",{\"1\":{\"1408\":1}}],[\"provided\",{\"1\":{\"769\":1}}],[\"providers\",{\"1\":{\"176\":1}}],[\"provider\",{\"1\":{\"176\":2}}],[\"provides\",{\"1\":{\"129\":1}}],[\"prone\",{\"1\":{\"169\":1}}],[\"profiles等\",{\"1\":{\"1400\":1}}],[\"profile\",{\"1\":{\"142\":2,\"162\":2,\"1408\":1}}],[\"proxy\",{\"1\":{\"123\":22,\"1412\":1,\"1474\":5}}],[\"price\",{\"1\":{\"858\":1}}],[\"pricing\",{\"1\":{\"706\":1}}],[\"privdata\",{\"1\":{\"687\":6}}],[\"private\",{\"1\":{\"88\":1,\"89\":2,\"92\":2,\"93\":2,\"195\":3,\"197\":1,\"198\":1,\"222\":1,\"226\":1,\"338\":6,\"339\":7,\"341\":4,\"342\":4,\"390\":12,\"405\":3,\"417\":3,\"441\":17,\"711\":9,\"810\":9,\"853\":1,\"855\":5,\"856\":14,\"857\":11,\"858\":9,\"888\":7,\"891\":2,\"892\":7,\"893\":7,\"894\":5,\"1001\":2,\"1042\":2,\"1061\":2,\"1062\":2,\"1210\":2,\"1243\":2,\"1259\":2,\"1260\":2,\"1382\":1,\"1386\":13,\"1390\":2,\"1394\":1,\"1396\":2,\"1398\":1,\"1404\":2,\"1424\":4,\"1444\":1,\"1446\":3,\"1448\":2,\"1462\":2,\"1466\":1,\"1474\":1,\"1476\":1,\"1478\":4,\"1480\":1,\"1481\":1,\"1494\":5}}],[\"primary\",{\"1\":{\"475\":3,\"489\":1,\"568\":1,\"570\":1,\"640\":1,\"789\":1,\"799\":1,\"855\":1,\"858\":3,\"887\":2,\"1028\":1,\"1035\":1,\"1232\":1,\"1239\":1,\"1507\":1}}],[\"prime\",{\"1\":{\"306\":2}}],[\"primitives\",{\"1\":{\"169\":1}}],[\"printf\",{\"1\":{\"682\":2}}],[\"printstacktrace\",{\"0\":{\"224\":1},\"1\":{\"224\":3,\"711\":3,\"1049\":1,\"1061\":2,\"1062\":2,\"1064\":2,\"1250\":1,\"1259\":2,\"1260\":2,\"1262\":2,\"1390\":1,\"1446\":2}}],[\"println\",{\"1\":{\"192\":6,\"193\":2,\"194\":4,\"195\":6,\"196\":4,\"197\":4,\"199\":2,\"200\":2,\"341\":3,\"342\":3,\"390\":5,\"405\":1,\"413\":1,\"417\":1,\"430\":1,\"441\":3,\"711\":2,\"752\":2,\"755\":3,\"800\":4,\"810\":2,\"820\":2,\"826\":5,\"847\":1,\"848\":1,\"849\":1,\"850\":1,\"852\":6,\"853\":2,\"856\":2,\"857\":2,\"858\":3,\"891\":6,\"893\":1,\"1001\":1,\"1041\":2,\"1042\":2,\"1043\":5,\"1049\":4,\"1061\":9,\"1062\":4,\"1064\":3,\"1133\":1,\"1210\":1,\"1242\":2,\"1243\":2,\"1244\":5,\"1250\":4,\"1259\":9,\"1260\":4,\"1262\":3,\"1318\":1,\"1386\":2,\"1390\":4,\"1392\":2,\"1402\":1,\"1424\":1,\"1442\":1,\"1448\":1,\"1466\":2,\"1474\":3,\"1478\":3}}],[\"print\",{\"1\":{\"111\":4,\"221\":1,\"223\":4,\"226\":2,\"229\":2,\"306\":2,\"1001\":2,\"1049\":1,\"1210\":2,\"1250\":1,\"1424\":5}}],[\"paxos做了一些优化\",{\"1\":{\"1203\":1,\"1376\":1}}],[\"paxos算法为基础\",{\"1\":{\"1203\":1,\"1376\":1}}],[\"paxos\",{\"0\":{\"1200\":1,\"1373\":1},\"1\":{\"1200\":5,\"1203\":2,\"1373\":5,\"1376\":2}}],[\"pax移植版本\",{\"1\":{\"244\":1}}],[\"pagination\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"pagecontext\",{\"1\":{\"1084\":1,\"1277\":1}}],[\"pageencoding=\",{\"1\":{\"895\":1}}],[\"pages\",{\"1\":{\"123\":1,\"974\":1,\"976\":2}}],[\"pagesize取得\",{\"1\":{\"123\":1}}],[\"pagesize\",{\"1\":{\"123\":2}}],[\"page\",{\"0\":{\"629\":1},\"1\":{\"41\":1,\"123\":3,\"325\":1,\"327\":1,\"624\":1,\"895\":2,\"1084\":1,\"1124\":2,\"1277\":1,\"1312\":2}}],[\"palermo\",{\"1\":{\"723\":5}}],[\"packaging>\",{\"1\":{\"778\":1,\"875\":1}}],[\"packaging\",{\"1\":{\"768\":1}}],[\"package=\",{\"1\":{\"881\":1,\"882\":1}}],[\"package\",{\"1\":{\"88\":1,\"89\":1,\"92\":1,\"93\":1,\"341\":1,\"342\":1,\"390\":1,\"405\":1,\"417\":1,\"430\":1,\"441\":1,\"751\":1,\"752\":2,\"768\":2,\"776\":2,\"888\":2,\"889\":2,\"891\":3,\"892\":5,\"893\":4,\"894\":1,\"912\":1,\"913\":1,\"939\":1,\"1061\":2,\"1062\":1,\"1064\":1,\"1259\":2,\"1260\":1,\"1262\":1,\"1402\":1,\"1507\":1,\"1523\":1}}],[\"packed\",{\"1\":{\"569\":1}}],[\"payable\",{\"1\":{\"540\":2,\"541\":2}}],[\"patternlayoutencoder\",{\"1\":{\"884\":1}}],[\"pattern>\",{\"1\":{\"883\":2,\"884\":1}}],[\"pattern\",{\"1\":{\"668\":1,\"669\":1,\"670\":1}}],[\"patter\",{\"1\":{\"464\":1}}],[\"patch\",{\"1\":{\"206\":1}}],[\"pathvariable\",{\"1\":{\"882\":1,\"894\":2,\"1049\":1,\"1250\":1,\"1494\":1}}],[\"path\",{\"1\":{\"174\":2,\"950\":2,\"1481\":4}}],[\"path=$ffmpeg\",{\"1\":{\"142\":1}}],[\"path时数据的大小\",{\"1\":{\"123\":1}}],[\"path设置记录文件的目录\",{\"1\":{\"123\":1}}],[\"parsing\",{\"1\":{\"1460\":1}}],[\"parallel\",{\"1\":{\"1394\":2}}],[\"param注解呢\",{\"1\":{\"889\":1}}],[\"param>\",{\"1\":{\"883\":2}}],[\"param2\",{\"1\":{\"842\":3}}],[\"param1\",{\"1\":{\"842\":3}}],[\"parameter\",{\"1\":{\"842\":2,\"1402\":1}}],[\"parameterize\",{\"1\":{\"833\":1}}],[\"parameterhandler\",{\"1\":{\"833\":1}}],[\"parametertype\",{\"1\":{\"826\":4,\"838\":1,\"839\":1,\"840\":1,\"841\":1,\"890\":1}}],[\"parametertype=\",{\"1\":{\"790\":1,\"818\":2,\"826\":3,\"849\":1,\"890\":1,\"1133\":1,\"1318\":1}}],[\"parameters\",{\"1\":{\"788\":1,\"842\":2,\"852\":6,\"853\":1}}],[\"params\",{\"1\":{\"123\":1}}],[\"param\",{\"1\":{\"123\":1,\"220\":1,\"306\":3,\"337\":11,\"338\":6,\"339\":3,\"390\":1,\"405\":2,\"441\":3,\"711\":1,\"752\":3,\"816\":4,\"826\":10,\"842\":10,\"843\":4,\"847\":2,\"848\":4,\"849\":5,\"850\":2,\"856\":3,\"857\":2,\"858\":2,\"883\":2,\"889\":17,\"893\":3,\"1049\":2,\"1173\":2,\"1250\":2,\"1350\":2}}],[\"parnew\",{\"1\":{\"1108\":3,\"1299\":3}}],[\"partation\",{\"1\":{\"1119\":1,\"1307\":1}}],[\"part\",{\"1\":{\"569\":1}}],[\"partiton\",{\"1\":{\"1116\":1,\"1119\":1,\"1304\":1,\"1307\":1}}],[\"partitioner\",{\"1\":{\"1119\":1,\"1307\":1}}],[\"partition\",{\"0\":{\"1122\":1,\"1310\":1},\"1\":{\"1035\":2,\"1116\":5,\"1122\":1,\"1123\":5,\"1124\":3,\"1197\":1,\"1239\":1,\"1304\":5,\"1310\":1,\"1311\":5,\"1312\":3,\"1370\":1,\"1438\":1,\"1444\":1,\"1450\":1}}],[\"partitions\",{\"1\":{\"129\":1,\"1444\":1}}],[\"partial\",{\"1\":{\"33\":1}}],[\"partial^r\",{\"1\":{\"33\":1}}],[\"parent>\",{\"1\":{\"778\":1}}],[\"parent<\",{\"1\":{\"778\":1}}],[\"parent\",{\"1\":{\"510\":3}}],[\"password=\",{\"1\":{\"822\":1,\"852\":6,\"853\":2,\"879\":1}}],[\"password\",{\"1\":{\"665\":2,\"799\":3,\"800\":2,\"806\":4,\"808\":1,\"810\":5,\"818\":6,\"822\":2,\"826\":9,\"829\":4,\"842\":11,\"845\":2,\"849\":2,\"856\":1,\"878\":2,\"927\":2,\"1507\":1}}],[\"passwd\",{\"1\":{\"111\":1}}],[\"pass\",{\"1\":{\"123\":6,\"319\":1}}],[\"pan\",{\"1\":{\"56\":1}}],[\"通道用于进行数据的读写操作\",{\"1\":{\"1478\":1}}],[\"通道可以支持双向数据传输\",{\"1\":{\"1478\":1}}],[\"通道\",{\"1\":{\"1478\":2}}],[\"通配符可以更广泛的匹配不同的\",{\"1\":{\"1424\":1}}],[\"通配符只能在读操作场景使用\",{\"1\":{\"1424\":1}}],[\"通配符有些微的区别\",{\"1\":{\"1424\":1}}],[\"通配符模式\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"通知生产者生产产品\",{\"1\":{\"1446\":1}}],[\"通知消费者消费产品\",{\"1\":{\"1446\":1}}],[\"通知等待的队列\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"通知有各种类型\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"通知需为此作为响应的broker\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"通知机制\",{\"1\":{\"1059\":2,\"1257\":2}}],[\"通知或中断\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"通知\",{\"1\":{\"656\":1,\"1173\":1,\"1174\":1,\"1194\":1,\"1201\":1,\"1350\":1,\"1351\":1,\"1367\":1,\"1374\":1}}],[\"通俗点说\",{\"1\":{\"182\":1}}],[\"通常位于\",{\"1\":{\"1523\":1}}],[\"通常可以为有效期增加随机值或者统一规划有效期\",{\"1\":{\"1160\":1,\"1340\":1}}],[\"通常来讲在数据库上的悲观锁需要数据库本身提供支持\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"通常所说的\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"通常针对数据更新\",{\"1\":{\"1145\":2,\"1328\":2}}],[\"通常要伴随拷贝数组的操作\",{\"1\":{\"1074\":1,\"1269\":1}}],[\"通常由多个容器组成\",{\"1\":{\"1017\":1,\"1223\":1}}],[\"通常在像泛型方法的定义中\",{\"1\":{\"1424\":1}}],[\"通常在方法的参数列表上加上一个注释\",{\"1\":{\"842\":1}}],[\"通常在on子句中指定\",{\"1\":{\"565\":1}}],[\"通常把dao的包叫做mapper\",{\"1\":{\"835\":1}}],[\"通常首字母大写\",{\"1\":{\"831\":1}}],[\"通常会用于\",{\"1\":{\"722\":1}}],[\"通常我们按以下原则进行垂直拆分\",{\"1\":{\"579\":1}}],[\"通常\",{\"1\":{\"573\":1}}],[\"通常使用较少\",{\"1\":{\"558\":1}}],[\"通常被使用在高亮字段\",{\"1\":{\"493\":1}}],[\"通常没有最新版本的软件包\",{\"1\":{\"240\":1}}],[\"通常用来距离查询\",{\"1\":{\"493\":1}}],[\"通常用于删除数据\",{\"1\":{\"206\":1}}],[\"通常用于修改部分数据\",{\"1\":{\"206\":1}}],[\"通常用于更新数据\",{\"1\":{\"206\":1}}],[\"通常用于查询数据\",{\"1\":{\"206\":1}}],[\"通常用在新增\",{\"1\":{\"206\":1}}],[\"通常是消息的key\",{\"1\":{\"1454\":1}}],[\"通常是object类型\",{\"1\":{\"1424\":1}}],[\"通常是\",{\"1\":{\"126\":1}}],[\"通常情况下这部分应答中包含一个小的应答头\",{\"1\":{\"123\":1}}],[\"通常web服务器放在反向代理的后面\",{\"1\":{\"123\":1}}],[\"通过状态码可以知道当前程序哪里出了问题\",{\"1\":{\"1494\":1}}],[\"通过观察\",{\"1\":{\"1494\":1}}],[\"通过对通用性的技术学习\",{\"1\":{\"1492\":1}}],[\"通过幂等性的机制\",{\"1\":{\"1454\":1}}],[\"通过将topic分成多个分区\",{\"1\":{\"1444\":1}}],[\"通过将获取锁和设置过期时间的操作合并为一个原子操作\",{\"1\":{\"1428\":1}}],[\"通过合理地设置分区数和副本数\",{\"1\":{\"1442\":1}}],[\"通过启用压缩\",{\"1\":{\"1430\":1}}],[\"通过启动类的\",{\"1\":{\"1181\":1,\"1356\":1}}],[\"通过拦截执行的\",{\"1\":{\"1416\":1}}],[\"通过工厂方法或构造器实例化\",{\"1\":{\"1408\":1}}],[\"通过事件监听器监听事件\",{\"1\":{\"1408\":1}}],[\"通过预置切点在不修改源代码的情况下增加新功能\",{\"1\":{\"1408\":1}}],[\"通过ensurecapacityinternal\",{\"1\":{\"1404\":1}}],[\"通过压力测试找出系统瓶颈\",{\"1\":{\"1400\":1}}],[\"通过回收产生的空闲区的合并整理\",{\"1\":{\"1398\":1}}],[\"通过统计与分析\",{\"1\":{\"1398\":1}}],[\"通过颜色标记法管理标记过程\",{\"1\":{\"1398\":1}}],[\"通过card\",{\"1\":{\"1398\":1}}],[\"通过限定垃圾产生速率\",{\"1\":{\"1398\":1}}],[\"通过限制\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"通过remembered\",{\"1\":{\"1398\":2}}],[\"通过最终标记修正并发阶段的\",{\"1\":{\"1396\":1}}],[\"通过垃圾收集器进行自动回收\",{\"1\":{\"1394\":1}}],[\"通过引用计数算法判断对象是否可达\",{\"1\":{\"1394\":1}}],[\"通过自动的垃圾回收机制回收这些垃圾对象所占的内存\",{\"1\":{\"1394\":1}}],[\"通过自动配置方式简化\",{\"1\":{\"1181\":1,\"1356\":1}}],[\"通过我们的交流\",{\"1\":{\"1380\":1}}],[\"通过数组和链表组合\",{\"1\":{\"1380\":1}}],[\"通过数据库事务的隔离级别隐式地实现锁定\",{\"1\":{\"633\":1}}],[\"通过链表解决冲突\",{\"1\":{\"1380\":1}}],[\"通过真实案例编写\",{\"1\":{\"1378\":1}}],[\"通过选举产生一个领导者\",{\"1\":{\"1203\":1,\"1376\":1}}],[\"通过设置\",{\"1\":{\"1202\":1,\"1375\":1}}],[\"通过各种组件的协调配合\",{\"1\":{\"1186\":1,\"1361\":1}}],[\"通过构造方法进行依赖注入时产生的循环依赖问题\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"通过动态代理\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"通过getsingleton方法从singletonobjects中获取bean\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"通过aware类型的接口\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"通过前后的对比\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"通过xml里面写sql来绑定\",{\"1\":{\"1137\":1,\"1322\":1}}],[\"通过注解绑定\",{\"1\":{\"1137\":1,\"1322\":1}}],[\"通过表达式可以迭代出整个对象的结构图\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"通过副本\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"通过多路复用器selector来轮询注册在其上的channel\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"通过上述实践\",{\"1\":{\"1476\":1}}],[\"通过上面俩条我们知道\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"通过上次校验\",{\"1\":{\"339\":1}}],[\"通过后台的异步线程\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"通过搭建缓存的高可用\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"通过该对象可以获取其他对象\",{\"1\":{\"1084\":1,\"1277\":1}}],[\"通过该接口的\",{\"1\":{\"991\":1}}],[\"通过该文件maven可以管理项目的整个声明周期\",{\"1\":{\"761\":1}}],[\"通过http协议传输\",{\"1\":{\"946\":1}}],[\"通过maven依赖的继承方式\",{\"1\":{\"899\":1}}],[\"通过maping\",{\"1\":{\"491\":1}}],[\"通过左上角引入\",{\"1\":{\"895\":1}}],[\"通过主键查询预约图书记录\",{\"1\":{\"889\":1}}],[\"通过id查询单本图书\",{\"1\":{\"889\":1}}],[\"通过方法参数传递的属性具有最高优先级\",{\"1\":{\"829\":1}}],[\"通过setter方法进行依赖注入且是在单例模式下产生的循环依赖问题\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"通过setter方法进行依赖注入且是在多例\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"通过sqlsession操作数据库\",{\"1\":{\"814\":1}}],[\"通过sqlsessionfactory创建sqlsession对象\",{\"1\":{\"814\":1}}],[\"通过slf4j1\",{\"1\":{\"772\":1}}],[\"通过一个配置文件来管理多个docker容器\",{\"1\":{\"1017\":1,\"1223\":1}}],[\"通过一个后台的异步线程进行缓存的构建\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"通过一个行地址和一个列地址可以唯一定位到一个存储单元\",{\"1\":{\"326\":1}}],[\"通过一片\",{\"1\":{\"695\":1}}],[\"通过为链表设置不同的类型特定函数\",{\"1\":{\"685\":1}}],[\"通过分析文档内容\",{\"1\":{\"1470\":1}}],[\"通过分代和分片回收\",{\"1\":{\"1398\":1}}],[\"通过分数返回有序集合指定区间内的成员\",{\"1\":{\"670\":1}}],[\"通过分词后\",{\"1\":{\"478\":1}}],[\"通过字典区间返回有序集合的成员\",{\"1\":{\"670\":1}}],[\"通过索引\",{\"1\":{\"670\":1}}],[\"通过索引区间返回有序集合指定区间内的成员\",{\"1\":{\"670\":1}}],[\"通过索引设置列表元素的值\",{\"1\":{\"667\":1}}],[\"通过索引获取列表中的元素\",{\"1\":{\"667\":1}}],[\"通过在尾部添加节点\",{\"1\":{\"1380\":1}}],[\"通过在服务器端记录信息确定用户身份\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"通过在客户端记录信息确定用户身份\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"通过在事务开始时锁定需要修改的数据行\",{\"1\":{\"636\":1}}],[\"通过在数据表中添加一个版本号或时间戳字段来实现\",{\"1\":{\"636\":1}}],[\"通过锁定机制预防冲突\",{\"1\":{\"633\":1}}],[\"通过这个流程\",{\"1\":{\"1408\":1}}],[\"通过这个图可以知道\",{\"1\":{\"618\":1}}],[\"通过这种分区分段的设计\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"通过这种数据库拆分的方法来解决数据库的性能问题\",{\"1\":{\"578\":1}}],[\"通过这样的方式\",{\"1\":{\"1006\":1,\"1215\":1}}],[\"通过这一机制\",{\"1\":{\"698\":1}}],[\"通过名字\",{\"1\":{\"618\":1}}],[\"通过垂直分表性能得到了一定程度的提升\",{\"1\":{\"580\":1}}],[\"通过提升服务器硬件能力来提高数据处理能力\",{\"1\":{\"578\":1}}],[\"通过执行以下语句\",{\"1\":{\"682\":1}}],[\"通过执行\",{\"1\":{\"574\":1}}],[\"通过建立索引可以加快排序和分组的处理速度\",{\"1\":{\"565\":1}}],[\"通过哈希算法将被索引的列的值存储到一个固定长度的桶\",{\"1\":{\"562\":1}}],[\"通过键盘交互\",{\"0\":{\"550\":1}}],[\"通过地理类型的字段\",{\"1\":{\"506\":1}}],[\"通过倒排索引\",{\"1\":{\"477\":1}}],[\"通过修改vm\",{\"1\":{\"456\":1}}],[\"通过隐藏\",{\"1\":{\"453\":1}}],[\"通过计数排序特性分析题目\",{\"1\":{\"412\":1}}],[\"通过三次hash计算\",{\"1\":{\"386\":1,\"392\":1}}],[\"通过解决这个问题\",{\"1\":{\"307\":1,\"308\":1}}],[\"通过简单的乘法运算\",{\"1\":{\"306\":1}}],[\"通过日志可以快速排查定位异常\",{\"1\":{\"228\":1}}],[\"通过入参\",{\"1\":{\"207\":1}}],[\"通过接口名就可以了解个大概\",{\"1\":{\"207\":1}}],[\"通过用户id查询用户信息\",{\"1\":{\"205\":1}}],[\"通过不同的功能拆分成不同的函数\",{\"1\":{\"195\":1}}],[\"通过ls\",{\"1\":{\"176\":1}}],[\"通过zkcli\",{\"1\":{\"176\":1}}],[\"通过$remote\",{\"1\":{\"123\":1}}],[\"通过阅读\",{\"1\":{\"56\":1}}],[\"通过\",{\"1\":{\"26\":1,\"29\":1,\"489\":1,\"722\":1,\"755\":1,\"764\":1,\"895\":1,\"919\":1,\"928\":4,\"990\":1,\"1006\":1,\"1025\":1,\"1090\":1,\"1116\":1,\"1124\":1,\"1134\":2,\"1136\":1,\"1187\":1,\"1201\":1,\"1215\":1,\"1229\":1,\"1283\":1,\"1304\":1,\"1312\":1,\"1319\":2,\"1321\":1,\"1362\":1,\"1374\":1,\"1408\":1,\"1476\":1}}],[\"通过公众号可以获得站长联系方式\",{\"1\":{\"5\":1}}],[\"通向成功的高效学习法\",{\"1\":{\"12\":1}}],[\"华为云\",{\"2\":{\"245\":1}}],[\"华为云服务器\",{\"1\":{\"238\":1}}],[\"华商崛起\",{\"1\":{\"12\":1}}],[\"华尔街之狼\",{\"1\":{\"12\":1}}],[\"知道为什么学它至关重要\",{\"1\":{\"170\":1}}],[\"知识点\",{\"1\":{\"118\":1}}],[\"知识星球\",{\"0\":{\"246\":1},\"1\":{\"53\":1}}],[\"知识是人类进步的阶梯\",{\"1\":{\"11\":1}}],[\"知乎最硬核书单\",{\"1\":{\"56\":2}}],[\"知乎\",{\"1\":{\"3\":1,\"555\":1}}],[\"黄山版\",{\"1\":{\"9\":1}}],[\"阿里云\",{\"2\":{\"245\":1}}],[\"阿里云99元的2核2g3m云服务器\",{\"1\":{\"238\":1}}],[\"阿里云栖社区\",{\"1\":{\"3\":1}}],[\"阿里巴巴开发手册\",{\"1\":{\"9\":1}}],[\"和大量的就业岗位\",{\"1\":{\"1502\":1}}],[\"和字节编解码器\",{\"1\":{\"1478\":1}}],[\"和cas\",{\"1\":{\"1476\":1}}],[\"和class类的newinstance方法很像\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"和新值\",{\"1\":{\"1476\":1}}],[\"和映射\",{\"1\":{\"1456\":1}}],[\"和副本\",{\"1\":{\"1444\":1}}],[\"和无边界的\",{\"1\":{\"1424\":1}}],[\"和内存资源给应用\",{\"1\":{\"1408\":1}}],[\"和框架\",{\"1\":{\"1408\":1}}],[\"和filesystemxmlapplicationcontext\",{\"1\":{\"1408\":1}}],[\"和高可扩展系统的理解很透彻\",{\"1\":{\"1408\":1}}],[\"和arraylist类似\",{\"1\":{\"1404\":1}}],[\"和类加载息息相关的其他类\",{\"1\":{\"1392\":1}}],[\"和loading\",{\"1\":{\"1392\":1}}],[\"和分布式锁服务中的控制时序场景基本原理一致\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"和分区容忍性\",{\"1\":{\"1035\":2,\"1239\":1}}],[\"和选\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"和过半写成功策略外\",{\"1\":{\"1196\":1,\"1369\":1}}],[\"和文件追加\",{\"1\":{\"1158\":1,\"1338\":1}}],[\"和上面的\",{\"1\":{\"1148\":1,\"1331\":1}}],[\"和设置的分页参数\",{\"1\":{\"1138\":1,\"1323\":1}}],[\"和若干个\",{\"1\":{\"1116\":1,\"1304\":1}}],[\"和一个\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"和运行中\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"和broker\",{\"1\":{\"1444\":1}}],[\"和bitmap相比\",{\"1\":{\"1034\":2,\"1238\":2}}],[\"和b+树是\",{\"1\":{\"315\":1}}],[\"和排序值给协调节点\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"和排它锁\",{\"1\":{\"618\":1}}],[\"和虚拟机有什么不同\",{\"0\":{\"1015\":1,\"1221\":1}}],[\"和更新\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"和缓存击穿不同的是\",{\"1\":{\"1160\":1,\"1340\":1}}],[\"和缓存的操作\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"和缓存\",{\"1\":{\"1006\":2,\"1215\":2}}],[\"和出站事件流的\",{\"1\":{\"991\":1}}],[\"和git\",{\"1\":{\"979\":1}}],[\"和set\",{\"0\":{\"849\":1}}],[\"和server\",{\"1\":{\"123\":1}}],[\"和$\",{\"0\":{\"842\":1,\"1131\":1,\"1316\":1}}],[\"和需要对应的mapper\",{\"1\":{\"825\":1}}],[\"和有序集合\",{\"1\":{\"682\":1}}],[\"和集合\",{\"1\":{\"670\":1}}],[\"和自动\",{\"1\":{\"664\":1}}],[\"和不同级别的\",{\"1\":{\"664\":1}}],[\"和hashmap类似\",{\"1\":{\"1406\":1}}],[\"和hash\",{\"1\":{\"652\":1,\"1155\":1,\"1335\":1}}],[\"和意向排他锁\",{\"1\":{\"638\":1}}],[\"和数据一致性的场景\",{\"1\":{\"616\":1}}],[\"和数据中心id\",{\"1\":{\"440\":1}}],[\"和嵌套类型\",{\"1\":{\"502\":1}}],[\"和步骤\",{\"1\":{\"404\":1}}],[\"和k个hash函数\",{\"1\":{\"392\":1}}],[\"和n个hash函数\",{\"1\":{\"386\":1}}],[\"和领接表表示法\",{\"0\":{\"372\":1}}],[\"和51~\",{\"1\":{\"316\":1}}],[\"和决策\",{\"1\":{\"263\":1}}],[\"和前面工作进程配合起来用\",{\"1\":{\"123\":1}}],[\"和其他语言\",{\"1\":{\"72\":1}}],[\"和\",{\"0\":{\"592\":1,\"1061\":1,\"1063\":1,\"1070\":1,\"1072\":1,\"1074\":1,\"1076\":1,\"1200\":1,\"1259\":1,\"1261\":1,\"1265\":1,\"1267\":1,\"1269\":1,\"1271\":1,\"1373\":1},\"1\":{\"8\":1,\"25\":1,\"42\":1,\"118\":1,\"121\":4,\"126\":1,\"206\":1,\"263\":1,\"305\":1,\"306\":1,\"320\":1,\"323\":2,\"395\":1,\"440\":3,\"477\":1,\"486\":3,\"489\":3,\"496\":1,\"498\":1,\"504\":2,\"568\":1,\"569\":1,\"598\":1,\"621\":1,\"652\":1,\"661\":1,\"664\":1,\"666\":3,\"668\":1,\"688\":1,\"691\":1,\"692\":1,\"698\":1,\"711\":1,\"719\":1,\"755\":2,\"829\":2,\"835\":2,\"838\":1,\"870\":1,\"887\":1,\"888\":1,\"889\":1,\"890\":2,\"891\":1,\"907\":1,\"979\":1,\"980\":1,\"981\":1,\"984\":2,\"998\":1,\"1028\":2,\"1029\":1,\"1036\":1,\"1042\":1,\"1044\":1,\"1049\":1,\"1069\":1,\"1076\":1,\"1085\":1,\"1088\":1,\"1107\":1,\"1108\":1,\"1134\":1,\"1149\":1,\"1174\":1,\"1177\":1,\"1232\":2,\"1233\":1,\"1240\":1,\"1243\":1,\"1245\":1,\"1250\":1,\"1264\":1,\"1271\":1,\"1278\":1,\"1281\":1,\"1298\":1,\"1299\":1,\"1319\":1,\"1332\":1,\"1351\":1,\"1354\":1,\"1380\":2,\"1384\":2,\"1386\":1,\"1390\":5,\"1398\":1,\"1402\":1,\"1410\":1,\"1414\":3,\"1418\":1,\"1420\":2,\"1424\":1,\"1446\":1,\"1480\":2,\"1494\":1,\"1507\":1,\"1520\":1}}],[\"介绍文档\",{\"0\":{\"1488\":1,\"1497\":1},\"1\":{\"1489\":1,\"1494\":1,\"1498\":1,\"1502\":1,\"1506\":1,\"1511\":1,\"1519\":1}}],[\"介绍截图\",{\"1\":{\"802\":1}}],[\"介绍一下zab协议\",{\"0\":{\"1199\":1,\"1372\":1}}],[\"介绍一下你们的个性化搜索方案\",{\"0\":{\"1036\":1,\"1240\":1}}],[\"介绍一下\",{\"0\":{\"1085\":1,\"1278\":1},\"1\":{\"382\":1}}],[\"介绍一个例子\",{\"1\":{\"263\":1}}],[\"介绍\",{\"0\":{\"8\":1,\"25\":1,\"59\":1,\"65\":1,\"261\":1,\"392\":1,\"395\":1,\"452\":1,\"664\":1},\"1\":{\"25\":1,\"26\":1,\"447\":1,\"650\":1}}],[\"档案主页\",{\"0\":{\"7\":1,\"260\":1},\"1\":{\"8\":1}}],[\"qr\",{\"1\":{\"941\":1}}],[\"qrcodeutil1\",{\"1\":{\"939\":3}}],[\"qrcodecontroller1\",{\"1\":{\"939\":2}}],[\"qos\",{\"1\":{\"875\":1,\"884\":2}}],[\"q1234\",{\"1\":{\"665\":1}}],[\"q=fullname\",{\"1\":{\"489\":1}}],[\"q=javapub\",{\"1\":{\"6\":3}}],[\"qnode<integer>\",{\"1\":{\"342\":4}}],[\"qnode<t>\",{\"1\":{\"342\":11}}],[\"qnode\",{\"1\":{\"342\":2}}],[\"qcloud\",{\"1\":{\"238\":1}}],[\"qzphzgrpbjpvcgvuihnlc2ftzq==\",{\"1\":{\"211\":1}}],[\"quartz\",{\"1\":{\"1408\":1}}],[\"quorum\",{\"1\":{\"1035\":2,\"1239\":2}}],[\"question\",{\"1\":{\"510\":4}}],[\"queue作为list的子接口\",{\"1\":{\"1404\":1}}],[\"queue接口\",{\"1\":{\"1404\":1}}],[\"queue的方式更高效\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"queue\",{\"1\":{\"341\":8,\"342\":1}}],[\"query方法中调用的execute\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"querybykeywithbook\",{\"1\":{\"889\":1,\"890\":1,\"891\":1,\"893\":1}}],[\"querybyid\",{\"1\":{\"205\":2,\"209\":2,\"889\":2,\"890\":1,\"891\":1,\"893\":1}}],[\"queryall\",{\"1\":{\"889\":1,\"890\":1,\"891\":1,\"893\":1}}],[\"queryorderwithuseranddetailitembyordernumber\",{\"1\":{\"858\":4}}],[\"queryorderwithuseranddetailbyordernumber\",{\"1\":{\"857\":4}}],[\"queryorderwithuserbyordernumber\",{\"1\":{\"856\":4}}],[\"queryorderuserbyordernumber\",{\"1\":{\"856\":4}}],[\"querying\",{\"1\":{\"842\":1}}],[\"queryuserlistbyids\",{\"1\":{\"850\":4}}],[\"queryuserlistbynameandage\",{\"1\":{\"849\":4}}],[\"queryuserlistbynameorage\",{\"1\":{\"848\":4}}],[\"queryuserlistbyname2\",{\"1\":{\"843\":2}}],[\"queryuserlistbyname1\",{\"1\":{\"843\":2}}],[\"queryuserlist\",{\"1\":{\"847\":3}}],[\"queryuserslikeusername\",{\"1\":{\"845\":2}}],[\"queryuserbytablename\",{\"1\":{\"826\":3,\"842\":5}}],[\"queryuserbyid\",{\"1\":{\"816\":1,\"817\":2,\"818\":2,\"820\":2,\"822\":1,\"826\":3,\"845\":2,\"852\":21,\"853\":5}}],[\"queryuserall\",{\"1\":{\"816\":1,\"817\":2,\"818\":1,\"820\":2,\"826\":3}}],[\"query\",{\"1\":{\"487\":1,\"489\":2,\"833\":2,\"1029\":2,\"1142\":1,\"1233\":2,\"1325\":1,\"1456\":1,\"1460\":1}}],[\"query=javapub\",{\"1\":{\"6\":1}}],[\"quickstart\",{\"1\":{\"766\":2}}],[\"quick\",{\"0\":{\"173\":1,\"804\":1},\"1\":{\"490\":2}}],[\"q\",{\"1\":{\"158\":3}}],[\"qw\",{\"1\":{\"111\":1}}],[\"qq推荐可能认识的人\",{\"1\":{\"719\":1}}],[\"qqvt9tp3\",{\"1\":{\"238\":1}}],[\"qq\",{\"1\":{\"80\":1,\"164\":1,\"249\":1,\"277\":1,\"296\":1,\"328\":1,\"447\":1,\"738\":1,\"791\":1,\"895\":1,\"1056\":1,\"1141\":1,\"1254\":1,\"1324\":1}}],[\"搜\",{\"1\":{\"264\":1}}],[\"搜索非常简单\",{\"1\":{\"1456\":1}}],[\"搜索和分析海量数据\",{\"1\":{\"1456\":1}}],[\"搜索执行阶段过程分俩个部分\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"搜索的过程\",{\"0\":{\"1029\":1,\"1233\":1}}],[\"搜索性能会越低\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"搜索镜像\",{\"1\":{\"1019\":1,\"1225\":1}}],[\"搜索效率越高\",{\"1\":{\"497\":1}}],[\"搜索时用standard用来完成自动提示功能\",{\"1\":{\"493\":1}}],[\"搜索引擎会根据关键词在网页中进行匹配\",{\"1\":{\"1464\":1}}],[\"搜索引擎中最重要的一部分之一\",{\"1\":{\"481\":1}}],[\"搜索引擎收录直达\",{\"0\":{\"6\":1}}],[\"搜索结果分页处理\",{\"1\":{\"447\":1}}],[\"搜索结果优化排序和耗时处理\",{\"1\":{\"447\":1}}],[\"搜索结果集展示\",{\"1\":{\"447\":1}}],[\"搜索关键词高亮\",{\"1\":{\"447\":1}}],[\"搜索排序和高亮关键字\",{\"1\":{\"447\":1}}],[\"搜索有可能在非叶子结点结束\",{\"1\":{\"318\":1}}],[\"搜索也就更快了\",{\"1\":{\"319\":1}}],[\"搜索也就更快\",{\"1\":{\"316\":1}}],[\"搜索可能在非叶子节点结束\",{\"1\":{\"316\":1}}],[\"搜索\",{\"0\":{\"528\":1},\"1\":{\"261\":1,\"1378\":1}}],[\"搜索微信号\",{\"1\":{\"252\":1}}],[\"搜狗收录\",{\"1\":{\"6\":1}}],[\"bbs\",{\"1\":{\"1408\":1}}],[\"b之间的循环依赖强制其中一个bean在完全初始化之前被注入另一个bean\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"bgsave\",{\"1\":{\"1162\":1,\"1342\":1,\"1420\":3,\"1422\":6}}],[\"b线程同时对该集合进行增删元素操作\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"bv17f421q73r\",{\"1\":{\"1502\":1}}],[\"bv1cw411w7rk\",{\"1\":{\"941\":1}}],[\"bv1fa411j7q5\",{\"1\":{\"923\":1}}],[\"bj\",{\"1\":{\"927\":1}}],[\"bpmnedge>\",{\"1\":{\"928\":8}}],[\"bpmnedge\",{\"1\":{\"928\":16}}],[\"bpmnelement=\",{\"1\":{\"928\":15}}],[\"bpmnshape>\",{\"1\":{\"928\":6}}],[\"bpmnshape\",{\"1\":{\"928\":12}}],[\"bpmnplane>\",{\"1\":{\"928\":1}}],[\"bpmnplane\",{\"1\":{\"928\":2}}],[\"bpmndi\",{\"1\":{\"928\":16}}],[\"bpmndiagram>\",{\"1\":{\"928\":1}}],[\"bpmndiagram\",{\"1\":{\"928\":2}}],[\"bpmndi=\",{\"1\":{\"928\":1}}],[\"bpmn20\",{\"1\":{\"928\":1}}],[\"bpmn\",{\"1\":{\"924\":1,\"928\":3}}],[\"bpmn绘图可视化工具\",{\"1\":{\"924\":1}}],[\"b项目中自动传递依赖于log4j\",{\"1\":{\"771\":1}}],[\"b和a\",{\"1\":{\"561\":1}}],[\"bm25\",{\"1\":{\"493\":1}}],[\"b+tree\",{\"0\":{\"324\":1},\"1\":{\"558\":1}}],[\"b+\",{\"0\":{\"321\":1,\"562\":1,\"566\":1},\"1\":{\"562\":4}}],[\"b+树在数据库索引中提供了更稳定的查询性能\",{\"1\":{\"566\":1}}],[\"b+树在索引删除和插入操作时\",{\"1\":{\"562\":1}}],[\"b+树通过减少节点分裂和合并的次数\",{\"1\":{\"566\":1}}],[\"b+树通过多层索引结构\",{\"1\":{\"566\":1}}],[\"b+树也能保持较高的查询效率\",{\"1\":{\"566\":1}}],[\"b+树擅长范围查询和排序操作\",{\"1\":{\"562\":1}}],[\"b+树索引的节点是有序存储的\",{\"1\":{\"562\":1}}],[\"b+树索引使用平衡树\",{\"1\":{\"562\":1}}],[\"b+树索引\",{\"1\":{\"562\":1}}],[\"b+树白话详解\",{\"1\":{\"562\":1}}],[\"b+树是最常用的索引类型\",{\"1\":{\"558\":1}}],[\"b+树是b\",{\"1\":{\"322\":1}}],[\"b+树是b树的一种变种\",{\"1\":{\"317\":1}}],[\"b+树可以很好的利用局部性原理\",{\"1\":{\"323\":1}}],[\"b+树可以增加了区间访问性\",{\"1\":{\"317\":1}}],[\"b+树叶节点两两相连可大大增加区间访问性\",{\"1\":{\"323\":1}}],[\"b+树查询节点\",{\"1\":{\"323\":1}}],[\"b+树内节点不存储数据\",{\"1\":{\"323\":1}}],[\"b+树概述\",{\"0\":{\"322\":1}}],[\"b+树的非叶子节点仅用于索引\",{\"1\":{\"566\":1}}],[\"b+树的有序链表结构使得它在执行范围查询和排序操作时非常高效\",{\"1\":{\"566\":1}}],[\"b+树的设计更适合减少磁盘访问次数\",{\"1\":{\"566\":1}}],[\"b+树的叶子节点包含了所有数据记录\",{\"1\":{\"566\":1}}],[\"b+树的查询时间复杂度仍然是对数级别\",{\"1\":{\"566\":1}}],[\"b+树的基本概念\",{\"0\":{\"369\":1}}],[\"b+树的示意图如下\",{\"1\":{\"317\":1}}],[\"b+树的神秘面纱揭开\",{\"1\":{\"315\":1}}],[\"b+树更适合外部存储\",{\"1\":{\"317\":1,\"323\":1}}],[\"b+树\",{\"0\":{\"317\":1},\"1\":{\"319\":1,\"322\":1,\"323\":1},\"2\":{\"329\":1}}],[\"btreesearch\",{\"1\":{\"320\":2}}],[\"b树和b+树的区别\",{\"1\":{\"1141\":1,\"1324\":1}}],[\"b树和b+树区别\",{\"0\":{\"314\":1}}],[\"b树的由于每个节点都有key和data\",{\"1\":{\"323\":1}}],[\"b树的每个节点\",{\"1\":{\"319\":1}}],[\"b树的每个节点可以存储多个数据\",{\"1\":{\"316\":1}}],[\"b树把每个节点都给了一点的范围区间\",{\"1\":{\"319\":1}}],[\"b树由来\",{\"1\":{\"319\":1}}],[\"b树深入\",{\"0\":{\"319\":1}}],[\"b树可以分为四个区间\",{\"1\":{\"316\":1}}],[\"b树中每个节点都存放着索引和数据\",{\"1\":{\"316\":1}}],[\"b树\",{\"0\":{\"316\":1,\"318\":1},\"1\":{\"315\":1,\"316\":1,\"317\":1},\"2\":{\"329\":1}}],[\"blue\",{\"1\":{\"1402\":2}}],[\"blpop\",{\"1\":{\"667\":1}}],[\"blob等大字段拆分出来放在附表中\",{\"1\":{\"579\":1}}],[\"bloom\",{\"1\":{\"385\":1,\"392\":1,\"396\":1}}],[\"bloomfiltersimple\",{\"1\":{\"390\":8}}],[\"bloomfilter\",{\"0\":{\"381\":1},\"1\":{\"1004\":4,\"1213\":4}}],[\"blocked\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"block\",{\"1\":{\"319\":2,\"323\":2,\"1064\":2,\"1262\":2}}],[\"blogmapper\",{\"1\":{\"835\":2}}],[\"blog\",{\"1\":{\"277\":1,\"283\":1,\"296\":2,\"328\":1,\"441\":2,\"447\":3,\"478\":1,\"583\":1,\"738\":1,\"751\":1,\"752\":1,\"912\":1,\"980\":2,\"982\":3,\"987\":1,\"1030\":1,\"1049\":1,\"1050\":1,\"1061\":2,\"1062\":1,\"1064\":1,\"1176\":1,\"1234\":1,\"1250\":1,\"1251\":1,\"1259\":2,\"1260\":1,\"1262\":1,\"1353\":1,\"1416\":2}}],[\"blf1a6cp\",{\"1\":{\"80\":1}}],[\"bcc\",{\"1\":{\"238\":1}}],[\"b4fe3684d20e97fa311ca213c8dc7ea9\",{\"1\":{\"210\":1}}],[\"b530\",{\"1\":{\"205\":1}}],[\"b696\",{\"1\":{\"205\":1}}],[\"b是这个服务器的ip地址\",{\"1\":{\"174\":1}}],[\"bounds>\",{\"1\":{\"928\":6}}],[\"bounds\",{\"1\":{\"928\":6}}],[\"bosspassflow\",{\"1\":{\"928\":3}}],[\"bossnotpassflow\",{\"1\":{\"928\":3}}],[\"bosstaskhandler\",{\"1\":{\"928\":1}}],[\"bosstask\",{\"1\":{\"928\":6}}],[\"board\",{\"1\":{\"720\":3}}],[\"borrow\",{\"1\":{\"711\":2}}],[\"box2\",{\"1\":{\"1424\":2}}],[\"box1\",{\"1\":{\"1424\":2}}],[\"box<object>\",{\"1\":{\"1424\":1}}],[\"box<orange>\",{\"1\":{\"1424\":1}}],[\"box<\",{\"1\":{\"1424\":6}}],[\"box<>\",{\"1\":{\"1424\":1}}],[\"box<apple>\",{\"1\":{\"1424\":4}}],[\"box<t>\",{\"1\":{\"1424\":3}}],[\"box\",{\"1\":{\"654\":1,\"1424\":10}}],[\"bot\",{\"1\":{\"548\":1,\"549\":1}}],[\"bottom\",{\"1\":{\"335\":1}}],[\"both\",{\"1\":{\"169\":1}}],[\"bool\",{\"1\":{\"540\":1,\"541\":1}}],[\"boolean\",{\"1\":{\"190\":3,\"198\":3,\"337\":1,\"338\":1,\"339\":1,\"341\":3,\"342\":1,\"390\":5,\"492\":1,\"599\":1,\"711\":1,\"755\":2,\"893\":3,\"1001\":1,\"1041\":2,\"1049\":2,\"1173\":1,\"1210\":1,\"1242\":2,\"1250\":2,\"1350\":1,\"1382\":2,\"1390\":3,\"1398\":1,\"1404\":1,\"1414\":2,\"1446\":1}}],[\"boostrap\",{\"1\":{\"1183\":1,\"1358\":1}}],[\"boost\",{\"1\":{\"493\":2}}],[\"boot3\",{\"1\":{\"1507\":1}}],[\"boot的核心注解是什么\",{\"0\":{\"1184\":1,\"1359\":1}}],[\"boot<\",{\"1\":{\"750\":1,\"907\":4,\"925\":1,\"948\":2,\"1049\":1,\"1250\":1,\"1522\":1,\"1525\":1}}],[\"bootstrap\",{\"1\":{\"459\":2,\"991\":1,\"1183\":2,\"1358\":2,\"1392\":2,\"1442\":1,\"1448\":5}}],[\"boot\",{\"0\":{\"1181\":1,\"1182\":1,\"1183\":1,\"1356\":1,\"1357\":1,\"1358\":1,\"1522\":1},\"1\":{\"454\":5,\"587\":1,\"744\":1,\"750\":1,\"753\":1,\"764\":1,\"900\":4,\"907\":11,\"919\":1,\"925\":2,\"948\":2,\"952\":1,\"1049\":1,\"1182\":1,\"1189\":8,\"1250\":1,\"1357\":1,\"1364\":8,\"1408\":2,\"1522\":2,\"1525\":2}}],[\"bookcontroller\",{\"1\":{\"894\":2,\"895\":2}}],[\"bookserviceimpltest\",{\"1\":{\"893\":2}}],[\"bookserviceimpl\",{\"1\":{\"893\":3}}],[\"bookservice\",{\"1\":{\"893\":9,\"894\":7}}],[\"books\",{\"1\":{\"891\":2,\"1462\":1}}],[\"bookdaotest\",{\"1\":{\"891\":3}}],[\"bookdao\",{\"1\":{\"889\":4,\"890\":3,\"891\":6,\"893\":6}}],[\"bookid\",{\"1\":{\"888\":2,\"889\":8,\"890\":4,\"891\":8,\"892\":7,\"893\":16,\"894\":13}}],[\"book\",{\"1\":{\"221\":4,\"887\":3,\"888\":5,\"889\":3,\"890\":21,\"891\":7,\"893\":4,\"894\":11,\"895\":3,\"967\":1}}],[\"boy\",{\"1\":{\"191\":2}}],[\"body>\",{\"1\":{\"895\":1}}],[\"body\",{\"1\":{\"123\":6,\"1494\":2}}],[\"bsd\",{\"1\":{\"677\":1}}],[\"bsd许可\",{\"1\":{\"664\":1}}],[\"bsfs\",{\"1\":{\"161\":1}}],[\"bsafe\",{\"1\":{\"111\":1}}],[\"bz2\",{\"1\":{\"142\":2}}],[\"bio放一块比较\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"bio\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"biggod222\",{\"1\":{\"826\":1,\"852\":6,\"853\":2}}],[\"bigint\",{\"1\":{\"789\":1,\"887\":3,\"1507\":1}}],[\"birthday=\",{\"1\":{\"822\":1,\"852\":6,\"853\":2}}],[\"birthday\",{\"1\":{\"799\":3,\"800\":1,\"810\":5,\"818\":6,\"822\":2,\"826\":4,\"845\":2,\"849\":2,\"856\":1}}],[\"bits\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"bitset\",{\"1\":{\"390\":8,\"721\":1}}],[\"bitmap标识哪些用户活跃\",{\"1\":{\"1034\":2,\"1238\":2}}],[\"bitmaps\",{\"1\":{\"664\":1}}],[\"bitmap索引适合低基数\",{\"1\":{\"573\":1}}],[\"bitmap\",{\"0\":{\"721\":1},\"1\":{\"568\":3,\"721\":8,\"1034\":2,\"1155\":1,\"1156\":1,\"1238\":2,\"1335\":1,\"1336\":1}}],[\"bitcount\",{\"1\":{\"395\":1,\"721\":1}}],[\"bit\",{\"1\":{\"151\":2,\"395\":2,\"440\":2,\"721\":10}}],[\"biterate\",{\"1\":{\"151\":2}}],[\"bitrate的缩写\",{\"1\":{\"162\":1}}],[\"bitrate\",{\"1\":{\"151\":1}}],[\"bilibili\",{\"1\":{\"129\":1,\"296\":1,\"923\":1,\"934\":1,\"941\":1,\"952\":1,\"1502\":1}}],[\"bincount\",{\"1\":{\"1380\":1}}],[\"binlog线程\",{\"1\":{\"1143\":1,\"1326\":1}}],[\"binlog\",{\"1\":{\"1142\":1,\"1143\":1,\"1325\":1,\"1326\":1}}],[\"bindingexception\",{\"1\":{\"825\":1,\"842\":2}}],[\"binding\",{\"1\":{\"825\":2,\"842\":2}}],[\"bindings\",{\"1\":{\"169\":1}}],[\"bind\",{\"1\":{\"736\":1,\"894\":1,\"912\":3,\"939\":1,\"1134\":1,\"1319\":1,\"1478\":1}}],[\"binary\",{\"1\":{\"500\":1}}],[\"binarysearch\",{\"1\":{\"320\":1}}],[\"bin\",{\"1\":{\"101\":2,\"126\":1,\"142\":1,\"175\":2,\"176\":3,\"424\":1,\"460\":1,\"461\":1,\"764\":2,\"765\":2,\"919\":1}}],[\"bingo\",{\"1\":{\"1464\":1}}],[\"bing\",{\"1\":{\"6\":1}}],[\"brain\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"branch\",{\"1\":{\"111\":1,\"976\":1,\"978\":2}}],[\"brokenbarrierexception\",{\"1\":{\"1390\":2}}],[\"broker会将消息发送给consumer\",{\"1\":{\"1444\":1}}],[\"broker会接收并存储消息\",{\"1\":{\"1444\":1}}],[\"broker的源码\",{\"1\":{\"1444\":2}}],[\"broker\",{\"1\":{\"677\":1,\"1116\":8,\"1121\":5,\"1123\":7,\"1124\":1,\"1304\":8,\"1309\":5,\"1311\":7,\"1312\":1}}],[\"broadcast\",{\"1\":{\"1200\":1,\"1373\":1,\"1478\":2}}],[\"brown\",{\"1\":{\"490\":2}}],[\"brpoplpush\",{\"1\":{\"667\":1}}],[\"brpop\",{\"1\":{\"667\":1}}],[\"break\",{\"1\":{\"192\":2,\"1062\":2,\"1260\":2,\"1380\":1,\"1466\":1}}],[\"brew\",{\"1\":{\"126\":3,\"131\":5}}],[\"build>\",{\"1\":{\"875\":1,\"907\":1,\"1522\":1}}],[\"builder\",{\"1\":{\"835\":6}}],[\"buildmaxheap\",{\"1\":{\"417\":2}}],[\"building\",{\"1\":{\"392\":1}}],[\"build\",{\"1\":{\"169\":1,\"809\":1,\"810\":1,\"820\":1,\"826\":1,\"829\":3,\"875\":2,\"907\":2,\"917\":1,\"1016\":1,\"1017\":1,\"1222\":1,\"1223\":1,\"1402\":1,\"1515\":1}}],[\"buf\",{\"1\":{\"682\":3}}],[\"bufsize\",{\"1\":{\"151\":4}}],[\"buffers缓冲区\",{\"1\":{\"123\":1}}],[\"buffers中指定的一个缓冲区的大小\",{\"1\":{\"123\":1}}],[\"buffers\",{\"1\":{\"123\":5}}],[\"buffers来读取\",{\"1\":{\"123\":1}}],[\"buffer\",{\"1\":{\"123\":8,\"263\":1,\"1028\":1,\"1232\":1,\"1388\":1,\"1478\":9}}],[\"busy\",{\"1\":{\"123\":1}}],[\"bucketindex\",{\"1\":{\"1406\":3}}],[\"bucketcount\",{\"1\":{\"405\":2}}],[\"buckets\",{\"1\":{\"405\":4}}],[\"bucketsize\",{\"1\":{\"405\":3}}],[\"bucketsort\",{\"1\":{\"405\":7}}],[\"bucket\",{\"0\":{\"401\":1},\"1\":{\"123\":5,\"401\":1,\"405\":5,\"424\":1,\"562\":1,\"1073\":1,\"1268\":1}}],[\"bug修复提交后\",{\"1\":{\"979\":1}}],[\"bug修复手册\",{\"0\":{\"79\":1}}],[\"bugfix\",{\"2\":{\"81\":1,\"82\":1}}],[\"by或distinct操作中使用的列\",{\"1\":{\"565\":1}}],[\"bytebuffer\",{\"1\":{\"1478\":5}}],[\"byte\",{\"1\":{\"319\":1,\"497\":1,\"721\":1,\"1042\":1,\"1243\":1}}],[\"bytes`\",{\"1\":{\"1440\":2}}],[\"bytes\",{\"1\":{\"123\":2,\"950\":1,\"952\":1,\"1440\":2}}],[\"by\",{\"1\":{\"123\":1,\"129\":1,\"175\":1,\"200\":2,\"565\":1,\"884\":1,\"890\":1,\"967\":1,\"1042\":1,\"1058\":2,\"1149\":1,\"1243\":1,\"1256\":2,\"1332\":1,\"1481\":2}}],[\"b\",{\"0\":{\"320\":1,\"323\":1,\"369\":1},\"1\":{\"111\":1,\"144\":1,\"151\":5,\"162\":3,\"316\":2,\"318\":1,\"319\":5,\"320\":1,\"322\":1,\"323\":3,\"341\":2,\"417\":2,\"441\":2,\"561\":2,\"573\":1,\"598\":2,\"666\":2,\"667\":2,\"698\":1,\"770\":4,\"890\":5,\"976\":1,\"978\":1,\"980\":7,\"1025\":1,\"1045\":1,\"1061\":14,\"1145\":2,\"1169\":2,\"1171\":2,\"1175\":1,\"1177\":1,\"1229\":1,\"1246\":1,\"1259\":14,\"1328\":2,\"1346\":2,\"1348\":2,\"1352\":1,\"1354\":1,\"1382\":1,\"1392\":2,\"1394\":4,\"1410\":2,\"1424\":7,\"1476\":2,\"1502\":1}}],[\"baomidou<\",{\"1\":{\"1507\":1}}],[\"bad\",{\"1\":{\"1494\":1}}],[\"ballot\",{\"1\":{\"1200\":1,\"1373\":1}}],[\"balance\",{\"1\":{\"316\":1,\"540\":1,\"541\":1}}],[\"banker\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"batch\",{\"1\":{\"833\":1}}],[\"battle\",{\"1\":{\"220\":1}}],[\"baijiahao\",{\"1\":{\"987\":1}}],[\"baike\",{\"1\":{\"389\":1}}],[\"baidu\",{\"1\":{\"6\":1,\"56\":1,\"238\":1,\"389\":1,\"987\":1}}],[\"basetest\",{\"1\":{\"891\":7,\"893\":2}}],[\"base\",{\"1\":{\"881\":1,\"882\":1}}],[\"basepackage\",{\"1\":{\"878\":1}}],[\"base64\",{\"1\":{\"495\":1,\"500\":1}}],[\"based\",{\"1\":{\"123\":1}}],[\"basiclock\",{\"1\":{\"1481\":2}}],[\"basic\",{\"1\":{\"123\":2,\"211\":1}}],[\"bash\",{\"1\":{\"111\":1,\"126\":1,\"919\":1}}],[\"backward\",{\"1\":{\"691\":1}}],[\"backwards\",{\"1\":{\"441\":1}}],[\"backup\",{\"1\":{\"123\":2}}],[\"backend\",{\"1\":{\"123\":2,\"296\":1,\"1017\":1,\"1223\":1,\"1514\":3,\"1515\":2,\"1524\":1}}],[\"bakend\",{\"1\":{\"123\":4}}],[\"baz\",{\"0\":{\"61\":1},\"1\":{\"49\":1,\"60\":1}}],[\"barrier\",{\"1\":{\"1061\":8,\"1259\":8,\"1390\":2}}],[\"bar\",{\"0\":{\"49\":1,\"58\":1},\"1\":{\"59\":1,\"723\":1}}],[\"behavior\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"behind\",{\"1\":{\"169\":1}}],[\"become\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"beanb\",{\"1\":{\"1412\":8}}],[\"beana\",{\"1\":{\"1412\":8}}],[\"beanpostprocessors\",{\"1\":{\"1412\":1}}],[\"beanpostprocessor\",{\"1\":{\"1410\":2}}],[\"beancreationexception\",{\"1\":{\"1410\":1}}],[\"beancurrentlyincreationexception\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"beandefinitionstoreexception\",{\"1\":{\"1410\":1}}],[\"beandefinition\",{\"1\":{\"1410\":7}}],[\"beandefinitionreader\",{\"1\":{\"1408\":6}}],[\"beanfacotry加载后\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"beanfactroy采用的是延迟加载形式来注入bean的\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"beanfactorypostprocessor\",{\"1\":{\"1410\":2}}],[\"beanfactorypostprocessor的使用\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"beanfactory\",{\"1\":{\"1408\":6,\"1412\":2}}],[\"beanfactory通常以编程的方式被创建\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"beanfactory需要手动注册\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"beanfactory是spring里面最底层的接口\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"beanfactory和applicationcontext都支持beanpostprocessor\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"beanfactory和applicationcontext是spring的两大核心接口\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"beanfactory和applicationcontext有什么区别\",{\"0\":{\"1175\":1,\"1352\":1}}],[\"beanfactory接口是spring\",{\"1\":{\"1170\":1,\"1347\":1}}],[\"beanname\",{\"1\":{\"1173\":8,\"1350\":8,\"1410\":3,\"1412\":2}}],[\"bean会随之消失\",{\"1\":{\"1172\":1,\"1349\":1}}],[\"bean会失效并被垃圾回收器回收\",{\"1\":{\"1172\":1,\"1349\":1}}],[\"bean就成功创建了\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"bean实例创建出来后\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"bean属性填充\",{\"1\":{\"1171\":2,\"1348\":2}}],[\"bean\",{\"0\":{\"1171\":1,\"1172\":1,\"1348\":1,\"1349\":1},\"1\":{\"1171\":1,\"1173\":1,\"1176\":1,\"1187\":1,\"1348\":1,\"1350\":1,\"1353\":1,\"1362\":1,\"1408\":17,\"1410\":62,\"1412\":21}}],[\"bean>\",{\"1\":{\"878\":3,\"881\":1,\"882\":1,\"1176\":2,\"1353\":2,\"1410\":1}}],[\"beansexception\",{\"1\":{\"1408\":2}}],[\"beans>\",{\"1\":{\"878\":1,\"881\":1,\"882\":1}}],[\"beans\",{\"1\":{\"878\":4,\"881\":4,\"882\":4,\"891\":2,\"893\":2,\"894\":1,\"1408\":1}}],[\"beans<\",{\"1\":{\"772\":1,\"773\":1,\"778\":1,\"875\":1}}],[\"begintime\",{\"1\":{\"752\":2}}],[\"before等注解搭配使用\",{\"1\":{\"1402\":1}}],[\"beforeexecute\",{\"1\":{\"1384\":1}}],[\"before内存模型中\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"before\",{\"1\":{\"667\":1,\"752\":2,\"820\":2,\"826\":2,\"1174\":1,\"1351\":1,\"1402\":1,\"1474\":1}}],[\"before|after\",{\"1\":{\"667\":1}}],[\"better\",{\"1\":{\"392\":1}}],[\"between\",{\"1\":{\"158\":1,\"592\":2,\"619\":1,\"621\":2}}],[\"bellard发起\",{\"1\":{\"139\":1}}],[\"be\",{\"1\":{\"41\":1,\"123\":1,\"129\":1,\"169\":1,\"199\":2,\"441\":2,\"1042\":2,\"1058\":2,\"1173\":1,\"1243\":2,\"1256\":2,\"1350\":1}}],[\"hw\",{\"1\":{\"1114\":3,\"1118\":3,\"1120\":1,\"1123\":1,\"1302\":3,\"1306\":3,\"1308\":1,\"1311\":1}}],[\"hll\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"hlen\",{\"1\":{\"668\":1}}],[\"hystrix\",{\"1\":{\"1005\":1,\"1214\":1}}],[\"hyperloglog计数\",{\"1\":{\"1034\":2,\"1238\":2}}],[\"hyperloglog\",{\"0\":{\"722\":1},\"1\":{\"722\":11,\"1034\":4,\"1155\":1,\"1238\":4,\"1335\":1}}],[\"hyperloglogs\",{\"1\":{\"664\":1}}],[\"href=\",{\"1\":{\"895\":1}}],[\"hh\",{\"1\":{\"884\":1}}],[\"hh24\",{\"1\":{\"863\":2,\"864\":2}}],[\"hj\",{\"1\":{\"799\":1,\"826\":1}}],[\"h>\",{\"1\":{\"683\":1}}],[\"hscan\",{\"1\":{\"668\":1}}],[\"hsetnx\",{\"1\":{\"668\":1}}],[\"hset\",{\"1\":{\"668\":1,\"717\":1}}],[\"hvals\",{\"1\":{\"668\":1}}],[\"hmset\",{\"1\":{\"668\":1}}],[\"hmget\",{\"1\":{\"668\":1}}],[\"hgetall\",{\"1\":{\"668\":1}}],[\"hget\",{\"1\":{\"668\":1}}],[\"hguisu\",{\"1\":{\"478\":1}}],[\"hdel\",{\"1\":{\"668\":1}}],[\"hbase\",{\"1\":{\"651\":1}}],[\"hihead\",{\"1\":{\"1380\":1}}],[\"histogram\",{\"1\":{\"946\":1}}],[\"hitail\",{\"1\":{\"1380\":1}}],[\"hit\",{\"1\":{\"853\":1}}],[\"hincrbyfloat\",{\"1\":{\"668\":1}}],[\"hincrby\",{\"1\":{\"668\":1}}],[\"hibernate\",{\"1\":{\"587\":1,\"1168\":1,\"1345\":1,\"1408\":2}}],[\"highlighting\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"highlighter能提升性能\",{\"1\":{\"493\":1}}],[\"higher\",{\"1\":{\"169\":1}}],[\"high\",{\"1\":{\"123\":1,\"664\":1,\"1042\":5,\"1114\":1,\"1118\":1,\"1243\":5,\"1302\":1,\"1306\":1}}],[\"humongous\",{\"1\":{\"1398\":1}}],[\"hunternet\",{\"1\":{\"691\":1,\"696\":1}}],[\"hu\",{\"1\":{\"504\":2}}],[\"huaweicloud\",{\"1\":{\"458\":2,\"734\":1,\"951\":1}}],[\"huwangyun\",{\"1\":{\"283\":1}}],[\"herd\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"here\",{\"1\":{\"195\":3,\"950\":1,\"1042\":1,\"1243\":1}}],[\"hexists\",{\"1\":{\"668\":1}}],[\"held\",{\"1\":{\"1481\":3}}],[\"hellocontroller\",{\"1\":{\"912\":1}}],[\"helloworld\",{\"1\":{\"895\":1}}],[\"helloword\",{\"1\":{\"875\":2}}],[\"hello\",{\"1\":{\"666\":1,\"667\":2,\"912\":3,\"1386\":2,\"1402\":2,\"1448\":1,\"1456\":1,\"1468\":1}}],[\"help\",{\"1\":{\"339\":1}}],[\"height=\",{\"1\":{\"928\":6}}],[\"heigh\",{\"1\":{\"492\":1}}],[\"he\",{\"1\":{\"162\":3}}],[\"heapregion\",{\"1\":{\"1398\":2}}],[\"heapdump\",{\"1\":{\"948\":1}}],[\"heapify\",{\"1\":{\"417\":4}}],[\"heapsort\",{\"1\":{\"417\":6}}],[\"health\",{\"1\":{\"133\":1,\"515\":1,\"948\":1}}],[\"head~2\",{\"1\":{\"981\":1}}],[\"head~1\",{\"1\":{\"981\":1}}],[\"head^的意思是上一个版本\",{\"1\":{\"981\":1}}],[\"head^\",{\"1\":{\"981\":3}}],[\"head>\",{\"1\":{\"895\":1}}],[\"heading\",{\"1\":{\"726\":1}}],[\"headers\",{\"1\":{\"459\":1}}],[\"header中添加vary\",{\"1\":{\"123\":1}}],[\"header\",{\"1\":{\"123\":13,\"1481\":7}}],[\"head\",{\"1\":{\"107\":1,\"111\":1,\"126\":1,\"339\":13,\"684\":1}}],[\"h\",{\"1\":{\"156\":4,\"157\":2,\"410\":1,\"489\":3,\"660\":1,\"682\":2,\"684\":1,\"687\":2,\"691\":2,\"894\":1,\"1042\":3,\"1062\":1,\"1243\":3,\"1260\":1,\"1386\":6}}],[\"h264stream`\",{\"1\":{\"163\":1}}],[\"h264\",{\"1\":{\"152\":1,\"153\":1}}],[\"h2o\",{\"1\":{\"36\":1}}],[\"haicoder\",{\"1\":{\"1150\":1,\"1333\":1}}],[\"haiyang\",{\"1\":{\"928\":2}}],[\"hadoop\",{\"1\":{\"651\":2}}],[\"half\",{\"1\":{\"497\":1}}],[\"harold\",{\"1\":{\"410\":1}}],[\"hard\",{\"1\":{\"169\":1,\"981\":1}}],[\"have\",{\"1\":{\"390\":3,\"589\":1,\"1390\":4}}],[\"handling\",{\"1\":{\"195\":3,\"197\":4}}],[\"handlerexecutionchain\",{\"1\":{\"1414\":5}}],[\"handleresultsets\",{\"1\":{\"833\":1}}],[\"handleradapter\",{\"1\":{\"1408\":2,\"1414\":10}}],[\"handlermapping\",{\"1\":{\"1408\":2,\"1414\":11}}],[\"handlermethod\",{\"1\":{\"1049\":4,\"1250\":4}}],[\"handlerinterceptor\",{\"1\":{\"1049\":2,\"1250\":2,\"1414\":3}}],[\"handler主要用来处理各种事件\",{\"1\":{\"991\":1}}],[\"handler\",{\"1\":{\"882\":1,\"1049\":5,\"1250\":5,\"1408\":4,\"1414\":20,\"1474\":2}}],[\"handleoutputparameters\",{\"1\":{\"833\":1}}],[\"handle\",{\"1\":{\"197\":4,\"1414\":2}}],[\"handleaction\",{\"1\":{\"197\":1}}],[\"handleadmin\",{\"1\":{\"195\":2}}],[\"handleguest\",{\"1\":{\"195\":2}}],[\"handleuser\",{\"1\":{\"195\":2}}],[\"handleusertype\",{\"1\":{\"195\":2}}],[\"handles\",{\"1\":{\"129\":1}}],[\"hasnext\",{\"1\":{\"1478\":1}}],[\"haslength\",{\"1\":{\"1410\":1}}],[\"haspositivenumber\",{\"1\":{\"190\":2}}],[\"has\",{\"1\":{\"169\":1,\"1058\":1,\"1256\":1}}],[\"hashtable<>\",{\"1\":{\"1406\":1}}],[\"hashtable<string\",{\"1\":{\"1406\":1}}],[\"hashtable\",{\"0\":{\"1072\":1,\"1267\":1},\"1\":{\"1069\":1,\"1072\":8,\"1264\":1,\"1267\":8,\"1380\":4,\"1406\":1,\"1446\":2}}],[\"hashset\",{\"1\":{\"719\":1,\"722\":1,\"1044\":1,\"1069\":1,\"1245\":1,\"1264\":1}}],[\"hashfunction\",{\"1\":{\"687\":1}}],[\"hash索引适合等值查询\",{\"1\":{\"573\":1}}],[\"hash索引的效率可能会下降\",{\"1\":{\"562\":1}}],[\"hashmap底层采用数组+链表实现\",{\"1\":{\"1406\":1}}],[\"hashmap<>\",{\"1\":{\"1406\":1}}],[\"hashmap<string\",{\"1\":{\"1406\":1}}],[\"hashmap<integer\",{\"1\":{\"406\":1}}],[\"hashmap还是最为常用和推荐的\",{\"1\":{\"1380\":1}}],[\"hashmap确实是我常用的数据结构之一\",{\"1\":{\"1380\":1}}],[\"hashmap作为一个高频使用的数据结构\",{\"1\":{\"1380\":1}}],[\"hashmap不支持排序\",{\"1\":{\"1380\":1}}],[\"hashmap采用拉链法解决冲突\",{\"1\":{\"1380\":1}}],[\"hashmap也存在一定的缺点\",{\"1\":{\"1380\":1}}],[\"hashmap有很高的空间利用率\",{\"1\":{\"1380\":1}}],[\"hashmap支持null键和null值\",{\"1\":{\"1380\":1}}],[\"hashmap通过扩容和链表转红黑树\",{\"1\":{\"1380\":1}}],[\"hashmap通过数组实现快速查找\",{\"1\":{\"1380\":1}}],[\"hashmap是非线程安全的\",{\"1\":{\"1380\":2}}],[\"hashmap是怎样确定key存放在数组的哪个位置的\",{\"0\":{\"1077\":1,\"1272\":1}}],[\"hashmap的源码解析得不错\",{\"1\":{\"1406\":1}}],[\"hashmap的源码实现还有很多精妙的地方\",{\"1\":{\"1406\":1}}],[\"hashmap的源码实现较复杂\",{\"1\":{\"1406\":1}}],[\"hashmap的线程安全版本\",{\"1\":{\"1380\":1}}],[\"hashmap的主要缺点在于\",{\"1\":{\"1380\":1}}],[\"hashmap的主要优势有\",{\"1\":{\"1380\":1}}],[\"hashmap的初始容量和扩容机制的设计不当\",{\"1\":{\"1380\":1}}],[\"hashmap的性能会很差\",{\"1\":{\"1380\":1}}],[\"hashmap的遍历也是o\",{\"1\":{\"1380\":1}}],[\"hashmap的迭代顺序是未定义的\",{\"1\":{\"1380\":1}}],[\"hashmap的优势在于\",{\"1\":{\"1380\":1}}],[\"hashmap的实现是非常巧妙的\",{\"1\":{\"1380\":1}}],[\"hashmap的扩容机制就是在put时\",{\"1\":{\"1380\":1}}],[\"hashmap选择把链表转换为红黑树\",{\"1\":{\"1079\":1,\"1274\":1}}],[\"hashmap\",{\"0\":{\"1072\":1,\"1073\":1,\"1080\":1,\"1267\":1,\"1268\":1,\"1275\":1,\"1380\":1},\"1\":{\"406\":1,\"1069\":1,\"1072\":5,\"1073\":3,\"1080\":1,\"1135\":2,\"1264\":1,\"1267\":5,\"1268\":3,\"1275\":1,\"1320\":2,\"1378\":1,\"1380\":11,\"1406\":1,\"1446\":10}}],[\"hashing\",{\"1\":{\"392\":1}}],[\"hashcode\",{\"1\":{\"390\":2,\"1043\":1,\"1044\":2,\"1073\":1,\"1244\":1,\"1245\":2,\"1268\":1,\"1380\":1}}],[\"hashes\",{\"1\":{\"390\":4,\"656\":1,\"664\":1,\"668\":1}}],[\"hash参考百度百科\",{\"1\":{\"389\":1}}],[\"hash函数对\",{\"1\":{\"389\":1}}],[\"hash\",{\"0\":{\"562\":1,\"668\":1,\"717\":1},\"1\":{\"123\":11,\"389\":1,\"390\":11,\"558\":1,\"562\":4,\"655\":1,\"668\":3,\"682\":1,\"717\":2,\"1028\":1,\"1073\":7,\"1080\":1,\"1119\":1,\"1161\":1,\"1232\":1,\"1268\":7,\"1275\":1,\"1307\":1,\"1341\":1,\"1380\":12,\"1406\":4,\"1418\":1}}],[\"htpasswd文件的内容可以用apache提供的htpasswd工具来产生\",{\"1\":{\"123\":1}}],[\"ht\",{\"1\":{\"123\":1,\"687\":5,\"688\":7}}],[\"htaccess\",{\"1\":{\"123\":1}}],[\"htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|\",{\"1\":{\"123\":1}}],[\"htm\",{\"1\":{\"123\":4}}],[\"html内容的任何变动会自动编译装入到服务程序\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"html内容与java内容也可放在单独文件中\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"html文件在工作区进行修改\",{\"1\":{\"979\":1}}],[\"html>\",{\"1\":{\"895\":2}}],[\"html\",{\"1\":{\"123\":13,\"169\":1,\"211\":1,\"238\":1,\"447\":1,\"472\":1,\"484\":1,\"488\":1,\"510\":1,\"589\":1,\"590\":3,\"611\":1,\"668\":1,\"669\":1,\"691\":1,\"696\":1,\"769\":1,\"777\":1,\"779\":1,\"802\":1,\"882\":1,\"895\":1,\"962\":1,\"967\":1,\"974\":1,\"980\":1,\"982\":2,\"1025\":1,\"1029\":1,\"1041\":2,\"1045\":2,\"1058\":1,\"1087\":1,\"1150\":1,\"1169\":1,\"1229\":1,\"1233\":1,\"1242\":2,\"1246\":2,\"1256\":1,\"1280\":1,\"1333\":1,\"1346\":1}}],[\"http状态码\",{\"1\":{\"1494\":1}}],[\"httpurl\",{\"1\":{\"1188\":1,\"1363\":1}}],[\"http2\",{\"1\":{\"1095\":1,\"1288\":1}}],[\"http1\",{\"0\":{\"1095\":1,\"1288\":1},\"1\":{\"1095\":2,\"1288\":2}}],[\"http协议中有那些请求方式\",{\"1\":{\"984\":1}}],[\"httptrace\",{\"1\":{\"948\":1}}],[\"http请求或者剥离到事务方法外部\",{\"1\":{\"893\":1}}],[\"http\",{\"0\":{\"96\":1,\"983\":1,\"984\":1},\"1\":{\"121\":1,\"123\":9,\"126\":3,\"142\":1,\"153\":1,\"205\":1,\"293\":1,\"294\":2,\"296\":2,\"459\":4,\"460\":1,\"465\":1,\"466\":1,\"515\":2,\"650\":1,\"661\":1,\"677\":1,\"731\":1,\"753\":2,\"761\":1,\"764\":1,\"768\":2,\"769\":1,\"777\":1,\"778\":8,\"779\":1,\"802\":1,\"806\":1,\"807\":1,\"808\":1,\"818\":1,\"826\":1,\"845\":1,\"875\":4,\"878\":7,\"880\":1,\"881\":10,\"882\":10,\"883\":4,\"890\":2,\"907\":3,\"928\":10,\"929\":4,\"939\":2,\"948\":1,\"950\":2,\"951\":1,\"959\":2,\"962\":1,\"969\":1,\"975\":1,\"980\":1,\"982\":1,\"983\":3,\"984\":3,\"990\":5,\"1094\":2,\"1287\":2,\"1380\":1,\"1382\":1,\"1384\":1,\"1386\":1,\"1388\":1,\"1390\":1,\"1394\":1,\"1396\":1,\"1398\":1,\"1400\":1,\"1402\":1,\"1404\":1,\"1406\":1,\"1408\":1,\"1410\":4,\"1412\":1,\"1414\":1,\"1416\":1,\"1418\":1,\"1420\":1,\"1422\":1,\"1424\":1,\"1426\":1,\"1428\":1,\"1430\":1,\"1432\":1,\"1434\":1,\"1436\":1,\"1438\":1,\"1440\":1,\"1446\":1,\"1448\":1,\"1450\":1,\"1452\":1,\"1454\":1,\"1456\":1,\"1458\":1,\"1460\":1,\"1462\":1,\"1464\":1,\"1466\":1,\"1468\":1,\"1470\":1,\"1474\":1,\"1476\":1,\"1478\":1,\"1481\":1,\"1520\":1},\"2\":{\"986\":1}}],[\"httpstatus\",{\"1\":{\"1494\":2}}],[\"httpservletresponse\",{\"1\":{\"939\":3,\"1049\":4,\"1250\":4,\"1414\":2}}],[\"httpservletrequest\",{\"1\":{\"939\":3,\"1049\":4,\"1250\":4,\"1414\":4}}],[\"https\",{\"1\":{\"6\":5,\"56\":1,\"80\":1,\"98\":1,\"123\":1,\"126\":1,\"127\":1,\"129\":3,\"133\":1,\"139\":1,\"164\":1,\"169\":1,\"174\":1,\"205\":1,\"209\":2,\"238\":4,\"247\":1,\"250\":1,\"277\":2,\"283\":1,\"286\":2,\"291\":1,\"292\":1,\"296\":6,\"297\":4,\"328\":1,\"389\":1,\"390\":2,\"396\":1,\"438\":1,\"441\":1,\"447\":3,\"458\":2,\"461\":1,\"465\":1,\"466\":1,\"467\":1,\"472\":1,\"478\":1,\"484\":1,\"488\":1,\"510\":1,\"551\":1,\"583\":1,\"589\":1,\"590\":3,\"611\":1,\"660\":1,\"668\":1,\"669\":1,\"691\":1,\"696\":1,\"706\":1,\"726\":1,\"727\":1,\"734\":1,\"738\":1,\"744\":1,\"751\":3,\"752\":3,\"753\":1,\"791\":1,\"875\":3,\"895\":2,\"900\":2,\"901\":1,\"907\":2,\"912\":3,\"915\":5,\"919\":1,\"923\":1,\"930\":1,\"934\":1,\"936\":1,\"941\":2,\"947\":1,\"948\":2,\"950\":1,\"951\":1,\"952\":2,\"961\":1,\"966\":1,\"967\":2,\"976\":3,\"980\":1,\"982\":3,\"984\":2,\"987\":3,\"1019\":1,\"1025\":2,\"1027\":1,\"1029\":1,\"1030\":1,\"1041\":1,\"1045\":2,\"1056\":1,\"1058\":1,\"1061\":4,\"1062\":3,\"1064\":2,\"1141\":1,\"1150\":1,\"1169\":1,\"1176\":1,\"1225\":1,\"1229\":2,\"1231\":1,\"1233\":1,\"1234\":1,\"1242\":1,\"1246\":2,\"1254\":1,\"1256\":1,\"1259\":4,\"1260\":3,\"1262\":2,\"1324\":1,\"1333\":1,\"1346\":1,\"1353\":1,\"1380\":2,\"1382\":2,\"1384\":2,\"1386\":2,\"1388\":2,\"1390\":2,\"1392\":2,\"1394\":2,\"1396\":2,\"1398\":2,\"1400\":2,\"1402\":2,\"1404\":2,\"1406\":2,\"1408\":2,\"1410\":2,\"1412\":2,\"1414\":2,\"1416\":2,\"1418\":2,\"1420\":2,\"1422\":2,\"1424\":2,\"1426\":2,\"1428\":2,\"1430\":2,\"1432\":2,\"1434\":2,\"1436\":2,\"1438\":2,\"1440\":2,\"1446\":2,\"1448\":2,\"1450\":2,\"1452\":2,\"1454\":2,\"1456\":2,\"1458\":2,\"1460\":2,\"1462\":2,\"1464\":2,\"1466\":2,\"1468\":2,\"1470\":2,\"1474\":2,\"1476\":2,\"1478\":2,\"1481\":2,\"1485\":1,\"1494\":1,\"1502\":2,\"1507\":2,\"1512\":2,\"1515\":1,\"1525\":1}}],[\"how\",{\"1\":{\"1030\":1,\"1234\":1}}],[\"hotspot\",{\"1\":{\"755\":2,\"1382\":3}}],[\"hold\",{\"1\":{\"625\":1}}],[\"hosts\",{\"1\":{\"459\":1}}],[\"hostaddress\",{\"1\":{\"441\":2}}],[\"hostname\",{\"1\":{\"440\":3}}],[\"host=host\",{\"1\":{\"296\":1}}],[\"host\",{\"1\":{\"123\":5,\"296\":1,\"459\":1,\"887\":1,\"1095\":1,\"1288\":1}}],[\"hope\",{\"1\":{\"42\":1}}],[\"home=\",{\"1\":{\"142\":1}}],[\"homebrew\",{\"1\":{\"126\":2}}],[\"home\",{\"1\":{\"8\":1,\"142\":1,\"171\":1,\"175\":1,\"176\":1,\"764\":1,\"765\":5}}],[\"h1>\",{\"1\":{\"895\":1}}],[\"h1\",{\"1\":{\"41\":2,\"392\":1}}],[\"hkeys\",{\"1\":{\"668\":1}}],[\"hk\",{\"1\":{\"6\":1}}],[\"g1表现良好\",{\"1\":{\"1400\":1}}],[\"g1的设计确实非常复杂精巧\",{\"1\":{\"1398\":1}}],[\"g1的设计与实现还有其他一些关键点\",{\"1\":{\"1398\":1}}],[\"g1的垃圾回收过程可以分为以下几个主要阶段\",{\"1\":{\"1398\":1}}],[\"g1收集器的设计与实现还有哪些关键点需要关注\",{\"1\":{\"1398\":1}}],[\"g1与cms一脉相承\",{\"1\":{\"1398\":1}}],[\"g1是在\",{\"1\":{\"1398\":1}}],[\"g1是jdk9默认的垃圾收集器\",{\"1\":{\"1398\":1}}],[\"g1引入了remembered\",{\"1\":{\"1398\":1}}],[\"g1引入card\",{\"1\":{\"1398\":1}}],[\"g1继承了标记\",{\"1\":{\"1398\":1}}],[\"g1继承了\",{\"1\":{\"1398\":1}}],[\"g1之所以马力十足\",{\"1\":{\"1398\":1}}],[\"g1remset\",{\"1\":{\"1398\":1}}],[\"g1concurrentmark\",{\"1\":{\"1398\":1}}],[\"g1collectedheap\",{\"1\":{\"1394\":1,\"1398\":2}}],[\"g1可以渐进式回收\",{\"1\":{\"1398\":1}}],[\"g1具有以下优点\",{\"1\":{\"1398\":1}}],[\"g1到底好在哪儿\",{\"1\":{\"1398\":1}}],[\"g1垃圾收集器\",{\"1\":{\"1398\":1}}],[\"g1垃圾收集器的工作流程如下\",{\"1\":{\"1394\":1}}],[\"g1垃圾回收器\",{\"0\":{\"1398\":1}}],[\"g1等收集器\",{\"1\":{\"1394\":1}}],[\"g1\",{\"1\":{\"1394\":1}}],[\"global\",{\"1\":{\"950\":4,\"1172\":2,\"1349\":2,\"1410\":1}}],[\"gt\",{\"1\":{\"863\":1}}],[\"ghz\",{\"1\":{\"654\":1}}],[\"ghcr\",{\"1\":{\"296\":1}}],[\"garbagecollect\",{\"1\":{\"1398\":1}}],[\"gauge\",{\"1\":{\"946\":1}}],[\"gakki\",{\"1\":{\"719\":2}}],[\"gap\",{\"1\":{\"493\":1,\"621\":1,\"638\":1}}],[\"gateway\",{\"1\":{\"296\":1}}],[\"gue有\",{\"1\":{\"1416\":1}}],[\"guest\",{\"1\":{\"195\":2}}],[\"guides\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"guide\",{\"1\":{\"472\":1,\"484\":1,\"488\":2,\"510\":1,\"1029\":2,\"1233\":2}}],[\"guava\",{\"1\":{\"395\":1,\"1002\":2,\"1005\":2,\"1211\":2,\"1214\":2}}],[\"gc和full\",{\"1\":{\"1396\":1}}],[\"gc来整理空间\",{\"1\":{\"1396\":1}}],[\"gc后未死亡进入survivor\",{\"1\":{\"1394\":1}}],[\"gc回收这个类的所有实例和空间\",{\"1\":{\"1392\":1}}],[\"gc\",{\"1\":{\"339\":1,\"1107\":2,\"1108\":2,\"1298\":2,\"1299\":2,\"1388\":3,\"1394\":2,\"1396\":1,\"1400\":1}}],[\"geohash\",{\"1\":{\"723\":2,\"1155\":1,\"1335\":1}}],[\"georadiusbymember\",{\"1\":{\"723\":1}}],[\"georadius\",{\"1\":{\"723\":1}}],[\"geodist\",{\"1\":{\"723\":5}}],[\"geopos\",{\"1\":{\"723\":1}}],[\"geoadd\",{\"1\":{\"723\":2}}],[\"geospatial\",{\"1\":{\"664\":1}}],[\"geo\",{\"0\":{\"723\":1},\"1\":{\"506\":1,\"507\":1,\"723\":1}}],[\"gen\",{\"1\":{\"1398\":1}}],[\"general\",{\"1\":{\"1142\":1,\"1325\":1}}],[\"generated\",{\"1\":{\"1064\":3,\"1262\":3}}],[\"generateid\",{\"1\":{\"441\":2}}],[\"generate\",{\"1\":{\"294\":1,\"297\":1,\"441\":1,\"766\":2,\"767\":2,\"776\":4}}],[\"gentoo\",{\"0\":{\"243\":1}}],[\"gemma\",{\"1\":{\"290\":1}}],[\"getfield\",{\"1\":{\"1468\":2}}],[\"getfront\",{\"1\":{\"341\":1}}],[\"getenvironment\",{\"1\":{\"1408\":1}}],[\"getentry\",{\"1\":{\"1386\":1}}],[\"getgenerictype\",{\"1\":{\"1468\":2}}],[\"getgeneratedkeys\",{\"1\":{\"1133\":2,\"1318\":2}}],[\"getgender\",{\"1\":{\"191\":2}}],[\"getwriter\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"getworkid\",{\"1\":{\"441\":2}}],[\"getvalue\",{\"1\":{\"1001\":2,\"1210\":2}}],[\"getkey\",{\"1\":{\"1001\":2,\"1210\":2,\"1406\":2}}],[\"getobject\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"getoutputstream\",{\"1\":{\"939\":2}}],[\"getordefault\",{\"1\":{\"194\":1}}],[\"getlist\",{\"1\":{\"893\":2,\"894\":1}}],[\"getlocalhost\",{\"1\":{\"441\":1}}],[\"getlogger\",{\"1\":{\"222\":1,\"893\":1,\"894\":1}}],[\"getbytes\",{\"1\":{\"1466\":1,\"1478\":1}}],[\"getbyid\",{\"1\":{\"893\":2,\"894\":1}}],[\"getbean\",{\"1\":{\"1408\":1}}],[\"getbook\",{\"1\":{\"891\":1}}],[\"getbirthday\",{\"1\":{\"810\":1}}],[\"getbit\",{\"1\":{\"721\":1}}],[\"getdestroymethodname\",{\"1\":{\"1410\":1}}],[\"getdetaillist\",{\"1\":{\"857\":1,\"858\":1}}],[\"getdate\",{\"1\":{\"800\":1}}],[\"getdatacenterid\",{\"1\":{\"441\":2}}],[\"getdata\",{\"1\":{\"342\":2}}],[\"getdatas\",{\"1\":{\"341\":1}}],[\"getpath\",{\"1\":{\"939\":2}}],[\"getparameter\",{\"1\":{\"939\":2}}],[\"getparameterobject\",{\"1\":{\"833\":1}}],[\"getpassword\",{\"1\":{\"810\":1}}],[\"getupdated\",{\"1\":{\"810\":1}}],[\"getuserbyid\",{\"1\":{\"1494\":1}}],[\"getuser\",{\"1\":{\"856\":1,\"857\":1,\"858\":1,\"1494\":1}}],[\"getusername\",{\"1\":{\"810\":1}}],[\"getuserid\",{\"1\":{\"228\":2}}],[\"getandincrement\",{\"1\":{\"1476\":1}}],[\"getannotation\",{\"1\":{\"1049\":1,\"1250\":1,\"1402\":2}}],[\"getall\",{\"1\":{\"1001\":3,\"1210\":3}}],[\"getage\",{\"1\":{\"810\":1}}],[\"getargs\",{\"1\":{\"752\":1,\"1049\":1,\"1250\":1}}],[\"getchildren\",{\"1\":{\"1466\":1}}],[\"getcandidateconfigurations\",{\"1\":{\"1185\":1,\"1360\":1}}],[\"getcode\",{\"1\":{\"1494\":2}}],[\"getcourse\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"getcount\",{\"1\":{\"1061\":1,\"1259\":1,\"1480\":2}}],[\"getconstructor\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"getcontextclassloader\",{\"1\":{\"939\":2}}],[\"getconnection\",{\"1\":{\"800\":1,\"1133\":1,\"1318\":1}}],[\"getconf\",{\"1\":{\"123\":1}}],[\"getcreated\",{\"1\":{\"810\":1}}],[\"getclassloader\",{\"1\":{\"1474\":1}}],[\"getclass\",{\"1\":{\"752\":1,\"893\":1,\"894\":1,\"1043\":6,\"1244\":6,\"1410\":3,\"1474\":2}}],[\"gettypeparameters\",{\"1\":{\"1468\":2}}],[\"getter和setter方法\",{\"1\":{\"888\":2,\"1494\":1}}],[\"getter\",{\"1\":{\"888\":4}}],[\"gettransaction\",{\"1\":{\"833\":1}}],[\"gettraceid\",{\"1\":{\"229\":1}}],[\"getting\",{\"1\":{\"802\":1}}],[\"gettarget\",{\"1\":{\"752\":1}}],[\"getmessage\",{\"1\":{\"893\":2,\"1494\":2}}],[\"getmethod\",{\"1\":{\"752\":1,\"1049\":1,\"1250\":1,\"1402\":2,\"1410\":2,\"1468\":2}}],[\"getmapping\",{\"1\":{\"1049\":5,\"1250\":5,\"1494\":1}}],[\"getmapper\",{\"1\":{\"825\":3,\"826\":1,\"853\":1,\"1416\":1}}],[\"getmaxsize\",{\"1\":{\"341\":1}}],[\"getsingleton\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"getsignature\",{\"1\":{\"752\":1,\"1049\":1,\"1250\":1}}],[\"getscore\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"getstacktrace\",{\"1\":{\"939\":2}}],[\"getstateinfo\",{\"1\":{\"892\":3}}],[\"getstate\",{\"1\":{\"892\":4,\"1390\":1}}],[\"getstring\",{\"1\":{\"800\":2}}],[\"getsex\",{\"1\":{\"810\":1}}],[\"getset\",{\"1\":{\"666\":1}}],[\"getremoteaddress\",{\"1\":{\"1478\":1}}],[\"getresourceasstream\",{\"1\":{\"809\":1,\"810\":1,\"820\":1,\"826\":1}}],[\"getresource\",{\"1\":{\"711\":1,\"939\":2}}],[\"getredis\",{\"1\":{\"711\":1}}],[\"getrear\",{\"1\":{\"341\":1}}],[\"gethandler\",{\"1\":{\"1414\":2}}],[\"gethandler是handlermapping接口中的唯一方法\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"gethash\",{\"1\":{\"390\":3}}],[\"gethostname\",{\"1\":{\"441\":1}}],[\"gethostaddress\",{\"1\":{\"441\":1}}],[\"getnode\",{\"1\":{\"339\":4}}],[\"getname\",{\"1\":{\"220\":1,\"221\":1,\"223\":1,\"752\":2,\"810\":1,\"1043\":6,\"1049\":1,\"1061\":5,\"1244\":6,\"1250\":1,\"1259\":5,\"1390\":2,\"1448\":4,\"1474\":2}}],[\"getinitmethodname\",{\"1\":{\"1410\":1}}],[\"getinterfaces\",{\"1\":{\"1474\":1}}],[\"getint\",{\"1\":{\"800\":1,\"1133\":1,\"1318\":1}}],[\"getinstace\",{\"1\":{\"91\":1}}],[\"getinstance\",{\"1\":{\"88\":1,\"89\":1,\"91\":1,\"92\":1,\"93\":1}}],[\"getid\",{\"1\":{\"229\":1,\"810\":1,\"826\":1,\"1134\":2,\"1319\":2}}],[\"get\",{\"1\":{\"121\":1,\"132\":1,\"133\":1,\"169\":1,\"206\":2,\"306\":3,\"341\":1,\"390\":1,\"406\":2,\"487\":1,\"489\":2,\"490\":2,\"492\":1,\"660\":1,\"666\":4,\"716\":1,\"894\":2,\"915\":1,\"984\":1,\"990\":1,\"1001\":2,\"1029\":2,\"1073\":1,\"1173\":3,\"1198\":1,\"1210\":2,\"1233\":2,\"1268\":1,\"1350\":3,\"1371\":1,\"1386\":10,\"1418\":5,\"1424\":4,\"1428\":1,\"1456\":1,\"1466\":1,\"1476\":1,\"1481\":2}}],[\"golang\",{\"0\":{\"955\":1}}],[\"goals>\",{\"1\":{\"907\":1}}],[\"goal>\",{\"1\":{\"907\":1}}],[\"goods\",{\"1\":{\"238\":1}}],[\"google\",{\"1\":{\"6\":1,\"395\":1,\"937\":2}}],[\"go\",{\"1\":{\"129\":1,\"133\":5,\"296\":1,\"1408\":1},\"2\":{\"134\":1,\"135\":1}}],[\"go整合etcd\",{\"0\":{\"129\":1}}],[\"groovy\",{\"1\":{\"900\":1}}],[\"grouptid\",{\"1\":{\"778\":1}}],[\"groupid\",{\"1\":{\"768\":2}}],[\"groupid>\",{\"1\":{\"711\":1,\"750\":1,\"771\":2,\"772\":4,\"773\":3,\"778\":9,\"798\":1,\"805\":1,\"819\":1,\"875\":25,\"907\":6,\"925\":3,\"937\":2,\"948\":3,\"1049\":1,\"1250\":1,\"1507\":2,\"1522\":1,\"1525\":1}}],[\"group\",{\"1\":{\"504\":2,\"565\":1,\"901\":1,\"902\":1,\"1116\":1,\"1304\":1,\"1438\":1,\"1442\":2,\"1448\":2}}],[\"groups技术\",{\"1\":{\"1021\":1,\"1227\":1}}],[\"groups\",{\"1\":{\"169\":1}}],[\"green\",{\"1\":{\"1402\":2}}],[\"grey\",{\"1\":{\"1398\":1}}],[\"great\",{\"1\":{\"473\":1}}],[\"greater\",{\"1\":{\"441\":2}}],[\"grep\",{\"1\":{\"107\":1,\"111\":2,\"131\":1,\"915\":1}}],[\"graph\",{\"1\":{\"1134\":1,\"1319\":1}}],[\"gradle\",{\"1\":{\"900\":1,\"1520\":2}}],[\"gracefully\",{\"1\":{\"129\":1}}],[\"grafana安装\",{\"0\":{\"951\":1}}],[\"grafana安装包\",{\"1\":{\"949\":1}}],[\"grafana\",{\"0\":{\"947\":1},\"1\":{\"126\":7,\"946\":1,\"947\":3,\"951\":1,\"952\":1},\"2\":{\"920\":1,\"921\":1,\"953\":1,\"954\":1}}],[\"give\",{\"1\":{\"1412\":1}}],[\"given\",{\"1\":{\"406\":1,\"1173\":1,\"1350\":1,\"1408\":1}}],[\"gi\",{\"1\":{\"980\":1}}],[\"gif\",{\"1\":{\"882\":1}}],[\"gif|jpg|jpeg|png|bmp|swf\",{\"1\":{\"123\":1}}],[\"ginobefun\",{\"1\":{\"467\":1}}],[\"girl\",{\"1\":{\"191\":2}}],[\"git流程图\",{\"1\":{\"982\":1}}],[\"gitstashpop\",{\"1\":{\"979\":1}}],[\"gitstash\",{\"1\":{\"979\":1}}],[\"gitstatus\",{\"1\":{\"979\":1}}],[\"git使用规范\",{\"0\":{\"968\":1}}],[\"git\",{\"0\":{\"979\":1,\"980\":1,\"981\":1,\"982\":1},\"1\":{\"111\":7,\"263\":1,\"970\":1,\"976\":7,\"978\":6,\"979\":25,\"980\":13,\"981\":9,\"982\":6}}],[\"git命令\",{\"1\":{\"111\":1}}],[\"gitee\",{\"1\":{\"1\":1,\"53\":1,\"390\":2,\"751\":1,\"752\":1,\"753\":1,\"912\":1,\"987\":1,\"1019\":1,\"1025\":1,\"1027\":1,\"1225\":1,\"1229\":1,\"1231\":1,\"1380\":2,\"1382\":2,\"1384\":2,\"1386\":2,\"1388\":2,\"1390\":2,\"1392\":2,\"1394\":2,\"1396\":2,\"1398\":2,\"1400\":2,\"1402\":2,\"1404\":2,\"1406\":2,\"1408\":2,\"1410\":2,\"1412\":2,\"1414\":2,\"1416\":2,\"1418\":2,\"1420\":2,\"1422\":2,\"1424\":2,\"1426\":2,\"1428\":2,\"1430\":2,\"1432\":2,\"1434\":2,\"1436\":2,\"1438\":2,\"1440\":2,\"1446\":2,\"1448\":2,\"1450\":2,\"1452\":2,\"1454\":2,\"1456\":2,\"1458\":2,\"1460\":2,\"1462\":2,\"1464\":2,\"1466\":2,\"1468\":2,\"1470\":2,\"1474\":2,\"1476\":2,\"1478\":2,\"1481\":2}}],[\"github|gitee\",{\"1\":{\"1037\":1,\"1051\":1,\"1065\":1,\"1080\":1,\"1095\":1,\"1109\":1,\"1125\":1,\"1138\":1,\"1151\":1,\"1164\":1,\"1190\":1,\"1203\":1}}],[\"github<\",{\"1\":{\"875\":1}}],[\"githubusercontent\",{\"1\":{\"126\":1}}],[\"github\",{\"0\":{\"976\":1},\"1\":{\"1\":1,\"3\":1,\"53\":1,\"114\":1,\"123\":1,\"129\":1,\"133\":1,\"247\":4,\"289\":1,\"296\":1,\"297\":1,\"461\":1,\"465\":1,\"466\":1,\"467\":1,\"551\":1,\"556\":1,\"615\":1,\"660\":2,\"744\":1,\"751\":1,\"752\":1,\"875\":2,\"878\":2,\"881\":1,\"882\":1,\"888\":2,\"889\":4,\"890\":2,\"891\":7,\"892\":7,\"893\":19,\"894\":8,\"895\":1,\"907\":1,\"912\":1,\"919\":1,\"930\":1,\"941\":1,\"948\":1,\"952\":1,\"966\":1,\"974\":1,\"976\":6,\"1061\":2,\"1062\":1,\"1064\":1,\"1259\":2,\"1260\":1,\"1262\":1,\"1380\":2,\"1382\":2,\"1384\":2,\"1386\":2,\"1388\":2,\"1390\":2,\"1392\":2,\"1394\":2,\"1396\":2,\"1398\":2,\"1400\":2,\"1402\":2,\"1404\":2,\"1406\":2,\"1408\":2,\"1410\":2,\"1412\":2,\"1414\":2,\"1416\":2,\"1418\":2,\"1420\":2,\"1422\":2,\"1424\":2,\"1426\":2,\"1428\":2,\"1430\":2,\"1432\":2,\"1434\":2,\"1436\":2,\"1438\":2,\"1440\":2,\"1446\":2,\"1448\":2,\"1450\":2,\"1452\":2,\"1454\":2,\"1456\":2,\"1458\":2,\"1460\":2,\"1462\":2,\"1464\":2,\"1466\":2,\"1468\":2,\"1470\":2,\"1474\":2,\"1476\":2,\"1478\":2,\"1481\":2,\"1507\":1,\"1512\":1}}],[\"g\",{\"1\":{\"111\":1,\"946\":1,\"972\":1,\"980\":2,\"1025\":1,\"1229\":1}}],[\"gz\",{\"1\":{\"111\":3,\"174\":2,\"458\":2,\"661\":2,\"735\":1}}],[\"gzip压缩比\",{\"1\":{\"123\":1}}],[\"gzip\",{\"1\":{\"107\":1,\"123\":7,\"211\":1}}],[\"gbu6\",{\"1\":{\"56\":1}}],[\"wonderful\",{\"1\":{\"1398\":1,\"1404\":1,\"1406\":1}}],[\"word2vec\",{\"1\":{\"1036\":3,\"1240\":3}}],[\"wordcloud\",{\"1\":{\"961\":1}}],[\"world\",{\"1\":{\"667\":3,\"1107\":2,\"1298\":2,\"1394\":1,\"1396\":2,\"1398\":1,\"1402\":3}}],[\"workdir\",{\"1\":{\"1514\":1}}],[\"working\",{\"1\":{\"1390\":6}}],[\"workid\",{\"1\":{\"440\":1}}],[\"workeridshift\",{\"1\":{\"441\":2}}],[\"workeridbits\",{\"1\":{\"441\":4}}],[\"workerid\",{\"1\":{\"440\":2,\"441\":9}}],[\"worker\",{\"1\":{\"123\":4}}],[\"wfr=spider\",{\"1\":{\"987\":1}}],[\"w3\",{\"1\":{\"778\":2,\"875\":1,\"878\":1,\"881\":1,\"882\":1,\"883\":1,\"907\":1,\"928\":3}}],[\"wx\",{\"1\":{\"587\":1,\"1378\":1}}],[\"whl\",{\"1\":{\"961\":1}}],[\"whether\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"when>\",{\"1\":{\"848\":2}}],[\"when\",{\"0\":{\"848\":1},\"1\":{\"787\":1,\"788\":2,\"790\":9,\"850\":2,\"1134\":1,\"1319\":1}}],[\"where>\",{\"1\":{\"849\":1}}],[\"where\",{\"0\":{\"589\":1,\"590\":1,\"591\":1,\"594\":1,\"596\":1,\"849\":1},\"1\":{\"561\":1,\"564\":4,\"568\":1,\"569\":1,\"574\":1,\"589\":2,\"591\":3,\"592\":2,\"593\":2,\"594\":2,\"595\":2,\"598\":3,\"618\":3,\"619\":2,\"621\":3,\"634\":1,\"636\":4,\"640\":1,\"641\":1,\"642\":1,\"787\":1,\"788\":1,\"790\":2,\"800\":1,\"807\":1,\"818\":4,\"822\":1,\"826\":4,\"842\":4,\"843\":2,\"845\":4,\"847\":1,\"848\":1,\"849\":1,\"850\":2,\"852\":6,\"853\":1,\"856\":2,\"857\":1,\"858\":1,\"863\":2,\"890\":3,\"1131\":4,\"1132\":1,\"1134\":1,\"1149\":6,\"1316\":4,\"1317\":1,\"1319\":1,\"1332\":6,\"1416\":2}}],[\"whitespace\",{\"1\":{\"464\":1}}],[\"while\",{\"1\":{\"306\":2,\"339\":11,\"342\":1,\"405\":1,\"430\":1,\"441\":1,\"755\":8,\"800\":1,\"1062\":2,\"1260\":2,\"1380\":1,\"1382\":2,\"1386\":2,\"1442\":1,\"1446\":2,\"1466\":1,\"1476\":1,\"1478\":2}}],[\"wu\",{\"1\":{\"503\":2,\"504\":6}}],[\"w+\",{\"1\":{\"464\":1}}],[\"wronly|o\",{\"1\":{\"1420\":1}}],[\"wrap\",{\"1\":{\"833\":1,\"1478\":1}}],[\"wrappers\",{\"1\":{\"160\":2}}],[\"wrappers=1\",{\"1\":{\"160\":1}}],[\"writer\",{\"1\":{\"160\":1}}],[\"write\",{\"1\":{\"123\":1,\"624\":1,\"635\":2,\"1420\":1,\"1478\":1}}],[\"w\",{\"1\":{\"156\":2,\"157\":2,\"386\":1,\"392\":1}}],[\"wget\",{\"1\":{\"142\":1,\"174\":1,\"458\":1,\"461\":1,\"465\":1,\"466\":1,\"661\":1}}],[\"wang\",{\"1\":{\"1133\":1,\"1318\":1}}],[\"wangshiyu\",{\"1\":{\"341\":1,\"342\":1,\"390\":1,\"405\":1,\"888\":2,\"889\":2,\"891\":3,\"892\":5,\"893\":4,\"894\":1,\"912\":2}}],[\"watch无\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"watermark\",{\"1\":{\"1114\":2,\"1118\":1,\"1302\":2,\"1306\":1}}],[\"war\",{\"1\":{\"768\":1,\"1182\":1,\"1357\":1}}],[\"warn\",{\"1\":{\"123\":1,\"219\":2,\"223\":1}}],[\"waiters\",{\"1\":{\"1481\":2}}],[\"waiting\",{\"1\":{\"1057\":2,\"1255\":2,\"1422\":1}}],[\"waitset\",{\"1\":{\"1481\":2}}],[\"waits\",{\"1\":{\"643\":1,\"1058\":1,\"1256\":1}}],[\"waits表来查看死锁信息\",{\"1\":{\"643\":1}}],[\"wait\",{\"1\":{\"625\":2,\"711\":2,\"1057\":5,\"1058\":1,\"1255\":5,\"1256\":1,\"1392\":1,\"1422\":1,\"1446\":13}}],[\"wav\",{\"1\":{\"162\":1}}],[\"waypoint>\",{\"1\":{\"928\":19}}],[\"waypoint\",{\"1\":{\"928\":19}}],[\"way\",{\"1\":{\"129\":1}}],[\"win32openssl\",{\"1\":{\"962\":1}}],[\"win\",{\"1\":{\"961\":1}}],[\"windows下\",{\"0\":{\"660\":1}}],[\"windows安装\",{\"0\":{\"141\":1}}],[\"windows\",{\"1\":{\"86\":1,\"263\":1,\"660\":1,\"661\":1}}],[\"width=\",{\"1\":{\"928\":6}}],[\"width=device\",{\"1\":{\"895\":1}}],[\"width\",{\"1\":{\"895\":1}}],[\"wikipedia\",{\"1\":{\"396\":1}}],[\"wiki\",{\"1\":{\"139\":1,\"396\":1,\"1485\":1}}],[\"withscores\",{\"1\":{\"670\":4}}],[\"with\",{\"1\":{\"107\":1,\"123\":1,\"493\":3,\"589\":1,\"1058\":1,\"1256\":1,\"1408\":2,\"1422\":1}}],[\"will\",{\"1\":{\"41\":1}}],[\"weakexample\",{\"1\":{\"1394\":1}}],[\"weakreference<>\",{\"1\":{\"1394\":1}}],[\"weakreference<example>\",{\"1\":{\"1394\":1}}],[\"weakreference<threadlocal<\",{\"1\":{\"1386\":1}}],[\"weakhashmap\",{\"1\":{\"1380\":1,\"1406\":1}}],[\"weaving\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"were\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"welcome\",{\"1\":{\"883\":2,\"894\":1,\"895\":1,\"912\":1}}],[\"weight为weight越大\",{\"1\":{\"123\":1}}],[\"weight和访问比率成正比\",{\"1\":{\"123\":1}}],[\"weight\",{\"1\":{\"123\":1}}],[\"weight=10\",{\"1\":{\"123\":2}}],[\"weight=2\",{\"1\":{\"123\":2}}],[\"weight=3\",{\"1\":{\"123\":2}}],[\"weight参数表示权值\",{\"1\":{\"123\":1}}],[\"weight是权重\",{\"1\":{\"123\":1}}],[\"weixin\",{\"1\":{\"80\":1,\"164\":1,\"583\":1,\"895\":1,\"1056\":1,\"1141\":1,\"1254\":1,\"1324\":1}}],[\"web服务器对它进行一下三个操作\",{\"1\":{\"1087\":1,\"1280\":1}}],[\"web服务器接收到请求之后\",{\"1\":{\"1087\":1,\"1280\":1}}],[\"web应用的配置对象\",{\"1\":{\"1084\":1,\"1277\":1}}],[\"web项目\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"web项目模板\",{\"1\":{\"767\":1}}],[\"webmvcconfigurer\",{\"1\":{\"1049\":2,\"1093\":1,\"1250\":2,\"1286\":1}}],[\"webmvc<\",{\"1\":{\"875\":1}}],[\"web层\",{\"0\":{\"894\":1}}],[\"web<\",{\"1\":{\"875\":3,\"925\":1,\"948\":1}}],[\"webapp\",{\"1\":{\"767\":2,\"872\":1,\"883\":1}}],[\"websites\",{\"1\":{\"718\":2}}],[\"website\",{\"1\":{\"441\":1,\"722\":4}}],[\"webui\",{\"1\":{\"296\":7,\"297\":3}}],[\"web001\",{\"1\":{\"123\":1}}],[\"web\",{\"0\":{\"882\":1,\"883\":1},\"1\":{\"6\":1,\"111\":1,\"261\":1,\"562\":1,\"874\":1,\"875\":2,\"878\":1,\"882\":6,\"883\":6,\"891\":1,\"894\":5,\"895\":1,\"912\":3,\"939\":3,\"948\":2,\"1085\":1,\"1168\":1,\"1278\":1,\"1345\":1,\"1408\":5,\"1414\":1,\"1507\":1}}],[\"wechat\",{\"1\":{\"4\":1}}],[\"wd=javapub\",{\"1\":{\"6\":1}}],[\"www4\",{\"1\":{\"6\":1}}],[\"www\",{\"1\":{\"6\":4,\"123\":2,\"153\":1,\"238\":1,\"283\":1,\"296\":1,\"438\":1,\"472\":1,\"484\":1,\"488\":1,\"510\":1,\"650\":1,\"668\":1,\"669\":1,\"691\":1,\"696\":1,\"769\":1,\"777\":1,\"778\":2,\"779\":1,\"802\":1,\"875\":1,\"878\":7,\"881\":10,\"882\":10,\"883\":1,\"907\":1,\"923\":1,\"928\":8,\"941\":1,\"961\":1,\"980\":1,\"982\":2,\"1025\":1,\"1029\":1,\"1030\":1,\"1045\":2,\"1169\":1,\"1229\":1,\"1233\":1,\"1234\":1,\"1246\":2,\"1346\":1,\"1502\":1,\"1512\":1}}],[\"谷歌收录\",{\"1\":{\"6\":1}}],[\"cj\",{\"1\":{\"1507\":1}}],[\"cxqwaittime\",{\"1\":{\"1481\":2}}],[\"cxq\",{\"1\":{\"1481\":2}}],[\"cc\",{\"1\":{\"1382\":2}}],[\"cglib字节码生成技术代理\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"cgi\",{\"1\":{\"764\":1}}],[\"c和d了\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"cyclicbarrierdemo\",{\"1\":{\"1061\":1,\"1259\":1,\"1390\":1}}],[\"cyclicbarrier\",{\"0\":{\"1061\":1,\"1259\":1},\"1\":{\"1061\":8,\"1259\":8,\"1390\":14}}],[\"cv2\",{\"0\":{\"958\":1},\"1\":{\"959\":2,\"960\":1},\"2\":{\"964\":1}}],[\"ctrl\",{\"1\":{\"900\":1}}],[\"csrf\",{\"0\":{\"1094\":1,\"1287\":1},\"1\":{\"1094\":4,\"1287\":4}}],[\"css\",{\"1\":{\"882\":1}}],[\"csdn\",{\"1\":{\"3\":1,\"277\":1,\"296\":2,\"328\":1,\"441\":1,\"447\":3,\"478\":1,\"583\":1,\"738\":1,\"751\":1,\"752\":1,\"791\":1,\"912\":1,\"980\":1,\"982\":2,\"987\":1,\"1061\":2,\"1062\":1,\"1064\":1,\"1176\":1,\"1259\":2,\"1260\":1,\"1262\":1,\"1353\":1}}],[\"c3p0连接池的私有属性\",{\"1\":{\"878\":1}}],[\"c3p0\",{\"1\":{\"878\":1}}],[\"c<\",{\"1\":{\"778\":1}}],[\"c语言编写\",{\"1\":{\"652\":1}}],[\"circular\",{\"1\":{\"625\":1,\"1173\":1,\"1350\":1,\"1412\":1}}],[\"ciphers\",{\"1\":{\"123\":2}}],[\"cmpxchg8b\",{\"1\":{\"1382\":1}}],[\"cmpxchgl\",{\"1\":{\"1382\":1}}],[\"cmpxchg\",{\"1\":{\"1382\":2}}],[\"cms也因此成为java垃圾收集史上的里程碑\",{\"1\":{\"1396\":1}}],[\"cms仍无法完全解决碎片空间问题\",{\"1\":{\"1396\":1}}],[\"cms模式\",{\"1\":{\"1396\":1}}],[\"cms做了一些努力\",{\"1\":{\"1396\":1}}],[\"cmscollector\",{\"1\":{\"1396\":2}}],[\"cms就是为了减少卡顿吧\",{\"1\":{\"1396\":1}}],[\"cms全称concurrent\",{\"1\":{\"1396\":1}}],[\"cms垃圾回收器\",{\"0\":{\"1396\":1}}],[\"cms垃圾清理的过程\",{\"0\":{\"1107\":1,\"1298\":1}}],[\"cms整个过程比之前的收集器要复杂\",{\"1\":{\"1107\":1,\"1298\":1}}],[\"cms\",{\"1\":{\"570\":1,\"1108\":1,\"1299\":1,\"1394\":2,\"1396\":8}}],[\"cmd\",{\"1\":{\"175\":1,\"176\":3,\"660\":3,\"765\":1,\"913\":1,\"1016\":4,\"1222\":4}}],[\"c进行查询\",{\"1\":{\"561\":1}}],[\"c三种组合的查询\",{\"1\":{\"561\":1}}],[\"cù\",{\"1\":{\"558\":1}}],[\"custom\",{\"1\":{\"1408\":1}}],[\"customer\",{\"1\":{\"464\":1}}],[\"curd\",{\"0\":{\"815\":1}}],[\"cursor\",{\"1\":{\"668\":1,\"669\":1,\"670\":1}}],[\"currently\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"currentthread\",{\"1\":{\"939\":2,\"1061\":1,\"1259\":1,\"1390\":3}}],[\"currenttimemillis\",{\"1\":{\"441\":2,\"752\":2}}],[\"current\",{\"1\":{\"169\":1,\"472\":1,\"488\":1,\"510\":1,\"638\":1,\"863\":6,\"887\":2,\"1029\":1,\"1233\":1}}],[\"curl\",{\"1\":{\"126\":1,\"208\":2,\"238\":1,\"292\":1,\"293\":1,\"294\":2,\"465\":1,\"466\":1,\"489\":3,\"515\":2,\"894\":2,\"915\":1}}],[\"center\",{\"1\":{\"1494\":1,\"1502\":1,\"1507\":1,\"1514\":3,\"1515\":3,\"1524\":1,\"1525\":1}}],[\"centos7\",{\"0\":{\"731\":1},\"1\":{\"732\":1}}],[\"centos\",{\"0\":{\"240\":1},\"1\":{\"455\":1,\"915\":1}}],[\"ce\",{\"1\":{\"915\":3}}],[\"cerebro\",{\"0\":{\"461\":1},\"1\":{\"447\":1,\"461\":7,\"513\":1}}],[\"cert\",{\"1\":{\"123\":2}}],[\"certificate\",{\"1\":{\"123\":2}}],[\"certonly\",{\"1\":{\"102\":1}}],[\"certbot\",{\"0\":{\"100\":1,\"101\":1},\"1\":{\"98\":1,\"100\":2,\"101\":3,\"102\":3,\"103\":2}}],[\"c第一个端口用来集群成员的信息交换\",{\"1\":{\"174\":1}}],[\"cfg\",{\"1\":{\"174\":2,\"175\":1}}],[\"crc\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"crc32\",{\"1\":{\"123\":1}}],[\"cross\",{\"1\":{\"1093\":1,\"1094\":1,\"1286\":1,\"1287\":1}}],[\"creat\",{\"1\":{\"1420\":1}}],[\"creating\",{\"1\":{\"863\":1}}],[\"createmode\",{\"1\":{\"1466\":1}}],[\"createtopics\",{\"1\":{\"1440\":1}}],[\"createtime\",{\"1\":{\"880\":2}}],[\"createclient\",{\"1\":{\"1422\":1}}],[\"createcommonqrcode\",{\"1\":{\"939\":2}}],[\"createznode的方式来实现\",{\"1\":{\"1201\":1,\"1374\":1}}],[\"createlogoqrcode\",{\"1\":{\"939\":2}}],[\"created=\",{\"1\":{\"822\":1,\"852\":6,\"853\":2}}],[\"created\",{\"1\":{\"799\":3,\"810\":5,\"818\":3,\"822\":2,\"826\":1,\"845\":2,\"852\":3,\"853\":1,\"855\":1,\"856\":2,\"857\":1,\"1173\":2,\"1350\":2}}],[\"create\",{\"0\":{\"605\":1},\"1\":{\"206\":1,\"296\":1,\"568\":3,\"570\":1,\"605\":1,\"640\":1,\"789\":1,\"799\":2,\"855\":2,\"858\":4,\"880\":2,\"887\":2,\"927\":2,\"928\":2,\"1198\":1,\"1371\":1,\"1408\":1,\"1466\":1,\"1507\":1}}],[\"crud标签\",{\"0\":{\"837\":1}}],[\"crud\",{\"1\":{\"814\":1}}],[\"crud新闻数据\",{\"1\":{\"447\":1}}],[\"crf\",{\"1\":{\"162\":2}}],[\"crawler\",{\"1\":{\"123\":1}}],[\"crit\",{\"1\":{\"123\":1}}],[\"clear\",{\"1\":{\"979\":1}}],[\"clearcache\",{\"1\":{\"852\":3}}],[\"cleanup\",{\"1\":{\"1398\":2}}],[\"clean生命周期一共包含了三个阶段\",{\"1\":{\"775\":1}}],[\"clean生命周期每套生命周期都由一组阶段\",{\"1\":{\"775\":1}}],[\"clean生命周期\",{\"0\":{\"775\":1}}],[\"clean\",{\"1\":{\"337\":1,\"338\":1,\"339\":1,\"768\":2,\"774\":2,\"775\":11,\"913\":1,\"1523\":1}}],[\"cli\",{\"1\":{\"660\":1,\"664\":1,\"706\":1,\"972\":2}}],[\"clientchannel\",{\"1\":{\"1478\":4}}],[\"clients\",{\"1\":{\"1442\":2,\"1448\":2}}],[\"clients<\",{\"1\":{\"711\":1,\"875\":1}}],[\"clientport\",{\"1\":{\"174\":1}}],[\"client\",{\"1\":{\"123\":9,\"133\":1,\"755\":1,\"915\":2,\"1032\":1,\"1236\":1,\"1422\":1,\"1478\":1}}],[\"clazz\",{\"1\":{\"1468\":9}}],[\"claim\",{\"1\":{\"540\":1,\"541\":1}}],[\"claimed\",{\"1\":{\"540\":4,\"541\":4}}],[\"classify\",{\"1\":{\"1394\":1}}],[\"classic<\",{\"1\":{\"875\":1}}],[\"classic\",{\"1\":{\"100\":1,\"884\":1}}],[\"classnotfoundexception\",{\"1\":{\"1392\":1}}],[\"classname\",{\"1\":{\"752\":2}}],[\"class<t>\",{\"1\":{\"1392\":1}}],[\"class<\",{\"1\":{\"1392\":1,\"1468\":4}}],[\"class类名对应的值\",{\"1\":{\"1185\":1,\"1360\":1}}],[\"classloader遵循父类委派模式\",{\"1\":{\"1392\":1}}],[\"classloader的加载顺序遵循什么规则\",{\"1\":{\"1392\":1}}],[\"classloader是一个很重要的类\",{\"1\":{\"1392\":1}}],[\"classloader\",{\"1\":{\"1100\":1,\"1291\":1,\"1392\":10}}],[\"class变为\",{\"1\":{\"1087\":1,\"1280\":1}}],[\"class>\",{\"1\":{\"883\":1}}],[\"class>org\",{\"1\":{\"883\":1}}],[\"classpathxmlapplicationcontext\",{\"1\":{\"1408\":1}}],[\"classpath和application\",{\"1\":{\"1392\":1}}],[\"classpath\",{\"1\":{\"878\":3,\"891\":2,\"1392\":3,\"1507\":1}}],[\"class=\",{\"1\":{\"835\":4,\"878\":3,\"881\":1,\"882\":1,\"884\":1,\"895\":1,\"928\":2,\"1176\":2,\"1353\":2,\"1410\":2}}],[\"classes\",{\"1\":{\"776\":2}}],[\"classworlds类加载器框架\",{\"1\":{\"764\":1}}],[\"class\",{\"1\":{\"88\":1,\"89\":1,\"92\":2,\"93\":2,\"190\":2,\"191\":2,\"192\":2,\"193\":3,\"194\":2,\"195\":2,\"196\":4,\"197\":5,\"198\":2,\"199\":2,\"200\":2,\"222\":1,\"338\":1,\"339\":2,\"341\":2,\"342\":3,\"390\":2,\"405\":2,\"406\":1,\"417\":1,\"430\":1,\"441\":1,\"711\":1,\"752\":1,\"755\":2,\"800\":3,\"810\":2,\"817\":1,\"820\":1,\"826\":2,\"833\":4,\"853\":2,\"855\":1,\"856\":2,\"857\":2,\"858\":2,\"888\":2,\"891\":4,\"892\":4,\"893\":3,\"894\":1,\"912\":1,\"927\":1,\"939\":1,\"1001\":1,\"1041\":2,\"1042\":2,\"1043\":1,\"1046\":1,\"1048\":1,\"1049\":6,\"1050\":3,\"1061\":5,\"1062\":1,\"1064\":4,\"1087\":1,\"1105\":2,\"1210\":1,\"1242\":2,\"1243\":2,\"1244\":1,\"1247\":1,\"1249\":1,\"1250\":6,\"1251\":3,\"1259\":5,\"1260\":1,\"1262\":4,\"1280\":1,\"1296\":2,\"1382\":1,\"1386\":3,\"1390\":4,\"1392\":7,\"1402\":7,\"1404\":1,\"1410\":1,\"1414\":1,\"1416\":2,\"1424\":5,\"1442\":1,\"1444\":1,\"1446\":2,\"1448\":9,\"1462\":1,\"1466\":1,\"1468\":13,\"1474\":3,\"1478\":1,\"1480\":1,\"1481\":2,\"1494\":2,\"1507\":1}}],[\"cloneable\",{\"1\":{\"1404\":1}}],[\"clone\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"closing\",{\"1\":{\"853\":1}}],[\"close=\",{\"1\":{\"787\":1,\"850\":1}}],[\"close\",{\"1\":{\"711\":2,\"800\":3,\"810\":1,\"814\":1,\"833\":1,\"850\":1,\"853\":1,\"939\":2,\"1135\":2,\"1320\":2,\"1478\":1}}],[\"clock\",{\"1\":{\"441\":1}}],[\"cloud\",{\"1\":{\"238\":1,\"587\":1,\"1408\":1}}],[\"cluster来管理和监控分片集群\",{\"1\":{\"1426\":1}}],[\"cluster\",{\"0\":{\"469\":1},\"1\":{\"129\":1,\"133\":1,\"459\":2,\"664\":1,\"1005\":1,\"1162\":2,\"1214\":1,\"1342\":2,\"1418\":1}}],[\"card\",{\"1\":{\"1398\":3}}],[\"cardinality\",{\"1\":{\"569\":1}}],[\"capacity\",{\"1\":{\"1386\":1,\"1404\":3,\"1406\":2}}],[\"capacity的容量会扩大两倍\",{\"1\":{\"1380\":1}}],[\"caffeine\",{\"1\":{\"1002\":2,\"1211\":2}}],[\"causes\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"cause\",{\"1\":{\"842\":2,\"863\":1,\"892\":6}}],[\"cas使用时\",{\"1\":{\"1476\":1}}],[\"cas是compare\",{\"1\":{\"1476\":1}}],[\"cas\",{\"0\":{\"1476\":1},\"1\":{\"1378\":1,\"1380\":1,\"1476\":15}}],[\"cassandra\",{\"1\":{\"651\":1}}],[\"case\",{\"0\":{\"192\":1},\"1\":{\"192\":2,\"790\":3}}],[\"case语句\",{\"0\":{\"192\":1}}],[\"called\",{\"1\":{\"1474\":3}}],[\"callerrunspolicy\",{\"1\":{\"1384\":2}}],[\"call\",{\"1\":{\"459\":1}}],[\"campaign\",{\"1\":{\"238\":1}}],[\"cache为了优化读写性能\",{\"1\":{\"1124\":1,\"1312\":1}}],[\"cache中已经存在的对象的引用\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"cache中缓存项目的有效信息\",{\"1\":{\"123\":1}}],[\"cachemap\",{\"1\":{\"1001\":6,\"1210\":6}}],[\"cachesize\",{\"1\":{\"1001\":5,\"1210\":5}}],[\"cacheenabled\",{\"1\":{\"853\":1}}],[\"cache指令无效的参数中一定的时间范围内可以使用的最小文件数\",{\"1\":{\"123\":1}}],[\"cache\",{\"1\":{\"123\":11,\"390\":1,\"677\":1,\"853\":1,\"1005\":1,\"1007\":4,\"1028\":5,\"1042\":6,\"1124\":1,\"1135\":1,\"1214\":1,\"1216\":4,\"1232\":5,\"1243\":6,\"1312\":1,\"1320\":1}}],[\"cannot\",{\"1\":{\"200\":2,\"589\":1}}],[\"can\",{\"1\":{\"123\":1,\"129\":1,\"169\":1,\"441\":2,\"540\":1,\"541\":1,\"589\":2,\"928\":2,\"1422\":1}}],[\"catalog\",{\"1\":{\"766\":1,\"767\":1}}],[\"catania\",{\"1\":{\"723\":5}}],[\"category\",{\"1\":{\"447\":1}}],[\"catch\",{\"1\":{\"200\":1,\"224\":2,\"225\":1,\"338\":1,\"441\":1,\"711\":3,\"752\":1,\"893\":2,\"894\":3,\"939\":2,\"1049\":1,\"1061\":2,\"1062\":2,\"1064\":4,\"1250\":1,\"1259\":2,\"1260\":2,\"1262\":4,\"1390\":1,\"1410\":2,\"1446\":2,\"1494\":1}}],[\"cat\",{\"1\":{\"107\":1,\"111\":4,\"465\":1,\"466\":1,\"515\":2,\"789\":1}}],[\"children\",{\"1\":{\"1466\":2}}],[\"child\",{\"1\":{\"1420\":2}}],[\"china\",{\"1\":{\"473\":2,\"568\":1}}],[\"chroot\",{\"1\":{\"1202\":3,\"1375\":3}}],[\"chroot特性\",{\"0\":{\"1202\":1,\"1375\":1}}],[\"cheapobj<mtsynchronizer>\",{\"1\":{\"1481\":1}}],[\"cherry\",{\"0\":{\"980\":1},\"1\":{\"980\":15,\"982\":1}}],[\"check\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"checks=0\",{\"1\":{\"887\":1}}],[\"checkouttimeout\",{\"1\":{\"878\":1}}],[\"checkout\",{\"1\":{\"111\":2,\"976\":1,\"978\":2,\"980\":1}}],[\"ch\",{\"1\":{\"884\":2}}],[\"choose>\",{\"1\":{\"848\":1}}],[\"choose\",{\"0\":{\"848\":1},\"1\":{\"850\":1,\"1134\":1,\"1319\":1}}],[\"chown\",{\"1\":{\"107\":1,\"111\":1}}],[\"chapter\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"chaining\",{\"1\":{\"687\":1}}],[\"chance\",{\"1\":{\"1412\":1}}],[\"channels\",{\"1\":{\"1478\":4}}],[\"channel可以进行读写操作\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"channelpipeline\",{\"1\":{\"991\":1}}],[\"channelhandler\",{\"1\":{\"991\":2}}],[\"channel处理io操作\",{\"1\":{\"991\":1}}],[\"channelfuturelistener\",{\"1\":{\"991\":1}}],[\"channelfuture\",{\"1\":{\"991\":2}}],[\"channel\",{\"1\":{\"991\":1,\"1478\":14}}],[\"chan\",{\"1\":{\"492\":1}}],[\"char\",{\"0\":{\"602\":1},\"1\":{\"682\":1,\"799\":1,\"1420\":1,\"1446\":2}}],[\"charat\",{\"1\":{\"390\":1}}],[\"characterencoding=utf8\",{\"1\":{\"879\":1,\"1507\":1}}],[\"characterencoding=utf\",{\"1\":{\"806\":1,\"927\":1}}],[\"character\",{\"1\":{\"341\":1,\"486\":1,\"1042\":1,\"1243\":1}}],[\"charset=\",{\"1\":{\"895\":1}}],[\"charset=utf\",{\"1\":{\"894\":2,\"895\":1,\"1049\":1,\"1250\":1}}],[\"charset=utf8mb4\",{\"1\":{\"640\":1}}],[\"charset=utf8\",{\"1\":{\"570\":1,\"799\":1,\"855\":1,\"858\":3,\"887\":2}}],[\"charset=latin1\",{\"1\":{\"789\":1}}],[\"charset\",{\"1\":{\"123\":2,\"1478\":4}}],[\"chatroomserver\",{\"1\":{\"1478\":1}}],[\"chat\",{\"1\":{\"294\":1}}],[\"chatgpt\",{\"1\":{\"264\":1},\"2\":{\"279\":1,\"285\":1,\"299\":1}}],[\"chmod\",{\"1\":{\"107\":1}}],[\"cpu相关日志\",{\"1\":{\"1400\":1}}],[\"cpu不是redis的瓶颈\",{\"1\":{\"1157\":1,\"1337\":1}}],[\"cpu\",{\"1\":{\"999\":3,\"1045\":1,\"1100\":1,\"1208\":3,\"1246\":1,\"1291\":1,\"1382\":2,\"1400\":1,\"1408\":2,\"1418\":1,\"1476\":1}}],[\"cpu等运行情况\",{\"1\":{\"1400\":1}}],[\"cpu等\",{\"1\":{\"578\":1}}],[\"cp27m\",{\"1\":{\"961\":1}}],[\"cp27\",{\"1\":{\"961\":1}}],[\"cp\",{\"1\":{\"107\":1,\"108\":2}}],[\"cdb\",{\"1\":{\"927\":1}}],[\"cdata\",{\"1\":{\"864\":7,\"928\":7}}],[\"cd\",{\"1\":{\"107\":1,\"108\":1,\"142\":1,\"461\":1,\"465\":1,\"466\":1,\"660\":1,\"661\":1,\"735\":1}}],[\"cdots\",{\"1\":{\"33\":1}}],[\"cnblogs\",{\"1\":{\"691\":1,\"696\":1,\"982\":1,\"1025\":1,\"1045\":2,\"1169\":1,\"1229\":1,\"1246\":2,\"1346\":1}}],[\"cn\",{\"1\":{\"98\":1,\"123\":2,\"174\":1,\"205\":1,\"208\":1,\"209\":2,\"238\":1,\"283\":1,\"297\":1,\"417\":1,\"488\":1,\"650\":1,\"722\":1,\"726\":1,\"727\":1,\"731\":1,\"901\":1,\"902\":1,\"915\":3,\"939\":2,\"959\":2,\"969\":1,\"1029\":1,\"1030\":1,\"1233\":1,\"1234\":1,\"1380\":1,\"1382\":1,\"1384\":1,\"1386\":1,\"1388\":1,\"1390\":1,\"1394\":1,\"1396\":1,\"1398\":1,\"1400\":1,\"1402\":1,\"1404\":1,\"1406\":1,\"1408\":1,\"1410\":1,\"1412\":1,\"1414\":1,\"1416\":1,\"1418\":1,\"1420\":1,\"1422\":1,\"1424\":1,\"1426\":1,\"1428\":1,\"1430\":1,\"1432\":1,\"1434\":1,\"1436\":1,\"1438\":1,\"1440\":1,\"1446\":1,\"1448\":1,\"1450\":1,\"1452\":1,\"1454\":1,\"1456\":1,\"1458\":1,\"1460\":1,\"1462\":1,\"1464\":1,\"1466\":1,\"1468\":1,\"1470\":1,\"1474\":1,\"1476\":1,\"1478\":1,\"1481\":1,\"1485\":1,\"1494\":1,\"1502\":1,\"1507\":7,\"1512\":2,\"1515\":2,\"1525\":1}}],[\"c++\",{\"1\":{\"72\":1,\"652\":1,\"1388\":1}}],[\"c\",{\"1\":{\"72\":1,\"126\":1,\"152\":2,\"162\":5,\"163\":5,\"169\":1,\"174\":1,\"341\":2,\"417\":2,\"561\":1,\"652\":3,\"660\":1,\"666\":2,\"682\":3,\"683\":1,\"698\":1,\"770\":3,\"980\":2,\"1025\":1,\"1035\":2,\"1061\":2,\"1169\":2,\"1171\":2,\"1175\":1,\"1229\":1,\"1239\":1,\"1259\":2,\"1346\":2,\"1348\":2,\"1352\":1,\"1382\":1,\"1422\":2,\"1502\":1}}],[\"code>\",{\"1\":{\"1058\":3,\"1256\":3}}],[\"code\",{\"1\":{\"892\":1,\"895\":1,\"1058\":1,\"1173\":1,\"1256\":1,\"1350\":1,\"1494\":8,\"1502\":1}}],[\"codec\",{\"1\":{\"162\":1}}],[\"codecs\",{\"1\":{\"161\":1}}],[\"colortype\",{\"1\":{\"1402\":5}}],[\"color\",{\"1\":{\"1402\":4}}],[\"coloreo\",{\"1\":{\"1398\":1}}],[\"colors\",{\"1\":{\"161\":1}}],[\"collectyounggengarbage\",{\"1\":{\"1398\":1}}],[\"collectonlyyonggen\",{\"1\":{\"1398\":2}}],[\"collectgarbage\",{\"1\":{\"1398\":3}}],[\"collections\",{\"0\":{\"1070\":1,\"1265\":1},\"1\":{\"1070\":2,\"1265\":2,\"1440\":1,\"1442\":2,\"1446\":1,\"1448\":1}}],[\"collections<\",{\"1\":{\"875\":2}}],[\"collection包括\",{\"1\":{\"1069\":1,\"1264\":1}}],[\"collection<map\",{\"1\":{\"1001\":1,\"1210\":1}}],[\"collection>\",{\"1\":{\"857\":1,\"858\":1}}],[\"collection\",{\"0\":{\"1070\":1,\"1265\":1},\"1\":{\"850\":1,\"857\":1,\"1069\":1,\"1070\":1,\"1264\":1,\"1265\":1}}],[\"collection=\",{\"1\":{\"787\":2,\"790\":3,\"850\":1}}],[\"columnnames\",{\"1\":{\"1133\":2,\"1318\":2}}],[\"columnnumber\",{\"1\":{\"863\":1}}],[\"column=\",{\"1\":{\"856\":2,\"857\":3,\"858\":4}}],[\"column`\",{\"1\":{\"789\":1}}],[\"column1\",{\"1\":{\"642\":1}}],[\"columns\",{\"1\":{\"622\":1}}],[\"column\",{\"1\":{\"569\":1,\"589\":3,\"618\":1,\"621\":1,\"622\":2,\"634\":3,\"636\":7,\"641\":1}}],[\"coerce\",{\"1\":{\"493\":1}}],[\"co\",{\"1\":{\"472\":1,\"484\":1,\"488\":1,\"510\":1,\"1029\":1,\"1030\":1,\"1233\":1,\"1234\":1}}],[\"correct\",{\"1\":{\"1394\":1}}],[\"core模块开始阅读源码\",{\"1\":{\"1432\":1}}],[\"core模块是spring的核心类库\",{\"1\":{\"1168\":1,\"1345\":1}}],[\"core实现了ioc功能\",{\"1\":{\"1168\":1,\"1345\":1}}],[\"core\",{\"1\":{\"884\":1,\"1168\":1,\"1345\":1}}],[\"core<\",{\"1\":{\"773\":1,\"875\":3}}],[\"core的传递依赖\",{\"1\":{\"773\":1}}],[\"core的间接依赖的版本号\",{\"1\":{\"772\":1}}],[\"cors\",{\"1\":{\"459\":3,\"1093\":2,\"1286\":2}}],[\"cork的选项\",{\"1\":{\"123\":1}}],[\"course\",{\"1\":{\"790\":2,\"1134\":4,\"1319\":4}}],[\"coutarray\",{\"1\":{\"413\":4}}],[\"countdown\",{\"1\":{\"1061\":1,\"1259\":1,\"1390\":1}}],[\"countdownlatchdemo\",{\"1\":{\"1390\":1}}],[\"countdownlatch和cyclicbarrier\",{\"0\":{\"1390\":1},\"1\":{\"1390\":1}}],[\"countdownlatch\",{\"0\":{\"1061\":1,\"1259\":1},\"1\":{\"1061\":11,\"1259\":11,\"1390\":14}}],[\"counter\",{\"1\":{\"666\":4,\"946\":1,\"1480\":1}}],[\"country\",{\"1\":{\"473\":1,\"568\":5}}],[\"count=262144\",{\"1\":{\"456\":1}}],[\"count配置项可实现\",{\"1\":{\"456\":1}}],[\"counting\",{\"0\":{\"410\":1},\"1\":{\"698\":1}}],[\"count++\",{\"1\":{\"338\":2,\"1386\":1,\"1480\":1}}],[\"count\",{\"1\":{\"5\":1,\"160\":2,\"338\":2,\"667\":6,\"668\":2,\"669\":3,\"670\":3,\"1386\":2,\"1480\":3,\"1481\":2}}],[\"cookie不是很安全\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"cookie数据存放在客户的浏览器上\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"cookies\",{\"1\":{\"984\":1}}],[\"cookie\",{\"1\":{\"211\":2,\"1088\":3,\"1281\":3}}],[\"coordination\",{\"1\":{\"169\":4}}],[\"cover\",{\"1\":{\"203\":1}}],[\"copyonwritearraylist\",{\"1\":{\"1076\":2,\"1271\":2,\"1404\":1,\"1480\":1}}],[\"copyof\",{\"1\":{\"338\":2,\"405\":4,\"417\":1}}],[\"copy到python安装目录下的lib目录当中\",{\"1\":{\"961\":1}}],[\"copy\",{\"0\":{\"489\":1},\"1\":{\"123\":1,\"146\":2,\"149\":1,\"150\":1,\"153\":1,\"163\":4,\"489\":7,\"493\":1,\"913\":1,\"1514\":1}}],[\"conn\",{\"1\":{\"1133\":2,\"1318\":2,\"1428\":6}}],[\"connected\",{\"1\":{\"1478\":1}}],[\"connection\",{\"1\":{\"800\":7,\"852\":6,\"853\":4,\"1133\":1,\"1318\":1,\"1422\":1}}],[\"connections\",{\"1\":{\"123\":1}}],[\"connector\",{\"1\":{\"798\":1,\"875\":1,\"925\":1,\"1507\":1}}],[\"connect\",{\"1\":{\"123\":1,\"1422\":1}}],[\"conditionexpression>\",{\"1\":{\"928\":6}}],[\"condition\",{\"1\":{\"618\":2,\"1058\":1,\"1256\":1}}],[\"conditions\",{\"1\":{\"169\":1}}],[\"containing\",{\"1\":{\"950\":1}}],[\"containskey\",{\"1\":{\"406\":1}}],[\"contains\",{\"1\":{\"390\":6,\"1462\":1}}],[\"contact\",{\"1\":{\"751\":1,\"752\":1,\"912\":1,\"1061\":2,\"1062\":1,\"1064\":1,\"1259\":2,\"1260\":1,\"1262\":1}}],[\"control等高级监控与故障排除工具的使用\",{\"1\":{\"1400\":1}}],[\"control\",{\"1\":{\"1170\":1,\"1347\":1,\"1408\":1}}],[\"control的缩写\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"controller层的bean\",{\"1\":{\"1402\":1}}],[\"controller会将leader的改变直接通过rpc的方式\",{\"1\":{\"1122\":1,\"1310\":1}}],[\"controller\",{\"1\":{\"749\":1,\"882\":1,\"894\":2,\"912\":1,\"939\":3,\"1049\":1,\"1122\":2,\"1123\":5,\"1250\":1,\"1310\":2,\"1311\":5,\"1402\":2,\"1408\":1}}],[\"contract\",{\"1\":{\"540\":1,\"541\":1}}],[\"continue\",{\"1\":{\"339\":2,\"405\":1,\"406\":1}}],[\"context模块提供框架式的bean的访问方式\",{\"1\":{\"1168\":1,\"1345\":1}}],[\"contextconfiguration\",{\"1\":{\"891\":2}}],[\"context=\",{\"1\":{\"878\":1,\"881\":1,\"882\":1}}],[\"context<\",{\"1\":{\"778\":1,\"875\":1}}],[\"context\",{\"1\":{\"193\":2,\"197\":1,\"878\":4,\"881\":4,\"882\":4,\"891\":2,\"1168\":1,\"1345\":1,\"1408\":1}}],[\"contentions\",{\"1\":{\"1481\":2}}],[\"contention\",{\"1\":{\"1481\":1}}],[\"content=\",{\"1\":{\"895\":1}}],[\"contenttype=\",{\"1\":{\"895\":1}}],[\"contenttype\",{\"1\":{\"882\":1}}],[\"contents\",{\"1\":{\"693\":1}}],[\"content\",{\"1\":{\"153\":1,\"294\":1,\"473\":1,\"489\":3,\"570\":3,\"1456\":3,\"1494\":1}}],[\"concurrentlinkedqueue\",{\"1\":{\"1476\":1}}],[\"concurrenthashmap\",{\"1\":{\"1069\":1,\"1072\":1,\"1264\":1,\"1267\":1,\"1380\":4,\"1406\":1,\"1446\":2,\"1480\":1}}],[\"concurrent\",{\"1\":{\"1061\":2,\"1062\":3,\"1064\":1,\"1107\":2,\"1259\":2,\"1260\":3,\"1262\":1,\"1298\":2,\"1390\":4,\"1398\":3,\"1480\":1}}],[\"concurrency\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"concurs\",{\"1\":{\"123\":1}}],[\"concretestrategya\",{\"1\":{\"193\":1}}],[\"consume\",{\"1\":{\"1446\":1,\"1450\":3}}],[\"consumer<string\",{\"1\":{\"1448\":1}}],[\"consumerconfig\",{\"1\":{\"1448\":4}}],[\"consumerprops\",{\"1\":{\"1448\":6}}],[\"consumer从集群中读取消息\",{\"1\":{\"1444\":1}}],[\"consumerrecord<string\",{\"1\":{\"1442\":1,\"1448\":1}}],[\"consumerrecords<string\",{\"1\":{\"1442\":1,\"1448\":1}}],[\"consumerrecords\",{\"1\":{\"1442\":1}}],[\"consumer\",{\"1\":{\"1116\":5,\"1304\":5,\"1438\":1,\"1442\":6,\"1444\":1,\"1448\":6,\"1450\":6}}],[\"consumer最多只能消费到hw所在的位置上一条信息\",{\"1\":{\"1114\":1,\"1302\":1}}],[\"consumers\",{\"1\":{\"176\":1}}],[\"consequence\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"consistency\",{\"1\":{\"1035\":2,\"1144\":1,\"1197\":1,\"1239\":1,\"1327\":1,\"1370\":1}}],[\"consistent\",{\"1\":{\"129\":1}}],[\"consoleappender\",{\"1\":{\"884\":1}}],[\"construct\",{\"1\":{\"1410\":1}}],[\"constructor<employee>\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"constructor类里也有一个newinstance方法可以创建对象\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"constructor\",{\"1\":{\"540\":1,\"541\":1,\"1050\":2,\"1064\":1,\"1251\":2,\"1262\":1,\"1402\":1}}],[\"const\",{\"1\":{\"687\":5}}],[\"conf\",{\"1\":{\"142\":1,\"175\":1,\"456\":1,\"660\":1,\"711\":6,\"736\":1,\"737\":2,\"764\":1,\"765\":1}}],[\"configs\",{\"1\":{\"950\":3}}],[\"configlocation\",{\"1\":{\"878\":1}}],[\"configureblocking\",{\"1\":{\"1478\":2}}],[\"configured\",{\"1\":{\"1042\":1,\"1243\":1}}],[\"configure\",{\"1\":{\"142\":1,\"1408\":1}}],[\"configuration>\",{\"1\":{\"806\":1,\"808\":1,\"875\":1,\"880\":1,\"884\":1,\"907\":2,\"1525\":1}}],[\"configuration\",{\"1\":{\"123\":1,\"126\":1,\"169\":1,\"806\":1,\"808\":1,\"825\":2,\"880\":1,\"907\":1,\"950\":2,\"1049\":1,\"1250\":1,\"1402\":2,\"1507\":1}}],[\"config\",{\"0\":{\"806\":1,\"808\":1,\"828\":1,\"880\":1},\"1\":{\"126\":1,\"175\":1,\"459\":1,\"806\":2,\"808\":2,\"809\":1,\"810\":1,\"814\":1,\"818\":1,\"820\":2,\"822\":1,\"826\":2,\"828\":1,\"829\":2,\"833\":1,\"835\":1,\"845\":1,\"853\":1,\"878\":2,\"880\":3,\"915\":1,\"950\":2,\"1084\":1,\"1136\":3,\"1183\":1,\"1277\":1,\"1321\":3,\"1358\":1,\"1448\":7,\"1507\":1}}],[\"confpasswd\",{\"1\":{\"123\":1}}],[\"conf详解\",{\"0\":{\"123\":1}}],[\"combopooleddatasource\",{\"1\":{\"878\":1}}],[\"common\",{\"1\":{\"915\":1,\"1442\":3,\"1448\":2}}],[\"commonsql\",{\"1\":{\"845\":10}}],[\"commons\",{\"1\":{\"441\":3}}],[\"comment=\",{\"1\":{\"640\":1,\"887\":2}}],[\"comment\",{\"1\":{\"569\":1,\"640\":1,\"665\":1,\"789\":3,\"858\":1,\"887\":6,\"1507\":4}}],[\"command+c\",{\"1\":{\"979\":1}}],[\"command\",{\"1\":{\"196\":6}}],[\"commandexample\",{\"1\":{\"196\":1}}],[\"committed\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"committ\",{\"1\":{\"1144\":1,\"1327\":1}}],[\"commit\",{\"1\":{\"111\":1,\"618\":1,\"619\":2,\"621\":2,\"622\":1,\"634\":1,\"636\":2,\"814\":1,\"820\":3,\"833\":1,\"976\":1,\"978\":1,\"980\":1,\"981\":10,\"1135\":1,\"1320\":1}}],[\"compareandset\",{\"1\":{\"1476\":1}}],[\"compareandsetstate\",{\"1\":{\"1390\":1}}],[\"compareto\",{\"1\":{\"1466\":1}}],[\"compare\",{\"1\":{\"1382\":3}}],[\"compose不再需要使用shell脚本来启动容器\",{\"1\":{\"1017\":1,\"1223\":1}}],[\"compose\",{\"1\":{\"1017\":6,\"1223\":6}}],[\"compose时如何保证容器a先于容器b运行\",{\"0\":{\"1017\":1,\"1223\":1}}],[\"componentscan\",{\"1\":{\"1184\":1,\"1359\":1,\"1402\":1}}],[\"component\",{\"1\":{\"752\":2,\"881\":1,\"882\":1,\"1049\":1,\"1250\":1,\"1402\":1}}],[\"compiler\",{\"1\":{\"875\":1,\"907\":2}}],[\"compile\",{\"1\":{\"768\":1,\"769\":1,\"776\":2}}],[\"complete>\",{\"1\":{\"928\":1}}],[\"complete\",{\"1\":{\"928\":1,\"1392\":1}}],[\"complete=\",{\"1\":{\"883\":1}}],[\"completion\",{\"1\":{\"297\":1}}],[\"complex\",{\"1\":{\"156\":4}}],[\"comp\",{\"1\":{\"123\":1}}],[\"com\",{\"1\":{\"6\":5,\"56\":1,\"80\":1,\"88\":1,\"89\":1,\"92\":1,\"93\":1,\"123\":1,\"126\":1,\"127\":1,\"129\":2,\"133\":1,\"153\":1,\"164\":1,\"176\":2,\"238\":3,\"247\":1,\"249\":1,\"250\":1,\"277\":1,\"286\":2,\"291\":1,\"292\":1,\"296\":4,\"297\":2,\"341\":1,\"342\":1,\"389\":1,\"390\":3,\"430\":1,\"441\":1,\"458\":2,\"461\":1,\"465\":1,\"466\":1,\"467\":1,\"551\":1,\"589\":1,\"590\":3,\"611\":1,\"660\":1,\"668\":1,\"669\":1,\"691\":1,\"696\":1,\"706\":1,\"734\":1,\"744\":1,\"749\":1,\"751\":3,\"752\":5,\"753\":1,\"768\":1,\"769\":1,\"777\":1,\"779\":1,\"800\":1,\"806\":2,\"807\":1,\"808\":1,\"810\":1,\"816\":1,\"817\":2,\"818\":5,\"820\":3,\"822\":1,\"825\":4,\"826\":9,\"831\":3,\"835\":1,\"842\":7,\"843\":2,\"845\":1,\"847\":1,\"848\":1,\"849\":2,\"850\":1,\"852\":18,\"853\":7,\"856\":4,\"857\":3,\"858\":4,\"875\":3,\"878\":1,\"895\":2,\"900\":1,\"901\":1,\"907\":1,\"912\":3,\"915\":2,\"919\":1,\"923\":1,\"927\":2,\"928\":2,\"930\":1,\"934\":1,\"936\":1,\"941\":2,\"947\":1,\"948\":2,\"951\":1,\"952\":2,\"962\":1,\"966\":1,\"967\":1,\"976\":2,\"980\":1,\"982\":2,\"987\":2,\"1019\":1,\"1025\":2,\"1027\":1,\"1041\":1,\"1045\":2,\"1049\":1,\"1056\":1,\"1058\":1,\"1061\":4,\"1062\":3,\"1064\":2,\"1141\":1,\"1169\":1,\"1225\":1,\"1229\":2,\"1231\":1,\"1242\":1,\"1246\":2,\"1250\":1,\"1254\":1,\"1256\":1,\"1259\":4,\"1260\":3,\"1262\":2,\"1324\":1,\"1346\":1,\"1380\":2,\"1382\":2,\"1384\":2,\"1386\":2,\"1388\":2,\"1390\":2,\"1392\":2,\"1394\":2,\"1396\":2,\"1398\":2,\"1400\":2,\"1402\":2,\"1404\":2,\"1406\":2,\"1408\":2,\"1410\":2,\"1412\":2,\"1414\":2,\"1416\":2,\"1418\":2,\"1420\":2,\"1422\":2,\"1424\":2,\"1426\":2,\"1428\":2,\"1430\":2,\"1432\":2,\"1434\":2,\"1436\":2,\"1438\":2,\"1440\":2,\"1446\":2,\"1448\":2,\"1450\":2,\"1452\":2,\"1454\":2,\"1456\":2,\"1458\":2,\"1460\":2,\"1462\":2,\"1464\":2,\"1466\":2,\"1468\":2,\"1470\":2,\"1474\":2,\"1476\":2,\"1478\":2,\"1481\":2,\"1502\":1,\"1507\":3,\"1512\":1}}],[\"sz\",{\"1\":{\"1386\":2}}],[\"sfence\",{\"1\":{\"1382\":1}}],[\"s1cwut9wvusrmyw\",{\"1\":{\"1056\":1,\"1254\":1}}],[\"sb\",{\"1\":{\"1049\":3,\"1250\":3}}],[\"skip>\",{\"1\":{\"907\":1}}],[\"skip=true\",{\"1\":{\"768\":1}}],[\"s64\",{\"1\":{\"687\":1}}],[\"sds是\",{\"1\":{\"683\":1}}],[\"sds可以\",{\"1\":{\"683\":1}}],[\"sds不会发生溢出的问题\",{\"1\":{\"683\":1}}],[\"sdshdr数据结构中用len属性记录了字符串的长度\",{\"1\":{\"683\":1}}],[\"sdshdr\",{\"1\":{\"682\":2}}],[\"sds\",{\"1\":{\"682\":10,\"683\":1,\"721\":1}}],[\"sds简单动态字符串好处\",{\"0\":{\"683\":1}}],[\"sds简单动态字符串\",{\"0\":{\"681\":1,\"682\":1},\"1\":{\"676\":1}}],[\"sdiffstore\",{\"1\":{\"669\":1}}],[\"sdiff\",{\"1\":{\"669\":1}}],[\"srem\",{\"1\":{\"669\":1}}],[\"srandmember\",{\"1\":{\"669\":1}}],[\"src\",{\"1\":{\"171\":1}}],[\"smallestnode\",{\"1\":{\"1466\":6}}],[\"smartinstantiationawarebeanpostprocessor\",{\"1\":{\"1412\":1}}],[\"sm1234<\",{\"1\":{\"778\":3}}],[\"smove\",{\"1\":{\"669\":1}}],[\"smembers\",{\"1\":{\"669\":1}}],[\"smith\",{\"1\":{\"489\":2}}],[\"sayhello\",{\"1\":{\"1402\":2}}],[\"satisfiy小对象分配\",{\"1\":{\"1396\":1}}],[\"safepoint\",{\"1\":{\"1398\":1}}],[\"safe机制更像是一种对\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"safe\",{\"0\":{\"1076\":1,\"1271\":1},\"1\":{\"1076\":2,\"1271\":2}}],[\"sanduzxcvbnm\",{\"1\":{\"1025\":1,\"1229\":1}}],[\"save\",{\"1\":{\"979\":2,\"1420\":3}}],[\"savelog\",{\"1\":{\"752\":2}}],[\"saxparseexception\",{\"1\":{\"863\":1}}],[\"sax\",{\"1\":{\"863\":1}}],[\"saparator\",{\"1\":{\"850\":1}}],[\"sadd\",{\"1\":{\"669\":1}}],[\"same\",{\"1\":{\"392\":1}}],[\"sample\",{\"1\":{\"161\":1,\"174\":1}}],[\"slot\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"slow\",{\"1\":{\"1142\":1,\"1325\":1,\"1481\":2}}],[\"slproweb\",{\"1\":{\"962\":1}}],[\"sleep方法属于thread类中方法\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"sleep方法和wait方法有什么区别\",{\"0\":{\"1057\":1,\"1255\":1}}],[\"sleep\",{\"1\":{\"755\":3,\"1057\":2,\"1061\":2,\"1062\":2,\"1255\":2,\"1259\":2,\"1260\":2,\"1446\":8,\"1466\":1}}],[\"slave节点接收到写入命令后将master发送过来的文件加载并写入\",{\"1\":{\"1162\":1,\"1342\":1}}],[\"slave\",{\"1\":{\"652\":1,\"655\":1,\"1143\":1,\"1162\":3,\"1326\":1,\"1342\":3}}],[\"slf4j<\",{\"1\":{\"771\":1,\"772\":1,\"778\":1}}],[\"slf4j\",{\"0\":{\"222\":1},\"1\":{\"222\":3,\"752\":3,\"778\":2,\"893\":2,\"894\":2}}],[\"s锁\",{\"1\":{\"618\":1,\"638\":1}}],[\"snippet\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"snowflakeid\",{\"1\":{\"441\":1}}],[\"snowflakeidworker\",{\"1\":{\"441\":5}}],[\"snowflake每秒能够产生26万id左右\",{\"1\":{\"441\":1}}],[\"snowflake的优点是\",{\"1\":{\"441\":1}}],[\"snowflake的结构如下\",{\"1\":{\"441\":1}}],[\"snowflake<br>\",{\"1\":{\"441\":1}}],[\"snowflake可以保证\",{\"1\":{\"440\":1}}],[\"snowflake算法生成id的结果是一个64bit大小的整数\",{\"1\":{\"440\":1}}],[\"snowflake\",{\"0\":{\"439\":1},\"1\":{\"440\":2}}],[\"snapshot<\",{\"1\":{\"771\":1,\"778\":3,\"875\":1,\"907\":1}}],[\"snapshot\",{\"1\":{\"638\":1,\"766\":3,\"767\":2,\"1514\":3,\"1524\":1}}],[\"snap\",{\"1\":{\"100\":2,\"101\":1}}],[\"snapd\",{\"0\":{\"99\":1},\"1\":{\"99\":1}}],[\"sweep算法\",{\"1\":{\"1394\":1}}],[\"sweep\",{\"1\":{\"1107\":1,\"1298\":1,\"1396\":2}}],[\"swing\",{\"1\":{\"1476\":1}}],[\"swing程序中\",{\"1\":{\"1090\":1,\"1283\":1}}],[\"switch\",{\"1\":{\"192\":1,\"228\":1}}],[\"switchcaseexample\",{\"1\":{\"192\":1}}],[\"swap的缩写\",{\"1\":{\"1476\":1}}],[\"swap\",{\"1\":{\"417\":3}}],[\"sql优化方式\",{\"0\":{\"1149\":1,\"1332\":1}}],[\"sql中的drop\",{\"1\":{\"1147\":1,\"1330\":1}}],[\"sql执行线程\",{\"1\":{\"1143\":1,\"1326\":1}}],[\"sql>\",{\"1\":{\"845\":3}}],[\"sql片段也可以定义在单独的\",{\"1\":{\"845\":1}}],[\"sql片段\",{\"0\":{\"845\":1}}],[\"sqlsession\",{\"1\":{\"810\":8,\"817\":12,\"820\":8,\"826\":4,\"852\":3,\"853\":4,\"1136\":2,\"1321\":2,\"1416\":7}}],[\"sqlsessionfactorybeanname\",{\"1\":{\"878\":1}}],[\"sqlsessionfactorybean\",{\"1\":{\"878\":1}}],[\"sqlsessionfactorybuilder\",{\"1\":{\"809\":1,\"810\":2,\"820\":2,\"826\":2,\"829\":3,\"1416\":1}}],[\"sqlsessionfactory\",{\"1\":{\"809\":2,\"810\":5,\"820\":4,\"826\":4,\"829\":2,\"834\":1,\"853\":1,\"878\":3,\"1136\":1,\"1321\":1,\"1416\":2}}],[\"sql语句中某个参数进行占位的时候\",{\"1\":{\"842\":1}}],[\"sql语句动态生成的时候\",{\"1\":{\"842\":1}}],[\"sql语句查询结果集的封装类型\",{\"1\":{\"807\":1,\"818\":1,\"826\":1}}],[\"sql语句\",{\"1\":{\"807\":1,\"818\":1,\"826\":1,\"1507\":1}}],[\"sql结构体\",{\"1\":{\"789\":1}}],[\"sql篇\",{\"0\":{\"588\":1}}],[\"sql\",{\"0\":{\"599\":2,\"635\":1,\"651\":1,\"887\":1,\"1134\":2,\"1319\":2},\"1\":{\"564\":2,\"588\":3,\"634\":1,\"800\":6,\"835\":1,\"878\":1,\"927\":1,\"1131\":2,\"1132\":1,\"1133\":1,\"1134\":6,\"1136\":5,\"1316\":2,\"1317\":1,\"1318\":1,\"1319\":6,\"1321\":5,\"1416\":13,\"1507\":3}}],[\"sqqueue<character>\",{\"1\":{\"341\":2}}],[\"sqqueue<t>\",{\"1\":{\"341\":1}}],[\"sqqueue\",{\"1\":{\"341\":1}}],[\"squid2\",{\"1\":{\"123\":1}}],[\"squid1\",{\"1\":{\"123\":1}}],[\"sss\",{\"1\":{\"884\":1}}],[\"ssm实例\",{\"0\":{\"886\":1}}],[\"ssm1\",{\"1\":{\"879\":1,\"887\":1}}],[\"ssm\",{\"1\":{\"870\":1,\"885\":1,\"887\":1,\"895\":2},\"2\":{\"896\":1}}],[\"ssh\",{\"1\":{\"779\":1}}],[\"sscan\",{\"1\":{\"669\":1}}],[\"ss\",{\"1\":{\"144\":1,\"146\":2,\"158\":1,\"863\":2,\"864\":2,\"884\":1}}],[\"ssl\",{\"1\":{\"98\":2,\"123\":8,\"459\":1,\"915\":1,\"989\":1}}],[\"split\",{\"1\":{\"1122\":1,\"1310\":1,\"1380\":1}}],[\"spinearly\",{\"1\":{\"1481\":2}}],[\"spinduration\",{\"1\":{\"1481\":2}}],[\"spinclock\",{\"1\":{\"1481\":2}}],[\"spinfreq\",{\"1\":{\"1481\":2}}],[\"sping\",{\"1\":{\"895\":1}}],[\"spider\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"specs\",{\"1\":{\"1041\":1,\"1242\":1}}],[\"spec\",{\"1\":{\"928\":4}}],[\"specifies\",{\"1\":{\"123\":1}}],[\"span\",{\"1\":{\"691\":1}}],[\"space\",{\"1\":{\"129\":1,\"934\":1,\"952\":1}}],[\"spop\",{\"1\":{\"669\":1}}],[\"spdx\",{\"1\":{\"540\":1,\"541\":1}}],[\"spring循环依赖\",{\"0\":{\"1412\":1}}],[\"springbean生命周期\",{\"0\":{\"1410\":1}}],[\"springboot打包jar\",{\"0\":{\"1518\":1},\"1\":{\"1519\":1}}],[\"springboot打包docker运行\",{\"0\":{\"1510\":1},\"1\":{\"1511\":1}}],[\"springboot数据库信息配置\",{\"1\":{\"1507\":1}}],[\"springboot3\",{\"1\":{\"1507\":1}}],[\"springboot如何整合mybatis\",{\"1\":{\"1505\":1}}],[\"springboot整合mybatis\",{\"0\":{\"1505\":1}}],[\"springboot中常用的注解有\",{\"1\":{\"1402\":1}}],[\"springboot中常见的注解也说一下\",{\"1\":{\"1402\":1}}],[\"springboot启动时都做了什么\",{\"0\":{\"1187\":1,\"1362\":1}}],[\"springboot启动的时候加载主配置类\",{\"1\":{\"1185\":1,\"1360\":1}}],[\"springboot就能够在底层默认其配置\",{\"1\":{\"1186\":1,\"1361\":1}}],[\"springboot更像是一个管家\",{\"1\":{\"1186\":1,\"1361\":1}}],[\"springbootconfiguration\",{\"1\":{\"1184\":1,\"1359\":1}}],[\"springbootapplication\",{\"1\":{\"1184\":1,\"1359\":1,\"1402\":1}}],[\"springbootannotation\",{\"1\":{\"749\":1,\"751\":1,\"752\":3}}],[\"springboot+vue\",{\"1\":{\"1019\":1,\"1225\":1}}],[\"springboot的ip和端口号\",{\"1\":{\"950\":1}}],[\"springboot的pom\",{\"0\":{\"906\":1}}],[\"springboot加速初始化\",{\"1\":{\"948\":1}}],[\"springboot工程初始化\",{\"0\":{\"948\":1}}],[\"springbootqr\",{\"1\":{\"939\":2}}],[\"springboot生成二维码的正确姿势\",{\"0\":{\"933\":1,\"934\":1}}],[\"springbootdocker\",{\"1\":{\"912\":1}}],[\"springboot2\",{\"0\":{\"447\":1,\"450\":1,\"464\":1,\"481\":1,\"513\":1,\"910\":1,\"944\":1},\"1\":{\"464\":2,\"481\":2,\"513\":2,\"944\":1,\"948\":1}}],[\"springboot\",{\"0\":{\"452\":1,\"454\":1,\"897\":1,\"913\":1,\"936\":1,\"1180\":1,\"1186\":1,\"1188\":1,\"1189\":1,\"1355\":1,\"1361\":1,\"1363\":1,\"1364\":1},\"1\":{\"447\":1,\"744\":1,\"753\":1,\"899\":2,\"907\":4,\"919\":1,\"930\":1,\"941\":1,\"948\":1,\"987\":1,\"1180\":3,\"1182\":1,\"1183\":2,\"1186\":1,\"1187\":2,\"1188\":2,\"1357\":1,\"1358\":2,\"1361\":1,\"1362\":2,\"1363\":2,\"1506\":1,\"1507\":2,\"1511\":1,\"1519\":1,\"1520\":2,\"1522\":2},\"2\":{\"445\":1,\"446\":1,\"448\":1,\"449\":1,\"462\":1,\"463\":1,\"479\":1,\"480\":1,\"511\":1,\"512\":1,\"529\":1,\"530\":1,\"904\":1,\"905\":1,\"908\":1,\"909\":1,\"920\":1,\"921\":1,\"931\":1,\"932\":1,\"942\":1,\"943\":1,\"953\":1,\"954\":1,\"1192\":1,\"1509\":1,\"1517\":1,\"1527\":1}}],[\"springbootes\",{\"1\":{\"430\":1}}],[\"spring基础\",{\"0\":{\"1408\":1}}],[\"springapplicationadminjmxautoconfiguration\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"springcloud\",{\"1\":{\"1183\":1,\"1358\":1}}],[\"spring如何处理这些事务的行为\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"spring如何解决循环依赖问题\",{\"0\":{\"1176\":1,\"1353\":1}}],[\"spring的事务传播机制\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"spring的applicationcontext中配置所有的datasource\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"spring的aop中\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"spring支持编程式事务管理和声明式事务管理两种方式\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"spring会在事务开始时\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"spring会检测该对象是否实现了xxxaware接口\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"spring只提供统一事务管理接口\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"spring是无法提供事务功能的\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"spring是针对bean的生命周期进行管理的轻量级容器\",{\"1\":{\"1168\":1,\"1345\":1}}],[\"spring事务的传播机制说的是\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"spring事务的种类\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"spring事务的本质其实就是数据库对事务的支持\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"spring事务的实现方式和实现原理\",{\"0\":{\"1177\":1,\"1354\":1}}],[\"spring提前暴露的bean实例的引用在第三级缓存中进行存储\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"spring提供对jdbc的支持\",{\"1\":{\"1168\":1,\"1345\":1}}],[\"spring在单例模式下的setter方法依赖注入引起的循环依赖问题\",{\"1\":{\"1176\":1,\"1353\":1}}],[\"spring允许引入新的接口\",{\"1\":{\"1174\":1,\"1351\":1}}],[\"spring实现aop功能的原理就是代理模式\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"spring用的是双重判断加锁的单例模式\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"spring中超级常用的注解有\",{\"1\":{\"1402\":1}}],[\"spring中的隔离级别\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"spring中的beanfactory就是简单工厂模式的体现\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"spring中的bean的生命周期主要包含四个阶段\",{\"1\":{\"1171\":1,\"1348\":1}}],[\"spring中观察者模式一般用在listener的实现\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"spring中都应用了哪些设计模式\",{\"0\":{\"1173\":1,\"1350\":1}}],[\"spring器中的bean可以分为5个范围\",{\"1\":{\"1172\":1,\"1349\":1}}],[\"spring有七大功能模块\",{\"1\":{\"1168\":1,\"1345\":1}}],[\"springmv\",{\"1\":{\"1506\":1}}],[\"springmvc请求处理流程\",{\"1\":{\"1414\":1}}],[\"springmvc\",{\"0\":{\"1414\":1},\"1\":{\"883\":1,\"1186\":1,\"1361\":1,\"1414\":11}}],[\"springmetrics\",{\"1\":{\"948\":2}}],[\"spring配置文件\",{\"1\":{\"891\":1}}],[\"springjunit4classrunner\",{\"1\":{\"891\":2}}],[\"spring核心\",{\"1\":{\"875\":1}}],[\"spring<\",{\"1\":{\"875\":1}}],[\"springframework<\",{\"1\":{\"772\":1,\"773\":2,\"778\":3,\"875\":8}}],[\"springframework\",{\"1\":{\"750\":1,\"752\":1,\"878\":6,\"881\":10,\"882\":11,\"883\":1,\"891\":4,\"893\":4,\"894\":4,\"907\":4,\"912\":3,\"925\":1,\"939\":2,\"948\":2,\"1049\":1,\"1189\":2,\"1250\":1,\"1364\":2,\"1522\":1,\"1525\":1}}],[\"spring\",{\"0\":{\"867\":1,\"878\":1,\"881\":1,\"882\":1,\"1168\":2,\"1169\":1,\"1171\":1,\"1172\":1,\"1174\":1,\"1181\":1,\"1182\":1,\"1183\":1,\"1184\":1,\"1186\":1,\"1344\":1,\"1345\":2,\"1346\":1,\"1348\":1,\"1349\":1,\"1351\":1,\"1356\":1,\"1357\":1,\"1358\":1,\"1359\":1,\"1361\":1,\"1522\":1},\"1\":{\"454\":6,\"587\":4,\"744\":1,\"753\":1,\"772\":2,\"773\":1,\"778\":5,\"835\":1,\"870\":3,\"875\":13,\"878\":4,\"881\":6,\"882\":5,\"883\":6,\"890\":1,\"891\":5,\"900\":5,\"901\":1,\"907\":6,\"919\":1,\"925\":1,\"927\":1,\"952\":1,\"1049\":2,\"1090\":8,\"1167\":2,\"1171\":1,\"1173\":1,\"1181\":1,\"1182\":1,\"1184\":1,\"1185\":2,\"1186\":1,\"1189\":10,\"1190\":3,\"1250\":2,\"1283\":8,\"1348\":1,\"1350\":1,\"1356\":1,\"1357\":1,\"1359\":1,\"1360\":2,\"1361\":1,\"1364\":10,\"1365\":3,\"1408\":29,\"1410\":26,\"1412\":16,\"1414\":1,\"1494\":1,\"1506\":1,\"1507\":2,\"1522\":1,\"1525\":1},\"2\":{\"868\":1,\"869\":1,\"896\":1,\"1179\":1}}],[\"shanghai\",{\"1\":{\"1507\":1}}],[\"shape\",{\"1\":{\"507\":1}}],[\"sharing\",{\"1\":{\"1093\":1,\"1286\":1}}],[\"share\",{\"1\":{\"618\":2,\"621\":2,\"638\":1}}],[\"shared\",{\"1\":{\"123\":1,\"142\":1,\"638\":1}}],[\"shardid\",{\"1\":{\"1462\":4}}],[\"shards\",{\"1\":{\"1028\":1,\"1029\":1,\"1232\":1,\"1233\":1}}],[\"shard故障或者node宕机时\",{\"1\":{\"475\":1}}],[\"shard\",{\"0\":{\"474\":1},\"1\":{\"475\":10,\"1028\":1,\"1232\":1,\"1460\":1,\"1462\":2}}],[\"should\",{\"1\":{\"1058\":4,\"1173\":1,\"1256\":4,\"1350\":1}}],[\"shoshana\",{\"1\":{\"1045\":1,\"1246\":1}}],[\"short\",{\"1\":{\"497\":1,\"1042\":1,\"1243\":1,\"1440\":1}}],[\"show\",{\"1\":{\"157\":2,\"160\":2,\"569\":2,\"574\":1,\"644\":2,\"979\":5}}],[\"sh连接客户端\",{\"1\":{\"176\":1}}],[\"shtml\",{\"1\":{\"153\":1}}],[\"sh\",{\"1\":{\"126\":1,\"175\":4,\"176\":5,\"292\":2,\"915\":1}}],[\"stw\",{\"1\":{\"1398\":2}}],[\"stmt\",{\"1\":{\"1133\":4,\"1318\":4}}],[\"step\",{\"1\":{\"948\":1}}],[\"stereotype\",{\"1\":{\"752\":1,\"893\":1,\"939\":1}}],[\"stdoutimpl\",{\"1\":{\"1507\":1}}],[\"stdout\",{\"1\":{\"884\":2,\"1507\":1}}],[\"stdio\",{\"1\":{\"682\":1}}],[\"student\",{\"1\":{\"890\":3,\"1134\":6,\"1138\":2,\"1176\":3,\"1319\":6,\"1323\":2,\"1353\":3}}],[\"studentid=1234567890\",{\"1\":{\"894\":1}}],[\"studentid\",{\"1\":{\"888\":1,\"889\":6,\"890\":2,\"891\":4,\"893\":7,\"894\":6}}],[\"studio\",{\"0\":{\"280\":1,\"283\":1},\"1\":{\"283\":1},\"2\":{\"281\":1,\"282\":1}}],[\"stub\",{\"1\":{\"123\":1,\"1064\":1,\"1262\":1}}],[\"styled\",{\"1\":{\"169\":1}}],[\"storage\",{\"1\":{\"589\":1,\"1030\":1,\"1234\":1}}],[\"storeload\",{\"1\":{\"1382\":1}}],[\"storestore\",{\"1\":{\"1382\":1}}],[\"store\",{\"1\":{\"129\":2,\"493\":2,\"500\":1,\"677\":1,\"1382\":4}}],[\"stope\",{\"1\":{\"755\":4}}],[\"stopstate\",{\"1\":{\"197\":1}}],[\"stopcommand\",{\"1\":{\"196\":1}}],[\"stopping\",{\"1\":{\"192\":2,\"194\":1,\"196\":2,\"1058\":1,\"1256\":1}}],[\"stop\",{\"1\":{\"131\":1,\"192\":2,\"194\":1,\"196\":1,\"197\":3,\"464\":1,\"667\":2,\"670\":3,\"1058\":5,\"1107\":2,\"1256\":5,\"1298\":2,\"1394\":1}}],[\"strongrefs\",{\"1\":{\"1394\":1,\"1396\":1,\"1398\":1}}],[\"strongly\",{\"1\":{\"129\":1}}],[\"strs如果子类可以随意加载\",{\"1\":{\"1392\":1}}],[\"struts\",{\"1\":{\"1408\":1}}],[\"struts<\",{\"1\":{\"772\":1,\"773\":1}}],[\"struct\",{\"1\":{\"682\":1,\"684\":4,\"687\":5,\"691\":4,\"693\":1,\"698\":3}}],[\"structure\",{\"1\":{\"169\":1,\"677\":1,\"887\":2}}],[\"strict\",{\"1\":{\"484\":2}}],[\"string>\",{\"1\":{\"1442\":3,\"1448\":4}}],[\"string>>\",{\"1\":{\"1440\":1}}],[\"stringdeserializer\",{\"1\":{\"1442\":2,\"1448\":3}}],[\"string是immutable类的典型实现\",{\"1\":{\"1046\":1,\"1247\":1}}],[\"stringbuilder就是解决string的这个性能问题\",{\"1\":{\"1046\":1,\"1247\":1}}],[\"stringbuilder\",{\"0\":{\"1046\":1,\"1247\":1},\"1\":{\"1049\":2,\"1250\":2}}],[\"stringbuffer\",{\"0\":{\"1046\":1,\"1247\":1},\"1\":{\"1046\":3,\"1247\":3}}],[\"stringserializer\",{\"1\":{\"1448\":3}}],[\"strings\",{\"0\":{\"666\":1},\"1\":{\"656\":1,\"664\":1}}],[\"stringutils\",{\"1\":{\"441\":3,\"1410\":1}}],[\"string\",{\"0\":{\"716\":1,\"1046\":1,\"1247\":1},\"1\":{\"191\":2,\"192\":2,\"194\":2,\"195\":2,\"196\":1,\"197\":1,\"220\":2,\"223\":1,\"226\":2,\"341\":1,\"342\":1,\"390\":10,\"405\":1,\"417\":1,\"430\":1,\"441\":5,\"496\":1,\"666\":1,\"668\":1,\"669\":1,\"670\":1,\"682\":2,\"711\":2,\"716\":1,\"721\":1,\"751\":1,\"752\":2,\"755\":2,\"800\":5,\"809\":1,\"810\":20,\"816\":2,\"817\":2,\"820\":1,\"826\":5,\"842\":6,\"843\":2,\"847\":1,\"848\":1,\"849\":1,\"850\":2,\"852\":7,\"853\":1,\"855\":1,\"856\":6,\"857\":2,\"858\":3,\"888\":1,\"892\":10,\"893\":2,\"894\":2,\"912\":2,\"939\":4,\"1042\":1,\"1043\":10,\"1049\":7,\"1061\":2,\"1062\":1,\"1064\":1,\"1133\":1,\"1173\":1,\"1185\":1,\"1243\":1,\"1244\":10,\"1250\":7,\"1259\":2,\"1260\":1,\"1262\":1,\"1318\":1,\"1350\":1,\"1360\":1,\"1386\":1,\"1390\":2,\"1392\":1,\"1402\":3,\"1410\":4,\"1414\":1,\"1418\":1,\"1442\":1,\"1446\":3,\"1448\":3,\"1450\":3,\"1462\":3,\"1466\":6,\"1468\":3,\"1474\":1,\"1478\":5,\"1494\":4}}],[\"str\",{\"1\":{\"306\":1}}],[\"strategy\",{\"1\":{\"193\":6}}],[\"strategyexample\",{\"1\":{\"193\":1}}],[\"streaming\",{\"1\":{\"297\":1}}],[\"streamname\",{\"1\":{\"163\":1}}],[\"streamname`\",{\"1\":{\"163\":1}}],[\"stream=nb\",{\"1\":{\"160\":1}}],[\"streams\",{\"1\":{\"160\":2,\"1155\":1,\"1335\":1}}],[\"stream\",{\"1\":{\"123\":1,\"160\":1,\"939\":12}}],[\"staleslot\",{\"1\":{\"1386\":4}}],[\"stable\",{\"1\":{\"1114\":1,\"1302\":1}}],[\"stash命令\",{\"1\":{\"979\":1}}],[\"stash列表中的信息进行删除\",{\"1\":{\"979\":1}}],[\"stash翻译\",{\"1\":{\"979\":1}}],[\"stash\",{\"0\":{\"979\":1},\"1\":{\"979\":33}}],[\"standard\",{\"1\":{\"464\":1}}],[\"standalone\",{\"1\":{\"102\":1}}],[\"stack<>\",{\"1\":{\"1404\":1}}],[\"stack<integer>\",{\"1\":{\"1404\":1}}],[\"stacks\",{\"1\":{\"1099\":2,\"1290\":2}}],[\"stack\",{\"1\":{\"453\":2,\"1058\":1,\"1069\":1,\"1099\":1,\"1256\":1,\"1264\":1,\"1290\":1,\"1404\":2,\"1481\":2}}],[\"statistics\",{\"1\":{\"569\":2}}],[\"static\",{\"1\":{\"88\":2,\"89\":2,\"92\":2,\"93\":2,\"123\":1,\"222\":1,\"341\":1,\"342\":1,\"390\":8,\"393\":2,\"405\":2,\"417\":1,\"430\":2,\"441\":6,\"711\":12,\"755\":2,\"800\":1,\"810\":1,\"853\":1,\"892\":1,\"950\":2,\"1042\":6,\"1043\":1,\"1057\":1,\"1061\":3,\"1062\":4,\"1064\":1,\"1243\":6,\"1244\":1,\"1255\":1,\"1259\":3,\"1260\":4,\"1262\":1,\"1386\":6,\"1390\":3,\"1392\":4,\"1404\":1,\"1406\":3,\"1424\":1,\"1442\":1,\"1448\":3,\"1466\":2,\"1474\":1,\"1478\":5,\"1481\":19}}],[\"stateenum\",{\"1\":{\"892\":6}}],[\"stateexample\",{\"1\":{\"197\":1}}],[\"stateof\",{\"1\":{\"892\":1}}],[\"stateinfo\",{\"1\":{\"892\":8}}],[\"statement时候\",{\"1\":{\"1133\":1,\"1318\":1}}],[\"statementhandler\",{\"1\":{\"833\":1}}],[\"statement的parametertype必须和mapper接口方法的参数类型一致\",{\"1\":{\"826\":1}}],[\"statement的resulttype必须和mapper接口方法的返回类型一致\",{\"1\":{\"826\":1}}],[\"statement\",{\"1\":{\"590\":1,\"807\":1,\"818\":1,\"824\":1,\"826\":1,\"1173\":1,\"1350\":1,\"1416\":2}}],[\"state\",{\"1\":{\"197\":15,\"892\":11,\"1058\":1,\"1173\":1,\"1256\":1,\"1350\":1,\"1390\":2,\"1416\":1}}],[\"status`\",{\"1\":{\"789\":1}}],[\"status为1\",{\"1\":{\"787\":1}}],[\"status为0\",{\"1\":{\"787\":1}}],[\"status命令\",{\"1\":{\"574\":1}}],[\"status\",{\"1\":{\"111\":1,\"123\":1,\"175\":1,\"574\":1,\"644\":1,\"787\":1,\"788\":1,\"857\":1,\"858\":2,\"864\":4,\"979\":3,\"1494\":9}}],[\"star\",{\"1\":{\"53\":2,\"1494\":1,\"1502\":1,\"1507\":1,\"1515\":1,\"1525\":1}}],[\"start>\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"starttls\",{\"1\":{\"989\":1}}],[\"starttime\",{\"1\":{\"441\":2}}],[\"startup>\",{\"1\":{\"883\":1}}],[\"startup>1<\",{\"1\":{\"883\":1}}],[\"startdatetime\",{\"1\":{\"863\":2,\"864\":1}}],[\"startevent>\",{\"1\":{\"928\":1}}],[\"started\",{\"1\":{\"802\":1,\"1478\":1}}],[\"starter<\",{\"1\":{\"907\":1,\"925\":1,\"1507\":1}}],[\"starter\",{\"1\":{\"750\":1,\"907\":1,\"925\":1,\"948\":2,\"1049\":1,\"1189\":8,\"1250\":1,\"1364\":8}}],[\"startstate\",{\"1\":{\"197\":1}}],[\"startcommand\",{\"1\":{\"196\":1}}],[\"starting\",{\"1\":{\"192\":2,\"194\":1,\"196\":2}}],[\"start|start\",{\"1\":{\"175\":1}}],[\"start\",{\"0\":{\"173\":1,\"548\":1,\"549\":1,\"804\":1,\"1055\":1,\"1253\":1},\"1\":{\"1\":1,\"126\":1,\"131\":1,\"175\":1,\"192\":2,\"194\":1,\"196\":1,\"197\":3,\"220\":1,\"549\":1,\"618\":1,\"619\":2,\"621\":2,\"622\":1,\"634\":1,\"636\":2,\"667\":2,\"670\":3,\"755\":3,\"863\":3,\"900\":2,\"901\":1,\"928\":4,\"936\":1,\"948\":1,\"1061\":3,\"1062\":2,\"1064\":3,\"1259\":3,\"1260\":2,\"1262\":3,\"1386\":2,\"1390\":2,\"1410\":2,\"1422\":1}}],[\"sistem\",{\"1\":{\"1408\":1}}],[\"sismember\",{\"1\":{\"669\":1}}],[\"site生命周期包含如下4个阶段\",{\"1\":{\"777\":1}}],[\"site生命周期\",{\"0\":{\"777\":1}}],[\"site\",{\"1\":{\"774\":2,\"777\":4,\"976\":1,\"1094\":1,\"1287\":1}}],[\"sicily\",{\"1\":{\"723\":5}}],[\"signature\",{\"1\":{\"752\":3,\"833\":1}}],[\"sign\",{\"1\":{\"721\":3}}],[\"significant\",{\"1\":{\"427\":2}}],[\"singapore\",{\"1\":{\"1507\":1}}],[\"singletonlist\",{\"1\":{\"1442\":1}}],[\"singletonfactories\",{\"1\":{\"1173\":2,\"1350\":2}}],[\"singletonfactory\",{\"1\":{\"1173\":3,\"1350\":3}}],[\"singletonobjects\",{\"1\":{\"1173\":2,\"1350\":2}}],[\"singletonobject\",{\"1\":{\"1173\":8,\"1350\":8}}],[\"singletons\",{\"1\":{\"1173\":1,\"1350\":1}}],[\"singleton\",{\"1\":{\"93\":6,\"1056\":1,\"1172\":1,\"1173\":3,\"1254\":1,\"1349\":1,\"1350\":3,\"1410\":3,\"1412\":1,\"1440\":1,\"1448\":1}}],[\"sinterstore\",{\"1\":{\"669\":1}}],[\"sinter\",{\"1\":{\"669\":1}}],[\"simply\",{\"1\":{\"1058\":1,\"1256\":1}}],[\"simpledateformat\",{\"1\":{\"810\":1}}],[\"simple\",{\"1\":{\"169\":1,\"464\":1,\"682\":1,\"959\":2}}],[\"similarity\",{\"1\":{\"493\":1}}],[\"size增加\",{\"1\":{\"1380\":1}}],[\"size是10\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"sizemask\",{\"1\":{\"687\":1}}],[\"size++\",{\"1\":{\"338\":2,\"339\":2,\"1404\":1,\"1406\":1}}],[\"size设置\",{\"1\":{\"123\":1}}],[\"size这个buffer来读取header值\",{\"1\":{\"123\":1}}],[\"size的提示\",{\"1\":{\"123\":1}}],[\"size等于一路处理器缓存的大小\",{\"1\":{\"123\":1}}],[\"size总是等于hash表的大小\",{\"1\":{\"123\":1}}],[\"size所控制的\",{\"1\":{\"123\":1}}],[\"size\",{\"1\":{\"123\":11,\"151\":1,\"338\":19,\"339\":8,\"390\":3,\"406\":1,\"687\":2,\"1001\":1,\"1029\":7,\"1042\":1,\"1210\":1,\"1233\":7,\"1243\":1,\"1386\":5,\"1404\":2,\"1478\":2}}],[\"size该值必须设置为\",{\"1\":{\"123\":1}}],[\"size超过4k的情况\",{\"1\":{\"123\":1}}],[\"scheme\",{\"1\":{\"950\":1}}],[\"schemalocation=\",{\"1\":{\"778\":2,\"875\":1,\"878\":1,\"881\":1,\"882\":1,\"883\":1,\"907\":1}}],[\"schema数据库中的innodb\",{\"1\":{\"643\":1}}],[\"schema\",{\"1\":{\"88\":1,\"89\":1,\"92\":1,\"93\":1,\"482\":1,\"569\":5,\"574\":5,\"643\":1,\"878\":6,\"881\":9,\"882\":9,\"927\":2,\"1507\":1}}],[\"scoring\",{\"1\":{\"1460\":1}}],[\"score2\",{\"1\":{\"670\":1}}],[\"score1\",{\"1\":{\"670\":1}}],[\"score\",{\"1\":{\"670\":1,\"691\":1,\"720\":1,\"1134\":3,\"1319\":3}}],[\"scope=\",{\"1\":{\"1410\":2}}],[\"scope\",{\"1\":{\"1410\":1}}],[\"scope>\",{\"1\":{\"778\":2,\"875\":2,\"907\":2,\"1507\":1}}],[\"scm\",{\"1\":{\"768\":1}}],[\"scalable=no\",{\"1\":{\"895\":1}}],[\"scale\",{\"1\":{\"1030\":1,\"1234\":1,\"1380\":1}}],[\"scale=1\",{\"1\":{\"895\":3}}],[\"scale=960\",{\"1\":{\"155\":1}}],[\"scaled\",{\"1\":{\"497\":2}}],[\"scan\",{\"1\":{\"881\":1,\"882\":1}}],[\"scard\",{\"1\":{\"669\":1}}],[\"scroll\",{\"1\":{\"1029\":2,\"1233\":2}}],[\"scraped\",{\"1\":{\"950\":1}}],[\"scrape\",{\"1\":{\"950\":6}}],[\"scratch\",{\"1\":{\"169\":1}}],[\"scripting\",{\"1\":{\"664\":1}}],[\"script\",{\"1\":{\"123\":2}}],[\"scripts$fastcgi\",{\"1\":{\"123\":1}}],[\"scripts\",{\"1\":{\"123\":2}}],[\"scp\",{\"1\":{\"111\":1}}],[\"support\",{\"1\":{\"1398\":1}}],[\"supported\",{\"1\":{\"1177\":1,\"1354\":1}}],[\"supports\",{\"1\":{\"1177\":1,\"1354\":1,\"1414\":2}}],[\"super\",{\"1\":{\"892\":6,\"1386\":1,\"1424\":2}}],[\"survivor区1和survivor区2三个部分\",{\"1\":{\"1388\":1}}],[\"survivor\",{\"1\":{\"1108\":1,\"1299\":1}}],[\"survivorratio=8\",{\"1\":{\"1108\":1,\"1299\":1}}],[\"succ\",{\"1\":{\"1481\":2}}],[\"success\",{\"1\":{\"892\":1,\"893\":8,\"1494\":5}}],[\"such\",{\"1\":{\"169\":1}}],[\"suffixoverrides\",{\"1\":{\"787\":2,\"850\":1}}],[\"suffixoverrides=\",{\"1\":{\"787\":1,\"790\":1,\"818\":1,\"826\":1,\"849\":1}}],[\"suffix\",{\"1\":{\"787\":2,\"850\":1,\"882\":1}}],[\"suffix=\",{\"1\":{\"787\":1,\"790\":2}}],[\"sunionstore\",{\"1\":{\"669\":1}}],[\"sunion\",{\"1\":{\"669\":1}}],[\"sunke\",{\"1\":{\"489\":3}}],[\"subclass\",{\"1\":{\"1408\":1}}],[\"sublist\",{\"1\":{\"1404\":1}}],[\"subscribe\",{\"1\":{\"656\":1,\"1442\":1,\"1448\":1}}],[\"substring\",{\"1\":{\"595\":1}}],[\"sub\",{\"1\":{\"226\":1,\"569\":1}}],[\"sudo\",{\"1\":{\"99\":2,\"100\":1,\"101\":1,\"102\":3,\"103\":1,\"111\":1}}],[\"summary\",{\"1\":{\"946\":1}}],[\"sums\",{\"1\":{\"441\":6}}],[\"sum\",{\"1\":{\"33\":1}}],[\"synonym\",{\"1\":{\"467\":1}}],[\"syncwithmaster\",{\"1\":{\"1422\":1}}],[\"sync\",{\"1\":{\"1035\":1,\"1113\":2,\"1122\":1,\"1239\":1,\"1301\":2,\"1310\":1,\"1390\":7,\"1422\":4}}],[\"synclimit\",{\"1\":{\"174\":1}}],[\"synclimit这个配置项标识leader与follower之间发送消息\",{\"1\":{\"174\":1}}],[\"synchronize\",{\"1\":{\"1057\":2,\"1255\":2}}],[\"synchronizedmap\",{\"1\":{\"1446\":1}}],[\"synchronized可重入\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"synchronized是独占锁\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"synchronized的锁是非公平锁\",{\"1\":{\"1063\":1,\"1261\":1}}],[\"synchronized\",{\"0\":{\"1063\":1,\"1261\":1,\"1480\":1},\"1\":{\"91\":2,\"92\":2,\"93\":3,\"441\":2,\"711\":2,\"755\":4,\"1063\":1,\"1173\":1,\"1261\":1,\"1350\":1,\"1378\":1,\"1382\":1,\"1446\":3,\"1480\":41,\"1481\":3}}],[\"synchronization\",{\"1\":{\"169\":1}}],[\"sysdate\",{\"1\":{\"799\":4}}],[\"sysctl\",{\"1\":{\"456\":1}}],[\"systemctl\",{\"1\":{\"915\":2}}],[\"systemutils\",{\"1\":{\"441\":2}}],[\"systems\",{\"1\":{\"169\":1}}],[\"system\",{\"1\":{\"129\":1,\"192\":6,\"193\":2,\"194\":4,\"195\":6,\"196\":4,\"197\":4,\"199\":2,\"200\":2,\"338\":3,\"341\":3,\"342\":3,\"390\":5,\"405\":1,\"413\":1,\"417\":1,\"430\":1,\"441\":7,\"459\":1,\"711\":2,\"752\":4,\"755\":3,\"769\":1,\"800\":4,\"810\":2,\"820\":2,\"826\":5,\"847\":1,\"848\":1,\"849\":1,\"850\":1,\"852\":6,\"853\":2,\"856\":2,\"857\":2,\"858\":3,\"891\":6,\"893\":1,\"1001\":3,\"1041\":2,\"1042\":2,\"1043\":5,\"1049\":4,\"1061\":9,\"1062\":4,\"1064\":3,\"1133\":1,\"1210\":3,\"1242\":2,\"1243\":2,\"1244\":5,\"1250\":4,\"1259\":9,\"1260\":4,\"1262\":3,\"1318\":1,\"1386\":2,\"1390\":4,\"1392\":2,\"1402\":1,\"1424\":1,\"1442\":1,\"1448\":1,\"1466\":2,\"1474\":3,\"1478\":3}}],[\"sychronizedsingleton\",{\"1\":{\"92\":6}}],[\"sychronized\",{\"0\":{\"92\":1,\"93\":1}}],[\"socketchannel\",{\"1\":{\"1478\":8}}],[\"socket\",{\"1\":{\"1124\":1,\"1312\":1,\"1478\":1}}],[\"soldity\",{\"2\":{\"532\":1,\"533\":1,\"542\":1,\"543\":1}}],[\"solidity\",{\"0\":{\"531\":1},\"1\":{\"534\":1,\"540\":1,\"541\":3}}],[\"solution\",{\"1\":{\"406\":1}}],[\"someproperty\",{\"1\":{\"833\":1,\"1416\":1}}],[\"somevalue\",{\"1\":{\"666\":2}}],[\"some\",{\"1\":{\"634\":3,\"641\":3,\"642\":3,\"666\":3,\"1058\":1,\"1256\":1}}],[\"something\",{\"1\":{\"193\":1,\"221\":1,\"226\":2,\"229\":2,\"727\":1,\"1382\":2}}],[\"somename\",{\"1\":{\"123\":2}}],[\"sourcename\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"sourcec\",{\"1\":{\"1049\":2,\"1250\":2}}],[\"sourceb\",{\"1\":{\"1049\":5,\"1250\":5}}],[\"sourceb资源\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"sourceaccessinterceptor\",{\"1\":{\"1049\":2,\"1250\":2}}],[\"sourcea\",{\"1\":{\"1049\":4,\"1250\":4}}],[\"sourcearray\",{\"1\":{\"405\":6,\"417\":3}}],[\"sourceref=\",{\"1\":{\"928\":8}}],[\"source>\",{\"1\":{\"875\":1,\"907\":1}}],[\"sourceencoding>\",{\"1\":{\"875\":1,\"907\":1}}],[\"sourceencoding>utf\",{\"1\":{\"875\":1,\"907\":1}}],[\"sourcekey\",{\"1\":{\"722\":2}}],[\"source字段中分离\",{\"1\":{\"493\":1}}],[\"source中\",{\"1\":{\"489\":1}}],[\"source和\",{\"1\":{\"447\":1}}],[\"source=f2a0231e07e27f42fa11f05024479cb8\",{\"1\":{\"296\":1}}],[\"source\",{\"1\":{\"126\":1,\"142\":1,\"169\":1,\"489\":2,\"667\":2,\"669\":2,\"677\":1,\"718\":1,\"887\":4,\"1029\":1,\"1049\":2,\"1233\":1,\"1250\":2,\"1402\":2}}],[\"sources\",{\"1\":{\"126\":1,\"776\":4}}],[\"soft\",{\"1\":{\"111\":2,\"175\":1,\"176\":1,\"981\":2}}],[\"sortedset\",{\"0\":{\"720\":1}}],[\"sorted\",{\"0\":{\"670\":1},\"1\":{\"652\":1,\"664\":1,\"682\":1,\"1155\":1,\"1335\":1,\"1418\":1}}],[\"sortedarray\",{\"1\":{\"413\":3}}],[\"sortjavapub\",{\"1\":{\"413\":1}}],[\"sort\",{\"0\":{\"401\":1,\"410\":1},\"1\":{\"111\":1,\"401\":1,\"405\":6,\"417\":4,\"424\":4,\"430\":2,\"1070\":1,\"1265\":1}}],[\"sogou\",{\"1\":{\"6\":1}}],[\"so\",{\"1\":{\"6\":1,\"142\":1,\"395\":1}}],[\"s\",{\"1\":{\"6\":2,\"56\":1,\"80\":1,\"98\":1,\"101\":1,\"103\":1,\"111\":1,\"123\":2,\"144\":2,\"163\":1,\"164\":1,\"226\":5,\"341\":1,\"618\":1,\"654\":2,\"656\":2,\"682\":3,\"895\":1,\"950\":1,\"987\":1,\"1042\":1,\"1056\":1,\"1062\":1,\"1124\":1,\"1141\":1,\"1243\":1,\"1254\":1,\"1260\":1,\"1312\":1,\"1324\":1,\"1408\":1,\"1418\":2,\"1424\":2}}],[\"semaphore\",{\"1\":{\"1064\":1,\"1262\":1}}],[\"se8\",{\"1\":{\"1041\":1,\"1242\":1}}],[\"segement中\",{\"1\":{\"1147\":1,\"1330\":1}}],[\"segement\",{\"1\":{\"1028\":1,\"1232\":1}}],[\"segment中\",{\"1\":{\"1147\":1,\"1330\":1}}],[\"segment\",{\"1\":{\"493\":1,\"1124\":2,\"1312\":2}}],[\"selinux\",{\"1\":{\"915\":2}}],[\"selectedkeys\",{\"1\":{\"1478\":1}}],[\"selectionkey\",{\"1\":{\"1478\":5}}],[\"selectimports\",{\"1\":{\"1185\":1,\"1360\":1}}],[\"selector\",{\"1\":{\"1478\":13}}],[\"selectone\",{\"1\":{\"810\":2,\"817\":1}}],[\"selectgarbagecollectioncandidates\",{\"1\":{\"1398\":1}}],[\"selectauthorlinkedhashmap\",{\"1\":{\"1132\":1,\"1317\":1}}],[\"select中的几个属性说明\",{\"1\":{\"838\":1}}],[\"selectlist\",{\"1\":{\"817\":1}}],[\"select>\",{\"1\":{\"807\":1,\"818\":3,\"822\":1,\"826\":4,\"842\":7,\"843\":2,\"845\":4,\"847\":1,\"848\":1,\"849\":1,\"850\":1,\"856\":2,\"857\":1,\"858\":1,\"890\":3,\"1132\":1,\"1317\":1,\"1416\":2}}],[\"selectuser\",{\"1\":{\"807\":1,\"810\":2,\"1416\":3}}],[\"select\",{\"0\":{\"600\":1,\"603\":1,\"605\":1,\"634\":1,\"838\":1},\"1\":{\"160\":2,\"206\":1,\"564\":3,\"568\":1,\"569\":1,\"574\":1,\"589\":2,\"590\":1,\"591\":3,\"592\":2,\"593\":2,\"594\":2,\"595\":2,\"598\":4,\"605\":2,\"618\":4,\"619\":3,\"621\":3,\"634\":1,\"636\":2,\"641\":1,\"643\":1,\"800\":1,\"807\":1,\"818\":3,\"822\":1,\"826\":4,\"835\":2,\"838\":1,\"842\":8,\"843\":2,\"845\":4,\"847\":1,\"848\":1,\"849\":1,\"850\":1,\"852\":5,\"853\":1,\"856\":2,\"857\":1,\"858\":1,\"863\":2,\"890\":4,\"1131\":4,\"1132\":1,\"1137\":1,\"1138\":3,\"1148\":6,\"1316\":4,\"1317\":1,\"1322\":1,\"1323\":3,\"1331\":6,\"1416\":2,\"1478\":1}}],[\"select=between\",{\"1\":{\"158\":1}}],[\"secureclassloader\",{\"1\":{\"1392\":2}}],[\"security\",{\"1\":{\"459\":2}}],[\"second\",{\"1\":{\"950\":1}}],[\"seconds\",{\"1\":{\"950\":2,\"1163\":1,\"1343\":1,\"1418\":2}}],[\"seckill\",{\"1\":{\"894\":1}}],[\"serializer\",{\"1\":{\"1448\":2}}],[\"serialization\",{\"1\":{\"1406\":1,\"1442\":2,\"1448\":2}}],[\"serializable\",{\"1\":{\"853\":1,\"1144\":1,\"1177\":1,\"1327\":1,\"1354\":1,\"1404\":1}}],[\"serial\",{\"1\":{\"1108\":2,\"1299\":2,\"1394\":1}}],[\"serialversionuid\",{\"1\":{\"853\":1}}],[\"serve\",{\"1\":{\"975\":2}}],[\"servertimezone=asia\",{\"1\":{\"1507\":1}}],[\"serverchannel\",{\"1\":{\"1478\":4}}],[\"serversocketchannel\",{\"1\":{\"1478\":5}}],[\"servers\",{\"1\":{\"1442\":1,\"1448\":5}}],[\"serverlog\",{\"1\":{\"1422\":1}}],[\"serverbootstrap\",{\"1\":{\"991\":1}}],[\"server中的用法\",{\"1\":{\"605\":1}}],[\"server3的zxid为122\",{\"1\":{\"183\":1}}],[\"server3三台服务器\",{\"1\":{\"183\":1}}],[\"server语句中不能写入weight等其他的参数\",{\"1\":{\"123\":1}}],[\"server2而言\",{\"1\":{\"183\":1}}],[\"server2的投票为\",{\"1\":{\"183\":1}}],[\"server2\",{\"1\":{\"123\":1,\"183\":1}}],[\"server1将会成为leader\",{\"1\":{\"183\":1}}],[\"server1和server3都会投自己\",{\"1\":{\"183\":1}}],[\"server1和server2都会将自己作为leader服务器来进行投票\",{\"1\":{\"183\":1}}],[\"server1\",{\"1\":{\"123\":1}}],[\"server\",{\"0\":{\"1196\":1,\"1369\":1},\"1\":{\"123\":31,\"163\":4,\"174\":2,\"176\":1,\"652\":1,\"660\":1,\"737\":2,\"755\":1,\"887\":4,\"913\":1,\"927\":1,\"948\":2,\"1420\":3,\"1422\":8,\"1478\":1,\"1494\":1,\"1507\":1}}],[\"servlet再负责响应用户的请求\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"servlet需要在web\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"servlet独立地处理静态表示逻辑与动态业务逻辑\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"servlet本身是个java类\",{\"1\":{\"1086\":1,\"1279\":1}}],[\"servlet和jsp的区别和联系\",{\"0\":{\"1086\":1,\"1279\":1}}],[\"servletconfig\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"servlet的生命周期就是从servlet出现到消亡\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"servlet是运行在服务器端\",{\"1\":{\"1085\":1,\"1278\":1}}],[\"servletoutputstream\",{\"1\":{\"939\":3}}],[\"servlet>\",{\"1\":{\"883\":1}}],[\"servlet<\",{\"1\":{\"875\":1}}],[\"servlet\",{\"0\":{\"1085\":1,\"1278\":1},\"1\":{\"875\":2,\"882\":3,\"883\":5,\"894\":1,\"939\":3,\"1085\":7,\"1090\":5,\"1182\":1,\"1278\":7,\"1283\":5,\"1357\":1}}],[\"service\",{\"0\":{\"881\":1,\"893\":1},\"1\":{\"169\":2,\"176\":2,\"878\":1,\"881\":4,\"883\":1,\"891\":1,\"893\":8,\"894\":1,\"1085\":3,\"1090\":1,\"1278\":3,\"1283\":1,\"1402\":3,\"1507\":2}}],[\"services\",{\"1\":{\"126\":1,\"131\":3,\"169\":3,\"1017\":1,\"1223\":1}}],[\"separator\",{\"1\":{\"939\":2}}],[\"separator=\",{\"1\":{\"787\":1,\"790\":1,\"850\":1}}],[\"separate\",{\"1\":{\"687\":1}}],[\"sex=1\",{\"1\":{\"847\":1,\"848\":1,\"852\":6,\"853\":2}}],[\"sex=0\",{\"1\":{\"822\":1}}],[\"sex\",{\"1\":{\"599\":2,\"799\":3,\"810\":5,\"818\":6,\"822\":2,\"826\":4,\"845\":2,\"849\":2,\"856\":1}}],[\"seesion\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"seelec\",{\"1\":{\"560\":1}}],[\"seed\",{\"1\":{\"390\":5,\"459\":1}}],[\"seeds\",{\"1\":{\"390\":3}}],[\"sequential\",{\"1\":{\"1201\":2,\"1374\":2,\"1466\":2}}],[\"sequenceflow>\",{\"1\":{\"928\":8}}],[\"sequencemask\",{\"1\":{\"441\":2}}],[\"sequencebits\",{\"1\":{\"441\":5}}],[\"sequence\",{\"1\":{\"436\":1,\"441\":6,\"1454\":1}}],[\"seq\",{\"1\":{\"489\":1,\"569\":1}}],[\"seward\",{\"1\":{\"410\":1}}],[\"session中\",{\"1\":{\"1172\":1,\"1349\":1}}],[\"session中属性值\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"session和portlet应用相关\",{\"1\":{\"1172\":1,\"1349\":1}}],[\"session和cookie的区别和联系\",{\"0\":{\"1088\":1,\"1281\":1}}],[\"session过期后\",{\"1\":{\"1172\":1,\"1349\":1}}],[\"session会在一定时间内保存在服务器上\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"session数据放在服务器上\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"session的唯一标识需要存放在客户端\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"sessionid\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"session\",{\"0\":{\"1190\":1,\"1365\":1},\"1\":{\"123\":2,\"657\":4,\"727\":1,\"810\":3,\"817\":1,\"820\":3,\"825\":2,\"826\":3,\"984\":1,\"1084\":1,\"1088\":3,\"1135\":3,\"1172\":2,\"1190\":10,\"1277\":1,\"1281\":3,\"1320\":3,\"1349\":2,\"1365\":10,\"1410\":2,\"1416\":1}}],[\"sentinel\",{\"1\":{\"664\":1,\"1005\":2,\"1162\":2,\"1214\":2,\"1342\":2,\"1418\":1}}],[\"sent\",{\"1\":{\"123\":2}}],[\"sendmessage\",{\"1\":{\"1444\":1}}],[\"sender\",{\"1\":{\"540\":5,\"541\":5,\"1478\":2}}],[\"sendfile\",{\"1\":{\"123\":2,\"1124\":1,\"1312\":1}}],[\"sendfile指令指定\",{\"1\":{\"123\":1}}],[\"sendfile指令指定nginx是否调用sendfile函数来输出文件\",{\"1\":{\"123\":1}}],[\"send\",{\"1\":{\"4\":1,\"123\":1,\"1422\":1,\"1440\":1,\"1448\":2,\"1450\":3}}],[\"sed\",{\"1\":{\"111\":3}}],[\"setresourceloader\",{\"1\":{\"1408\":1}}],[\"setex\",{\"1\":{\"1418\":2}}],[\"setexclusiveownerthread\",{\"1\":{\"1390\":2}}],[\"setentityresolver\",{\"1\":{\"1408\":1}}],[\"setentry\",{\"1\":{\"1386\":1}}],[\"setenvironment\",{\"1\":{\"1408\":1}}],[\"setflag\",{\"1\":{\"1382\":3}}],[\"setcontenttype\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"setcreated\",{\"1\":{\"810\":1}}],[\"setviewname\",{\"1\":{\"894\":1,\"895\":1}}],[\"setproperties\",{\"1\":{\"833\":1}}],[\"setparameters\",{\"1\":{\"833\":1}}],[\"setpassword\",{\"1\":{\"810\":1,\"820\":2,\"826\":2,\"849\":1}}],[\"setup\",{\"1\":{\"820\":1,\"825\":1,\"826\":1}}],[\"setupdated\",{\"1\":{\"810\":1}}],[\"setusername\",{\"1\":{\"810\":1,\"820\":2,\"826\":2,\"849\":1}}],[\"setbirthday\",{\"1\":{\"810\":1,\"820\":2,\"826\":2,\"849\":1}}],[\"setbit\",{\"1\":{\"721\":1}}],[\"setage\",{\"1\":{\"810\":1,\"820\":1,\"826\":1}}],[\"setname\",{\"1\":{\"810\":1,\"820\":2,\"826\":2,\"849\":1,\"852\":1}}],[\"setnx\",{\"1\":{\"727\":5,\"1418\":4,\"1428\":1}}],[\"setid\",{\"1\":{\"810\":1,\"820\":1,\"826\":1,\"849\":1,\"852\":1}}],[\"setlong\",{\"1\":{\"800\":1}}],[\"setthreshold\",{\"1\":{\"1386\":2}}],[\"setter\",{\"1\":{\"888\":4,\"1412\":5}}],[\"settestonborrow\",{\"1\":{\"711\":1}}],[\"setting\",{\"1\":{\"765\":1}}],[\"settings>\",{\"1\":{\"830\":1,\"853\":1,\"880\":1}}],[\"settings设置\",{\"0\":{\"830\":1}}],[\"settings\",{\"1\":{\"764\":1,\"765\":1,\"976\":1}}],[\"setmaxidle\",{\"1\":{\"711\":1}}],[\"setmaxtotal\",{\"1\":{\"711\":1}}],[\"setmaxwaitmillis\",{\"1\":{\"711\":1}}],[\"setmaxwait\",{\"1\":{\"711\":1}}],[\"setmaxactive\",{\"1\":{\"711\":1}}],[\"set会失败\",{\"1\":{\"666\":1}}],[\"sets记录精细的引用信息\",{\"1\":{\"1398\":1}}],[\"sets维护的引用链过于精细\",{\"1\":{\"1398\":1}}],[\"sets要做的工作\",{\"1\":{\"1398\":1}}],[\"sets和card\",{\"1\":{\"1398\":5}}],[\"sets实现空间整合\",{\"1\":{\"1398\":1}}],[\"setstring\",{\"1\":{\"1133\":1,\"1318\":1}}],[\"setstate\",{\"1\":{\"197\":1,\"1390\":1}}],[\"setsex\",{\"1\":{\"810\":1,\"820\":2,\"826\":2,\"849\":1}}],[\"sets\",{\"1\":{\"656\":2,\"664\":2,\"669\":1,\"1398\":3}}],[\"setdata\",{\"1\":{\"342\":1}}],[\"set\",{\"0\":{\"669\":1,\"670\":1,\"719\":1,\"1071\":1,\"1266\":1},\"1\":{\"111\":1,\"123\":6,\"169\":1,\"390\":1,\"618\":1,\"636\":2,\"642\":1,\"652\":2,\"655\":1,\"660\":1,\"666\":7,\"669\":1,\"682\":2,\"693\":1,\"716\":1,\"720\":1,\"787\":1,\"788\":1,\"790\":2,\"818\":1,\"826\":1,\"849\":1,\"850\":1,\"852\":1,\"887\":1,\"888\":2,\"890\":1,\"950\":2,\"1069\":1,\"1070\":1,\"1071\":1,\"1134\":1,\"1155\":2,\"1161\":1,\"1163\":1,\"1198\":1,\"1264\":1,\"1265\":1,\"1266\":1,\"1319\":1,\"1335\":2,\"1341\":1,\"1343\":1,\"1371\":1,\"1386\":5,\"1412\":1,\"1418\":7,\"1424\":5}}],[\"search\",{\"1\":{\"6\":2,\"487\":1,\"489\":2,\"490\":1,\"493\":2,\"1019\":1,\"1024\":1,\"1029\":2,\"1174\":1,\"1225\":1,\"1233\":2,\"1351\":1,\"1456\":1,\"1460\":1,\"1462\":1}}],[\"我给他起个名字就叫\",{\"1\":{\"1502\":1}}],[\"我加个描述\",{\"1\":{\"1494\":1}}],[\"我曾经使用过\",{\"1\":{\"1480\":1}}],[\"我有使用过\",{\"1\":{\"1480\":1}}],[\"我有个朋友是初学者\",{\"0\":{\"115\":1}}],[\"我看到你的简历上写着你熟悉\",{\"1\":{\"1480\":1}}],[\"我使用过synchronized作为悲观锁\",{\"1\":{\"1476\":1}}],[\"我一定会继续加深理解的\",{\"1\":{\"1476\":1}}],[\"我一直听说kafka的幂等性很重要\",{\"1\":{\"1454\":1}}],[\"我一直想了解一下kafka的ack机制是怎么回事\",{\"1\":{\"1452\":1}}],[\"我一直对kafka很好奇\",{\"1\":{\"1444\":1}}],[\"我一直在研究关注区块链和\",{\"1\":{\"249\":1}}],[\"我一直认为\",{\"1\":{\"56\":1}}],[\"我通过面试了吗\",{\"1\":{\"1474\":1}}],[\"我通过阅读源码\",{\"1\":{\"1380\":1}}],[\"我了解一些\",{\"1\":{\"1468\":1}}],[\"我喜欢吃橙子\",{\"1\":{\"1464\":1}}],[\"我喜欢吃香蕉\",{\"1\":{\"1464\":1}}],[\"我喜欢吃苹果\",{\"1\":{\"1464\":1}}],[\"我喜欢对多单词的字段名中加上一个点\",{\"1\":{\"665\":1}}],[\"我来给你解释一下\",{\"1\":{\"1454\":1}}],[\"我迫不及待想了解更多\",{\"1\":{\"1444\":1}}],[\"我随时都可以回答\",{\"1\":{\"1440\":1,\"1464\":1}}],[\"我觉得kafka就像是一个多面手\",{\"1\":{\"1434\":1}}],[\"我觉得可以分两部分答\",{\"1\":{\"1074\":1,\"1269\":1}}],[\"我可以给你演示一下源码实现吗\",{\"1\":{\"1428\":1}}],[\"我可以查询其中的\",{\"1\":{\"569\":1}}],[\"我自己在准备和回答的过程中\",{\"1\":{\"1424\":1}}],[\"我以前也常常搞不清这两者的差别\",{\"1\":{\"1424\":1}}],[\"我都会尽力帮助解答\",{\"1\":{\"1448\":1}}],[\"我都差不多明白了\",{\"1\":{\"1424\":1}}],[\"我都不好意思问你其他的了\",{\"1\":{\"1424\":1}}],[\"我都明白了\",{\"1\":{\"1424\":1}}],[\"我现在对倒排索引有了更清晰的认识\",{\"1\":{\"1464\":1}}],[\"我现在全明白了\",{\"1\":{\"1422\":1}}],[\"我现阶段没有其他问题了\",{\"1\":{\"1380\":1}}],[\"我再问你几个\",{\"1\":{\"1418\":1}}],[\"我叫小明\",{\"1\":{\"1414\":1}}],[\"我明白了\",{\"1\":{\"1408\":1,\"1452\":1}}],[\"我这里仅解析其基本结构与重要流程\",{\"1\":{\"1406\":1}}],[\"我这里整理了目前市面上性价比极高的云服务器购买链接\",{\"1\":{\"237\":1}}],[\"我最常用的当属hashmap\",{\"1\":{\"1406\":1}}],[\"我仍需不断学习与总结\",{\"1\":{\"1406\":1}}],[\"我亟需在实践中不断磨练这些理论知识\",{\"1\":{\"1398\":1}}],[\"我就不高兴了\",{\"1\":{\"1398\":1}}],[\"我就尝试过搞自媒体\",{\"1\":{\"270\":1}}],[\"我也花了不少时间去理解和实践\",{\"1\":{\"1476\":1}}],[\"我也非常欣赏这次交流\",{\"1\":{\"1424\":1}}],[\"我也在这个过程中对泛型有了更深的理解\",{\"1\":{\"1424\":1}}],[\"我也觉得把一个复杂的技术问题变成一个故事或场景会让人更容易理解其中的逻辑和流程\",{\"1\":{\"1392\":1}}],[\"我也乘着这波风口\",{\"1\":{\"264\":1}}],[\"我首先得搞清楚要运行的这个类到底在哪儿\",{\"1\":{\"1392\":1}}],[\"我很享受这次面试\",{\"1\":{\"1432\":1}}],[\"我很高兴能帮助你理解倒排索引\",{\"1\":{\"1464\":1}}],[\"我很高兴能有这次面试机会\",{\"1\":{\"1458\":1}}],[\"我很高兴能与您分享这些知识\",{\"1\":{\"1460\":1}}],[\"我很高兴能与您分享我的知识\",{\"1\":{\"1442\":1}}],[\"我很高兴能与您分享我的见解\",{\"1\":{\"1428\":1}}],[\"我很高兴能与你分享这些方法\",{\"1\":{\"1440\":1}}],[\"我很高兴能够帮助\",{\"1\":{\"1430\":1}}],[\"我很高兴能够分享我的知识\",{\"1\":{\"1386\":1,\"1448\":1}}],[\"我很高兴能参加这次面试\",{\"1\":{\"1426\":1,\"1456\":1}}],[\"我很欣赏你的学习热情与主动性\",{\"1\":{\"1406\":1}}],[\"我很荣幸能够参加这次面试\",{\"1\":{\"1388\":1}}],[\"我知道它是用来确保消息的可靠性传递的\",{\"1\":{\"1452\":1}}],[\"我知道\",{\"1\":{\"1386\":1}}],[\"我对kafka的幂等性有了更深入的理解\",{\"1\":{\"1454\":1}}],[\"我对kafka的ack机制有了更清晰的理解了\",{\"1\":{\"1452\":1}}],[\"我对kafka的架构设计有了更深入的了解\",{\"1\":{\"1444\":1}}],[\"我对kafka的热爱让我对它的使用场景有了更深入的了解\",{\"1\":{\"1434\":1}}],[\"我对这个话题有一些想法\",{\"1\":{\"1440\":1}}],[\"我对你的表现印象深刻\",{\"1\":{\"1456\":1}}],[\"我对你的理解和表达能力印象深刻\",{\"1\":{\"1442\":1}}],[\"我对你的回答非常满意\",{\"1\":{\"1434\":1}}],[\"我对你的回答印象深刻\",{\"1\":{\"1428\":1}}],[\"我对你的学习态度和理解能力很为欣赏\",{\"1\":{\"1404\":1}}],[\"我对分布式锁的实现方式很感兴趣\",{\"1\":{\"1428\":1}}],[\"我对redis分片集群有一些了解\",{\"1\":{\"1426\":1}}],[\"我对泛型也有了更全面的认识\",{\"1\":{\"1424\":1}}],[\"我对java集合还在学习中\",{\"1\":{\"1404\":1}}],[\"我对jvm调优还在学习中\",{\"1\":{\"1400\":1}}],[\"我对线程池非常了解\",{\"1\":{\"1384\":1}}],[\"我对很多技术内容有了进一步的认识和提高\",{\"1\":{\"1380\":1}}],[\"我相信面试一定会取得很好的表现\",{\"1\":{\"1410\":1}}],[\"我相信你一定会越来越精进\",{\"1\":{\"1380\":1}}],[\"我相信就有收获\",{\"1\":{\"263\":1}}],[\"我会尽力用人话解释它\",{\"1\":{\"1464\":1}}],[\"我会尽力帮助您\",{\"1\":{\"1442\":1}}],[\"我会继续深入学习cas相关内容\",{\"1\":{\"1476\":1}}],[\"我会继续加深理解并运用的\",{\"1\":{\"1446\":1}}],[\"我会继续努力学习的\",{\"1\":{\"1412\":1}}],[\"我会继续努力学习和研究垃圾收集theory与实践\",{\"1\":{\"1396\":1}}],[\"我会继续努力学习\",{\"1\":{\"1380\":1,\"1398\":1,\"1416\":1,\"1468\":1,\"1474\":1}}],[\"我会根据这份清单进一步深入阅读源码\",{\"1\":{\"1406\":1}}],[\"我会根据这份清单继续深入阅读源码\",{\"1\":{\"1404\":1}}],[\"我会持续加深理解\",{\"1\":{\"1404\":1}}],[\"我会持续努力\",{\"1\":{\"1380\":1}}],[\"我会持之以恒\",{\"1\":{\"1398\":1}}],[\"我会不断复习和运用这些知识\",{\"1\":{\"1392\":1}}],[\"我会努力运用所学的知识\",{\"1\":{\"1392\":1}}],[\"我想问一下你对\",{\"1\":{\"1478\":1}}],[\"我想问你作为hashmap的替代\",{\"1\":{\"1380\":1}}],[\"我想知道\",{\"1\":{\"1466\":1}}],[\"我想知道kafka在实际应用中的一些最佳实践和常见问题解答\",{\"1\":{\"1450\":1}}],[\"我想知道kafka的消费者是如何处理消息的失败和重试的\",{\"1\":{\"1438\":1}}],[\"我想强调一点\",{\"1\":{\"1426\":1,\"1460\":1}}],[\"我想你应该可以轻松应付与类加载相关的面试题了\",{\"1\":{\"1392\":1}}],[\"我想你都知道了\",{\"1\":{\"138\":1}}],[\"我还想提一下elasticsearch的分布式特性\",{\"1\":{\"1458\":1}}],[\"我还希望进一步学习的内容如下\",{\"1\":{\"1406\":1}}],[\"我还需要继续学习\",{\"1\":{\"1406\":1}}],[\"我还需要继续学习和总结\",{\"1\":{\"1380\":1}}],[\"我还不太清楚或想进一步学习的内容如下\",{\"1\":{\"1404\":1}}],[\"我还在不断学习与理解中\",{\"1\":{\"1404\":1}}],[\"我还在企业中做软件工程师\",{\"1\":{\"263\":1}}],[\"我还未能全部掌握\",{\"1\":{\"1404\":1}}],[\"我把这篇完整粘贴出来\",{\"1\":{\"907\":1}}],[\"我常用的打包命令\",{\"1\":{\"768\":1}}],[\"我前面发过一些实战项目\",{\"1\":{\"761\":1}}],[\"我搞java也有段时间了\",{\"1\":{\"761\":1}}],[\"我只说明关键的地方\",{\"1\":{\"755\":1}}],[\"我关注的人也关注他\",{\"1\":{\"719\":1}}],[\"我去到\",{\"1\":{\"719\":1}}],[\"我去学\",{\"1\":{\"72\":1}}],[\"我推荐一款我经常用的\",{\"1\":{\"706\":1}}],[\"我日常工作中最常用的list实现类就是arraylist\",{\"1\":{\"1404\":1}}],[\"我日常工作中最常用的jvm参数和监控工具如下\",{\"1\":{\"1400\":1}}],[\"我日常工作中\",{\"1\":{\"657\":1}}],[\"我构建了\",{\"1\":{\"563\":1}}],[\"我已经单独安装\",{\"1\":{\"296\":1}}],[\"我当时即将大学毕业\",{\"1\":{\"270\":1}}],[\"我的jvm调优进阶学习计划如下\",{\"1\":{\"1400\":1}}],[\"我的表述确实有失妥当\",{\"1\":{\"1398\":1}}],[\"我的任务终于可以开始执行了\",{\"1\":{\"1392\":1}}],[\"我的博客提供了\",{\"1\":{\"1036\":1,\"1240\":1}}],[\"我的人生\",{\"0\":{\"268\":1}}],[\"我的网站\",{\"0\":{\"2\":1}}],[\"我在代码中加了注释\",{\"1\":{\"1386\":1}}],[\"我在后台收到很多读者的描述\",{\"1\":{\"1378\":1}}],[\"我在课件放了插件的压缩包\",{\"1\":{\"466\":1}}],[\"我在课件里有插件压缩包\",{\"1\":{\"465\":1}}],[\"我在\",{\"1\":{\"265\":1}}],[\"我投入时间和自己知识就可以博取这个收益\",{\"1\":{\"264\":1}}],[\"我从\",{\"1\":{\"264\":1}}],[\"我认为在使用redis分布式锁时\",{\"1\":{\"1428\":1}}],[\"我认为这些是景上添花\",{\"1\":{\"263\":1}}],[\"我认为作为提高生产力的技术\",{\"1\":{\"85\":1}}],[\"我更建议后者\",{\"1\":{\"263\":1}}],[\"我做过的项目\",{\"0\":{\"257\":1}}],[\"我每天都会处理邮件\",{\"1\":{\"249\":1}}],[\"我建议大家选择\",{\"1\":{\"238\":1}}],[\"我建议学习一些实战项目\",{\"1\":{\"118\":1}}],[\"我建议你从kafka\",{\"1\":{\"1432\":1}}],[\"我建议你跟着课程详细学习\",{\"1\":{\"115\":1}}],[\"我建议你先将课程中的东西掌握\",{\"1\":{\"115\":1}}],[\"我不建议慢工出细活\",{\"1\":{\"117\":1}}],[\"我不是成黑n了\",{\"1\":{\"98\":1}}],[\"我之前给大家推荐了一个可以免费使用\",{\"1\":{\"107\":1}}],[\"我没有\",{\"1\":{\"107\":1}}],[\"我是主节点\",{\"1\":{\"1466\":1}}],[\"我是今天的面试官\",{\"1\":{\"1414\":1}}],[\"我是pub哥\",{\"1\":{\"441\":1,\"451\":1}}],[\"我是\",{\"1\":{\"107\":1,\"218\":1,\"461\":1,\"478\":1,\"983\":1,\"987\":1,\"1083\":1,\"1380\":1,\"1382\":1,\"1384\":1,\"1386\":1,\"1388\":1,\"1390\":1,\"1392\":1,\"1394\":1,\"1396\":1,\"1398\":1,\"1400\":1,\"1402\":1,\"1404\":1,\"1406\":1,\"1408\":1,\"1410\":1,\"1412\":1,\"1414\":1,\"1416\":1,\"1418\":1,\"1420\":1,\"1422\":1,\"1424\":1,\"1426\":1,\"1428\":1,\"1430\":1,\"1432\":1,\"1434\":1,\"1436\":1,\"1438\":1,\"1440\":1,\"1446\":1,\"1448\":1,\"1450\":1,\"1452\":1,\"1454\":1,\"1456\":1,\"1458\":1,\"1460\":1,\"1462\":1,\"1464\":1,\"1466\":1,\"1468\":1,\"1470\":1,\"1474\":1,\"1476\":1,\"1478\":1,\"1480\":1,\"1506\":1}}],[\"我是javapub\",{\"1\":{\"85\":1,\"328\":1,\"969\":1,\"1013\":1,\"1098\":1,\"1112\":1,\"1128\":1,\"1167\":1,\"1180\":1,\"1193\":1}}],[\"我找了个宣发片\",{\"1\":{\"72\":1}}],[\"我们是用\",{\"1\":{\"1511\":1}}],[\"我们公司现在已经\",{\"1\":{\"1502\":1}}],[\"我们应该尽量避免使用反射来访问私有属性和方法\",{\"1\":{\"1468\":1}}],[\"我们配置了kafka的地址\",{\"1\":{\"1448\":1}}],[\"我们配置了kafka的地址和序列化器\",{\"1\":{\"1448\":1}}],[\"我们还应该考虑到网络延迟和故障的情况\",{\"1\":{\"1428\":1}}],[\"我们还可以考虑优化消费者的配置\",{\"1\":{\"1440\":1}}],[\"我们还可以通过增加分区数来提高吞吐量\",{\"1\":{\"1440\":1}}],[\"我们还可以通过实现\",{\"1\":{\"1384\":1}}],[\"我们还可以使用kafka的分区机制来实现消息的负载均衡\",{\"1\":{\"1442\":1}}],[\"我们还可以使用kafka的偏移量\",{\"1\":{\"1442\":1}}],[\"我们还可以使用kafka的监控工具来实时监测和调整kafka集群的性能\",{\"1\":{\"1438\":1}}],[\"我们还可以使用redis的持久化机制来将数据存储到磁盘上\",{\"1\":{\"1430\":1}}],[\"我们还可以使用redis的过期时间来自动清理不再使用的键值对\",{\"1\":{\"1430\":1}}],[\"我们还可以使用redis的哨兵机制或者使用redis\",{\"1\":{\"1426\":1}}],[\"我们还可以使用压缩算法来减少存储在redis中的数据量\",{\"1\":{\"1430\":1}}],[\"我们还可以自定义\",{\"1\":{\"1410\":1}}],[\"我们还可以根据具体的业务需求进行自定义的\",{\"1\":{\"1009\":1,\"1218\":1}}],[\"我们删除锁并返回true\",{\"1\":{\"1428\":1}}],[\"我们首先检查锁的值是否与传入的值相等\",{\"1\":{\"1428\":1}}],[\"我们首先需要将\",{\"1\":{\"305\":1}}],[\"我们返回false\",{\"1\":{\"1428\":1}}],[\"我们设置锁的过期时间\",{\"1\":{\"1428\":1}}],[\"我们再举个例子\",{\"1\":{\"1424\":1}}],[\"我们再来看看\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"我们再来做个试验\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"我们聊聊吧\",{\"1\":{\"1410\":1}}],[\"我们聊一聊类加载过程的双亲委派模型在哪些方面带来的好处\",{\"1\":{\"1392\":1}}],[\"我们以更口语的方式探讨下类加载过程\",{\"1\":{\"1392\":1}}],[\"我们有一个任务需要分成多个子任务来执行\",{\"1\":{\"1390\":1}}],[\"我们有一个位数组bitarray\",{\"1\":{\"386\":1,\"392\":1}}],[\"我们创建了一个\",{\"1\":{\"1386\":1}}],[\"我们定义了一个\",{\"1\":{\"1382\":1,\"1474\":2}}],[\"我们定义为作用于方法上\",{\"1\":{\"751\":2}}],[\"我们定义为运行时\",{\"1\":{\"751\":2}}],[\"我们进行了广泛而深入的探讨\",{\"1\":{\"1380\":1}}],[\"我们如何在面试中自然的对答\",{\"1\":{\"1378\":1}}],[\"我们如果使用被动读\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"我们就以一个需求的生命周期来分析\",{\"1\":{\"1502\":1}}],[\"我们就可以根据这些字段来搜索和过滤数据了\",{\"1\":{\"1462\":1}}],[\"我们就可以发现spring中存在的配置错误\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"我们就聊到这里\",{\"1\":{\"1410\":1}}],[\"我们就不能提前发现一些存在的spring的配置问题\",{\"1\":{\"1175\":1,\"1352\":1}}],[\"我们来看一下它是如何工作的\",{\"1\":{\"1444\":1}}],[\"我们来看看它的缺点吧\",{\"1\":{\"1436\":1}}],[\"我们来看看b\",{\"1\":{\"320\":1}}],[\"我们来一起探索一下吧\",{\"1\":{\"1444\":1}}],[\"我们来聊聊泛型\",{\"1\":{\"1424\":1}}],[\"我们来对比一下\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"我们现在看到的画面\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"我们现在知道\",{\"1\":{\"682\":1}}],[\"我们直接调用接口方法就可以\",{\"1\":{\"1137\":1,\"1322\":1}}],[\"我们直接开启自动续订\",{\"1\":{\"103\":1}}],[\"我们先简单介绍几个概念\",{\"1\":{\"1118\":1,\"1306\":1}}],[\"我们先要知道什么是\",{\"1\":{\"417\":1}}],[\"我们同样用\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"我们得了解这两种机制背后的实现原理\",{\"1\":{\"1076\":1,\"1271\":1}}],[\"我们得到两个整数\",{\"1\":{\"306\":1}}],[\"我们通过\",{\"1\":{\"1073\":1,\"1268\":1}}],[\"我们必须同时获得两个账户上的锁\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"我们强烈建议你不要使用深分页\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"我们称这个对象为\",{\"1\":{\"1057\":1,\"1255\":1}}],[\"我们称之为\",{\"1\":{\"1029\":1,\"1073\":1,\"1233\":1,\"1268\":1}}],[\"我们称为一页\",{\"1\":{\"319\":1}}],[\"我们要保证\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"我们要探索的是一个看似简单\",{\"1\":{\"303\":1}}],[\"我们可能缓存用户钱包的余额在缓存中\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"我们可以遍历所有文档\",{\"1\":{\"1464\":1}}],[\"我们可以并行处理数据\",{\"1\":{\"1462\":1}}],[\"我们可以定义这个索引的字段\",{\"1\":{\"1462\":1}}],[\"我们可以定义一个\",{\"1\":{\"1382\":1}}],[\"我们可以给它起个名字\",{\"1\":{\"1462\":1}}],[\"我们可以深入探讨kafka的最佳实践和解决方案\",{\"1\":{\"1450\":1}}],[\"我们可以及时发现并解决潜在的问题\",{\"1\":{\"1442\":1}}],[\"我们可以记录每个分区的偏移量\",{\"1\":{\"1442\":1}}],[\"我们可以采取一些措施\",{\"1\":{\"1442\":1}}],[\"我们可以将多个消息打包成一个批次\",{\"1\":{\"1440\":1}}],[\"我们可以将整个对象缓存到\",{\"1\":{\"717\":1}}],[\"我们可以增加\",{\"1\":{\"1440\":1}}],[\"我们可以这样定义一个泛型方法\",{\"1\":{\"1424\":1}}],[\"我们可以这样定义箱子\",{\"1\":{\"1424\":1}}],[\"我们可以自定义运行时注解\",{\"1\":{\"1402\":1}}],[\"我们可以自己实现一个简单的\",{\"1\":{\"990\":1}}],[\"我们可以从jvm源码中看到cmscollector在清除对象后直接造成碎片\",{\"1\":{\"1396\":1}}],[\"我们可以创建一个\",{\"1\":{\"1390\":2}}],[\"我们可以看到\",{\"1\":{\"1169\":1,\"1346\":1,\"1462\":1}}],[\"我们可以开启手动提交位移\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"我们可以通过增加分区\",{\"1\":{\"1438\":1}}],[\"我们可以通过实现\",{\"1\":{\"1416\":1}}],[\"我们可以通过\",{\"1\":{\"1410\":1}}],[\"我们可以通过继承\",{\"1\":{\"1384\":1}}],[\"我们可以通过同步或者异步获取响应结果\",{\"1\":{\"1120\":1,\"1308\":1}}],[\"我们可以通过这个newinstance方法调用有参数的和私有的构造函数\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"我们可以通过配置参数\",{\"1\":{\"1034\":1,\"1238\":1}}],[\"我们可以使用动态代理来实现一个简单的日志记录器\",{\"1\":{\"1474\":1}}],[\"我们可以使用反射来动态地调用方法\",{\"1\":{\"1468\":1}}],[\"我们可以使用反射来动态地创建对象\",{\"1\":{\"1468\":1}}],[\"我们可以使用elasticsearch来搜索这个索引\",{\"1\":{\"1458\":1}}],[\"我们可以使用lucene来构建一个索引\",{\"1\":{\"1458\":1}}],[\"我们可以使用查询语句来进行搜索\",{\"1\":{\"1456\":1}}],[\"我们可以使用kafka的监控工具来实时监控kafka集群的状态和性能指标\",{\"1\":{\"1442\":1}}],[\"我们可以使用kafka的消息确认机制\",{\"1\":{\"1442\":1}}],[\"我们可以使用数据结构来减少内存占用\",{\"1\":{\"1430\":1}}],[\"我们可以使用\",{\"1\":{\"1017\":1,\"1062\":1,\"1223\":1,\"1260\":1,\"1382\":1,\"1390\":2}}],[\"我们可以\",{\"1\":{\"1016\":1,\"1222\":1}}],[\"我们可以实现一个可以聊天类似微信的即时通讯系统\",{\"1\":{\"990\":1}}],[\"我们可以在一定程度上减少内存使用\",{\"1\":{\"1430\":1}}],[\"我们可以在客户端每次与服务器交互时检查sessionid\",{\"1\":{\"1088\":1,\"1281\":1}}],[\"我们可以在父\",{\"1\":{\"907\":1}}],[\"我们可以在配置中修改\",{\"1\":{\"660\":1}}],[\"我们可以得到最简单的倒排索引\",{\"1\":{\"478\":1}}],[\"我们可以利用磁盘预读原理提前将这些数据读入内存\",{\"1\":{\"323\":1}}],[\"我们可以确认\",{\"1\":{\"306\":1}}],[\"我们可以与历史上的伟人对话\",{\"1\":{\"56\":1}}],[\"我们使用\",{\"1\":{\"1468\":6}}],[\"我们使用setnx命令来尝试获取锁\",{\"1\":{\"1428\":1}}],[\"我们使用springboot拦截器实现这样一个功能\",{\"1\":{\"1049\":1,\"1250\":1}}],[\"我们使用了一个\",{\"1\":{\"1382\":1}}],[\"我们使用缓存只要是提高读操作的性能\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"我们使用比较多的数据库是\",{\"1\":{\"1000\":1,\"1209\":1}}],[\"我们指的更多的是最终一致性\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"我们仍然将这个空结果进行缓存\",{\"1\":{\"1004\":1,\"1213\":1}}],[\"我们将\",{\"1\":{\"1000\":1,\"1201\":1,\"1209\":1,\"1374\":1}}],[\"我们不知道使用者会替换成什么类型\",{\"1\":{\"1424\":1}}],[\"我们不难看出来\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"我们不能立刻得知消息是否已经被处理了\",{\"1\":{\"991\":1}}],[\"我们不仅找到了两个特殊的整数\",{\"1\":{\"308\":1}}],[\"我们不仅锻炼了我们的逻辑思维能力\",{\"1\":{\"307\":1}}],[\"我们拿到需求后\",{\"1\":{\"980\":1}}],[\"我们经常遇到代码从一个分支迁移到另一个分支的需求\",{\"1\":{\"980\":1}}],[\"我们选择\",{\"1\":{\"979\":1}}],[\"我们会尽快通知你面试结果\",{\"1\":{\"1384\":1}}],[\"我们会在\",{\"1\":{\"1029\":1,\"1233\":1}}],[\"我们会指定\",{\"1\":{\"907\":1}}],[\"我们会出多个实战课带大家手把手做项目\",{\"1\":{\"249\":1}}],[\"我们作为服务端\",{\"1\":{\"894\":1}}],[\"我们作为一个普通个体\",{\"1\":{\"263\":1}}],[\"我们所有的后台代码都通过单元测试啦~~\",{\"1\":{\"893\":1}}],[\"我们都需要统一规范\",{\"1\":{\"1494\":1}}],[\"我们都知道\",{\"1\":{\"1169\":1,\"1346\":1}}],[\"我们都知道计算机在存储数据的时候\",{\"1\":{\"325\":1}}],[\"我们都会定义一个统一的返回格式\",{\"1\":{\"892\":1}}],[\"我们的返回结构这样定义\",{\"1\":{\"1494\":1}}],[\"我们的对话也达到了我的目的\",{\"1\":{\"1392\":1}}],[\"我们的演示源代码仓库\",{\"1\":{\"976\":1}}],[\"我们的\",{\"1\":{\"892\":1,\"969\":1}}],[\"我们的系统绝大多不是单机系统\",{\"1\":{\"616\":1}}],[\"我们这里分三层\",{\"1\":{\"878\":1}}],[\"我们这里主要实现入队\",{\"1\":{\"340\":1}}],[\"我们更多的是选择使用spring来管理数据源\",{\"1\":{\"834\":1}}],[\"我们并不知道是哪条错误\",{\"1\":{\"791\":1}}],[\"我们平时在命令行输入的命令总会对应于一个特定的阶段\",{\"1\":{\"775\":1}}],[\"我们平时开发\",{\"1\":{\"107\":1}}],[\"我们开始真正深入的讨论volatile的具体作用\",{\"1\":{\"755\":1}}],[\"我们大多情况要在数毫秒级别就完成\",{\"1\":{\"708\":1}}],[\"我们至少会创建俩个对象\",{\"1\":{\"698\":1}}],[\"我们也可以使用class类的newinstance方法创建对象\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"我们也可以将容器视为\",{\"1\":{\"1014\":1,\"1220\":1}}],[\"我们也可以在创建值的时候设置超时时间\",{\"1\":{\"666\":1}}],[\"我们也可以看出这两个锁的作用\",{\"1\":{\"618\":1}}],[\"我们在\",{\"1\":{\"1474\":1}}],[\"我们在使用spring容器的时候\",{\"1\":{\"1170\":1,\"1347\":1}}],[\"我们在分布式系统中\",{\"1\":{\"990\":1}}],[\"我们在web包下新建bookcontroller\",{\"1\":{\"894\":1}}],[\"我们在建表时多数情况都会让主键\",{\"1\":{\"622\":1}}],[\"我们在开发的时候\",{\"1\":{\"179\":1}}],[\"我们一般都会对返回的数据做一个封装\",{\"1\":{\"1494\":1}}],[\"我们一般通过cpa理论分析\",{\"1\":{\"1035\":1,\"1239\":1}}],[\"我们一般使用\",{\"1\":{\"990\":1,\"1520\":1}}],[\"我们一般这样\",{\"1\":{\"981\":1}}],[\"我们一般不用动\",{\"1\":{\"907\":1}}],[\"我们一般无法判断是行锁还是临键锁\",{\"1\":{\"619\":1}}],[\"我们一起探讨\",{\"1\":{\"264\":1}}],[\"我们为\",{\"1\":{\"568\":1}}],[\"我们知道导致死锁有一个因素是阻塞\",{\"1\":{\"1062\":1,\"1260\":1}}],[\"我们知道\",{\"1\":{\"491\":1,\"695\":1}}],[\"我们知道整数的取值范围是从0到10\",{\"1\":{\"412\":1}}],[\"我们想使用任何东西\",{\"1\":{\"454\":1}}],[\"我们下期再见\",{\"1\":{\"461\":1,\"478\":1}}],[\"我们下期见\",{\"1\":{\"441\":1}}],[\"我们下面假设磁盘只有一个盘片和一个磁头\",{\"1\":{\"327\":1}}],[\"我们借助\",{\"1\":{\"395\":1}}],[\"我们继续往下看\",{\"1\":{\"392\":1}}],[\"我们分别取hash对应bitarray中位置的值\",{\"1\":{\"386\":1,\"392\":1}}],[\"我们假设每个url的大小为64b\",{\"1\":{\"383\":1}}],[\"我们把向队列中插入元素的过程称为入队\",{\"1\":{\"340\":1}}],[\"我们把锁加在\",{\"1\":{\"92\":1}}],[\"我们从基础开始问吧\",{\"1\":{\"1416\":1}}],[\"我们从\",{\"1\":{\"319\":1}}],[\"我们需要定义状态的枚举值\",{\"1\":{\"1494\":1}}],[\"我们需要了解一下elasticsearch底层索引文档的过程\",{\"1\":{\"1470\":1}}],[\"我们需要创建一个消费者\",{\"1\":{\"1442\":1}}],[\"我们需要一些技巧来提高吞吐量\",{\"1\":{\"1440\":1}}],[\"我们需要确保只有持有锁的客户端才能释放锁\",{\"1\":{\"1428\":1}}],[\"我们需要确保在业务逻辑执行期间锁不会过期\",{\"1\":{\"1428\":1}}],[\"我们需要注意两个主要问题\",{\"1\":{\"1428\":1}}],[\"我们需要仔细考虑数据分布\",{\"1\":{\"1426\":1}}],[\"我们需要重写\",{\"1\":{\"1384\":1}}],[\"我们需要使用其他的同步机制\",{\"1\":{\"1382\":1}}],[\"我们需要在不同微服务之间共享\",{\"1\":{\"1190\":1,\"1365\":1}}],[\"我们需要让我们的类实现serializable接口\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"我们需要先实现cloneable接口并实现其定义的clone方法\",{\"1\":{\"1050\":1,\"1251\":1}}],[\"我们需要对比俩个对象是否相等\",{\"1\":{\"1044\":1,\"1245\":1}}],[\"我们需要解决缓存并行写\",{\"1\":{\"1007\":1,\"1216\":1}}],[\"我们需要做到这两点\",{\"1\":{\"401\":1}}],[\"我们需要多少个哈希函数\",{\"1\":{\"392\":1}}],[\"我们需要验证它们是否正确\",{\"1\":{\"306\":1}}],[\"我们需要提供一个接口文档\",{\"1\":{\"203\":1}}],[\"我们俩非常了解彼此\",{\"1\":{\"265\":1}}],[\"我们只需要查找关键词对应的文档编号\",{\"1\":{\"1464\":1}}],[\"我们只需要创建一个\",{\"1\":{\"1386\":1}}],[\"我们只需要引入依赖就可以直接使用了\",{\"1\":{\"1189\":1,\"1364\":1}}],[\"我们只需要对尾指针或头指针进行自增操作即可\",{\"1\":{\"341\":1}}],[\"我们只需要用synchronized或者lock就能实现互斥操作\",{\"1\":{\"180\":1}}],[\"我们只记录关键有效的日志\",{\"1\":{\"220\":1}}],[\"我们才能看的更远\",{\"1\":{\"167\":1,\"381\":1,\"400\":1,\"409\":1,\"417\":1,\"430\":1,\"650\":1,\"676\":1,\"704\":1,\"761\":1,\"795\":1}}],[\"我们没有必要再使用\",{\"1\":{\"91\":1}}],[\"我们支持\",{\"1\":{\"59\":1,\"65\":1}}],[\"我朋友和我的公众号\",{\"0\":{\"5\":1}}],[\"我总是对探索新技术和合作开展有趣的项目感到兴奋\",{\"1\":{\"4\":1}}],[\"西瓜视频\",{\"1\":{\"3\":1,\"256\":1}}],[\"哔哩哔哩\",{\"1\":{\"3\":1,\"256\":1}}],[\"掘金\",{\"1\":{\"3\":1,\"555\":1}}],[\"微服务\",{\"1\":{\"1408\":1}}],[\"微服务中如何实现\",{\"0\":{\"1190\":1,\"1365\":1}}],[\"微信朋友圈点赞\",{\"1\":{\"719\":1}}],[\"微信抽奖小程序\",{\"1\":{\"719\":1}}],[\"微信搜\",{\"1\":{\"421\":1,\"478\":1,\"587\":1,\"795\":1}}],[\"微信搜索\",{\"1\":{\"167\":1,\"381\":1,\"400\":1,\"409\":1,\"417\":1,\"430\":1,\"650\":1,\"676\":1,\"711\":1,\"761\":1}}],[\"微信联系站长\",{\"1\":{\"252\":1}}],[\"微信扫描下方二维码加入\",{\"1\":{\"250\":1}}],[\"微信公众号文章索引中查找对应文章\",{\"1\":{\"892\":1}}],[\"微信公众号\",{\"1\":{\"3\":1,\"381\":1,\"761\":1,\"795\":1}}],[\"微博好友关注社交关系\",{\"1\":{\"719\":1}}],[\"微博\",{\"1\":{\"3\":2}}],[\"||\",{\"1\":{\"198\":2,\"338\":2,\"339\":3,\"342\":1,\"441\":2,\"894\":1,\"1380\":1,\"1406\":1,\"1410\":1}}],[\"|\",{\"1\":{\"1\":1,\"3\":13,\"53\":1,\"111\":7,\"123\":6,\"131\":1,\"203\":2,\"289\":2,\"292\":1,\"441\":3,\"555\":1,\"590\":2,\"614\":1,\"893\":1,\"915\":2,\"1134\":8,\"1319\":8,\"1390\":1,\"1394\":28}}],[\"年龄\",{\"1\":{\"1507\":1}}],[\"年t\",{\"1\":{\"441\":1}}],[\"年底结婚了\",{\"1\":{\"265\":1}}],[\"年开始录制了第一个短视频\",{\"1\":{\"264\":1}}],[\"年开始逐步转行做自媒体\",{\"1\":{\"263\":1}}],[\"年已经临门一脚\",{\"1\":{\"262\":1}}],[\"年内蒙古边陲城市\",{\"1\":{\"255\":1,\"261\":1}}],[\"年\",{\"1\":{\"1\":1,\"42\":1,\"238\":1,\"255\":1,\"261\":1,\"270\":2,\"440\":1,\"721\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
