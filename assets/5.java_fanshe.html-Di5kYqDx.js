import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as s,b as l,w as t,d as i,e as n,r as p,o as k}from"./app-CTHsGMn2.js";const r={},d=s("p",null,[s("strong",null,[i("我是 javapub，一名 "),s("code",null,"Markdown"),i(" 程序员从👨‍💻，八股文种子选手。")])],-1),o=n(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> clazz </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> (MyClass) </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">clazz</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">newInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们使用 MyClass.class 来获取 MyClass 类的 Class 对象，并使用 newInstance() 方法来创建 MyClass 类的实例。</p>`,2),g=s("ul",null,[s("li",null,"动态地创建对象"),s("li",null,"动态地调用方法"),s("li",null,"动态地获取和设置属性值"),s("li",null,"动态地获取和设置数组元素"),s("li",null,"动态地获取和设置注解"),s("li",null,"动态地获取和设置泛型信息")],-1),c=n(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> clazz </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> (MyClass) </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">clazz</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">newInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Method</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> method </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> clazz</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;myMethod&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> (String) </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">method</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们使用 MyClass.class 来获取 MyClass 类的 Class 对象，并使用 newInstance() 方法来创建 MyClass 类的实例。然后，我们使用 getMethod() 方法来获取 MyClass 类中名为 myMethod 的方法，并使用 invoke() 方法来调用这个方法。</p>`,2),u=n(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> clazz </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">TypeVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">[] typeParams </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> clazz</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getTypeParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们使用 MyClass.class 来获取 MyClass 类的 Class 对象，并使用 getTypeParameters() 方法来获取 MyClass 类的泛型参数。</p><p>反射还可以用于动态地获取和设置泛型类型，例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> clazz </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Field</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> field </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> clazz</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getField</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;myField&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> fieldType </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getGenericType</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们使用 MyClass.class 来获取 MyClass 类的 Class 对象，并使用 getField() 方法来获取 MyClass 类中名为 myField 的字段。然后，我们使用 getGenericType() 方法来获取这个字段的泛型类型。</p>`,5),y=n('<figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225810.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注<strong>公众号JavaPub</strong>追更！</p><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225632.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>🎁目录合集：</p><p>Gitee：<code>https://gitee.com/rodert/JavaPub</code></p><p>GitHub：<code>https://github.com/Rodert/JavaPub</code></p><p><a href="http://javapub.net.cn" target="_blank" rel="noopener noreferrer">http://javapub.net.cn</a></p>',7);function B(E,v){const a=p("font");return k(),h("div",null,[d,s("p",null,[s("strong",null,[l(a,{color:"blue"},{default:t(()=>[i("面试官")]),_:1}),i("： 你好，请问你对 Java 反射有了解吗？")])]),s("p",null,[s("strong",null,[l(a,{color:"red"},{default:t(()=>[i("候选人：")]),_:1})]),i(" 是的，我了解一些。")]),s("p",null,[s("strong",null,[l(a,{color:"blue"},{default:t(()=>[i("面试官")]),_:1}),i("： 那你能简单地介绍一下 Java 反射是什么吗？")])]),s("p",null,[s("strong",null,[l(a,{color:"red"},{default:t(()=>[i("候选人：")]),_:1})]),i(" Java 反射是一种机制，它可以在运行时动态地获取类的信息，包括类的属性、方法、构造函数等，并且可以在运行时调用这些属性和方法。")]),s("p",null,[s("strong",null,[l(a,{color:"blue"},{default:t(()=>[i("面试官")]),_:1}),i("： 那你能举个例子来说明一下吗？")])]),s("p",null,[s("strong",null,[l(a,{color:"red"},{default:t(()=>[i("候选人：")]),_:1})]),i(" 当然可以。例如，我们可以使用反射来动态地创建对象：")]),o,s("p",null,[s("strong",null,[l(a,{color:"blue"},{default:t(()=>[i("面试官")]),_:1}),i("： 那反射具体有什么作用呢？")])]),s("p",null,[s("strong",null,[l(a,{color:"red"},{default:t(()=>[i("候选人：")]),_:1})]),i(" 反射可以用于很多方面，例如：")]),g,s("p",null,[s("strong",null,[l(a,{color:"blue"},{default:t(()=>[i("面试官")]),_:1}),i("： 那你能举个例子来说明一下动态地调用方法吗？")])]),s("p",null,[s("strong",null,[l(a,{color:"red"},{default:t(()=>[i("候选人：")]),_:1})]),i(" 当然可以。例如，我们可以使用反射来动态地调用方法：")]),c,s("p",null,[s("strong",null,[l(a,{color:"blue"},{default:t(()=>[i("面试官")]),_:1}),i("： 那你能说一下反射的优缺点吗？")])]),s("p",null,[s("strong",null,[l(a,{color:"red"},{default:t(()=>[i("候选人：")]),_:1})]),i(" 反射的优点是可以在运行时动态地获取和操作类的信息，从而实现更加灵活和强大的功能。缺点是反射的性能比较低，因为它需要在运行时进行类型检查和方法调用，而且容易破坏封装性，因为它可以访问私有属性和方法。")]),s("p",null,[s("strong",null,[l(a,{color:"blue"},{default:t(()=>[i("面试官")]),_:1}),i("： 非常好，你对 Java 反射的了解很不错。谢谢你的回答。")])]),s("p",null,[s("strong",null,[l(a,{color:"red"},{default:t(()=>[i("候选人：")]),_:1})]),i(" 谢谢您的夸奖，我会继续努力学习。")]),s("p",null,[s("strong",null,[l(a,{color:"blue"},{default:t(()=>[i("面试官")]),_:1}),i("： 那你能说一下反射和泛型的关系吗？")])]),s("p",null,[s("strong",null,[l(a,{color:"red"},{default:t(()=>[i("候选人：")]),_:1})]),i(" 当然可以。反射可以用于动态地获取和设置泛型信息，例如：")]),u,s("p",null,[s("strong",null,[l(a,{color:"blue"},{default:t(()=>[i("面试官")]),_:1}),i("： 那你能说一下反射和安全性的关系吗？")])]),s("p",null,[s("strong",null,[l(a,{color:"red"},{default:t(()=>[i("候选人：")]),_:1})]),i(" 反射可以破坏封装性，因为它可以访问私有属性和方法。因此，在使用反射时需要格外小心，避免破坏程序的安全性。一般来说，我们应该尽量避免使用反射来访问私有属性和方法，而是通过公共接口来访问类的属性和方法。")]),s("p",null,[s("strong",null,[l(a,{color:"blue"},{default:t(()=>[i("面试官")]),_:1}),i("： 非常好，你对 Java 反射的了解很深入，先回去吧。")])]),s("p",null,[s("strong",null,[l(a,{color:"red"},{default:t(()=>[i("候选人：")]),_:1})]),i(" 淦")]),y])}const b=e(r,[["render",B],["__file","5.java_fanshe.html.vue"]]),F=JSON.parse('{"path":"/posts/special/1v1/5.java_fanshe.html","title":"Java反射","lang":"zh-CN","frontmatter":{"title":"Java反射","icon":"laptop-code","category":["《面试1v1》"],"description":"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。 ： 你好，请问你对 Java 反射有了解吗？ 是的，我了解一些。 ： 那你能简单地介绍一下 Java 反射是什么吗？ Java 反射是一种机制，它可以在运行时动态地获取类的信息，包括类的属性、方法、构造函数等，并且可以在运行时调用这些属性和方法。 ： 那你能举个例子来说...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/posts/special/1v1/5.java_fanshe.html"}],["meta",{"property":"og:site_name","content":"JavaPub"}],["meta",{"property":"og:title","content":"Java反射"}],["meta",{"property":"og:description","content":"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。 ： 你好，请问你对 Java 反射有了解吗？ 是的，我了解一些。 ： 那你能简单地介绍一下 Java 反射是什么吗？ Java 反射是一种机制，它可以在运行时动态地获取类的信息，包括类的属性、方法、构造函数等，并且可以在运行时调用这些属性和方法。 ： 那你能举个例子来说..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225810.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T14:35:52.000Z"}],["meta",{"property":"article:author","content":"Mr.Wang"}],["meta",{"property":"article:modified_time","content":"2024-07-03T14:35:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java反射\\",\\"image\\":[\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225810.jpg\\",\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225632.png\\"],\\"dateModified\\":\\"2024-07-03T14:35:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Wang\\",\\"url\\":\\"https://javapub.net.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1717568495000,"updatedTime":1720017352000,"contributors":[{"name":"wangshiyu","email":"iswangshiyu@foxmail.com","commits":1}]},"readingTime":{"minutes":3.61,"words":1083},"filePathRelative":"posts/special/1v1/5.java_fanshe.md","localizedDate":"2024年6月5日","excerpt":"<p><strong>我是 javapub，一名 <code>Markdown</code> 程序员从👨‍💻，八股文种子选手。</strong></p>\\n<p><strong>： 你好，请问你对 Java 反射有了解吗？</strong></p>\\n<p><strong></strong> 是的，我了解一些。</p>\\n<p><strong>： 那你能简单地介绍一下 Java 反射是什么吗？</strong></p>\\n<p><strong></strong> Java 反射是一种机制，它可以在运行时动态地获取类的信息，包括类的属性、方法、构造函数等，并且可以在运行时调用这些属性和方法。</p>","autoDesc":true}');export{b as comp,F as data};
