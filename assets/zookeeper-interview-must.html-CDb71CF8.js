import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,f as r,a as p,e as t,o as a}from"./app-DoK4qC10.js";const n={},l=p("p",null,"Zookeeper",-1),s=t('<p>10道不得不会的 Zookeeper 面试题</p><p>我是JavaPub，专注于面试、副业，技术人的成长记录。</p><p>以下是 Zookeeper 面试题，相信大家都会有种及眼熟又陌生的感觉、看过可能在短暂的面试后又马上忘记了。<strong>JavaPub</strong>在这里整理这些容易忘记的重点知识及<strong>解答</strong>，<code>建议收藏，经常温习查阅</code>。</p><p>评论区见</p><p>@[toc]</p><h1 id="zookeeper" tabindex="-1"><a class="header-anchor" href="#zookeeper"><span>Zookeeper</span></a></h1><p>本系列<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzUzNDUyOTY0Nw==&amp;action=getalbum&amp;album_id=2344061143381508097#wechat_redirect" target="_blank" rel="noopener noreferrer">《最少必要面试题》</a></p><h3 id="_1-什么是-zookeeper" tabindex="-1"><a class="header-anchor" href="#_1-什么是-zookeeper"><span>1. 什么是 Zookeeper</span></a></h3><p>ZooKeeper 是一个开源的分布式协调服务。它是一个为分布式应用提供一致性服务的软件，分布式应用程序可以基于 Zookeeper 实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。</p><p>Zookeeper 从设计模式角度来理解， 是一个基于<strong>观察者模式</strong>设计的分布式服务管理框架，它<strong>负责存储和管理大家都关心的数据</strong>，然后<strong>接受观察者的注册</strong>，一旦这些数据的状态发生变化，Zookeeper就将<strong>负责通知已经在Zookeeper上注册的那些观察者</strong>做出反应。</p><p>观察者模式是什么：<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzUzNDUyOTY0Nw==&amp;action=getalbum&amp;album_id=1969202758012436483#wechat_redirect" target="_blank" rel="noopener noreferrer">设计模式</a></p><p>可以这样理解：</p><p><code>ZooKeeper=文件系统+通知机制</code></p><h3 id="_2-zk-的节点类型" tabindex="-1"><a class="header-anchor" href="#_2-zk-的节点类型"><span>2. ZK 的节点类型</span></a></h3><blockquote><p>这道题相信大家都有所了解，zookeeper v3.6.2 版本后，支持7种节点类型。持久；持久顺序；临时；临时顺序；容器；持久 TTL；持久顺序 TTL。</p></blockquote><p>说出这几种类型当然已经回答了问题，但是细节的描述更能体现你的知识底蕴。</p><p><strong>持久 TTL、持久顺序 TTL</strong></p><p>关于持久和顺序这两个关键字，不用我再解释了，这两种类型的节点重点是后面的 TTL，TTL 是 <code>time to live</code> 的缩写，指带有存活时间，简单来说就是当该节点下面没有子节点的话，超过了 TTL 指定时间后就会被自动删除，但是 TTL 启用是需要额外的配置(这个之前也有提过)配置是 zookeeper.extendedTypesEnabled 需要配置成 true，否则的话创建 TTL 时会收到 Unimplemented 的报错。</p><h3 id="_3-zookeeper-下-server-工作状态有哪些" tabindex="-1"><a class="header-anchor" href="#_3-zookeeper-下-server-工作状态有哪些"><span>3. Zookeeper 下 Server 工作状态有哪些？</span></a></h3><p>服务器具有四种状态，分别是 LOOKING、FOLLOWING、LEADING、OBSERVING。</p><ul><li><p><strong>LOOKING</strong>：寻 找 Leader 状态。当服务器处于该状态时，它会认为当前集群中没有Leader，因此需要进入 Leader 选举状态。</p></li><li><p><strong>FOLLOWING</strong>：跟随者状态。表明当前服务器角色是 Follower。</p></li><li><p><strong>LEADING</strong>：领导者状态。表明当前服务器角色是 Leader。</p></li><li><p><strong>OBSERVING</strong>：观察者状态。表明当前服务器角色是 Observer。（Observer角色除了不能投票(以及和投票相关的能力)和过半写成功策略外，其它和follower功能一样。observer角色减轻了投票的压力，在以前通过增、减follower的数量提高伸缩性。投票来说，follower是有状态的，都直接影响投票结果，特别是follower的数量越多，投票过程的性能就越差。）</p></li></ul><h3 id="_4-zookeeper是cp还是ap" tabindex="-1"><a class="header-anchor" href="#_4-zookeeper是cp还是ap"><span>4. zookeeper是cp还是ap?</span></a></h3><p>zk遵循的是CP原则，即保证一致性和网络分区容错性，但不保证可用性。</p><p><strong>什么是cap?</strong></p><p>Consistency（一致性）：分布式系统中多个主机之间是否能够保持数据一致性的特性。即当系统数据发生更新操作之后，各个主机中的数据是否仍然处于一致的状态。</p><p>Availability（可用性）：系统提供的服务必须一直处于可用的状态，即对于的每一个请求，系统总是可以在<strong>有限的时间</strong>内对用户做出响应。</p><p>Partition tolerance（分区容错性）：分布式系统在遇到任何网络分区故障时候，仍然保证对外提供满足一致性和可用性的服务。</p><h3 id="_5-说几个-zookeeper-常用的命令。" tabindex="-1"><a class="header-anchor" href="#_5-说几个-zookeeper-常用的命令。"><span>5. 说几个 zookeeper 常用的命令。</span></a></h3><p>常用命令：ls get set create delete 等。</p><h3 id="_6-介绍一下zab协议" tabindex="-1"><a class="header-anchor" href="#_6-介绍一下zab协议"><span>6. 介绍一下ZAB协议？</span></a></h3><p>ZAB协议是为分布式协调服务Zookeeper专门设计的一种支持崩溃恢复的原子广播协议。</p><p>ZAB协议包括两种基本的模式：</p><ol><li><p>崩溃恢复</p></li><li><p>消息广播</p></li></ol><p>当整个 zookeeper 集群刚刚启动或者Leader服务器宕机、重启或者网络故障导致不存在过半的服务器与 Leader 服务器保持正常通信时，所有进程（服务器）进入崩溃恢复模式，首先选举产生新的 Leader 服务器，然后集群中 Follower 服务器开始与新的 Leader 服务器进行数据同步，当集群中超过半数机器与该 Leader 服务器完成数据同步之后，退出恢复模式进入消息广播模式，Leader 服务器开始接收客户端的事务请求生成事物提案来进行事务请求处理。</p><h3 id="_7-zab-和-paxos-算法的联系与区别" tabindex="-1"><a class="header-anchor" href="#_7-zab-和-paxos-算法的联系与区别"><span>7. ZAB 和 Paxos 算法的联系与区别？</span></a></h3><p><strong>相同点：</strong></p><ol><li><p>两者都存在一个类似于 Leader 进程的角色，由其负责协调多个 Follower 进程的运行</p></li><li><p>Leader 进程都会等待超过半数的 Follower 做出正确的反馈后，才会将一个提案进行提交</p></li><li><p>ZAB 协议中，每个 Proposal 中都包含一个 epoch 值来代表当前的 Leader 周期，Paxos 中名字为 Ballot</p></li></ol><p><strong>不同点：</strong></p><p>ZAB(ZooKeeper Atomic Broadcast) 用来构建高可用的分布式数据主备系统（Zookeeper），Paxos 是用来构建分布式一致性状态机系统。</p><p>而 Paxos 算法与 ZAB 协议不同的是，Paxos 算法的发起者可以是一个或多个。当集群中的 Acceptor 服务器中的大多数可以执行会话请求后，提议者服务器只负责发送提交指令，事务的执行实际发生在 Acceptor 服务器。这与 ZooKeeper 服务器上事务的执行发生在 Leader 服务器上不同。Paxos 算法在数据同步阶段，是多台 Acceptor 服务器作为数据源同步给集群中的多台 Learner 服务器，而 ZooKeeper 则是单台 Leader 服务器作为数据源同步给集群中的其他角色服务器。</p><p>注意：</p><p>ZAB是在Paxos的基础上改进和演变过来的。</p><p>提议者（Proposer）、决策者（Acceptor）、决策学习者（Learner）</p><h3 id="_8-zookeeper-的典型应用场景" tabindex="-1"><a class="header-anchor" href="#_8-zookeeper-的典型应用场景"><span>8. Zookeeper 的典型应用场景</span></a></h3><ol><li>数据发布/订阅</li><li>负载均衡</li><li>命名服务</li><li>分布式协调/通知</li><li>集群管理</li><li>Master 选举</li><li>分布式锁</li><li>分布式队列</li></ol><p><strong>数据发布/订阅系统</strong>，即所谓的配置中心，目的：动态获取数据（配置信息），实现数据（配置信息）的集中式管理和数据的动态更新</p><p><strong>Zookeeper 分布式锁</strong></p><p>有了 zookeeper 的一致性文件系统，锁的问题变得容易。锁服务可以分为两类，一个是保持独占，另一个是控制时序。</p><p>对于第一类，我们将 zookeeper 上的一个 znode 看作是一把锁，通过 createznode的方式来实现。所有客户端都去创建 /task_lock 节点，最终成功创建的那个客户端也即拥有了这把锁。用完删除掉自己创建的 task_lock 节点就释放出锁。</p><p>对于第二类， /task_lock 已经预先存在，所有客户端在它下面创建临时顺序编号目录节点，和选 master 一样，编号最小的获得锁，用完删除，依次方便。</p><p><strong>Zookeeper 队列管理</strong></p><blockquote><p>一般很少用到，可简单了解</p></blockquote><p>两种类型的队列：</p><ol><li><p>同步队列，当一个队列的成员都聚齐时，这个队列才可用，否则一直等待所有成员到达。</p></li><li><p>队列按照 FIFO 方式进行入队和出队操作。</p></li></ol><p>第一类，在约定目录下创建临时目录节点，监听节点数目是否是我们要求的数目。</p><p>第二类，和分布式锁服务中的控制时序场景基本原理一致，入列有编号，出列按编号。在特定的目录下创建 PERSISTENT_SEQUENTIAL 节点，创建成功时Watcher 通知等待的队列，队列删除序列号最小的节点用以消费。此场景下Zookeeper 的 znode 用于消息存储，znode 存储的数据就是消息队列中的消息内容，SEQUENTIAL 序列号就是消息的编号，按序取出即可。由于创建的节点是持久化的，所以不必担心队列消息的丢失问题。</p><h3 id="_9-chroot特性" tabindex="-1"><a class="header-anchor" href="#_9-chroot特性"><span>9. Chroot特性</span></a></h3><p>zookeeper v3.2.0 版本后，添加了 Chroot 特性，该特性允许每个客户端为自己设置一个命名空间。如果一个客户端设置了 Chroot，那么该客户端对服务器的任何操作，都将会被限制在其自己的命名空间下。</p><p>通过设置 Chroot，能够将一个客户端应用于 Zookeeper 服务端的一颗子树相对应，在那些多个应用共用一个 Zookeeper 进群的场景下，对实现不同应用间的相互隔离非常有帮助。</p><h3 id="拓展" tabindex="-1"><a class="header-anchor" href="#拓展"><span>拓展</span></a></h3><p>ZooKeeper以Fast Paxos算法为基础，Paxos 算法存在活锁的问题，即当有多个 proposer 交错提交时有可能互相排斥导致没有一个proposer能提交成功，而Fast Paxos做了一些优化，通过选举产生一个领导者，只有leader才能提交proposer具体算法可见Fast Paxos。</p><p>低谷蓄力</p><p><strong>《最少必要面试题》</strong></p><p><a href="https://mp.weixin.qq.com/s/3Nviyml0cvnX_HHkZ5DjWg" target="_blank" rel="noopener noreferrer">10道不得不会的Java基础面试题</a></p><p><a href="https://mp.weixin.qq.com/s/ug3LBR4MfM1C5uVFJaPWLQ" target="_blank" rel="noopener noreferrer">10道不得不会的Java容器面试题</a></p><p><a href="https://mp.weixin.qq.com/s/h2tTwDVqL15rCI6rftgn9A" target="_blank" rel="noopener noreferrer">10道不得不会的Java并发基础面试题</a></p><p><a href="https://mp.weixin.qq.com/s/59Tif95LGi8BTJXu47zi6g" target="_blank" rel="noopener noreferrer">10道不得不会的JavaEE面试题</a></p><p><a href="https://mp.weixin.qq.com/s/hvsaD1NlzpR0LpP-GmbU_A" target="_blank" rel="noopener noreferrer">10道不得不会的JVM面试题</a></p><p><a href="https://mp.weixin.qq.com/s/yVPwCoSQ-8OYvhw8bH0PtA" target="_blank" rel="noopener noreferrer">10道不得不会的MySQL基础面试题</a></p><p><a href="https://mp.weixin.qq.com/s/lVFwy765hQ2FvIYBHyw0yA" target="_blank" rel="noopener noreferrer">10道不得不会的MyBatis面试题</a></p><p><a href="https://mp.weixin.qq.com/s/lrHsLZANxHxd_FWTCdMNJw" target="_blank" rel="noopener noreferrer">10道不得不会的Spring面试题</a></p><p><a href="https://mp.weixin.qq.com/s/-oYKVXBaQwzyzp7ffqH7gw" target="_blank" rel="noopener noreferrer">10道不得不会的SpringBoot面试题</a></p><p><a href="https://mp.weixin.qq.com/s/z3D37HqeTUmwrdheUL_Efw" target="_blank" rel="noopener noreferrer">10道不得不会的ElasticSearch面试题</a></p><p><a href="https://mp.weixin.qq.com/s/_Pq2VgxRA4yw1j_eCfEiLg" target="_blank" rel="noopener noreferrer">10道不得不会的Redis面试题</a></p><p><a href="https://javapub.blog.csdn.net/category_11740063.html" target="_blank" rel="noopener noreferrer">10道不得不会的Kafka面试题</a></p><p><a href="https://mp.weixin.qq.com/s/ym0-x6okFi0CgF8RcxeLFA" target="_blank" rel="noopener noreferrer">10道不得不会的Zookeeper面试题</a></p><p><a href="https://mp.weixin.qq.com/s/DTC3gZNHm3Rlf_GK7twlkQ" target="_blank" rel="noopener noreferrer">10道不得不会的Docker面试题</a></p><p><a href="">10道不得不会的缓存面试题</a></p><p><a href="https://github.com/Rodert" target="_blank" rel="noopener noreferrer">GItHub</a>|<a href="https://gitee.com/rodert" target="_blank" rel="noopener noreferrer">GitEE</a></p>',79);function i(c,h){return a(),o("div",null,[l,r(" more "),s])}const m=e(n,[["render",i],["__file","zookeeper-interview-must.html.vue"]]),g=JSON.parse('{"path":"/posts/special/havato/zookeeper-interview-must.html","title":"10道不得不会的 Zookeeper 面试题","lang":"zh-CN","frontmatter":{"index":true,"icon":"page","title":"10道不得不会的 Zookeeper 面试题","author":"Wang Shiyu","date":"2022-06-25T00:00:00.000Z","category":["最少必要面试题"],"tag":["zookeeper","面试题"],"description":"Zookeeper","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/posts/special/havato/zookeeper-interview-must.html"}],["meta",{"property":"og:site_name","content":"JavaPub"}],["meta",{"property":"og:title","content":"10道不得不会的 Zookeeper 面试题"}],["meta",{"property":"og:description","content":"Zookeeper"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T14:35:52.000Z"}],["meta",{"property":"article:author","content":"Wang Shiyu"}],["meta",{"property":"article:tag","content":"zookeeper"}],["meta",{"property":"article:tag","content":"面试题"}],["meta",{"property":"article:published_time","content":"2022-06-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-03T14:35:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"10道不得不会的 Zookeeper 面试题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-03T14:35:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Wang Shiyu\\"}]}"]]},"headers":[{"level":3,"title":"1. 什么是 Zookeeper","slug":"_1-什么是-zookeeper","link":"#_1-什么是-zookeeper","children":[]},{"level":3,"title":"2. ZK 的节点类型","slug":"_2-zk-的节点类型","link":"#_2-zk-的节点类型","children":[]},{"level":3,"title":"3. Zookeeper 下 Server 工作状态有哪些？","slug":"_3-zookeeper-下-server-工作状态有哪些","link":"#_3-zookeeper-下-server-工作状态有哪些","children":[]},{"level":3,"title":"4. zookeeper是cp还是ap?","slug":"_4-zookeeper是cp还是ap","link":"#_4-zookeeper是cp还是ap","children":[]},{"level":3,"title":"5. 说几个 zookeeper 常用的命令。","slug":"_5-说几个-zookeeper-常用的命令。","link":"#_5-说几个-zookeeper-常用的命令。","children":[]},{"level":3,"title":"6. 介绍一下ZAB协议？","slug":"_6-介绍一下zab协议","link":"#_6-介绍一下zab协议","children":[]},{"level":3,"title":"7. ZAB 和 Paxos 算法的联系与区别？","slug":"_7-zab-和-paxos-算法的联系与区别","link":"#_7-zab-和-paxos-算法的联系与区别","children":[]},{"level":3,"title":"8. Zookeeper 的典型应用场景","slug":"_8-zookeeper-的典型应用场景","link":"#_8-zookeeper-的典型应用场景","children":[]},{"level":3,"title":"9. Chroot特性","slug":"_9-chroot特性","link":"#_9-chroot特性","children":[]},{"level":3,"title":"拓展","slug":"拓展","link":"#拓展","children":[]}],"git":{"createdTime":1717582746000,"updatedTime":1720017352000,"contributors":[{"name":"wangshiyu","email":"iswangshiyu@foxmail.com","commits":1}]},"readingTime":{"minutes":8.97,"words":2692},"filePathRelative":"posts/special/havato/zookeeper-interview-must.md","localizedDate":"2022年6月25日","excerpt":"<p>Zookeeper</p>\\n","autoDesc":true}');export{m as comp,g as data};
