import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,f as l,a as s,e as n,d as i,o as t}from"./app-BKIgV2rK.js";const p={},h=s("h2",{id:"rodert单排学习redis入门【黑铁】",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#rodert单排学习redis入门【黑铁】"},[s("span",null,"rodert单排学习redis入门【黑铁】")])],-1),d=n('<p>redis入门</p><blockquote><p>欢迎大家前来白嫖PDF。下图回复：666</p></blockquote><blockquote><p>本教程致力于最实用教程，个别图片粘贴有丢失，还有来领取原版。</p></blockquote><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F15%2F20240615-091006.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><p>@[toc]</p><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><blockquote><p>声明：参考来源互联网，有任何争议可以留言。站在前人的肩上，我们才能看的更远。</p></blockquote><blockquote><p>本教程纯手打，致力于最实用教程，不需要什么奖励，只希望多多转发支持。 欢迎来我公众号，希望可以结识你，也可以催更，微信搜索：JavaPub</p></blockquote><blockquote><p>有任何问题都可以来谈谈 ！</p></blockquote><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F15%2F20240615-091009.jpeg" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><blockquote><p>本篇主要是 Redis 的入门，涉及一些基础命令和常见场景。</p></blockquote><blockquote><p>redis是目前最热的缓存组件之一，如果你还不懂，那就开始，入门到实战</p></blockquote>',12),r=s("blockquote",null,[s("p",null,[i("本文主要是 "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"Redis")]),i(" 入门知识，介绍 Redis 特性、使用场景、安装和数据类型。")])],-1),k=s("blockquote",null,[s("p",null,"中文官网：http://www.redis.cn/")],-1),c=s("h2",{id:"_1-nosql-not-only-sql",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-nosql-not-only-sql"},[s("span",null,"1.NoSql(not only sql)")])],-1),o=s("p",null,"指非关系型数据库，不支持sql语句，nosql中存储的数据是KV形式",-1),u=s("p",null,"常见的NoSQL产品有：Mongodb、Redis、Hbase hadoop、Cassandra hadoop。",-1),g=s("h2",{id:"_2-redis入门",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_2-redis入门"},[s("span",null,"2.Redis入门")])],-1),B=s("blockquote",null,[s("p",null,"这是一些redis介绍，做一些简单了解即可。")],-1),b=s("p",null,[s("strong",null,[s("span",{color:"#159957",face:"黑体"},"Redis")]),i("（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，"),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"Redis")]),i(" 的开发由Pivotal赞助。")],-1),v=s("p",null,[i("redis 是一个 "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"key-value")]),i(" 存储系统。和 Memcached 类似，它支持存储的 value 类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set --有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，"),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"Redis")]),i(" 支持各种不同方式的排序。与 "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"memcached")]),i(" 一样，为了保证效率，数据都是缓存在内存中。区别的是 "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"Redis")]),i(" 会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了 "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"master-slave")]),i("(主从)同步。")],-1),y=s("p",null,[s("strong",null,[s("span",{color:"#159957",face:"黑体"},"Redis")]),i(" 是一个高性能的key-value数据库。 "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"Redis")]),i(" 的出现，很大程度补偿了**"),s("span",{color:"#159957",face:"黑体"},"memcached"),i("**这类key/value存储的不足，在部 分场合可以对关系数据库起到很好的补充作用。它提供了Java，C/C++，C#，PHP，JavaScript，Perl，Object-C，Python，Ruby，Erlang等客户端，使用很方便。 "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"Redis")]),i(" 支持主从同步。数据可以从主服务器向任意数量的从服务器上同步，从服务器可以是关联其他从服务器的主服务器。这使得 "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"Redis")]),i(" 可执行单层树复制。存盘可以有意无意的对数据进行写操作。由于完全实现了发布/订阅机制，使得从数据库在任何地方同步树时，可订阅一个频道并接收主服务器完整的消息发布记录。同步对读取操作的可扩展性和数据冗余很有帮助。")],-1),m=s("p",null,[s("strong",null,[s("span",{color:"#159957",face:"黑体"},"Redis")]),i(" 的官网地址，非常好记，是redis.io。（域名后缀io属于国家域名，是british Indian Ocean territory，即英属印度洋领地），Vmware在资助着 "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"Redis")]),i(" 项目的开发和维护。")],-1),F=n('<h2 id="_3-redis特性" tabindex="-1"><a class="header-anchor" href="#_3-redis特性"><span>3.Redis特性</span></a></h2><h3 id="_3-1-性能" tabindex="-1"><a class="header-anchor" href="#_3-1-性能"><span>3.1.性能</span></a></h3><p>下面是官方的bench-mark数据： 测试完成了 50 个并发执行 100000 个请求。 设置和获取的值是一个 256 字节字符串。 Linux box 是运行 Linux 2.6 , 这是 X3320 Xeon 2.5 ghz。 文本执行使用 loopback 接口(127.0.0.1)。 结果:读的速度是 <strong>110000次/s</strong> ,写的速度是 <strong>81000次/s</strong> 。</p><h3 id="_3-2-特性" tabindex="-1"><a class="header-anchor" href="#_3-2-特性"><span>3.2.特性</span></a></h3>',4),A=s("ol",null,[s("li",null,[i("**"),s("span",{color:"#159957",face:"黑体"},"Redis "),i("**与其他 "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"key-value")]),i(" 缓存产品有以下三个特点：")]),s("li",null,[i("**"),s("span",{color:"#159957",face:"黑体"},"Redis "),i("**支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。")]),s("li",null,[i("**"),s("span",{color:"#159957",face:"黑体"},"Redis "),i("**不仅仅支持简单的 **"),s("span",{color:"#159957",face:"黑体"},"key-value"),i("**类型的数据，同时还提供 **"),s("span",{color:"#159957",face:"黑体"},"list，set，zset，hash "),i("**等数据结构的存储。")]),s("li",null,[i("**"),s("span",{color:"#159957",face:"黑体"},"Redis "),i("**支持数据的备份，即 "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"master-slave")]),i(" 模式的数据备份。")])],-1),E=s("h3",{id:"_3-3-优势",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_3-3-优势"},[s("span",null,"3.3.优势")])],-1),_=s("ul",null,[s("li",null,[i("性能极高 – **"),s("span",{color:"#159957",face:"黑体"},"Redis "),i("**能读的速度是110000次/s,写的速度是81000次/s 。")]),s("li",null,[i("丰富的数据类型 – **"),s("span",{color:"#159957",face:"黑体"},"Redis "),i("**支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。")]),s("li",null,[i("原子 – **"),s("span",{color:"#159957",face:"黑体"},"Redis "),s("strong",null,"的所有操作都是原子性的，同时"),s("span",{color:"#159957",face:"黑体"},"Redis "),i("**还支持对几个操作全并后的原子性执行。")]),s("li",null,[i("丰富的特性 – **"),s("span",{color:"#159957",face:"黑体"},"Redis "),i("**还支持 publish/subscribe, 通知, key 过期等等特性。")])],-1),f=s("h2",{id:"_4-redis使用场景",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_4-redis使用场景"},[s("span",null,"4.Redis使用场景")])],-1),C=s("blockquote",null,[s("p",null,[i("目前在互联网公司， "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"Redis ")]),i(" 使用非常广泛，我日常工作中，会用它做爬虫采集系统中队列使用，还有在后台管理系统中做分布式，存储 token 使用。")])],-1),R=s("p",null,[i("1、"),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"缓存")])],-1),q=s("p",null,[i("缓存现在几乎是所有中大型网站都在用的必杀技，合理的利用缓存不仅能够提升网站访问速度，还能大大降低数据库的压力。"),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"Redis ")]),i(" 提供了键过期功能，也提供了灵活的键淘汰策略，所以，现在 "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"Redis ")]),i(" 用在缓存的场合非常多。")],-1),x=s("p",null,[i("2、"),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"排行榜")])],-1),S=s("p",null,[i("很多网站都有排行榜应用的，如京东的月度销量榜单、商品按时间的上新排行榜等。"),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"Redis ")]),i(" 提供的有序集合数据类构能实现各种复杂的排行榜应用。")],-1),N=s("p",null,[i("3、"),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"计数器")])],-1),T=s("p",null,[i("什么是计数器，如电商网站商品的浏览量、视频网站视频的播放数等。为了保证数据实时效，每次浏览都得给+1，并发量高时如果每次都请求数据库操作无疑是种挑战和压力。"),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"Redis ")]),i(" 提供的 "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"incr")]),i(" 命令来实现计数器功能，内存操作，性能非常好，非常适用于这些计数场景。")],-1),D=s("p",null,[i("4、"),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"分布式会话")])],-1),L=s("p",null,"集群模式下，在应用不多的情况下一般使用容器自带的 session 复制功能就能满足，当应用增多相对复杂的系统中，一般都会搭建以 Redis 等内存数据库为中心的 session 服务，session 不再由容器管理，而是由 session 服务及内存数据库管理。",-1),O=s("p",null,[i("5、"),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"分布式锁")])],-1),P=s("p",null,"在很多互联网公司中都使用了分布式技术，分布式技术带来的技术挑战是对同一个资源的并发访问，如全局ID、减库存、秒杀等场景，并发量不大的场景可以使用数据库的悲观锁、乐观锁来实现，但在并发量高的场合中，利用数据库锁来控制资源的并发访问是不太理想的，大大影响了数据库的性能。可以利用 Redis 的setnx功能来编写分布式的锁，如果设置返回1说明获取锁成功，否则获取锁失败，实际应用中要考虑的细节要更多。",-1),H=s("p",null,[i("6、"),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"社交网络")])],-1),I=s("p",null,"点赞、踩、关注/被关注、共同好友等是社交网站的基本功能，社交网站的访问量通常来说比较大，而且传统的关系数据库类型不适合存储这种类型的数据，Redis提供的哈希、集合等数据结构能很方便的的实现这些功能。",-1),M=s("p",null,[i("7、"),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"最新列表")])],-1),w=s("p",null,"Redis列表结构，LPUSH可以在列表头部插入一个内容ID作为关键字，LTRIM可用来限制列表的数量，这样列表永远为N个ID，无需查询最新的列表，直接根据ID去到对应的内容页即可。",-1),j=s("p",null,[i("8、"),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"消息系统")])],-1),U=n(`<p>消息队列是大型网站必用中间件，如ActiveMQ、RabbitMQ、Kafka 等流行的消息队列中间件，主要用于业务解耦、流量削峰及异步处理实时性低的业务。Redis 提供了发布/订阅及阻塞队列功能，能实现一个简单的消息队列系统。另外，这个不能和专业的消息中间件相比。</p><h2 id="_5-安装" tabindex="-1"><a class="header-anchor" href="#_5-安装"><span>5.安装</span></a></h2><h3 id="_5-1-单机安装" tabindex="-1"><a class="header-anchor" href="#_5-1-单机安装"><span>5.1.单机安装</span></a></h3><h4 id="_5-1-1-windows下" tabindex="-1"><a class="header-anchor" href="#_5-1-1-windows下"><span>5.1.1.windows下</span></a></h4><p>redis 开源在 github 上</p><ul><li>下载，解压</li></ul><blockquote><p>下载地址：https://github.com/tporadowski/redis/releases</p></blockquote><p>Redis 支持 32 位和 64 位。这个需要根据你系统平台的实际情况选择，这里我们下载 <strong>Redis-x64-xxx.zip</strong>压缩包到 C 盘，解压后，将文件夹重新命名为 redis。</p><ul><li>运行</li></ul><p>解压后，打开 cmd 窗口，cd 切换到 redis根目录下。</p><blockquote><p>redis-server.exe redis.windows.conf</p></blockquote><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F15%2F20240615-093458.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><ul><li>客户端连接</li></ul><p>不要关闭原 cmd 窗口，新打开一个 cmd 窗口，切换到 redis 根目录</p><blockquote><p>redis-cli.exe -h 127.0.0.1 -p 6379</p></blockquote><p>6379 是 redis 默认端口，我们可以在配置中修改</p><ul><li>测试</li></ul><p>设置 key 值</p><blockquote><p>set myKey abc</p></blockquote><p>取出 key 值</p><blockquote><p>get myKey</p></blockquote><h4 id="_5-1-2-linux下" tabindex="-1"><a class="header-anchor" href="#_5-1-2-linux下"><span>5.1.2.linux下</span></a></h4><blockquote><p>linux 和 windows 下类似，启动方式参考上文</p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> wget</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> http://download.redis.io/releases/redis-2.8.17.tar.gz</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tar</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> xzf</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> redis-2.8.17.tar.gz</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> redis-2.8.17</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> make</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-五类数据结构" tabindex="-1"><a class="header-anchor" href="#_6-五类数据结构"><span>6.五类数据结构</span></a></h2><h3 id="_6-0-说明" tabindex="-1"><a class="header-anchor" href="#_6-0-说明"><span>6.0.说明</span></a></h3><blockquote><p>类型中会涉及到很多的 Redis 操作命令，一定耐心看完，优化的基础是要了解。</p></blockquote><h3 id="_6-1-介绍" tabindex="-1"><a class="header-anchor" href="#_6-1-介绍"><span>6.1.介绍</span></a></h3><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。</p><blockquote><p>redis是非常优秀的缓存工具，熟练使用redis，可以让我们的开发进一步。</p></blockquote><p>对于下面操作，可以通过 redis-cli 工具连接使用</p><h3 id="_6-2-redis-keys" tabindex="-1"><a class="header-anchor" href="#_6-2-redis-keys"><span>6.2.Redis keys</span></a></h3><blockquote><p>关于key的几条规则，一定不要以为它们不重要，了解一些对你排查问题至关重要。</p></blockquote><p>Redis <strong>key</strong> 值是二进制安全的，这意味着可以用任何二进制序列作为key值，从形如”foo”的简单字符串到一个 JPEG 文件的内容都可以。空字符串也是有效 key 值。</p><p>关于key的几条规则：</p>`,35),Z=s("ul",null,[s("li",null,"太长的键值不是个好主意，例如1024字节的键值就不是个好主意，不仅因为消耗内存，而且在数据中查找这类键值的计算成本很高。"),s("li",null,[i("太短的键值通常也不是好主意，如果你要用”u:1000:pwd”来代替”user:1000:password”，这没有什么问题，但后者更易阅读，并且由此增加的空间消耗相对于**"),s("span",{color:"#159957",face:"黑体"},"key object"),s("strong",null,"和"),s("span",{color:"#159957",face:"黑体"},"value object"),i("**本身来说很小。当然，没人阻止您一定要用更短的键值节省一丁点儿空间。")]),s("li",null,"最好坚持一种模式。例如：”object-type:uid:field”就是个不错的注意，像这样”user:1000:password”。我喜欢对多单词的字段名中加上一个点，就像这样：”comment:q1234:reply.to”。")],-1),G=s("h3",{id:"_6-2-字符串-strings",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_6-2-字符串-strings"},[s("span",null,"6.2.字符串（strings）")])],-1),K=s("blockquote",null,[s("p",null,"二进制安全的字符串")],-1),V=s("p",null,"字符串方式是redis最简单的数据类型，redis就像一个可以持久化的memcached服务器。",-1),z=s("ul",null,[s("li",null,[i("基本的操作方式**"),s("span",{color:"#159957",face:"黑体"},"get 和 set "),i("**方式")])],-1),Y=n(`<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> set mykey somevalue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">OK</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> get mykey</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">&quot;somevalue&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：当key存在时，set会失败。值的长度不能超过512MB。</p><ul><li>一个有趣的操作，<strong>原子</strong>递增，</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> set counter 100</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">OK</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> incr counter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">101</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> incr counter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">102</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> incrby counter 50</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">152</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),X=s("p",null,[s("strong",null,[s("span",{color:"#159957",face:"黑体"},"INCR ")]),i(" 命令将字符串解析成整型，将其加一，再将结果保存成新的字符串，类似的命令还有 "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"INCRBY")]),i(" , "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"DECR")]),i(" 和 "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"DECRBY")]),i(" 。")],-1),W=s("p",null,[i("还有一个有趣的命令， "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"GETSET")]),i(" 命令：设置新值，返回原值。这个操作有什么用？在我们需要保证原子性操作时")],-1),J=n(`<p>MSET 和 MGET 是批量操作</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> mset a 10 b 20 c 30</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">OK</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> mget a b c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;10&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;20&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;30&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),$=s("p",null,[s("strong",null,[s("span",{color:"#159957",face:"黑体"},"MGET")]),i(" 命令返回由值组成的数组。")],-1),Q=s("ul",null,[s("li",null,"修改和查询存在操作")],-1),ss=s("blockquote",null,[s("p",null,[s("strong",null,[s("span",{color:"#159957",face:"黑体"},"exists")]),i(":判断键是否存在，"),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"del")]),i("：删除指定键")])],-1),is=n(`<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> set mykey hello</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">OK</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> exists mykey</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> del mykey</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> exists mykey</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ns=s("blockquote",null,[s("p",null,[s("strong",null,[s("span",{color:"#159957",face:"黑体"},"TYPE")]),i(" 命令返回key对应的存储类型")])],-1),as=n(`<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> set mykey x</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">OK</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> type mykey</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> del mykey</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> type mykey</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">none</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Redis超时</li></ul>`,2),es=s("p",null,[i("对 "),s("strong",null,"key"),i(" 设置**"),s("span",{color:"#159957",face:"黑体"},"超时"),i("**。精度可以使用毫秒或秒。")],-1),ls=n(`<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> set key some-value</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">OK</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> expire key 5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> get key (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">immediately</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">&quot;some-value&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> get key (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">after</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> some</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> time</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ts=s("p",null,[i("使用了 "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"EXPIRE")]),i(" 来设置超时时间(也可以再次调用这个命令来改变超时时间，使用 "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"PERSIST")]),i(" 命令去除超时时间 )。我们也可以在创建值的时候设置超时时间:")],-1),ps=n(`<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> set key 100 ex 10</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">OK</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ttl key</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">9</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),hs=s("p",null,[s("strong",null,[s("span",{color:"#159957",face:"黑体"},"TTL")]),i(" 命令用来查看key对应的值剩余存活时间。")],-1),ds=s("h3",{id:"_6-3-列表-lists",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_6-3-列表-lists"},[s("span",null,"6.3.列表（Lists）")])],-1),rs=s("blockquote",null,[s("p",null,[i("值得注意的："),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"Redis lists")]),i(" 基于 "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"Linked Lists")]),i(" 实现。")])],-1),ks=s("p",null,[i("**"),s("span",{color:"#159957",face:"黑体"},"Redis 列表"),i("**是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）")],-1),cs=n(`<p>一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。</p><ul><li>Redis Lists 入门</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> rpush mylist A</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> rpush mylist B</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> lpush mylist first</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> lrange mylist 0 -1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;first&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;A&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;B&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),os=s("p",null,[i("从右边(尾部)插入俩个元素，左边(头部)插入一个元素，**"),s("span",{color:"#159957",face:"黑体"},"LRANGE "),i("**打印所有(0,-1)元素。")],-1),us=s("ul",null,[s("li",null,[i("**"),s("span",{color:"#159957",face:"黑体"},"Redis Lists"),i("**常用指令")])],-1),gs=s("blockquote",null,[s("p",null,"BLPOP key1 [key2 ] timeout 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。")],-1),Bs=s("blockquote",null,[s("p",null,"BRPOP key1 [key2 ] timeout 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。")],-1),bs=s("blockquote",null,[s("p",null,"BRPOPLPUSH source destination timeout 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。")],-1),vs=s("blockquote",null,[s("p",null,"LINDEX key index 通过索引获取列表中的元素")],-1),ys=s("blockquote",null,[s("p",null,"LINSERT key BEFORE|AFTER pivot value 在列表的元素前或者后插入元素")],-1),ms=s("p",null,[i("说明："),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"Redis Linsert")]),i(" 命令用于在列表的元素前或者后插入元素。当指定元素不存在于列表中时，不执行任何操作。当列表不存在时，被视为空列表，不执行任何操作。如果 key 不是列表类型，返回一个错误。")],-1),Fs=n(`<p><strong>实例：</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">redis</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">RPUSH</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mylist</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;Hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">redis</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">RPUSH</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mylist</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;World&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">redis</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">LINSERT</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mylist</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> BEFORE</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;World&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;There&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">redis</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">LRANGE</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mylist</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;There&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;World&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">redis</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>LLEN key 获取列表长度</p></blockquote><blockquote><p>LPOP key 移出并获取列表的第一个元素</p></blockquote><blockquote><p>LPUSH key value1 [value2] 将一个或多个值插入到列表头部</p></blockquote><blockquote><p>LPUSHX key value 将一个值插入到<strong>已存在</strong>的列表头部</p></blockquote><blockquote><p>LRANGE key start stop 获取列表指定范围内的元素</p></blockquote><blockquote><p>LREM key count value 移除列表元素</p></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>count &gt; 0 : 从表头开始向表尾搜索，移除与 VALUE 相等的元素，数量为 COUNT 。</span></span>
<span class="line"><span>count &lt; 0 : 从表尾开始向表头搜索，移除与 VALUE 相等的元素，数量为 COUNT 的绝对值。</span></span>
<span class="line"><span>count = 0 : 移除表中所有与 VALUE 相等的值。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>LSET key index value 通过索引设置列表元素的值</p></blockquote><blockquote><p>LTRIM key start stop 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</p></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>注意：下标从0开始</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>RPOP key 移除列表的最后一个元素，返回值为移除的元素。</p></blockquote><blockquote><p>RPOPLPUSH source destination 移除列表的最后一个元素，并将该元素添加到另一个列表并返回。</p></blockquote><blockquote><p>RPUSH key value1 [value2] 在列表中添加一个或多个值</p></blockquote><blockquote><p>RPUSHX key value 为已存在的列表添加值</p></blockquote><h3 id="_6-4-哈希-hash" tabindex="-1"><a class="header-anchor" href="#_6-4-哈希-hash"><span>6.4.哈希(Hash)</span></a></h3>`,17),As=s("blockquote",null,[s("p",null,[s("strong",null,[s("span",{color:"#159957",face:"黑体"},"Redis hash ")]),i(" 是一个 "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"string "),s("strong",null,[i("类型的 "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"field ")]),i(" 和 "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"value ")]),i(" 的映射表，")]),s("span",{color:"#159957",face:"黑体"},"hash ")]),i(" 特别适合用于存储对象。")])],-1),Es=n(`<p>Redis 中每个 hash 可以存储 232 - 1 键值对（40多亿）。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">序号	命令及描述</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">1	HDEL key field1 [field2] </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">删除一个或多个哈希表字段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">2	HEXISTS key field </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">查看哈希表 key 中，指定的字段是否存在。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">3	HGET key field </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">获取存储在哈希表中指定字段的值。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">4	HGETALL key </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">获取在哈希表中指定 key 的所有字段和值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">5	HINCRBY key field increment </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">为哈希表 key 中的指定字段的整数值加上增量 increment 。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">6	HINCRBYFLOAT key field increment </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">为哈希表 key 中的指定字段的浮点数值加上增量 increment 。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">7	HKEYS key </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">获取所有哈希表中的字段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">8	HLEN key </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">获取哈希表中字段的数量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">9	HMGET key field1 [field2] </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">获取所有给定字段的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">10	HMSET key field1 value1 [field2 value2 ] </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">同时将多个 field-value (域-值)对设置到哈希表 key 中。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">11	HSET key field value </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">将哈希表 key 中的字段 field 的值设为 value 。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">12	HSETNX key field value </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">只有在字段 field 不存在时，设置哈希表字段的值。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">13	HVALS key </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">获取哈希表中所有值。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">14	HSCAN key cursor [MATCH pattern] [COUNT count] </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">迭代哈希表中的键值对。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>参考:https://www.runoob.com/redis/redis-hashes.html</p></blockquote><h3 id="_6-5-集合-set" tabindex="-1"><a class="header-anchor" href="#_6-5-集合-set"><span>6.5.集合(Set)</span></a></h3>`,4),_s=s("p",null,[i("Redis 的 "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"Set ")]),i(" 是 "),s("strong",null,[s("span",{color:"#159957",face:"黑体"},"String ")]),i(" 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。")],-1),fs=s("p",null,[i("Redis 中**"),s("span",{color:"#159957",face:"黑体"},"集合 "),i("**是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。")],-1),Cs=n(`<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>序号	命令及描述</span></span>
<span class="line"><span>1	SADD key member1 [member2] </span></span>
<span class="line"><span>向集合添加一个或多个成员</span></span>
<span class="line"><span>2	SCARD key </span></span>
<span class="line"><span>获取集合的成员数</span></span>
<span class="line"><span>3	SDIFF key1 [key2] </span></span>
<span class="line"><span>返回给定所有集合的差集</span></span>
<span class="line"><span>4	SDIFFSTORE destination key1 [key2] </span></span>
<span class="line"><span>返回给定所有集合的差集并存储在 destination 中</span></span>
<span class="line"><span>5	SINTER key1 [key2] </span></span>
<span class="line"><span>返回给定所有集合的交集</span></span>
<span class="line"><span>6	SINTERSTORE destination key1 [key2] </span></span>
<span class="line"><span>返回给定所有集合的交集并存储在 destination 中</span></span>
<span class="line"><span>7	SISMEMBER key member </span></span>
<span class="line"><span>判断 member 元素是否是集合 key 的成员</span></span>
<span class="line"><span>8	SMEMBERS key </span></span>
<span class="line"><span>返回集合中的所有成员</span></span>
<span class="line"><span>9	SMOVE source destination member </span></span>
<span class="line"><span>将 member 元素从 source 集合移动到 destination 集合</span></span>
<span class="line"><span>10	SPOP key </span></span>
<span class="line"><span>移除并返回集合中的一个随机元素</span></span>
<span class="line"><span>11	SRANDMEMBER key [count] </span></span>
<span class="line"><span>返回集合中一个或多个随机数</span></span>
<span class="line"><span>12	SREM key member1 [member2] </span></span>
<span class="line"><span>移除集合中一个或多个成员</span></span>
<span class="line"><span>13	SUNION key1 [key2] </span></span>
<span class="line"><span>返回所有给定集合的并集</span></span>
<span class="line"><span>14	SUNIONSTORE destination key1 [key2] </span></span>
<span class="line"><span>所有给定集合的并集存储在 destination 集合中</span></span>
<span class="line"><span>15	SSCAN key cursor [MATCH pattern] [COUNT count] </span></span>
<span class="line"><span>迭代集合中的元素</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>参考：https://www.runoob.com/redis/redis-sets.html</p></blockquote><h3 id="_6-6-有序集合-sorted-set" tabindex="-1"><a class="header-anchor" href="#_6-6-有序集合-sorted-set"><span>6.6.有序集合(sorted set)</span></a></h3><ol><li>Redis **<span color="#159957">有序集合 </span><strong>和</strong><span color="#159957">集合 </span>**一样也是 string 类型元素的集合,且不允许重复的成员。</li><li>不同的是每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。</li><li>有序集合的成员是唯一的,但分数(score)却可以重复。</li><li>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</li></ol><br><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">序号	命令及描述</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">1	ZADD key score1 member1 [score2 member2] </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">向有序集合添加一个或多个成员，或者更新已存在成员的分数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">2	ZCARD key </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">获取有序集合的成员数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">3	ZCOUNT key min max </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">计算在有序集合中指定区间分数的成员数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">4	ZINCRBY key increment member </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">有序集合中对指定成员的分数加上增量 increment</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">5	ZINTERSTORE destination numkeys key [key ...] </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">6	ZLEXCOUNT key min max </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">在有序集合中计算指定字典区间内成员数量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">7	ZRANGE key start stop [WITHSCORES] </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">通过索引区间返回有序集合指定区间内的成员</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">8	ZRANGEBYLEX key min max [LIMIT offset count] </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">通过字典区间返回有序集合的成员</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">9	ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT] </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">通过分数返回有序集合指定区间内的成员</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">10	ZRANK key member </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">返回有序集合中指定成员的索引</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">11	ZREM key member [member ...] </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">移除有序集合中的一个或多个成员</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">12	ZREMRANGEBYLEX key min max </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">移除有序集合中给定的字典区间的所有成员</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">13	ZREMRANGEBYRANK key start stop </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">移除有序集合中给定的排名区间的所有成员</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">14	ZREMRANGEBYSCORE key min max </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">移除有序集合中给定的分数区间的所有成员</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">15	ZREVRANGE key start stop [WITHSCORES] </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">返回有序集中指定区间内的成员，通过索引，分数从高到低</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">16	ZREVRANGEBYSCORE key max min [WITHSCORES] </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">返回有序集中指定分数区间内的成员，分数从高到低排序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">17	ZREVRANK key member </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">18	ZSCORE key member </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">返回有序集中，成员的分数值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">19	ZUNIONSTORE destination numkeys key [key ...] </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">计算给定的一个或多个有序集的并集，并存储在新的 key 中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">20	ZSCAN key cursor [MATCH pattern] [COUNT count] </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">迭代有序集合中的元素（包括元素成员和元素分值）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-redis常用" tabindex="-1"><a class="header-anchor" href="#_7-redis常用"><span>7.Redis常用</span></a></h2>`,7),Rs=s("blockquote",null,[s("p",null,[i("如果你读到在这里，相信你对 Redis 已经有了一定了解，入门就先简单学到这里，下篇一起上**"),s("span",{color:"#159957",face:"黑体"},"青铜"),i("**。")])],-1),qs=s("blockquote",null,[s("p",null,"后面的篇章，还将继续介绍 Redis 的一些高级用法，缓存击穿、缓存雪崩，源码分析等。看后不忘三连，还有需要更多技术博文可以留言催更。")],-1);function xs(Ss,Ns){return t(),e("div",null,[h,l(" more "),d,r,k,c,o,u,g,B,b,v,y,m,F,A,E,_,f,C,R,q,x,S,N,T,D,L,O,P,H,I,M,w,j,U,Z,G,K,V,z,Y,X,W,J,$,Q,ss,is,ns,as,es,ls,ts,ps,hs,ds,rs,ks,cs,os,us,gs,Bs,bs,vs,ys,ms,Fs,As,Es,_s,fs,Cs,Rs,qs])}const Ls=a(p,[["render",xs],["__file","learn_redis_01.html.vue"]]),Os=JSON.parse('{"path":"/posts/database/redis/learn_redis_01.html","title":"rodert单排学习redis入门【黑铁】","lang":"zh-CN","frontmatter":{"title":"rodert单排学习redis入门【黑铁】","icon":"lightbulb","category":["redis"],"tag":["redis","单排学习redis"],"description":"rodert单排学习redis入门【黑铁】","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/posts/database/redis/learn_redis_01.html"}],["meta",{"property":"og:site_name","content":"JavaPub"}],["meta",{"property":"og:title","content":"rodert单排学习redis入门【黑铁】"}],["meta",{"property":"og:description","content":"rodert单排学习redis入门【黑铁】"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F15%2F20240615-091006.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T14:35:52.000Z"}],["meta",{"property":"article:author","content":"Mr.Wang"}],["meta",{"property":"article:tag","content":"redis"}],["meta",{"property":"article:tag","content":"单排学习redis"}],["meta",{"property":"article:modified_time","content":"2024-07-03T14:35:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"rodert单排学习redis入门【黑铁】\\",\\"image\\":[\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F15%2F20240615-091006.png\\",\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F15%2F20240615-091009.jpeg\\",\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F15%2F20240615-093458.png\\"],\\"dateModified\\":\\"2024-07-03T14:35:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Wang\\",\\"url\\":\\"https://javapub.net.cn\\"}]}"]]},"headers":[{"level":2,"title":"rodert单排学习redis入门【黑铁】","slug":"rodert单排学习redis入门【黑铁】","link":"#rodert单排学习redis入门【黑铁】","children":[]},{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"1.NoSql(not only sql)","slug":"_1-nosql-not-only-sql","link":"#_1-nosql-not-only-sql","children":[]},{"level":2,"title":"2.Redis入门","slug":"_2-redis入门","link":"#_2-redis入门","children":[]},{"level":2,"title":"3.Redis特性","slug":"_3-redis特性","link":"#_3-redis特性","children":[{"level":3,"title":"3.1.性能","slug":"_3-1-性能","link":"#_3-1-性能","children":[]},{"level":3,"title":"3.2.特性","slug":"_3-2-特性","link":"#_3-2-特性","children":[]},{"level":3,"title":"3.3.优势","slug":"_3-3-优势","link":"#_3-3-优势","children":[]}]},{"level":2,"title":"4.Redis使用场景","slug":"_4-redis使用场景","link":"#_4-redis使用场景","children":[]},{"level":2,"title":"5.安装","slug":"_5-安装","link":"#_5-安装","children":[{"level":3,"title":"5.1.单机安装","slug":"_5-1-单机安装","link":"#_5-1-单机安装","children":[]}]},{"level":2,"title":"6.五类数据结构","slug":"_6-五类数据结构","link":"#_6-五类数据结构","children":[{"level":3,"title":"6.0.说明","slug":"_6-0-说明","link":"#_6-0-说明","children":[]},{"level":3,"title":"6.1.介绍","slug":"_6-1-介绍","link":"#_6-1-介绍","children":[]},{"level":3,"title":"6.2.Redis keys","slug":"_6-2-redis-keys","link":"#_6-2-redis-keys","children":[]},{"level":3,"title":"6.2.字符串（strings）","slug":"_6-2-字符串-strings","link":"#_6-2-字符串-strings","children":[]},{"level":3,"title":"6.3.列表（Lists）","slug":"_6-3-列表-lists","link":"#_6-3-列表-lists","children":[]},{"level":3,"title":"6.4.哈希(Hash)","slug":"_6-4-哈希-hash","link":"#_6-4-哈希-hash","children":[]},{"level":3,"title":"6.5.集合(Set)","slug":"_6-5-集合-set","link":"#_6-5-集合-set","children":[]},{"level":3,"title":"6.6.有序集合(sorted set)","slug":"_6-6-有序集合-sorted-set","link":"#_6-6-有序集合-sorted-set","children":[]}]},{"level":2,"title":"7.Redis常用","slug":"_7-redis常用","link":"#_7-redis常用","children":[]}],"git":{"createdTime":1718350679000,"updatedTime":1720017352000,"contributors":[{"name":"wangshiyu","email":"iswangshiyu@foxmail.com","commits":1}]},"readingTime":{"minutes":19.94,"words":5982},"filePathRelative":"posts/database/redis/learn_redis_01.md","localizedDate":"2024年6月14日","excerpt":"<h2>rodert单排学习redis入门【黑铁】</h2>\\n","autoDesc":true}');export{Ls as comp,Os as data};
