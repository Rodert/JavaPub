import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as s,b as e,w as n,d as i,e as t,r as h,o as r}from"./app-BkIroIza.js";const d={},o=s("p",null,[s("strong",null,[i("我是 javapub，一名 "),s("code",null,"Markdown"),i(" 程序员从👨‍💻，八股文种子选手。")])],-1),k=t("<p>触发 RDB 又分为两种， save 和 bgsave</p><p><strong>save</strong></p><p>当 Redis 实例收到 <code>save</code> 命令后，此时会阻塞当前 Redis 服务器，在 RDB 文件创建完成之前是不能处理其他客户端发送的任何命令请求，如果数据量太大会造成长时间阻塞，期间 redis 无法处理其他请求，<strong>线上环境不建议使用</strong>。</p><p><strong>bgsave</strong></p><p>当 Redis 实例收到 <code>bgsave</code> 命令后，Redis 会单独创建(fork)一个子进程来进行持久化,会先将数据写入到一个临时文件中,待持久化过程都结束了,再用这个临时文件替换上次持久化好的文件。 整个过程中,主进程仍然处理客户端请求,这样可以保证 RDB 过程不影响服务。</p><p>RDB 的优点是轻量,适合大规模的数据恢复;缺点是数据有一定的丢失风险,持久化的工作并不实时。</p>",6),c=s("p",null,"将每次执行会改变数据库的命令记录下来,并追加到AOF文件中。AOF文件就是一个命令的记录,Redis重启时会重新执行AOF文件中的命令来恢复数据。",-1),g=s("p",null,"AOF的优点是每次修改都会同步到磁盘,有效防止数据丢失;缺点是AOF rewrite的时候会阻塞客户端查询,并且文件会变得越来越大。",-1),u=s("p",null,"Redis提供了AOF重写机制,可以彻底压缩AOF文件体积,用一条等价的命令代替多条之前的命令。AOF重写也采用fork方式进行,不会影响应用的访问。",-1),B=t(`<ol><li>子进程创建:主进程fork一个子进程,负责重写工作。</li><li>子进程载入当前数据库快照,并开始解析AOF文件。</li><li>子进程构建新的AOF,仅记录数据库里面和快照不同的键。</li><li>子进程完成后,将新构建的AOF发送给主进程。</li><li>主进程加载新AOF,替换旧AOF。如果AOF加载失败,继续使用旧AOF。</li><li>子进程退出。</li></ol><p>该机制可以保证主进程始终可用,不会阻塞客户端请求。新旧AOF文件替换采用原子性rename操作,防止重启时只部分加载新AOF的情况发生。 主要的源码在<code>rewriteAppendOnlyFile</code>方法中:</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> rewriteAppendOnlyFile</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> fd;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;"> tmpfile</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">256</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    redisDb </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">db </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">db</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    /* 创建子进程 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">child_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> REDIS_CHILD_TYPE_AOF) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    /* 载入当前数据库 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    emptyDb</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">rdbSave</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(tmpfile) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> REDIS_OK) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    /* 构建新AOF */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    fd </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> open</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(tmpfile,O_WRONLY</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">O_APPEND</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">O_CREAT,</span><span style="--shiki-light:#D73A49;--shiki-dark:#E06C75;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">644</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    /* 将新AOF发送给主进程 */</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    atomicReplaceFile</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">aof_filename</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,tmpfile);  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),y=t('<figure><img src="https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/28.jpg?raw=true" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注<strong>公众号JavaPub</strong>追更！</p><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225632.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>🎁目录合集：</p><p>Gitee：<code>https://gitee.com/rodert/JavaPub</code></p><p>GitHub：<code>https://github.com/Rodert/JavaPub</code></p><p><a href="http://javapub.net.cn" target="_blank" rel="noopener noreferrer">http://javapub.net.cn</a></p>',7);function m(A,F){const a=h("font");return r(),p("div",null,[o,s("p",null,[s("strong",null,[e(a,{color:"blue"},{default:n(()=>[i("面试官")]),_:1}),i("： Redis是内存数据库,数据存放在内存中,当Redis服务重启数据会丢失,那么Redis如何保证数据的持久化?")])]),s("p",null,[s("strong",null,[e(a,{color:"red"},{default:n(()=>[i("候选人：")]),_:1})]),i(" Redis 提供两种持久化方案: RDB(Redis DataBase) 和 AOF(Append Only File)。")]),s("p",null,[s("strong",null,[e(a,{color:"blue"},{default:n(()=>[i("面试官")]),_:1}),i("： 说说RDB吧,它的工作原理是什么?")])]),s("p",null,[s("strong",null,[e(a,{color:"red"},{default:n(()=>[i("候选人：")]),_:1})]),i(" RDB 的工作原理很简单,就是在指定的时间间隔内将内存中的数据集快照写入磁盘,恢复时是将快照文件直接读入内存。（简单来说就是快照保存，核心思路是Copy-on-Write。）")]),k,s("p",null,[s("strong",null,[e(a,{color:"blue"},{default:n(()=>[i("面试官")]),_:1}),i("： 那AOF又是什么?")])]),s("p",null,[s("strong",null,[e(a,{color:"red"},{default:n(()=>[i("候选人：")]),_:1})]),i(" AOF 的全称是 Append Only File,它的工作原理是:")]),c,g,u,s("p",null,[s("strong",null,[e(a,{color:"blue"},{default:n(()=>[i("面试官")]),_:1}),i("： AOF重写的机制原理能详细说下么?")])]),s("p",null,[s("strong",null,[e(a,{color:"red"},{default:n(()=>[i("候选人：")]),_:1})]),i(" AOF重写的基本流程是:")]),B,s("p",null,[s("strong",null,[e(a,{color:"blue"},{default:n(()=>[i("面试官")]),_:1}),i("： 讲的很透彻,AOF重写机制我现在全明白了,Redis的持久化方案用的真的很巧妙!")])]),s("p",null,[s("strong",null,[e(a,{color:"red"},{default:n(()=>[i("候选人：")]),_:1})]),i(" 是的,Redis的RDB和AOF双持久化方案,既保证了数据的持久性,也兼顾了效率。")]),y])}const b=l(d,[["render",m],["__file","28.Redis_chijiuhua.html.vue"]]),f=JSON.parse('{"path":"/posts/special/1v1/28.Redis_chijiuhua.html","title":"Redis持久化","lang":"zh-CN","frontmatter":{"title":"Redis持久化","icon":"laptop-code","category":["《面试1v1》"],"description":"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。 ： Redis是内存数据库,数据存放在内存中,当Redis服务重启数据会丢失,那么Redis如何保证数据的持久化? Redis 提供两种持久化方案: RDB(Redis DataBase) 和 AOF(Append Only File)。 ： 说说RDB吧,它的工作原理...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/posts/special/1v1/28.Redis_chijiuhua.html"}],["meta",{"property":"og:site_name","content":"JavaPub"}],["meta",{"property":"og:title","content":"Redis持久化"}],["meta",{"property":"og:description","content":"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。 ： Redis是内存数据库,数据存放在内存中,当Redis服务重启数据会丢失,那么Redis如何保证数据的持久化? Redis 提供两种持久化方案: RDB(Redis DataBase) 和 AOF(Append Only File)。 ： 说说RDB吧,它的工作原理..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/28.jpg?raw=true"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T14:35:52.000Z"}],["meta",{"property":"article:author","content":"Mr.Wang"}],["meta",{"property":"article:modified_time","content":"2024-07-03T14:35:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis持久化\\",\\"image\\":[\\"https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/28.jpg?raw=true\\",\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225632.png\\"],\\"dateModified\\":\\"2024-07-03T14:35:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Wang\\",\\"url\\":\\"https://javapub.net.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1717568495000,"updatedTime":1720017352000,"contributors":[{"name":"wangshiyu","email":"iswangshiyu@foxmail.com","commits":1}]},"readingTime":{"minutes":3.63,"words":1088},"filePathRelative":"posts/special/1v1/28.Redis_chijiuhua.md","localizedDate":"2024年6月5日","excerpt":"<p><strong>我是 javapub，一名 <code>Markdown</code> 程序员从👨‍💻，八股文种子选手。</strong></p>\\n<p><strong>： Redis是内存数据库,数据存放在内存中,当Redis服务重启数据会丢失,那么Redis如何保证数据的持久化?</strong></p>\\n<p><strong></strong> Redis 提供两种持久化方案: RDB(Redis DataBase) 和 AOF(Append Only File)。</p>\\n<p><strong>： 说说RDB吧,它的工作原理是什么?</strong></p>\\n<p><strong></strong> RDB 的工作原理很简单,就是在指定的时间间隔内将内存中的数据集快照写入磁盘,恢复时是将快照文件直接读入内存。（简单来说就是快照保存，核心思路是Copy-on-Write。）</p>","autoDesc":true}');export{b as comp,f as data};
