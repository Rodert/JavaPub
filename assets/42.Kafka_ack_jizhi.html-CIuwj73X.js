import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a,b as o,w as n,d as t,e as c,r as p,o as s}from"./app-Clze77MB.js";const u={},i=a("p",null,[a("strong",null,[t("我是 javapub，一名 "),a("code",null,"Markdown"),t(" 程序员从👨‍💻，八股文种子选手。")])],-1),d=c('<figure><img src="https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/42.jpg?raw=true" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注<strong>公众号JavaPub</strong>追更！</p><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225632.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>🎁目录合集：</p><p>Gitee：<code>https://gitee.com/rodert/JavaPub</code></p><p>GitHub：<code>https://github.com/Rodert/JavaPub</code></p><p><a href="http://javapub.net.cn" target="_blank" rel="noopener noreferrer">http://javapub.net.cn</a></p>',7);function g(f,m){const e=p("font");return s(),l("div",null,[i,a("p",null,[a("strong",null,[o(e,{color:"blue"},{default:n(()=>[t("面试官")]),_:1}),t("： 嗨，小王！听说你对Kafka的ack机制很感兴趣，是吗？")])]),a("p",null,[a("strong",null,[o(e,{color:"red"},{default:n(()=>[t("候选人：")]),_:1})]),t(" 是的，王哥！我一直想了解一下Kafka的ack机制是怎么回事。")]),a("p",null,[a("strong",null,[o(e,{color:"blue"},{default:n(()=>[t("面试官")]),_:1}),t("： 好问题！那么，你知道Kafka的ack机制是用来做什么的吗？")])]),a("p",null,[a("strong",null,[o(e,{color:"red"},{default:n(()=>[t("候选人：")]),_:1})]),t(" 嗯，我知道它是用来确保消息的可靠性传递的。但是具体怎么实现的呢？")]),a("p",null,[a("strong",null,[o(e,{color:"blue"},{default:n(()=>[t("面试官")]),_:1}),t("： 很好！简单来说，Kafka的ack机制是通过生产者和消费者之间的协作来实现的。当生产者发送消息到Kafka集群时，它可以选择等待消息被确认（ack）后再发送下一条消息，或者直接发送下一条消息而不等待确认。")])]),a("p",null,[a("strong",null,[o(e,{color:"red"},{default:n(()=>[t("候选人：")]),_:1})]),t(" 那么，等待确认和不等待确认有什么区别呢？")]),a("p",null,[a("strong",null,[o(e,{color:"blue"},{default:n(()=>[t("面试官")]),_:1}),t("： 哈哈，这就像是你在餐厅点菜的时候的两种方式。如果你等待服务员确认你的点菜后再点下一道菜，那么你可以确保每道菜都被正确记录下来。但是如果你不等待确认，直接点下一道菜，那么可能会出现点菜遗漏的情况。")])]),a("p",null,[a("strong",null,[o(e,{color:"red"},{default:n(()=>[t("候选人：")]),_:1})]),t(" 哦，我明白了！那么，Kafka是如何实现这个机制的呢？")]),a("p",null,[a("strong",null,[o(e,{color:"blue"},{default:n(()=>[t("面试官")]),_:1}),t("： 很聪明的问题！在Kafka中，生产者发送消息时，可以设置消息的确认级别（ack level）。有三个级别可供选择：0、1和all。当设置为0时，生产者不会等待任何确认，直接发送下一条消息。当设置为1时，生产者会等待消息被Kafka集群的leader确认后再发送下一条消息。而当设置为all时，生产者会等待消息被所有的副本（replica）确认后再发送下一条消息。")])]),a("p",null,[a("strong",null,[o(e,{color:"red"},{default:n(()=>[t("候选人：")]),_:1})]),t(" 哇，这么灵活！那么，如果消息没有被确认怎么办？")]),a("p",null,[a("strong",null,[o(e,{color:"blue"},{default:n(()=>[t("面试官")]),_:1}),t("： 如果消息没有被确认，Kafka会自动进行重试，直到达到最大重试次数。如果仍然没有成功，那么生产者可以选择放弃发送或者采取其他措施，比如记录日志或者通知管理员。")])]),a("p",null,[a("strong",null,[o(e,{color:"red"},{default:n(()=>[t("候选人：")]),_:1})]),t(" 哦，原来如此！那么，这个机制对于我在实际工作中有什么帮助呢？")]),a("p",null,[a("strong",null,[o(e,{color:"blue"},{default:n(()=>[t("面试官")]),_:1}),t("： 嗯，这个机制可以确保你的消息在传递过程中不会丢失。尤其是在一些对消息可靠性要求较高的场景下，比如金融交易或者实时监控系统，这个机制非常重要。")])]),a("p",null,[a("strong",null,[o(e,{color:"red"},{default:n(()=>[t("候选人：")]),_:1})]),t(" 大师傅，谢谢你的解答！我对Kafka的ack机制有了更清晰的理解了。")]),a("p",null,[a("strong",null,[o(e,{color:"blue"},{default:n(()=>[t("面试官")]),_:1}),t("： 不客气，小明！记住，Kafka的ack机制是确保消息可靠性的关键。在你的工作中，要根据实际需求选择合适的确认级别，并且合理处理未确认的消息。")])]),d])}const _=r(u,[["render",g],["__file","42.Kafka_ack_jizhi.html.vue"]]),b=JSON.parse('{"path":"/posts/special/1v1/42.Kafka_ack_jizhi.html","title":"Kafka的ack机制","lang":"zh-CN","frontmatter":{"title":"Kafka的ack机制","icon":"laptop-code","category":["《面试1v1》"],"description":"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。 ： 嗨，小王！听说你对Kafka的ack机制很感兴趣，是吗？ 是的，王哥！我一直想了解一下Kafka的ack机制是怎么回事。 ： 好问题！那么，你知道Kafka的ack机制是用来做什么的吗？ 嗯，我知道它是用来确保消息的可靠性传递的。但是具体怎么实现的呢？ ： 很好！简...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/posts/special/1v1/42.Kafka_ack_jizhi.html"}],["meta",{"property":"og:site_name","content":"JavaPub"}],["meta",{"property":"og:title","content":"Kafka的ack机制"}],["meta",{"property":"og:description","content":"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。 ： 嗨，小王！听说你对Kafka的ack机制很感兴趣，是吗？ 是的，王哥！我一直想了解一下Kafka的ack机制是怎么回事。 ： 好问题！那么，你知道Kafka的ack机制是用来做什么的吗？ 嗯，我知道它是用来确保消息的可靠性传递的。但是具体怎么实现的呢？ ： 很好！简..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/42.jpg?raw=true"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T14:35:52.000Z"}],["meta",{"property":"article:author","content":"Mr.Wang"}],["meta",{"property":"article:modified_time","content":"2024-07-03T14:35:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Kafka的ack机制\\",\\"image\\":[\\"https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/42.jpg?raw=true\\",\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225632.png\\"],\\"dateModified\\":\\"2024-07-03T14:35:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Wang\\",\\"url\\":\\"https://javapub.net.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1717568495000,"updatedTime":1720017352000,"contributors":[{"name":"wangshiyu","email":"iswangshiyu@foxmail.com","commits":1}]},"readingTime":{"minutes":3.07,"words":921},"filePathRelative":"posts/special/1v1/42.Kafka_ack_jizhi.md","localizedDate":"2024年6月5日","excerpt":"<p><strong>我是 javapub，一名 <code>Markdown</code> 程序员从👨‍💻，八股文种子选手。</strong></p>\\n<p><strong>： 嗨，小王！听说你对Kafka的ack机制很感兴趣，是吗？</strong></p>\\n<p><strong></strong> 是的，王哥！我一直想了解一下Kafka的ack机制是怎么回事。</p>\\n<p><strong>： 好问题！那么，你知道Kafka的ack机制是用来做什么的吗？</strong></p>\\n<p><strong></strong> 嗯，我知道它是用来确保消息的可靠性传递的。但是具体怎么实现的呢？</p>","autoDesc":true}');export{_ as comp,b as data};
