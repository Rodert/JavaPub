import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as s,b as n,w as t,d as i,e,r as h,o as r}from"./app-DljixAt5.js";const k={},o=s("p",null,[s("strong",null,[i("我是 javapub，一名 "),s("code",null,"Markdown"),i(" 程序员从👨‍💻，八股文种子选手。")])],-1),d=e(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 这是Kafka的源码示例，让我们来看看它是如何工作的</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 创建一个生产者</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Producer</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> producer </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Producer</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 发送消息到分区P1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">producer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;P1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;M1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 发送消息到分区P2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">producer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;P2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;M2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 发送消息到分区P3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">producer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;P3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;M3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 创建一个消费者</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Consumer</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> consumer </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Consumer</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 从分区P1读取消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> message1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> consumer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">consume</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;P1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 从分区P2读取消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> message2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> consumer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">consume</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;P2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 从分区P3读取消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> message3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> consumer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">consume</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;P3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),c=e('<figure><img src="https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/41.jpg?raw=true" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注<strong>公众号JavaPub</strong>追更！</p><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225632.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>🎁目录合集：</p><p>Gitee：<code>https://gitee.com/rodert/JavaPub</code></p><p>GitHub：<code>https://github.com/Rodert/JavaPub</code></p><p><a href="http://javapub.net.cn" target="_blank" rel="noopener noreferrer">http://javapub.net.cn</a></p>',7);function g(u,y){const a=h("font");return r(),p("div",null,[o,s("p",null,[s("strong",null,[n(a,{color:"blue"},{default:t(()=>[i("面试官")]),_:1}),i("： 传统消息系统是怎么工作的？")])]),s("p",null,[s("strong",null,[n(a,{color:"red"},{default:t(()=>[i("候选人：")]),_:1})]),i(" 传统消息系统通常采用点对点或发布-订阅模式来传递消息。发送者将消息发送到一个中间件（比如ActiveMQ或RabbitMQ），然后接收者从中间件中接收消息。")]),s("p",null,[s("strong",null,[n(a,{color:"blue"},{default:t(()=>[i("面试官")]),_:1}),i("： 没错！传统消息系统使用中间件作为消息的中转站。那么，Kafka和传统消息系统有什么不同呢？")])]),s("p",null,[s("strong",null,[n(a,{color:"red"},{default:t(()=>[i("候选人：")]),_:1})]),i(" Kafka是一个分布式流处理平台，它以高吞吐量和低延迟而闻名。与传统消息系统不同，Kafka将消息存储在持久化的日志中，而不是立即将其传递给接收者。")]),s("p",null,[s("strong",null,[n(a,{color:"blue"},{default:t(()=>[i("面试官")]),_:1}),i("： 很好！Kafka的这种设计使得它具有很高的可伸缩性和容错性。那么，你能给我举个例子来说明Kafka的工作原理吗？")])]),s("p",null,[s("strong",null,[n(a,{color:"red"},{default:t(()=>[i("候选人：")]),_:1})]),i(" 当然可以！假设我们有一个简单的消息队列，其中有三个分区（Partition）：P1、P2和P3。发送者将消息M1发送到P1，消息M2发送到P2，消息M3发送到P3。接收者可以从这些分区中读取消息。")]),d,s("p",null,[s("strong",null,[n(a,{color:"blue"},{default:t(()=>[i("面试官")]),_:1}),i("： 太棒了！你用代码很好地解释了Kafka的工作原理。那么，Kafka还有哪些特点？")])]),s("p",null,[s("strong",null,[n(a,{color:"red"},{default:t(()=>[i("候选人：")]),_:1})]),i(" Kafka具有高度可扩展性，可以轻松地处理大量的消息和高并发。此外，Kafka还支持消息的持久化存储和数据复制，确保消息的可靠性和容错性。")]),s("p",null,[s("strong",null,[n(a,{color:"blue"},{default:t(()=>[i("面试官")]),_:1}),i("： 没错！Kafka的这些特点使得它成为处理实时数据流的理想选择。它在大数据领域中得到了广泛的应用。你觉得Kafka和传统消息系统相比，有什么优势呢？")])]),s("p",null,[s("strong",null,[n(a,{color:"red"},{default:t(()=>[i("候选人：")]),_:1})]),i(" Kafka相比传统消息系统有几个明显的优势。首先，Kafka的高吞吐量和低延迟使得它能够处理大规模的数据流。其次，Kafka的持久化存储和数据复制功能确保了消息的可靠性和容错性。最后，Kafka的可扩展性使得它能够适应不断增长的数据需求。")]),s("p",null,[s("strong",null,[n(a,{color:"blue"},{default:t(()=>[i("面试官")]),_:1}),i("： 非常好！你对Kafka和传统消息系统的区别有很清晰的认识。这些知识对于刚入行的技术人员来说非常重要。有没有什么问题想问我的？")])]),s("p",null,[s("strong",null,[n(a,{color:"red"},{default:t(()=>[i("候选人：")]),_:1})]),i(" 我想知道Kafka在实际应用中的一些最佳实践和常见问题解答。")]),s("p",null,[s("strong",null,[n(a,{color:"blue"},{default:t(()=>[i("面试官")]),_:1}),i("： 太好了！这正是我们下一次面试的话题。我们可以深入探讨Kafka的最佳实践和解决方案。感谢你的时间，你对Kafka的理解非常出色！")])]),c])}const v=l(k,[["render",g],["__file","41.Kafka_chuantongxiaoxiqubie.html.vue"]]),B=JSON.parse('{"path":"/posts/special/1v1/41.Kafka_chuantongxiaoxiqubie.html","title":"Kafka与传统消息系统区别","lang":"zh-CN","frontmatter":{"title":"Kafka与传统消息系统区别","icon":"laptop-code","category":["《面试1v1》"],"description":"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。 ： 传统消息系统是怎么工作的？ 传统消息系统通常采用点对点或发布-订阅模式来传递消息。发送者将消息发送到一个中间件（比如ActiveMQ或RabbitMQ），然后接收者从中间件中接收消息。 ： 没错！传统消息系统使用中间件作为消息的中转站。那么，Kafka和传统消息系统...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/posts/special/1v1/41.Kafka_chuantongxiaoxiqubie.html"}],["meta",{"property":"og:site_name","content":"JavaPub"}],["meta",{"property":"og:title","content":"Kafka与传统消息系统区别"}],["meta",{"property":"og:description","content":"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。 ： 传统消息系统是怎么工作的？ 传统消息系统通常采用点对点或发布-订阅模式来传递消息。发送者将消息发送到一个中间件（比如ActiveMQ或RabbitMQ），然后接收者从中间件中接收消息。 ： 没错！传统消息系统使用中间件作为消息的中转站。那么，Kafka和传统消息系统..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/41.jpg?raw=true"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T14:35:52.000Z"}],["meta",{"property":"article:author","content":"Mr.Wang"}],["meta",{"property":"article:modified_time","content":"2024-07-03T14:35:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Kafka与传统消息系统区别\\",\\"image\\":[\\"https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/41.jpg?raw=true\\",\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225632.png\\"],\\"dateModified\\":\\"2024-07-03T14:35:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Wang\\",\\"url\\":\\"https://javapub.net.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1717568495000,"updatedTime":1720017352000,"contributors":[{"name":"wangshiyu","email":"iswangshiyu@foxmail.com","commits":1}]},"readingTime":{"minutes":3.31,"words":993},"filePathRelative":"posts/special/1v1/41.Kafka_chuantongxiaoxiqubie.md","localizedDate":"2024年6月5日","excerpt":"<p><strong>我是 javapub，一名 <code>Markdown</code> 程序员从👨‍💻，八股文种子选手。</strong></p>\\n<p><strong>： 传统消息系统是怎么工作的？</strong></p>\\n<p><strong></strong> 传统消息系统通常采用点对点或发布-订阅模式来传递消息。发送者将消息发送到一个中间件（比如ActiveMQ或RabbitMQ），然后接收者从中间件中接收消息。</p>\\n<p><strong>： 没错！传统消息系统使用中间件作为消息的中转站。那么，Kafka和传统消息系统有什么不同呢？</strong></p>\\n<p><strong></strong> Kafka是一个分布式流处理平台，它以高吞吐量和低延迟而闻名。与传统消息系统不同，Kafka将消息存储在持久化的日志中，而不是立即将其传递给接收者。</p>","autoDesc":true}');export{v as comp,B as data};
