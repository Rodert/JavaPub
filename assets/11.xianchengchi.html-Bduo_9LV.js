import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a as t,b as a,w as r,d as e,e as c,r as p,o as i}from"./app-D6vUzay6.js";const s={},u=t("p",null,[t("strong",null,[e("我是 javapub，一名 "),t("code",null,"Markdown"),e(" 程序员从👨‍💻，八股文种子选手。")])],-1),d=t("figure",null,[t("img",{src:"https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/wechat-threadpool.png?raw=true",alt:"",tabindex:"0",loading:"lazy"}),t("figcaption")],-1),g=c('<figure><img src="https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/11.jpg?raw=true" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注<strong>公众号JavaPub</strong>追更！</p><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225632.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>🎁目录合集：</p><p>Gitee：<code>https://gitee.com/rodert/JavaPub</code></p><p>GitHub：<code>https://github.com/Rodert/JavaPub</code></p><p><a href="http://javapub.net.cn" target="_blank" rel="noopener noreferrer">http://javapub.net.cn</a></p>',7);function h(m,b){const o=p("font");return i(),l("div",null,[u,d,t("p",null,[t("strong",null,[a(o,{color:"blue"},{default:r(()=>[e("面试官")]),_:1}),e("： 你好，很高兴见到你。请问你对线程池有什么了解？")])]),t("p",null,[t("strong",null,[a(o,{color:"red"},{default:r(()=>[e("候选人：")]),_:1})]),e(" 你好，我对线程池非常了解。线程池是一种管理线程的机制，它可以在需要时创建线程，执行任务，并在任务完成后回收线程，从而提高系统的性能和资源利用率。")]),t("p",null,[t("strong",null,[a(o,{color:"blue"},{default:r(()=>[e("面试官")]),_:1}),e("： 嗯，你说得不错。那你知道线程池的工作原理吗？")])]),t("p",null,[t("strong",null,[a(o,{color:"red"},{default:r(()=>[e("候选人：")]),_:1})]),e(" 当一个任务需要执行时，线程池会首先检查是否有空闲线程可用，如果有，则将任务分配给其中一个空闲线程执行；如果没有，则会根据线程池的配置信息创建新的线程来执行任务。当任务执行完成后，线程会返回线程池，等待下一个任务的分配。")]),t("p",null,[t("strong",null,[a(o,{color:"blue"},{default:r(()=>[e("面试官")]),_:1}),e("： 好的，那你知道线程池的参数有哪些吗？")])]),t("p",null,[t("strong",null,[a(o,{color:"red"},{default:r(()=>[e("候选人：")]),_:1})]),e(" 线程池的参数包括核心线程数、最大线程数、任务队列、线程池拒绝策略等。其中，核心线程数是线程池中最少的线程数，最大线程数是线程池中最多的线程数，任务队列用于存储等待执行的任务，线程池拒绝策略用于处理任务队列已满时的情况。")]),t("p",null,[t("strong",null,[a(o,{color:"blue"},{default:r(()=>[e("面试官")]),_:1}),e("： 嗯，你说得很好。那你知道线程池的拒绝策略有哪些吗？")])]),t("p",null,[t("strong",null,[a(o,{color:"red"},{default:r(()=>[e("候选人：")]),_:1})]),e(" 线程池的拒绝策略有四种，分别是 AbortPolicy、CallerRunsPolicy、DiscardOldestPolicy 和 DiscardPolicy。AbortPolicy 是默认的拒绝策略，它会直接抛出 RejectedExecutionException 异常；CallerRunsPolicy 会将任务分配给调用线程来执行；DiscardOldestPolicy 会丢弃任务队列中最早的任务；DiscardPolicy 会直接丢弃新的任务。")]),t("p",null,[t("strong",null,[a(o,{color:"blue"},{default:r(()=>[e("面试官")]),_:1}),e("： 哈哈，你的回答真是太棒了。那你知道如何自定义线程池吗？")])]),t("p",null,[t("strong",null,[a(o,{color:"red"},{default:r(()=>[e("候选人：")]),_:1})]),e(" 当然知道啦。我们可以通过继承 ThreadPoolExecutor 类来自定义线程池。在自定义线程池时，我们需要重写 ThreadPoolExecutor 的构造方法，并根据需要重写 beforeExecute、afterExecute 和 terminated 方法来实现自定义的线程池行为。同时，我们还可以通过实现 ThreadFactory 接口来自定义线程的创建方式。")]),t("p",null,[t("strong",null,[a(o,{color:"blue"},{default:r(()=>[e("面试官")]),_:1}),e("： 哈哈，你真是一个线程池的专家啊。那你知道线程池的优缺点吗？")])]),t("p",null,[t("strong",null,[a(o,{color:"red"},{default:r(()=>[e("候选人：")]),_:1})]),e(" 当然知道啦。线程池的优点是可以提高系统的性能和资源利用率，避免了频繁创建和销毁线程的开销；缺点是需要合理配置线程池的参数，否则可能会导致线程池过大或过小，从而影响系统的性能。此外，线程池还可能会导致任务执行的顺序发生变化，从而影响程序的正确性。")]),t("p",null,[t("strong",null,[a(o,{color:"blue"},{default:r(()=>[e("面试官")]),_:1}),e("： 哈哈，你真是一个有趣的候选人。谢谢你的回答，我们会尽快通知你面试结果。")])]),g])}const y=n(s,[["render",h],["__file","11.xianchengchi.html.vue"]]),v=JSON.parse('{"path":"/posts/special/1v1/11.xianchengchi.html","title":"线程池","lang":"zh-CN","frontmatter":{"title":"线程池","icon":"laptop-code","category":["《面试1v1》"],"description":"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。 ： 你好，很高兴见到你。请问你对线程池有什么了解？ 你好，我对线程池非常了解。线程池是一种管理线程的机制，它可以在需要时创建线程，执行任务，并在任务完成后回收线程，从而提高系统的性能和资源利用率。 ： 嗯，你说得不错。那你知道线程池的工作原理吗？ 当一个任务需要执行时，...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/posts/special/1v1/11.xianchengchi.html"}],["meta",{"property":"og:site_name","content":"JavaPub"}],["meta",{"property":"og:title","content":"线程池"}],["meta",{"property":"og:description","content":"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。 ： 你好，很高兴见到你。请问你对线程池有什么了解？ 你好，我对线程池非常了解。线程池是一种管理线程的机制，它可以在需要时创建线程，执行任务，并在任务完成后回收线程，从而提高系统的性能和资源利用率。 ： 嗯，你说得不错。那你知道线程池的工作原理吗？ 当一个任务需要执行时，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/wechat-threadpool.png?raw=true"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T14:35:52.000Z"}],["meta",{"property":"article:author","content":"Mr.Wang"}],["meta",{"property":"article:modified_time","content":"2024-07-03T14:35:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线程池\\",\\"image\\":[\\"https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/wechat-threadpool.png?raw=true\\",\\"https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/11.jpg?raw=true\\",\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225632.png\\"],\\"dateModified\\":\\"2024-07-03T14:35:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Wang\\",\\"url\\":\\"https://javapub.net.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1717568495000,"updatedTime":1720017352000,"contributors":[{"name":"wangshiyu","email":"iswangshiyu@foxmail.com","commits":1}]},"readingTime":{"minutes":3.07,"words":922},"filePathRelative":"posts/special/1v1/11.xianchengchi.md","localizedDate":"2024年6月5日","excerpt":"<p><strong>我是 javapub，一名 <code>Markdown</code> 程序员从👨‍💻，八股文种子选手。</strong></p>\\n<figure><img src=\\"https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/wechat-threadpool.png?raw=true\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<p><strong>： 你好，很高兴见到你。请问你对线程池有什么了解？</strong></p>","autoDesc":true}');export{y as comp,v as data};
