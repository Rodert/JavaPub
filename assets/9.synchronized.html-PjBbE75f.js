import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as i,b as n,w as t,d as s,e as l,r as k,o as p}from"./app-C8e2p2Mq.js";const r={},d=i("blockquote",null,[i("p",null,"源码都背下来了，你给我看这")],-1),o=i("p",null,[i("strong",null,[s("我是 javapub，一名 "),i("code",null,"Markdown"),s(" 程序员从👨‍💻，八股文种子选手。")])],-1),c=l(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> synchronized</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，&quot;synchronized&quot; 关键字修饰了 &quot;doSomething()&quot; 方法。这意味着在同一时间只有一个线程可以访问该方法。</p>`,2),g=l(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    synchronized</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，&quot;synchronized&quot; 关键字修饰了一个代码块，该代码块使用 &quot;this&quot; 作为锁对象。这意味着在同一时间只有一个线程可以访问该代码块。</p>`,2),y=l(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> synchronized</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> increment</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        count</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> synchronized</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> decrement</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        count</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> synchronized</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getCount</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> count;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，&quot;increment()&quot;、&quot;decrement()&quot; 和 &quot;getCount()&quot; 方法都被 &quot;synchronized&quot; 关键字修饰。这意味着在同一时间只有一个线程可以访问这些方法。</p>`,2),D=i("ol",null,[i("li",null,"可以实现更细粒度的锁控制，例如可重入锁、读写锁等。"),i("li",null,"可以实现公平锁和非公平锁。"),i("li",null,"可以实现超时锁和可中断锁。"),i("li",null,"可以实现多个条件变量，可以更加灵活地控制线程的等待和唤醒。")],-1),B=i("p",null,'在 Java 中，"synchronized" 关键字的实现是基于对象头中的标记字。当一个对象被锁定时，它的标记字会被设置为锁定状态，当锁被释放时，标记字会被清除。在 Java 6 及之前的版本中，对象头中的标记字是 32 位的，其中 25 位用于存储对象的哈希码，4 位用于存储对象的分代年龄，2 位用于存储锁标志位，1 位用于存储是否是偏向锁。在 Java 7 及之后的版本中，对象头中的标记字被重新设计，其中 32 位用于存储对象的哈希码和分代年龄，而锁标志位则被存储在一个单独的数据结构中。',-1),u=i("p",null,'偏向锁是一种针对单线程访问同步块的优化策略。当一个线程访问一个被 "synchronized" 关键字修饰的代码块时，它会尝试获取该对象的偏向锁。如果该锁没有被其他线程持有，则该线程可以直接获取该锁，而无需进行同步操作。如果该锁已经被其他线程持有，则该线程会尝试升级为轻量级锁或重量级锁。',-1),A=i("p",null,'轻量级锁是一种针对多线程访问同步块的优化策略。当一个线程访问一个被 "synchronized" 关键字修饰的代码块时，它会尝试获取该对象的轻量级锁。如果该锁没有被其他线程持有，则该线程可以直接获取该锁，而无需进行同步操作。如果该锁已经被其他线程持有，则该线程会尝试自旋等待该锁的释放。',-1),v=i("p",null,'重量级锁是一种针对多线程访问同步块的默认策略。当一个线程访问一个被 "synchronized" 关键字修饰的代码块时，它会尝试获取该对象的重量级锁。如果该锁没有被其他线程持有，则该线程可以直接获取该锁，而无需进行同步操作。如果该锁已经被其他线程持有，则该线程会被阻塞，直到该锁被释放。',-1),F=l(`<hr><h5 id="参考底层指令" tabindex="-1"><a class="header-anchor" href="#参考底层指令"><span>参考底层指令：</span></a></h5><p>以下是 JVM 中与 &quot;synchronized&quot; 相关的源码：</p><ol><li>monitorenter 指令的实现：</li></ol><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Interpreter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">monitorenter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  oop obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> stack_top</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get_obj</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 获取栈顶元素，即被锁定的对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 如果对象为空，则抛出 NullPointerException 异常</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    THROW</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">vmSymbols</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">java_lang_NullPointerException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  BasicLock</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> lock </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> obj</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mark</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 获取对象的锁</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">displaced_header</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 如果锁没有被其他线程持有，则尝试获取锁</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // Fast path: lock is unheld, try to acquire it</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">displaced_header</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">displaced_owner</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">set_displaced_header</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      // Lock acquired</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 获取锁成功，直接返回</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // Slow path: lock is held or contention detected</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">  InterpreterRuntime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">monitorenter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(THREAD, obj);</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 获取锁失败，调用 InterpreterRuntime::monitorenter() 方法进行同步操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，monitorenter 指令的实现是通过获取对象的锁来实现的。如果该锁没有被其他线程持有，则该线程可以直接获取该锁，而无需进行同步操作。如果该锁已经被其他线程持有，则该线程会尝试升级为轻量级锁或重量级锁。</p><ol start="2"><li>monitorexit 指令的实现：</li></ol><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Interpreter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">monitorexit</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  oop obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> stack_top</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get_obj</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 获取栈顶元素，即被锁定的对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 如果对象为空，则抛出 NullPointerException 异常</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    THROW</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">vmSymbols</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">java_lang_NullPointerException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  BasicLock</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> lock </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> obj</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mark</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 获取对象的锁</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">displaced_header</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> THREAD) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 如果锁被当前线程持有，则直接释放锁</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // Fast path: lock is held by this thread, release it</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">clear_displaced_header</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 释放锁成功，直接返回</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // Slow path: lock is held by another thread or unheld</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">  InterpreterRuntime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">monitorexit</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(THREAD, obj);</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 释放锁失败，调用 InterpreterRuntime::monitorexit() 方法进行同步操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，monitorexit 指令的实现是通过释放对象的锁来实现的。如果该锁被当前线程持有，则该线程可以直接释放该锁，而无需进行同步操作。如果该锁被其他线程持有，则该线程会被阻塞，直到该锁被释放。</p><ol start="3"><li>ObjectMonitor 类的实现：</li></ol><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> ObjectMonitor</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> CHeapObj</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">mtSynchronizer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  friend</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> VMStructs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> private:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  volatile</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> intptr_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _header;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 对象头，用于存储锁状态和其他信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  volatile</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> intptr_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _count;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 计数器，用于记录重入次数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  volatile</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> intptr_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _waiters;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 等待队列长度，用于记录等待锁的线程数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  volatile</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> intptr_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _recursions;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 递归深度，用于记录当前线程已经获取锁的次数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  volatile</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> intptr_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _object;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 对象指针，指向被锁定的对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  volatile</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> intptr_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _owner;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 持有者指针，指向当前持有锁的线程</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  volatile</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> intptr_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _WaitSet;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 等待队列头指针，指向等待队列的头节点</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  volatile</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> intptr_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _EntryList;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 等待队列尾指针，指向等待队列的尾节点</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  volatile</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> intptr_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _cxq;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 等待队列的条件变量，用于支持条件变量的等待和唤醒操作</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  volatile</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> intptr_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _FreeNext;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 空闲链表指针，用于回收 ObjectMonitor 对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  volatile</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> intptr_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _Responsible;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 责任线程指针，用于记录最后一个释放锁的线程</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  volatile</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> intptr_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _SpinFreq;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 自旋频率，用于控制自旋等待的时间</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  volatile</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> intptr_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _SpinClock;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 自旋时钟，用于记录自旋等待的时间</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  volatile</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> intptr_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _SpinDuration;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 自旋持续时间，用于控制自旋等待的时间</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  volatile</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> intptr_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _SpinEarly;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 自旋提前量，用于控制自旋等待的时间</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  volatile</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> intptr_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _contentions;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 竞争次数，用于记录获取锁的竞争次数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  volatile</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> intptr_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _succ;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 成功次数，用于记录获取锁的成功次数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  volatile</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> intptr_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _cxqWaitTime;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 条件变量等待时间，用于记录条件变量等待的时间</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  volatile</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> intptr_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _reserved;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 保留字段，用于未来扩展</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _header_offset;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 对象头偏移量，用于访问对象头中的信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _count_offset;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 计数器偏移量，用于访问计数器中的信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _waiters_offset;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 等待队列长度偏移量，用于访问等待队列长度中的信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _recursions_offset;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 递归深度偏移量，用于访问递归深度中的信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _object_offset;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 对象指针偏移量，用于访问对象指针中的信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _owner_offset;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 持有者指针偏移量，用于访问持有者指针中的信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _WaitSet_offset;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 等待队列头指针偏移量，用于访问等待队列头指针中的信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _EntryList_offset;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 等待队列尾指针偏移量，用于访问等待队列尾指针中的信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _cxq_offset;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 条件变量偏移量，用于访问条件变量中的信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _FreeNext_offset;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 空闲链表指针偏移量，用于访问空闲链表指针中的信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _Responsible_offset;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 责任线程指针偏移量，用于访问责任线程指针中的信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _SpinFreq_offset;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 自旋频率偏移量，用于访问自旋频率中的信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _SpinClock_offset;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 自旋时钟偏移量，用于访问自旋时钟中的信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _SpinDuration_offset;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 自旋持续时间偏移量，用于访问自旋持续时间中的信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _SpinEarly_offset;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 自旋提前量偏移量，用于访问自旋提前量中的信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _contentions_offset;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 竞争次数偏移量，用于访问竞争次数中的信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _succ_offset;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 成功次数偏移量，用于访问成功次数中的信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _cxqWaitTime_offset;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 条件变量等待时间偏移量，用于访问条件变量等待时间中的信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _reserved_offset;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 保留字段偏移量，用于访问保留字段中的信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，ObjectMonitor 类是 JVM 中与 &quot;synchronized&quot; 相关的核心类之一。它包含了对象的监视器锁的状态信息，例如锁的持有者、等待队列、递归深度等。在 Java 中，每个对象都有一个 ObjectMonitor 对象与之对应，用于实现 &quot;synchronized&quot; 关键字的同步机制。</p>`,12),E=l('<figure><img src="https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/9.jpg?raw=true" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注<strong>公众号JavaPub</strong>追更！</p><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225632.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>🎁目录合集：</p><p>Gitee：<code>https://gitee.com/rodert/JavaPub</code></p><p>GitHub：<code>https://github.com/Rodert/JavaPub</code></p><p><a href="http://javapub.net.cn" target="_blank" rel="noopener noreferrer">http://javapub.net.cn</a></p>',7);function f(b,m){const a=k("font");return p(),e("div",null,[d,o,i("p",null,[i("strong",null,[n(a,{color:"blue"},{default:t(()=>[s("面试官")]),_:1}),s('： 你好，我看到你的简历上写着你熟悉 Java 中的 "synchronized" 关键字。你能给我讲讲它的作用吗？')])]),i("p",null,[i("strong",null,[n(a,{color:"red"},{default:t(()=>[s("候选人：")]),_:1})]),s(' 当然，"synchronized" 是 Java 中的一个关键字，用于实现同步机制。它可以用来修饰方法或代码块，以确保在同一时间只有一个线程可以访问被修饰的代码。')]),i("p",null,[i("strong",null,[n(a,{color:"blue"},{default:t(()=>[s("面试官")]),_:1}),s('： 很好。那么，你能举个例子来说明 "synchronized" 关键字的使用方法吗？')])]),i("p",null,[i("strong",null,[n(a,{color:"red"},{default:t(()=>[s("候选人：")]),_:1})]),s(' 当然。你可以使用 "synchronized" 关键字来修饰方法或代码块。例如，你可以这样使用：')]),c,i("p",null,[i("strong",null,[n(a,{color:"blue"},{default:t(()=>[s("面试官")]),_:1}),s("： 很好。那么，如果我想修饰一个代码块，应该怎么做呢？")])]),i("p",null,[i("strong",null,[n(a,{color:"red"},{default:t(()=>[s("候选人：")]),_:1})]),s(' 你可以这样使用 "synchronized" 关键字来修饰一个代码块：')]),g,i("p",null,[i("strong",null,[n(a,{color:"blue"},{default:t(()=>[s("面试官")]),_:1}),s('： 很好。那么，你能解释一下 "synchronized" 关键字的实现原理吗？')])]),i("p",null,[i("strong",null,[n(a,{color:"red"},{default:t(()=>[s("候选人：")]),_:1})]),s(' 当一个线程访问一个被 "synchronized" 关键字修饰的方法或代码块时，它会尝试获取该对象的监视器锁。如果该锁已经被其他线程持有，则该线程将被阻塞，直到该锁被释放。下面是一个使用 "synchronized" 关键字的示例：')]),y,i("p",null,[i("strong",null,[n(a,{color:"blue"},{default:t(()=>[s("面试官")]),_:1}),s('： 很好，你对 "synchronized" 关键字的理解很清晰。那么，你能告诉我 "synchronized" 关键字的缺点吗？')])]),i("p",null,[i("strong",null,[n(a,{color:"red"},{default:t(()=>[s("候选人：")]),_:1})]),s(' 当然。使用 "synchronized" 关键字会带来一些性能上的开销，因为每个线程都需要获取锁才能访问被修饰的代码。此外，如果使用不当，还可能会导致死锁等问题。')]),i("p",null,[i("strong",null,[n(a,{color:"blue"},{default:t(()=>[s("面试官")]),_:1}),s('： 那么，你能告诉我如何避免 "synchronized" 关键字带来的性能开销吗？')])]),i("p",null,[i("strong",null,[n(a,{color:"red"},{default:t(()=>[s("候选人：")]),_:1})]),s(' 当然。一种方法是使用 "volatile" 关键字来修饰变量，这可以确保变量的可见性，而不需要使用锁。另一种方法是使用 "java.util.concurrent" 包中的并发集合类，例如 ConcurrentHashMap、CopyOnWriteArrayList 等，这些类使用了更高效的同步机制，可以避免 "synchronized" 关键字带来的性能开销。')]),i("p",null,[i("strong",null,[n(a,{color:"blue"},{default:t(()=>[s("面试官")]),_:1}),s('： 很好，你的回答很不错。那么，你能告诉我 "synchronized" 关键字和 "Lock" 接口之间的区别吗？')])]),i("p",null,[i("strong",null,[n(a,{color:"red"},{default:t(()=>[s("候选人：")]),_:1})]),s(' 当然。 "synchronized" 关键字是 Java 中内置的同步机制，它可以用来修饰方法或代码块，使用起来比较简单，但是它的性能开销比较大。而 "Lock" 接口是 Java 中提供的一种更加灵活的同步机制，它可以实现更细粒度的锁控制，例如可重入锁、读写锁等，使用起来比较复杂，但是它的性能开销比较小。')]),i("p",null,[i("strong",null,[n(a,{color:"blue"},{default:t(()=>[s("面试官")]),_:1}),s('： 很好，你的回答很清晰。那么，你有没有使用过 "Lock" 接口呢？')])]),i("p",null,[i("strong",null,[n(a,{color:"red"},{default:t(()=>[s("候选人：")]),_:1})]),s(' 是的，我有使用过 "Lock" 接口。例如，我曾经使用过 ReentrantLock 类来实现可重入锁，这可以避免 "synchronized" 关键字的性能开销，并且可以实现更细粒度的锁控制。')]),i("p",null,[i("strong",null,[n(a,{color:"blue"},{default:t(()=>[s("面试官")]),_:1}),s('： 很好，你的经验很丰富。那么，你能告诉我 "Lock" 接口的一些特点吗？')])]),i("p",null,[i("strong",null,[n(a,{color:"red"},{default:t(()=>[s("候选人：")]),_:1})]),s(' 当然。 "Lock" 接口的一些特点包括：')]),D,i("p",null,[i("strong",null,[n(a,{color:"blue"},{default:t(()=>[s("面试官")]),_:1}),s('： 那么，你能告诉我 "synchronized" 关键字和 "volatile" 关键字之间的区别吗？')])]),i("p",null,[i("strong",null,[n(a,{color:"red"},{default:t(()=>[s("候选人：")]),_:1})]),s(' 当然。 "synchronized" 关键字和 "volatile" 关键字都可以用来实现多线程之间的同步，但是它们的作用不同。 "synchronized" 关键字可以确保在同一时间只有一个线程可以访问被修饰的代码，而 "volatile" 关键字可以确保变量的可见性，即当一个线程修改了变量的值后，其他线程可以立即看到这个修改。')]),i("p",null,[i("strong",null,[n(a,{color:"blue"},{default:t(()=>[s("面试官")]),_:1}),s("： 看来你使用的很好，下面问一点深入的东西。回答不上来也没关系，可以自己想想。")])]),i("p",null,[i("strong",null,[n(a,{color:"blue"},{default:t(()=>[s("面试官")]),_:1}),s('： 好的，那么你能够从 "synchronized" 的底层 Java 实现角度，解释一下它的实现原理吗？')])]),i("p",null,[i("strong",null,[n(a,{color:"red"},{default:t(()=>[s("候选人：")]),_:1})]),s(' 当一个线程访问一个被 "synchronized" 关键字修饰的方法或代码块时，它会尝试获取该对象的监视器锁。如果该锁已经被其他线程持有，则该线程将被阻塞，直到该锁被释放。在 Java 中，每个对象都有一个监视器锁，也称为内部锁或互斥锁。当一个线程获取了一个对象的监视器锁后，其他线程就无法访问该对象的被 "synchronized" 关键字修饰的方法或代码块，直到该锁被释放。')]),B,i("p",null,[i("strong",null,[n(a,{color:"blue"},{default:t(()=>[s("面试官")]),_:1}),s('： 很好，你的回答很详细。那么，你能够给我讲讲 "synchronized" 关键字的优化策略吗？')])]),i("p",null,[i("strong",null,[n(a,{color:"red"},{default:t(()=>[s("候选人：")]),_:1})]),s(' 当然。在 Java 中，"synchronized" 关键字的性能开销比较大，因为每个线程都需要获取锁才能访问被修饰的代码。为了优化 "synchronized" 关键字的性能，Java 6 及之后的版本中引入了偏向锁、轻量级锁和重量级锁等优化策略。')]),u,A,v,i("p",null,[i("strong",null,[n(a,{color:"blue"},{default:t(()=>[s("面试官")]),_:1}),s('： 很好，你的回答很详细。那么，你能够给我讲讲 "synchronized" 关键字的底层 Java 源码实现吗？')])]),i("p",null,[i("strong",null,[n(a,{color:"red"},{default:t(()=>[s("候选人：")]),_:1})]),s(' 当然。在 Java 中，"synchronized" 关键字的底层实现是通过 monitorenter 和 monitorexit 指令来实现的。当一个线程访问一个被 "synchronized" 关键字修饰的方法或代码块时，它会尝试获取该对象的监视器锁，这可以通过 monitorenter 指令来实现。当该线程执行完被 "synchronized" 关键字修饰的方法或代码块后，它会释放该对象的监视器锁，这可以通过 monitorexit 指令来实现。')]),F,i("p",null,[i("strong",null,[n(a,{color:"blue"},{default:t(()=>[s("面试官")]),_:1}),s("： 很好，你的回答很全面，你已进入候补名单。有消息会通知你。")])]),i("p",null,[i("strong",null,[n(a,{color:"red"},{default:t(()=>[s("候选人：")]),_:1})]),s(" 源码都背下来了，你给我看这。")]),E])}const z=h(r,[["render",f],["__file","9.synchronized.html.vue"]]),j=JSON.parse('{"path":"/posts/special/1v1/9.synchronized.html","title":"Synchronized","lang":"zh-CN","frontmatter":{"title":"Synchronized","icon":"laptop-code","category":["《面试1v1》"],"description":"源码都背下来了，你给我看这 我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。 ： 你好，我看到你的简历上写着你熟悉 Java 中的 \\"synchronized\\" 关键字。你能给我讲讲它的作用吗？ 当然，\\"synchronized\\" 是 Java 中的一个关键字，用于实现同步机制。它可以用来修饰方法或代码块，以确保在同一...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/posts/special/1v1/9.synchronized.html"}],["meta",{"property":"og:site_name","content":"JavaPub"}],["meta",{"property":"og:title","content":"Synchronized"}],["meta",{"property":"og:description","content":"源码都背下来了，你给我看这 我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。 ： 你好，我看到你的简历上写着你熟悉 Java 中的 \\"synchronized\\" 关键字。你能给我讲讲它的作用吗？ 当然，\\"synchronized\\" 是 Java 中的一个关键字，用于实现同步机制。它可以用来修饰方法或代码块，以确保在同一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/9.jpg?raw=true"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T14:35:52.000Z"}],["meta",{"property":"article:author","content":"Mr.Wang"}],["meta",{"property":"article:modified_time","content":"2024-07-03T14:35:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Synchronized\\",\\"image\\":[\\"https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/9.jpg?raw=true\\",\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225632.png\\"],\\"dateModified\\":\\"2024-07-03T14:35:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Wang\\",\\"url\\":\\"https://javapub.net.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1717568495000,"updatedTime":1720017352000,"contributors":[{"name":"wangshiyu","email":"iswangshiyu@foxmail.com","commits":1}]},"readingTime":{"minutes":13.13,"words":3938},"filePathRelative":"posts/special/1v1/9.synchronized.md","localizedDate":"2024年6月5日","excerpt":"<blockquote>\\n<p>源码都背下来了，你给我看这</p>\\n</blockquote>\\n<p><strong>我是 javapub，一名 <code>Markdown</code> 程序员从👨‍💻，八股文种子选手。</strong></p>\\n<p><strong>： 你好，我看到你的简历上写着你熟悉 Java 中的 \\"synchronized\\" 关键字。你能给我讲讲它的作用吗？</strong></p>\\n<p><strong></strong> 当然，\\"synchronized\\" 是 Java 中的一个关键字，用于实现同步机制。它可以用来修饰方法或代码块，以确保在同一时间只有一个线程可以访问被修饰的代码。</p>","autoDesc":true}');export{z as comp,j as data};
