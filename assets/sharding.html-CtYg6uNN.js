import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as t,e as n}from"./app-DkkFDzs5.js";const o={},p=n('<h2 id="分表分库解决思路" tabindex="-1"><a class="header-anchor" href="#分表分库解决思路"><span>分表分库解决思路</span></a></h2><p><code>阅读大约3分钟，建议收藏阅读</code></p><p>随着公司业务快速发展，数据库中的数据量猛增，访问性能也变慢了，优化迫在眉睫。</p><p>分析一下问题出现在哪儿呢？ 关系型数据库本身比较容易成为系统瓶颈，单机存储容量、连接数、处理能力都有限。当单表的数据量达到 1000W 或 100G 以后，由于查询维度较多，即使<code>添加从库、优化索引</code>，做很多操作时性能仍下降严重。</p><p><strong>方案1：</strong></p><p>通过提升服务器硬件能力来提高数据处理能力，比如增加存储容量 、CPU等，这种方案成本很高，并且如果瓶颈在 MySQL 本身那么提高硬件也是很有限的。</p><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F15%2F20240615-091028.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><p><strong>方案2：</strong></p><p>把数据分散在不同的数据库中，使得单一数据库的数据量变小来缓解单一数据库的性能问题，从而达到提升数据库性能的目的。</p><p>如下图：将电商数据库拆分为若干独立的数据库，并且对于大表也拆分为若干小表，通过这种数据库拆分的方法来解决数据库的性能问题。就跟把鸡蛋放在多个篮子里是一样的。</p><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F15%2F20240615-091031.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><p><strong>分库分表就是为了解决由于数据量过大而导致数据库性能降低的问题，将原来独立的数据库拆分成若干数据库组成 ，将数据大表拆分成若干数据表组成，使得单一数据库、单一数据表的数据量变小，从而达到提升数据库性能的目的。</strong></p><p><code>分库分表包括分库和分表两个部分，在生产中通常包括：垂直分库、水平分库、垂直分表、水平分表四种方式。</code></p><p>@[toc]</p><h2 id="垂直分表" tabindex="-1"><a class="header-anchor" href="#垂直分表"><span>垂直分表</span></a></h2><p>垂直分表定义：将一个表按照字段分成多表，每个表存储其中一部分字段。</p><p>它带来的提升是：</p><ol><li>为了避免IO争抢并减少锁表的几率</li><li>充分发挥热门数据的操作效率，商品信息的操作的高效率不会被商品描述的低效率所拖累。</li></ol><blockquote><p>为什么大字段IO效率低：第一是由于数据量本身大，需要更长的读取时间；第二是跨页，页是数据库存储单位，很多查找及定位操作都是以页为单位，单页内的数据行越多数据库整体性能越好，而大字段占用空间大，单页内存储行数少，因此IO效率较低。第三，数据库以行为单位将数据加载到内存中，这样表中字段长度较短且访问频率较高，内存能加载更多的数据，命中率更高，减少了磁盘IO，从而提升了数据库性能。</p></blockquote><p>一般来说，某业务实体中的各个数据项的访问频次是不一样的，部分数据项可能是占用存储空间比较大的BLOB或是TEXT。例如上例中的商品描述。所以，当表数据量很大时，可以将表按字段切开，将热门字段、冷门字段分开放置在不同库中，这些库可以放在不同的存储设备上，避免IO争抢。垂直切分带来的性能提升主要集中在热门数据的操作效率上，而且磁盘争用情况减少。</p><p>通常我们按以下原则进行垂直拆分:</p><ol><li>把不常用的字段单独放在一张表;</li><li>把text，blob等大字段拆分出来放在附表中;</li><li>经常组合查询的列放在一张表中;</li></ol><h2 id="垂直分库" tabindex="-1"><a class="header-anchor" href="#垂直分库"><span>垂直分库</span></a></h2><p>通过垂直分表性能得到了一定程度的提升，但是还没有达到要求，并且磁盘空间也快不够了，因为数据还是始终限制在一台服务器，库内垂直分表只解决了单一表数据量过大的问题，但没有将表分布到不同的服务器上，因此每个表还是竞争同一个物理机的CPU、内存、网络IO、磁盘。</p><p><strong>垂直分库是指按照业务将表进行分类，分布到不同的数据库上面，每个库可以放在不同的服务器上，它的核心理念是专库专用。</strong></p><p>它带来的提升是：</p><ol><li>解决业务层面的耦合，业务清晰</li><li>能对不同业务的数据进行分级管理、维护、监控、扩展等</li><li>高并发场景下，垂直分库一定程度的提升IO、数据库连接数、降低单机硬件资源的瓶颈</li></ol><p>垂直分库通过将表按业务分类，然后分布在不同数据库，并且可以将这些数据库部署在不同服务器上，从而达到多个服务器共同分摊压力的效果，但是依然没有解决单表数据量过大的问题。</p><h2 id="水平分库" tabindex="-1"><a class="header-anchor" href="#水平分库"><span>水平分库</span></a></h2><p><strong>水平分库是把同一个表的数据按一定规则拆到不同的数据库中，每个库可以放在不同的服务器上。</strong></p><blockquote><p>垂直分库是把不同表拆到不同数据库中。水平分库是对数据行的拆分，不影响表结构</p></blockquote><p>水平分库带来的提升是：</p><ol><li>解决了单库大数据，高并发的性能瓶颈。</li><li>提高了系统的稳定性及可用性。</li></ol><blockquote><p>稳定性体现在IO冲突减少，锁定减少，可用性指某个库出问题，部分可用`</p></blockquote><p>当一个应用难以再细粒度的垂直切分，或切分后数据量行数巨大，存在单库读写、存储性能瓶颈，这时候就需要进行水平分库了，经过水平切分的优化，往往能解决单库存储量及性能瓶颈。但由于同一个表被分配在不同的数据库，需要额外进行数据操作的路由工作，因此大大提升了系统复杂度。</p><hr><h2 id="水平分表" tabindex="-1"><a class="header-anchor" href="#水平分表"><span>水平分表</span></a></h2><p>水平分表是在同一个数据库内，把同一个表的数据按一定规则拆到多个表中。</p><p>它带来的提升是：</p><ol><li>优化单一表数据量过大而产生的性能问题</li><li>避免 IO 争抢并减少锁表的几率</li></ol><p>库内的水平分表，解决了单一表数据量过大的问题，分出来的小表中只包含一部分数据，从而使得单个表的数据量变小，提高检索性能。</p><hr><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p><strong>垂直分表</strong>：可以把一个宽表的字段按访问频次、是否是大字段的原则拆分为多个表，这样既能使业务清晰，还能提升部分性能。拆分后，尽量从业务角度避免联查，否则性能方面将得不偿失。</p><p><strong>垂直分库</strong>：可以把多个表按业务耦合松紧归类，分别存放在不同的库，这些库可以分布在不同服务器，从而使访问压力被多服务器负载，大大提升性能，同时能提高整体架构的业务清晰度，不同的业务库可根据自身情况定制优化方案。但是它需要解决跨库带来的所有复杂问题。</p><p><strong>水平分库</strong>：可以把一个表的数据(按数据行)分到多个不同的库，每个库只有这个表的部分数据，这些库可以分布在不同服务器，从而使访问压力被多服务器负载，大大提升性能。它不仅需要解决跨库带来的所有复杂问题，还要解决数据路由的问题(数据路由问题后边介绍)。</p><p><strong>水平分表</strong>：可以把一个表的数据(按数据行)分到多个同一个数据库的多张表中，每个表只有这个表的部分数据，这样做能小幅提升性能，它仅仅作为水平分库的一个补充优化。</p><p>一般来说，在系统设计阶段就应该根据业务耦合松紧来确定垂直分库，垂直分表方案，在数据量及访问压力不是特别大的情况，首先考虑<code>缓存、读写分离、索引技术</code>等方案。若数据量极大，且持续增长，再考虑水平分库水平分表方案。</p><hr><p><code>JavaPub参考教程：https://blog.csdn.net/weixin_44062339/article/details/100491744</code></p><h2 id="后记" tabindex="-1"><a class="header-anchor" href="#后记"><span>后记</span></a></h2><p><code>现在是 2021 辛丑年 叄月，大家都知道我最近在做一套JavaPub系列面试题，前面已经更新过一部分，在接下来还会持续更新，欢迎大家分享、关注</code></p><h3 id="序言" tabindex="-1"><a class="header-anchor" href="#序言"><span>序言</span></a></h3><p>再高大上的框架，也需要扎实的基础才能玩转，高频面试问题更是基础中的高频实战要点。</p><h3 id="适合阅读人群" tabindex="-1"><a class="header-anchor" href="#适合阅读人群"><span>适合阅读人群</span></a></h3><p>Java 学习者和爱好者，有一定工作经验的技术人，准面试官等。</p><h3 id="阅读建议" tabindex="-1"><a class="header-anchor" href="#阅读建议"><span>阅读建议</span></a></h3><p>本教程是系列教程，包含 Java 基础，JVM，容器，多线程，反射，异常，网络，对象拷贝，JavaWeb，设计模式，Spring-Spring MVC，Spring Boot / Spring Cloud，Mybatis / Hibernate，Kafka，RocketMQ，Zookeeper，MySQL，Redis，Elasticsearch，Lucene</p><p><code>微信搜：JavaPub，阅读全套系列面试题教程</code></p><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F15%2F20240615-093516.jpeg" alt="wx" tabindex="0" loading="lazy"><figcaption>wx</figcaption></figure>',60),i=[p];function s(l,c){return t(),a("div",null,i)}const h=e(o,[["render",s],["__file","sharding.html.vue"]]),g=JSON.parse('{"path":"/posts/database/mysql/sharding.html","title":"分表分库解决思路","lang":"zh-CN","frontmatter":{"title":"分表分库解决思路","icon":"lightbulb","description":"分表分库解决思路 阅读大约3分钟，建议收藏阅读 随着公司业务快速发展，数据库中的数据量猛增，访问性能也变慢了，优化迫在眉睫。 分析一下问题出现在哪儿呢？ 关系型数据库本身比较容易成为系统瓶颈，单机存储容量、连接数、处理能力都有限。当单表的数据量达到 1000W 或 100G 以后，由于查询维度较多，即使添加从库、优化索引，做很多操作时性能仍下降严重。 ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/posts/database/mysql/sharding.html"}],["meta",{"property":"og:site_name","content":"JavaPub"}],["meta",{"property":"og:title","content":"分表分库解决思路"}],["meta",{"property":"og:description","content":"分表分库解决思路 阅读大约3分钟，建议收藏阅读 随着公司业务快速发展，数据库中的数据量猛增，访问性能也变慢了，优化迫在眉睫。 分析一下问题出现在哪儿呢？ 关系型数据库本身比较容易成为系统瓶颈，单机存储容量、连接数、处理能力都有限。当单表的数据量达到 1000W 或 100G 以后，由于查询维度较多，即使添加从库、优化索引，做很多操作时性能仍下降严重。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F15%2F20240615-091028.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T14:35:52.000Z"}],["meta",{"property":"article:author","content":"Mr.Wang"}],["meta",{"property":"article:modified_time","content":"2024-07-03T14:35:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分表分库解决思路\\",\\"image\\":[\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F15%2F20240615-091028.png\\",\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F15%2F20240615-091031.png\\",\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F15%2F20240615-093516.jpeg\\"],\\"dateModified\\":\\"2024-07-03T14:35:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Wang\\",\\"url\\":\\"https://javapub.net.cn\\"}]}"]]},"headers":[{"level":2,"title":"分表分库解决思路","slug":"分表分库解决思路","link":"#分表分库解决思路","children":[]},{"level":2,"title":"垂直分表","slug":"垂直分表","link":"#垂直分表","children":[]},{"level":2,"title":"垂直分库","slug":"垂直分库","link":"#垂直分库","children":[]},{"level":2,"title":"水平分库","slug":"水平分库","link":"#水平分库","children":[]},{"level":2,"title":"水平分表","slug":"水平分表","link":"#水平分表","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"后记","slug":"后记","link":"#后记","children":[{"level":3,"title":"序言","slug":"序言","link":"#序言","children":[]},{"level":3,"title":"适合阅读人群","slug":"适合阅读人群","link":"#适合阅读人群","children":[]},{"level":3,"title":"阅读建议","slug":"阅读建议","link":"#阅读建议","children":[]}]}],"git":{"createdTime":1718350679000,"updatedTime":1720017352000,"contributors":[{"name":"wangshiyu","email":"iswangshiyu@foxmail.com","commits":1}]},"readingTime":{"minutes":8.05,"words":2415},"filePathRelative":"posts/database/mysql/sharding.md","localizedDate":"2024年6月14日","excerpt":"<h2>分表分库解决思路</h2>\\n<p><code>阅读大约3分钟，建议收藏阅读</code></p>\\n<p>随着公司业务快速发展，数据库中的数据量猛增，访问性能也变慢了，优化迫在眉睫。</p>\\n<p>分析一下问题出现在哪儿呢？ 关系型数据库本身比较容易成为系统瓶颈，单机存储容量、连接数、处理能力都有限。当单表的数据量达到 1000W 或 100G 以后，由于查询维度较多，即使<code>添加从库、优化索引</code>，做很多操作时性能仍下降严重。</p>\\n<p><strong>方案1：</strong></p>\\n<p>通过提升服务器硬件能力来提高数据处理能力，比如增加存储容量 、CPU等，这种方案成本很高，并且如果瓶颈在 MySQL 本身那么提高硬件也是很有限的。</p>","autoDesc":true}');export{h as comp,g as data};
