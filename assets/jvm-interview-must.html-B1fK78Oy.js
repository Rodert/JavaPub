import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as t,a as n,e as i,o as r}from"./app-DMpQn8jU.js";const p={},o=n("p",null,"JVM",-1),s=i('<p>10道不得不会的JVM面试题</p><p>我是JavaPub，专注于面试、副业，技术人的成长记录。</p><p>以下是 JVM 面试题，相信大家都会有种及眼熟又陌生的感觉、看过可能在短暂的面试后又马上忘记了。<strong>JavaPub</strong>在这里整理这些容易忘记的重点知识及<strong>解答</strong>，<code>建议收藏，经常温习查阅</code>。</p><p>评论区见</p><p>@[toc]</p><h1 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm"><span>JVM</span></a></h1><p>基于JDK8</p><h3 id="_1-说一说jvm的主要组成部分" tabindex="-1"><a class="header-anchor" href="#_1-说一说jvm的主要组成部分"><span>1. 说一说JVM的主要组成部分</span></a></h3><p>点击放大看，一图胜千文</p><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/202405271039590.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>方法区和堆是所有线程共享的内存区域；而虚拟机栈、本地方法栈和程序计数器的运行是线程私有的内存区域，运行时数据区域就是我们常说的JVM的内存。</p></li><li><p>类加载子系统：根据给定的全限定名类名(如：java.lang.Object)来装载class文件到运行时数据区中的方法区中。</p></li><li><p>Java堆是Java虚拟机所管理的内存中最大的一块，也是垃圾回收的主要区域。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。</p></li><li><p>方法区与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p></li><li><p>程序计数器是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器，用来指示执行引擎下一条执行指令的地址。</p></li><li><p>Java虚拟机栈也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、返回方法地址等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p></li><li><p>本地方法栈（Native Method Stacks）,本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务。</p></li><li><p>执行引擎：根据程序计数器中存储的指令地址执行classes中的指令。</p></li><li><p>本地接口：与本地方法库交互，是其它编程语言交互的接口。</p></li></ul><h3 id="_2-说一下-jvm-的作用" tabindex="-1"><a class="header-anchor" href="#_2-说一下-jvm-的作用"><span>2. 说一下 JVM 的作用？</span></a></h3><p>首先通过编译器把 Java 代码转换成字节码，类加载器（ClassLoader）再把字节码加载到内存中，将其放在运行时数据区（Runtime data area）的方法区内，而字节码文件只是 JVM 的一套指令集规范，并不能直接交给底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。</p><h3 id="_3-说一下堆栈的区别" tabindex="-1"><a class="header-anchor" href="#_3-说一下堆栈的区别"><span>3. 说一下堆栈的区别？</span></a></h3><p><strong>物理地址</strong></p><p>堆的物理地址分配对象是不连续的。因此性能慢些。在GC的时候也要考虑到不连续的分配，所以有各种算法。比如，标记-消除，复制，标记-压缩，分代（即新生代使用复制算法，老年代使用标记——压缩）</p><p>栈使用的是数据结构中的栈，先进后出的原则，物理地址分配是连续的。所以性能快。</p><p><strong>内存分别</strong></p><p>堆因为是不连续的，所以分配的内存是在运行期确认的，因此大小不固定。一般堆大小远远大于栈。</p><p>栈是连续的，所以分配的内存大小要在编译期就确认，大小是固定的。</p><p><strong>存放的内容</strong></p><p>堆存放的是对象的实例和数组。因此该区更关注的是数据的存储</p><p>栈存放：局部变量，操作数栈，返回结果。该区更关注的是程序方法的执行。</p><p><strong>PS：</strong></p><p>静态变量放在方法区 静态的对象还是放在堆。 程序的可见度</p><p>堆对于整个应用程序都是共享、可见的。</p><p>栈只对于线程是可见的。所以也是线程私有。他的生命周期和线程相同。</p><h3 id="_4-java内存泄漏" tabindex="-1"><a class="header-anchor" href="#_4-java内存泄漏"><span>4. Java内存泄漏</span></a></h3><p>内存泄漏是指不再被使用的对象或者变量一直被占据在内存中。</p><p>严格来说，只有对象不会再被程序用到了，但是GC又不能回收他们的情况，才叫内存泄漏。</p><p>理论上来说，Java是有GC垃圾回收机制的，也就是说，不再被使用的对象，会被GC自动回收掉，自动从内存中清除。</p><p>但是，即使这样，Java也还是存在着内存泄漏的情况，java导致内存泄露的原因很明确：长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄露，尽管短生命周期对象已经不再需要，但是因为长生命周期对象持有它的引用而导致不能被回收，这就是java中内存泄露的发生场景。</p><h3 id="_5-jvm-有哪些垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#_5-jvm-有哪些垃圾回收算法"><span>5. JVM 有哪些垃圾回收算法？</span></a></h3><ul><li>标记-清除算法：标记有用对象，然后进行清除回收。缺点：效率不高，无法清除垃圾碎片。</li><li>复制算法：按照容量划分二个大小相等的内存区域，当一块用完的时候将活着的对象复制到另一块上，然后再把已使用的内存空间一次清理掉。缺点：内存使用率不高，只有原来的一半，消耗内存。</li><li>标记-整理算法：标记无用对象，让所有存活的对象都向一端移动，然后直接清除掉端边界以外的内存。</li><li>分代算法：根据对象存活周期的不同将内存划分为几块，一般是新生代和老年代，新生代基本采用复制算法，老年代采用标记整理算法。</li></ul><h3 id="_6-说一下-jvm-有哪些垃圾回收器" tabindex="-1"><a class="header-anchor" href="#_6-说一下-jvm-有哪些垃圾回收器"><span>6. 说一下 JVM 有哪些垃圾回收器？</span></a></h3><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/202405271039170.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/202405271039924.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_7-说一下类加载的执行过程" tabindex="-1"><a class="header-anchor" href="#_7-说一下类加载的执行过程"><span>7. 说一下类加载的执行过程？</span></a></h3><ul><li><strong>加载</strong>：根据查找路径找到相应的 class 文件然后装载入内存中；</li></ul><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/202405271039756.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><strong>验证</strong>：检查加载的 class 文件的正确性；</li><li><strong>准备</strong>：给类中的静态变量分配内存空间；</li><li><strong>解析</strong>：虚拟机将常量池中的符号引用替换成直接引用的过程。符号引用就理解为一个标示，而在直接引用直接指向内存中的地址；</li><li><strong>初始化</strong>：对静态变量和静态代码块执行初始化工作。</li></ul><hr><h3 id="_8-什么是双亲委派模型-为什么要使用双亲委派模型" tabindex="-1"><a class="header-anchor" href="#_8-什么是双亲委派模型-为什么要使用双亲委派模型"><span>8. 什么是双亲委派模型？为什么要使用双亲委派模型？</span></a></h3><p><strong>什么是双亲委派模型</strong></p><ul><li>当需要加载一个类的时候，子类加载器并不会马上去加载，而是依次去请求父类加载器加载</li><li>如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器；</li><li>如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。</li></ul><p><strong>为什么要使用双亲委派模型</strong></p><p>可以防止内存中出现多份同样的字节码，如果没有双亲委派模型而是由各个类加载器自行加载的话，如果用户编写了一个java.lang.Object的同名类并放在ClassPath中，多个类加载器都去加载这个类到内存中，系统中将会出现多个不同的Object类，那么类之间的比较结果及类的唯一性将无法保证，而且如果不使用这种双亲委派模型将会给虚拟机的安全带来隐患。所以，要让类对象进行比较有意义，前提是他们要被同一个类加载器加载。</p><h3 id="_9-cms垃圾清理的过程" tabindex="-1"><a class="header-anchor" href="#_9-cms垃圾清理的过程"><span>9. CMS垃圾清理的过程</span></a></h3><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/202405271040414.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>CMS整个过程比之前的收集器要复杂，整个过程分为4个主要阶段，即初始标记阶段、并发标记阶段、重新标记阶段和并发清除阶段。(涉及STW的阶段主要是：初始标记 和 重新标记 stop-the-world)</p><ul><li><p><strong>初始标记</strong>（Initial-Mark）阶段：在这个阶段中，程序中所有的工作线程都将会因为“stop-the-world”机制而出现短暂的暂停，这个阶段的主要任务仅仅只是标记出 GC Roots 能直接关联到的对象。一旦标记完成之后就会恢复之前被暂停的所有应用线程。由于直接关联对象比较小，所以这里的速度非常快。</p></li><li><p><strong>并发标记</strong>（Concurrent-Mark）阶段：从 Gc Roots 的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行。</p></li><li><p><strong>重新标记</strong>（Remark）阶段：由于在并发标记阶段中，程序的工作线程会和垃圾收集线程同时运行或者交叉运行，因此为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短。</p></li><li><p><strong>并发清除</strong>（Concurrent-Sweep）阶段：此阶段清理删除掉标记阶段判断的已经死亡的对象，释放内存空间。由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的</p></li></ul><h3 id="_10-常用的-jvm-调优的参数都有哪些" tabindex="-1"><a class="header-anchor" href="#_10-常用的-jvm-调优的参数都有哪些"><span>10. 常用的 JVM 调优的参数都有哪些？</span></a></h3><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/202405271040021.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>-XX:NewRatio=4：设置年轻的和老年代的内存比例为 1:4；</li><li>-XX:SurvivorRatio=8：设置新生代 Eden 和 Survivor 比例为 8:2；</li><li>–XX:+UseParNewGC：指定使用 ParNew + Serial Old 垃圾回收器组合；</li><li>-XX:+UseParallelOldGC：指定使用 ParNew + ParNew Old 垃圾回收器组合；</li><li>-XX:+UseConcMarkSweepGC：指定使用 CMS + Serial Old 垃圾回收器组合；</li><li>-XX:+PrintGC：开启打印 gc 信息；</li><li>-XX:+PrintGCDetails：打印 gc 详细信息。</li></ul><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/202405271040096.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>JVM 调优-这个问题单独一篇</p><hr><h3 id="系列文章" tabindex="-1"><a class="header-anchor" href="#系列文章"><span>系列文章</span></a></h3><p><a href="https://mp.weixin.qq.com/s/3Nviyml0cvnX_HHkZ5DjWg" target="_blank" rel="noopener noreferrer">10道不得不会的Java基础面试题</a></p><p><a href="https://mp.weixin.qq.com/s/ug3LBR4MfM1C5uVFJaPWLQ" target="_blank" rel="noopener noreferrer">10道不得不会的Java容器面试题</a></p><p><a href="https://mp.weixin.qq.com/s/h2tTwDVqL15rCI6rftgn9A" target="_blank" rel="noopener noreferrer">10道不得不会的Java并发基础面试题</a></p><p><a href="https://mp.weixin.qq.com/s/59Tif95LGi8BTJXu47zi6g" target="_blank" rel="noopener noreferrer">10道不得不会的JavaEE面试题</a></p><p><a href="https://mp.weixin.qq.com/s/hvsaD1NlzpR0LpP-GmbU_A" target="_blank" rel="noopener noreferrer">10道不得不会的JVM面试题</a></p><p><a href="https://mp.weixin.qq.com/s/yVPwCoSQ-8OYvhw8bH0PtA" target="_blank" rel="noopener noreferrer">10道不得不会的MySQL基础面试题</a></p><p><a href="https://mp.weixin.qq.com/s/lVFwy765hQ2FvIYBHyw0yA" target="_blank" rel="noopener noreferrer">10道不得不会的MyBatis面试题</a></p><p><a href="https://mp.weixin.qq.com/s/lrHsLZANxHxd_FWTCdMNJw" target="_blank" rel="noopener noreferrer">10道不得不会的Spring面试题</a></p><p><a href="https://mp.weixin.qq.com/s/-oYKVXBaQwzyzp7ffqH7gw" target="_blank" rel="noopener noreferrer">10道不得不会的SpringBoot面试题</a></p><p><a href="https://mp.weixin.qq.com/s/z3D37HqeTUmwrdheUL_Efw" target="_blank" rel="noopener noreferrer">10道不得不会的ElasticSearch面试题</a></p><p><a href="https://mp.weixin.qq.com/s/_Pq2VgxRA4yw1j_eCfEiLg" target="_blank" rel="noopener noreferrer">10道不得不会的Redis面试题</a></p><p><a href="https://javapub.blog.csdn.net/category_11740063.html" target="_blank" rel="noopener noreferrer">10道不得不会的Kafka面试题</a></p><p><a href="https://mp.weixin.qq.com/s/ym0-x6okFi0CgF8RcxeLFA" target="_blank" rel="noopener noreferrer">10道不得不会的Zookeeper面试题</a></p><p><a href="https://mp.weixin.qq.com/s/DTC3gZNHm3Rlf_GK7twlkQ" target="_blank" rel="noopener noreferrer">10道不得不会的Docker面试题</a></p><p><a href="">10道不得不会的缓存面试题</a></p><p><a href="https://github.com/Rodert" target="_blank" rel="noopener noreferrer">GItHub</a>|<a href="https://gitee.com/rodert" target="_blank" rel="noopener noreferrer">GitEE</a></p>',74);function l(c,g){return r(),a("div",null,[o,t(" more "),s])}const u=e(p,[["render",l],["__file","jvm-interview-must.html.vue"]]),v=JSON.parse('{"path":"/posts/special/havato/jvm-interview-must.html","title":"10道不得不会的JVM面试题","lang":"zh-CN","frontmatter":{"index":true,"icon":"page","title":"10道不得不会的JVM面试题","author":"Wang Shiyu","date":"2022-04-21T00:00:00.000Z","category":["最少必要面试题"],"tag":["jvm","面试题"],"description":"JVM","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/posts/special/havato/jvm-interview-must.html"}],["meta",{"property":"og:site_name","content":"JavaPub"}],["meta",{"property":"og:title","content":"10道不得不会的JVM面试题"}],["meta",{"property":"og:description","content":"JVM"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/202405271039590.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T14:35:52.000Z"}],["meta",{"property":"article:author","content":"Wang Shiyu"}],["meta",{"property":"article:tag","content":"jvm"}],["meta",{"property":"article:tag","content":"面试题"}],["meta",{"property":"article:published_time","content":"2022-04-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-03T14:35:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"10道不得不会的JVM面试题\\",\\"image\\":[\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/202405271039590.png\\",\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/202405271039170.png\\",\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/202405271039924.png\\",\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/202405271039756.png\\",\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/202405271040414.png\\",\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/202405271040021.png\\",\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/202405271040096.png\\"],\\"datePublished\\":\\"2022-04-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-03T14:35:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Wang Shiyu\\"}]}"]]},"headers":[{"level":3,"title":"1. 说一说JVM的主要组成部分","slug":"_1-说一说jvm的主要组成部分","link":"#_1-说一说jvm的主要组成部分","children":[]},{"level":3,"title":"2. 说一下 JVM 的作用？","slug":"_2-说一下-jvm-的作用","link":"#_2-说一下-jvm-的作用","children":[]},{"level":3,"title":"3. 说一下堆栈的区别？","slug":"_3-说一下堆栈的区别","link":"#_3-说一下堆栈的区别","children":[]},{"level":3,"title":"4. Java内存泄漏","slug":"_4-java内存泄漏","link":"#_4-java内存泄漏","children":[]},{"level":3,"title":"5. JVM 有哪些垃圾回收算法？","slug":"_5-jvm-有哪些垃圾回收算法","link":"#_5-jvm-有哪些垃圾回收算法","children":[]},{"level":3,"title":"6. 说一下 JVM 有哪些垃圾回收器？","slug":"_6-说一下-jvm-有哪些垃圾回收器","link":"#_6-说一下-jvm-有哪些垃圾回收器","children":[]},{"level":3,"title":"7. 说一下类加载的执行过程？","slug":"_7-说一下类加载的执行过程","link":"#_7-说一下类加载的执行过程","children":[]},{"level":3,"title":"8. 什么是双亲委派模型？为什么要使用双亲委派模型？","slug":"_8-什么是双亲委派模型-为什么要使用双亲委派模型","link":"#_8-什么是双亲委派模型-为什么要使用双亲委派模型","children":[]},{"level":3,"title":"9. CMS垃圾清理的过程","slug":"_9-cms垃圾清理的过程","link":"#_9-cms垃圾清理的过程","children":[]},{"level":3,"title":"10. 常用的 JVM 调优的参数都有哪些？","slug":"_10-常用的-jvm-调优的参数都有哪些","link":"#_10-常用的-jvm-调优的参数都有哪些","children":[]},{"level":3,"title":"系列文章","slug":"系列文章","link":"#系列文章","children":[]}],"git":{"createdTime":1717582746000,"updatedTime":1720017352000,"contributors":[{"name":"wangshiyu","email":"iswangshiyu@foxmail.com","commits":1}]},"readingTime":{"minutes":10.25,"words":3075},"filePathRelative":"posts/special/havato/jvm-interview-must.md","localizedDate":"2022年4月21日","excerpt":"<p>JVM</p>\\n","autoDesc":true}');export{u as comp,v as data};
