import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as i,b as a,w as e,d as s,e as l,r as p,o}from"./app-C3J572Ue.js";const h={},d=i("p",null,[i("strong",null,[s("我是 javapub，一名 "),i("code",null,"Markdown"),s(" 程序员从👨‍💻，八股文种子选手。")])],-1),k=i("ol",null,[i("li",null,"IoC(Inverse of Control):通过 DI(Dependency Injection)实现将对象间的依赖关系交给 Spring 管理。"),i("li",null,"AOP(Aspect Oriented Programming):面向切面编程,可以在程序运行期间动态的将某段代码切入到指定的方法、指定的位置进行运行。"),i("li",null,"Portlet MVC:Spring 提供 MVC 框架可以快速开发 Web 应用。"),i("li",null,"事务管理:Spring 提供广泛的事务管理接口,支持 JDBC、Hibernate 等事务管理。"),i("li",null,"Spring 统一一体化了其他框架和技术,如:Struts、Hibernate、Quartz 等。 面试官(笑):你说的真是五花八门,让我有点晕,来聊点具体的吧。Spring 是如何工作的,它如何用于构建 Web 应用程序?")],-1),c=i("ol",null,[i("li",null,"浏览器发送请求到 DispatcherServlet。"),i("li",null,"DispatcherServlet 接收请求后会转交给 HandlerMapping 得到请求对应的 Handler。"),i("li",null,"HandlerMapping 将 Handler 映射到 HandlerAdapter。"),i("li",null,"HandlerAdapter 调用 Handler 处理请求,Handler 会返回一个 ModelAndView。"),i("li",null,"ViewResolver 解析 ModelAndView,找到正确的 View。"),i("li",null,"DispatcherServlet 将 View 返回给浏览器。")],-1),g=i("p",null,"通过这个流程,Spring MVC 应用了 MVC 模式,实现了业务逻辑、控制逻辑、表现逻辑的分离,使我们可以更加专注于业务开发。",-1),u=l("<ol><li>Web 应用:Spring MVC 是 Spring 体系中最为成熟的框架,可以用来开发网站、BBS、博客等 Web 应用。</li><li>企业应用:Spring 提供事务管理、数据访问等功能,非常适用于开发企业级应用。</li><li>微服务:Spring Boot 提供了快速开发单个微服务的能力,配合 Spring Cloud 可以开发微服务架构的系统。</li><li>Android 应用:Spring for Android 提供了在 Android 应用中使用 Spring 的能力。</li></ol><p>开发人员在使用 Spring 时常犯的几个错误:</p><ol><li>容器管理对象依赖关系错乱:未正确配置 bean 的依赖关系,导致依赖注入错误。</li><li>上下文目录 problemas:beans.xml 配置文件放在了非上下文目录,导致 Spring 无法识别。</li><li>事务管理错误:未正确配置事务属性,导致事务管理不生效。</li><li>AOP 误用:滥用 AOP 或错误使用 AOP 导致 sistem 过于复杂或 AOP 不生效。</li><li>未考虑扩展性:在开发初期未考虑系统扩展性,导致系统难以演进。</li></ol>",3),y=i("ol",null,[i("li",null,"采用模块化设计,遵循高内聚低耦合原则,每个模块保持高内聚,模块之间低耦合。"),i("li",null,"使用设计模式,如工厂模式、单例模式、代理模式等,提高系统扩展性。"),i("li",null,"应用 AOP,通过预置切点在不修改源代码的情况下增加新功能。"),i("li",null,"使用 Spring 的事件机制,通过事件监听器监听事件,当事件触发时执行相应逻辑。"),i("li",null,"应用 Spring 的 Profile 功能,可以根据环境部署不同的 bean,提高系统灵活性。"),i("li",null,"使用 Spring Boot 依赖管理和自动配置的能力,简化构建过程,提高开发效率。"),i("li",null,"应用微服务架构,将单体应用拆分成职责单一、松耦合的服务,更容易扩展和升级。"),i("li",null,"使用缓存技术,如 Redis 缓存数据库查询结果,降低数据库压力,提高系统吞吐量。")],-1),b=l(`<ol><li>容器启动时会调用 refresh() 方法,其中会调用 obtainFreshBeanFactory() 方法初始化 DefaultListableBeanFactory,此为 IoC 容器的核心。</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// AbstractApplicationContext.java</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> refresh</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() throws BeansException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> IllegalStateException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">   // 初始化 BeanFactory</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">   DefaultListableBeanFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> beanFactory </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> obtainFreshBeanFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>然后会调用 loadBeanDefinitions(beanFactory) 方法加载 bean 定义,主要通过 XmlBeanDefinitionReader 解析 bean 定义文件。</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// AbstractXmlApplicationContext.java  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> loadBeanDefinitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">DefaultListableBeanFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> beanFactory) throws BeansException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // Create a new XmlBeanDefinitionReader for the given BeanFactory.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    XmlBeanDefinitionReader</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> beanDefinitionReader </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> XmlBeanDefinitionReader</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(beanFactory)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // Configure the bean definition reader with this context&#39;s</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // resource loading environment.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    beanDefinitionReader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    beanDefinitionReader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setResourceLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    beanDefinitionReader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setEntityResolver</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> ResourceEntityResolver</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // Allow a subclass to provide custom initialization of the reader,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // then proceed with actually loading the bean definitions.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    initBeanDefinitionReader</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(beanDefinitionReader)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    loadBeanDefinitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(beanDefinitionReader)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>bean 实例化阶段会调用 getBean() 方法,通过工厂方法或构造器实例化 bean。</li><li>实例化 bean 后,会对 bean 进行属性注入、初始化以及其他Aware接口回调。</li><li>bean 的生命周期至此结束,容器会对 bean 进行管理,直至容器关闭。 这就是 IoC 容器实现的大致流程,关键是 bean 定义资源的加载和解析,以及 bean 的实例化及生命周期管理。IoC 容器屏蔽了 bean 之间的依赖关系,使 bean 的使用者可以零配置使用 bean。</li></ol>`,5),m=l("<ol><li>选择高性能技术栈:选择支持高并发的语言(Java、Go 等)和框架(Spring、Vert.x 等)。</li><li>采用分布式和微服务架构:将系统拆分为多个单一职责的服务,部署在不同服务器上,可以实现高可用和负载均衡。</li><li>选择高性能存储:使用能支撑高并发读写的数据库,如 Redis、Kafka 等。对关系型数据库进行分库分表、添加缓存等优化。</li><li>限流与降级:使用限流手段控制流量,避免被高流量打垮;使用降级策略保证核心服务可用。</li><li>缓存与异步:对频繁读取数据的接口使用缓存;对非关键性计算使用异步处理,避免线程阻塞。</li><li>服务治理:使用服务注册与发现、熔断器、网关等手段管理各服务。</li><li>线程模型优化:根据业务选择恰当的线程模型。如对大量短连接使用线程池;对长连接使用主从 Reactor 线程模型等。</li><li>利用好硬件资源:合理分配 CPU 和内存资源给应用;利用好多核 CPU 进行并行计算等。</li><li>测试与监控:进行压力测试,监控系统的负载、吞吐量和延迟指标,并进行优化。</li><li>容错和自动恢复:设计稳定的容错方案,当系统发生故障时可以自动检测并恢复。 这些方面搭配得当,可以设计一个高性能、高并发的系统。但需要权衡系统复杂性,在满足需求前提下保持最简实现。</li></ol>",1),v=l('<figure><img src="https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/22.jpg?raw=true" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注<strong>公众号JavaPub</strong>追更！</p><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225632.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>🎁目录合集：</p><p>Gitee：<code>https://gitee.com/rodert/JavaPub</code></p><p>GitHub：<code>https://github.com/Rodert/JavaPub</code></p><p><a href="http://javapub.net.cn" target="_blank" rel="noopener noreferrer">http://javapub.net.cn</a></p>',7);function E(f,B){const n=p("font");return o(),r("div",null,[d,i("p",null,[i("strong",null,[a(n,{color:"blue"},{default:e(()=>[s("面试官")]),_:1}),s("： 想请你简单介绍一下 Spring 框架,它的核心特性是什么?")])]),i("p",null,[i("strong",null,[a(n,{color:"red"},{default:e(()=>[s("候选人：")]),_:1})]),s(" Spring 是一个开源框架,目的是简化 JavaEE 开发。它的核心特性有:")]),k,i("p",null,[i("strong",null,[a(n,{color:"red"},{default:e(()=>[s("候选人：")]),_:1})]),s(" 好的,Spring 的工作原理主要是 IoC 容器。对 Web 应用来说,Spring MVC 是基于 JavaEE 的 Model-View-Controller 设计模式构建的,主要工作流程是:")]),c,g,i("p",null,[i("strong",null,[a(n,{color:"blue"},{default:e(()=>[s("面试官")]),_:1}),s("： 你说的很具体,我明白了。那么 Spring 可以在哪些实际场景中使用?开发人员在使用 Spring 时常犯哪些错误?")])]),i("p",null,[i("strong",null,[a(n,{color:"red"},{default:e(()=>[s("候选人：")]),_:1})]),s(" Spring 可以应用在很多实际场景中:")]),u,i("p",null,[i("strong",null,[a(n,{color:"blue"},{default:e(()=>[s("面试官")]),_:1}),s("： 那么如何使基于 Spring 的应用程序更高效、更可扩展?")])]),i("p",null,[i("strong",null,[a(n,{color:"red"},{default:e(()=>[s("候选人：")]),_:1})]),s(" 这里有几点建议:")]),y,i("p",null,[i("strong",null,[a(n,{color:"blue"},{default:e(()=>[s("面试官")]),_:1}),s("： 很棒,你对 Spring 和高可扩展系统的理解很透彻!最后一个问题,Spring 的源码中 IoC 容器的实现你可以大致描述一下吗?")])]),i("p",null,[i("strong",null,[a(n,{color:"red"},{default:e(()=>[s("候选人：")]),_:1})]),s(" 可以的,IoC 容器的实现主要在 AbstractApplicationContext 及其子类 ClassPathXmlApplicationContext 和FileSystemXmlApplicationContext 中。主要流程是:")]),b,i("p",null,[i("strong",null,[a(n,{color:"blue"},{default:e(()=>[s("面试官")]),_:1}),s("： 你的解释很到位,IoC 容器的源码分析确实需要对它的原理有深入了解。最后一个问题,在你的项目中是如何设计一个高并发的系统的?")])]),i("p",null,[i("strong",null,[a(n,{color:"red"},{default:e(()=>[s("候选人：")]),_:1})]),s(" 设计一个高并发系统,有以下几点建议:")]),m,i("p",null,[i("strong",null,[a(n,{color:"blue"},{default:e(()=>[s("面试官")]),_:1}),s("： 很棒,你在高并发系统设计方面有很强的理解力和丰富经验。")])]),v])}const A=t(h,[["render",E],["__file","22.Spring_jichu.html.vue"]]),D=JSON.parse('{"path":"/posts/special/1v1/22.Spring_jichu.html","title":"Spring基础","lang":"zh-CN","frontmatter":{"title":"Spring基础","icon":"laptop-code","category":["《面试1v1》"],"description":"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。 ： 想请你简单介绍一下 Spring 框架,它的核心特性是什么? Spring 是一个开源框架,目的是简化 JavaEE 开发。它的核心特性有: IoC(Inverse of Control):通过 DI(Dependency Injection)实现将对象间的依赖关系...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/posts/special/1v1/22.Spring_jichu.html"}],["meta",{"property":"og:site_name","content":"JavaPub"}],["meta",{"property":"og:title","content":"Spring基础"}],["meta",{"property":"og:description","content":"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。 ： 想请你简单介绍一下 Spring 框架,它的核心特性是什么? Spring 是一个开源框架,目的是简化 JavaEE 开发。它的核心特性有: IoC(Inverse of Control):通过 DI(Dependency Injection)实现将对象间的依赖关系..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/22.jpg?raw=true"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T14:35:52.000Z"}],["meta",{"property":"article:author","content":"Mr.Wang"}],["meta",{"property":"article:modified_time","content":"2024-07-03T14:35:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring基础\\",\\"image\\":[\\"https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/22.jpg?raw=true\\",\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225632.png\\"],\\"dateModified\\":\\"2024-07-03T14:35:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Wang\\",\\"url\\":\\"https://javapub.net.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1717568495000,"updatedTime":1720017352000,"contributors":[{"name":"wangshiyu","email":"iswangshiyu@foxmail.com","commits":1}]},"readingTime":{"minutes":6.91,"words":2074},"filePathRelative":"posts/special/1v1/22.Spring_jichu.md","localizedDate":"2024年6月5日","excerpt":"<p><strong>我是 javapub，一名 <code>Markdown</code> 程序员从👨‍💻，八股文种子选手。</strong></p>\\n<p><strong>： 想请你简单介绍一下 Spring 框架,它的核心特性是什么?</strong></p>\\n<p><strong></strong> Spring 是一个开源框架,目的是简化 JavaEE 开发。它的核心特性有:</p>\\n<ol>\\n<li>IoC(Inverse of Control):通过 DI(Dependency Injection)实现将对象间的依赖关系交给 Spring 管理。</li>\\n<li>AOP(Aspect Oriented Programming):面向切面编程,可以在程序运行期间动态的将某段代码切入到指定的方法、指定的位置进行运行。</li>\\n<li>Portlet MVC:Spring 提供 MVC 框架可以快速开发 Web 应用。</li>\\n<li>事务管理:Spring 提供广泛的事务管理接口,支持 JDBC、Hibernate 等事务管理。</li>\\n<li>Spring 统一一体化了其他框架和技术,如:Struts、Hibernate、Quartz 等。\\n面试官(笑):你说的真是五花八门,让我有点晕,来聊点具体的吧。Spring 是如何工作的,它如何用于构建 Web 应用程序?</li>\\n</ol>","autoDesc":true}');export{A as comp,D as data};
