import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as t,b as a,w as n,d as o,e as l,r as s,o as i}from"./app-QJMJclNn.js";const c={},u=t("p",null,"聊聊 JVM 内存模型",-1),d=t("p",null,[t("strong",null,[o("我是 javapub，一名 "),t("code",null,"Markdown"),o(" 程序员从👨‍💻，八股文种子选手。")])],-1),g=l('<ol><li>程序计数器</li></ol><p>程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。每个线程都有一个独立的程序计数器，它的作用是记录当前线程执行的位置，以便在发生线程切换时恢复执行位置。</p><ol start="2"><li>Java虚拟机栈</li></ol><p>Java虚拟机栈是线程私有的，它的生命周期与线程相同。每个方法在执行的同时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息。当方法执行完毕后，对应的栈帧会被弹出，局部变量表等信息也会被销毁。</p><ol start="3"><li>本地方法栈</li></ol><p>本地方法栈与Java虚拟机栈类似，不同的是它为本地方法服务。本地方法是指使用其他语言（如C、C++）编写的方法，它们不会像Java方法那样被编译成字节码，而是直接被编译成机器码。本地方法栈的作用是为本地方法提供内存空间。</p><ol start="4"><li>Java堆</li></ol><p>Java堆是Java虚拟机所管理的内存中最大的一块，它是被所有线程共享的一块内存区域。Java堆的作用是存放对象实例，几乎所有的对象实例都在这里分配内存。Java堆是垃圾收集器管理的主要区域，因此也被称为GC堆。</p><ol start="5"><li>方法区</li></ol><p>方法区也是被所有线程共享的一块内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。方法区也被称为永久代，但在JDK8之后，永久代被移除，取而代之的是元空间。</p>',10),J=t("ol",null,[t("li",null,"新生代")],-1),_=t("p",null,"新生代是Java堆中的一部分，它主要用于存放新创建的对象。新生代又分为Eden区、Survivor区1和Survivor区2三个部分。当新创建的对象被分配到Eden区时，如果Eden区没有足够的空间，就会触发一次Minor GC，将Eden区中无用的对象清除掉，并将存活的对象移动到Survivor区1。当Survivor区1也满了时，会将其中的存活对象移动到Survivor区2，同时清空Survivor区1。当Survivor区2也满了时，会将其中的存活对象移动到老年代。",-1),m=t("ol",{start:"2"},[t("li",null,"老年代")],-1),h=t("p",null,"老年代主要用于存放长生命周期的对象，如大对象和长时间存活的对象。当老年代空间不足时，会触发一次Full GC，对整个堆进行垃圾回收。",-1),v=t("ol",{start:"3"},[t("li",null,"永久代（或元空间）")],-1),M=t("p",null,"永久代（或元空间）主要用于存放类信息、常量、静态变量等数据。在JDK8之前，永久代的大小是固定的，当永久代空间不足时，也会触发一次Full GC。在JDK8之后，永久代被移除，取而代之的是元空间，它的大小不再受限于JVM内存大小，而是受限于操作系统的内存大小。",-1),V=t("ol",null,[t("li",null,"对象的创建和销毁")],-1),f=t("p",null,"在Java程序中，对象的创建和销毁是非常频繁的操作。为了提高程序的性能，JVM会对对象的创建和销毁进行优化。例如，JVM会使用对象池技术来重复利用对象，避免频繁地创建和销毁对象。",-1),b=t("ol",{start:"2"},[t("li",null,"垃圾回收")],-1),y=t("p",null,"垃圾回收是JVM内存模型中非常重要的一部分。为了提高垃圾回收的效率，JVM会使用各种垃圾回收算法和垃圾回收器。例如，JVM会使用分代垃圾回收算法来对不同年龄段的对象进行不同的回收策略。",-1),j=t("ol",{start:"3"},[t("li",null,"内存分配")],-1),x=t("p",null,"内存分配是JVM内存模型中非常重要的一部分。为了提高内存分配的效率，JVM会使用各种内存分配算法和内存分配器。例如，JVM会使用TLAB（Thread Local Allocation Buffer）技术来为每个线程分配一块私有的内存缓冲区，避免线程之间的竞争。",-1),w=l('<figure><img src="https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/13.jpg?raw=true" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注<strong>公众号JavaPub</strong>追更！</p><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225632.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>🎁目录合集：</p><p>Gitee：<code>https://gitee.com/rodert/JavaPub</code></p><p>GitHub：<code>https://github.com/Rodert/JavaPub</code></p><p><a href="http://javapub.net.cn" target="_blank" rel="noopener noreferrer">http://javapub.net.cn</a></p>',7);function C(S,T){const e=s("font");return i(),p("div",null,[u,d,t("p",null,[t("strong",null,[a(e,{color:"blue"},{default:n(()=>[o("面试官")]),_:1}),o("： 你好，请问你对JVM内存模型有了解吗？")])]),t("p",null,[t("strong",null,[a(e,{color:"red"},{default:n(()=>[o("候选人：")]),_:1})]),o(" 当然，JVM内存模型是Java程序运行时内存使用的规范，它定义了Java程序中各种变量、对象、线程等在内存中的存储方式和访问方式。")]),t("p",null,[t("strong",null,[a(e,{color:"blue"},{default:n(()=>[o("面试官")]),_:1}),o("： 很好，那你能否简单介绍一下JVM内存模型的组成部分？")])]),t("p",null,[t("strong",null,[a(e,{color:"red"},{default:n(()=>[o("候选人：")]),_:1})]),o(" 当然，JVM内存模型主要由以下几个部分组成：")]),g,t("p",null,[t("strong",null,[a(e,{color:"blue"},{default:n(()=>[o("面试官")]),_:1}),o("： 非常好，那你能否简单介绍一下Java堆的内存结构？")])]),t("p",null,[t("strong",null,[a(e,{color:"red"},{default:n(()=>[o("候选人：")]),_:1})]),o(" 当然，Java堆的内存结构主要由三个部分组成：新生代、老年代和永久代（或元空间）。")]),J,_,m,h,v,M,t("p",null,[t("strong",null,[a(e,{color:"blue"},{default:n(()=>[o("面试官")]),_:1}),o("： 非常好，你对JVM内存模型的了解非常深入。最后一个问题，你能否简单介绍一下JVM内存模型的优化策略？")])]),t("p",null,[t("strong",null,[a(e,{color:"red"},{default:n(()=>[o("候选人：")]),_:1})]),o(" 当然，JVM内存模型的优化策略主要有以下几个方面：")]),V,f,b,y,j,x,t("p",null,[t("strong",null,[a(e,{color:"blue"},{default:n(()=>[o("面试官")]),_:1}),o("： 非常好，你对JVM内存模型的了解非常深入，非常感谢你的分享。")])]),t("p",null,[t("strong",null,[a(e,{color:"red"},{default:n(()=>[o("候选人：")]),_:1})]),o(" 谢谢您的提问，我很荣幸能够参加这次面试。")]),w])}const N=r(c,[["render",C],["__file","13.JVM_neicunmoxing.html.vue"]]),G=JSON.parse('{"path":"/posts/special/1v1/13.JVM_neicunmoxing.html","title":"JVM内存模型","lang":"zh-CN","frontmatter":{"title":"JVM内存模型","icon":"laptop-code","category":["《面试1v1》"],"description":"聊聊 JVM 内存模型 我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。 ： 你好，请问你对JVM内存模型有了解吗？ 当然，JVM内存模型是Java程序运行时内存使用的规范，它定义了Java程序中各种变量、对象、线程等在内存中的存储方式和访问方式。 ： 很好，那你能否简单介绍一下JVM内存模型的组成部分？ 当然，JVM...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/posts/special/1v1/13.JVM_neicunmoxing.html"}],["meta",{"property":"og:site_name","content":"JavaPub"}],["meta",{"property":"og:title","content":"JVM内存模型"}],["meta",{"property":"og:description","content":"聊聊 JVM 内存模型 我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。 ： 你好，请问你对JVM内存模型有了解吗？ 当然，JVM内存模型是Java程序运行时内存使用的规范，它定义了Java程序中各种变量、对象、线程等在内存中的存储方式和访问方式。 ： 很好，那你能否简单介绍一下JVM内存模型的组成部分？ 当然，JVM..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/13.jpg?raw=true"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T14:35:52.000Z"}],["meta",{"property":"article:author","content":"Mr.Wang"}],["meta",{"property":"article:modified_time","content":"2024-07-03T14:35:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM内存模型\\",\\"image\\":[\\"https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/13.jpg?raw=true\\",\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225632.png\\"],\\"dateModified\\":\\"2024-07-03T14:35:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Wang\\",\\"url\\":\\"https://javapub.net.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1717568495000,"updatedTime":1720017352000,"contributors":[{"name":"wangshiyu","email":"iswangshiyu@foxmail.com","commits":1}]},"readingTime":{"minutes":5.09,"words":1527},"filePathRelative":"posts/special/1v1/13.JVM_neicunmoxing.md","localizedDate":"2024年6月5日","excerpt":"<p>聊聊 JVM 内存模型</p>\\n<p><strong>我是 javapub，一名 <code>Markdown</code> 程序员从👨‍💻，八股文种子选手。</strong></p>\\n<p><strong>： 你好，请问你对JVM内存模型有了解吗？</strong></p>\\n<p><strong></strong> 当然，JVM内存模型是Java程序运行时内存使用的规范，它定义了Java程序中各种变量、对象、线程等在内存中的存储方式和访问方式。</p>\\n<p><strong>： 很好，那你能否简单介绍一下JVM内存模型的组成部分？</strong></p>\\n<p><strong></strong> 当然，JVM内存模型主要由以下几个部分组成：</p>","autoDesc":true}');export{N as comp,G as data};
