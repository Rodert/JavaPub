import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as i,b as t,w as l,d as s,e as n,r as p,o as r}from"./app-k4_JlnG1.js";const k={},d=i("p",null,[i("strong",null,[s("我是 javapub，一名 "),i("code",null,"Markdown"),s(" 程序员从👨‍💻，八股文种子选手。")])],-1),o=i("ol",null,[i("li",null,"根据 XML 或注解的配置文件得到映射语句(也就是 SQL)。"),i("li",null,"把要调用的映射语句的参数传入并解析出 statement 中对应的占位符。"),i("li",null,"执行映射语句并得到结果。"),i("li",null,"把结果映射为 Java 对象并返回。")],-1),g=i("p",null,"整个过程中最关键的部份是映射文件及映射过程。只有把 SQL 的执行结果映射成 Java 对象,才能达到 ORM 的目的。",-1),c=i("ol",null,[i("li",null,"SqlSessionFactoryBuilder:用于创建 SqlSessionFactory,gue有 XML 或注解来配置。"),i("li",null,"SqlSessionFactory:SqlSession 的工厂,用于创建 SqlSession。"),i("li",null,"SqlSession:用于执行映射语句并commit、rollback 事务。"),i("li",null,"Mapper 接口:用于定义映射语句(也就是 SQL),下面会详细解释。"),i("li",null,"映射文件:包含了映射语句,可以是 XML 或注解。")],-1),u=n(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> UserMapper</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    User</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> selectUser</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在映射文件中:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">select</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;selectUser&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> resultType</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;User&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  select * from user where id = #{id}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后我们可以直接调用:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> session</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getMapper</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">UserMapper</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">selectUser</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样直接调用 Mapper 接口的方法就可以执行对应的 SQL 了,很方便。</p>`,6),B=n(`<ul><li>if/else 分支</li><li>动态选择部分内容</li><li>提取重复代码块</li></ul><p>举个例子:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">select</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;findActiveBlogWithTitleLike&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">     resultType</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Blog&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  SELECT * FROM BLOG </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  WHERE state = &#39;ACTIVE&#39; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;title != null&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    AND title like #{title}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里通过 <code>&lt;if&gt;</code> 标签实现了动态条件查询。只有在方法调用时传入了 title 参数,SQL 语句才会添加 title 的条件判断。 这样的动态 SQL 使得数据库交互更加灵活,不需要在程序中进行大量的字符串拼接。</p>`,4),y=n(`<ol><li>MyBatis 包含一级缓存和二级缓存。</li></ol><ul><li>一级缓存是 SqlSession 级别的缓</li><li>一级缓存是 SqlSession 级别的缓存,在同一个 SqlSession 中多次调用同一个 Mapper 的方法,MyBatis 会直接从缓存中获取数据。</li><li>二级缓存是 Mapper 级别的缓存,多个 SqlSession 去调用同一个 Mapper 的方法,MyBatis 会先去二级缓存中查找是否有数据,有的话直接返回,没有的话再查询数据库。</li></ul><ol start="2"><li>MyBatis 的插件机制也很强大。我们可以通过实现 Interceptor 接口来编写插件,用于执行一些增强操作,比如:</li></ol><ul><li>分页助手:通过拦截执行的 SQL 语句实现物理分页</li><li>监控日志:监控 SQL 执行时间过长等</li><li>读写分离:根据方法的注解实现读写分离 举个简单例子:</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> MyFirstPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Interceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> intercept</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Invocation</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> invocation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Throwable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 调用方法之前</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> invocation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">proceed</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 调用方法之后</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在配置文件中进行配置:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">plugin</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> interceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;org.mybatis.example.MyFirstPlugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;someProperty&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;100&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就可以启动对所有 SQL 执行的拦截了。</p>`,8),m=n('<figure><img src="https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/26.jpg?raw=true" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注<strong>公众号JavaPub</strong>追更！</p><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225632.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>🎁目录合集：</p><p>Gitee：<code>https://gitee.com/rodert/JavaPub</code></p><p>GitHub：<code>https://github.com/Rodert/JavaPub</code></p><p><a href="http://javapub.net.cn" target="_blank" rel="noopener noreferrer">http://javapub.net.cn</a></p>',7);function v(b,E){const a=p("font");return r(),h("div",null,[d,i("p",null,[i("strong",null,[t(a,{color:"blue"},{default:l(()=>[s("面试官")]),_:1}),s("： 恭喜你进到面试的最后一个环节!你对 MyBatis 比较熟悉吗?")])]),i("p",null,[i("strong",null,[t(a,{color:"red"},{default:l(()=>[s("候选人：")]),_:1})]),s(" 谢谢面试官!MyBatis 是我最喜欢且熟练使用的持久层框架之一。")]),i("p",null,[i("strong",null,[t(a,{color:"blue"},{default:l(()=>[s("面试官")]),_:1}),s("： 那很好,我们从基础开始问吧。什么是 MyBatis?")])]),i("p",null,[i("strong",null,[t(a,{color:"red"},{default:l(()=>[s("候选人：")]),_:1})]),s(" MyBatis 是一款优秀的持久层框架,它内部封装了 JDBC,使开发者只需要关注 SQL 语句本身,而不需要花费精力去处理加载驱动、创建连接、创建 statement 等繁杂的过程。")]),i("p",null,[i("strong",null,[t(a,{color:"blue"},{default:l(()=>[s("面试官")]),_:1}),s("： MyBatis 的工作原理能说一下吗?")])]),i("p",null,[i("strong",null,[t(a,{color:"red"},{default:l(()=>[s("候选人：")]),_:1})]),s(" MyBatis 的工作原理如下:")]),o,g,i("p",null,[i("strong",null,[t(a,{color:"blue"},{default:l(()=>[s("面试官")]),_:1}),s("： 那它的核心组件有哪些?")])]),i("p",null,[i("strong",null,[t(a,{color:"red"},{default:l(()=>[s("候选人：")]),_:1})]),s(" MyBatis 的核心组件主要有:")]),c,i("p",null,[i("strong",null,[t(a,{color:"blue"},{default:l(()=>[s("面试官")]),_:1}),s("： 既然你提到了 Mapper 接口,那它是什么?")])]),i("p",null,[i("strong",null,[t(a,{color:"red"},{default:l(()=>[s("候选人：")]),_:1})]),s(" Mapper 接口是 MyBatis 中非常重要的一个组件。它是由开发人员创建的接口,其中的方法直接对应映射文件中的 SQL 语句。 举个例子:")]),u,i("p",null,[i("strong",null,[t(a,{color:"blue"},{default:l(()=>[s("面试官")]),_:1}),s("： 动态 SQL 又是什么?")])]),i("p",null,[i("strong",null,[t(a,{color:"red"},{default:l(()=>[s("候选人：")]),_:1})]),s(" MyBatis 的动态 SQL 是非常强大的一个功能。它允许开发人员在 XML 映射文件中直接插入一些逻辑,如:")]),B,i("p",null,[i("strong",null,[t(a,{color:"blue"},{default:l(()=>[s("面试官")]),_:1}),s("： 最后两个问题,MyBatis 的缓存机制和插件机制能说一下吗?")])]),i("p",null,[i("strong",null,[t(a,{color:"red"},{default:l(()=>[s("候选人：")]),_:1})])]),y,i("p",null,[i("strong",null,[t(a,{color:"blue"},{default:l(()=>[s("面试官")]),_:1}),s("： MyBatis 的内容我们就先讲到这里,你对它的理解很深入,加油!期待你加入我们团队!")])]),i("p",null,[i("strong",null,[t(a,{color:"red"},{default:l(()=>[s("候选人：")]),_:1})]),s(" 非常感谢面试官的赏识!我会继续努力学习,不断提高自己。也很期待加入贵团队一起成长!")]),m])}const f=e(k,[["render",v],["__file","26.MyBatis.html.vue"]]),C=JSON.parse('{"path":"/posts/special/1v1/26.MyBatis.html","title":"MyBatis","lang":"zh-CN","frontmatter":{"title":"MyBatis","icon":"laptop-code","category":["《面试1v1》"],"description":"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。 ： 恭喜你进到面试的最后一个环节!你对 MyBatis 比较熟悉吗? 谢谢面试官!MyBatis 是我最喜欢且熟练使用的持久层框架之一。 ： 那很好,我们从基础开始问吧。什么是 MyBatis? MyBatis 是一款优秀的持久层框架,它内部封装了 JDBC,使开发者只...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/JavaPub/posts/special/1v1/26.MyBatis.html"}],["meta",{"property":"og:site_name","content":"JavaPub"}],["meta",{"property":"og:title","content":"MyBatis"}],["meta",{"property":"og:description","content":"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。 ： 恭喜你进到面试的最后一个环节!你对 MyBatis 比较熟悉吗? 谢谢面试官!MyBatis 是我最喜欢且熟练使用的持久层框架之一。 ： 那很好,我们从基础开始问吧。什么是 MyBatis? MyBatis 是一款优秀的持久层框架,它内部封装了 JDBC,使开发者只..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/26.jpg?raw=true"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T14:35:52.000Z"}],["meta",{"property":"article:author","content":"Mr.Wang"}],["meta",{"property":"article:modified_time","content":"2024-07-03T14:35:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MyBatis\\",\\"image\\":[\\"https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/26.jpg?raw=true\\",\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225632.png\\"],\\"dateModified\\":\\"2024-07-03T14:35:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Wang\\",\\"url\\":\\"https://javapub.net.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1717568495000,"updatedTime":1720017352000,"contributors":[{"name":"wangshiyu","email":"iswangshiyu@foxmail.com","commits":1}]},"readingTime":{"minutes":4.25,"words":1274},"filePathRelative":"posts/special/1v1/26.MyBatis.md","localizedDate":"2024年6月5日","excerpt":"<p><strong>我是 javapub，一名 <code>Markdown</code> 程序员从👨‍💻，八股文种子选手。</strong></p>\\n<p><strong>： 恭喜你进到面试的最后一个环节!你对 MyBatis 比较熟悉吗?</strong></p>\\n<p><strong></strong> 谢谢面试官!MyBatis 是我最喜欢且熟练使用的持久层框架之一。</p>\\n<p><strong>： 那很好,我们从基础开始问吧。什么是 MyBatis?</strong></p>\\n<p><strong></strong> MyBatis 是一款优秀的持久层框架,它内部封装了 JDBC,使开发者只需要关注 SQL 语句本身,而不需要花费精力去处理加载驱动、创建连接、创建 statement 等繁杂的过程。</p>","autoDesc":true}');export{f as comp,C as data};
