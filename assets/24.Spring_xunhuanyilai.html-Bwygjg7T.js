import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as n,b as e,w as s,d as i,e as t,r as o,o as p}from"./app-DljixAt5.js";const h={},c=n("p",null,[n("strong",null,[i("我是 javapub，一名 "),n("code",null,"Markdown"),i(" 程序员从👨‍💻，八股文种子选手。")])],-1),d=n("ol",null,[n("li",null,"构造器循环依赖:BeanA 的构造器注入 BeanB,BeanB 的构造器又注入 BeanA。"),n("li",null,"Setter 循环依赖:BeanA 在 setter 方法中注入 BeanB,BeanB 的 setter 方法又注入 BeanA。"),n("li",null,"代理循环依赖:BeanA 依赖 BeanB 的代理对象,BeanB 依赖 BeanA 的代理对象。")],-1),g=t(`<ol><li>对代理循环依赖,Spring 会首先创建目标对象,然后再创建代理对象。</li><li>对 Setter 循环依赖,Spring 会在对象创建完成后,提前将对象注入到 BeanFactory 中。然后在注入依赖时,直接从 BeanFactory 中获取已经提前实例化的对象。</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//AbstractAutowireCapableBeanFactory#doCreateBean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     // Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> bean </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> resolveBeforeInstantiation</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(beanName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> mbd)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> (bean </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> bean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // Allow post-processors to modify the merged bean definition.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    bean </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> applyBeanPostProcessorsAfterInstantiation</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(bean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> beanName)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>对构造器循环依赖,Spring 在实例化对象后,会提前暴露一个 ObjectFactory,再从 ObjectFactory 中获取目标对象完成依赖注入。</li></ol>`,3),u=n("ol",null,[n("li",null,"破坏 Bean 的单例性。因为循环依赖导致一个 Bean 被实例化多次,破坏了 Spring 容器中 Bean 的唯一性。"),n("li",null,"容器无法正常结束注入过程。循环依赖会导致 Bean 无法完全实例化,一直在循环注入过程中,无法结束。"),n("li",null,"降低程序的可读性和维护性。循环依赖关系使得程序难以理解,也难以维护。")],-1),k=n("ol",null,[n("li",null,"编程方式避免。在 Bean 中提供 set 方法,但不在构造器中注入依赖。这样只有在 Bean 完全实例化后,才会注入依赖对象。"),n("li",null,"构造器注入避免。只使用构造器注入,不用 Setter 方法注入。因为构造器是在 Bean 实例化阶段完成的,避免了循环依赖。"),n("li",null,"避免过于提前暴露 Bean。如果一个 Bean 不需要频繁使用,不要将其设置为 Singleton,推迟其实例化时间。"),n("li",null,"分模块避免。将循环依赖的 Bean 拆分到不同的模块中,模块间采用接口隔离,避免循环依赖。"),n("li",null,"采用重构手段。如果上述方式都不可行,那么需要通过重构来避免循环依赖。比如拆分过于庞大的 Bean 为多个小 Bean 等。")],-1),B=t('<figure><img src="https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/24.jpg?raw=true" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注<strong>公众号JavaPub</strong>追更！</p><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225632.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>🎁目录合集：</p><p>Gitee：<code>https://gitee.com/rodert/JavaPub</code></p><p>GitHub：<code>https://github.com/Rodert/JavaPub</code></p><p><a href="http://javapub.net.cn" target="_blank" rel="noopener noreferrer">http://javapub.net.cn</a></p>',7);function m(y,b){const a=o("font");return p(),r("div",null,[c,n("p",null,[n("strong",null,[e(a,{color:"blue"},{default:s(()=>[i("面试官")]),_:1}),i("： 小伙子,听说你对 Spring 循环依赖比较熟悉,是真的吗?")])]),n("p",null,[n("strong",null,[e(a,{color:"red"},{default:s(()=>[i("候选人：")]),_:1})]),i(" 王哥,不敢说很熟悉,但有一定了解,请王哥考考我。")]),n("p",null,[n("strong",null,[e(a,{color:"blue"},{default:s(()=>[i("面试官")]),_:1}),i("： 那好,首先简单说一下,什么是 Spring 循环依赖?")])]),n("p",null,[n("strong",null,[e(a,{color:"red"},{default:s(()=>[i("候选人：")]),_:1})]),i(" Spring 循环依赖指的是 BeanA 依赖 BeanB,而 BeanB 也直接或间接依赖 BeanA,两者之间形成依赖循环。这会导致 Bean 无法正常实例化。")]),n("p",null,[n("strong",null,[e(a,{color:"blue"},{default:s(()=>[i("面试官")]),_:1}),i("： circular dependencies,确实是这样。Spring Bean 的循环依赖有哪些场景?")])]),n("p",null,[n("strong",null,[e(a,{color:"red"},{default:s(()=>[i("候选人：")]),_:1})]),i(" 主要有三种场景:")]),d,n("p",null,[n("strong",null,[e(a,{color:"blue"},{default:s(()=>[i("面试官")]),_:1}),i("： 那 Spring 是如何解决循环依赖问题的呢?")])]),n("p",null,[n("strong",null,[e(a,{color:"red"},{default:s(()=>[i("候选人：")]),_:1})]),i(" Spring 采用提前暴露对象的方式解决循环依赖,主要通过 AOP 功能和 SmartInstantiationAwareBeanPostProcessor#postProcessAfterInstantiation 方法实现。")]),g,n("p",null,[n("strong",null,[e(a,{color:"blue"},{default:s(()=>[i("面试官")]),_:1}),i("： 那么,Spring 循环依赖会带来什么问题?")])]),n("p",null,[n("strong",null,[e(a,{color:"red"},{default:s(()=>[i("候选人：")]),_:1})]),i(" Spring 循环依赖主要会带来以下问题:")]),u,n("p",null,[n("strong",null,[e(a,{color:"blue"},{default:s(()=>[i("面试官")]),_:1}),i("： 那么,如何避免 Spring 循环依赖呢?")])]),n("p",null,[n("strong",null,[e(a,{color:"red"},{default:s(()=>[i("候选人：")]),_:1})]),i(" 主要有以下几种方式可以避免 Spring 循环依赖:")]),k,n("p",null,[n("strong",null,[e(a,{color:"blue"},{default:s(()=>[i("面试官")]),_:1}),i("： 不错,总结得很全面。看来你对 Spring 循环依赖还是比较清晰的,加油!")])]),n("p",null,[n("strong",null,[e(a,{color:"red"},{default:s(()=>[i("候选人：")]),_:1})]),i(" 谢谢 王哥 的提问,让我对 Spring 循环依赖有了更深入的认识。我会继续努力学习的!")]),B])}const _=l(h,[["render",m],["__file","24.Spring_xunhuanyilai.html.vue"]]),S=JSON.parse('{"path":"/posts/special/1v1/24.Spring_xunhuanyilai.html","title":"Spring循环依赖","lang":"zh-CN","frontmatter":{"title":"Spring循环依赖","icon":"laptop-code","category":["《面试1v1》"],"description":"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。 ： 小伙子,听说你对 Spring 循环依赖比较熟悉,是真的吗? 王哥,不敢说很熟悉,但有一定了解,请王哥考考我。 ： 那好,首先简单说一下,什么是 Spring 循环依赖? Spring 循环依赖指的是 BeanA 依赖 BeanB,而 BeanB 也直接或间接依赖 ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/posts/special/1v1/24.Spring_xunhuanyilai.html"}],["meta",{"property":"og:site_name","content":"JavaPub"}],["meta",{"property":"og:title","content":"Spring循环依赖"}],["meta",{"property":"og:description","content":"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。 ： 小伙子,听说你对 Spring 循环依赖比较熟悉,是真的吗? 王哥,不敢说很熟悉,但有一定了解,请王哥考考我。 ： 那好,首先简单说一下,什么是 Spring 循环依赖? Spring 循环依赖指的是 BeanA 依赖 BeanB,而 BeanB 也直接或间接依赖 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/24.jpg?raw=true"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T14:35:52.000Z"}],["meta",{"property":"article:author","content":"Mr.Wang"}],["meta",{"property":"article:modified_time","content":"2024-07-03T14:35:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring循环依赖\\",\\"image\\":[\\"https://ghproxy.com/https://raw.githubusercontent.com/Rodert/javapub_oss/main/other/24.jpg?raw=true\\",\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225632.png\\"],\\"dateModified\\":\\"2024-07-03T14:35:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Wang\\",\\"url\\":\\"https://javapub.net.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1717568495000,"updatedTime":1720017352000,"contributors":[{"name":"wangshiyu","email":"iswangshiyu@foxmail.com","commits":1}]},"readingTime":{"minutes":3.59,"words":1077},"filePathRelative":"posts/special/1v1/24.Spring_xunhuanyilai.md","localizedDate":"2024年6月5日","excerpt":"<p><strong>我是 javapub，一名 <code>Markdown</code> 程序员从👨‍💻，八股文种子选手。</strong></p>\\n<p><strong>： 小伙子,听说你对 Spring 循环依赖比较熟悉,是真的吗?</strong></p>\\n<p><strong></strong> 王哥,不敢说很熟悉,但有一定了解,请王哥考考我。</p>\\n<p><strong>： 那好,首先简单说一下,什么是 Spring 循环依赖?</strong></p>\\n<p><strong></strong> Spring 循环依赖指的是 BeanA 依赖 BeanB,而 BeanB 也直接或间接依赖 BeanA,两者之间形成依赖循环。这会导致 Bean 无法正常实例化。</p>","autoDesc":true}');export{_ as comp,S as data};
