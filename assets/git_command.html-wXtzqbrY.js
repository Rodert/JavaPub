import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as h,e as a,a as i,d as s}from"./app-BkIroIza.js";const n={},l=a(`<p>持续更新git命令集</p><p>以下案例是在生产环境中最常使用的git组合命令集。</p><p>[toc]</p><h2 id="案例1" tabindex="-1"><a class="header-anchor" href="#案例1"><span>案例1</span></a></h2><p>最常使用命令集，拉取新分支 - 写代码 - 提交代码 - 合并到主分支</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> feature/new-branch</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> #拉取新分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> #提交代码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;第一次提交&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> push</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> develop</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> #切换分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> merge</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> feature/new-branch</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> #合并分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">以上是我们最最常使用的git命令</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="案例2-git-stash" tabindex="-1"><a class="header-anchor" href="#案例2-git-stash"><span>案例2（git stash）</span></a></h2><p>场景：一大早领导甲某分配给p哥一个需求，要求下班前完成，小李马不停蹄，拉取新分支 command+C/V 哼哧哼哧搞了起来。下午1:30pm，甲某：p哥，现场有个紧急需求，你快点处理一下，一小时后上线。</p><p>对于这种情况，p哥不想开新分支，又不想把没开发完的代码提交远程仓库，他是这样做的。做法：将工作区内容 <code>stash</code> 暂存起来，在当前分支进行紧急需求开发提交，再将工作区的内容取出来，恢复到暂存时的状态。</p><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F15%2F20240615-091849.png" alt="stash翻译" tabindex="0" loading="lazy"><figcaption>stash翻译</figcaption></figure><p>恢复暂存时的状态有俩种命令：</p><ol><li>git stash pop</li><li>git stash apply</li></ol><p>俩种都可以，区别是什么呢？</p><p>使用 git stash 命令之后会在stash列表中生成一个对应的信息，使用 apply 命令恢复，stash 列表中的信息是会继续保留的，而使用 pop 命令进行恢复，会将 stash列表中的信息进行删除。</p><p><strong>例子：</strong></p><ul><li>初始状态index.html文件在工作区进行修改：可以使用命令git status 和git diff看到此时的修改信息</li></ul><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F15%2F20240615-091851.png" alt="gitstatus" tabindex="0" loading="lazy"><figcaption>gitstatus</figcaption></figure><p>这个时候还没有修改完，不想提交，但是要去修复bug。</p><ul><li>将index文件的内容 stash 起来，使用命令：git stash，如下图：使用 git stash 命令后，再使用 git status 或者 git diff 查看可以发现，对工作区的修改内容已经没有了，这个时候进行bug修复提交</li></ul><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F15%2F20240615-091855.png" alt="gitstash" tabindex="0" loading="lazy"><figcaption>gitstash</figcaption></figure><ul><li>bug修复提交后，恢复之前暂存的状态，这个时候有两种命令可选，我们选择：git stash pop 命令</li></ul><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F15%2F20240615-091857.png" alt="gitstashpop" tabindex="0" loading="lazy"><figcaption>gitstashpop</figcaption></figure><ul><li>并使用 git status 和 git diff 可以发现，此时工作区 index文件的内容跟我们暂存前是一样的。</li></ul><p>常用git stash命令：</p><p>（1）<strong>git stash</strong> save &quot;save message&quot; : 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。</p><p>（2）<strong>git stash list</strong> ：查看stash了哪些存储</p>`,27),p=i("p",{1:""},[s("（3）"),i("strong",null,"git stash show"),s(" ：显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@")],-1),k=i("p",null,[s("（4）"),i("strong",null,"git stash show -p"),s(" : 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show stash@{$num} -p ，比如第二个：git stash show stash@{1} -p "),i("code",null,"待确定？？？")],-1),r=i("p",{1:""},[s("（5）"),i("strong",null,"git stash apply"),s(" :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@")],-1),d=i("p",{1:""},[s("（6）"),i("strong",null,"git stash pop"),s(" ：命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@")],-1),g=a(`<p>（7）<strong>git stash drop</strong> stash@{$num} ：丢弃stash@{$num}存储，从列表中删除这个存储</p><p>（8）<strong>git stash clear</strong> ：删除所有缓存的stash</p><hr><hr><h2 id="案例3-git-cherry-pick" tabindex="-1"><a class="header-anchor" href="#案例3-git-cherry-pick"><span>案例3（git cherry-pick）</span></a></h2><p><code>gi cherry-pick</code> 可以理解为“挑拣”提交，我们经常遇到代码从一个分支迁移到另一个分支的需求。</p><p>如果是所有代码，直接 <code>git merge</code> ，另一种情况，只需要合并一次或几次提交。（比如，我们拿到需求后，一通狂写git push，最后发现提交到了测试分支，如果不使用这个命令，那只能一点一点往新分支迁移，这里的心酸😔，谁干 谁知道。）这时，ta来了 <code>git cherry-pick</code></p><ul><li><strong>基本用法</strong></li></ul><p><code>git cherry-pick</code>命令的作用，就是将指定的提交（commit）应用于其他分支。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> cherry-pick</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">commitHas</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面命令就会将指定的提交<code>commitHash</code>，应用于当前分支。这会在当前分支产生一个新的提交，当然它们的哈希值会不一样。</p><p>举例来说，代码仓库有<code>master</code>和<code>feature</code>两个分支。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    a</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> b</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> c</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   Master</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">         \\</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">           e</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> g</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Feature</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在将提交<code>f</code>应用到<code>master</code>分支。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 切换到 master 分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> master</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Cherry pick 操作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> cherry-pick</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> f</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的操作完成以后，代码库就变成了下面的样子。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    a</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> b</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> c</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   Master</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">         \\</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">           e</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> g</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Feature</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面可以看到，<code>master</code>分支的末尾增加了一个提交<code>f</code>。</p><p><code>git cherry-pick</code>命令的参数，不一定是提交的哈希值，分支名也是可以的，表示转移该分支的最新提交。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> cherry-pick</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> feature</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面代码表示将<code>feature</code>分支的最近一次提交，转移到当前分支。</p><ul><li><strong>转移多个提交</strong></li></ul><p>Cherry pick 支持一次转移多个提交。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> cherry-pick</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">Hash</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">A</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">Hash</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">B</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面的命令将 A 和 B 两个提交应用到当前分支。这会在当前分支生成两个对应的新提交。</p><p>如果想要转移一系列的连续提交，可以使用下面的简便语法。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> cherry-pick</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> A..B</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面的命令可以转移从 A 到 B 的所有提交。它们必须按照正确的顺序放置：提交 A 必须早于提交 B，否则命令将失败，但不会报错。</p><p>注意，使用上面的命令，提交 A 将不会包含在 Cherry pick 中。如果要包含提交 A，可以使用下面的语法。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> cherry-pick</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> A^..B</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>JavaPub说：git cherry-pick 是非常重要且非常实用的一个命令，但是也有很多要点，下篇单独写一篇图解。</code></p><p>参考：</p><p>https://blog.csdn.net/FightFightFight/article/details/81039050</p><p>http://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html</p><hr><hr><h2 id="案例4-git-reset" tabindex="-1"><a class="header-anchor" href="#案例4-git-reset"><span>案例4（git reset）</span></a></h2><p>写完代码后，我们一般这样</p><blockquote><p>git add . //添加所有文件</p></blockquote><blockquote><p>git commit -m &quot;本功能全部完成&quot;</p></blockquote><p>执行完commit后，想撤回commit，怎么办？</p><p>这样：</p><blockquote><p>git reset --soft HEAD^</p></blockquote><p>这样就成功的撤销了你的 commit</p><p>注意，仅仅是撤回 commit 操作，您写的代码仍然保留。</p><p><code>HEAD^</code>的意思是上一个版本，也可以写成 <code>HEAD~1</code></p><p>如果你进行了2次 commit，想都撤回，可以使用 <code>HEAD~2</code></p><p><strong>几个参数：</strong></p><blockquote><p>--mixed</p></blockquote><p>意思是：不删除工作空间改动代码，撤销 commit，并且撤销 <code>git add .</code> 操作 这个为默认参数，<code>git reset --mixed HEAD^</code> 和 <code>git reset HEAD^</code> 效果是一样的。</p><blockquote><p>--soft</p></blockquote><p>不删除工作空间改动代码，撤销 commit，不撤销 <code>git add . </code></p><blockquote><p>--hard</p></blockquote><p>删除工作空间改动代码，撤销 commit，撤销 <code>git add . </code></p><p>注意完成这个操作后，就恢复到了上一次的 commit 状态。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">顺便说一下，如果</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 注释写错了，只是想改一下注释，只需要：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --amend</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">此时会进入默认</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> vim编辑器，修改注释完毕后保存就好了。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><hr><h2 id="案例5-git-fetch" tabindex="-1"><a class="header-anchor" href="#案例5-git-fetch"><span>案例5（git fetch）</span></a></h2><p>提到 <code>git fetch</code> 主要已通过和 <code>git pull</code> 来做区别。</p><p>一图顶千文</p><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F15%2F20240615-091903.png" alt="git流程图" tabindex="0" loading="lazy"><figcaption>git流程图</figcaption></figure><p>简单来说：git pull = git fetch + git merge</p><hr><hr><p>参考：</p><p>https://blog.csdn.net/yao_94/article/details/88929992</p><p>https://www.cnblogs.com/zndxall/archive/2018/09/04/9586088.html</p><p>https://blog.csdn.net/FightFightFight/article/details/81039050</p><p>http://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html</p>`,70),c=[l,p,k,r,d,g];function o(m,u){return h(),e("div",null,c)}const F=t(n,[["render",o],["__file","git_command.html.vue"]]),v=JSON.parse(`{"path":"/posts/programming_standard/git/git_command.html","title":"企业生产环境中最常使用的git组合命令集","lang":"zh-CN","frontmatter":{"title":"企业生产环境中最常使用的git组合命令集","icon":"lightbulb","description":"持续更新git命令集 以下案例是在生产环境中最常使用的git组合命令集。 [toc] 案例1 最常使用命令集，拉取新分支 - 写代码 - 提交代码 - 合并到主分支 案例2（git stash） 场景：一大早领导甲某分配给p哥一个需求，要求下班前完成，小李马不停蹄，拉取新分支 command+C/V 哼哧哼哧搞了起来。下午1:30pm，甲某：p哥，现场...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/posts/programming_standard/git/git_command.html"}],["meta",{"property":"og:site_name","content":"JavaPub"}],["meta",{"property":"og:title","content":"企业生产环境中最常使用的git组合命令集"}],["meta",{"property":"og:description","content":"持续更新git命令集 以下案例是在生产环境中最常使用的git组合命令集。 [toc] 案例1 最常使用命令集，拉取新分支 - 写代码 - 提交代码 - 合并到主分支 案例2（git stash） 场景：一大早领导甲某分配给p哥一个需求，要求下班前完成，小李马不停蹄，拉取新分支 command+C/V 哼哧哼哧搞了起来。下午1:30pm，甲某：p哥，现场..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F15%2F20240615-091849.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T14:35:52.000Z"}],["meta",{"property":"article:author","content":"Mr.Wang"}],["meta",{"property":"article:modified_time","content":"2024-07-03T14:35:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"企业生产环境中最常使用的git组合命令集\\",\\"image\\":[\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F15%2F20240615-091849.png\\",\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F15%2F20240615-091851.png\\",\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F15%2F20240615-091855.png\\",\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F15%2F20240615-091857.png\\",\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F15%2F20240615-091903.png\\"],\\"dateModified\\":\\"2024-07-03T14:35:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Wang\\",\\"url\\":\\"https://javapub.net.cn\\"}]}"]]},"headers":[{"level":2,"title":"案例1","slug":"案例1","link":"#案例1","children":[]},{"level":2,"title":"案例2（git stash）","slug":"案例2-git-stash","link":"#案例2-git-stash","children":[]},{"level":2,"title":"案例3（git cherry-pick）","slug":"案例3-git-cherry-pick","link":"#案例3-git-cherry-pick","children":[]},{"level":2,"title":"案例4（git reset）","slug":"案例4-git-reset","link":"#案例4-git-reset","children":[]},{"level":2,"title":"案例5（git fetch）","slug":"案例5-git-fetch","link":"#案例5-git-fetch","children":[]}],"git":{"createdTime":1718348642000,"updatedTime":1720017352000,"contributors":[{"name":"wangshiyu","email":"iswangshiyu@foxmail.com","commits":1}]},"readingTime":{"minutes":6.47,"words":1940},"filePathRelative":"posts/programming_standard/git/git_command.md","localizedDate":"2024年6月14日","excerpt":"<p>持续更新git命令集</p>\\n<p>以下案例是在生产环境中最常使用的git组合命令集。</p>\\n<p>[toc]</p>\\n<h2>案例1</h2>\\n<p>最常使用命令集，拉取新分支 - 写代码 - 提交代码 - 合并到主分支</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">git</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> checkout</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\"> -b</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> feature/new-branch</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"> #拉取新分支</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">git</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> add</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> .</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"> #提交代码</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">git</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> commit</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\"> -m</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> '第一次提交'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">git</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> push</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">git</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> checkout</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> develop</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"> #切换分支</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">git</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> merge</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> feature/new-branch</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"> #合并分支</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">以上是我们最最常使用的git命令</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{F as comp,v as data};
