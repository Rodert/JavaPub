import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as e,e as r}from"./app-CMXhIuLa.js";const l={},o=r('<h1 id="raft-共识算法" tabindex="-1"><a class="header-anchor" href="#raft-共识算法"><span>Raft 共识算法</span></a></h1><h2 id="什么是-raft" tabindex="-1"><a class="header-anchor" href="#什么是-raft"><span>什么是 Raft？</span></a></h2><p>Raft 是一种为了管理复制日志的共识算法，由 Diego Ongaro 和 John Ousterhout 在 2013 年设计。它的主要目标是提供一个更容易理解的共识算法，同时保持与 Paxos 算法相同的可靠性和性能。</p><p>ETCD、Consul 等知名的分布式系统都采用了 Raft 算法作为其共识机制。</p><h2 id="raft-的核心概念" tabindex="-1"><a class="header-anchor" href="#raft-的核心概念"><span>Raft 的核心概念</span></a></h2><p>Raft 将共识问题分解为三个相对独立的子问题：</p><ol><li><strong>领导者选举（Leader Election）</strong>：当现有领导者失效时，必须选出一个新的领导者</li><li><strong>日志复制（Log Replication）</strong>：领导者必须从客户端接收日志条目，并将它们复制到集群中的其他服务器</li><li><strong>安全性（Safety）</strong>：如果任何服务器已经应用了一个特定的日志条目到其状态机，那么其他服务器不能在同一个日志索引位置应用不同的命令</li></ol><h2 id="服务器状态" tabindex="-1"><a class="header-anchor" href="#服务器状态"><span>服务器状态</span></a></h2><p>在 Raft 中，服务器可以处于三种状态之一：</p><ul><li><strong>领导者（Leader）</strong>：处理所有客户端请求，如果客户端联系追随者，追随者会将请求重定向给领导者</li><li><strong>追随者（Follower）</strong>：被动状态，不会发起请求，只响应来自领导者或候选人的请求</li><li><strong>候选人（Candidate）</strong>：用于选举新领导者的中间状态</li></ul><h2 id="领导者选举" tabindex="-1"><a class="header-anchor" href="#领导者选举"><span>领导者选举</span></a></h2><p>Raft 使用心跳机制触发领导者选举。当服务器启动时，它们都是追随者状态。只要追随者从领导者或候选人那里接收到有效的 RPC，它就会保持追随者状态。</p><p>如果追随者在一段时间内（称为选举超时）没有收到通信，它会假设没有可用的领导者，并开始选举：</p><ol><li>追随者增加当前任期号并转换为候选人状态</li><li>候选人给自己投票并向其他服务器发送请求投票的 RPC</li><li>候选人保持候选人状态，直到以下三种情况之一发生： <ul><li>它赢得选举（获得大多数服务器的投票）</li><li>另一个服务器成为领导者</li><li>一段时间过去没有选出领导者</li></ul></li></ol><h2 id="日志复制" tabindex="-1"><a class="header-anchor" href="#日志复制"><span>日志复制</span></a></h2><p>一旦选出领导者，它就开始为客户端请求提供服务。每个客户端请求包含一个要被复制状态机执行的命令：</p><ol><li>领导者将命令附加到其日志中作为新条目</li><li>领导者并行发送 AppendEntries RPC 给追随者</li><li>当条目被安全复制后，领导者应用该条目到其状态机并返回结果给客户端</li><li>如果追随者崩溃或运行缓慢，领导者会无限重试 AppendEntries RPC</li></ol><h2 id="如何学习-raft-算法-适合小白" tabindex="-1"><a class="header-anchor" href="#如何学习-raft-算法-适合小白"><span>如何学习 Raft 算法（适合小白）</span></a></h2><p>作为初学者，以下是学习 Raft 算法的建议步骤：</p><ol><li><p><strong>理解问题背景</strong>：先了解分布式系统中为什么需要共识算法</p></li><li><p><strong>可视化学习</strong>：访问 <a href="http://thesecretlivesofdata.com/raft/" target="_blank" rel="noopener noreferrer">Raft 可视化网站</a>，这个交互式演示能直观地展示 Raft 的工作原理</p></li><li><p><strong>阅读简化版论文</strong>：Raft 论文的作者专门为了易于理解而设计了这个算法，可以从 <a href="https://raft.github.io/raft.pdf" target="_blank" rel="noopener noreferrer">Raft 论文</a> 开始</p></li><li><p><strong>动手实践</strong>：</p><ul><li>尝试用自己熟悉的编程语言实现一个简单版本的 Raft</li><li>或者研究 etcd 的源代码中 Raft 的实现</li></ul></li><li><p><strong>逐步深入</strong>：</p><ul><li>先理解基本的领导者选举和日志复制</li><li>然后学习成员变更、日志压缩等高级特性</li></ul></li><li><p><strong>参考资源</strong>：</p><ul><li><a href="https://raft.github.io/" target="_blank" rel="noopener noreferrer">Raft 官方网站</a></li><li><a href="https://github.com/etcd-io/etcd/tree/main/raft" target="_blank" rel="noopener noreferrer">etcd Raft 实现</a></li><li><a href="https://pdos.csail.mit.edu/6.824/" target="_blank" rel="noopener noreferrer">MIT 6.824 分布式系统课程</a></li></ul></li></ol><h2 id="raft-与-paxos-的比较" tabindex="-1"><a class="header-anchor" href="#raft-与-paxos-的比较"><span>Raft 与 Paxos 的比较</span></a></h2><p>Raft 和 Paxos 都是解决分布式共识问题的算法，但 Raft 被设计为更容易理解和实现：</p><table><thead><tr><th>特性</th><th>Raft</th><th>Paxos</th></tr></thead><tbody><tr><td>设计目标</td><td>可理解性</td><td>理论完备性</td></tr><tr><td>复杂度</td><td>相对简单</td><td>复杂</td></tr><tr><td>角色划分</td><td>明确（领导者、追随者、候选人）</td><td>不明确</td></tr><tr><td>实现难度</td><td>较低</td><td>较高</td></tr><tr><td>使用案例</td><td>etcd, Consul</td><td>Chubby, Spanner</td></tr></tbody></table><h2 id="常见分布式系统使用的共识算法" tabindex="-1"><a class="header-anchor" href="#常见分布式系统使用的共识算法"><span>常见分布式系统使用的共识算法</span></a></h2><p>不同的分布式系统选择了不同的共识算法来保证一致性：</p><table><thead><tr><th>分布式系统</th><th>共识算法</th><th>特点</th></tr></thead><tbody><tr><td>etcd</td><td>Raft</td><td>易于理解，强领导者模型</td></tr><tr><td>Consul</td><td>Raft</td><td>易于理解，强领导者模型</td></tr><tr><td>Zookeeper</td><td>ZAB</td><td>类似于 Raft，但有所不同</td></tr><tr><td>Chubby</td><td>Paxos</td><td>理论完备，实现复杂</td></tr><tr><td>Spanner</td><td>Paxos</td><td>理论完备，实现复杂</td></tr></tbody></table><h3 id="zab-协议与-raft-的区别" tabindex="-1"><a class="header-anchor" href="#zab-协议与-raft-的区别"><span>ZAB 协议与 Raft 的区别</span></a></h3><p>ZAB (Zookeeper Atomic Broadcast) 协议是 Zookeeper 使用的共识算法，与 Raft 有一些相似之处，但也有明显区别：</p><ol><li><p><strong>相似点</strong>：</p><ul><li>都使用强领导者模型</li><li>都有类似的领导者选举机制</li><li>都通过日志复制来保证一致性</li></ul></li><li><p><strong>不同点</strong>：</p><ul><li>ZAB 使用的是&quot;恢复模式&quot;和&quot;广播模式&quot;两个阶段</li><li>ZAB 的领导者选举算法细节不同</li><li>ZAB 协议设计更早，而 Raft 是为了可理解性而设计的</li></ul></li></ol><p>对于初学者来说，理解 Raft 后再学习 ZAB 会更容易，因为 Raft 的设计初衷就是为了易于理解。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>Raft 通过将复杂的共识问题分解为更易于理解的子问题，并引入了强领导者模型，使得分布式系统中的共识算法变得更加清晰和易于实现。这也是为什么 etcd 等现代分布式系统选择 Raft 而非 Paxos 作为其共识算法的原因。</p><p>对于初学者来说，理解 Raft 是进入分布式系统世界的一个很好的起点。通过可视化工具和简化的解释，即使没有深厚的分布式系统背景，也能逐步掌握这个重要的算法。</p><p>ETCD 用了哪个共识算法。</p>',34),i=[o];function n(s,d){return e(),a("div",null,i)}const f=t(l,[["render",n],["__file","raft.html.vue"]]),c=JSON.parse('{"path":"/posts/algorithms_data_structures/algorithms/raft.html","title":"Raft 共识算法","lang":"zh-CN","frontmatter":{"title":"Raft 共识算法","icon":"lightbulb","author":"Wang Shiyu","date":"2025-03-31T00:00:00.000Z","category":["算法"],"tag":["算法","分布式系统","共识算法"],"description":"Raft 共识算法 什么是 Raft？ Raft 是一种为了管理复制日志的共识算法，由 Diego Ongaro 和 John Ousterhout 在 2013 年设计。它的主要目标是提供一个更容易理解的共识算法，同时保持与 Paxos 算法相同的可靠性和性能。 ETCD、Consul 等知名的分布式系统都采用了 Raft 算法作为其共识机制。 Ra...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/JavaPub/posts/algorithms_data_structures/algorithms/raft.html"}],["meta",{"property":"og:site_name","content":"JavaPub"}],["meta",{"property":"og:title","content":"Raft 共识算法"}],["meta",{"property":"og:description","content":"Raft 共识算法 什么是 Raft？ Raft 是一种为了管理复制日志的共识算法，由 Diego Ongaro 和 John Ousterhout 在 2013 年设计。它的主要目标是提供一个更容易理解的共识算法，同时保持与 Paxos 算法相同的可靠性和性能。 ETCD、Consul 等知名的分布式系统都采用了 Raft 算法作为其共识机制。 Ra..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T08:07:59.000Z"}],["meta",{"property":"article:author","content":"Wang Shiyu"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:tag","content":"分布式系统"}],["meta",{"property":"article:tag","content":"共识算法"}],["meta",{"property":"article:published_time","content":"2025-03-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-31T08:07:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Raft 共识算法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-31T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-31T08:07:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Wang Shiyu\\"}]}"]]},"headers":[{"level":2,"title":"什么是 Raft？","slug":"什么是-raft","link":"#什么是-raft","children":[]},{"level":2,"title":"Raft 的核心概念","slug":"raft-的核心概念","link":"#raft-的核心概念","children":[]},{"level":2,"title":"服务器状态","slug":"服务器状态","link":"#服务器状态","children":[]},{"level":2,"title":"领导者选举","slug":"领导者选举","link":"#领导者选举","children":[]},{"level":2,"title":"日志复制","slug":"日志复制","link":"#日志复制","children":[]},{"level":2,"title":"如何学习 Raft 算法（适合小白）","slug":"如何学习-raft-算法-适合小白","link":"#如何学习-raft-算法-适合小白","children":[]},{"level":2,"title":"Raft 与 Paxos 的比较","slug":"raft-与-paxos-的比较","link":"#raft-与-paxos-的比较","children":[]},{"level":2,"title":"常见分布式系统使用的共识算法","slug":"常见分布式系统使用的共识算法","link":"#常见分布式系统使用的共识算法","children":[{"level":3,"title":"ZAB 协议与 Raft 的区别","slug":"zab-协议与-raft-的区别","link":"#zab-协议与-raft-的区别","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1743408479000,"updatedTime":1743408479000,"contributors":[{"name":"javapub","email":"iswangshiyu@foxmail.com","commits":1}]},"readingTime":{"minutes":5.02,"words":1505},"filePathRelative":"posts/algorithms_data_structures/algorithms/raft.md","localizedDate":"2025年3月31日","excerpt":"\\n<h2>什么是 Raft？</h2>\\n<p>Raft 是一种为了管理复制日志的共识算法，由 Diego Ongaro 和 John Ousterhout 在 2013 年设计。它的主要目标是提供一个更容易理解的共识算法，同时保持与 Paxos 算法相同的可靠性和性能。</p>\\n<p>ETCD、Consul 等知名的分布式系统都采用了 Raft 算法作为其共识机制。</p>\\n<h2>Raft 的核心概念</h2>\\n<p>Raft 将共识问题分解为三个相对独立的子问题：</p>\\n<ol>\\n<li><strong>领导者选举（Leader Election）</strong>：当现有领导者失效时，必须选出一个新的领导者</li>\\n<li><strong>日志复制（Log Replication）</strong>：领导者必须从客户端接收日志条目，并将它们复制到集群中的其他服务器</li>\\n<li><strong>安全性（Safety）</strong>：如果任何服务器已经应用了一个特定的日志条目到其状态机，那么其他服务器不能在同一个日志索引位置应用不同的命令</li>\\n</ol>","autoDesc":true}');export{f as comp,c as data};
