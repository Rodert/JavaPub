import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as i,b as n,w as l,d as s,e as t,r as p,o as r}from"./app-Clze77MB.js";const k={},d=i("p",null,[i("strong",null,[s("我是 javapub，一名 "),i("code",null,"Markdown"),s(" 程序员从👨‍💻，八股文种子选手。")])],-1),o=t(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> value[]</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),c=t('<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">transient</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">[] elementData</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // elementData 可以改变</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',1),g=t('<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">transient</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">[] table</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',1),u=i("ol",null,[i("li",null,"Collections.synchronizedMap():返回一个线程安全的 HashMap,内部使用锁机制同步访问 HashMap。"),i("li",null,"ConcurrentHashMap:Java 7 发布的线程安全的 HashMap。内部使用锁分段技术实现线程安全,并发度很高。"),i("li",null,"Hashtable:Hashtable 是遗留的线程安全 HashMap,内部也使用同一把锁,并发度低。不推荐使用。"),i("li",null,"外包装:可以使用 Lock 或者 synchronized 关键字对 HashMap 进行外包装,实现线程安全。")],-1),y=i("ol",null,[i("li",null,"多线程环境下,需谨慎使用非线程安全的类。如 ArrayList、HashMap。"),i("li",null,"尽量选择Java提供的线程安全类,如String、ConcurrentHashMap。"),i("li",null,"如果必须使用非线程安全的类,需要对其进行额外的同步措施,如加锁或者使用同步包装类。"),i("li",null,"在编写代码时,要时刻考虑对象或方法的状态是否在多线程下也能保持一致和正确。这就是我们提到的“线程安全”。 多谢面试官的提问,让我对Java多线程和线程安全有一个比较全面和系统的复习,这些内容对我以后的学习和工作会很有帮助。")],-1),B=i("ul",null,[i("li",null,"wait():让当前线程等待,直到其他线程调用 notify() 方法通知,或经过指定的时间后重新等待。"),i("li",null,"notify():唤醒等待在此对象上的一个线程。如果有多个线程等待,则唤醒优先级最高的线程。"),i("li",null,"notifyAll():唤醒等待在此对象上的所有线程。")],-1),v=t(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> ProducerConsumer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> product </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> isProduced </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> synchronized</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> produce</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 等待,直到产品被消费</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (isProduced) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            try</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">                wait</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">InterruptedException</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">                e</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 生产产品</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        product</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        isProduced </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 通知消费者消费产品</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        notifyAll</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> synchronized</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> consume</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 等待,直到有产品生产</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">isProduced) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            try</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">                wait</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">InterruptedException</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">                e</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            }     </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 消费产品</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        product</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        isProduced </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 通知生产者生产产品</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        notifyAll</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里 wait() 方法使生产线程和消费线程在产品未就绪时等待,notifyAll() 方法在产品就绪时唤醒等待线程。</p>`,2),b=i("ol",null,[i("li",null,"wait() 方法释放锁,sleep() 方法不释放锁。"),i("li",null,"wait() 方法通常被用于线程间通信,sleep() 方法用于暂停线程指定时间。"),i("li",null,"wait() 方法可以在没有指定时间的情况下一直等待,sleep() 方法必须指定等待时间。"),i("li",null,"wait() 方法被唤醒后必须重新获取锁,sleep() 方法睡醒后直接继续执行。 所以简单来说:wait() 可以用于线程间的同步,sleep() 主要用于暂停线程指定时间。")],-1),m=t('<figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225744.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最近我在更新《面试1v1》系列文章，主要以场景化的方式，讲解我们在面试中遇到的问题，致力于让每一位工程师拿到自己心仪的offer，感兴趣可以关注<strong>公众号JavaPub</strong>追更！</p><figure><img src="https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225632.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>🎁目录合集：</p><p>Gitee：<code>https://gitee.com/rodert/JavaPub</code></p><p>GitHub：<code>https://github.com/Rodert/JavaPub</code></p><p><a href="http://javapub.net.cn" target="_blank" rel="noopener noreferrer">http://javapub.net.cn</a></p>',7);function A(D,F){const a=p("font");return r(),h("div",null,[d,i("p",null,[i("strong",null,[n(a,{color:"blue"},{default:l(()=>[s("面试官")]),_:1}),s("： 说说你对多线程的理解?")])]),i("p",null,[i("strong",null,[n(a,{color:"red"},{default:l(()=>[s("候选人：")]),_:1})]),s(" 多线程就是同时运行多个线程,实现一件事的并行处理。比如开个程序,同时下载多个文件,同时处理多个客户端请求等等。 "),i("strong",null,[n(a,{color:"blue"},{default:l(()=>[s("面试官")]),_:1}),s("：那什么是线程安全的?举个例子?")])]),i("p",null,[i("strong",null,[n(a,{color:"red"},{default:l(()=>[s("候选人：")]),_:1})]),s(" 线程安全就是多个线程访问同一个对象或调用同一方法时,对象或方法内部的状态能保证正确。举个例子,String 是线程安全的,因为 String 内部的 char 数组是final的,不可变的。")]),o,i("p",null,[i("strong",null,[n(a,{color:"blue"},{default:l(()=>[s("面试官")]),_:1}),s("：ArrayList线程安全吗?")])]),i("p",null,[i("strong",null,[n(a,{color:"red"},{default:l(()=>[s("候选人：")]),_:1})]),s(" ArrayList 不是线程安全的,因为:")]),c,i("p",null,[s("如果多个线程同时访问一个 ArrayList,其中一个线程正在扩容数组,这时另一个线程在读或添加元素,很可能引起空指针或者越界异常。 "),i("strong",null,[n(a,{color:"blue"},{default:l(()=>[s("面试官")]),_:1}),s("：HashMap 呢?线程安全吗?")])]),i("p",null,[i("strong",null,[n(a,{color:"red"},{default:l(()=>[s("候选人：")]),_:1})]),s(" HashMap 也不是线程安全的,跟 ArrayList 一样,HashMap 在多线程下也可能产生死循环、数据丢失等问题。因为:")]),g,i("p",null,[s("并发情况下,比如两个线程同时 put 新键值对,都重新扩容了数组,都做旧数组到新数组的迁移工作,这就会产生数据丢失的问题。 "),i("strong",null,[n(a,{color:"blue"},{default:l(()=>[s("面试官")]),_:1}),s("：那如何解决 HashMap 的线程安全问题?")])]),i("p",null,[i("strong",null,[n(a,{color:"red"},{default:l(()=>[s("候选人：")]),_:1})]),s(" 有几种常见的解决HashMap线程不安全的方法:")]),u,i("p",null,[i("strong",null,[n(a,{color:"blue"},{default:l(()=>[s("面试官")]),_:1}),s("：谢谢,内容很详细!总结一下,线程安全对我们来说很重要,在编写代码时要时刻考虑清楚。")])]),i("p",null,[i("strong",null,[n(a,{color:"red"},{default:l(()=>[s("候选人：")]),_:1})]),s(" 是的,总结如下:")]),y,i("p",null,[i("strong",null,[n(a,{color:"blue"},{default:l(()=>[s("面试官")]),_:1}),s("： 说说 wait() notify() notifyAll() 的区别?")])]),i("p",null,[i("strong",null,[n(a,{color:"red"},{default:l(()=>[s("候选人：")]),_:1})]),s(" 这三个方法都是用来协调线程间通信的。区别如下:")]),B,i("p",null,[i("strong",null,[n(a,{color:"blue"},{default:l(()=>[s("面试官")]),_:1}),s("：举个例子解释下?")])]),i("p",null,[i("strong",null,[n(a,{color:"red"},{default:l(()=>[s("候选人：")]),_:1})]),s(" 这里是一个经典的生产者消费者模型来解释这三个方法:")]),v,i("p",null,[i("strong",null,[n(a,{color:"blue"},{default:l(()=>[s("面试官")]),_:1}),s("：sleep() 方法和 wait() 方法有什么区别?")])]),i("p",null,[i("strong",null,[n(a,{color:"red"},{default:l(()=>[s("候选人：")]),_:1})]),s(" sleep() 和 wait() 的主要区别在于:")]),b,i("p",null,[i("strong",null,[n(a,{color:"blue"},{default:l(()=>[s("面试官")]),_:1}),s("：完美!谢谢你,这些知识点解释的很透彻。")])]),i("p",null,[i("strong",null,[n(a,{color:"red"},{default:l(()=>[s("候选人：")]),_:1})]),s(" 不客气,多谢面试官的提问,让我对 wait() notify() notifyAll() 以及它们与 sleep() 的区别有了更深的理解,这些都是非常重要的多线程知识点,我会继续加深理解并运用的!")]),m])}const C=e(k,[["render",A],["__file","4.java_duoxiancheng.html.vue"]]),_=JSON.parse('{"path":"/posts/special/1v1/4.java_duoxiancheng.html","title":"Java多线程","lang":"zh-CN","frontmatter":{"title":"Java多线程","icon":"laptop-code","category":["《面试1v1》"],"description":"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。 ： 说说你对多线程的理解? 多线程就是同时运行多个线程,实现一件事的并行处理。比如开个程序,同时下载多个文件,同时处理多个客户端请求等等。 ：那什么是线程安全的?举个例子? 线程安全就是多个线程访问同一个对象或调用同一方法时,对象或方法内部的状态能保证正确。举个例子,S...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/posts/special/1v1/4.java_duoxiancheng.html"}],["meta",{"property":"og:site_name","content":"JavaPub"}],["meta",{"property":"og:title","content":"Java多线程"}],["meta",{"property":"og:description","content":"我是 javapub，一名 Markdown 程序员从👨‍💻，八股文种子选手。 ： 说说你对多线程的理解? 多线程就是同时运行多个线程,实现一件事的并行处理。比如开个程序,同时下载多个文件,同时处理多个客户端请求等等。 ：那什么是线程安全的?举个例子? 线程安全就是多个线程访问同一个对象或调用同一方法时,对象或方法内部的状态能保证正确。举个例子,S..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225744.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T14:35:52.000Z"}],["meta",{"property":"article:author","content":"Mr.Wang"}],["meta",{"property":"article:modified_time","content":"2024-07-03T14:35:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java多线程\\",\\"image\\":[\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225744.jpg\\",\\"https://javapub-common-oss.oss-cn-beijing.aliyuncs.com/javapub/2024%2F06%2F06%2F20240606-225632.png\\"],\\"dateModified\\":\\"2024-07-03T14:35:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Wang\\",\\"url\\":\\"https://javapub.net.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1717568495000,"updatedTime":1720017352000,"contributors":[{"name":"wangshiyu","email":"iswangshiyu@foxmail.com","commits":1}]},"readingTime":{"minutes":4.89,"words":1466},"filePathRelative":"posts/special/1v1/4.java_duoxiancheng.md","localizedDate":"2024年6月5日","excerpt":"<p><strong>我是 javapub，一名 <code>Markdown</code> 程序员从👨‍💻，八股文种子选手。</strong></p>\\n<p><strong>： 说说你对多线程的理解?</strong></p>\\n<p><strong></strong> 多线程就是同时运行多个线程,实现一件事的并行处理。比如开个程序,同时下载多个文件,同时处理多个客户端请求等等。\\n<strong>：那什么是线程安全的?举个例子?</strong></p>\\n<p><strong></strong> 线程安全就是多个线程访问同一个对象或调用同一方法时,对象或方法内部的状态能保证正确。举个例子,String 是线程安全的,因为 String 内部的 char 数组是final的,不可变的。</p>","autoDesc":true}');export{C as comp,_ as data};
